{
  "versionDates": {
    "10.0": "2017-10-05",
    "10.1": "2017-11-09",
    "10.10": "2019-08-08",
    "10.11": "2019-11-14",
    "10.12": "2020-02-13",
    "10.13": "2020-05-14",
    "10.14": "2020-08-13",
    "10.15": "2020-11-12",
    "10.16": "2021-02-11",
    "10.17": "2021-05-13",
    "10.18": "2021-08-12",
    "10.19": "2021-11-11",
    "10.2": "2018-02-08",
    "10.20": "2022-02-10",
    "10.21": "2022-05-12",
    "10.22": "2022-08-11",
    "10.23": "2022-11-10",
    "10.3": "2018-03-01",
    "10.4": "2018-05-10",
    "10.5": "2018-08-09",
    "10.6": "2018-11-08",
    "10.7": "2019-02-14",
    "10.8": "2019-05-09",
    "10.9": "2019-06-20",
    "11.0": "2018-10-18",
    "11.1": "2018-11-08",
    "11.10": "2020-11-12",
    "11.11": "2021-02-11",
    "11.12": "2021-05-13",
    "11.13": "2021-08-12",
    "11.14": "2021-11-11",
    "11.15": "2022-02-10",
    "11.16": "2022-05-12",
    "11.17": "2022-08-11",
    "11.18": "2022-11-10",
    "11.19": "2023-02-09",
    "11.2": "2019-02-14",
    "11.20": "2023-05-11",
    "11.21": "2023-08-10",
    "11.22": "2023-11-09",
    "11.3": "2019-05-09",
    "11.4": "2019-06-20",
    "11.5": "2019-08-08",
    "11.6": "2019-11-14",
    "11.7": "2020-02-13",
    "11.8": "2020-05-14",
    "11.9": "2020-08-13",
    "12.0": "2019-10-03",
    "12.1": "2019-11-14",
    "12.10": "2022-02-10",
    "12.11": "2022-05-12",
    "12.12": "2022-08-11",
    "12.13": "2022-11-10",
    "12.14": "2023-02-09",
    "12.15": "2023-05-11",
    "12.16": "2023-08-10",
    "12.17": "2023-11-09",
    "12.18": "2024-02-08",
    "12.19": "2024-05-09",
    "12.2": "2020-02-13",
    "12.20": "2024-08-08",
    "12.3": "2020-05-14",
    "12.4": "2020-08-13",
    "12.5": "2020-11-12",
    "12.6": "2021-02-11",
    "12.7": "2021-05-13",
    "12.8": "2021-08-12",
    "12.9": "2021-11-11",
    "13.0": "2020-09-24",
    "13.1": "2020-11-12",
    "13.10": "2023-02-09",
    "13.11": "2023-05-11",
    "13.12": "2023-08-10",
    "13.13": "2023-11-09",
    "13.14": "2024-02-08",
    "13.15": "2024-05-09",
    "13.16": "2024-08-08",
    "13.2": "2021-02-11",
    "13.3": "2021-05-13",
    "13.4": "2021-08-12",
    "13.5": "2021-11-11",
    "13.6": "2022-02-10",
    "13.7": "2022-05-12",
    "13.8": "2022-08-11",
    "13.9": "2022-11-10",
    "14.0": "2021-09-30",
    "14.1": "2021-11-11",
    "14.10": "2023-11-09",
    "14.11": "2024-02-08",
    "14.12": "2024-05-09",
    "14.13": "2024-08-08",
    "14.2": "2022-02-10",
    "14.3": "2022-05-12",
    "14.4": "2022-06-16",
    "14.5": "2022-08-11",
    "14.6": "2022-11-10",
    "14.7": "2023-02-09",
    "14.8": "2023-05-11",
    "14.9": "2023-08-10",
    "15.0": "2022-10-13",
    "15.1": "2022-11-10",
    "15.2": "2023-02-09",
    "15.3": "2023-05-11",
    "15.4": "2023-08-10",
    "15.5": "2023-11-09",
    "15.6": "2024-02-08",
    "15.7": "2024-05-09",
    "15.8": "2024-08-08",
    "16.0": "2023-09-14",
    "16.1": "2023-11-09",
    "16.2": "2024-02-08",
    "16.3": "2024-05-09",
    "16.4": "2024-08-08",
    "17.0": "2024-09-26"
  },
  "bugs": [
    {
      "cve": null,
      "title": "Add SCRAM-SHA-256 support for password negotiation and storage",
      "description": "Add SCRAM-SHA-256 support for password negotiation and storage (Michael Paquier, Heikki Linnakangas)\nThis provides better security than the existing `md5` negotiation and storage method.",
      "fixedIn": "10.0",
      "contributor": "Michael Paquier, Heikki Linnakangas"
    },
    {
      "cve": null,
      "title": "Allow restrictive row-level security policies",
      "description": "Allow restrictive row-level security policies (Stephen Frost)\nPreviously all security policies were permissive, meaning that any matching policy allowed access. A restrictive policy must match for access to be granted. These policy types can be combined.",
      "fixedIn": "10.0",
      "contributor": "Stephen Frost"
    },
    {
      "cve": null,
      "title": "Issue `fsync",
      "description": "Issue `fsync()()` on the output files generated by pg_dump and pg_dumpall (Michael Paquier)\nThis provides more security that the output is safely stored on disk before the program exits. This can be disabled with the new --no-sync option.",
      "fixedIn": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "cve": "CVE-2017-15099",
      "title": "Ensure that `INSERT ... ON CONFLICT DO UPDATE` checks table permissions and RLS policies in all cases",
      "description": "Ensure that `INSERT ... ON CONFLICT DO UPDATE` checks table permissions and RLS policies in all cases (Dean Rasheed)\nThe update path of `INSERT ... ON CONFLICT DO UPDATE` requires `SELECT` permission on the columns of the arbiter index, but it failed to check for that in the case of an arbiter specified by constraint name. In addition, for a table with row level security enabled, it failed to check updated rows against the table's `SELECT` policies (regardless of how the arbiter index was specified). (CVE-2017-15099)",
      "fixedIn": "10.1",
      "contributor": "Dean Rasheed"
    },
    {
      "cve": null,
      "title": "Fix handling of whole-row variables in `WITH CHECK OPTION` expressions and row-level-security policy expressions",
      "description": "Fix handling of whole-row variables in `WITH CHECK OPTION` expressions and row-level-security policy expressions (Andres Freund)\nPreviously, such usage might result in bogus errors about row type mismatches.",
      "fixedIn": "10.11",
      "contributor": "Andres Freund"
    },
    {
      "cve": null,
      "title": "In pg_dump, ensure stable output order for similarly-named triggers and row-level-security policy objects",
      "description": "In pg_dump, ensure stable output order for similarly-named triggers and row-level-security policy objects (Benjie Gillam)\nPreviously, if two triggers on different tables had the same names, they would be sorted in OID-based order, which is less desirable than sorting them by table name. Likewise for RLS policies.",
      "fixedIn": "10.11",
      "contributor": "Benjie Gillam"
    },
    {
      "cve": "CVE-2020-25695",
      "title": "Block DECLARE CURSOR ... WITH HOLD and firing of deferred triggers within index expressions and materialized view queries",
      "description": "Block DECLARE CURSOR ... WITH HOLD and firing of deferred triggers within index expressions and materialized view queries (Noah Misch)\nThis is essentially a leak in the “security restricted operation” sandbox mechanism. An attacker having permission to create non-temporary SQL objects could parlay this leak to execute arbitrary SQL code as a superuser.\nThe PostgreSQL Project thanks Etienne Stalmans for reporting this problem. (CVE-2020-25695)",
      "fixedIn": "10.15",
      "contributor": "Noah Misch"
    },
    {
      "cve": null,
      "title": "Make libpq support arbitrary-length lines in .pgpass files",
      "description": "Make libpq support arbitrary-length lines in .pgpass files (Tom Lane)\nThis is mostly useful to allow using very long security tokens as passwords.",
      "fixedIn": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2006-2313",
      "title": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data",
      "description": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data (Tom Lane)\nAn incorrectly-encoded multibyte character near the end of a string could cause various processing loops to run past the string's terminating NUL, with results ranging from no detectable issue to a program crash, depending on what happens to be in the following memory. This is reminiscent of CVE-2006-2313, although these particular cases do not appear to have interesting security consequences.",
      "fixedIn": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that `GetSharedSecurityLabel",
      "description": "Ensure that `GetSharedSecurityLabel()()` can be used in a newly-started session that has not yet built its critical relation cache entries (Jeff Davis)",
      "fixedIn": "10.19",
      "contributor": "Jeff Davis"
    },
    {
      "cve": null,
      "title": "Fix pg_dump to make ACL",
      "description": "Fix pg_dump to make ACL (permissions), comment, and security label entries reliably identifiable in archive output formats (Tom Lane)\nThe “tag” portion of an ACL archive entry was usually just the name of the associated object. Make it start with the object type instead, bringing ACLs into line with the convention already used for comment and security label archive entries. Also, fix the comment and security label entries for the whole database, if present, to make their tags start with `DATABASE` so that they also follow this convention. This prevents false matches in code that tries to identify large-object-related entries by seeing if the tag starts with `LARGE OBJECT`. That could have resulted in misclassifying entries as data rather than schema, with undesirable results in a schema-only or data-only dump.\nNote that this change has user-visible results in the output of pg_restore --list.",
      "fixedIn": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Confine additional operations within “security restricted operation” sandboxes (Sergey Shinderuk, Noah Misch)\nAutovacuum, CLUSTER, CREATE INDEX, REINDEX, REFRESH MATERIALIZED VIEW, and pg_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "10.21",
      "contributor": "Sergey Shinderuk, Noah Misch"
    },
    {
      "cve": null,
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Disallow execution of SPI functions during PL/Perl function compilation (Tom Lane)\nPerl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "10.21",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Document how to configure installations and applications to guard against search-path-dependent trojan-horse attacks from other users",
      "description": "Document how to configure installations and applications to guard against search-path-dependent trojan-horse attacks from other users (Noah Misch)\nUsing a search_path setting that includes any schemas writable by a hostile user enables that user to capture control of queries and then run arbitrary SQL code with the permissions of the attacked user. While it is possible to write queries that are proof against such hijacking, it is notationally tedious, and it's very easy to overlook holes. Therefore, we now recommend configurations in which no untrusted schemas appear in one's search path. Relevant documentation appears in Section&nbsp;5.8.6 (for database administrators and users), Section&nbsp;33.1 (for application authors), Section&nbsp;37.15.6 (for extension authors), and CREATE FUNCTION (for authors of `SECURITY DEFINER` functions). (CVE-2018-1058)",
      "fixedIn": "10.3",
      "contributor": "Noah Misch"
    },
    {
      "cve": "CVE-2018-1115",
      "title": "Remove public execute privilege from contrib/adminpack's `pg_logfile_rotate",
      "description": "Remove public execute privilege from contrib/adminpack's `pg_logfile_rotate()()` function (Stephen Frost)\n`pg_logfile_rotate()()` is a deprecated wrapper for the core function `pg_rotate_logfile()()`. When that function was changed to rely on SQL privileges for access control rather than a hard-coded superuser check, `pg_logfile_rotate()()` should have been updated as well, but the need for this was missed. Hence, if adminpack is installed, any user could request a logfile rotation, creating a minor security issue.\nAfter installing this update, administrators should update adminpack by performing `ALTER EXTENSION adminpack UPDATE` in each database in which adminpack is installed. (CVE-2018-1115)",
      "fixedIn": "10.4",
      "contributor": "Stephen Frost"
    },
    {
      "cve": "CVE-2018-10915",
      "title": "Fix failure to reset libpq's state fully between connection attempts",
      "description": "Fix failure to reset libpq's state fully between connection attempts (Tom Lane)\nAn unprivileged user of dblink or postgres_fdw could bypass the checks intended to prevent use of server-side credentials, such as a ~/.pgpass file owned by the operating-system user running the server. Servers allowing peer authentication on local connections are particularly vulnerable. Other attacks such as SQL injection into a postgres_fdw session are also possible. Attacking postgres_fdw in this way requires the ability to create a foreign server object with selected connection parameters, but any user with access to dblink could exploit the problem. In general, an attacker with the ability to select the connection parameters for a libpq-using application could cause mischief, though other plausible attack scenarios are harder to think of. Our thanks to Andrew Krasichkov for reporting this issue. (CVE-2018-10915)",
      "fixedIn": "10.5",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2018-16850",
      "title": "Ensure proper quoting of transition table names when pg_dump emits CREATE TRIGGER ... REFERENCING commands",
      "description": "Ensure proper quoting of transition table names when pg_dump emits CREATE TRIGGER ... REFERENCING commands (Tom Lane)\nThis oversight could be exploited by an unprivileged user to gain superuser privileges during the next dump/reload or pg_upgrade run. (CVE-2018-16850)",
      "fixedIn": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2017-7484",
      "title": "Prevent row-level security policies from being bypassed via selectivity estimators",
      "description": "Prevent row-level security policies from being bypassed via selectivity estimators (Dean Rasheed)\nSome of the planner's selectivity estimators apply user-defined operators to values found in pg_statistic (e.g., most-common values). A leaky operator therefore can disclose some of the entries in a data column, even if the calling user lacks permission to read that column. In CVE-2017-7484 we added restrictions to forestall that, but we failed to consider the effects of row-level security. A user who has SQL permission to read a column, but who is forbidden to see certain rows due to RLS policy, might still learn something about those rows' contents via a leaky operator. This patch further tightens the rules, allowing leaky operators to be applied to statistics data only when there is no relevant RLS policy. (CVE-2019-10130)",
      "fixedIn": "10.8",
      "contributor": "Dean Rasheed"
    },
    {
      "cve": null,
      "title": "Ensure that sub-SELECTs appearing in row-level-security policy expressions are executed with the correct user's permissions",
      "description": "Ensure that sub-SELECTs appearing in row-level-security policy expressions are executed with the correct user's permissions (Dean Rasheed)\nPreviously, if the table having the RLS policy was accessed via a view, such checks might be executed as the user calling the view, not as the view owner as they should be.",
      "fixedIn": "10.8",
      "contributor": "Dean Rasheed"
    },
    {
      "cve": null,
      "title": "Make pg_dump dump the properties of a database, not just its contents",
      "description": "Make pg_dump dump the properties of a database, not just its contents (Haribabu Kommi)\n          Previously, attributes of the database itself, such as database-level GRANT/REVOKE permissions and ALTER DATABASE SET variable settings, were only dumped by pg_dumpall. Now pg_dump --create and pg_restore --create will restore these database properties in addition to the objects within the database. pg_dumpall -g now only dumps role- and tablespace-related attributes. pg_dumpall's complete output (without -g) is unchanged.\n          pg_dump and pg_restore, without --create, no longer dump/restore database-level comments and security labels; those are now treated as properties of the database.\n          pg_dumpall's output script will now always create databases with their original locale and encoding, and hence will fail if the locale or encoding name is unknown to the destination system. Previously, CREATE DATABASE would be emitted without these specifications if the database locale and encoding matched the old cluster's defaults.\n          pg_dumpall --clean now restores the original locale and encoding settings of the `postgres` and `template1` databases, as well as those of user-created databases.",
      "fixedIn": "11.0",
      "contributor": "Haribabu Kommi"
    },
    {
      "cve": null,
      "title": "Remove the chkpass extension",
      "description": "Remove the chkpass extension (Peter Eisentraut)\n            This extension is no longer considered to be a usable security tool or example of how to write an extension.",
      "fixedIn": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "cve": "CVE-2018-16850",
      "title": "Ensure proper quoting of transition table names when pg_dump emits CREATE TRIGGER ... REFERENCING commands",
      "description": "Ensure proper quoting of transition table names when pg_dump emits CREATE TRIGGER ... REFERENCING commands (Tom Lane)\n          This oversight could be exploited by an unprivileged user to gain superuser privileges during the next dump/reload or pg_upgrade run. (CVE-2018-16850)",
      "fixedIn": "11.1",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2020-25695",
      "title": "Block DECLARE CURSOR ... WITH HOLD and firing of deferred triggers within index expressions and materialized view queries",
      "description": "Block DECLARE CURSOR ... WITH HOLD and firing of deferred triggers within index expressions and materialized view queries (Noah Misch)\n          This is essentially a leak in the “security restricted operation” sandbox mechanism. An attacker having permission to create non-temporary SQL objects could parlay this leak to execute arbitrary SQL code as a superuser.\n          The PostgreSQL Project thanks Etienne Stalmans for reporting this problem. (CVE-2020-25695)",
      "fixedIn": "11.10",
      "contributor": "Noah Misch"
    },
    {
      "cve": null,
      "title": "Make libpq support arbitrary-length lines in .pgpass files",
      "description": "Make libpq support arbitrary-length lines in .pgpass files (Tom Lane)\n          This is mostly useful to allow using very long security tokens as passwords.",
      "fixedIn": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2006-2313",
      "title": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data",
      "description": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data (Tom Lane)\n          An incorrectly-encoded multibyte character near the end of a string could cause various processing loops to run past the string's terminating NUL, with results ranging from no detectable issue to a program crash, depending on what happens to be in the following memory. This is reminiscent of CVE-2006-2313, although these particular cases do not appear to have interesting security consequences.",
      "fixedIn": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that `GetSharedSecurityLabel",
      "description": "Ensure that `GetSharedSecurityLabel()()` can be used in a newly-started session that has not yet built its critical relation cache entries (Jeff Davis)",
      "fixedIn": "11.14",
      "contributor": "Jeff Davis"
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Confine additional operations within “security restricted operation” sandboxes (Sergey Shinderuk, Noah Misch)\n          Autovacuum, CLUSTER, CREATE INDEX, REINDEX, REFRESH MATERIALIZED VIEW, and pg_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "11.16",
      "contributor": "Sergey Shinderuk, Noah Misch"
    },
    {
      "cve": null,
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Disallow execution of SPI functions during PL/Perl function compilation (Tom Lane)\n          Perl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "11.16",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent CREATE SCHEMA from defeating changes in search_path",
      "description": "Prevent CREATE SCHEMA from defeating changes in search_path (Alexander Lakhin)\n          Within a CREATE SCHEMA command, objects in the prevailing search_path, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure search_path. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "11.20",
      "contributor": "Alexander Lakhin"
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "Enforce row-level security policies correctly after inlining a set-returning function (Stephen Frost, Tom Lane)\n          If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n          The PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "11.20",
      "contributor": "Stephen Frost, Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables (Antonin Houska)\n          The documentation is quite clear that COPY TO copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "11.20",
      "contributor": "Antonin Houska"
    },
    {
      "cve": null,
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions",
      "description": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions (Tom Lane)",
      "fixedIn": "11.21",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "Detect integer overflow while computing new array dimensions (Tom Lane)\n          When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes (Noah Misch, Jelte Fennema-Nio)\n          The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n          Also ensure that the is_superuser parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n          The PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "11.22",
      "contributor": "Noah Misch, Jelte Fennema-Nio"
    },
    {
      "cve": "CVE-2017-7484",
      "title": "Prevent row-level security policies from being bypassed via selectivity estimators",
      "description": "Prevent row-level security policies from being bypassed via selectivity estimators (Dean Rasheed)\n          Some of the planner's selectivity estimators apply user-defined operators to values found in pg_statistic (e.g., most-common values). A leaky operator therefore can disclose some of the entries in a data column, even if the calling user lacks permission to read that column. In CVE-2017-7484 we added restrictions to forestall that, but we failed to consider the effects of row-level security. A user who has SQL permission to read a column, but who is forbidden to see certain rows due to RLS policy, might still learn something about those rows' contents via a leaky operator. This patch further tightens the rules, allowing leaky operators to be applied to statistics data only when there is no relevant RLS policy. (CVE-2019-10130)",
      "fixedIn": "11.3",
      "contributor": "Dean Rasheed"
    },
    {
      "cve": null,
      "title": "Ensure that sub-SELECTs appearing in row-level-security policy expressions are executed with the correct user's permissions",
      "description": "Ensure that sub-SELECTs appearing in row-level-security policy expressions are executed with the correct user's permissions (Dean Rasheed)\n          Previously, if the table having the RLS policy was accessed via a view, such checks might be executed as the user calling the view, not as the view owner as they should be.",
      "fixedIn": "11.3",
      "contributor": "Dean Rasheed"
    },
    {
      "cve": null,
      "title": "Fix handling of whole-row variables in `WITH CHECK OPTION` expressions and row-level-security policy expressions",
      "description": "Fix handling of whole-row variables in `WITH CHECK OPTION` expressions and row-level-security policy expressions (Andres Freund)\n          Previously, such usage might result in bogus errors about row type mismatches.",
      "fixedIn": "11.6",
      "contributor": "Andres Freund"
    },
    {
      "cve": null,
      "title": "In pg_dump, ensure stable output order for similarly-named triggers and row-level-security policy objects",
      "description": "In pg_dump, ensure stable output order for similarly-named triggers and row-level-security policy objects (Benjie Gillam)\n          Previously, if two triggers on different tables had the same names, they would be sorted in OID-based order, which is less desirable than sorting them by table name. Likewise for RLS policies.",
      "fixedIn": "11.6",
      "contributor": "Benjie Gillam"
    },
    {
      "cve": null,
      "title": "In pg_dump, ensure stable output order for similarly-named triggers and row-level-security policy objects",
      "description": "In pg_dump, ensure stable output order for similarly-named triggers and row-level-security policy objects (Benjie Gillam)\n          Previously, if two triggers on different tables had the same names, they would be sorted in OID-based order, which is less desirable than sorting them by table name. Likewise for RLS policies.",
      "fixedIn": "12.1",
      "contributor": "Benjie Gillam"
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Confine additional operations within “security restricted operation” sandboxes (Sergey Shinderuk, Noah Misch)\n          Autovacuum, CLUSTER, CREATE INDEX, REINDEX, REFRESH MATERIALIZED VIEW, and pg_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "12.11",
      "contributor": "Sergey Shinderuk, Noah Misch"
    },
    {
      "cve": null,
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Disallow execution of SPI functions during PL/Perl function compilation (Tom Lane)\n          Perl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent CREATE SCHEMA from defeating changes in search_path",
      "description": "Prevent CREATE SCHEMA from defeating changes in search_path (Alexander Lakhin)\n          Within a CREATE SCHEMA command, objects in the prevailing search_path, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure search_path. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "12.15",
      "contributor": "Alexander Lakhin"
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "Enforce row-level security policies correctly after inlining a set-returning function (Stephen Frost, Tom Lane)\n          If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n          The PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "12.15",
      "contributor": "Stephen Frost, Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables (Antonin Houska)\n          The documentation is quite clear that COPY TO copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "12.15",
      "contributor": "Antonin Houska"
    },
    {
      "cve": null,
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions",
      "description": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions (Tom Lane)",
      "fixedIn": "12.16",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "Detect integer overflow while computing new array dimensions (Tom Lane)\n          When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes (Noah Misch, Jelte Fennema-Nio)\n          The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n          Also ensure that the is_superuser parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n          The PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "12.17",
      "contributor": "Noah Misch, Jelte Fennema-Nio"
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY (Heikki Linnakangas)\n          One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running REFRESH. Fix things so that all user-determined code is run as the view's owner, as expected.\n          The only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "12.18",
      "contributor": "Heikki Linnakangas"
    },
    {
      "cve": null,
      "title": "In pg_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "In pg_dump, don't dump RLS policies or security labels for extension member objects (Tom Lane, Jacob Champion)\n          Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "12.18",
      "contributor": "Tom Lane, Jacob Champion"
    },
    {
      "cve": "CVE-2020-25695",
      "title": "Block DECLARE CURSOR ... WITH HOLD and firing of deferred triggers within index expressions and materialized view queries",
      "description": "Block DECLARE CURSOR ... WITH HOLD and firing of deferred triggers within index expressions and materialized view queries (Noah Misch)\n          This is essentially a leak in the “security restricted operation” sandbox mechanism. An attacker having permission to create non-temporary SQL objects could parlay this leak to execute arbitrary SQL code as a superuser.\n          The PostgreSQL Project thanks Etienne Stalmans for reporting this problem. (CVE-2020-25695)",
      "fixedIn": "12.5",
      "contributor": "Noah Misch"
    },
    {
      "cve": null,
      "title": "Make libpq support arbitrary-length lines in .pgpass files",
      "description": "Make libpq support arbitrary-length lines in .pgpass files (Tom Lane)\n          This is mostly useful to allow using very long security tokens as passwords.",
      "fixedIn": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2006-2313",
      "title": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data",
      "description": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data (Tom Lane)\n          An incorrectly-encoded multibyte character near the end of a string could cause various processing loops to run past the string's terminating NUL, with results ranging from no detectable issue to a program crash, depending on what happens to be in the following memory. This is reminiscent of CVE-2006-2313, although these particular cases do not appear to have interesting security consequences.",
      "fixedIn": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that `GetSharedSecurityLabel",
      "description": "Ensure that `GetSharedSecurityLabel()()` can be used in a newly-started session that has not yet built its critical relation cache entries (Jeff Davis)",
      "fixedIn": "12.9",
      "contributor": "Jeff Davis"
    },
    {
      "cve": null,
      "title": "Allow only superusers to view the ssl_passphrase_command setting",
      "description": "Allow only superusers to view the ssl_passphrase_command setting (Insung Moon)\n              This was changed as a security precaution.",
      "fixedIn": "13.0",
      "contributor": "Insung Moon"
    },
    {
      "cve": "CVE-2020-25695",
      "title": "Block DECLARE CURSOR ... WITH HOLD and firing of deferred triggers within index expressions and materialized view queries",
      "description": "Block DECLARE CURSOR ... WITH HOLD and firing of deferred triggers within index expressions and materialized view queries (Noah Misch)\n          This is essentially a leak in the “security restricted operation” sandbox mechanism. An attacker having permission to create non-temporary SQL objects could parlay this leak to execute arbitrary SQL code as a superuser.\n          The PostgreSQL Project thanks Etienne Stalmans for reporting this problem. (CVE-2020-25695)",
      "fixedIn": "13.1",
      "contributor": "Noah Misch"
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent CREATE SCHEMA from defeating changes in search_path",
      "description": "Prevent CREATE SCHEMA from defeating changes in search_path (Alexander Lakhin)\n          Within a CREATE SCHEMA command, objects in the prevailing search_path, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure search_path. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "13.11",
      "contributor": "Alexander Lakhin"
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "Enforce row-level security policies correctly after inlining a set-returning function (Stephen Frost, Tom Lane)\n          If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n          The PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "13.11",
      "contributor": "Stephen Frost, Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables (Antonin Houska)\n          The documentation is quite clear that COPY TO copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "13.11",
      "contributor": "Antonin Houska"
    },
    {
      "cve": null,
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions",
      "description": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions (Tom Lane)",
      "fixedIn": "13.12",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "Detect integer overflow while computing new array dimensions (Tom Lane)\n          When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes (Noah Misch, Jelte Fennema-Nio)\n          The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n          Also ensure that the is_superuser parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n          The PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "13.13",
      "contributor": "Noah Misch, Jelte Fennema-Nio"
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY (Heikki Linnakangas)\n          One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running REFRESH. Fix things so that all user-determined code is run as the view's owner, as expected.\n          The only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "13.14",
      "contributor": "Heikki Linnakangas"
    },
    {
      "cve": null,
      "title": "In pg_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "In pg_dump, don't dump RLS policies or security labels for extension member objects (Tom Lane, Jacob Champion)\n          Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "13.14",
      "contributor": "Tom Lane, Jacob Champion"
    },
    {
      "cve": "CVE-2021-20229",
      "title": "Fix failure to check per-column `SELECT` privileges in some join queries",
      "description": "Fix failure to check per-column `SELECT` privileges in some join queries (Tom Lane)\n          In some cases involving joins, the parser failed to record all the columns read by a query in the column-usage bitmaps that are used for permissions checking. Although the executor would still insist on some sort of `SELECT` privilege to run the query, this meant that a user having `SELECT` privilege on only one column of a table could nonetheless read all its columns through a suitably crafted query.\n          A stored view that is subject to this problem will have incomplete column-usage bitmaps, and thus permissions will still not be enforced properly on the view after updating. In installations that depend on column-level permissions for security, it is recommended to CREATE OR REPLACE all user-defined views to cause them to be re-parsed.\n          The PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2021-20229)",
      "fixedIn": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2006-2313",
      "title": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data",
      "description": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data (Tom Lane)\n          An incorrectly-encoded multibyte character near the end of a string could cause various processing loops to run past the string's terminating NUL, with results ranging from no detectable issue to a program crash, depending on what happens to be in the following memory. This is reminiscent of CVE-2006-2313, although these particular cases do not appear to have interesting security consequences.",
      "fixedIn": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that `GetSharedSecurityLabel",
      "description": "Ensure that `GetSharedSecurityLabel()()` can be used in a newly-started session that has not yet built its critical relation cache entries (Jeff Davis)",
      "fixedIn": "13.5",
      "contributor": "Jeff Davis"
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Confine additional operations within “security restricted operation” sandboxes (Sergey Shinderuk, Noah Misch)\n          Autovacuum, CLUSTER, CREATE INDEX, REINDEX, REFRESH MATERIALIZED VIEW, and pg_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "13.7",
      "contributor": "Sergey Shinderuk, Noah Misch"
    },
    {
      "cve": null,
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Disallow execution of SPI functions during PL/Perl function compilation (Tom Lane)\n          Perl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "cve": null,
      "title": "Allow SQL-language functions and procedures to use SQL-standard function bodies",
      "description": "Allow SQL-language functions and procedures to use SQL-standard function bodies (Peter Eisentraut)\n            Previously only string-literal function bodies were supported. When writing a function or procedure in SQL-standard syntax, the body is parsed immediately and stored as a parse tree. This allows better tracking of function dependencies, and can have security benefits.",
      "fixedIn": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "cve": null,
      "title": "Mark built-in type coercion functions as leakproof where possible",
      "description": "Mark built-in type coercion functions as leakproof where possible (Tom Lane)\n            This allows more use of functions that require type conversion in security-sensitive situations.",
      "fixedIn": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that `GetSharedSecurityLabel",
      "description": "Ensure that `GetSharedSecurityLabel()()` can be used in a newly-started session that has not yet built its critical relation cache entries (Jeff Davis)",
      "fixedIn": "14.1",
      "contributor": "Jeff Davis"
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "Detect integer overflow while computing new array dimensions (Tom Lane)\n          When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes (Noah Misch, Jelte Fennema-Nio)\n          The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n          Also ensure that the is_superuser parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n          The PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "14.10",
      "contributor": "Noah Misch, Jelte Fennema-Nio"
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY (Heikki Linnakangas)\n          One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running REFRESH. Fix things so that all user-determined code is run as the view's owner, as expected.\n          The only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "14.11",
      "contributor": "Heikki Linnakangas"
    },
    {
      "cve": null,
      "title": "In pg_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "In pg_dump, don't dump RLS policies or security labels for extension member objects (Tom Lane, Jacob Champion)\n          Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "14.11",
      "contributor": "Tom Lane, Jacob Champion"
    },
    {
      "cve": "CVE-2024-4317",
      "title": "Restrict visibility of pg_stats_ext and pg_stats_ext_exprs entries to the table owner",
      "description": "Restrict visibility of pg_stats_ext and pg_stats_ext_exprs entries to the table owner (Nathan Bossart)\n          These views failed to hide statistics for expressions that involve columns the accessing user does not have permission to read. View columns such as most_common_vals might expose security-relevant data. The potential interactions here are not fully clear, so in the interest of erring on the side of safety, make rows in these views visible only to the owner of the associated table.\n          The PostgreSQL Project thanks Lukas Fittl for reporting this problem. (CVE-2024-4317)\n          By itself, this fix will only fix the behavior in newly initdb'd database clusters. If you wish to apply this change in an existing cluster, you will need to do the following:\n          \n            \n              \n                Find the SQL script fix-CVE-2024-4317.sql in the `share` directory of the PostgreSQL installation (typically located someplace like /usr/share/postgresql/). Be sure to use the script appropriate to your PostgreSQL major version. If you do not see this file, either your version is not vulnerable (only v14–v16 are affected) or your minor version is too old to have the fix.\n              \n              \n                In each database of the cluster, run the fix-CVE-2024-4317.sql script as superuser. In psql this would look like\n                \\i /usr/share/postgresql/fix-CVE-2024-4317.sql\n\n                (adjust the file path as appropriate). Any error probably indicates that you've used the wrong script version. It will not hurt to run the script more than once.\n              \n              \n                Do not forget to include the `template0` and `template1` databases, or the vulnerability will still exist in databases you create later. To fix `template0`, you'll need to temporarily make it accept connections. Do that with\n                ALTER DATABASE template0 WITH ALLOW_CONNECTIONS true;\n\n                and then after fixing `template0`, undo it with\n                ALTER DATABASE template0 WITH ALLOW_CONNECTIONS false;\n\n              \n            \n          ",
      "fixedIn": "14.12",
      "contributor": "Nathan Bossart"
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Confine additional operations within “security restricted operation” sandboxes (Sergey Shinderuk, Noah Misch)\n          Autovacuum, CLUSTER, CREATE INDEX, REINDEX, REFRESH MATERIALIZED VIEW, and pg_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "14.3",
      "contributor": "Sergey Shinderuk, Noah Misch"
    },
    {
      "cve": null,
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Disallow execution of SPI functions during PL/Perl function compilation (Tom Lane)\n          Perl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent CREATE SCHEMA from defeating changes in search_path",
      "description": "Prevent CREATE SCHEMA from defeating changes in search_path (Alexander Lakhin)\n          Within a CREATE SCHEMA command, objects in the prevailing search_path, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure search_path. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "14.8",
      "contributor": "Alexander Lakhin"
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "Enforce row-level security policies correctly after inlining a set-returning function (Stephen Frost, Tom Lane)\n          If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n          The PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "14.8",
      "contributor": "Stephen Frost, Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables (Antonin Houska)\n          The documentation is quite clear that COPY TO copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "14.8",
      "contributor": "Antonin Houska"
    },
    {
      "cve": null,
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions",
      "description": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions (Tom Lane)",
      "fixedIn": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Remove `PUBLIC` creation permission on the `public` schema",
      "description": "Remove `PUBLIC` creation permission on the `public` schema (Noah Misch)\n          The new default is one of the secure schema usage patterns that Section&nbsp;5.9.6 has recommended since the security release for CVE-2018-1058. The change applies to new database clusters and to newly-created databases in existing clusters. Upgrading a cluster or restoring a database dump will preserve `public`'s existing permissions.\n          For existing databases, especially those having multiple users, consider revoking `CREATE` permission on the `public` schema to adopt this new default. For new databases having no need to defend against insider threats, granting `CREATE` permission will yield the behavior of prior releases.",
      "fixedIn": "15.0",
      "contributor": "Noah Misch"
    },
    {
      "cve": null,
      "title": "Allow logical replication to run as the owner of the subscription",
      "description": "Allow logical replication to run as the owner of the subscription (Mark Dilger)\n          Because row-level security policies are not checked, only superusers, roles with `bypassrls`, and table owners can replicate into tables with row-level security policies.",
      "fixedIn": "15.0",
      "contributor": "Mark Dilger"
    },
    {
      "cve": null,
      "title": "Make pg_dump dump `public` schema ownership changes and security labels",
      "description": "Make pg_dump dump `public` schema ownership changes and security labels (Noah Misch)",
      "fixedIn": "15.0",
      "contributor": "Noah Misch"
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent CREATE SCHEMA from defeating changes in search_path",
      "description": "Prevent CREATE SCHEMA from defeating changes in search_path (Alexander Lakhin)\n          Within a CREATE SCHEMA command, objects in the prevailing search_path, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure search_path. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "15.3",
      "contributor": "Alexander Lakhin"
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "Enforce row-level security policies correctly after inlining a set-returning function (Stephen Frost, Tom Lane)\n          If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n          The PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "15.3",
      "contributor": "Stephen Frost, Tom Lane"
    },
    {
      "cve": null,
      "title": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "Ensure that COPY TO from an RLS-enabled parent table does not copy any rows from child tables (Antonin Houska)\n          The documentation is quite clear that COPY TO copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "15.3",
      "contributor": "Antonin Houska"
    },
    {
      "cve": null,
      "title": "Fix assertion failure for MERGE into a partitioned table with row-level security enabled",
      "description": "Fix assertion failure for MERGE into a partitioned table with row-level security enabled (Dean Rasheed)",
      "fixedIn": "15.3",
      "contributor": "Dean Rasheed"
    },
    {
      "cve": "CVE-2023-39418",
      "title": "Fix MERGE to enforce row security policies properly",
      "description": "Fix MERGE to enforce row security policies properly (Dean Rasheed)\n          When MERGE performs an `UPDATE` action, it should enforce any `UPDATE` or `SELECT` RLS policies defined on the target table, to be consistent with the way that a plain UPDATE with a `WHERE` clause works. Instead it was enforcing `INSERT` RLS policies for both `INSERT` and `UPDATE` actions.\n          In addition, when MERGE performs a `DO NOTHING` action, it applied the target table's `DELETE` RLS policies to existing rows, even though those rows are not being deleted. While it's not a security problem, this could result in unwanted errors.\n          The PostgreSQL Project thanks Dean Rasheed for reporting this problem. (CVE-2023-39418)",
      "fixedIn": "15.4",
      "contributor": "Dean Rasheed"
    },
    {
      "cve": null,
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions",
      "description": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions (Tom Lane)",
      "fixedIn": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "Detect integer overflow while computing new array dimensions (Tom Lane)\n          When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes (Noah Misch, Jelte Fennema-Nio)\n          The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n          Also ensure that the is_superuser parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n          The PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "15.5",
      "contributor": "Noah Misch, Jelte Fennema-Nio"
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY (Heikki Linnakangas)\n          One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running REFRESH. Fix things so that all user-determined code is run as the view's owner, as expected.\n          The only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "15.6",
      "contributor": "Heikki Linnakangas"
    },
    {
      "cve": null,
      "title": "In pg_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "In pg_dump, don't dump RLS policies or security labels for extension member objects (Tom Lane, Jacob Champion)\n          Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "15.6",
      "contributor": "Tom Lane, Jacob Champion"
    },
    {
      "cve": "CVE-2024-4317",
      "title": "Restrict visibility of pg_stats_ext and pg_stats_ext_exprs entries to the table owner",
      "description": "Restrict visibility of pg_stats_ext and pg_stats_ext_exprs entries to the table owner (Nathan Bossart)\n          These views failed to hide statistics for expressions that involve columns the accessing user does not have permission to read. View columns such as most_common_vals might expose security-relevant data. The potential interactions here are not fully clear, so in the interest of erring on the side of safety, make rows in these views visible only to the owner of the associated table.\n          The PostgreSQL Project thanks Lukas Fittl for reporting this problem. (CVE-2024-4317)\n          By itself, this fix will only fix the behavior in newly initdb'd database clusters. If you wish to apply this change in an existing cluster, you will need to do the following:\n          \n            \n              \n                Find the SQL script fix-CVE-2024-4317.sql in the `share` directory of the PostgreSQL installation (typically located someplace like /usr/share/postgresql/). Be sure to use the script appropriate to your PostgreSQL major version. If you do not see this file, either your version is not vulnerable (only v14–v16 are affected) or your minor version is too old to have the fix.\n              \n              \n                In each database of the cluster, run the fix-CVE-2024-4317.sql script as superuser. In psql this would look like\n                \\i /usr/share/postgresql/fix-CVE-2024-4317.sql\n\n                (adjust the file path as appropriate). Any error probably indicates that you've used the wrong script version. It will not hurt to run the script more than once.\n              \n              \n                Do not forget to include the `template0` and `template1` databases, or the vulnerability will still exist in databases you create later. To fix `template0`, you'll need to temporarily make it accept connections. Do that with\n                ALTER DATABASE template0 WITH ALLOW_CONNECTIONS true;\n\n                and then after fixing `template0`, undo it with\n                ALTER DATABASE template0 WITH ALLOW_CONNECTIONS false;\n\n              \n            \n          ",
      "fixedIn": "15.7",
      "contributor": "Nathan Bossart"
    },
    {
      "cve": null,
      "title": "Perform logical replication SELECT and DML actions as the table owner",
      "description": "Perform logical replication SELECT and DML actions as the table owner (Robert Haas)\n            This improves security and now requires subscription owners to be either superusers or to have SET ROLE permission on all roles owning tables in the replication set. The previous behavior of performing all operations as the subscription owner can be enabled with the subscription run_as_owner option.",
      "fixedIn": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "cve": null,
      "title": "Add options to createuser to control more user options",
      "description": "Add options to createuser to control more user options (Shinya Kato)\n            Specifically, the new options control the valid-until date, bypassing of row-level security, and role membership.",
      "fixedIn": "16.0",
      "contributor": "Shinya Kato"
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "Detect integer overflow while computing new array dimensions (Tom Lane)\n          When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "16.1",
      "contributor": "Tom Lane"
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes (Noah Misch, Jelte Fennema-Nio)\n          The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n          Also ensure that the is_superuser parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n          The PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "16.1",
      "contributor": "Noah Misch, Jelte Fennema-Nio"
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Tighten security restrictions within REFRESH MATERIALIZED VIEW CONCURRENTLY (Heikki Linnakangas)\n          One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running REFRESH. Fix things so that all user-determined code is run as the view's owner, as expected.\n          The only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n          The PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "16.2",
      "contributor": "Heikki Linnakangas"
    },
    {
      "cve": null,
      "title": "In pg_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "In pg_dump, don't dump RLS policies or security labels for extension member objects (Tom Lane, Jacob Champion)\n          Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "16.2",
      "contributor": "Tom Lane, Jacob Champion"
    },
    {
      "cve": "CVE-2024-4317",
      "title": "Restrict visibility of pg_stats_ext and pg_stats_ext_exprs entries to the table owner",
      "description": "Restrict visibility of pg_stats_ext and pg_stats_ext_exprs entries to the table owner (Nathan Bossart)\n          These views failed to hide statistics for expressions that involve columns the accessing user does not have permission to read. View columns such as most_common_vals might expose security-relevant data. The potential interactions here are not fully clear, so in the interest of erring on the side of safety, make rows in these views visible only to the owner of the associated table.\n          The PostgreSQL Project thanks Lukas Fittl for reporting this problem. (CVE-2024-4317)\n          By itself, this fix will only fix the behavior in newly initdb'd database clusters. If you wish to apply this change in an existing cluster, you will need to do the following:\n          \n            \n              \n                Find the SQL script fix-CVE-2024-4317.sql in the `share` directory of the PostgreSQL installation (typically located someplace like /usr/share/postgresql/). Be sure to use the script appropriate to your PostgreSQL major version. If you do not see this file, either your version is not vulnerable (only v14–v16 are affected) or your minor version is too old to have the fix.\n              \n              \n                In each database of the cluster, run the fix-CVE-2024-4317.sql script as superuser. In psql this would look like\n                \\i /usr/share/postgresql/fix-CVE-2024-4317.sql\n\n                (adjust the file path as appropriate). Any error probably indicates that you've used the wrong script version. It will not hurt to run the script more than once.\n              \n              \n                Do not forget to include the `template0` and `template1` databases, or the vulnerability will still exist in databases you create later. To fix `template0`, you'll need to temporarily make it accept connections. Do that with\n                ALTER DATABASE template0 WITH ALLOW_CONNECTIONS true;\n\n                and then after fixing `template0`, undo it with\n                ALTER DATABASE template0 WITH ALLOW_CONNECTIONS false;\n\n              \n            \n          ",
      "fixedIn": "16.3",
      "contributor": "Nathan Bossart"
    }
  ],
  "features": [
    {
      "title": "Move sequences' metadata fields into a new pg_sequence system catalog",
      "description": "Move sequences' metadata fields into a new pg_sequence system catalog (Peter Eisentraut)\nA sequence relation now stores only the fields that can be modified by `nextval()()`, that is last_value, log_cnt, and is_called. Other sequence properties, such as the starting value and increment, are kept in a corresponding row of the pg_sequence catalog. ALTER SEQUENCE updates are now fully transactional, implying that the sequence is locked until commit. The `nextval()()` and `setval()()` functions remain nontransactional.\nThe main incompatibility introduced by this change is that selecting from a sequence relation now returns only the three fields named above. To obtain the sequence's other properties, applications must look into pg_sequence. The new system view pg_sequences can also be used for this purpose; it provides column names that are more compatible with existing code.\nAlso, sequences created for `SERIAL` columns now generate positive 32-bit wide values, whereas previous versions generated 64-bit wide values. This has no visible effect if the values are only stored in a column.\nThe output of psql's \\d command for a sequence has been redesigned, too.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Make pg_basebackup stream the WAL needed to restore the backup by default",
      "description": "Make pg_basebackup stream the WAL needed to restore the backup by default (Magnus Hagander)\nThis changes pg_basebackup's -X/--wal-method default to `stream`. An option value `none` has been added to reproduce the old behavior. The pg_basebackup option -x has been removed (instead, use `-X fetch`).",
      "sinceVersion": "10.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Untitled feature",
      "description": "Logical replication using publish/subscribe",
      "sinceVersion": "10.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Declarative table partitioning",
      "sinceVersion": "10.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Improved query parallelism",
      "sinceVersion": "10.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Stronger password authentication based on SCRAM-SHA-256",
      "sinceVersion": "10.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Improved monitoring and control",
      "sinceVersion": "10.0",
      "contributor": null
    },
    {
      "title": "Hash indexes must be rebuilt after pg_upgrade-ing from any previous major PostgreSQL version",
      "description": "Hash indexes must be rebuilt after pg_upgrade-ing from any previous major PostgreSQL version (Mithun Cy, Robert Haas, Amit Kapila)\nMajor hash index improvements necessitated this requirement. pg_upgrade will create a script to assist with this.",
      "sinceVersion": "10.0",
      "contributor": "Mithun Cy, Robert Haas, Amit Kapila"
    },
    {
      "title": "Rename write-ahead log directory pg_xlog to pg_wal, and rename transaction status directory pg_clog to pg_xact",
      "description": "Rename write-ahead log directory pg_xlog to pg_wal, and rename transaction status directory pg_clog to pg_xact (Michael Paquier)\nUsers have occasionally thought that these directories contained only inessential log files, and proceeded to remove write-ahead log files or transaction status files manually, causing irrecoverable data loss. These name changes are intended to discourage such errors in future.",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Rename SQL functions, tools, and options that reference “xlog” to “wal”",
      "description": "Rename SQL functions, tools, and options that reference “xlog” to “wal” (Robert Haas)\nFor example, `pg_switch_xlog()()` becomes `pg_switch_wal()()`, pg_receivexlog becomes pg_receivewal, and --xlogdir becomes --waldir. This is for consistency with the change of the pg_xlog directory name; in general, the “xlog” terminology is no longer used in any user-facing places.",
      "sinceVersion": "10.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Rename WAL-related functions and views to use `lsn` instead of `location`",
      "description": "Rename WAL-related functions and views to use `lsn` instead of `location` (David Rowley)\nThere was previously an inconsistent mixture of the two terminologies.",
      "sinceVersion": "10.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Change the implementation of set-returning functions appearing in a query's `SELECT` list",
      "description": "Change the implementation of set-returning functions appearing in a query's `SELECT` list (Andres Freund)\nSet-returning functions are now evaluated before evaluation of scalar expressions in the `SELECT` list, much as though they had been placed in a `LATERAL FROM`-clause item. This allows saner semantics for cases where multiple set-returning functions are present. If they return different numbers of rows, the shorter results are extended to match the longest result by adding nulls. Previously the results were cycled until they all terminated at the same time, producing a number of rows equal to the least common multiple of the functions' periods. In addition, set-returning functions are now disallowed within `CASE` and `COALESCE` constructs. For more information see Section&nbsp;37.4.8.",
      "sinceVersion": "10.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Use standard row constructor syntax in `UPDATE ... SET",
      "description": "Use standard row constructor syntax in `UPDATE ... SET (`column_list`) = row_constructor` (Tom Lane)\nThe `row_constructor` can now begin with the keyword `ROW`; previously that had to be omitted. If just one column name appears in the `column_list`, then the `row_constructor` now must use the `ROW` keyword, since otherwise it is not a valid row constructor but just a parenthesized expression. Also, an occurrence of ``table_name`.*` within the `row_constructor` is now expanded into multiple columns, as occurs in other uses of `row_constructor`s.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "When ALTER TABLE ... ADD PRIMARY KEY marks columns `NOT NULL`, that change now propagates to inheritance child tables as well",
      "description": "When ALTER TABLE ... ADD PRIMARY KEY marks columns `NOT NULL`, that change now propagates to inheritance child tables as well (Michael Paquier)",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Prevent statement-level triggers from firing more than once per statement",
      "description": "Prevent statement-level triggers from firing more than once per statement (Tom Lane)\nCases involving writable CTEs updating the same table updated by the containing statement, or by another writable CTE, fired `BEFORE STATEMENT` or `AFTER STATEMENT` triggers more than once. Also, if there were statement-level triggers on a table affected by a foreign key enforcement action (such as `ON DELETE CASCADE`), they could fire more than once per outer SQL statement. This is contrary to the SQL standard, so change it.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change how logical replication uses pg_hba.conf",
      "description": "Change how logical replication uses pg_hba.conf (Peter Eisentraut)\nIn previous releases, a logical replication connection required the `replication` keyword in the database column. As of this release, logical replication matches a normal entry with a database name or keywords such as `all`. Physical replication continues to use the `replication` keyword. Since built-in logical replication is new in this release, this change only affects users of third-party logical replication plugins.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Make all pg_ctl actions wait for completion by default",
      "description": "Make all pg_ctl actions wait for completion by default (Peter Eisentraut)\nPreviously some pg_ctl actions didn't wait for completion, and required the use of -w to do so.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Change the default value of the log_directory server parameter from pg_log to log",
      "description": "Change the default value of the log_directory server parameter from pg_log to log (Andreas Karlsson)",
      "sinceVersion": "10.0",
      "contributor": "Andreas Karlsson"
    },
    {
      "title": "Add configuration option ssl_dh_params_file to specify file name for custom OpenSSL DH parameters",
      "description": "Add configuration option ssl_dh_params_file to specify file name for custom OpenSSL DH parameters (Heikki Linnakangas)\nThis replaces the hardcoded, undocumented file name dh1024.pem. Note that dh1024.pem is no longer examined by default; you must set this option if you want to use custom DH parameters.",
      "sinceVersion": "10.0",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Increase the size of the default DH parameters used for OpenSSL ephemeral DH ciphers to 2048 bits",
      "description": "Increase the size of the default DH parameters used for OpenSSL ephemeral DH ciphers to 2048 bits (Heikki Linnakangas)\nThe size of the compiled-in DH parameters has been increased from 1024 to 2048 bits, making DH key exchange more resistant to brute-force attacks. However, some old SSL implementations, notably some revisions of Java Runtime Environment version 6, will not accept DH parameters longer than 1024 bits, and hence will not be able to connect over SSL. If it's necessary to support such old clients, you can use custom 1024-bit DH parameters instead of the compiled-in defaults. See ssl_dh_params_file.",
      "sinceVersion": "10.0",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Remove the ability to store unencrypted passwords on the server",
      "description": "Remove the ability to store unencrypted passwords on the server (Heikki Linnakangas)\nThe password_encryption server parameter no longer supports `off` or `plain`. The `UNENCRYPTED` option is no longer supported in CREATE/ALTER USER ... PASSWORD. Similarly, the --unencrypted option has been removed from createuser. Unencrypted passwords migrated from older versions will be stored encrypted in this release. The default setting for password_encryption is still `md5`.",
      "sinceVersion": "10.0",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Add min_parallel_table_scan_size and min_parallel_index_scan_size server parameters to control parallel queries",
      "description": "Add min_parallel_table_scan_size and min_parallel_index_scan_size server parameters to control parallel queries (Amit Kapila, Robert Haas)\nThese replace min_parallel_relation_size, which was found to be too generic.",
      "sinceVersion": "10.0",
      "contributor": "Amit Kapila, Robert Haas"
    },
    {
      "title": "Don't downcase unquoted text within shared_preload_libraries and related server parameters",
      "description": "Don't downcase unquoted text within shared_preload_libraries and related server parameters (QL Zhuo)\nThese settings are really lists of file names, but they were previously treated as lists of SQL identifiers, which have different parsing rules.",
      "sinceVersion": "10.0",
      "contributor": "QL Zhuo"
    },
    {
      "title": "Remove sql_inheritance server parameter",
      "description": "Remove sql_inheritance server parameter (Robert Haas)\nChanging this setting from the default value caused queries referencing parent tables to not include child tables. The SQL standard requires them to be included, however, and this has been the default since PostgreSQL 7.1.",
      "sinceVersion": "10.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow multi-dimensional arrays to be passed into PL/Python functions, and returned as nested Python lists",
      "description": "Allow multi-dimensional arrays to be passed into PL/Python functions, and returned as nested Python lists (Alexey Grishchenko, Dave Cramer, Heikki Linnakangas)\nThis feature requires a backwards-incompatible change to the handling of arrays of composite types in PL/Python. Previously, you could return an array of composite values by writing, e.g., `[[col1, col2], [col1, col2]]`; but now that is interpreted as a two-dimensional array. Composite types in arrays must now be written as Python tuples, not lists, to resolve the ambiguity; that is, write `[(col1, col2), (col1, col2)]` instead.",
      "sinceVersion": "10.0",
      "contributor": "Alexey Grishchenko, Dave Cramer, Heikki Linnakangas"
    },
    {
      "title": "Remove PL/Tcl's “module” auto-loading facility",
      "description": "Remove PL/Tcl's “module” auto-loading facility (Tom Lane)\nThis functionality has been replaced by new server parameters pltcl.start_proc and pltclu.start_proc, which are easier to use and more similar to features available in other PLs.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove pg_dump/pg_dumpall support for dumping from pre-8.0 servers",
      "description": "Remove pg_dump/pg_dumpall support for dumping from pre-8.0 servers (Tom Lane)\nUsers needing to dump from pre-8.0 servers will need to use dump programs from PostgreSQL 9.6 or earlier. The resulting output should still load successfully into newer servers.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove support for floating-point timestamps and intervals",
      "description": "Remove support for floating-point timestamps and intervals (Tom Lane)\nThis removes configure's --disable-integer-datetimes option. Floating-point timestamps have few advantages and have not been the default since PostgreSQL 8.3.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove server support for client/server protocol version 1.0",
      "description": "Remove server support for client/server protocol version 1.0 (Tom Lane)\nThis protocol hasn't had client support since PostgreSQL 6.3.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove contrib/tsearch2 module",
      "description": "Remove contrib/tsearch2 module (Robert Haas)\nThis module provided compatibility with the version of full text search that shipped in pre-8.3 PostgreSQL releases.",
      "sinceVersion": "10.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Remove createlang and droplang command-line applications",
      "description": "Remove createlang and droplang command-line applications (Peter Eisentraut)\nThese had been deprecated since PostgreSQL 9.1. Instead, use CREATE EXTENSION and DROP EXTENSION directly.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Remove support for version-0 function calling conventions",
      "description": "Remove support for version-0 function calling conventions (Andres Freund)\nExtensions providing C-coded functions must now conform to version 1 calling conventions. Version 0 has been deprecated since 2001.",
      "sinceVersion": "10.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Support parallel B-tree index scans",
      "description": "Support parallel B-tree index scans (Rahila Syed, Amit Kapila, Robert Haas, Rafia Sabih)\nThis change allows B-tree index pages to be searched by separate parallel workers.",
      "sinceVersion": "10.0",
      "contributor": "Rahila Syed, Amit Kapila, Robert Haas, Rafia Sabih"
    },
    {
      "title": "Support parallel bitmap heap scans",
      "description": "Support parallel bitmap heap scans (Dilip Kumar)\nThis allows a single index scan to dispatch parallel workers to process different areas of the heap.",
      "sinceVersion": "10.0",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Allow merge joins to be performed in parallel",
      "description": "Allow merge joins to be performed in parallel (Dilip Kumar)",
      "sinceVersion": "10.0",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Allow non-correlated subqueries to be run in parallel",
      "description": "Allow non-correlated subqueries to be run in parallel (Amit Kapila)",
      "sinceVersion": "10.0",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Improve ability of parallel workers to return pre-sorted data",
      "description": "Improve ability of parallel workers to return pre-sorted data (Rushabh Lathia)",
      "sinceVersion": "10.0",
      "contributor": "Rushabh Lathia"
    },
    {
      "title": "Increase parallel query usage in procedural language functions",
      "description": "Increase parallel query usage in procedural language functions (Robert Haas, Rafia Sabih)",
      "sinceVersion": "10.0",
      "contributor": "Robert Haas, Rafia Sabih"
    },
    {
      "title": "Add max_parallel_workers server parameter to limit the number of worker processes that can be used for query parallelism",
      "description": "Add max_parallel_workers server parameter to limit the number of worker processes that can be used for query parallelism (Julien Rouhaud)\nThis parameter can be set lower than max_worker_processes to reserve worker processes for purposes other than parallel queries.",
      "sinceVersion": "10.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Untitled feature",
      "description": "Enable parallelism by default by changing the default setting of max_parallel_workers_per_gather to `2`.",
      "sinceVersion": "10.0",
      "contributor": null
    },
    {
      "title": "Add write-ahead logging support to hash indexes",
      "description": "Add write-ahead logging support to hash indexes (Amit Kapila)\nThis makes hash indexes crash-safe and replicatable. The former warning message about their use is removed.",
      "sinceVersion": "10.0",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Add SP-GiST index support for INET and CIDR data types",
      "description": "Add SP-GiST index support for INET and CIDR data types (Emre Hasegeli)",
      "sinceVersion": "10.0",
      "contributor": "Emre Hasegeli"
    },
    {
      "title": "Add option to allow BRIN index summarization to happen more aggressively",
      "description": "Add option to allow BRIN index summarization to happen more aggressively (Álvaro Herrera)\nA new CREATE INDEX option enables auto-summarization of the previous BRIN page range when a new page range is created.",
      "sinceVersion": "10.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Add functions to remove and re-add BRIN summarization for BRIN index ranges",
      "description": "Add functions to remove and re-add BRIN summarization for BRIN index ranges (Álvaro Herrera)\nThe new SQL function `brin_summarize_range()()` updates BRIN index summarization for a specified range and `brin_desummarize_range()()` removes it. This is helpful to update summarization of a range that is now smaller due to UPDATEs and DELETEs.",
      "sinceVersion": "10.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Improve accuracy in determining if a BRIN index scan is beneficial",
      "description": "Improve accuracy in determining if a BRIN index scan is beneficial (David Rowley, Emre Hasegeli)",
      "sinceVersion": "10.0",
      "contributor": "David Rowley, Emre Hasegeli"
    },
    {
      "title": "Reduce page locking during vacuuming of GIN indexes",
      "description": "Reduce page locking during vacuuming of GIN indexes (Andrey Borodin)",
      "sinceVersion": "10.0",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Reduce locking required to change table parameters",
      "description": "Reduce locking required to change table parameters (Simon Riggs, Fabrízio Mello)\nFor example, changing a table's effective_io_concurrency setting can now be done with a more lightweight lock.",
      "sinceVersion": "10.0",
      "contributor": "Simon Riggs, Fabrízio Mello"
    },
    {
      "title": "Allow tuning of predicate lock promotion thresholds",
      "description": "Allow tuning of predicate lock promotion thresholds (Dagfinn Ilmari Mannsåker)\nLock promotion can now be controlled through two new server parameters, max_pred_locks_per_relation and max_pred_locks_per_page.",
      "sinceVersion": "10.0",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Add multi-column optimizer statistics to compute the correlation ratio and number of distinct values",
      "description": "Add multi-column optimizer statistics to compute the correlation ratio and number of distinct values (Tomas Vondra, David Rowley, Álvaro Herrera)\nNew commands are CREATE STATISTICS, ALTER STATISTICS, and DROP STATISTICS. This feature is helpful in estimating query memory usage and when combining the statistics from individual columns.",
      "sinceVersion": "10.0",
      "contributor": "Tomas Vondra, David Rowley, Álvaro Herrera"
    },
    {
      "title": "Reduce expression evaluation overhead during query execution, as well as plan node calling overhead",
      "description": "Reduce expression evaluation overhead during query execution, as well as plan node calling overhead (Andres Freund)\nThis is particularly helpful for queries that process many rows.",
      "sinceVersion": "10.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Allow hashed aggregation to be used with grouping sets",
      "description": "Allow hashed aggregation to be used with grouping sets (Andrew Gierth)",
      "sinceVersion": "10.0",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Use uniqueness guarantees to optimize certain join types",
      "description": "Use uniqueness guarantees to optimize certain join types (David Rowley)",
      "sinceVersion": "10.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Reduce statistics tracking overhead in sessions that reference many thousands of relations",
      "description": "Reduce statistics tracking overhead in sessions that reference many thousands of relations (Aleksander Alekseev)",
      "sinceVersion": "10.0",
      "contributor": "Aleksander Alekseev"
    },
    {
      "title": "Allow explicit control over EXPLAIN's display of planning and execution time",
      "description": "Allow explicit control over EXPLAIN's display of planning and execution time (Ashutosh Bapat)\nBy default planning and execution time are displayed by EXPLAIN ANALYZE and are not displayed in other cases. The new EXPLAIN option `SUMMARY` allows explicit control of this.",
      "sinceVersion": "10.0",
      "contributor": "Ashutosh Bapat"
    },
    {
      "title": "Add default monitoring roles",
      "description": "Add default monitoring roles (Dave Page)\nNew roles `pg_monitor`, `pg_read_all_settings`, `pg_read_all_stats`, and `pg_stat_scan_tables` allow simplified permission configuration.",
      "sinceVersion": "10.0",
      "contributor": "Dave Page"
    },
    {
      "title": "Properly update the statistics collector during REFRESH MATERIALIZED VIEW",
      "description": "Properly update the statistics collector during REFRESH MATERIALIZED VIEW (Jim Mlodgenski)",
      "sinceVersion": "10.0",
      "contributor": "Jim Mlodgenski"
    },
    {
      "title": "Change the default value of log_line_prefix to include current timestamp",
      "description": "Change the default value of log_line_prefix to include current timestamp (with milliseconds) and the process ID in each line of postmaster log output (Christoph Berg)\nThe previous default was an empty prefix.",
      "sinceVersion": "10.0",
      "contributor": "Christoph Berg"
    },
    {
      "title": "Add functions to return the log and WAL directory contents",
      "description": "Add functions to return the log and WAL directory contents (Dave Page)\nThe new functions are `pg_ls_logdir()()` and `pg_ls_waldir()()` and can be executed by non-superusers with the proper permissions.",
      "sinceVersion": "10.0",
      "contributor": "Dave Page"
    },
    {
      "title": "Add function `pg_current_logfile",
      "description": "Add function `pg_current_logfile()()` to read logging collector's current stderr and csvlog output file names (Gilles Darold)",
      "sinceVersion": "10.0",
      "contributor": "Gilles Darold"
    },
    {
      "title": "Report the address and port number of each listening socket in the server log during postmaster startup",
      "description": "Report the address and port number of each listening socket in the server log during postmaster startup (Tom Lane)\nAlso, when logging failure to bind a listening socket, include the specific address we attempted to bind to.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reduce log chatter about the starting and stopping of launcher subprocesses",
      "description": "Reduce log chatter about the starting and stopping of launcher subprocesses (Tom Lane)\nThese are now `DEBUG1`-level messages.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reduce message verbosity of lower-numbered debug levels controlled by log_min_messages",
      "description": "Reduce message verbosity of lower-numbered debug levels controlled by log_min_messages (Robert Haas)\nThis also changes the verbosity of client_min_messages debug levels.",
      "sinceVersion": "10.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Add pg_stat_activity reporting of low-level wait states",
      "description": "Add pg_stat_activity reporting of low-level wait states (Michael Paquier, Robert Haas, Rushabh Lathia)\nThis change enables reporting of numerous low-level wait conditions, including latch waits, file reads/writes/fsyncs, client reads/writes, and synchronous replication.",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier, Robert Haas, Rushabh Lathia"
    },
    {
      "title": "Show auxiliary processes, background workers, and walsender processes in pg_stat_activity",
      "description": "Show auxiliary processes, background workers, and walsender processes in pg_stat_activity (Kuntal Ghosh, Michael Paquier)\nThis simplifies monitoring. A new column backend_type identifies the process type.",
      "sinceVersion": "10.0",
      "contributor": "Kuntal Ghosh, Michael Paquier"
    },
    {
      "title": "Allow pg_stat_activity to show the SQL query being executed by parallel workers",
      "description": "Allow pg_stat_activity to show the SQL query being executed by parallel workers (Rafia Sabih)",
      "sinceVersion": "10.0",
      "contributor": "Rafia Sabih"
    },
    {
      "title": "Rename pg_stat_activity.wait_event_type values `LWLockTranche` and `LWLockNamed` to `LWLock`",
      "description": "Rename pg_stat_activity.wait_event_type values `LWLockTranche` and `LWLockNamed` to `LWLock` (Robert Haas)\nThis makes the output more consistent.",
      "sinceVersion": "10.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Change the password_encryption server parameter from boolean to enum",
      "description": "Change the password_encryption server parameter from boolean to enum (Michael Paquier)\nThis was necessary to support additional password hashing options.",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add view pg_hba_file_rules to display the contents of pg_hba.conf",
      "description": "Add view pg_hba_file_rules to display the contents of pg_hba.conf (Haribabu Kommi)\nThis shows the file contents, not the currently active settings.",
      "sinceVersion": "10.0",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Support multiple RADIUS servers",
      "description": "Support multiple RADIUS servers (Magnus Hagander)\nAll the RADIUS related parameters are now plural and support a comma-separated list of servers.",
      "sinceVersion": "10.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Allow SSL configuration to be updated during configuration reload",
      "description": "Allow SSL configuration to be updated during configuration reload (Andreas Karlsson, Tom Lane)\nThis allows SSL to be reconfigured without a server restart, by using pg_ctl reload, SELECT pg_reload_conf(), or sending a `SIGHUP` signal. However, reloading the SSL configuration does not work if the server's SSL key requires a passphrase, as there is no way to re-prompt for the passphrase. The original configuration will apply for the life of the postmaster in that case.",
      "sinceVersion": "10.0",
      "contributor": "Andreas Karlsson, Tom Lane"
    },
    {
      "title": "Make the maximum value of bgwriter_lru_maxpages effectively unlimited",
      "description": "Make the maximum value of bgwriter_lru_maxpages effectively unlimited (Jim Nasby)",
      "sinceVersion": "10.0",
      "contributor": "Jim Nasby"
    },
    {
      "title": "After creating or unlinking files, perform an fsync on their parent directory",
      "description": "After creating or unlinking files, perform an fsync on their parent directory (Michael Paquier)\nThis reduces the risk of data loss after a power failure.",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Prevent unnecessary checkpoints and WAL archiving on otherwise-idle systems",
      "description": "Prevent unnecessary checkpoints and WAL archiving on otherwise-idle systems (Michael Paquier)",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add wal_consistency_checking server parameter to add details to WAL that can be sanity-checked on the standby",
      "description": "Add wal_consistency_checking server parameter to add details to WAL that can be sanity-checked on the standby (Kuntal Ghosh, Robert Haas)\nAny sanity-check failure generates a fatal error on the standby.",
      "sinceVersion": "10.0",
      "contributor": "Kuntal Ghosh, Robert Haas"
    },
    {
      "title": "Increase the maximum configurable WAL segment size to one gigabyte",
      "description": "Increase the maximum configurable WAL segment size to one gigabyte (Beena Emerson)\nA larger WAL segment size allows for fewer archive_command invocations and fewer WAL files to manage.",
      "sinceVersion": "10.0",
      "contributor": "Beena Emerson"
    },
    {
      "title": "Add the ability to logically replicate tables to standby servers",
      "description": "Add the ability to logically replicate tables to standby servers (Petr Jelinek)\nLogical replication allows more flexibility than physical replication does, including replication between different major versions of PostgreSQL and selective replication.",
      "sinceVersion": "10.0",
      "contributor": "Petr Jelinek"
    },
    {
      "title": "Allow waiting for commit acknowledgment from standby servers irrespective of the order they appear in synchronous_standby_names",
      "description": "Allow waiting for commit acknowledgment from standby servers irrespective of the order they appear in synchronous_standby_names (Masahiko Sawada)\nPreviously the server always waited for the active standbys that appeared first in synchronous_standby_names. The new synchronous_standby_names keyword `ANY` allows waiting for any number of standbys irrespective of their ordering. This is known as quorum commit.",
      "sinceVersion": "10.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Reduce configuration changes necessary to perform streaming backup and replication",
      "description": "Reduce configuration changes necessary to perform streaming backup and replication (Magnus Hagander, Dang Minh Huong)\nSpecifically, the defaults were changed for wal_level, max_wal_senders, max_replication_slots, and hot_standby to make them suitable for these usages out-of-the-box.",
      "sinceVersion": "10.0",
      "contributor": "Magnus Hagander, Dang Minh Huong"
    },
    {
      "title": "Enable replication from localhost connections by default in pg_hba.conf",
      "description": "Enable replication from localhost connections by default in pg_hba.conf (Michael Paquier)\nPreviously pg_hba.conf's replication connection lines were commented out by default. This is particularly useful for pg_basebackup.",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add columns to pg_stat_replication to report replication delay times",
      "description": "Add columns to pg_stat_replication to report replication delay times (Thomas Munro)\nThe new columns are write_lag, flush_lag, and replay_lag.",
      "sinceVersion": "10.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow specification of the recovery stopping point by Log Sequence Number",
      "description": "Allow specification of the recovery stopping point by Log Sequence Number (LSN) in recovery.conf (Michael Paquier)\nPreviously the stopping point could only be selected by timestamp or XID.",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Allow users to disable `pg_stop_backup",
      "description": "Allow users to disable `pg_stop_backup()()`'s waiting for all WAL to be archived (David Steele)\nAn optional second argument to `pg_stop_backup()()` controls that behavior.",
      "sinceVersion": "10.0",
      "contributor": "David Steele"
    },
    {
      "title": "Allow creation of temporary replication slots",
      "description": "Allow creation of temporary replication slots (Petr Jelinek)\nTemporary slots are automatically removed on session exit or error.",
      "sinceVersion": "10.0",
      "contributor": "Petr Jelinek"
    },
    {
      "title": "Add `XMLTABLE",
      "description": "Add `XMLTABLE()` function that converts XML-formatted data into a row set (Pavel Stehule, Álvaro Herrera)",
      "sinceVersion": "10.0",
      "contributor": "Pavel Stehule, Álvaro Herrera"
    },
    {
      "title": "Fix regular expressions' character class handling for large character codes, particularly Unicode characters above `U+7FF`",
      "description": "Fix regular expressions' character class handling for large character codes, particularly Unicode characters above `U+7FF` (Tom Lane)\nPreviously, such characters were never recognized as belonging to locale-dependent character classes such as `[[:alpha:]]`.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add table partitioning syntax that automatically creates partition constraints and handles routing of tuple insertions and updates",
      "description": "Add table partitioning syntax that automatically creates partition constraints and handles routing of tuple insertions and updates (Amit Langote)\nThe syntax supports range and list partitioning.",
      "sinceVersion": "10.0",
      "contributor": "Amit Langote"
    },
    {
      "title": "Add `AFTER` trigger transition tables to record changed rows",
      "description": "Add `AFTER` trigger transition tables to record changed rows (Kevin Grittner, Thomas Munro)\nTransition tables are accessible from triggers written in server-side languages.",
      "sinceVersion": "10.0",
      "contributor": "Kevin Grittner, Thomas Munro"
    },
    {
      "title": "When creating a foreign-key constraint, check for `REFERENCES` permission on only the referenced table",
      "description": "When creating a foreign-key constraint, check for `REFERENCES` permission on only the referenced table (Tom Lane)\nPreviously `REFERENCES` permission on the referencing table was also required. This appears to have stemmed from a misreading of the SQL standard. Since creating a foreign key (or any other type of) constraint requires ownership privilege on the constrained table, additionally requiring `REFERENCES` permission seems rather pointless.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow default permissions on schemas",
      "description": "Allow default permissions on schemas (Matheus Oliveira)\nThis is done using the `ALTER DEFAULT PRIVILEGES` command.",
      "sinceVersion": "10.0",
      "contributor": "Matheus Oliveira"
    },
    {
      "title": "Add CREATE SEQUENCE AS command to create a sequence matching an integer data type",
      "description": "Add CREATE SEQUENCE AS command to create a sequence matching an integer data type (Peter Eisentraut)\nThis simplifies the creation of sequences matching the range of base columns.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow `COPY `view` FROM source` on views with `INSTEAD INSERT` triggers",
      "description": "Allow `COPY `view` FROM source` on views with `INSTEAD INSERT` triggers (Haribabu Kommi)\nThe triggers are fed the data rows read by COPY.",
      "sinceVersion": "10.0",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Allow the specification of a function name without arguments in DDL commands, if it is unique",
      "description": "Allow the specification of a function name without arguments in DDL commands, if it is unique (Peter Eisentraut)\nFor example, allow DROP FUNCTION on a function name without arguments if there is only one function with that name. This behavior is required by the SQL standard.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow multiple functions, operators, and aggregates to be dropped with a single DROP command",
      "description": "Allow multiple functions, operators, and aggregates to be dropped with a single DROP command (Peter Eisentraut)",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Support `IF NOT EXISTS` in CREATE SERVER, CREATE USER MAPPING, and CREATE COLLATION",
      "description": "Support `IF NOT EXISTS` in CREATE SERVER, CREATE USER MAPPING, and CREATE COLLATION (Anastasia Lubennikova, Peter Eisentraut)",
      "sinceVersion": "10.0",
      "contributor": "Anastasia Lubennikova, Peter Eisentraut"
    },
    {
      "title": "Make VACUUM VERBOSE report the number of skipped frozen pages and oldest xmin",
      "description": "Make VACUUM VERBOSE report the number of skipped frozen pages and oldest xmin (Masahiko Sawada, Simon Riggs)\nThis information is also included in log_autovacuum_min_duration output.",
      "sinceVersion": "10.0",
      "contributor": "Masahiko Sawada, Simon Riggs"
    },
    {
      "title": "Add full text search support for JSON and JSONB",
      "description": "Add full text search support for JSON and JSONB (Dmitry Dolgov)\nThe functions `ts_headline()()` and `to_tsvector()()` can now be used on these data types.",
      "sinceVersion": "10.0",
      "contributor": "Dmitry Dolgov"
    },
    {
      "title": "Add support for EUI-64 MAC addresses, as a new data type macaddr8",
      "description": "Add support for EUI-64 MAC addresses, as a new data type macaddr8 (Haribabu Kommi)\nThis complements the existing support for EUI-48 MAC addresses (type macaddr).",
      "sinceVersion": "10.0",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Add identity columns for assigning a numeric value to columns on insert",
      "description": "Add identity columns for assigning a numeric value to columns on insert (Peter Eisentraut)\nThese are similar to SERIAL columns, but are SQL standard compliant.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow ENUM values to be renamed",
      "description": "Allow ENUM values to be renamed (Dagfinn Ilmari Mannsåker)\nThis uses the syntax ALTER TYPE ... RENAME VALUE.",
      "sinceVersion": "10.0",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Properly treat array pseudotypes",
      "description": "Properly treat array pseudotypes (anyarray) as arrays in `to_json()()` and `to_jsonb()()` (Andrew Dunstan)\nPreviously columns declared as anyarray (particularly those in the pg_stats view) were converted to JSON strings rather than arrays.",
      "sinceVersion": "10.0",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Add operators for multiplication and division of money values with int8 values",
      "description": "Add operators for multiplication and division of money values with int8 values (Peter Eisentraut)\nPreviously such cases would result in converting the int8 values to float8 and then using the money-and-float8 operators. The new behavior avoids possible precision loss. But note that division of money by int8 now truncates the quotient, like other integer-division cases, while the previous behavior would have rounded.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Check for overflow in the money type's input function",
      "description": "Check for overflow in the money type's input function (Peter Eisentraut)",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add simplified `regexp_match",
      "description": "Add simplified `regexp_match()()` function (Emre Hasegeli)\nThis is similar to `regexp_matches()()`, but it only returns results from the first match so it does not need to return a set, making it easier to use for simple cases.",
      "sinceVersion": "10.0",
      "contributor": "Emre Hasegeli"
    },
    {
      "title": "Add a version of jsonb's delete operator that takes an array of keys to delete",
      "description": "Add a version of jsonb's delete operator that takes an array of keys to delete (Magnus Hagander)",
      "sinceVersion": "10.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Make `json_populate_record",
      "description": "Make `json_populate_record()()` and related functions process JSON arrays and objects recursively (Nikita Glukhov)\nWith this change, array-type fields in the destination SQL type are properly converted from JSON arrays, and composite-type fields are properly converted from JSON objects. Previously, such cases would fail because the text representation of the JSON value would be fed to `array_in()()` or `record_in()()`, and its syntax would not match what those input functions expect.",
      "sinceVersion": "10.0",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Add function `txid_current_if_assigned",
      "description": "Add function `txid_current_if_assigned()()` to return the current transaction ID or `NULL` if no transaction ID has been assigned (Craig Ringer)\nThis is different from `txid_current()()`, which always returns a transaction ID, assigning one if necessary. Unlike that function, this function can be run on standby servers.",
      "sinceVersion": "10.0",
      "contributor": "Craig Ringer"
    },
    {
      "title": "Add function `txid_status",
      "description": "Add function `txid_status()()` to check if a transaction was committed (Craig Ringer)\nThis is useful for checking after an abrupt disconnection whether your previous transaction committed and you just didn't receive the acknowledgment.",
      "sinceVersion": "10.0",
      "contributor": "Craig Ringer"
    },
    {
      "title": "Allow `make_date",
      "description": "Allow `make_date()()` to interpret negative years as BC years (Álvaro Herrera)",
      "sinceVersion": "10.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Make `to_timestamp",
      "description": "Make `to_timestamp()()` and `to_date()()` reject out-of-range input fields (Artur Zakirov)\nFor example, previously `to_date('2009-06-40','YYYY-MM-DD')` was accepted and returned `2009-07-10`. It will now generate an error.",
      "sinceVersion": "10.0",
      "contributor": "Artur Zakirov"
    },
    {
      "title": "Allow PL/Python's `cursor",
      "description": "Allow PL/Python's `cursor()()` and `execute()()` functions to be called as methods of their plan-object arguments (Peter Eisentraut)\nThis allows a more object-oriented programming style.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow PL/pgSQL's GET DIAGNOSTICS statement to retrieve values into array elements",
      "description": "Allow PL/pgSQL's GET DIAGNOSTICS statement to retrieve values into array elements (Tom Lane)\nPreviously, a syntactic restriction prevented the target variable from being an array element.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow PL/Tcl functions to return composite types and sets",
      "description": "Allow PL/Tcl functions to return composite types and sets (Karl Lehenbauer)",
      "sinceVersion": "10.0",
      "contributor": "Karl Lehenbauer"
    },
    {
      "title": "Add a subtransaction command to PL/Tcl",
      "description": "Add a subtransaction command to PL/Tcl (Victor Wagner)\nThis allows PL/Tcl queries to fail without aborting the entire function.",
      "sinceVersion": "10.0",
      "contributor": "Victor Wagner"
    },
    {
      "title": "Add server parameters pltcl.start_proc and pltclu.start_proc, to allow initialization functions to be called on PL/Tcl startup",
      "description": "Add server parameters pltcl.start_proc and pltclu.start_proc, to allow initialization functions to be called on PL/Tcl startup (Tom Lane)",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow specification of multiple host names or addresses in libpq connection strings and URIs",
      "description": "Allow specification of multiple host names or addresses in libpq connection strings and URIs (Robert Haas, Heikki Linnakangas)\nlibpq will connect to the first responsive server in the list.",
      "sinceVersion": "10.0",
      "contributor": "Robert Haas, Heikki Linnakangas"
    },
    {
      "title": "Allow libpq connection strings and URIs to request a read/write host, that is a master server rather than a standby server",
      "description": "Allow libpq connection strings and URIs to request a read/write host, that is a master server rather than a standby server (Victor Wagner, Mithun Cy)\nThis is useful when multiple host names are specified. It is controlled by libpq connection parameter target_session_attrs.",
      "sinceVersion": "10.0",
      "contributor": "Victor Wagner, Mithun Cy"
    },
    {
      "title": "Allow the password file name to be specified as a libpq connection parameter",
      "description": "Allow the password file name to be specified as a libpq connection parameter (Julian Markwort)\nPreviously this could only be specified via an environment variable.",
      "sinceVersion": "10.0",
      "contributor": "Julian Markwort"
    },
    {
      "title": "Add function `PQencryptPasswordConn",
      "description": "Add function `PQencryptPasswordConn()()` to allow creation of more types of encrypted passwords on the client side (Michael Paquier, Heikki Linnakangas)\nPreviously only `MD5`-encrypted passwords could be created using `PQencryptPassword()()`. This new function can also create `SCRAM-SHA-256`-encrypted passwords.",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier, Heikki Linnakangas"
    },
    {
      "title": "Change ecpg preprocessor version from 4.12 to 10",
      "description": "Change ecpg preprocessor version from 4.12 to 10 (Tom Lane)\nHenceforth the ecpg version will match the PostgreSQL distribution version number.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add conditional branch support to psql",
      "description": "Add conditional branch support to psql (Corey Huinker)\nThis feature adds psql meta-commands \\if, \\elif, \\else, and \\endif. This is primarily helpful for scripting.",
      "sinceVersion": "10.0",
      "contributor": "Corey Huinker"
    },
    {
      "title": "Add psql \\gx meta-command to execute",
      "description": "Add psql \\gx meta-command to execute (\\g) a query in expanded mode (\\x) (Christoph Berg)",
      "sinceVersion": "10.0",
      "contributor": "Christoph Berg"
    },
    {
      "title": "Expand psql variable references in backtick-executed strings",
      "description": "Expand psql variable references in backtick-executed strings (Tom Lane)\nThis is particularly useful in the new psql conditional branch commands.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent psql's special variables from being set to invalid values",
      "description": "Prevent psql's special variables from being set to invalid values (Daniel Vérité, Tom Lane)\nPreviously, setting one of psql's special variables to an invalid value silently resulted in the default behavior. \\set on a special variable now fails if the proposed new value is invalid. As a special exception, \\set with an empty or omitted new value, on a boolean-valued special variable, still has the effect of setting the variable to `on`; but now it actually acquires that value rather than an empty string. \\unset on a special variable now explicitly sets the variable to its default value, which is also the value it acquires at startup. In sum, a control variable now always has a displayable value that reflects what psql is actually doing.",
      "sinceVersion": "10.0",
      "contributor": "Daniel Vérité, Tom Lane"
    },
    {
      "title": "Add variables showing server version and psql version",
      "description": "Add variables showing server version and psql version (Fabien Coelho)",
      "sinceVersion": "10.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Improve psql's \\d",
      "description": "Improve psql's \\d (display relation) and \\dD (display domain) commands to show collation, nullable, and default properties in separate columns (Peter Eisentraut)\nPreviously they were shown in a single “Modifiers” column.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Make the various \\d commands handle no-matching-object cases more consistently",
      "description": "Make the various \\d commands handle no-matching-object cases more consistently (Daniel Gustafsson)\nThey now all print the message about that to stderr, not stdout, and the message wording is more consistent.",
      "sinceVersion": "10.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Improve psql's tab completion",
      "description": "Improve psql's tab completion (Jeff Janes, Ian Barwick, Andreas Karlsson, Sehrope Sarkuni, Thomas Munro, Kevin Grittner, Dagfinn Ilmari Mannsåker)",
      "sinceVersion": "10.0",
      "contributor": "Jeff Janes, Ian Barwick, Andreas Karlsson, Sehrope Sarkuni, Thomas Munro, Kevin Grittner, Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Add pgbench option --log-prefix to control the log file prefix",
      "description": "Add pgbench option --log-prefix to control the log file prefix (Masahiko Sawada)",
      "sinceVersion": "10.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Allow pgbench's meta-commands to span multiple lines",
      "description": "Allow pgbench's meta-commands to span multiple lines (Fabien Coelho)\nA meta-command can now be continued onto the next line by writing backslash-return.",
      "sinceVersion": "10.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Remove restriction on placement of -M option relative to other command line options",
      "description": "Remove restriction on placement of -M option relative to other command line options (Tom Lane)",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add pg_receivewal option -Z/--compress to specify compression",
      "description": "Add pg_receivewal option -Z/--compress to specify compression (Michael Paquier)",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add pg_recvlogical option --endpos to specify the ending position",
      "description": "Add pg_recvlogical option --endpos to specify the ending position (Craig Ringer)\nThis complements the existing --startpos option.",
      "sinceVersion": "10.0",
      "contributor": "Craig Ringer"
    },
    {
      "title": "Rename initdb options --noclean and --nosync to be spelled --no-clean and --no-sync",
      "description": "Rename initdb options --noclean and --nosync to be spelled --no-clean and --no-sync (Vik Fearing, Peter Eisentraut)\nThe old spellings are still supported.",
      "sinceVersion": "10.0",
      "contributor": "Vik Fearing, Peter Eisentraut"
    },
    {
      "title": "Allow pg_restore to exclude schemas",
      "description": "Allow pg_restore to exclude schemas (Michael Banck)\nThis adds a new -N/--exclude-schema option.",
      "sinceVersion": "10.0",
      "contributor": "Michael Banck"
    },
    {
      "title": "Add --no-blobs option to pg_dump",
      "description": "Add --no-blobs option to pg_dump (Guillaume Lelarge)\nThis suppresses dumping of large objects.",
      "sinceVersion": "10.0",
      "contributor": "Guillaume Lelarge"
    },
    {
      "title": "Add pg_dumpall option --no-role-passwords to omit role passwords",
      "description": "Add pg_dumpall option --no-role-passwords to omit role passwords (Robins Tharakan, Simon Riggs)\nThis allows use of pg_dumpall by non-superusers; without this option, it fails due to inability to read passwords.",
      "sinceVersion": "10.0",
      "contributor": "Robins Tharakan, Simon Riggs"
    },
    {
      "title": "Support using synchronized snapshots when dumping from a standby server",
      "description": "Support using synchronized snapshots when dumping from a standby server (Petr Jelinek)",
      "sinceVersion": "10.0",
      "contributor": "Petr Jelinek"
    },
    {
      "title": "Allow pg_basebackup to stream write-ahead log in tar mode",
      "description": "Allow pg_basebackup to stream write-ahead log in tar mode (Magnus Hagander)\nThe WAL will be stored in a separate tar file from the base backup.",
      "sinceVersion": "10.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Make pg_basebackup use temporary replication slots",
      "description": "Make pg_basebackup use temporary replication slots (Magnus Hagander)\nTemporary replication slots will be used by default when pg_basebackup uses WAL streaming with default options.",
      "sinceVersion": "10.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Be more careful about fsync'ing in all required places in pg_basebackup and pg_receivewal",
      "description": "Be more careful about fsync'ing in all required places in pg_basebackup and pg_receivewal (Michael Paquier)",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add pg_basebackup option --no-sync to disable fsync",
      "description": "Add pg_basebackup option --no-sync to disable fsync (Michael Paquier)",
      "sinceVersion": "10.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Improve pg_basebackup's handling of which directories to skip",
      "description": "Improve pg_basebackup's handling of which directories to skip (David Steele)",
      "sinceVersion": "10.0",
      "contributor": "David Steele"
    },
    {
      "title": "Add wait option for pg_ctl's promote operation",
      "description": "Add wait option for pg_ctl's promote operation (Peter Eisentraut)",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add long options for pg_ctl wait",
      "description": "Add long options for pg_ctl wait (--wait) and no-wait (--no-wait) (Vik Fearing)",
      "sinceVersion": "10.0",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Add long option for pg_ctl server options",
      "description": "Add long option for pg_ctl server options (--options) (Peter Eisentraut)",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Make `pg_ctl start --wait` detect server-ready by watching postmaster.pid, not by attempting connections",
      "description": "Make `pg_ctl start --wait` detect server-ready by watching postmaster.pid, not by attempting connections (Tom Lane)\nThe postmaster has been changed to report its ready-for-connections status in postmaster.pid, and pg_ctl now examines that file to detect whether startup is complete. This is more efficient and reliable than the old method, and it eliminates postmaster log entries about rejected connection attempts during startup.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reduce pg_ctl's reaction time when waiting for postmaster start/stop",
      "description": "Reduce pg_ctl's reaction time when waiting for postmaster start/stop (Tom Lane)\npg_ctl now probes ten times per second when waiting for a postmaster state change, rather than once per second.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that pg_ctl exits with nonzero status if an operation being waited for does not complete within the timeout",
      "description": "Ensure that pg_ctl exits with nonzero status if an operation being waited for does not complete within the timeout (Peter Eisentraut)\nThe `start` and `promote` operations now return exit status 1, not 0, in such cases. The `stop` operation has always done that.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Change to two-part release version numbering",
      "description": "Change to two-part release version numbering (Peter Eisentraut, Tom Lane)\nRelease numbers will now have two parts (e.g., `10.1`) rather than three (e.g., `9.6.3`). Major versions will now increase just the first number, and minor releases will increase just the second number. Release branches will be referred to by single numbers (e.g., `10` rather than `9.6`). This change is intended to reduce user confusion about what is a major or minor release of PostgreSQL.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Improve behavior of pgindent",
      "description": "Improve behavior of pgindent (Piotr Stefaniak, Tom Lane)\nWe have switched to a new version of pg_bsd_indent based on recent improvements made by the FreeBSD project. This fixes numerous small bugs that led to odd C code formatting decisions. Most notably, lines within parentheses (such as in a multi-line function call) are now uniformly indented to match the opening paren, even if that would result in code extending past the right margin.",
      "sinceVersion": "10.0",
      "contributor": "Piotr Stefaniak, Tom Lane"
    },
    {
      "title": "Allow the ICU library to optionally be used for collation support",
      "description": "Allow the ICU library to optionally be used for collation support (Peter Eisentraut)\nThe ICU library has versioning that allows detection of collation changes between versions. It is enabled via configure option --with-icu. The default still uses the operating system's native collation library.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Automatically mark all `PG_FUNCTION_INFO_V1",
      "description": "Automatically mark all `PG_FUNCTION_INFO_V1()` functions as `DLLEXPORT`-ed on Windows (Laurenz Albe)\nIf third-party code is using `extern` function declarations, they should also add `DLLEXPORT` markers to those declarations.",
      "sinceVersion": "10.0",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Remove SPI functions `SPI_push",
      "description": "Remove SPI functions `SPI_push()()`, `SPI_pop()()`, `SPI_push_conditional()()`, `SPI_pop_conditional()()`, and `SPI_restore_connection()()` as unnecessary (Tom Lane)\nTheir functionality now happens automatically. There are now no-op macros by these names so that external modules don't need to be updated immediately, but eventually such calls should be removed.\nA side effect of this change is that `SPI_palloc()()` and allied functions now require an active SPI connection; they do not degenerate to simple `palloc()()` if there is none. That previous behavior was not very useful and posed risks of unexpected memory leaks.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow shared memory to be dynamically allocated",
      "description": "Allow shared memory to be dynamically allocated (Thomas Munro, Robert Haas)",
      "sinceVersion": "10.0",
      "contributor": "Thomas Munro, Robert Haas"
    },
    {
      "title": "Add slab-like memory allocator for efficient fixed-size allocations",
      "description": "Add slab-like memory allocator for efficient fixed-size allocations (Tomas Vondra)",
      "sinceVersion": "10.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Use POSIX semaphores rather than SysV semaphores on Linux and FreeBSD",
      "description": "Use POSIX semaphores rather than SysV semaphores on Linux and FreeBSD (Tom Lane)\nThis avoids platform-specific limits on SysV semaphore usage.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve support for 64-bit atomics",
      "description": "Improve support for 64-bit atomics (Andres Freund)",
      "sinceVersion": "10.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Enable 64-bit atomic operations on ARM64",
      "description": "Enable 64-bit atomic operations on ARM64 (Roman Shaposhnik)",
      "sinceVersion": "10.0",
      "contributor": "Roman Shaposhnik"
    },
    {
      "title": "Switch to using `clock_gettime",
      "description": "Switch to using `clock_gettime()()`, if available, for duration measurements (Tom Lane)\n`gettimeofday()()` is still used if `clock_gettime()()` is not available.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add more robust random number generators to be used for cryptographically secure uses",
      "description": "Add more robust random number generators to be used for cryptographically secure uses (Magnus Hagander, Michael Paquier, Heikki Linnakangas)\nIf no strong random number generator can be found, configure will fail unless the --disable-strong-random option is used. However, with this option, pgcrypto functions requiring a strong random number generator will be disabled.",
      "sinceVersion": "10.0",
      "contributor": "Magnus Hagander, Michael Paquier, Heikki Linnakangas"
    },
    {
      "title": "Allow `WaitLatchOrSocket",
      "description": "Allow `WaitLatchOrSocket()()` to wait for socket connection on Windows (Andres Freund)",
      "sinceVersion": "10.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "tupconvert.c functions no longer convert tuples just to embed a different composite-type OID in them",
      "description": "tupconvert.c functions no longer convert tuples just to embed a different composite-type OID in them (Ashutosh Bapat, Tom Lane)\nThe majority of callers don't care about the composite-type OID; but if the result tuple is to be used as a composite Datum, steps should be taken to make sure the correct OID is inserted in it.",
      "sinceVersion": "10.0",
      "contributor": "Ashutosh Bapat, Tom Lane"
    },
    {
      "title": "Remove SCO and Unixware ports",
      "description": "Remove SCO and Unixware ports (Tom Lane)",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Overhaul documentation build process",
      "description": "Overhaul documentation build process (Alexander Lakhin)",
      "sinceVersion": "10.0",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Use XSLT to build the PostgreSQL documentation",
      "description": "Use XSLT to build the PostgreSQL documentation (Peter Eisentraut)\nPreviously Jade, DSSSL, and JadeTex were used.",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Build HTML documentation using XSLT stylesheets by default",
      "description": "Build HTML documentation using XSLT stylesheets by default (Peter Eisentraut)",
      "sinceVersion": "10.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow file_fdw to read from program output as well as files",
      "description": "Allow file_fdw to read from program output as well as files (Corey Huinker, Adam Gomaa)",
      "sinceVersion": "10.0",
      "contributor": "Corey Huinker, Adam Gomaa"
    },
    {
      "title": "In postgres_fdw, push aggregate functions to the remote server, when possible",
      "description": "In postgres_fdw, push aggregate functions to the remote server, when possible (Jeevan Chalke, Ashutosh Bapat)\nThis reduces the amount of data that must be passed from the remote server, and offloads aggregate computation from the requesting server.",
      "sinceVersion": "10.0",
      "contributor": "Jeevan Chalke, Ashutosh Bapat"
    },
    {
      "title": "In postgres_fdw, push joins to the remote server in more cases",
      "description": "In postgres_fdw, push joins to the remote server in more cases (David Rowley, Ashutosh Bapat, Etsuro Fujita)",
      "sinceVersion": "10.0",
      "contributor": "David Rowley, Ashutosh Bapat, Etsuro Fujita"
    },
    {
      "title": "Properly support OID columns in postgres_fdw tables",
      "description": "Properly support OID columns in postgres_fdw tables (Etsuro Fujita)\nPreviously OID columns always returned zeros.",
      "sinceVersion": "10.0",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Allow btree_gist and btree_gin to index enum types",
      "description": "Allow btree_gist and btree_gin to index enum types (Andrew Dunstan)\nThis allows enums to be used in exclusion constraints.",
      "sinceVersion": "10.0",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Add indexing support to btree_gist for the UUID data type",
      "description": "Add indexing support to btree_gist for the UUID data type (Paul Jungwirth)",
      "sinceVersion": "10.0",
      "contributor": "Paul Jungwirth"
    },
    {
      "title": "Add amcheck which can check the validity of B-tree indexes",
      "description": "Add amcheck which can check the validity of B-tree indexes (Peter Geoghegan)",
      "sinceVersion": "10.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Show ignored constants as `$N` rather than `?` in pg_stat_statements",
      "description": "Show ignored constants as `$N` rather than `?` in pg_stat_statements (Lukas Fittl)",
      "sinceVersion": "10.0",
      "contributor": "Lukas Fittl"
    },
    {
      "title": "Improve cube's handling of zero-dimensional cubes",
      "description": "Improve cube's handling of zero-dimensional cubes (Tom Lane)\nThis also improves handling of `infinite` and `NaN` values.",
      "sinceVersion": "10.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow pg_buffercache to run with fewer locks",
      "description": "Allow pg_buffercache to run with fewer locks (Ivan Kartyshov)\nThis makes it less disruptive when run on production systems.",
      "sinceVersion": "10.0",
      "contributor": "Ivan Kartyshov"
    },
    {
      "title": "Add pgstattuple function `pgstathashindex",
      "description": "Add pgstattuple function `pgstathashindex()()` to view hash index statistics (Ashutosh Sharma)",
      "sinceVersion": "10.0",
      "contributor": "Ashutosh Sharma"
    },
    {
      "title": "Use GRANT permissions to control pgstattuple function usage",
      "description": "Use GRANT permissions to control pgstattuple function usage (Stephen Frost)\nThis allows DBAs to allow non-superusers to run these functions.",
      "sinceVersion": "10.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Reduce locking when pgstattuple examines hash indexes",
      "description": "Reduce locking when pgstattuple examines hash indexes (Amit Kapila)",
      "sinceVersion": "10.0",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Add pageinspect function `page_checksum",
      "description": "Add pageinspect function `page_checksum()()` to show a page's checksum (Tomas Vondra)",
      "sinceVersion": "10.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Add pageinspect function `bt_page_items",
      "description": "Add pageinspect function `bt_page_items()()` to print page items from a page image (Tomas Vondra)",
      "sinceVersion": "10.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Add hash index support to pageinspect",
      "description": "Add hash index support to pageinspect (Jesper Pedersen, Ashutosh Sharma)",
      "sinceVersion": "10.0",
      "contributor": "Jesper Pedersen, Ashutosh Sharma"
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view",
      "description": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane)",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash due to rowtype mismatch in `json{b}_populate_recordset",
      "description": "Fix crash due to rowtype mismatch in `json{b}_populate_recordset()()` (Michael Paquier, Tom Lane)\nThese functions used the result rowtype specified in the `FROM ... AS` clause without checking that it matched the actual rowtype of the supplied tuple value. If it didn't, that would usually result in a crash, though disclosure of server memory contents seems possible as well. (CVE-2017-15098)",
      "sinceVersion": "10.1",
      "contributor": "Michael Paquier, Tom Lane"
    },
    {
      "title": "Fix sample server-start scripts to become `$PGUSER` before opening `$PGLOG`",
      "description": "Fix sample server-start scripts to become `$PGUSER` before opening `$PGLOG` (Noah Misch)\nPreviously, the postmaster log file was opened while still running as root. The database owner could therefore mount an attack against another system user by making `$PGLOG` be a symbolic link to some other file, which would then become corrupted by appending log messages.\nBy default, these scripts are not installed anywhere. Users who have made use of them will need to manually recopy them, or apply the same changes to their modified versions. If the existing `$PGLOG` file is root-owned, it will need to be removed or renamed out of the way before restarting the server with the corrected script. (CVE-2017-12172)",
      "sinceVersion": "10.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix BRIN index summarization to handle concurrent table extension correctly",
      "description": "Fix BRIN index summarization to handle concurrent table extension correctly (Álvaro Herrera)\nPreviously, a race condition allowed some table rows to be omitted from the index. It may be necessary to reindex existing BRIN indexes to recover from past occurrences of this problem.",
      "sinceVersion": "10.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix possible failures during concurrent updates of a BRIN index",
      "description": "Fix possible failures during concurrent updates of a BRIN index (Tom Lane)\nThese race conditions could result in errors like “invalid index offnum” or “inconsistent range map”.",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent logical replication from setting non-replicated columns to nulls when replicating an UPDATE",
      "description": "Prevent logical replication from setting non-replicated columns to nulls when replicating an UPDATE (Petr Jelinek)",
      "sinceVersion": "10.1",
      "contributor": "Petr Jelinek"
    },
    {
      "title": "Fix logical replication to fire `BEFORE ROW DELETE` triggers when expected",
      "description": "Fix logical replication to fire `BEFORE ROW DELETE` triggers when expected (Masahiko Sawada)\nPreviously, that failed to happen unless the table also had a `BEFORE ROW UPDATE` trigger.",
      "sinceVersion": "10.1",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix crash when logical decoding is invoked from a SPI-using function, in particular any function written in a PL language",
      "description": "Fix crash when logical decoding is invoked from a SPI-using function, in particular any function written in a PL language (Tom Lane)",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ignore CTEs when looking up the target table for INSERT/UPDATE/DELETE, and prevent matching schema-qualified target table names to trigger transition table names",
      "description": "Ignore CTEs when looking up the target table for INSERT/UPDATE/DELETE, and prevent matching schema-qualified target table names to trigger transition table names (Thomas Munro)\nThis restores the pre-v10 behavior for CTEs attached to DML commands.",
      "sinceVersion": "10.1",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid evaluating an aggregate function's argument expression",
      "description": "Avoid evaluating an aggregate function's argument expression(s) at rows where its `FILTER` test fails (Tom Lane)\nThis restores the pre-v10 (and SQL-standard) behavior.",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect query results when multiple `GROUPING SETS` columns contain the same simple variable",
      "description": "Fix incorrect query results when multiple `GROUPING SETS` columns contain the same simple variable (Tom Lane)",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix query-lifespan memory leakage while evaluating a set-returning function in a SELECT's target list",
      "description": "Fix query-lifespan memory leakage while evaluating a set-returning function in a SELECT's target list (Tom Lane)",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow parallel execution of prepared statements with generic plans",
      "description": "Allow parallel execution of prepared statements with generic plans (Amit Kapila, Kuntal Ghosh)",
      "sinceVersion": "10.1",
      "contributor": "Amit Kapila, Kuntal Ghosh"
    },
    {
      "title": "Fix incorrect parallelization decisions for nested queries",
      "description": "Fix incorrect parallelization decisions for nested queries (Amit Kapila, Kuntal Ghosh)",
      "sinceVersion": "10.1",
      "contributor": "Amit Kapila, Kuntal Ghosh"
    },
    {
      "title": "Fix parallel query handling to not fail when a recently-used role is dropped",
      "description": "Fix parallel query handling to not fail when a recently-used role is dropped (Amit Kapila)",
      "sinceVersion": "10.1",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Fix crash in parallel execution of a bitmap scan having a BitmapAnd plan node below a BitmapOr node",
      "description": "Fix crash in parallel execution of a bitmap scan having a BitmapAnd plan node below a BitmapOr node (Dilip Kumar)",
      "sinceVersion": "10.1",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Fix `json_build_array",
      "description": "Fix `json_build_array()()`, `json_build_object()()`, and their jsonb equivalents to handle explicit `VARIADIC` arguments correctly (Michael Paquier)",
      "sinceVersion": "10.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix autovacuum's “work item” logic to prevent possible crashes and silent loss of work items",
      "description": "Fix autovacuum's “work item” logic to prevent possible crashes and silent loss of work items (Álvaro Herrera)",
      "sinceVersion": "10.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Record proper dependencies when a view or rule contains FieldSelect or FieldStore expression nodes",
      "description": "Record proper dependencies when a view or rule contains FieldSelect or FieldStore expression nodes (Tom Lane)\nLack of these dependencies could allow a column or data type DROP to go through when it ought to fail, thereby causing later uses of the view or rule to get errors. This patch does not do anything to protect existing views/rules, only ones created in the future.",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Correctly detect hashability of range data types",
      "description": "Correctly detect hashability of range data types (Tom Lane)\nThe planner mistakenly assumed that any range type could be hashed for use in hash joins or hash aggregation, but actually it must check whether the range's subtype has hash support. This does not affect any of the built-in range types, since they're all hashable anyway.",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Correctly ignore RelabelType expression nodes when examining functional-dependency statistics",
      "description": "Correctly ignore RelabelType expression nodes when examining functional-dependency statistics (David Rowley)\nThis allows, e.g., extended statistics on varchar columns to be used properly.",
      "sinceVersion": "10.1",
      "contributor": "David Rowley"
    },
    {
      "title": "Prevent idle_in_transaction_session_timeout from being ignored when a statement_timeout occurred earlier",
      "description": "Prevent idle_in_transaction_session_timeout from being ignored when a statement_timeout occurred earlier (Lukas Fittl)",
      "sinceVersion": "10.1",
      "contributor": "Lukas Fittl"
    },
    {
      "title": "Fix low-probability loss of NOTIFY messages due to XID wraparound",
      "description": "Fix low-probability loss of NOTIFY messages due to XID wraparound (Marko Tiikkaja, Tom Lane)\nIf a session executed no queries, but merely listened for notifications, for more than 2 billion transactions, it started to miss some notifications from concurrently-committing transactions.",
      "sinceVersion": "10.1",
      "contributor": "Marko Tiikkaja, Tom Lane"
    },
    {
      "title": "Allow COPY's `FREEZE` option to work when the transaction isolation level is `REPEATABLE READ` or higher",
      "description": "Allow COPY's `FREEZE` option to work when the transaction isolation level is `REPEATABLE READ` or higher (Noah Misch)\nThis case was unintentionally broken by a previous bug fix.",
      "sinceVersion": "10.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix `AggGetAggref",
      "description": "Fix `AggGetAggref()()` to return the correct Aggref nodes to aggregate final functions whose transition calculations have been merged (Tom Lane)",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix insufficient schema-qualification in some new queries in pg_dump and psql",
      "description": "Fix insufficient schema-qualification in some new queries in pg_dump and psql (Vitaly Burovoy, Tom Lane, Noah Misch)",
      "sinceVersion": "10.1",
      "contributor": "Vitaly Burovoy, Tom Lane, Noah Misch"
    },
    {
      "title": "Avoid use of `@&gt;` operator in psql's queries for \\d",
      "description": "Avoid use of `@&gt;` operator in psql's queries for \\d (Tom Lane)\nThis prevents problems when the parray_gin extension is installed, since that defines a conflicting operator.",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_basebackup's matching of tablespace paths to canonicalize both paths before comparing",
      "description": "Fix pg_basebackup's matching of tablespace paths to canonicalize both paths before comparing (Michael Paquier)\nThis is particularly helpful on Windows.",
      "sinceVersion": "10.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix libpq to not require user's home directory to exist",
      "description": "Fix libpq to not require user's home directory to exist (Tom Lane)\nIn v10, failure to find the home directory while trying to read ~/.pgpass was treated as a hard error, but it should just cause that file to not be found. Both v10 and previous release branches made the same mistake when reading ~/.pg_service.conf, though this was less obvious since that file is not sought unless a service name is specified.",
      "sinceVersion": "10.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpglib, correctly handle backslashes in string literals depending on whether standard_conforming_strings is set",
      "description": "In ecpglib, correctly handle backslashes in string literals depending on whether standard_conforming_strings is set (Tsunakawa Takayuki)",
      "sinceVersion": "10.1",
      "contributor": "Tsunakawa Takayuki"
    },
    {
      "title": "Make ecpglib's Informix-compatibility mode ignore fractional digits in integer input strings, as expected",
      "description": "Make ecpglib's Informix-compatibility mode ignore fractional digits in integer input strings, as expected (Gao Zengqi, Michael Meskes)",
      "sinceVersion": "10.1",
      "contributor": "Gao Zengqi, Michael Meskes"
    },
    {
      "title": "Fix missing temp-install prerequisites for `check`-like Make targets",
      "description": "Fix missing temp-install prerequisites for `check`-like Make targets (Noah Misch)\nSome non-default test procedures that are meant to work like `make check` failed to ensure that the temporary installation was up to date.",
      "sinceVersion": "10.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2017c for DST law changes in Fiji, Namibia, Northern Cyprus, Sudan, Tonga, and Turks &amp; Caicos Islands, plus historical corrections for Alaska, Apia, Burma, Calcutta, Detroit, Ireland, Namibia, and Pago Pago.",
      "sinceVersion": "10.1",
      "contributor": null
    },
    {
      "title": "In the documentation, restore HTML anchors to being upper-case strings",
      "description": "In the documentation, restore HTML anchors to being upper-case strings (Peter Eisentraut)\nDue to a toolchain change, the 10.0 user manual had lower-case strings for intrapage anchors, thus breaking some external links into our website documentation. Return to our previous convention of using upper-case strings.",
      "sinceVersion": "10.1",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix failure of ALTER TABLE ... ALTER COLUMN TYPE when altering multiple columns' types in one command",
      "description": "Fix failure of ALTER TABLE ... ALTER COLUMN TYPE when altering multiple columns' types in one command (Tom Lane)\nThis fixes a regression introduced in the most recent minor releases: indexes using the altered columns were not processed correctly, leading to strange failures during ALTER TABLE.",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Require schema qualification to cast to a temporary type when using functional cast syntax",
      "description": "Require schema qualification to cast to a temporary type when using functional cast syntax (Noah Misch)\nWe have long required invocations of temporary functions to explicitly specify the temporary schema, that is `pg_temp.`func_name`(args`). Require this as well for casting to temporary types using functional notation, for example `pg_temp.`type_name`(arg`). Otherwise it's possible to capture a function call using a temporary object, allowing privilege escalation in much the same ways that we blocked in CVE-2007-2138. (CVE-2019-10208)",
      "sinceVersion": "10.10",
      "contributor": "Noah Misch"
    },
    {
      "title": "Install dependencies to prevent dropping partition key columns",
      "description": "Install dependencies to prevent dropping partition key columns (Tom Lane)\nALTER TABLE ... DROP COLUMN will refuse to drop a column that is a partition key column. However, indirect drops (such as a cascade from dropping a key column's data type) had no such check, allowing the deletion of a key column. This resulted in a badly broken partitioned table that could neither be accessed nor dropped.\nThis fix adds pg_depend entries that enforce that the whole partitioned table, not just the key column, will be dropped if a cascaded drop forces removal of the key column. However, such entries will only be created when a partitioned table is created; so this fix does not remove the risk for pre-existing partitioned tables. The issue can only arise for partition key columns of non-built-in data types, so it seems not to be a hazard for most users.",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't optimize away `GROUP BY` columns when the table involved is an inheritance parent",
      "description": "Don't optimize away `GROUP BY` columns when the table involved is an inheritance parent (David Rowley)\nNormally, if a table's primary key column(s) are included in `GROUP BY`, it's safe to drop any other grouping columns, since the primary key columns are enough to make the groups unique. This rule does not work if the query is also reading inheritance child tables, though; the parent's uniqueness does not extend to the children.",
      "sinceVersion": "10.10",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid using unnecessary sort steps for some queries with `GROUPING SETS`",
      "description": "Avoid using unnecessary sort steps for some queries with `GROUPING SETS` (Andrew Gierth, Richard Guo)",
      "sinceVersion": "10.10",
      "contributor": "Andrew Gierth, Richard Guo"
    },
    {
      "title": "Fix failure to access trigger transition tables during `EvalPlanQual` rechecks",
      "description": "Fix failure to access trigger transition tables during `EvalPlanQual` rechecks (Alex Aktsipetrov)\nTriggers that rely on transition tables sometimes failed in the presence of concurrent updates.",
      "sinceVersion": "10.10",
      "contributor": "Alex Aktsipetrov"
    },
    {
      "title": "Fix mishandling of multi-column foreign keys when rebuilding a foreign key constraint",
      "description": "Fix mishandling of multi-column foreign keys when rebuilding a foreign key constraint (Tom Lane)\nALTER TABLE could make an incorrect decision about whether revalidation of a foreign key is necessary, if not all columns of the key are of the same type. It seems likely that the error would always have been in the conservative direction, that is revalidating unnecessarily.",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't build extended statistics for inheritance trees",
      "description": "Don't build extended statistics for inheritance trees (Tomas Vondra)\nThis avoids a “tuple already updated by self” error during ANALYZE.",
      "sinceVersion": "10.10",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid spurious deadlock errors when upgrading a tuple lock",
      "description": "Avoid spurious deadlock errors when upgrading a tuple lock (Oleksii Kliukin)\nWhen two or more transactions are waiting for a transaction T1 to release a tuple-level lock, and T1 upgrades its lock to a higher level, a spurious deadlock among the waiting transactions could be reported when T1 finishes.",
      "sinceVersion": "10.10",
      "contributor": "Oleksii Kliukin"
    },
    {
      "title": "Fix failure to resolve deadlocks involving multiple parallel worker processes",
      "description": "Fix failure to resolve deadlocks involving multiple parallel worker processes (Rui Hai Jiang)\nIt is not clear whether this bug is reachable with non-artificial queries, but if it did happen, the queries involved in an otherwise-resolvable deadlock would block until canceled.",
      "sinceVersion": "10.10",
      "contributor": "Rui Hai Jiang"
    },
    {
      "title": "Prevent incorrect canonicalization of date ranges with `infinity` endpoints",
      "description": "Prevent incorrect canonicalization of date ranges with `infinity` endpoints (Laurenz Albe)\nIt's incorrect to try to convert an open range to a closed one or vice versa by incrementing or decrementing the endpoint value, if the endpoint is infinite; so leave the range alone in such cases.",
      "sinceVersion": "10.10",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Fix loss of fractional digits when converting very large money values to numeric",
      "description": "Fix loss of fractional digits when converting very large money values to numeric (Tom Lane)",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix spinlock assembly code for MIPS CPUs so that it works on MIPS r6",
      "description": "Fix spinlock assembly code for MIPS CPUs so that it works on MIPS r6 (YunQiang Su)",
      "sinceVersion": "10.10",
      "contributor": "YunQiang Su"
    },
    {
      "title": "Make libpq ignore carriage return",
      "description": "Make libpq ignore carriage return (`\\r`) in connection service files (Tom Lane, Michael Paquier)\nIn some corner cases, service files containing Windows-style newlines could be mis-parsed, resulting in connection failures.",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane, Michael Paquier"
    },
    {
      "title": "In psql, avoid offering incorrect tab completion options after `SET `variable` =`",
      "description": "In psql, avoid offering incorrect tab completion options after `SET `variable` =` (Tom Lane)",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix a small memory leak in psql's `\\d` command",
      "description": "Fix a small memory leak in psql's `\\d` command (Tom Lane)",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump to ensure that custom operator classes are dumped in the right order",
      "description": "Fix pg_dump to ensure that custom operator classes are dumped in the right order (Tom Lane)\nIf a user-defined opclass is the subtype opclass of a user-defined range type, related objects were dumped in the wrong order, producing an unrestorable dump. (The underlying failure to handle opclass dependencies might manifest in other cases too, but this is the only known case.)",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible lockup in pgbench when using -R option",
      "description": "Fix possible lockup in pgbench when using -R option (Fabien Coelho)",
      "sinceVersion": "10.10",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Fix contrib/passwordcheck to coexist with other users of check_password_hook",
      "description": "Fix contrib/passwordcheck to coexist with other users of check_password_hook (Michael Paquier)",
      "sinceVersion": "10.10",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix contrib/sepgsql tests to work under recent SELinux releases",
      "description": "Fix contrib/sepgsql tests to work under recent SELinux releases (Mike Palmiotto)",
      "sinceVersion": "10.10",
      "contributor": "Mike Palmiotto"
    },
    {
      "title": "Improve stability of src/test/recovery regression tests",
      "description": "Improve stability of src/test/recovery regression tests (Michael Paquier)",
      "sinceVersion": "10.10",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Reduce stderr output from pg_upgrade's test script",
      "description": "Reduce stderr output from pg_upgrade's test script (Tom Lane)",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix TAP tests to work with msys Perl, in cases where the build directory is on a non-root msys mount point",
      "description": "Fix TAP tests to work with msys Perl, in cases where the build directory is on a non-root msys mount point (Noah Misch)",
      "sinceVersion": "10.10",
      "contributor": "Noah Misch"
    },
    {
      "title": "Support building Postgres with Microsoft Visual Studio 2019",
      "description": "Support building Postgres with Microsoft Visual Studio 2019 (Haribabu Kommi)",
      "sinceVersion": "10.10",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "In Visual Studio builds, honor `WindowsSDKVersion` environment variable, if that's set",
      "description": "In Visual Studio builds, honor `WindowsSDKVersion` environment variable, if that's set (Peifeng Qiu)\nThis fixes build failures in some configurations.",
      "sinceVersion": "10.10",
      "contributor": "Peifeng Qiu"
    },
    {
      "title": "Support OpenSSL 1.1.0 and newer in Visual Studio builds",
      "description": "Support OpenSSL 1.1.0 and newer in Visual Studio builds (Juan José Santamaría Flecha, Michael Paquier)",
      "sinceVersion": "10.10",
      "contributor": "Juan José Santamaría Flecha, Michael Paquier"
    },
    {
      "title": "Allow make options to be passed down to gmake when non-GNU make is invoked at the top level",
      "description": "Allow make options to be passed down to gmake when non-GNU make is invoked at the top level (Thomas Munro)",
      "sinceVersion": "10.10",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid choosing `localtime` or `posixrules` as TimeZone during initdb",
      "description": "Avoid choosing `localtime` or `posixrules` as TimeZone during initdb (Tom Lane)\nIn some cases initdb would choose one of these artificial zone names over the “real” zone name. Prefer any other match to the C library's timezone behavior over these two.",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Adjust pg_timezone_names view to show the `Factory` time zone if and only if it has a short abbreviation",
      "description": "Adjust pg_timezone_names view to show the `Factory` time zone if and only if it has a short abbreviation (Tom Lane)\nHistorically, IANA set up this artificial zone with an “abbreviation” like `Local time zone must be set--see zic manual page`. Modern versions of the tzdb database show `-00` instead, but some platforms alter the data to show one or another of the historical phrases. Show this zone only if it uses the modern abbreviation.",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2019b",
      "description": "Sync our copy of the timezone library with IANA tzcode release 2019b (Tom Lane)\nThis adds support for zic's new -b slim option to reduce the size of the installed zone files. We are not currently using that, but may enable it in future.",
      "sinceVersion": "10.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2019b for DST law changes in Brazil, plus historical corrections for Hong Kong, Italy, and Palestine.",
      "sinceVersion": "10.10",
      "contributor": null
    },
    {
      "title": "Fix failure of ALTER TABLE SET with a custom relation option",
      "description": "Fix failure of ALTER TABLE SET with a custom relation option (Michael Paquier)",
      "sinceVersion": "10.11",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Disallow changing a multiply-inherited column's type if not all parent tables were changed",
      "description": "Disallow changing a multiply-inherited column's type if not all parent tables were changed (Tom Lane)\nPreviously, this was allowed, whereupon queries on the now-out-of-sync parent would fail.",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent VACUUM from trying to freeze an old multixact ID involving a still-running transaction",
      "description": "Prevent VACUUM from trying to freeze an old multixact ID involving a still-running transaction (Nathan Bossart, Jeremy Schneider)\nThis case would lead to VACUUM failing until the old transaction terminates.",
      "sinceVersion": "10.11",
      "contributor": "Nathan Bossart, Jeremy Schneider"
    },
    {
      "title": "Fix planner's test for case-foldable characters in `ILIKE` with an ICU collation",
      "description": "Fix planner's test for case-foldable characters in `ILIKE` with an ICU collation (Tom Lane)\nThis mistake caused the planner to treat too much of the pattern as being a fixed prefix, so that indexscans derived from an `ILIKE` clause might miss entries that they should find.",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that offset expressions in `WINDOW` clauses are processed when a query's expressions are manipulated",
      "description": "Ensure that offset expressions in `WINDOW` clauses are processed when a query's expressions are manipulated (Andrew Gierth)\nThis oversight could result in assorted failures when the offsets are nontrivial expressions. One example is that a function parameter reference in such an expression would fail if the function was inlined.",
      "sinceVersion": "10.11",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Avoid postmaster failure if a parallel query requests a background worker when no postmaster child process array slots remain free",
      "description": "Avoid postmaster failure if a parallel query requests a background worker when no postmaster child process array slots remain free (Tom Lane)",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent possible double-free if a `BEFORE UPDATE` trigger returns the old tuple as-is, and it is not the last such trigger",
      "description": "Prevent possible double-free if a `BEFORE UPDATE` trigger returns the old tuple as-is, and it is not the last such trigger (Thomas Munro)",
      "sinceVersion": "10.11",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Provide a relevant error context line when an error occurs while setting GUC parameters during parallel worker startup",
      "description": "Provide a relevant error context line when an error occurs while setting GUC parameters during parallel worker startup (Thomas Munro)",
      "sinceVersion": "10.11",
      "contributor": "Thomas Munro"
    },
    {
      "title": "In serializable mode, ensure that row-level predicate locks are acquired on the correct version of the row",
      "description": "In serializable mode, ensure that row-level predicate locks are acquired on the correct version of the row (Thomas Munro, Heikki Linnakangas)\nIf the visible version of the row is HOT-updated, the lock might be taken on its now-dead predecessor, resulting in subtle failures to guarantee serialization.",
      "sinceVersion": "10.11",
      "contributor": "Thomas Munro, Heikki Linnakangas"
    },
    {
      "title": "Ensure that `fsync",
      "description": "Ensure that `fsync()()` is applied only to files that are opened read/write (Andres Freund, Michael Paquier)\nSome code paths tried to do this after opening a file read-only, but on some platforms that causes “bad file descriptor” or similar errors.",
      "sinceVersion": "10.11",
      "contributor": "Andres Freund, Michael Paquier"
    },
    {
      "title": "Allow encoding conversion to succeed on longer strings than before",
      "description": "Allow encoding conversion to succeed on longer strings than before (Álvaro Herrera, Tom Lane)\nPreviously, there was a hard limit of 0.25GB on the input string, but now it will work as long as the converted output is not over 1GB.",
      "sinceVersion": "10.11",
      "contributor": "Álvaro Herrera, Tom Lane"
    },
    {
      "title": "Avoid creating unnecessarily-bulky tuple stores for window functions",
      "description": "Avoid creating unnecessarily-bulky tuple stores for window functions (Andrew Gierth)\nIn some cases the tuple storage would include all columns of the source table(s), not just the ones that are needed by the query.",
      "sinceVersion": "10.11",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Allow `repalloc",
      "description": "Allow `repalloc()()` to give back space when a large chunk is reduced in size (Tom Lane)",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that temporary WAL and history files are removed at the end of archive recovery",
      "description": "Ensure that temporary WAL and history files are removed at the end of archive recovery (Sawada Masahiko)",
      "sinceVersion": "10.11",
      "contributor": "Sawada Masahiko"
    },
    {
      "title": "Avoid failure in archive recovery if recovery_min_apply_delay is enabled",
      "description": "Avoid failure in archive recovery if recovery_min_apply_delay is enabled (Fujii Masao)\nrecovery_min_apply_delay is not typically used in this configuration, but it should work.",
      "sinceVersion": "10.11",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix logical replication failure when publisher and subscriber have different ideas about a table's replica identity columns",
      "description": "Fix logical replication failure when publisher and subscriber have different ideas about a table's replica identity columns (Jehan-Guillaume de Rorthais, Peter Eisentraut)\nDeclaring a column as part of the replica identity on the subscriber, when it does not exist at all on the publisher, led to “negative bitmapset member not allowed” errors.",
      "sinceVersion": "10.11",
      "contributor": "Jehan-Guillaume de Rorthais, Peter Eisentraut"
    },
    {
      "title": "Avoid unwanted delay during shutdown of a logical replication walsender",
      "description": "Avoid unwanted delay during shutdown of a logical replication walsender (Craig Ringer, Álvaro Herrera)",
      "sinceVersion": "10.11",
      "contributor": "Craig Ringer, Álvaro Herrera"
    },
    {
      "title": "Fix timeout handling in logical replication walreceiver processes",
      "description": "Fix timeout handling in logical replication walreceiver processes (Julien Rouhaud)\nErroneous logic prevented wal_receiver_timeout from working in logical replication deployments.",
      "sinceVersion": "10.11",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Correctly time-stamp replication messages for logical decoding",
      "description": "Correctly time-stamp replication messages for logical decoding (Jeff Janes)\nThis oversight resulted, for example, in pg_stat_subscription.last_msg_send_time usually reading as NULL.",
      "sinceVersion": "10.11",
      "contributor": "Jeff Janes"
    },
    {
      "title": "In logical decoding, ensure that sub-transactions are correctly accounted for when reconstructing a snapshot",
      "description": "In logical decoding, ensure that sub-transactions are correctly accounted for when reconstructing a snapshot (Masahiko Sawada)\nThis error leads to assertion failures; it's unclear whether any bad effects exist in production builds.",
      "sinceVersion": "10.11",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix race condition during backend exit, when the backend process has previously waited for synchronous replication to occur",
      "description": "Fix race condition during backend exit, when the backend process has previously waited for synchronous replication to occur (Dongming Liu)",
      "sinceVersion": "10.11",
      "contributor": "Dongming Liu"
    },
    {
      "title": "Fix ALTER SYSTEM to cope with duplicate entries in postgresql.auto.conf",
      "description": "Fix ALTER SYSTEM to cope with duplicate entries in postgresql.auto.conf (Ian Barwick)\nALTER SYSTEM itself will not generate such a state, but external tools that modify postgresql.auto.conf could do so. Duplicate entries for the target variable will now be removed, and then the new setting (if any) will be appended at the end.",
      "sinceVersion": "10.11",
      "contributor": "Ian Barwick"
    },
    {
      "title": "Reject include directives with empty file names in configuration files, and report include-file recursion more clearly",
      "description": "Reject include directives with empty file names in configuration files, and report include-file recursion more clearly (Ian Barwick, Tom Lane)",
      "sinceVersion": "10.11",
      "contributor": "Ian Barwick, Tom Lane"
    },
    {
      "title": "Avoid logging complaints about abandoned connections when using PAM authentication",
      "description": "Avoid logging complaints about abandoned connections when using PAM authentication (Tom Lane)\nlibpq-based clients will typically make two connection attempts when a password is required, since they don't prompt their user for a password until their first connection attempt fails. Therefore the server is coded not to generate useless log spam when a client closes the connection upon being asked for a password. However, the PAM authentication code hadn't gotten that memo, and would generate several messages about a phantom authentication failure.",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix some cases where an incomplete date specification is not detected in time with time zone input",
      "description": "Fix some cases where an incomplete date specification is not detected in time with time zone input (Alexander Lakhin)\nIf a time zone with a time-varying UTC offset is specified, then a date must be as well, so that the offset can be resolved. Depending on the syntax used, this check was not enforced in some cases, allowing bogus output to be produced.",
      "sinceVersion": "10.11",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix misbehavior of `bitshiftright",
      "description": "Fix misbehavior of `bitshiftright()()` (Tom Lane)\nThe bitstring right shift operator failed to zero out padding space that exists in the last byte of the result when the bitstring length is not a multiple of 8. While invisible to most operations, any nonzero bits there would result in unexpected comparison behavior, since bitstring comparisons don't bother to ignore the extra bits, expecting them to always be zero.\nIf you have inconsistent data as a result of saving the output of `bitshiftright()()` in a table, it's possible to fix it with something like\nUPDATE mytab SET bitcol = ~(~bitcol) WHERE bitcol != ~(~bitcol);",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash when selecting a namespace node in `XMLTABLE`",
      "description": "Avoid crash when selecting a namespace node in `XMLTABLE` (Chapman Flack)",
      "sinceVersion": "10.11",
      "contributor": "Chapman Flack"
    },
    {
      "title": "Fix detection of edge-case integer overflow in interval multiplication",
      "description": "Fix detection of edge-case integer overflow in interval multiplication (Yuya Watari)",
      "sinceVersion": "10.11",
      "contributor": "Yuya Watari"
    },
    {
      "title": "Fix memory leaks in `lower",
      "description": "Fix memory leaks in `lower()()`, `upper()()`, and `initcap()()` functions when using ICU collations (Konstantin Knizhnik)",
      "sinceVersion": "10.11",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Avoid crashes if `ispell` text search dictionaries contain wrong affix data",
      "description": "Avoid crashes if `ispell` text search dictionaries contain wrong affix data (Arthur Zakirov)",
      "sinceVersion": "10.11",
      "contributor": "Arthur Zakirov"
    },
    {
      "title": "Fix incorrect compression logic for GIN posting lists",
      "description": "Fix incorrect compression logic for GIN posting lists (Heikki Linnakangas)\nA GIN posting list item can require 7 bytes if the distance between adjacent indexed TIDs exceeds 16TB. One step in the logic was out of sync with that, and might try to write the value into a 6-byte buffer. In principle this could cause a stack overrun, but on most architectures it's likely that the next byte would be unused alignment padding, making the bug harmless. In any case the bug would be very difficult to hit.",
      "sinceVersion": "10.11",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix handling of infinity, NaN, and NULL values in KNN-GiST",
      "description": "Fix handling of infinity, NaN, and NULL values in KNN-GiST (Alexander Korotkov)\nThe query's output order could be wrong (different from a plain sort's result) if some distances computed for non-null column values are infinity or NaN.",
      "sinceVersion": "10.11",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix handling of searches for NULL in KNN-SP-GiST",
      "description": "Fix handling of searches for NULL in KNN-SP-GiST (Nikita Glukhov)",
      "sinceVersion": "10.11",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "On Windows, recognize additional spellings of the “Norwegian",
      "description": "On Windows, recognize additional spellings of the “Norwegian (Bokmål)” locale name (Tom Lane)",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid compile failure if an ECPG client includes ecpglib.h while having `ENABLE_NLS` defined",
      "description": "Avoid compile failure if an ECPG client includes ecpglib.h while having `ENABLE_NLS` defined (Tom Lane)\nThis risk was created by a misplaced declaration: `ecpg_gettext()()` should not be visible to client code.",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql, resynchronize internal state about the server after an unexpected connection loss and successful reconnection",
      "description": "In psql, resynchronize internal state about the server after an unexpected connection loss and successful reconnection (Peter Billen, Tom Lane)\nOrdinarily this is unnecessary since the state would be the same anyway. But it can matter in corner cases, such as where the connection might lead to one of several servers. This change causes psql to re-issue any interactive messages that it would have issued at startup, for example about whether SSL is in use.",
      "sinceVersion": "10.11",
      "contributor": "Peter Billen, Tom Lane"
    },
    {
      "title": "Avoid platform-specific null pointer dereference in psql",
      "description": "Avoid platform-specific null pointer dereference in psql (Quentin Rameau)",
      "sinceVersion": "10.11",
      "contributor": "Quentin Rameau"
    },
    {
      "title": "Fix pg_dump to work again with pre-8.3 source servers",
      "description": "Fix pg_dump to work again with pre-8.3 source servers (Tom Lane)\nA previous fix caused pg_dump to always try to query pg_opfamily, but that catalog doesn't exist before version 8.3.",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_restore, treat -f - as meaning “output to stdout”",
      "description": "In pg_restore, treat -f - as meaning “output to stdout” (Álvaro Herrera)\nThis synchronizes pg_restore's behavior with some other applications, and in particular makes pre-v12 branches act similarly to version 12's pg_restore, simplifying creation of dump/restore scripts that work across multiple PostgreSQL versions. Before this change, pg_restore interpreted such a switch as meaning “output to a file named -”, but few people would want that.",
      "sinceVersion": "10.11",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Improve pg_upgrade's checks for the use of a data type that has changed representation, such as line",
      "description": "Improve pg_upgrade's checks for the use of a data type that has changed representation, such as line (Tomas Vondra)\nThe previous coding could be fooled by cases where the data type of interest underlies a stored column of a domain or composite type.",
      "sinceVersion": "10.11",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Detect file read errors during pg_basebackup",
      "description": "Detect file read errors during pg_basebackup (Jeevan Chalke)",
      "sinceVersion": "10.11",
      "contributor": "Jeevan Chalke"
    },
    {
      "title": "In pg_basebackup, don't fsync output files until the end of backup",
      "description": "In pg_basebackup, don't fsync output files until the end of backup (Michael Paquier)\nThe previous coding could result in timeout failures if fsync was slow.",
      "sinceVersion": "10.11",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In pg_rewind with an online source cluster, disable timeouts, much as pg_dump does",
      "description": "In pg_rewind with an online source cluster, disable timeouts, much as pg_dump does (Alexander Kukushkin)",
      "sinceVersion": "10.11",
      "contributor": "Alexander Kukushkin"
    },
    {
      "title": "Fix failure in pg_waldump with the -s option, when a continuation WAL record ends exactly at a page boundary",
      "description": "Fix failure in pg_waldump with the -s option, when a continuation WAL record ends exactly at a page boundary (Andrey Lepikhov)",
      "sinceVersion": "10.11",
      "contributor": "Andrey Lepikhov"
    },
    {
      "title": "In pg_waldump, include the `newitemoff` field in btree page split records",
      "description": "In pg_waldump, include the `newitemoff` field in btree page split records (Peter Geoghegan)",
      "sinceVersion": "10.11",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "In pg_waldump with the --bkp-details option, avoid emitting extra newlines for WAL records involving full-page writes",
      "description": "In pg_waldump with the --bkp-details option, avoid emitting extra newlines for WAL records involving full-page writes (Andres Freund)",
      "sinceVersion": "10.11",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix small memory leak in pg_waldump",
      "description": "Fix small memory leak in pg_waldump (Andres Freund)",
      "sinceVersion": "10.11",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix vacuumdb with a high --jobs option to handle running out of file descriptors better",
      "description": "Fix vacuumdb with a high --jobs option to handle running out of file descriptors better (Michael Paquier)",
      "sinceVersion": "10.11",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix contrib/amcheck to skip unlogged indexes during hot standby",
      "description": "Fix contrib/amcheck to skip unlogged indexes during hot standby (Andrey Borodin, Peter Geoghegan)\nAn unlogged index won't necessarily contain valid data in this context, so don't try to check it.",
      "sinceVersion": "10.11",
      "contributor": "Andrey Borodin, Peter Geoghegan"
    },
    {
      "title": "Fix configure's test for presence of libperl so that it works on recent Red Hat releases",
      "description": "Fix configure's test for presence of libperl so that it works on recent Red Hat releases (Tom Lane)\nPreviously, it could fail if the user sets `CFLAGS` to `-O0`.",
      "sinceVersion": "10.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure correct code generation for spinlocks on PowerPC",
      "description": "Ensure correct code generation for spinlocks on PowerPC (Noah Misch)\nThe previous spinlock coding allowed the compiler to select register zero for use with an assembly instruction that does not accept that register, causing a build failure. We have seen only one long-ago report that matches this bug, but it could cause problems for people trying to build modified PostgreSQL code or use atypical compiler options.",
      "sinceVersion": "10.11",
      "contributor": "Noah Misch"
    },
    {
      "title": "On PowerPC, avoid depending on the xlc compiler's `__fetch_and_add",
      "description": "On PowerPC, avoid depending on the xlc compiler's `__fetch_and_add()()` function (Noah Misch)\nxlc 13 and newer interpret this function in a way incompatible with our usage, resulting in an unusable build of PostgreSQL. Fix by using custom assembly code instead.",
      "sinceVersion": "10.11",
      "contributor": "Noah Misch"
    },
    {
      "title": "On AIX, don't use the compiler option -qsrcmsg",
      "description": "On AIX, don't use the compiler option -qsrcmsg (Noah Misch)\nThis avoids an internal compiler error with xlc v16.1.0, with little consequence other than changing the format of compiler error messages.",
      "sinceVersion": "10.11",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix MSVC build process to cope with spaces in the file path of OpenSSL",
      "description": "Fix MSVC build process to cope with spaces in the file path of OpenSSL (Andrew Dunstan)",
      "sinceVersion": "10.11",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Update time zone data files to tzdata release 2019c for DST law changes in Fiji and Norfolk Island, plus historical corrections for Alberta, Austria, Belgium, British Columbia, Cambodia, Hong Kong, Indiana",
      "description": "Update time zone data files to tzdata release 2019c for DST law changes in Fiji and Norfolk Island, plus historical corrections for Alberta, Austria, Belgium, British Columbia, Cambodia, Hong Kong, Indiana (Perry County), Kaliningrad, Kentucky, Michigan, Norfolk Island, South Korea, and Turkey.",
      "sinceVersion": "10.11",
      "contributor": null
    },
    {
      "title": "Add missing permissions checks for ALTER ... DEPENDS ON EXTENSION",
      "description": "Add missing permissions checks for ALTER ... DEPENDS ON EXTENSION (Álvaro Herrera)\nMarking an object as dependent on an extension did not have any privilege check whatsoever. This oversight allowed any user to mark routines, triggers, materialized views, or indexes as droppable by anyone able to drop an extension. Require that the calling user own the specified object (and hence have privilege to drop it). (CVE-2020-1720)",
      "sinceVersion": "10.12",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix logical replication subscriber code to execute per-column `UPDATE` triggers when appropriate",
      "description": "Fix logical replication subscriber code to execute per-column `UPDATE` triggers when appropriate (Peter Eisentraut)",
      "sinceVersion": "10.12",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid failure in logical decoding when a large transaction must be spilled into many separate temporary files",
      "description": "Avoid failure in logical decoding when a large transaction must be spilled into many separate temporary files (Amit Khandekar)",
      "sinceVersion": "10.12",
      "contributor": "Amit Khandekar"
    },
    {
      "title": "Fix possible crash or data corruption when a logical replication subscriber processes a row update",
      "description": "Fix possible crash or data corruption when a logical replication subscriber processes a row update (Tom Lane, Tomas Vondra)\nThis bug caused visible problems only if the subscriber's table contained columns that were not being copied from the publisher and had pass-by-reference data types.",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane, Tomas Vondra"
    },
    {
      "title": "Fix crash in logical replication subscriber after DDL changes on a subscribed relation",
      "description": "Fix crash in logical replication subscriber after DDL changes on a subscribed relation (Jehan-Guillaume de Rorthais, Vignesh C)",
      "sinceVersion": "10.12",
      "contributor": "Jehan-Guillaume de Rorthais, Vignesh C"
    },
    {
      "title": "Fix failure in logical replication publisher after a database crash and restart",
      "description": "Fix failure in logical replication publisher after a database crash and restart (Vignesh C)",
      "sinceVersion": "10.12",
      "contributor": "Vignesh C"
    },
    {
      "title": "Improve efficiency of logical replication with `REPLICA IDENTITY FULL`",
      "description": "Improve efficiency of logical replication with `REPLICA IDENTITY FULL` (Konstantin Knizhnik)\nWhen searching for an existing tuple during an update or delete operation, return the first matching tuple not the last one.",
      "sinceVersion": "10.12",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Prevent premature shutdown of a Gather or GatherMerge plan node that is underneath a Limit node",
      "description": "Prevent premature shutdown of a Gather or GatherMerge plan node that is underneath a Limit node (Amit Kapila)\nThis avoids failure if such a plan node needs to be scanned more than once, as for instance if it is on the inside of a nestloop.",
      "sinceVersion": "10.12",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Avoid memory leak when there are no free dynamic shared memory slots",
      "description": "Avoid memory leak when there are no free dynamic shared memory slots (Thomas Munro)",
      "sinceVersion": "10.12",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Ignore the `CONCURRENTLY` option when performing an index creation, drop, or rebuild on a temporary table",
      "description": "Ignore the `CONCURRENTLY` option when performing an index creation, drop, or rebuild on a temporary table (Michael Paquier, Heikki Linnakangas, Andres Freund)\nThis avoids strange failures if the temporary table has an `ON COMMIT` action. There is no benefit in using `CONCURRENTLY` for a temporary table anyway, since other sessions cannot access the table, making the extra processing pointless.",
      "sinceVersion": "10.12",
      "contributor": "Michael Paquier, Heikki Linnakangas, Andres Freund"
    },
    {
      "title": "Fix possible failure when resetting expression indexes on temporary tables that are marked `ON COMMIT DELETE ROWS`",
      "description": "Fix possible failure when resetting expression indexes on temporary tables that are marked `ON COMMIT DELETE ROWS` (Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible crash in BRIN index operations with box, range and inet data types",
      "description": "Fix possible crash in BRIN index operations with box, range and inet data types (Heikki Linnakangas)",
      "sinceVersion": "10.12",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix handling of deleted pages in GIN indexes",
      "description": "Fix handling of deleted pages in GIN indexes (Alexander Korotkov)\nAvoid possible deadlocks, incorrect updates of a deleted page's state, and failure to traverse through a recently-deleted page.",
      "sinceVersion": "10.12",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix possible crash with a SubPlan",
      "description": "Fix possible crash with a SubPlan (sub-`SELECT`) within a multi-row `VALUES` list (Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash after FileClose",
      "description": "Fix crash after FileClose() failure (Noah Misch)\nThis issue could only be observed with data_sync_retry enabled, since otherwise FileClose() failure would be reported as a PANIC.",
      "sinceVersion": "10.12",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix unlikely crash with pass-by-reference aggregate transition states",
      "description": "Fix unlikely crash with pass-by-reference aggregate transition states (Andres Freund, Teodor Sigaev)",
      "sinceVersion": "10.12",
      "contributor": "Andres Freund, Teodor Sigaev"
    },
    {
      "title": "Improve error reporting in `to_date",
      "description": "Improve error reporting in `to_date()()` and `to_timestamp()()` (Tom Lane, Álvaro Herrera)\nReports about incorrect month or day names in input strings could truncate the input in the middle of a multi-byte character, leading to an improperly encoded error message that could cause follow-on failures. Truncate at the next whitespace instead.",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Fix off-by-one result for `EXTRACT",
      "description": "Fix off-by-one result for `EXTRACT(ISOYEAR FROM `timestamp`)` for BC dates (Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid stack overflow in `information_schema` views when a self-referential view exists in the system catalogs",
      "description": "Avoid stack overflow in `information_schema` views when a self-referential view exists in the system catalogs (Tom Lane)\nA self-referential view can't work; it will always result in infinite recursion. We handled that situation correctly when trying to execute the view, but not when inquiring whether it is automatically updatable.",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that walsender processes always show NULL for transaction start time in pg_stat_activity",
      "description": "Ensure that walsender processes always show NULL for transaction start time in pg_stat_activity (Álvaro Herrera)\nPreviously, the xact_start column would sometimes show the process start time.",
      "sinceVersion": "10.12",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix edge-case crashes and misestimations in selectivity calculations for the `&lt;@` and `@&gt;` range operators",
      "description": "Fix edge-case crashes and misestimations in selectivity calculations for the `&lt;@` and `@&gt;` range operators (Michael Paquier, Andrey Borodin, Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Michael Paquier, Andrey Borodin, Tom Lane"
    },
    {
      "title": "Ignore system columns when applying most-common-value extended statistics",
      "description": "Ignore system columns when applying most-common-value extended statistics (Tomas Vondra)\nThis prevents “negative bitmapset member not allowed” planner errors for affected queries.",
      "sinceVersion": "10.12",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix BRIN index logic to support hypothetical BRIN indexes",
      "description": "Fix BRIN index logic to support hypothetical BRIN indexes (Julien Rouhaud, Heikki Linnakangas)\nPreviously, if an “index adviser” extension tried to get the planner to produce a plan involving a hypothetical BRIN index, that would fail, because the BRIN cost estimation code would always try to physically access the index's metapage. Now it checks to see if the index is only hypothetical, and uses default assumptions about the index parameters if so.",
      "sinceVersion": "10.12",
      "contributor": "Julien Rouhaud, Heikki Linnakangas"
    },
    {
      "title": "Improve error reporting for attempts to use automatic updating of views with conditional `INSTEAD` rules",
      "description": "Improve error reporting for attempts to use automatic updating of views with conditional `INSTEAD` rules (Dean Rasheed)\nThis has never been supported, but previously the error was thrown only at execution time, so that it could be masked by planner errors.",
      "sinceVersion": "10.12",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent a composite type from being included in itself indirectly via a range type",
      "description": "Prevent a composite type from being included in itself indirectly via a range type (Tom Lane, Julien Rouhaud)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane, Julien Rouhaud"
    },
    {
      "title": "Disallow partition key expressions that return pseudo-types, such as record",
      "description": "Disallow partition key expressions that return pseudo-types, such as record (Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error reporting for index expressions of prohibited types",
      "description": "Fix error reporting for index expressions of prohibited types (Amit Langote)",
      "sinceVersion": "10.12",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix dumping of views that contain only a `VALUES` list to handle cases where a view output column has been renamed",
      "description": "Fix dumping of views that contain only a `VALUES` list to handle cases where a view output column has been renamed (Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that data types and collations used in `XMLTABLE` constructs are accounted for when computing dependencies of a view or rule",
      "description": "Ensure that data types and collations used in `XMLTABLE` constructs are accounted for when computing dependencies of a view or rule (Tom Lane)\nPreviously it was possible to break a view using `XMLTABLE` by dropping a type, if the type was not otherwise referenced in the view. This fix does not correct the dependencies already recorded for existing views, only for newly-created ones.",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent unwanted downcasing and truncation of RADIUS authentication parameters",
      "description": "Prevent unwanted downcasing and truncation of RADIUS authentication parameters (Marcos David)\nThe pg_hba.conf parser mistakenly treated these fields as SQL identifiers, which in general they aren't.",
      "sinceVersion": "10.12",
      "contributor": "Marcos David"
    },
    {
      "title": "Transmit incoming NOTIFY messages to the client before sending `ReadyForQuery`, rather than after",
      "description": "Transmit incoming NOTIFY messages to the client before sending `ReadyForQuery`, rather than after (Tom Lane)\nThis change ensures that, with libpq and other client libraries that act similarly to it, any notifications received during a transaction will be available by the time the client thinks the transaction is complete. This probably makes no difference in practical applications (which would need to cope with asynchronous notifications in any case); but it makes it easier to build test cases with reproducible behavior.",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow libpq to parse all GSS-related connection parameters even when the GSSAPI code hasn't been compiled in",
      "description": "Allow libpq to parse all GSS-related connection parameters even when the GSSAPI code hasn't been compiled in (Tom Lane)\nThis makes the behavior similar to our SSL support, where it was long ago deemed to be a good idea to always accept all the related parameters, even if some are ignored or restricted due to lack of the feature in a particular build.",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect handling of `%b` and `%B` format codes in ecpg's `PGTYPEStimestamp_fmt_asc",
      "description": "Fix incorrect handling of `%b` and `%B` format codes in ecpg's `PGTYPEStimestamp_fmt_asc()()` function (Tomas Vondra)\nDue to an off-by-one error, these codes would print the wrong month name, or possibly crash.",
      "sinceVersion": "10.12",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix parallel pg_dump/pg_restore to more gracefully handle failure to create worker processes",
      "description": "Fix parallel pg_dump/pg_restore to more gracefully handle failure to create worker processes (Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent possible crash or lockup when attempting to terminate a parallel pg_dump/pg_restore run via a signal",
      "description": "Prevent possible crash or lockup when attempting to terminate a parallel pg_dump/pg_restore run via a signal (Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_upgrade, look inside arrays and ranges while searching for non-upgradable data types in tables",
      "description": "In pg_upgrade, look inside arrays and ranges while searching for non-upgradable data types in tables (Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Apply more thorough syntax checking to createuser's --connection-limit option",
      "description": "Apply more thorough syntax checking to createuser's --connection-limit option (Álvaro Herrera)",
      "sinceVersion": "10.12",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid crash in postgres_fdw when trying to send a command like `UPDATE remote_tab SET",
      "description": "Avoid crash in postgres_fdw when trying to send a command like `UPDATE remote_tab SET (x,y) = (SELECT ...)` to the remote server (Tom Lane)",
      "sinceVersion": "10.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/dict_int, reject maxlen settings less than one",
      "description": "In contrib/dict_int, reject maxlen settings less than one (Tomas Vondra)\nThis prevents a possible crash with silly settings for that parameter.",
      "sinceVersion": "10.12",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Disallow NULL category values in contrib/tablefunc's `crosstab",
      "description": "Disallow NULL category values in contrib/tablefunc's `crosstab()()` function (Joe Conway)\nThis case never worked usefully, and it would crash on some platforms.",
      "sinceVersion": "10.12",
      "contributor": "Joe Conway"
    },
    {
      "title": "Mark some timeout and statistics-tracking GUC variables as `PGDLLIMPORT`, to allow extensions to access them on Windows",
      "description": "Mark some timeout and statistics-tracking GUC variables as `PGDLLIMPORT`, to allow extensions to access them on Windows (Pascal Legrand)\nThis applies to `idle_in_transaction_session_timeout`, `lock_timeout`, `statement_timeout`, `track_activities`, `track_counts`, and `track_functions`.",
      "sinceVersion": "10.12",
      "contributor": "Pascal Legrand"
    },
    {
      "title": "Avoid memory leak in sanity checks for “slab” memory contexts",
      "description": "Avoid memory leak in sanity checks for “slab” memory contexts (Tomas Vondra)\nThis isn't an issue for production builds, since they wouldn't ordinarily have memory context checking enabled; but the leak could be quite severe in a debug build.",
      "sinceVersion": "10.12",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix multiple statistics entries reported by the LWLock statistics mechanism",
      "description": "Fix multiple statistics entries reported by the LWLock statistics mechanism (Fujii Masao)\nThe LWLock statistics code (which is not built by default; it requires compiling with -DLWLOCK_STATS) could report multiple entries for the same LWLock and backend process, as a result of faulty hashtable key creation.",
      "sinceVersion": "10.12",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix race condition that led to delayed delivery of interprocess signals on Windows",
      "description": "Fix race condition that led to delayed delivery of interprocess signals on Windows (Amit Kapila)\nThis caused visible timing oddities in NOTIFY, and perhaps other misbehavior.",
      "sinceVersion": "10.12",
      "contributor": "Amit Kapila"
    },
    {
      "title": "On Windows, retry a few times after an `ERROR_ACCESS_DENIED` file access failure",
      "description": "On Windows, retry a few times after an `ERROR_ACCESS_DENIED` file access failure (Alexander Lakhin, Tom Lane)\nThis helps cope with cases where a file open attempt fails because the targeted file is flagged for deletion but not yet actually gone. pg_ctl, for example, frequently failed with such an error when probing to see if the postmaster had shut down yet.",
      "sinceVersion": "10.12",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Add pg_dump support for ALTER ... DEPENDS ON EXTENSION",
      "description": "Add pg_dump support for ALTER ... DEPENDS ON EXTENSION (Álvaro Herrera)\npg_dump previously ignored dependencies added this way, causing them to be forgotten during dump/restore or pg_upgrade.",
      "sinceVersion": "10.13",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Preserve the indisclustered setting of indexes rewritten by ALTER TABLE",
      "description": "Preserve the indisclustered setting of indexes rewritten by ALTER TABLE (Amit Langote, Justin Pryzby)\nPreviously, ALTER TABLE lost track of which index had been used for CLUSTER.",
      "sinceVersion": "10.13",
      "contributor": "Amit Langote, Justin Pryzby"
    },
    {
      "title": "Preserve the replica identity properties of indexes rewritten by ALTER TABLE",
      "description": "Preserve the replica identity properties of indexes rewritten by ALTER TABLE (Quan Zongliang, Peter Eisentraut)",
      "sinceVersion": "10.13",
      "contributor": "Quan Zongliang, Peter Eisentraut"
    },
    {
      "title": "Lock objects sooner during DROP OWNED BY",
      "description": "Lock objects sooner during DROP OWNED BY (Álvaro Herrera)\nThis avoids failures in race-condition cases where another session is deleting some of the same objects.",
      "sinceVersion": "10.13",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix error-case processing for CREATE ROLE ... IN ROLE",
      "description": "Fix error-case processing for CREATE ROLE ... IN ROLE (Andrew Gierth)\nSome error cases would be reported as “unexpected node type” or the like, instead of the intended message.",
      "sinceVersion": "10.13",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Ensure that members of the `pg_read_all_stats` role can read all statistics views, as expected",
      "description": "Ensure that members of the `pg_read_all_stats` role can read all statistics views, as expected (Magnus Hagander)\nThe functions underlying the pg_stat_progress_* views had not gotten this memo.",
      "sinceVersion": "10.13",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Fix full text search to handle NOT above a phrase search correctly",
      "description": "Fix full text search to handle NOT above a phrase search correctly (Tom Lane)\nQueries such as `!(foo&lt;-&gt;bar)` failed to find matching rows when implemented as a GiST or GIN index search.",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix full text search for cases where a phrase search includes an item with both prefix matching and a weight restriction",
      "description": "Fix full text search for cases where a phrase search includes an item with both prefix matching and a weight restriction (Tom Lane)",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix `ts_headline",
      "description": "Fix `ts_headline()()` to make better headline selections when working with phrase queries (Tom Lane)",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bugs in gin_fuzzy_search_limit processing",
      "description": "Fix bugs in gin_fuzzy_search_limit processing (Adé Heyward, Tom Lane)\nA small value of gin_fuzzy_search_limit could result in unexpected slowness due to unintentionally rescanning the same index page many times. Another code path failed to apply the intended filtering at all, possibly returning too many values.",
      "sinceVersion": "10.13",
      "contributor": "Adé Heyward, Tom Lane"
    },
    {
      "title": "Allow input of type circle to accept the format “`",
      "description": "Allow input of type circle to accept the format “`(`x`,y`),`r`” as the documentation says it does (David Zhang)",
      "sinceVersion": "10.13",
      "contributor": "David Zhang"
    },
    {
      "title": "Make the `get_bit",
      "description": "Make the `get_bit()()` and `set_bit()()` functions cope with bytea strings longer than 256MB (Movead Li)\nSince the bit number argument is only int4, it's impossible to use these functions to access bits beyond the first 256MB of a long bytea. We'll widen the argument to int8 in v13, but in the meantime, allow these functions to work on the initial substring of a long bytea.",
      "sinceVersion": "10.13",
      "contributor": "Movead Li"
    },
    {
      "title": "Ignore file-not-found errors in `pg_ls_waldir",
      "description": "Ignore file-not-found errors in `pg_ls_waldir()()` and allied functions (Tom Lane)\nThis prevents a race condition failure if a file is removed between when we see its directory entry and when we attempt to `stat()()` it.",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possibly leaking an open-file descriptor for a directory in `pg_ls_dir",
      "description": "Avoid possibly leaking an open-file descriptor for a directory in `pg_ls_dir()()`, `pg_timezone_names()()`, `pg_tablespace_databases()()`, and allied functions (Justin Pryzby)",
      "sinceVersion": "10.13",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix polymorphic-function type resolution to correctly infer the actual type of an anyarray output when given only an anyrange input",
      "description": "Fix polymorphic-function type resolution to correctly infer the actual type of an anyarray output when given only an anyrange input (Tom Lane)",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid unlikely crash when REINDEX is terminated by a session-shutdown signal",
      "description": "Avoid unlikely crash when REINDEX is terminated by a session-shutdown signal (Tom Lane)",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix low-probability crash after constraint violation errors in partitioned tables",
      "description": "Fix low-probability crash after constraint violation errors in partitioned tables (Andres Freund)",
      "sinceVersion": "10.13",
      "contributor": "Andres Freund"
    },
    {
      "title": "Prevent printout of possibly-incorrect hash join table statistics in EXPLAIN",
      "description": "Prevent printout of possibly-incorrect hash join table statistics in EXPLAIN (Konstantin Knizhnik, Tom Lane, Thomas Munro)",
      "sinceVersion": "10.13",
      "contributor": "Konstantin Knizhnik, Tom Lane, Thomas Munro"
    },
    {
      "title": "Fix reporting of elapsed time for heap truncation steps in VACUUM VERBOSE",
      "description": "Fix reporting of elapsed time for heap truncation steps in VACUUM VERBOSE (Tatsuhito Kasahara)",
      "sinceVersion": "10.13",
      "contributor": "Tatsuhito Kasahara"
    },
    {
      "title": "Ensure that TimelineHistoryRead and TimelineHistoryWrite wait states are reported in all code paths that read or write timeline history files",
      "description": "Ensure that TimelineHistoryRead and TimelineHistoryWrite wait states are reported in all code paths that read or write timeline history files (Masahiro Ikeda)",
      "sinceVersion": "10.13",
      "contributor": "Masahiro Ikeda"
    },
    {
      "title": "Avoid possibly showing “waiting” twice in a process's PS status",
      "description": "Avoid possibly showing “waiting” twice in a process's PS status (Masahiko Sawada)",
      "sinceVersion": "10.13",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid premature recycling of WAL segments during crash recovery",
      "description": "Avoid premature recycling of WAL segments during crash recovery (Jehan-Guillaume de Rorthais)\nWAL segments that become ready to be archived during crash recovery were potentially recycled without being archived.",
      "sinceVersion": "10.13",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Avoid scanning irrelevant timelines during archive recovery",
      "description": "Avoid scanning irrelevant timelines during archive recovery (Kyotaro Horiguchi)\nThis can eliminate many attempts to fetch non-existent WAL files from archive storage, which is helpful if archive access is slow.",
      "sinceVersion": "10.13",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Remove bogus “subtransaction logged without previous top-level txn record” error check in logical decoding",
      "description": "Remove bogus “subtransaction logged without previous top-level txn record” error check in logical decoding (Arseny Sher, Amit Kapila)\nThis condition is legitimately reachable in various scenarios, so remove the check.",
      "sinceVersion": "10.13",
      "contributor": "Arseny Sher, Amit Kapila"
    },
    {
      "title": "Ensure that a replication slot's `io_in_progress_lock` is released in failure code paths",
      "description": "Ensure that a replication slot's `io_in_progress_lock` is released in failure code paths (Pavan Deolasee)\nThis could result in a walsender later becoming stuck waiting for the lock.",
      "sinceVersion": "10.13",
      "contributor": "Pavan Deolasee"
    },
    {
      "title": "Fix race conditions in synchronous standby management",
      "description": "Fix race conditions in synchronous standby management (Tom Lane)\nDuring a change in the synchronous_standby_names setting, there was a window in which wrong decisions could be made about whether it is OK to release transactions that are waiting for synchronous commit. Another hazard for similarly wrong decisions existed if a walsender process exited and was immediately replaced by another.",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure nextXid can't go backwards on a standby server",
      "description": "Ensure nextXid can't go backwards on a standby server (Eka Palamadai)\nThis race condition could allow incorrect hot standby feedback messages to be sent back to the primary server, potentially allowing VACUUM to run too soon on the primary.",
      "sinceVersion": "10.13",
      "contributor": "Eka Palamadai"
    },
    {
      "title": "Add missing SQLSTATE values to a few error reports",
      "description": "Add missing SQLSTATE values to a few error reports (Sawada Masahiko)",
      "sinceVersion": "10.13",
      "contributor": "Sawada Masahiko"
    },
    {
      "title": "Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function",
      "description": "Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function (Tom Lane)",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak in libpq when using `sslmode=verify-full`",
      "description": "Fix memory leak in libpq when using `sslmode=verify-full` (Roman Peshkurov)\nCertificate verification during connection startup could leak some memory. This would become an issue if a client process opened many database connections during its lifetime.",
      "sinceVersion": "10.13",
      "contributor": "Roman Peshkurov"
    },
    {
      "title": "Fix ecpg to treat an argument of just “`-`” as meaning “read from stdin” on all platforms",
      "description": "Fix ecpg to treat an argument of just “`-`” as meaning “read from stdin” on all platforms (Tom Lane)",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow tab-completion of the filename argument to psql's \\gx command",
      "description": "Allow tab-completion of the filename argument to psql's \\gx command (Vik Fearing)",
      "sinceVersion": "10.13",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Fix pg_dump to dump comments on RLS policy objects",
      "description": "Fix pg_dump to dump comments on RLS policy objects (Tom Lane)",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_dump, postpone restore of event triggers till the end",
      "description": "In pg_dump, postpone restore of event triggers till the end (Fabrízio de Royes Mello, Hamid Akhtar, Tom Lane)\nThis minimizes the risk that an event trigger could interfere with the restoration of other objects.",
      "sinceVersion": "10.13",
      "contributor": "Fabrízio de Royes Mello, Hamid Akhtar, Tom Lane"
    },
    {
      "title": "Fix quoting of --encoding, --lc-ctype and --lc-collate values in createdb utility",
      "description": "Fix quoting of --encoding, --lc-ctype and --lc-collate values in createdb utility (Michael Paquier)",
      "sinceVersion": "10.13",
      "contributor": "Michael Paquier"
    },
    {
      "title": "contrib/lo's `lo_manage",
      "description": "contrib/lo's `lo_manage()()` function crashed if called directly rather than as a trigger (Tom Lane)",
      "sinceVersion": "10.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/ltree, protect against overflow of ltree and lquery length fields",
      "description": "In contrib/ltree, protect against overflow of ltree and lquery length fields (Nikita Glukhov)",
      "sinceVersion": "10.13",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Fix cache reference leak in contrib/sepgsql",
      "description": "Fix cache reference leak in contrib/sepgsql (Michael Luo)",
      "sinceVersion": "10.13",
      "contributor": "Michael Luo"
    },
    {
      "title": "Avoid failures when dealing with Unix-style locale names on Windows",
      "description": "Avoid failures when dealing with Unix-style locale names on Windows (Juan José Santamaría Flecha)",
      "sinceVersion": "10.13",
      "contributor": "Juan José Santamaría Flecha"
    },
    {
      "title": "Use pkg-config, if available, to locate libxml2 during configure",
      "description": "Use pkg-config, if available, to locate libxml2 during configure (Hugh McMaster, Tom Lane, Peter Eisentraut)\nIf pkg-config is not present or lacks knowledge of libxml2, we still query xml2-config as before.\nThis change could break build processes that try to make PostgreSQL use a non-default version of libxml2 by putting that version's xml2-config into the PATH. Instead, set XML2_CONFIG to point to the non-default xml2-config. That method will work with either older or newer PostgreSQL releases.",
      "sinceVersion": "10.13",
      "contributor": "Hugh McMaster, Tom Lane, Peter Eisentraut"
    },
    {
      "title": "Include CFLAGS_SL in CXXFLAGS when building a shared library",
      "description": "Include CFLAGS_SL in CXXFLAGS when building a shared library (Oleksii Kliukin)\nThis ensures that C++ source files are compiled correctly, for example by adding `-fPIC` when needed.",
      "sinceVersion": "10.13",
      "contributor": "Oleksii Kliukin"
    },
    {
      "title": "In MSVC builds, cope with spaces in the path name for Python",
      "description": "In MSVC builds, cope with spaces in the path name for Python (Victor Wagner)",
      "sinceVersion": "10.13",
      "contributor": "Victor Wagner"
    },
    {
      "title": "In MSVC builds, fix detection of Visual Studio version to work with more language settings",
      "description": "In MSVC builds, fix detection of Visual Studio version to work with more language settings (Andrew Dunstan)",
      "sinceVersion": "10.13",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "In MSVC builds, use `-Wno-deprecated` with bison versions newer than 3.0, as non-Windows builds already do",
      "description": "In MSVC builds, use `-Wno-deprecated` with bison versions newer than 3.0, as non-Windows builds already do (Andrew Dunstan)",
      "sinceVersion": "10.13",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2020a for DST law changes in Morocco and the Canadian Yukon, plus historical corrections for Shanghai.\nThe America/Godthab zone has been renamed to America/Nuuk to reflect current English usage; however, the old name remains available as a compatibility link.\nAlso, update initdb's list of known Windows time zone names to include recent additions, improving the odds that it will correctly translate the system time zone setting on that platform.",
      "sinceVersion": "10.13",
      "contributor": null
    },
    {
      "title": "Fix slow execution of `ts_headline",
      "description": "Fix slow execution of `ts_headline()()` (Tom Lane)\nThe phrase-search fix added in our previous set of minor releases could cause `ts_headline()()` to take unreasonable amounts of time for long documents; to make matters worse, the query was not cancellable within the troublesome loop.",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Set a secure search_path in logical replication walsenders and apply workers",
      "description": "Set a secure search_path in logical replication walsenders and apply workers (Noah Misch)\nA malicious user of either the publisher or subscriber database could potentially cause execution of arbitrary SQL code by the role running replication, which is often a superuser. Some of the risks here are equivalent to those described in CVE-2018-1058, and are mitigated in this patch by ensuring that the replication sender and receiver execute with empty search_path settings. (As with CVE-2018-1058, that change might cause problems for under-qualified names used in replicated tables' DDL.) Other risks are inherent in replicating objects that belong to untrusted roles; the most we can do is document that there is a hazard to consider. (CVE-2020-14349)",
      "sinceVersion": "10.14",
      "contributor": "Noah Misch"
    },
    {
      "title": "Make contrib modules' installation scripts more secure",
      "description": "Make contrib modules' installation scripts more secure (Tom Lane)\nAttacks similar to those described in CVE-2018-1058 could be carried out against an extension installation script, if the attacker can create objects in either the extension's target schema or the schema of some prerequisite extension. Since extensions often require superuser privilege to install, this can open a path to obtaining superuser privilege. To mitigate this risk, be more careful about the search_path used to run an installation script; disable check_function_bodies within the script; and fix catalog-adjustment queries used in some contrib modules to ensure they are secure. Also provide documentation to help third-party extension authors make their installation scripts secure. This is not a complete solution; extensions that depend on other extensions can still be at risk if installed carelessly. (CVE-2020-14350)",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix firing of column-specific `UPDATE` triggers in logical replication subscribers",
      "description": "Fix firing of column-specific `UPDATE` triggers in logical replication subscribers (Tom Lane)\nThe code neglected to account for the possibility of column numbers being different between the publisher and subscriber tables, so that if those were indeed different, wrong decisions might be made about which triggers to fire.",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure the `repeat",
      "description": "Ensure the `repeat()()` function can be interrupted by query cancel (Joe Conway)",
      "sinceVersion": "10.14",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix `pg_current_logfile",
      "description": "Fix `pg_current_logfile()()` to not include a carriage return (`\\r`) in its result on Windows (Tom Lane)",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mis-handling of `NaN` inputs during parallel aggregation on numeric-type columns",
      "description": "Fix mis-handling of `NaN` inputs during parallel aggregation on numeric-type columns (Tom Lane)\nIf some partial aggregation workers found only `NaN`s while others found only non-`NaN`s, the results were combined incorrectly, possibly leading to the wrong overall result (i.e., not `NaN` when it should be).",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject time-of-day values greater than 24 hours",
      "description": "Reject time-of-day values greater than 24 hours (Tom Lane)\nThe intention of the datetime input code is to allow “24:00:00” or equivalently “23:59:60”, but no larger value. However, the range check was miscoded so that it would accept “23:59:60.`nnn`” with nonzero fractional-second `nnn`. In timestamp values this would result in wrapping into the first second of the next day. In time and timetz values, the stored value would actually be more than 24 hours, causing dump/reload failures and possibly other misbehavior.",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Undo double-quoting of index names in EXPLAIN's non-text output formats",
      "description": "Undo double-quoting of index names in EXPLAIN's non-text output formats (Tom Lane, Euler Taveira)",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane, Euler Taveira"
    },
    {
      "title": "Fix EXPLAIN's accounting for resource usage, particularly buffer accesses, in parallel workers in a plan using `Gather Merge` nodes",
      "description": "Fix EXPLAIN's accounting for resource usage, particularly buffer accesses, in parallel workers in a plan using `Gather Merge` nodes (Jehan-Guillaume de Rorthais)",
      "sinceVersion": "10.14",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix timing of constraint revalidation in ALTER TABLE",
      "description": "Fix timing of constraint revalidation in ALTER TABLE (David Rowley)\nIf ALTER TABLE needs to fully rewrite the table's contents (for example, due to change of a column's data type) and also needs to scan the table to re-validate foreign keys or `CHECK` constraints, it sometimes did things in the wrong order, leading to odd errors such as “could not read block 0 in file \"base/nnnnn/nnnnn\": read only 0 of 8192 bytes”.",
      "sinceVersion": "10.14",
      "contributor": "David Rowley"
    },
    {
      "title": "Work around incorrect not-null markings for pg_subscription.subslotname and pg_subscription_rel.srsublsn",
      "description": "Work around incorrect not-null markings for pg_subscription.subslotname and pg_subscription_rel.srsublsn (Tom Lane)\nThe bootstrap catalog data incorrectly marks these two catalog columns as always non-null. There's no easy way to correct that mistake in existing installations (though v13 and later will have the correct markings). The main place that depends on that marking being correct is JIT-enabled tuple deconstruction, so teach it to explicitly ignore the marking for these two columns. Also adjust some C code that accessed srsublsn without checking to see if it's null; a crash from that is improbable but perhaps not impossible.",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope with `LATERAL` references in restriction clauses attached to an un-flattened sub-`SELECT` in the `FROM` clause",
      "description": "Cope with `LATERAL` references in restriction clauses attached to an un-flattened sub-`SELECT` in the `FROM` clause (Tom Lane)\nThis oversight could result in assertion failures or crashes at query execution.",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid believing that a never-analyzed foreign table has zero tuples",
      "description": "Avoid believing that a never-analyzed foreign table has zero tuples (Tom Lane)\nThis primarily affected the planner's estimate of the number of groups that would be obtained by `GROUP BY`.",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove bogus warning about “leftover placeholder tuple” in BRIN index de-summarization",
      "description": "Remove bogus warning about “leftover placeholder tuple” in BRIN index de-summarization (Álvaro Herrera)\nThe case can occur legitimately after a cancelled vacuum, so warning about it is overly noisy.",
      "sinceVersion": "10.14",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Improve error handling in the server's buffile module",
      "description": "Improve error handling in the server's buffile module (Thomas Munro)\nFix some cases where I/O errors were indistinguishable from reaching EOF, or were not reported at all. Also add details such as block numbers and byte counts where appropriate.",
      "sinceVersion": "10.14",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix conflict-checking anomalies in `SERIALIZABLE` isolation mode",
      "description": "Fix conflict-checking anomalies in `SERIALIZABLE` isolation mode (Peter Geoghegan)\nIf a concurrently-inserted tuple was updated by a different concurrent transaction, and neither tuple version was visible to the current transaction's snapshot, serialization conflict checking could draw the wrong conclusions about whether the tuple was relevant to the results of the current transaction. This could allow a serializable transaction to commit when it should have failed with a serialization error.",
      "sinceVersion": "10.14",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Avoid repeated marking of dead btree index entries as dead",
      "description": "Avoid repeated marking of dead btree index entries as dead (Masahiko Sawada)\nWhile functionally harmless, this led to useless WAL traffic when checksums are enabled or wal_log_hints is on.",
      "sinceVersion": "10.14",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix failure of some code paths to acquire the correct lock before modifying pg_control",
      "description": "Fix failure of some code paths to acquire the correct lock before modifying pg_control (Nathan Bossart, Fujii Masao)\nThis oversight could allow pg_control to be written out with an inconsistent checksum, possibly causing trouble later, including inability to restart the database if it crashed before the next pg_control update.",
      "sinceVersion": "10.14",
      "contributor": "Nathan Bossart, Fujii Masao"
    },
    {
      "title": "Fix errors in `currtid",
      "description": "Fix errors in `currtid()()` and `currtid2()()` (Michael Paquier)\nThese functions (which are undocumented and used only by ancient versions of the ODBC driver) contained coding errors that could result in crashes, or in confusing error messages such as “could not open file” when applied to a relation having no storage.",
      "sinceVersion": "10.14",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid calling `elog",
      "description": "Avoid calling `elog()()` or `palloc()()` while holding a spinlock (Michael Paquier, Tom Lane)\nLogic associated with replication slots had several violations of this coding rule. While the odds of trouble are quite low, an error in the called function would lead to a stuck spinlock.",
      "sinceVersion": "10.14",
      "contributor": "Michael Paquier, Tom Lane"
    },
    {
      "title": "Fix assertion in logical replication subscriber to allow use of `REPLICA IDENTITY FULL`",
      "description": "Fix assertion in logical replication subscriber to allow use of `REPLICA IDENTITY FULL` (Euler Taveira)\nThis was just an incorrect assertion, so it has no impact on standard production builds.",
      "sinceVersion": "10.14",
      "contributor": "Euler Taveira"
    },
    {
      "title": "Report out-of-disk-space errors properly in pg_dump and pg_basebackup",
      "description": "Report out-of-disk-space errors properly in pg_dump and pg_basebackup (Justin Pryzby, Tom Lane, Álvaro Herrera)\nSome code paths could produce silly reports like “could not write file: Success”.",
      "sinceVersion": "10.14",
      "contributor": "Justin Pryzby, Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Fix parallel restore of tables having both table-level privileges and per-column privileges",
      "description": "Fix parallel restore of tables having both table-level privileges and per-column privileges (Tom Lane)\nThe table-level privilege grants have to be applied first, but a parallel restore did not reliably order them that way; this could lead to “tuple concurrently updated” errors, or to disappearance of some per-column privilege grants. The fix for this is to include dependency links between such entries in the archive file, meaning that a new dump has to be taken with a corrected pg_dump to ensure that the problem will not recur.",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that pg_upgrade runs with vacuum_defer_cleanup_age set to zero in the target cluster",
      "description": "Ensure that pg_upgrade runs with vacuum_defer_cleanup_age set to zero in the target cluster (Bruce Momjian)\nIf the target cluster's configuration has been modified to set vacuum_defer_cleanup_age to a nonzero value, that prevented freezing of the system catalogs from working properly, which caused the upgrade to fail in confusing ways. Ensure that any such setting is overridden for the duration of the upgrade.",
      "sinceVersion": "10.14",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Fix pg_recvlogical to drain pending messages before exiting",
      "description": "Fix pg_recvlogical to drain pending messages before exiting (Noah Misch)\nWithout this, the replication sender might detect a send failure and exit without making the expected final update to the replication slot's LSN position. That led to re-transmitting data after the next connection. It was also possible to miss error messages sent after the last data that pg_recvlogical wants to consume.",
      "sinceVersion": "10.14",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix pg_rewind's handling of just-deleted files in the source data directory",
      "description": "Fix pg_rewind's handling of just-deleted files in the source data directory (Justin Pryzby, Michael Paquier)\nWhen working with an on-line source database, concurrent file deletions are possible, but pg_rewind would get confused if deletion happened between seeing a file's directory entry and examining it with `stat()()`.",
      "sinceVersion": "10.14",
      "contributor": "Justin Pryzby, Michael Paquier"
    },
    {
      "title": "Make pg_test_fsync use binary I/O mode on Windows",
      "description": "Make pg_test_fsync use binary I/O mode on Windows (Michael Paquier)\nPreviously it wrote the test file in text mode, which is not an accurate reflection of PostgreSQL's actual usage.",
      "sinceVersion": "10.14",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix failure to initialize local state correctly in contrib/dblink",
      "description": "Fix failure to initialize local state correctly in contrib/dblink (Joe Conway)\nWith the right combination of circumstances, this could lead to `dblink_close()()` issuing an unexpected remote COMMIT.",
      "sinceVersion": "10.14",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix contrib/pgcrypto's misuse of `deflate",
      "description": "Fix contrib/pgcrypto's misuse of `deflate()()` (Tom Lane)\nThe `pgp_sym_encrypt()` functions could produce incorrect compressed data due to mishandling of zlib's API requirements. We have no reports of this error manifesting with stock zlib, but it can be seen when using IBM's zlibNX implementation.",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner case in decompression logic in contrib/pgcrypto's `pgp_sym_decrypt",
      "description": "Fix corner case in decompression logic in contrib/pgcrypto's `pgp_sym_decrypt()` functions (Kyotaro Horiguchi, Michael Paquier)\nA compressed stream can validly end with an empty packet, but the decompressor failed to handle this and would complain about corrupt data.",
      "sinceVersion": "10.14",
      "contributor": "Kyotaro Horiguchi, Michael Paquier"
    },
    {
      "title": "Use POSIX-standard `strsignal",
      "description": "Use POSIX-standard `strsignal()()` in place of the BSD-ish `sys_siglist[]` (Tom Lane)\nThis avoids build failures with very recent versions of glibc.",
      "sinceVersion": "10.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Support building our NLS code with Microsoft Visual Studio 2015 or later",
      "description": "Support building our NLS code with Microsoft Visual Studio 2015 or later (Juan José Santamaría Flecha, Davinder Singh, Amit Kapila)",
      "sinceVersion": "10.14",
      "contributor": "Juan José Santamaría Flecha, Davinder Singh, Amit Kapila"
    },
    {
      "title": "Avoid possible failure of our MSVC install script when there is a file named configure several levels above the source code tree",
      "description": "Avoid possible failure of our MSVC install script when there is a file named configure several levels above the source code tree (Arnold Müller)\nThis could confuse some logic that looked for configure to identify the top level of the source tree.",
      "sinceVersion": "10.14",
      "contributor": "Arnold Müller"
    },
    {
      "title": "Fix recently-added timetz test case so it works when the USA is not observing daylight savings time",
      "description": "Fix recently-added timetz test case so it works when the USA is not observing daylight savings time (Tom Lane)",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix usage of complex connection-string parameters in pg_dump, pg_restore, clusterdb, reindexdb, and vacuumdb",
      "description": "Fix usage of complex connection-string parameters in pg_dump, pg_restore, clusterdb, reindexdb, and vacuumdb (Tom Lane)\nThe -d parameter of pg_dump and pg_restore, or the --maintenance-db parameter of the other programs mentioned, can be a “connection string” containing multiple connection parameters rather than just a database name. In cases where these programs need to initiate additional connections, such as parallel processing or processing of multiple databases, the connection string was forgotten and just the basic connection parameters (database name, host, port, and username) were used for the additional connections. This could lead to connection failures if the connection string included any other essential information, such as non-default SSL or GSS parameters. Worse, the connection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. (CVE-2020-25694)",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "When psql's \\connect command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used",
      "description": "When psql's \\connect command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used (Tom Lane)\nThis avoids cases where reconnection might fail due to omission of relevant parameters, such as non-default SSL or GSS options. Worse, the reconnection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. This is largely the same problem as just cited for pg_dump et al, although psql's behavior is more complex since the user may intentionally override some connection parameters. (CVE-2020-25694)",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent psql's \\gset command from modifying specially-treated variables",
      "description": "Prevent psql's \\gset command from modifying specially-treated variables (Noah Misch)\n\\gset without a prefix would overwrite whatever variables the server told it to. Thus, a compromised server could set specially-treated variables such as PROMPT1, giving the ability to execute arbitrary shell code in the user's session.\nThe PostgreSQL Project thanks Nick Cleaton for reporting this problem. (CVE-2020-25696)",
      "sinceVersion": "10.15",
      "contributor": "Noah Misch"
    },
    {
      "title": "Prevent possible data loss from concurrent truncations of SLRU logs",
      "description": "Prevent possible data loss from concurrent truncations of SLRU logs (Noah Misch)\nThis rare problem would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "sinceVersion": "10.15",
      "contributor": "Noah Misch"
    },
    {
      "title": "Ensure that SLRU directories are properly fsync'd during checkpoints",
      "description": "Ensure that SLRU directories are properly fsync'd during checkpoints (Thomas Munro)\nThis prevents possible data loss in a subsequent operating system crash.",
      "sinceVersion": "10.15",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix ALTER ROLE for users with the `BYPASSRLS` attribute",
      "description": "Fix ALTER ROLE for users with the `BYPASSRLS` attribute (Tom Lane, Stephen Frost)\nThe `BYPASSRLS` attribute is only allowed to be changed by superusers, but other ALTER ROLE operations, such as password changes, should be allowed with only ordinary permission checks. The previous coding erroneously restricted all changes on such a role to superusers.",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane, Stephen Frost"
    },
    {
      "title": "Fix handling of expressions in CREATE TABLE LIKE with inheritance",
      "description": "Fix handling of expressions in CREATE TABLE LIKE with inheritance (Tom Lane)\nIf a CREATE TABLE command uses both `LIKE` and traditional inheritance, column references in `CHECK` constraints and expression indexes that came from a `LIKE` parent table tended to get mis-numbered, resulting in wrong answers and/or bizarre error messages. The same could happen in `GENERATED` expressions, in branches that have that feature.",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix off-by-one conversion of negative years to BC dates in `to_date",
      "description": "Fix off-by-one conversion of negative years to BC dates in `to_date()()` and `to_timestamp()()` (Dar Alathar-Yemen, Tom Lane)\nAlso, arrange for the combination of a negative year and an explicit “BC” marker to cancel out and produce AD.",
      "sinceVersion": "10.15",
      "contributor": "Dar Alathar-Yemen, Tom Lane"
    },
    {
      "title": "Ensure that standby servers will archive WAL timeline history files when archive_mode is set to `always`",
      "description": "Ensure that standby servers will archive WAL timeline history files when archive_mode is set to `always` (Grigory Smolkin, Fujii Masao)\nThis oversight could lead to failure of subsequent PITR recovery attempts.",
      "sinceVersion": "10.15",
      "contributor": "Grigory Smolkin, Fujii Masao"
    },
    {
      "title": "Fix “cache lookup failed for relation 0” failures in logical replication workers",
      "description": "Fix “cache lookup failed for relation 0” failures in logical replication workers (Tom Lane)\nThe real-world impact is small, since the failure is unlikely, and if it does happen the worker would just exit and be restarted.",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent logical replication workers from sending redundant ping requests",
      "description": "Prevent logical replication workers from sending redundant ping requests (Tom Lane)",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "During “smart” shutdown, don't terminate background processes until all client",
      "description": "During “smart” shutdown, don't terminate background processes until all client (foreground) sessions are done (Tom Lane)\nThe previous behavior broke parallel query processing, since the postmaster would terminate parallel workers and refuse to launch any new ones. It also caused autovacuum to cease functioning, which could have dire long-term effects if the surviving client sessions make a lot of data changes.",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid recursive consumption of stack space while processing signals in the postmaster",
      "description": "Avoid recursive consumption of stack space while processing signals in the postmaster (Tom Lane)\nHeavy use of parallel processing has been observed to cause postmaster crashes due to too many concurrent signals requesting creation of a parallel worker process.",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid running atexit handlers when exiting due to SIGQUIT",
      "description": "Avoid running atexit handlers when exiting due to SIGQUIT (Kyotaro Horiguchi, Tom Lane)\nMost server processes followed this practice already, but the archiver process was overlooked. Backends that were still waiting for a client startup packet got it wrong, too.",
      "sinceVersion": "10.15",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "Avoid failure when SQL function inlining changes the shape of a potentially-hashable subplan comparison expression",
      "description": "Avoid failure when SQL function inlining changes the shape of a potentially-hashable subplan comparison expression (Tom Lane)",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "While building or re-building an index, tolerate the appearance of new HOT chains due to concurrent updates",
      "description": "While building or re-building an index, tolerate the appearance of new HOT chains due to concurrent updates (Anastasia Lubennikova, Álvaro Herrera)\nThis oversight could lead to “failed to find parent tuple for heap-only tuple” errors.",
      "sinceVersion": "10.15",
      "contributor": "Anastasia Lubennikova, Álvaro Herrera"
    },
    {
      "title": "Fix failure of parallel B-tree index scans when the index condition is unsatisfiable",
      "description": "Fix failure of parallel B-tree index scans when the index condition is unsatisfiable (James Hunter)",
      "sinceVersion": "10.15",
      "contributor": "James Hunter"
    },
    {
      "title": "Ensure that data is detoasted before being inserted into a BRIN index",
      "description": "Ensure that data is detoasted before being inserted into a BRIN index (Tomas Vondra)\nIndex entries are not supposed to contain out-of-line TOAST pointers, but BRIN didn't get that memo. This could lead to errors like “missing chunk number 0 for toast value NNN”. (If you are faced with such an error from an existing index, REINDEX should be enough to fix it.)",
      "sinceVersion": "10.15",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Handle concurrent desummarization correctly during BRIN index scans",
      "description": "Handle concurrent desummarization correctly during BRIN index scans (Alexander Lakhin, Álvaro Herrera)\nPreviously, if a page range was desummarized at just the wrong time, an index scan might falsely raise an error indicating index corruption.",
      "sinceVersion": "10.15",
      "contributor": "Alexander Lakhin, Álvaro Herrera"
    },
    {
      "title": "Fix rare “lost saved point in index” errors in scans of multicolumn GIN indexes",
      "description": "Fix rare “lost saved point in index” errors in scans of multicolumn GIN indexes (Tom Lane)",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unportable use of `getnameinfo",
      "description": "Fix unportable use of `getnameinfo()()` in pg_hba_file_rules view (Tom Lane)\nOn FreeBSD 11, and possibly other platforms, the view's address and netmask columns were always null due to this error.",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use-after-free hazard when an event trigger monitors an ALTER TABLE operation",
      "description": "Fix use-after-free hazard when an event trigger monitors an ALTER TABLE operation (Jehan-Guillaume de Rorthais)",
      "sinceVersion": "10.15",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix incorrect error message about inconsistent moving-aggregate data types",
      "description": "Fix incorrect error message about inconsistent moving-aggregate data types (Jeff Janes)",
      "sinceVersion": "10.15",
      "contributor": "Jeff Janes"
    },
    {
      "title": "Avoid lockup when a parallel worker reports a very long error message",
      "description": "Avoid lockup when a parallel worker reports a very long error message (Vignesh C)",
      "sinceVersion": "10.15",
      "contributor": "Vignesh C"
    },
    {
      "title": "Avoid unnecessary failure when transferring very large payloads through shared memory queues",
      "description": "Avoid unnecessary failure when transferring very large payloads through shared memory queues (Markus Wanner)",
      "sinceVersion": "10.15",
      "contributor": "Markus Wanner"
    },
    {
      "title": "Fix relation cache memory leaks with RLS policies",
      "description": "Fix relation cache memory leaks with RLS policies (Tom Lane)",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart",
      "description": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart (Tom Lane)",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ecpg library's per-thread initialization logic for Windows",
      "description": "Fix ecpg library's per-thread initialization logic for Windows (Tom Lane, Alexander Lakhin)\nMulti-threaded ecpg applications could suffer rare misbehavior due to incorrect locking.",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane, Alexander Lakhin"
    },
    {
      "title": "On Windows, make psql read the output of a backtick command in text mode, not binary mode",
      "description": "On Windows, make psql read the output of a backtick command in text mode, not binary mode (Tom Lane)\nThis ensures proper handling of newlines.",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that pg_dump collects per-column information about extension configuration tables",
      "description": "Ensure that pg_dump collects per-column information about extension configuration tables (Fabrízio de Royes Mello, Tom Lane)\nFailure to do this led to crashes when specifying --inserts, or underspecified (though usually correct) COPY commands when using COPY to reload the tables' data.",
      "sinceVersion": "10.15",
      "contributor": "Fabrízio de Royes Mello, Tom Lane"
    },
    {
      "title": "Make pg_upgrade check for pre-existence of tablespace directories in the target cluster",
      "description": "Make pg_upgrade check for pre-existence of tablespace directories in the target cluster (Bruce Momjian)",
      "sinceVersion": "10.15",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Fix potential memory leak in contrib/pgcrypto",
      "description": "Fix potential memory leak in contrib/pgcrypto (Michael Paquier)",
      "sinceVersion": "10.15",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add check for an unlikely failure case in contrib/pgcrypto",
      "description": "Add check for an unlikely failure case in contrib/pgcrypto (Daniel Gustafsson)",
      "sinceVersion": "10.15",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station",
      "description": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station (Antarctica); plus historical corrections for France, Hungary, Monaco, and Palestine.",
      "sinceVersion": "10.15",
      "contributor": null
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2020d",
      "description": "Sync our copy of the timezone library with IANA tzcode release 2020d (Tom Lane)\nThis absorbs upstream's change of zic's default output option from “fat” to “slim”. That's just cosmetic for our purposes, as we continue to select the “fat” mode in pre-v13 branches. This change also ensures that `strftime()()` does not change errno unless it fails.",
      "sinceVersion": "10.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix recently-introduced race conditions in LISTEN/NOTIFY queue handling",
      "description": "Fix recently-introduced race conditions in LISTEN/NOTIFY queue handling (Tom Lane)\nA newly-listening backend could attempt to read SLRU pages that were in process of being truncated, possibly causing an error.\nThe queue tail pointer could become set to a value that's not equal to the queue position of any backend, resulting in effective disabling of the queue truncation logic. Continued use of NOTIFY then led to queue-fill warnings, and eventually to inability to send any more notifies until the server is restarted.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix CREATE INDEX CONCURRENTLY to wait for concurrent prepared transactions",
      "description": "Fix CREATE INDEX CONCURRENTLY to wait for concurrent prepared transactions (Andrey Borodin)\nAt the point where CREATE INDEX CONCURRENTLY waits for all concurrent transactions to complete so that it can see rows they inserted, it must also wait for all prepared transactions to complete, for the same reason. Its failure to do so meant that rows inserted by prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. In installations that have enabled prepared transactions (max_prepared_transactions &gt; 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "sinceVersion": "10.16",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node",
      "description": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node (Tom Lane)\nThis case is unsupported (in general, a cursor using `ORDER BY` is not guaranteed to be simply updatable); but the code previously did not reject it, and could silently give false matches.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node",
      "description": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node (David Geier)",
      "sinceVersion": "10.16",
      "contributor": "David Geier"
    },
    {
      "title": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level",
      "description": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level (Tom Lane)\nThis oversight could lead to “failed to build any `N`-way joins” planner errors.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Be more careful about whether index AMs support mark/restore",
      "description": "Be more careful about whether index AMs support mark/restore (Andrew Gierth)\nThis prevents errors about missing support functions in rare edge cases.",
      "sinceVersion": "10.16",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Adjust settings to make it more difficult to run out of DSM slots during heavy usage of parallel queries",
      "description": "Adjust settings to make it more difficult to run out of DSM slots during heavy usage of parallel queries (Thomas Munro)",
      "sinceVersion": "10.16",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix ALTER DEFAULT PRIVILEGES to handle duplicated arguments safely",
      "description": "Fix ALTER DEFAULT PRIVILEGES to handle duplicated arguments safely (Michael Paquier)\nDuplicate role or schema names within the same command could lead to “tuple already updated by self” errors or unique-constraint violations.",
      "sinceVersion": "10.16",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Flush ACL-related caches when pg_authid changes",
      "description": "Flush ACL-related caches when pg_authid changes (Noah Misch)\nThis change ensures that permissions-related decisions will promptly reflect the results of ALTER ROLE ... [NO] INHERIT.",
      "sinceVersion": "10.16",
      "contributor": "Noah Misch"
    },
    {
      "title": "Prevent misprocessing of ambiguous CREATE TABLE LIKE clauses",
      "description": "Prevent misprocessing of ambiguous CREATE TABLE LIKE clauses (Tom Lane)\nA `LIKE` clause is re-examined after initial creation of the new table, to handle importation of indexes and such. It was possible for this re-examination to find a different table of the same name, causing unexpected behavior; one example is where the new table is a temporary table of the same name as the `LIKE` target.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rearrange order of operations in CREATE TABLE LIKE so that indexes are cloned before building foreign key constraints",
      "description": "Rearrange order of operations in CREATE TABLE LIKE so that indexes are cloned before building foreign key constraints (Tom Lane)\nThis fixes the case where a self-referential foreign key constraint declared in the outer CREATE TABLE depends on an index that's coming from the `LIKE` clause.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow CREATE STATISTICS on system catalogs",
      "description": "Disallow CREATE STATISTICS on system catalogs (Tomas Vondra)",
      "sinceVersion": "10.16",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Disallow converting an inheritance child table to a view",
      "description": "Disallow converting an inheritance child table to a view (Tom Lane)",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that disk space allocated for a dropped relation is released promptly at commit",
      "description": "Ensure that disk space allocated for a dropped relation is released promptly at commit (Thomas Munro)\nPreviously, if the dropped relation spanned multiple 1GB segments, only the first segment was truncated immediately. Other segments were simply unlinked, which doesn't authorize the kernel to release the storage so long as any other backends still have the files open.",
      "sinceVersion": "10.16",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix handling of backslash-escaped multibyte characters in COPY FROM",
      "description": "Fix handling of backslash-escaped multibyte characters in COPY FROM (Heikki Linnakangas)\nA backslash followed by a multibyte character was not handled correctly. In some client character encodings, this could lead to misinterpreting part of a multibyte character as a field separator or end-of-copy-data marker.",
      "sinceVersion": "10.16",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid preallocating executor hash tables in EXPLAIN without `ANALYZE`",
      "description": "Avoid preallocating executor hash tables in EXPLAIN without `ANALYZE` (Alexey Bashtanov)",
      "sinceVersion": "10.16",
      "contributor": "Alexey Bashtanov"
    },
    {
      "title": "Allow the jsonb concatenation operator to handle all combinations of JSON data types",
      "description": "Allow the jsonb concatenation operator to handle all combinations of JSON data types (Tom Lane)\nWe can concatenate two JSON objects or two JSON arrays. Handle other cases by wrapping non-array inputs in one-element arrays, then performing an array concatenation. Previously, some combinations of inputs followed this rule but others arbitrarily threw an error.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression",
      "description": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression (Tom Lane)\nThis error could cause the quantifier to act non-greedy, that is behave like a `*?` quantifier would do in full regular expressions.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix numeric `power",
      "description": "Fix numeric `power()()` for the case where the exponent is exactly `INT_MIN` (-2147483648) (Dean Rasheed)\nPreviously, a result with no significant digits was produced.",
      "sinceVersion": "10.16",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log",
      "description": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log (Noah Misch)\nThe wraparound point typically falls in the middle of a page, which must be rounded off to a page boundary, and that was not done correctly. No issue could arise unless an installation had gotten to within one page of SLRU overflow, which is unlikely in a properly-functioning system. If this did happen, it would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "sinceVersion": "10.16",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix memory leak in walsender processes while sending new snapshots for logical decoding",
      "description": "Fix memory leak in walsender processes while sending new snapshots for logical decoding (Amit Kapila)",
      "sinceVersion": "10.16",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Fix walsender to accept additional commands after terminating replication",
      "description": "Fix walsender to accept additional commands after terminating replication (Jeff Davis)",
      "sinceVersion": "10.16",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Ensure detection of deadlocks between hot standby backends and the startup",
      "description": "Ensure detection of deadlocks between hot standby backends and the startup (WAL-application) process (Fujii Masao)\nThe startup process did not run the deadlock detection code, so that in situations where the startup process is last to join a circular wait situation, the deadlock might never be recognized.",
      "sinceVersion": "10.16",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence",
      "description": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence (Tom Lane)\nPreviously, there was a race condition whereby a child process that had requested a background worker just before shutdown could wait indefinitely, preventing shutdown from completing.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix portability problem in parsing of recovery_target_xid values",
      "description": "Fix portability problem in parsing of recovery_target_xid values (Michael Paquier)\nThe target XID is potentially 64 bits wide, but it was parsed with `strtoul()()`, causing misbehavior on platforms where long is 32 bits (such as Windows).",
      "sinceVersion": "10.16",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid assertion failure in `pg_get_functiondef",
      "description": "Avoid assertion failure in `pg_get_functiondef()()` when examining a function with a `TRANSFORM` option (Tom Lane)",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql, re-allow including a password in a `connection_string` argument of a \\connect command",
      "description": "In psql, re-allow including a password in a `connection_string` argument of a \\connect command (Tom Lane)\nThis used to work, but a recent bug fix caused the password to be ignored (resulting in prompting for a password).",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix assorted bugs in psql's \\help command",
      "description": "Fix assorted bugs in psql's \\help command (Kyotaro Horiguchi, Tom Lane)\n\\help with two argument words failed to find a command description using only the first word, for example `\\help reset all` should show the help for RESET but did not. Also, \\help often failed to invoke the pager when it should. It also leaked memory.",
      "sinceVersion": "10.16",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "In pg_dump, ensure that the restore script runs ALTER PUBLICATION ADD TABLE commands as the owner of the publication",
      "description": "In pg_dump, ensure that the restore script runs ALTER PUBLICATION ADD TABLE commands as the owner of the publication (Tom Lane)\nPreviously, these commands would be run by the role that started the restore script; which will usually work, but in corner cases that role might not have adequate permissions.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump to handle `WITH GRANT OPTION` in an extension's initial privileges",
      "description": "Fix pg_dump to handle `WITH GRANT OPTION` in an extension's initial privileges (Noah Misch)\nIf an extension's script creates an object and grants privileges on it with grant option, then later the user revokes such privileges, pg_dump would generate incorrect SQL for reproducing the situation. (Few if any extensions do this today.)",
      "sinceVersion": "10.16",
      "contributor": "Noah Misch"
    },
    {
      "title": "In pg_rewind, ensure that all WAL is accounted for when rewinding a standby server",
      "description": "In pg_rewind, ensure that all WAL is accounted for when rewinding a standby server (Ian Barwick, Heikki Linnakangas)",
      "sinceVersion": "10.16",
      "contributor": "Ian Barwick, Heikki Linnakangas"
    },
    {
      "title": "Report the correct database name in connection failure error messages from some client programs",
      "description": "Report the correct database name in connection failure error messages from some client programs (Álvaro Herrera)\nIf the database name was defaulted rather than given on the command line, pg_dumpall, pgbench, oid2name, and vacuumlo would produce misleading error messages after a connection failure.",
      "sinceVersion": "10.16",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix memory leak in contrib/auto_explain",
      "description": "Fix memory leak in contrib/auto_explain (Japin Li)\nMemory consumed while producing the `EXPLAIN` output was not freed until the end of the current transaction (for a top-level statement) or the end of the surrounding statement (for a nested statement). This was particularly a problem with log_nested_statements enabled.",
      "sinceVersion": "10.16",
      "contributor": "Japin Li"
    },
    {
      "title": "In contrib/postgres_fdw, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped",
      "description": "In contrib/postgres_fdw, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped (Bharath Rupireddy)\nOpen connections that depend on a dropped user mapping or foreign server can no longer be referenced, but formerly they were kept around anyway for the duration of the local session.",
      "sinceVersion": "10.16",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "In contrib/pgcrypto, check for error returns from OpenSSL's EVP functions",
      "description": "In contrib/pgcrypto, check for error returns from OpenSSL's EVP functions (Michael Paquier)\nWe do not really expect errors here, but this change silences warnings from static analysis tools.",
      "sinceVersion": "10.16",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In contrib/pg_trgm's GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items",
      "description": "In contrib/pg_trgm's GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items (Andrew Gierth, Alexander Korotkov)",
      "sinceVersion": "10.16",
      "contributor": "Andrew Gierth, Alexander Korotkov"
    },
    {
      "title": "Fix miscalculation of timeouts in contrib/pg_prewarm and contrib/postgres_fdw",
      "description": "Fix miscalculation of timeouts in contrib/pg_prewarm and contrib/postgres_fdw (Alexey Kondratov, Tom Lane)\nThe main loop in contrib/pg_prewarm's autoprewarm parent process underestimated its desired sleep time by a factor of 1000, causing it to consume much more CPU than intended. When waiting for a result from a remote server, contrib/postgres_fdw overestimated the desired timeout by a factor of 1000 (though this error had been mitigated by imposing a clamp to 60 seconds).\nBoth of these errors stemmed from incorrectly converting seconds-and-microseconds to milliseconds. Introduce a new API `TimestampDifferenceMilliseconds()()` to make it easier to get this right in the future.",
      "sinceVersion": "10.16",
      "contributor": "Alexey Kondratov, Tom Lane"
    },
    {
      "title": "Improve configure's heuristics for selecting PG_SYSROOT on macOS",
      "description": "Improve configure's heuristics for selecting PG_SYSROOT on macOS (Tom Lane)\nThe new method is more likely to produce desirable results when Xcode is newer than the underlying operating system. Choosing a sysroot that does not match the OS version may result in nonfunctional executables.",
      "sinceVersion": "10.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "While building on macOS, specify -isysroot in link steps as well as compile steps",
      "description": "While building on macOS, specify -isysroot in link steps as well as compile steps (James Hilliard)\nThis likewise improves the results when Xcode is out of sync with the operating system.",
      "sinceVersion": "10.16",
      "contributor": "James Hilliard"
    },
    {
      "title": "Update time zone data files to tzdata release 2021a for DST law changes in Russia",
      "description": "Update time zone data files to tzdata release 2021a for DST law changes in Russia (Volgograd zone) and South Sudan, plus historical corrections for Australia, Bahamas, Belize, Bermuda, Ghana, Israel, Kenya, Nigeria, Palestine, Seychelles, and Vanuatu.\nNotably, the Australia/Currie zone has been corrected to the point where it is identical to Australia/Hobart.",
      "sinceVersion": "10.16",
      "contributor": null
    },
    {
      "title": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists",
      "description": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists (Tom Lane)\nIf the `UPDATE` list contains any multi-column sub-selects (which give rise to junk columns in addition to the results proper), the `UPDATE` path would end up storing tuples that include the values of the extra junk columns. That's fairly harmless in the short run, but if new columns are added to the table then the values would become accessible, possibly leading to malfunctions if they don't match the datatypes of the added columns.\nIn addition, in versions supporting cross-partition updates, a cross-partition update triggered by such a case had the reverse problem: the junk columns were removed from the target list, typically causing an immediate crash due to malfunction of the multi-column sub-select mechanism. (CVE-2021-32028)",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent integer overflows in array subscripting calculations",
      "description": "Prevent integer overflows in array subscripting calculations (Tom Lane)\nThe array code previously did not complain about cases where an array's lower bound plus length overflows an integer. This resulted in later entries in the array becoming inaccessible (since their subscripts could not be written as integers), but more importantly it confused subsequent assignment operations. This could lead to memory overwrites, with ensuing crashes or unwanted data modifications. (CVE-2021-32027)",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Forbid marking an identity column as nullable",
      "description": "Forbid marking an identity column as nullable (Vik Fearing)\n`GENERATED ... AS IDENTITY` implies `NOT NULL`, so don't allow it to be combined with an explicit `NULL` specification.",
      "sinceVersion": "10.17",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Allow `ALTER ROLE/DATABASE ... SET` to set the role, session_authorization, and temp_buffers parameters",
      "description": "Allow `ALTER ROLE/DATABASE ... SET` to set the role, session_authorization, and temp_buffers parameters (Tom Lane)\nPreviously, over-eager validity checks might reject these commands, even if the values would have worked when used later. This created a command ordering hazard for dump/reload and upgrade scenarios.",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type",
      "description": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type (Tom Lane)\nThis led to a parse tree in which the `COLLATE` appears to be applied to a non-collatable value. While that normally has no real impact (since `COLLATE` has no effect at runtime), it was possible to construct views that would be rejected during dump/reload.",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow calling window functions and procedures via the “fast path” wire protocol message",
      "description": "Disallow calling window functions and procedures via the “fast path” wire protocol message (Tom Lane)\nOnly plain functions are supported here. While trying to call an aggregate function failed already, calling a window function would crash, and calling a procedure would work only if the procedure did no transaction control.",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Extend `pg_identify_object_as_address",
      "description": "Extend `pg_identify_object_as_address()()` to support event triggers (Joel Jacobson)",
      "sinceVersion": "10.17",
      "contributor": "Joel Jacobson"
    },
    {
      "title": "Fix `to_char",
      "description": "Fix `to_char()()`'s handling of Roman-numeral month format codes with negative intervals (Julien Rouhaud)\nPreviously, such cases would usually cause a crash.",
      "sinceVersion": "10.17",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Check that the argument of `pg_import_system_collations",
      "description": "Check that the argument of `pg_import_system_collations()()` is a valid schema OID (Tom Lane)",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use of uninitialized value while parsing an `\\{`m`,n`\\} quantifier in a BRE-mode regular expression",
      "description": "Fix use of uninitialized value while parsing an `\\{`m`,n`\\} quantifier in a BRE-mode regular expression (Tom Lane)\nThis error could cause the quantifier to act non-greedy, that is behave like an `{`m`,n`}? quantifier would do in full regular expressions.",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't ignore system columns when estimating the number of groups using extended statistics",
      "description": "Don't ignore system columns when estimating the number of groups using extended statistics (Tomas Vondra)\nThis led to strange estimates for queries such as `SELECT ... GROUP BY a, b, ctid`.",
      "sinceVersion": "10.17",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix",
      "description": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix (Tom Lane)\nThis typically led to a `NaN` selectivity value, causing assertion failures or strange planner behavior.",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans",
      "description": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans (Tomas Vondra)\nIf the page range size used by a BRIN index isn't a power of two, there were corner cases in which a bitmap scan could try to fetch pages past the actual end of the table, leading to “could not open file” errors.",
      "sinceVersion": "10.17",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL",
      "description": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL (Soumyadeep Chakraborty, Jimmy Yih, Kevin Yeap)\nThis error could lead to subsequent WAL records being written under the wrong timeline ID, leading to consistency problems, or even complete failure to be able to restart the server, later on.",
      "sinceVersion": "10.17",
      "contributor": "Soumyadeep Chakraborty, Jimmy Yih, Kevin Yeap"
    },
    {
      "title": "Ensure that locks are released while shutting down a standby server's startup process",
      "description": "Ensure that locks are released while shutting down a standby server's startup process (Fujii Masao)\nWhen a standby server is shut down while still in recovery, some locks might be left held. This causes assertion failures in debug builds; it's unclear whether any serious consequence could occur in production builds.",
      "sinceVersion": "10.17",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix crash when a logical replication worker does ALTER SUBSCRIPTION REFRESH",
      "description": "Fix crash when a logical replication worker does ALTER SUBSCRIPTION REFRESH (Peter Smith)\nThe core code won't do this, but a replica trigger could.",
      "sinceVersion": "10.17",
      "contributor": "Peter Smith"
    },
    {
      "title": "Ensure we default to wal_sync_method = `fdatasync` on recent FreeBSD",
      "description": "Ensure we default to wal_sync_method = `fdatasync` on recent FreeBSD (Thomas Munro)\nFreeBSD 13 supports `open_datasync`, which would normally become the default choice. However, it's unclear whether that is actually an improvement for Postgres, so preserve the existing default for now.",
      "sinceVersion": "10.17",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Ensure we finish cleaning up when interrupted while detaching a DSM segment",
      "description": "Ensure we finish cleaning up when interrupted while detaching a DSM segment (Thomas Munro)\nThis error could result in temporary files not being cleaned up promptly after a parallel query.",
      "sinceVersion": "10.17",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix memory leak while initializing server's SSL parameters",
      "description": "Fix memory leak while initializing server's SSL parameters (Michael Paquier)\nThis is ordinarily insignificant, but if the postmaster is repeatedly sent SIGHUP signals, the leak can build up over time.",
      "sinceVersion": "10.17",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix assorted minor memory leaks in the server",
      "description": "Fix assorted minor memory leaks in the server (Tom Lane, Andres Freund)",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane, Andres Freund"
    },
    {
      "title": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received",
      "description": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received (Tom Lane)",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "When initdb prints instructions about how to start the server, make the path shown for pg_ctl use backslash separators on Windows",
      "description": "When initdb prints instructions about how to start the server, make the path shown for pg_ctl use backslash separators on Windows (Nitin Jadhav)",
      "sinceVersion": "10.17",
      "contributor": "Nitin Jadhav"
    },
    {
      "title": "Fix psql to restore the previous behavior of `\\connect service=`something``",
      "description": "Fix psql to restore the previous behavior of `\\connect service=`something`` (Tom Lane)\nA previous bug fix caused environment variables (such as PGPORT) to override entries in the service file in this context. Restore the previous behavior, in which the priority is the other way around.",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition in detection of file modification by psql's `\\e` and related commands",
      "description": "Fix race condition in detection of file modification by psql's `\\e` and related commands (Laurenz Albe)\nA very fast typist could fool the code's file-timestamp-based detection of whether the temporary edit file was changed.",
      "sinceVersion": "10.17",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Fix missed file version check in pg_restore",
      "description": "Fix missed file version check in pg_restore (Tom Lane)\nWhen reading a custom-format archive from a non-seekable source, pg_restore neglected to check the archive version. If it was fed a newer archive version than it can support, it would fail messily later on.",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add some more checks to pg_upgrade for user tables containing non-upgradable data types",
      "description": "Add some more checks to pg_upgrade for user tables containing non-upgradable data types (Tom Lane)\nFix detection of some cases where a non-upgradable data type is embedded within a container type (such as an array or range). Also disallow upgrading when user tables contain columns of system-defined composite types, since those types' OIDs are not stable across versions.",
      "sinceVersion": "10.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_waldump to count `XACT` records correctly when generating per-record statistics",
      "description": "Fix pg_waldump to count `XACT` records correctly when generating per-record statistics (Kyotaro Horiguchi)",
      "sinceVersion": "10.17",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix contrib/amcheck to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set",
      "description": "Fix contrib/amcheck to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set (Julien Rouhaud)\nThis is a valid state after `SELECT FOR UPDATE`.",
      "sinceVersion": "10.17",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions",
      "description": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions (Noah Misch)",
      "sinceVersion": "10.17",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix testing of PL/Python for Python 3 on Solaris",
      "description": "Fix testing of PL/Python for Python 3 on Solaris (Noah Misch)",
      "sinceVersion": "10.17",
      "contributor": "Noah Misch"
    },
    {
      "title": "Disallow SSL renegotiation more completely",
      "description": "Disallow SSL renegotiation more completely (Michael Paquier)\nSSL renegotiation has been disabled for some time, but the server would still cooperate with a client-initiated renegotiation request. A maliciously crafted renegotiation request could result in a server crash (see OpenSSL issue CVE-2021-3449). Disable the feature altogether on OpenSSL versions that permit doing so, which are 1.1.0h and newer.",
      "sinceVersion": "10.18",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Reject `SELECT ... GROUP BY GROUPING SETS",
      "description": "Reject `SELECT ... GROUP BY GROUPING SETS (()) FOR UPDATE` (Tom Lane)\nThis should be disallowed, just as `FOR UPDATE` with a plain `GROUP BY` is disallowed, but the test for that failed to handle empty grouping sets correctly. The end result would be a null-pointer dereference in the executor.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject cases where a query in `WITH` rewrites to just NOTIFY",
      "description": "Reject cases where a query in `WITH` rewrites to just NOTIFY (Tom Lane)\nSuch cases previously crashed.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "In numeric multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point",
      "description": "In numeric multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point (Dean Rasheed)",
      "sinceVersion": "10.18",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix corner-case errors and loss of precision when raising numeric values to very large powers",
      "description": "Fix corner-case errors and loss of precision when raising numeric values to very large powers (Dean Rasheed)",
      "sinceVersion": "10.18",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix division-by-zero failure in `to_char",
      "description": "Fix division-by-zero failure in `to_char()()` with `EEEE` format and a numeric input value less than 10^(-1001) (Dean Rasheed)",
      "sinceVersion": "10.18",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix `pg_size_pretty",
      "description": "Fix `pg_size_pretty(bigint)()` to round negative values consistently with the way it rounds positive ones (and consistently with the numeric version) (Dean Rasheed, David Rowley)",
      "sinceVersion": "10.18",
      "contributor": "Dean Rasheed, David Rowley"
    },
    {
      "title": "Make `pg_filenode_relation",
      "description": "Make `pg_filenode_relation(0, 0)` return NULL rather than failing (Justin Pryzby)",
      "sinceVersion": "10.18",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Make ALTER EXTENSION lock the extension when adding or removing a member object",
      "description": "Make ALTER EXTENSION lock the extension when adding or removing a member object (Tom Lane)\nThe previous coding allowed ALTER EXTENSION ADD/DROP to occur concurrently with DROP EXTENSION, leading to a crash or corrupt catalog entries.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ALTER SUBSCRIPTION to reject an empty slot name",
      "description": "Fix ALTER SUBSCRIPTION to reject an empty slot name (Japin Li)",
      "sinceVersion": "10.18",
      "contributor": "Japin Li"
    },
    {
      "title": "Avoid alias conflicts in queries generated for REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Avoid alias conflicts in queries generated for REFRESH MATERIALIZED VIEW CONCURRENTLY (Tom Lane, Bharath Rupireddy)\nThis command failed on materialized views containing columns with certain names, notably mv and newdata.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane, Bharath Rupireddy"
    },
    {
      "title": "Fix PREPARE TRANSACTION to check correctly for conflicting session-lifespan and transaction-lifespan locks",
      "description": "Fix PREPARE TRANSACTION to check correctly for conflicting session-lifespan and transaction-lifespan locks (Tom Lane)\nA transaction cannot be prepared if it has both session-lifespan and transaction-lifespan locks on the same advisory-lock ID value. This restriction was not fully checked, which could lead to a PANIC during PREPARE TRANSACTION.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior of DROP OWNED BY when the target role is listed more than once in an RLS policy",
      "description": "Fix misbehavior of DROP OWNED BY when the target role is listed more than once in an RLS policy (Tom Lane)",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Skip unnecessary error tests when removing a role from an RLS policy during DROP OWNED BY",
      "description": "Skip unnecessary error tests when removing a role from an RLS policy during DROP OWNED BY (Tom Lane)\nNotably, this fixes some cases where it was necessary to be a superuser to use DROP OWNED BY.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow index state flags to be updated transactionally",
      "description": "Allow index state flags to be updated transactionally (Michael Paquier, Andrey Lepikhov)\nThis avoids failures when dealing with index predicates that aren't really immutable. While that's not considered a supported case, the original reason for using a non-transactional update here is long gone, so we may as well change it.",
      "sinceVersion": "10.18",
      "contributor": "Michael Paquier, Andrey Lepikhov"
    },
    {
      "title": "Avoid corrupting the plan cache entry when CREATE DOMAIN or ALTER DOMAIN appears in a cached plan",
      "description": "Avoid corrupting the plan cache entry when CREATE DOMAIN or ALTER DOMAIN appears in a cached plan (Tom Lane)",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make walsenders show their latest replication commands in pg_stat_activity",
      "description": "Make walsenders show their latest replication commands in pg_stat_activity (Tom Lane)\nPreviously, a walsender would show its latest SQL command, which was confusing if it's now doing some replication operation instead. Now we show replication-protocol commands on the same footing as SQL commands.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make pg_settings.pending_restart show as true when the pertinent entry in postgresql.conf has been removed",
      "description": "Make pg_settings.pending_restart show as true when the pertinent entry in postgresql.conf has been removed (Álvaro Herrera)\npending_restart correctly showed the case where an entry that cannot be changed without a postmaster restart has been modified, but not where the entry had been removed altogether.",
      "sinceVersion": "10.18",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix corner-case failure of a new standby to follow a new primary",
      "description": "Fix corner-case failure of a new standby to follow a new primary (Dilip Kumar, Robert Haas)\nUnder a narrow combination of conditions, the standby could wind up trying to follow the wrong WAL timeline.",
      "sinceVersion": "10.18",
      "contributor": "Dilip Kumar, Robert Haas"
    },
    {
      "title": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation",
      "description": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation (Fujii Masao)\nFile truncation is irreversible, so it's no longer safe to stop recovery at a point earlier than that record. The corresponding case for transaction commit was fixed years ago, but this one was overlooked.",
      "sinceVersion": "10.18",
      "contributor": "Fujii Masao"
    },
    {
      "title": "In walreceivers, avoid attempting catalog lookups after an error",
      "description": "In walreceivers, avoid attempting catalog lookups after an error (Masahiko Sawada, Bharath Rupireddy)",
      "sinceVersion": "10.18",
      "contributor": "Masahiko Sawada, Bharath Rupireddy"
    },
    {
      "title": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive",
      "description": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive (Fujii Masao, Soumyadeep Chakraborty)",
      "sinceVersion": "10.18",
      "contributor": "Fujii Masao, Soumyadeep Chakraborty"
    },
    {
      "title": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process",
      "description": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process (Heikki Linnakangas)",
      "sinceVersion": "10.18",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Improve checks for violations of replication protocol",
      "description": "Improve checks for violations of replication protocol (Tom Lane)\nLogical replication workers frequently used Asserts to check for cases that could be triggered by invalid or out-of-order replication commands. This seems unwise, so promote these tests to regular error checks.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error cases and memory leaks in logical decoding of speculative insertions",
      "description": "Fix error cases and memory leaks in logical decoding of speculative insertions (Dilip Kumar)",
      "sinceVersion": "10.18",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Fix plan cache reference leaks in some error cases in CREATE TABLE ... AS EXECUTE",
      "description": "Fix plan cache reference leaks in some error cases in CREATE TABLE ... AS EXECUTE (Tom Lane)",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible race condition when releasing BackgroundWorkerSlots",
      "description": "Fix possible race condition when releasing BackgroundWorkerSlots (Tom Lane)\nIt's likely that this doesn't fix any observable bug on Intel hardware, but machines with weaker memory ordering rules could have problems.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix latent crash in sorting code",
      "description": "Fix latent crash in sorting code (Ronan Dunklau)\nOne code path could attempt to free a null pointer. The case appears unreachable in the core server's use of sorting, but perhaps it could be triggered by extensions.",
      "sinceVersion": "10.18",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Prevent infinite loops in SP-GiST index insertion",
      "description": "Prevent infinite loops in SP-GiST index insertion (Tom Lane)\nIn the event that INCLUDE columns take up enough space to prevent a leaf index tuple from ever fitting on a page, the text_ops operator class would get into an infinite loop vainly trying to make the tuple fit. While pre-v11 versions don't have INCLUDE columns, back-patch this anti-looping fix to them anyway, as it seems like a good defense against bugs in operator classes.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that SP-GiST index insertion can be terminated by a query cancel request",
      "description": "Ensure that SP-GiST index insertion can be terminated by a query cancel request (Tom Lane, Álvaro Herrera)",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't",
      "description": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't (Tom Lane)",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't abort the process for an out-of-memory failure in libpq's printing functions",
      "description": "Don't abort the process for an out-of-memory failure in libpq's printing functions (Tom Lane)",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpg, allow the numeric value INT_MIN",
      "description": "In ecpg, allow the numeric value INT_MIN (usually -2147483648) to be converted to integer (John Naylor)",
      "sinceVersion": "10.18",
      "contributor": "John Naylor"
    },
    {
      "title": "Avoid “invalid creation date in header” warnings observed when running pg_restore on an archive file created in a different time zone",
      "description": "Avoid “invalid creation date in header” warnings observed when running pg_restore on an archive file created in a different time zone (Tom Lane)",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Extend pg_upgrade to detect and warn about extensions that should be upgraded",
      "description": "Extend pg_upgrade to detect and warn about extensions that should be upgraded (Bruce Momjian)\nA script file is now produced containing the ALTER EXTENSION UPDATE commands needed to bring extensions up to the versions that are considered default in the new installation.",
      "sinceVersion": "10.18",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Avoid problems when switching pg_receivewal between compressed and non-compressed WAL storage",
      "description": "Avoid problems when switching pg_receivewal between compressed and non-compressed WAL storage (Michael Paquier)",
      "sinceVersion": "10.18",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In contrib/postgres_fdw, avoid attempting catalog lookups after an error",
      "description": "In contrib/postgres_fdw, avoid attempting catalog lookups after an error (Tom Lane)\nWhile this usually worked, it's not very safe since the error might have been one that made catalog access nonfunctional. A side effect of the fix is that messages about data conversion errors will now mention the query's table and column aliases (if used) rather than the true underlying name of a foreign table or column.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve the isolation-test infrastructure",
      "description": "Improve the isolation-test infrastructure (Tom Lane, Michael Paquier)\nAllow isolation test steps to be annotated to show the expected completion order. This allows getting stable results from otherwise-racy test cases, without the long delays that we previously used (not entirely successfully) to fend off race conditions. Allow non-quoted identifiers as isolation test session/step names (formerly, all such names had to be double-quoted). Detect and warn about unused steps in isolation tests. Improve display of query results in isolation tests. Remove isolationtester's “dry-run” mode. Remove memory leaks in isolationtester itself.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane, Michael Paquier"
    },
    {
      "title": "Reduce overhead of cache-clobber testing",
      "description": "Reduce overhead of cache-clobber testing (Tom Lane)",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Python's regression tests to pass with Python 3.10",
      "description": "Fix PL/Python's regression tests to pass with Python 3.10 (Honza Horak)",
      "sinceVersion": "10.18",
      "contributor": "Honza Horak"
    },
    {
      "title": "Make `printf",
      "description": "Make `printf(\"%s\", NULL)` print `(null)` instead of crashing (Tom Lane)\nThis should improve server robustness in corner cases, and it syncs our `printf()` implementation with common libraries.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect log message when point-in-time recovery stops at a ROLLBACK PREPARED record",
      "description": "Fix incorrect log message when point-in-time recovery stops at a ROLLBACK PREPARED record (Simon Riggs)",
      "sinceVersion": "10.18",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Clarify error messages referring to “non-negative” values",
      "description": "Clarify error messages referring to “non-negative” values (Bharath Rupireddy)",
      "sinceVersion": "10.18",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate libldap_r library",
      "description": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate libldap_r library (Adrian Ho, Tom Lane)\nIf there is no libldap_r library, we now silently assume that libldap is thread-safe.",
      "sinceVersion": "10.18",
      "contributor": "Adrian Ho, Tom Lane"
    },
    {
      "title": "Add new make targets `world-bin` and `install-world-bin`",
      "description": "Add new make targets `world-bin` and `install-world-bin` (Andrew Dunstan)\nThese are the same as `world` and `install-world` respectively, except that they do not build or install the documentation.",
      "sinceVersion": "10.18",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix make rule for TAP tests",
      "description": "Fix make rule for TAP tests (`prove_installcheck`) to work in PGXS usage (Andrew Dunstan)",
      "sinceVersion": "10.18",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Allow PostgreSQL version 10 to build with ICU 69 and newer",
      "description": "Allow PostgreSQL version 10 to build with ICU 69 and newer (Peter Eisentraut)",
      "sinceVersion": "10.18",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated",
      "description": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated (Tom Lane)\nThe GSSAPI spec provides for a string pointer and length. It seems that in practice the next byte after the string is usually zero, so that our previous coding didn't actually fail; but we do have a report of AddressSanitizer complaints.",
      "sinceVersion": "10.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Enable building with GSSAPI on MSVC",
      "description": "Enable building with GSSAPI on MSVC (Michael Paquier)\nFix various incompatibilities with modern Kerberos builds.",
      "sinceVersion": "10.18",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In MSVC builds, include --with-pgport in the set of configure options reported by pg_config, if it had been specified",
      "description": "In MSVC builds, include --with-pgport in the set of configure options reported by pg_config, if it had been specified (Andrew Dunstan)",
      "sinceVersion": "10.18",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "Use the CLDR project's data to map Windows time zone names to IANA time zones (Tom Lane)\nWhen running on Windows, initdb attempts to set the new cluster's timezone parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make the server reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\nA man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make libpq reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\nA man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record (Álvaro Herrera)\nIf the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\nWhen applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "sinceVersion": "10.19",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions",
      "description": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions (Andrey Borodin)\nRows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for PREPARE TRANSACTION commands that were still in progress when CREATE INDEX CONCURRENTLY checked for them. As before, in installations that have enabled prepared transactions (max_prepared_transactions &gt; 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "sinceVersion": "10.19",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently (Noah Misch, Andrey Borodin)\nWhile it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "sinceVersion": "10.19",
      "contributor": "Noah Misch, Andrey Borodin"
    },
    {
      "title": "Fix float4 and float8 hash functions to produce uniform results for NaNs",
      "description": "Fix float4 and float8 hash functions to produce uniform results for NaNs (Tom Lane)\nSince PostgreSQL's floating-point types deem all NaNs to be equal, it's important for the hash functions to produce the same hash code for all bit-patterns that are NaNs according to the IEEE 754 standard. This failed to happen before, meaning that hash indexes and hash-based query plans might produce incorrect results for non-canonical NaN values. (`'-NaN'::float8` is one way to produce such a value on most machines.) It is advisable to reindex hash indexes on floating-point columns, if there is any possibility that they might contain such values.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table (Amit Langote, Álvaro Herrera)\nThis oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "sinceVersion": "10.19",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication",
      "description": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication (Hou Zhijie, Vignesh C)\nThis oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "sinceVersion": "10.19",
      "contributor": "Hou Zhijie, Vignesh C"
    },
    {
      "title": "Don't discard a cast to the same type with unspecified type modifier",
      "description": "Don't discard a cast to the same type with unspecified type modifier (Tom Lane)\nFor example, if column `f1` is of type `numeric(18,3)`, the parser used to simply discard a cast like `f1::numeric`, on the grounds that it would have no run-time effect. That's true, but the exposed type of the expression should still be considered to be plain `numeric`, not `numeric(18,3)`. This is important for correctly resolving the type of larger constructs, such as recursive `UNION`s.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow creating an ICU collation if the current database's encoding won't support it",
      "description": "Disallow creating an ICU collation if the current database's encoding won't support it (Tom Lane)\nPreviously this was allowed, but then the collation could not be referenced because of the way collation lookup works; you could not use the collation, nor even drop it.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power",
      "description": "Fix corner-case loss of precision in numeric `power()()` (Dean Rasheed)\nThe result could be inaccurate when the first argument is very close to 1.",
      "sinceVersion": "10.19",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid regular expression errors with capturing parentheses inside `{0}`",
      "description": "Avoid regular expression errors with capturing parentheses inside `{0}` (Tom Lane)\nRegular expressions like `(.){0}...\\1` drew “invalid backreference number”. Other regexp engines such as Perl don't complain, though, and for that matter ours doesn't either in some closely related cases. Worse, it could throw an assertion failure instead. Fix it so that no error is thrown and instead the back-reference is silently deemed to never match.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent regular expression back-references from sometimes matching when they shouldn't",
      "description": "Prevent regular expression back-references from sometimes matching when they shouldn't (Tom Lane)\nThe regexp engine was careless about clearing match data for capturing parentheses after rejecting a partial match. This could allow a later back-reference to match in places where it should fail for lack of a defined referent.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect results from `AT TIME ZONE` applied to a time with time zone value",
      "description": "Fix incorrect results from `AT TIME ZONE` applied to a time with time zone value (Tom Lane)\nThe results were incorrect if the target time zone was specified by a dynamic timezone abbreviation (that is, one that is defined as equivalent to a full time zone name, rather than a fixed UTC offset).",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "Avoid using MCV-only statistics to estimate the range of a column (Tom Lane)\nThere are corner cases in which ANALYZE will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "Clean up correctly if a transaction fails after exporting its snapshot (Dilip Kumar)\nThis oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "sinceVersion": "10.19",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "Ensure that prepared transactions are properly accounted for during promotion of a standby server (Michael Paquier, Andres Freund)\nThere was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "sinceVersion": "10.19",
      "contributor": "Michael Paquier, Andres Freund"
    },
    {
      "title": "Fix detection of a relation that has grown to the maximum allowed length",
      "description": "Fix detection of a relation that has grown to the maximum allowed length (Tom Lane)\nAn attempt to extend a table or index past the limit of 2^32-1 blocks was rejected, but not soon enough to prevent inconsistent internal state from being created.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule",
      "description": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule (Greg Nancarrow, Tom Lane)\nThe previous failure to do this could lead to problems such as unsafely choosing a parallel plan.",
      "sinceVersion": "10.19",
      "contributor": "Greg Nancarrow, Tom Lane"
    },
    {
      "title": "Fix incorrect reporting of permissions failures on extended statistics objects",
      "description": "Fix incorrect reporting of permissions failures on extended statistics objects (Tomas Vondra)\nThe code typically produced “cache lookup error” rather than the intended message.",
      "sinceVersion": "10.19",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix incorrect snapshot handling in parallel workers",
      "description": "Fix incorrect snapshot handling in parallel workers (Greg Nancarrow)\nThis oversight could lead to misbehavior in parallel queries if the transaction isolation level is less than `REPEATABLE READ`.",
      "sinceVersion": "10.19",
      "contributor": "Greg Nancarrow"
    },
    {
      "title": "Ensure that walreceiver processes create all required archive notification files before exiting",
      "description": "Ensure that walreceiver processes create all required archive notification files before exiting (Fujii Masao)\nIf a walreceiver exited exactly at a WAL segment boundary, it failed to make a notification file for the last-received segment, thus delaying archiving of that segment on the standby.",
      "sinceVersion": "10.19",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE`",
      "description": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE` (Masahiko Sawada, Tom Lane)",
      "sinceVersion": "10.19",
      "contributor": "Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Fix parser's processing of aggregate `FILTER` clauses",
      "description": "Fix parser's processing of aggregate `FILTER` clauses (Tom Lane)\nIf the `FILTER` expression is a plain boolean column, the semantic level of the aggregate could be mis-determined, leading to not-per-spec behavior. If the `FILTER` expression is itself a boolean-returning aggregate, an error should be thrown but was not, likely resulting in a crash at execution.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently",
      "description": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently (Álvaro Herrera)",
      "sinceVersion": "10.19",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export",
      "description": "Prevent “snapshot reference leak” warning when `lo_export()()` or a related function fails (Heikki Linnakangas)",
      "sinceVersion": "10.19",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Ensure that scans of SP-GiST indexes are counted in the statistics views",
      "description": "Ensure that scans of SP-GiST indexes are counted in the statistics views (Tom Lane)\nIncrementing the number-of-index-scans counter was overlooked in the SP-GiST code, although per-tuple counters were advanced correctly.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Recalculate relevant wait intervals if recovery_min_apply_delay is changed during recovery",
      "description": "Recalculate relevant wait intervals if recovery_min_apply_delay is changed during recovery (Soumyadeep Chakraborty, Ashwin Agrawal)",
      "sinceVersion": "10.19",
      "contributor": "Soumyadeep Chakraborty, Ashwin Agrawal"
    },
    {
      "title": "Fix infinite loop if a simplehash.h hash table reaches 2^32 elements",
      "description": "Fix infinite loop if a simplehash.h hash table reaches 2^32 elements (Yura Sokolov)\nIt seems unlikely that this bug has been hit in practice, as it would require work_mem settings of hundreds of gigabytes for existing uses of simplehash.h.",
      "sinceVersion": "10.19",
      "contributor": "Yura Sokolov"
    },
    {
      "title": "Reduce memory consumption during calculation of extended statistics",
      "description": "Reduce memory consumption during calculation of extended statistics (Justin Pryzby, Tomas Vondra)",
      "sinceVersion": "10.19",
      "contributor": "Justin Pryzby, Tomas Vondra"
    },
    {
      "title": "Fix ecpg to recover correctly after `malloc",
      "description": "Fix ecpg to recover correctly after `malloc()()` failure while establishing a connection (Michael Paquier)",
      "sinceVersion": "10.19",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine",
      "description": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine (Tom Lane)\nIf the routine does not require an explicit `RETURN`, this usage should be valid, but it was rejected.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove pg_ctl's hard-coded limits on the total length of generated commands",
      "description": "Remove pg_ctl's hard-coded limits on the total length of generated commands (Phil Krylov)\nFor example, this removes a restriction on how many command-line options can be passed through to the postmaster. Individual path names that pg_ctl deals with, such as the postmaster executable's name or the data directory name, are still limited to `MAXPGPATH` bytes in most cases.",
      "sinceVersion": "10.19",
      "contributor": "Phil Krylov"
    },
    {
      "title": "Fix pg_dump to dump non-global default privileges correctly",
      "description": "Fix pg_dump to dump non-global default privileges correctly (Neil Chen, Masahiko Sawada)\nIf a global (unrestricted) ALTER DEFAULT PRIVILEGES command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted ALTER DEFAULT PRIVILEGES command granted that privilege again for a selected role or schema, pg_dump failed to dump the restricted privilege grant correctly.",
      "sinceVersion": "10.19",
      "contributor": "Neil Chen, Masahiko Sawada"
    },
    {
      "title": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped (Tom Lane)\nThis oversight was usually pretty harmless, since once pg_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file",
      "description": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file (Daniel Gustafsson)",
      "sinceVersion": "10.19",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on \"char\"",
      "description": "Fix failure of contrib/btree_gin indexes on \"char\" (not char(`n`)) columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Tom Lane)\nSuch an indexscan failed to return all the entries it should.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB",
      "description": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB (Tom Lane)\nSuch large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error",
      "description": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error (Tom Lane)",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Support OpenSSL 3.0.0",
      "description": "Support OpenSSL 3.0.0 (Peter Eisentraut, Daniel Gustafsson, Michael Paquier)",
      "sinceVersion": "10.19",
      "contributor": "Peter Eisentraut, Daniel Gustafsson, Michael Paquier"
    },
    {
      "title": "Set correct type identifier on OpenSSL BIO",
      "description": "Set correct type identifier on OpenSSL BIO (I/O abstraction) objects created by PostgreSQL (Itamar Gafni)\nThis oversight probably only matters for code that is doing tasks like auditing the OpenSSL installation. But it's nominally a violation of the OpenSSL API, so fix it.",
      "sinceVersion": "10.19",
      "contributor": "Itamar Gafni"
    },
    {
      "title": "Make `pg_regexec",
      "description": "Make `pg_regexec()()` robust against an out-of-range `search_start` parameter (Tom Lane)\nReturn `REG_NOMATCH`, instead of possibly crashing, when `search_start` is past the end of the string. This case is probably unreachable within core PostgreSQL, but extensions might be more careless about the parameter value.",
      "sinceVersion": "10.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.\nAlso, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port_of_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "sinceVersion": "10.19",
      "contributor": null
    },
    {
      "title": "Fix processing of partition keys containing multiple expressions",
      "description": "Fix processing of partition keys containing multiple expressions (Álvaro Herrera, David Rowley)\nThis error led to crashes or, with carefully crafted input, disclosure of arbitrary backend memory. (CVE-2018-1052)",
      "sinceVersion": "10.2",
      "contributor": "Álvaro Herrera, David Rowley"
    },
    {
      "title": "Ensure that all temporary files made by pg_upgrade are non-world-readable",
      "description": "Ensure that all temporary files made by pg_upgrade are non-world-readable (Tom Lane, Noah Misch)\npg_upgrade normally restricts its temporary files to be readable and writable only by the calling user. But the temporary file containing `pg_dumpall -g` output would be group- or world-readable, or even writable, if the user's `umask` setting allows. In typical usage on multi-user machines, the `umask` and/or the working directory's permissions would be tight enough to prevent problems; but there may be people using pg_upgrade in scenarios where this oversight would permit disclosure of database passwords to unfriendly eyes. (CVE-2018-1053)",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane, Noah Misch"
    },
    {
      "title": "Fix vacuuming of tuples that were updated while key-share locked",
      "description": "Fix vacuuming of tuples that were updated while key-share locked (Andres Freund, Álvaro Herrera)\nIn some cases VACUUM would fail to remove such tuples even though they are now dead, leading to assorted data corruption scenarios.",
      "sinceVersion": "10.2",
      "contributor": "Andres Freund, Álvaro Herrera"
    },
    {
      "title": "Fix failure to mark a hash index's metapage dirty after adding a new overflow page, potentially leading to index corruption",
      "description": "Fix failure to mark a hash index's metapage dirty after adding a new overflow page, potentially leading to index corruption (Lixian Zou, Amit Kapila)",
      "sinceVersion": "10.2",
      "contributor": "Lixian Zou, Amit Kapila"
    },
    {
      "title": "Ensure that vacuum will always clean up the pending-insertions list of a GIN index",
      "description": "Ensure that vacuum will always clean up the pending-insertions list of a GIN index (Masahiko Sawada)\nThis is necessary to ensure that dead index entries get removed. The old code got it backwards, allowing vacuum to skip the cleanup if some other process were running cleanup concurrently, thus risking invalid entries being left behind in the index.",
      "sinceVersion": "10.2",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix inadequate buffer locking in some LSN fetches",
      "description": "Fix inadequate buffer locking in some LSN fetches (Jacob Champion, Asim Praveen, Ashwin Agrawal)\nThese errors could result in misbehavior under concurrent load. The potential consequences have not been characterized fully.",
      "sinceVersion": "10.2",
      "contributor": "Jacob Champion, Asim Praveen, Ashwin Agrawal"
    },
    {
      "title": "Fix incorrect query results from cases involving flattening of subqueries whose outputs are used in `GROUPING SETS`",
      "description": "Fix incorrect query results from cases involving flattening of subqueries whose outputs are used in `GROUPING SETS` (Heikki Linnakangas)",
      "sinceVersion": "10.2",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix handling of list partitioning constraints for partition keys of boolean or array types",
      "description": "Fix handling of list partitioning constraints for partition keys of boolean or array types (Amit Langote)",
      "sinceVersion": "10.2",
      "contributor": "Amit Langote"
    },
    {
      "title": "Avoid unnecessary failure in a query on an inheritance tree that occurs concurrently with some child table being removed from the tree by ALTER TABLE NO INHERIT",
      "description": "Avoid unnecessary failure in a query on an inheritance tree that occurs concurrently with some child table being removed from the tree by ALTER TABLE NO INHERIT (Tom Lane)",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix spurious deadlock failures when multiple sessions are running CREATE INDEX CONCURRENTLY",
      "description": "Fix spurious deadlock failures when multiple sessions are running CREATE INDEX CONCURRENTLY (Jeff Janes)",
      "sinceVersion": "10.2",
      "contributor": "Jeff Janes"
    },
    {
      "title": "During VACUUM FULL, update the table's size fields in pg_class sooner",
      "description": "During VACUUM FULL, update the table's size fields in pg_class sooner (Amit Kapila)\nThis prevents poor behavior when rebuilding hash indexes on the table, since those use the pg_class statistics to govern the initial hash size.",
      "sinceVersion": "10.2",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Fix `UNION`/`INTERSECT`/`EXCEPT` over zero columns",
      "description": "Fix `UNION`/`INTERSECT`/`EXCEPT` over zero columns (Tom Lane)",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow identity columns on typed tables and partitions",
      "description": "Disallow identity columns on typed tables and partitions (Michael Paquier)\nThese cases will be treated as unsupported features for now.",
      "sinceVersion": "10.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix assorted failures to apply the correct default value when inserting into an identity column",
      "description": "Fix assorted failures to apply the correct default value when inserting into an identity column (Michael Paquier, Peter Eisentraut)\nIn several contexts, notably COPY and ALTER TABLE ADD COLUMN, the expected default value was not applied and instead a null value was inserted.",
      "sinceVersion": "10.2",
      "contributor": "Michael Paquier, Peter Eisentraut"
    },
    {
      "title": "Fix failures when an inheritance tree contains foreign child tables",
      "description": "Fix failures when an inheritance tree contains foreign child tables (Etsuro Fujita)\nA mix of regular and foreign tables in an inheritance tree resulted in creation of incorrect plans for UPDATE and DELETE queries. This led to visible failures in some cases, notably when there are row-level triggers on a foreign child table.",
      "sinceVersion": "10.2",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Repair failure with correlated sub-`SELECT` inside `VALUES` inside a `LATERAL` subquery",
      "description": "Repair failure with correlated sub-`SELECT` inside `VALUES` inside a `LATERAL` subquery (Tom Lane)",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “could not devise a query plan for the given query” planner failure for some cases involving nested `UNION ALL` inside a lateral subquery",
      "description": "Fix “could not devise a query plan for the given query” planner failure for some cases involving nested `UNION ALL` inside a lateral subquery (Tom Lane)",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow functional dependency statistics to be used for boolean columns",
      "description": "Allow functional dependency statistics to be used for boolean columns (Tom Lane)\nPreviously, although extended statistics could be declared and collected on boolean columns, the planner failed to apply them.",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid underestimating the number of groups emitted by subqueries containing set-returning functions in their grouping columns",
      "description": "Avoid underestimating the number of groups emitted by subqueries containing set-returning functions in their grouping columns (Tom Lane)\nCases similar to `SELECT DISTINCT unnest(foo)` got a lower output rowcount estimate in 10.0 than they did in earlier releases, possibly resulting in unfavorable plan choices. Restore the prior estimation behavior.",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use of triggers in logical replication workers",
      "description": "Fix use of triggers in logical replication workers (Petr Jelinek)",
      "sinceVersion": "10.2",
      "contributor": "Petr Jelinek"
    },
    {
      "title": "Fix logical decoding to correctly clean up disk files for crashed transactions",
      "description": "Fix logical decoding to correctly clean up disk files for crashed transactions (Atsushi Torikoshi)\nLogical decoding may spill WAL records to disk for transactions generating many WAL records. Normally these files are cleaned up after the transaction's commit or abort record arrives; but if no such record is ever seen, the removal code misbehaved.",
      "sinceVersion": "10.2",
      "contributor": "Atsushi Torikoshi"
    },
    {
      "title": "Fix walsender timeout failure and failure to respond to interrupts when processing a large transaction",
      "description": "Fix walsender timeout failure and failure to respond to interrupts when processing a large transaction (Petr Jelinek)",
      "sinceVersion": "10.2",
      "contributor": "Petr Jelinek"
    },
    {
      "title": "Fix race condition during replication origin drop that could allow the dropping process to wait indefinitely",
      "description": "Fix race condition during replication origin drop that could allow the dropping process to wait indefinitely (Tom Lane)",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow members of the `pg_read_all_stats` role to see walsender statistics in the pg_stat_replication view",
      "description": "Allow members of the `pg_read_all_stats` role to see walsender statistics in the pg_stat_replication view (Feike Steenbergen)",
      "sinceVersion": "10.2",
      "contributor": "Feike Steenbergen"
    },
    {
      "title": "Show walsenders that are sending base backups as active in the pg_stat_activity view",
      "description": "Show walsenders that are sending base backups as active in the pg_stat_activity view (Magnus Hagander)",
      "sinceVersion": "10.2",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Fix reporting of `scram-sha-256` authentication method in the pg_hba_file_rules view",
      "description": "Fix reporting of `scram-sha-256` authentication method in the pg_hba_file_rules view (Michael Paquier)\nPreviously this was printed as `scram-sha256`, possibly confusing users as to the correct spelling.",
      "sinceVersion": "10.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix `has_sequence_privilege",
      "description": "Fix `has_sequence_privilege()()` to support `WITH GRANT OPTION` tests, as other privilege-testing functions do (Joe Conway)",
      "sinceVersion": "10.2",
      "contributor": "Joe Conway"
    },
    {
      "title": "In databases using UTF8 encoding, ignore any XML declaration that asserts a different encoding",
      "description": "In databases using UTF8 encoding, ignore any XML declaration that asserts a different encoding (Pavel Stehule, Noah Misch)\nWe always store XML strings in the database encoding, so allowing libxml to act on a declaration of another encoding gave wrong results. In encodings other than UTF8, we don't promise to support non-ASCII XML data anyway, so retain the previous behavior for bug compatibility. This change affects only `xpath()()` and related functions; other XML code paths already acted this way.",
      "sinceVersion": "10.2",
      "contributor": "Pavel Stehule, Noah Misch"
    },
    {
      "title": "Allow a client that supports SCRAM channel binding",
      "description": "Allow a client that supports SCRAM channel binding (such as v11 or later libpq) to connect to a v10 server (Michael Paquier)\nv10 does not have this feature, and the connection-time negotiation about whether to use it was done incorrectly.",
      "sinceVersion": "10.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid live-lock in `ConditionVariableBroadcast",
      "description": "Avoid live-lock in `ConditionVariableBroadcast()()` (Tom Lane, Thomas Munro)\nGiven repeatedly-unlucky timing, a process attempting to awaken all waiters for a condition variable could loop indefinitely. Due to the limited usage of condition variables in v10, this affects only parallel index scans and some operations on replication slots.",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane, Thomas Munro"
    },
    {
      "title": "Clean up waits for condition variables correctly during subtransaction abort",
      "description": "Clean up waits for condition variables correctly during subtransaction abort (Robert Haas)",
      "sinceVersion": "10.2",
      "contributor": "Robert Haas"
    },
    {
      "title": "Ensure that child processes that are waiting for a condition variable will exit promptly if the postmaster process dies",
      "description": "Ensure that child processes that are waiting for a condition variable will exit promptly if the postmaster process dies (Tom Lane)",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crashes in parallel queries using more than one Gather node",
      "description": "Fix crashes in parallel queries using more than one Gather node (Thomas Munro)",
      "sinceVersion": "10.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix hang in parallel index scan when processing a deleted or half-dead index page",
      "description": "Fix hang in parallel index scan when processing a deleted or half-dead index page (Amit Kapila)",
      "sinceVersion": "10.2",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Avoid crash if parallel bitmap heap scan is unable to allocate a shared memory segment",
      "description": "Avoid crash if parallel bitmap heap scan is unable to allocate a shared memory segment (Robert Haas)",
      "sinceVersion": "10.2",
      "contributor": "Robert Haas"
    },
    {
      "title": "Cope with failure to start a parallel worker process",
      "description": "Cope with failure to start a parallel worker process (Amit Kapila, Robert Haas)\nParallel query previously tended to hang indefinitely if a worker could not be started, as the result of `fork()` failure or other low-probability problems.",
      "sinceVersion": "10.2",
      "contributor": "Amit Kapila, Robert Haas"
    },
    {
      "title": "Avoid unnecessary failure when no parallel workers can be obtained during parallel query startup",
      "description": "Avoid unnecessary failure when no parallel workers can be obtained during parallel query startup (Robert Haas)",
      "sinceVersion": "10.2",
      "contributor": "Robert Haas"
    },
    {
      "title": "Fix collection of EXPLAIN statistics from parallel workers",
      "description": "Fix collection of EXPLAIN statistics from parallel workers (Amit Kapila, Thomas Munro)",
      "sinceVersion": "10.2",
      "contributor": "Amit Kapila, Thomas Munro"
    },
    {
      "title": "Ensure that query strings passed to parallel workers are correctly null-terminated",
      "description": "Ensure that query strings passed to parallel workers are correctly null-terminated (Thomas Munro)\nThis prevents emitting garbage in postmaster log output from such workers.",
      "sinceVersion": "10.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid unsafe alignment assumptions when working with __int128",
      "description": "Avoid unsafe alignment assumptions when working with __int128 (Tom Lane)\nTypically, compilers assume that __int128 variables are aligned on 16-byte boundaries, but our memory allocation infrastructure isn't prepared to guarantee that, and increasing the setting of MAXALIGN seems infeasible for multiple reasons. Adjust the code to allow use of __int128 only when we can tell the compiler to assume lesser alignment. The only known symptom of this problem so far is crashes in some parallel aggregation queries.",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent stack-overflow crashes when planning extremely deeply nested set operations",
      "description": "Prevent stack-overflow crashes when planning extremely deeply nested set operations (`UNION`/`INTERSECT`/`EXCEPT`) (Tom Lane)",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash during an EvalPlanQual recheck of an indexscan that is the inner child of a merge join",
      "description": "Avoid crash during an EvalPlanQual recheck of an indexscan that is the inner child of a merge join (Tom Lane)\nThis could only happen during an update or SELECT FOR UPDATE of a join, when there is a concurrent update of some selected row.",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in autovacuum when extended statistics are defined for a table but can't be computed",
      "description": "Fix crash in autovacuum when extended statistics are defined for a table but can't be computed (Álvaro Herrera)",
      "sinceVersion": "10.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix null-pointer crashes for some types of LDAP URLs appearing in pg_hba.conf",
      "description": "Fix null-pointer crashes for some types of LDAP URLs appearing in pg_hba.conf (Thomas Munro)",
      "sinceVersion": "10.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Prevent out-of-memory failures due to excessive growth of simple hash tables",
      "description": "Prevent out-of-memory failures due to excessive growth of simple hash tables (Tomas Vondra, Andres Freund)",
      "sinceVersion": "10.2",
      "contributor": "Tomas Vondra, Andres Freund"
    },
    {
      "title": "Fix sample `INSTR",
      "description": "Fix sample `INSTR()()` functions in the PL/pgSQL documentation (Yugo Nagata, Tom Lane)\nThese functions are stated to be Oracle® compatible, but they weren't exactly. In particular, there was a discrepancy in the interpretation of a negative third parameter: Oracle thinks that a negative value indicates the last place where the target substring can begin, whereas our functions took it as the last place where the target can end. Also, Oracle throws an error for a zero or negative fourth parameter, whereas our functions returned zero.\nThe sample code has been adjusted to match Oracle's behavior more precisely. Users who have copied this code into their applications may wish to update their copies.",
      "sinceVersion": "10.2",
      "contributor": "Yugo Nagata, Tom Lane"
    },
    {
      "title": "Rename pg_rewind's `copy_file_range",
      "description": "Rename pg_rewind's `copy_file_range()` function to avoid conflict with new Linux system call of that name (Andres Freund)\nThis change prevents build failures with newer glibc versions.",
      "sinceVersion": "10.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "In ecpg, detect indicator arrays that do not have the correct length and report an error",
      "description": "In ecpg, detect indicator arrays that do not have the correct length and report an error (David Rader)",
      "sinceVersion": "10.2",
      "contributor": "David Rader"
    },
    {
      "title": "Change the behavior of contrib/cube's cube `~&gt;` int operator to make it compatible with KNN search",
      "description": "Change the behavior of contrib/cube's cube `~&gt;` int operator to make it compatible with KNN search (Alexander Korotkov)\nThe meaning of the second argument (the dimension selector) has been changed to make it predictable which value is selected even when dealing with cubes of varying dimensionalities.\nThis is an incompatible change, but since the point of the operator was to be used in KNN searches, it seems rather useless as-is. After installing this update, any expression indexes or materialized views using this operator will need to be reindexed/refreshed.",
      "sinceVersion": "10.2",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Avoid triggering a libc assertion in contrib/hstore, due to use of `memcpy",
      "description": "Avoid triggering a libc assertion in contrib/hstore, due to use of `memcpy()()` with equal source and destination pointers (Tomas Vondra)",
      "sinceVersion": "10.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix incorrect display of tuples' null bitmaps in contrib/pageinspect",
      "description": "Fix incorrect display of tuples' null bitmaps in contrib/pageinspect (Maksim Milyutin)",
      "sinceVersion": "10.2",
      "contributor": "Maksim Milyutin"
    },
    {
      "title": "Fix incorrect output from contrib/pageinspect's `hash_page_items",
      "description": "Fix incorrect output from contrib/pageinspect's `hash_page_items()()` function (Masahiko Sawada)",
      "sinceVersion": "10.2",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "In contrib/postgres_fdw, avoid “outer pathkeys do not match mergeclauses” planner error when constructing a plan involving a remote join",
      "description": "In contrib/postgres_fdw, avoid “outer pathkeys do not match mergeclauses” planner error when constructing a plan involving a remote join (Robert Haas)",
      "sinceVersion": "10.2",
      "contributor": "Robert Haas"
    },
    {
      "title": "In contrib/postgres_fdw, avoid planner failure when there are duplicate `GROUP BY` entries",
      "description": "In contrib/postgres_fdw, avoid planner failure when there are duplicate `GROUP BY` entries (Jeevan Chalke)",
      "sinceVersion": "10.2",
      "contributor": "Jeevan Chalke"
    },
    {
      "title": "Provide modern examples of how to auto-start Postgres on macOS",
      "description": "Provide modern examples of how to auto-start Postgres on macOS (Tom Lane)\nThe scripts in contrib/start-scripts/osx use infrastructure that's been deprecated for over a decade, and which no longer works at all in macOS releases of the last couple of years. Add a new subdirectory contrib/start-scripts/macos containing scripts that use the newer launchd infrastructure.",
      "sinceVersion": "10.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect selection of configuration-specific libraries for OpenSSL on Windows",
      "description": "Fix incorrect selection of configuration-specific libraries for OpenSSL on Windows (Andrew Dunstan)",
      "sinceVersion": "10.2",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Support linking to MinGW-built versions of libperl",
      "description": "Support linking to MinGW-built versions of libperl (Noah Misch)\nThis allows building PL/Perl with some common Perl distributions for Windows.",
      "sinceVersion": "10.2",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix MSVC build to test whether 32-bit libperl needs `-D_USE_32BIT_TIME_T`",
      "description": "Fix MSVC build to test whether 32-bit libperl needs `-D_USE_32BIT_TIME_T` (Noah Misch)\nAvailable Perl distributions are inconsistent about what they expect, and lack any reliable means of reporting it, so resort to a build-time test on what the library being used actually does.",
      "sinceVersion": "10.2",
      "contributor": "Noah Misch"
    },
    {
      "title": "On Windows, install the crash dump handler earlier in postmaster startup",
      "description": "On Windows, install the crash dump handler earlier in postmaster startup (Takayuki Tsunakawa)\nThis may allow collection of a core dump for some early-startup failures that did not produce a dump before.",
      "sinceVersion": "10.2",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "On Windows, avoid encoding-conversion-related crashes when emitting messages very early in postmaster startup",
      "description": "On Windows, avoid encoding-conversion-related crashes when emitting messages very early in postmaster startup (Takayuki Tsunakawa)",
      "sinceVersion": "10.2",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "Use our existing Motorola 68K spinlock code on OpenBSD as well as NetBSD",
      "description": "Use our existing Motorola 68K spinlock code on OpenBSD as well as NetBSD (David Carlier)",
      "sinceVersion": "10.2",
      "contributor": "David Carlier"
    },
    {
      "title": "Add support for spinlocks on Motorola 88K",
      "description": "Add support for spinlocks on Motorola 88K (David Carlier)",
      "sinceVersion": "10.2",
      "contributor": "David Carlier"
    },
    {
      "title": "Update time zone data files to tzdata release 2018c for DST law changes in Brazil, Sao Tome and Principe, plus historical corrections for Bolivia, Japan, and South Sudan. The `US/Pacific-New` zone has been removed",
      "description": "Update time zone data files to tzdata release 2018c for DST law changes in Brazil, Sao Tome and Principe, plus historical corrections for Bolivia, Japan, and South Sudan. The `US/Pacific-New` zone has been removed (it was only an alias for `America/Los_Angeles` anyway).",
      "sinceVersion": "10.2",
      "contributor": null
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "Fix index-only scan plans for cases where not all index columns can be returned (Tom Lane)\nIf an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call (Tom Lane)\nWhile the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary",
      "description": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary (Álvaro Herrera)",
      "sinceVersion": "10.20",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "Fix startup of a physical replica to tolerate transaction ID wraparound (Abhijit Menon-Sen, Tomas Vondra)\nIf a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "sinceVersion": "10.20",
      "contributor": "Abhijit Menon-Sen, Tomas Vondra"
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "Remove lexical limitations for SQL commands issued on a logical replication connection (Tom Lane)\nThe walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction",
      "description": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction (Alex Kingsborough, Kyotaro Horiguchi)",
      "sinceVersion": "10.20",
      "contributor": "Alex Kingsborough, Kyotaro Horiguchi"
    },
    {
      "title": "Be sure to `fsync",
      "description": "Be sure to `fsync()` the pg_logical/mappings subdirectory during checkpoints (Nathan Bossart)\nOn some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "sinceVersion": "10.20",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "Build extended statistics for partitioned tables (Justin Pryzby)\nA previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows ANALYZE to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual ANALYZE on the partitioned table if you want to maintain such statistics.)",
      "sinceVersion": "10.20",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Ignore extended statistics for inheritance trees (Justin Pryzby)\nCurrently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "sinceVersion": "10.20",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere (Tom Lane)\nThis restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index (Haiying Tang, Hou Zhijie)\nThe same prohibition already existed for primary key indexes.",
      "sinceVersion": "10.20",
      "contributor": "Haiying Tang, Hou Zhijie"
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Correctly update cached table state when switching `REPLICA IDENTITY` index (Tang Haiying, Hou Zhijie)\nConcurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "sinceVersion": "10.20",
      "contributor": "Tang Haiying, Hou Zhijie"
    },
    {
      "title": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects",
      "description": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects (Justin Pryzby)",
      "sinceVersion": "10.20",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules (Tom Lane)\nA whole-row variable would be printed as “var.*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "Fix or remove some incorrect assertions (Simon Riggs, Michael Paquier, Alexander Lakhin)\nThese errors should affect only debug builds, not production.",
      "sinceVersion": "10.20",
      "contributor": "Simon Riggs, Michael Paquier, Alexander Lakhin"
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib",
      "description": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib (Tom Lane)",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid calling `strerror",
      "description": "Avoid calling `strerror()` from libpq's `PQcancel()` function (Tom Lane)\n`PQcancel()` is supposed to be safe to call from a signal handler, but `strerror()` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name (Tom Lane)\nThis agrees with the documented behavior, and avoids probable permissions failure if SET ROLE or SET SESSION AUTHORIZATION has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext",
      "description": "In psql and some other client programs, avoid trying to invoke `gettext()()` from a control-C signal handler (Tom Lane)\nWhile no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical",
      "description": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical (Tom Lane, Nathan Bossart)\nPreviously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane, Nathan Bossart"
    },
    {
      "title": "Fix pg_dump's dump ordering for user-defined casts",
      "description": "Fix pg_dump's dump ordering for user-defined casts (Tom Lane)\nIn rare cases, the output script might refer to a user-defined cast before it had been created.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup",
      "description": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup (Tom Lane)\nThe previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix results of index-only scans on contrib/btree_gist indexes on char",
      "description": "Fix results of index-only scans on contrib/btree_gist indexes on char(`N`) columns (Tom Lane)\nIndex-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store char(`N`) values with the expected amount of space padding. The behavior of such an index will not change immediately unless you REINDEX it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "sinceVersion": "10.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python (Peter Eisentraut, Tom Lane, Andres Freund)\nWith Python 3.10, this avoids configure-time warnings about distutils being deprecated and scheduled for removal in Python 3.12. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "sinceVersion": "10.20",
      "contributor": "Peter Eisentraut, Tom Lane, Andres Freund"
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later",
      "description": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later (Victor Wagner)",
      "sinceVersion": "10.20",
      "contributor": "Victor Wagner"
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later",
      "description": "Fix PL/Python compile failure with Python 3.11 and later (Peter Eisentraut)",
      "sinceVersion": "10.20",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add support for building with Visual Studio 2022",
      "description": "Add support for building with Visual Studio 2022 (Hans Buschmann)",
      "sinceVersion": "10.20",
      "contributor": "Hans Buschmann"
    },
    {
      "title": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory",
      "description": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory (Anton Voloshin, Andrew Dunstan)",
      "sinceVersion": "10.20",
      "contributor": "Anton Voloshin, Andrew Dunstan"
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns (Tom Lane)\nThe previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "sinceVersion": "10.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables (Tom Lane)\nThe column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\nIn cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type record to begin with and there's no issue.",
      "sinceVersion": "10.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema",
      "description": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema()()` and allied functions (Renan Soares Lopes)\nThe xmlschema output for these types included a malformed regular expression.",
      "sinceVersion": "10.21",
      "contributor": "Renan Soares Lopes"
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns",
      "description": "Avoid core dump in parser for a `VALUES` clause with zero columns (Tom Lane)",
      "sinceVersion": "10.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner errors for `GROUPING",
      "description": "Fix planner errors for `GROUPING()()` constructs that reference outer query levels (Richard Guo, Tom Lane)",
      "sinceVersion": "10.21",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering",
      "description": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering (Aliaksandr Kalenik)",
      "sinceVersion": "10.21",
      "contributor": "Aliaksandr Kalenik"
    },
    {
      "title": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command",
      "description": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command (Tom Lane)\nThe parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "sinceVersion": "10.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression",
      "description": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression (Peter Geoghegan, Thomas Munro)\nThe table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "sinceVersion": "10.21",
      "contributor": "Peter Geoghegan, Thomas Munro"
    },
    {
      "title": "Fix race condition between DROP TABLESPACE and checkpointing",
      "description": "Fix race condition between DROP TABLESPACE and checkpointing (Nathan Bossart)\nThe checkpoint forced by DROP TABLESPACE could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "sinceVersion": "10.21",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint",
      "description": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint (Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas)\nTRUNCATE must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "sinceVersion": "10.21",
      "contributor": "Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas"
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Fix unsafe toast-data accesses during temporary object cleanup (Andres Freund)\nTemporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "sinceVersion": "10.21",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record",
      "description": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record (Sami Imseih)",
      "sinceVersion": "10.21",
      "contributor": "Sami Imseih"
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "Fix possibility of self-deadlock in hot standby conflict handling (Andres Freund)\nWith unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "sinceVersion": "10.21",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit",
      "description": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit (Amit Kapila)\nFaulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "sinceVersion": "10.21",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line (Dilip Kumar, Amit Kapila)\nOtherwise subscribers cannot see the values and will fail to replicate the update.",
      "sinceVersion": "10.21",
      "contributor": "Dilip Kumar, Amit Kapila"
    },
    {
      "title": "Improve logical replication subscriber's error message for an unsupported relation kind",
      "description": "Improve logical replication subscriber's error message for an unsupported relation kind (Tom Lane)\nv13 and later servers support publishing partitioned tables. Older server versions cannot handle subscribing to such a table, and they gave a very misleading error message: “table XYZ not found on publisher”. Arrange to deliver a more on-point message.",
      "sinceVersion": "10.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "Make libpq accept root-owned SSL private key files (David Steele)\nThis change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "sinceVersion": "10.21",
      "contributor": "David Steele"
    },
    {
      "title": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions (Tom Lane)\npg_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "sinceVersion": "10.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that contrib/pageinspect functions cope with all-zero pages",
      "description": "Ensure that contrib/pageinspect functions cope with all-zero pages (Michael Paquier)\nThis is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "sinceVersion": "10.21",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type (Michael Paquier, Justin Pryzby, Julien Rouhaud)\nThese changes make it less likely that the module will crash on bad data.",
      "sinceVersion": "10.21",
      "contributor": "Michael Paquier, Justin Pryzby, Julien Rouhaud"
    },
    {
      "title": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary (Ronan Dunklau)\nThis fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "sinceVersion": "10.21",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Clean up assorted failures under clang's `-fsanitize=undefined` checks (Tom Lane, Andres Freund, Zhihong Yu)\nMost of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "sinceVersion": "10.21",
      "contributor": "Tom Lane, Andres Freund, Zhihong Yu"
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions",
      "description": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions (Tom Lane)",
      "sinceVersion": "10.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build",
      "description": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build (Andres Freund)",
      "sinceVersion": "10.21",
      "contributor": "Andres Freund"
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "In Windows builds, use gendef instead of pexports to build DEF files (Andrew Dunstan)\nThis adapts the build process to work on recent MSys tool chains.",
      "sinceVersion": "10.21",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW (Andrew Dunstan)\nFor some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "sinceVersion": "10.21",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine.",
      "sinceVersion": "10.21",
      "contributor": null
    },
    {
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "Do not let extension scripts replace objects not already belonging to the extension (Tom Lane)\nThis change prevents extension scripts from doing CREATE OR REPLACE if there is an existing object that does not belong to the extension. It also prevents CREATE IF NOT EXISTS in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\nThe PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix replay of CREATE DATABASE WAL records on standby servers",
      "description": "Fix replay of CREATE DATABASE WAL records on standby servers (Kyotaro Horiguchi, Asim R Praveen, Paul Guo)\nStandby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "sinceVersion": "10.22",
      "contributor": "Kyotaro Horiguchi, Asim R Praveen, Paul Guo"
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Support “in place” tablespaces (Thomas Munro, Michael Paquier, Álvaro Herrera)\nNormally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the CREATE DATABASE replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "sinceVersion": "10.22",
      "contributor": "Thomas Munro, Michael Paquier, Álvaro Herrera"
    },
    {
      "title": "Fix permissions checks in CREATE INDEX",
      "description": "Fix permissions checks in CREATE INDEX (Nathan Bossart, Noah Misch)\nThe fix for CVE-2022-1552 caused CREATE INDEX to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg_dump issues CREATE INDEX before re-granting permissions.",
      "sinceVersion": "10.22",
      "contributor": "Nathan Bossart, Noah Misch"
    },
    {
      "title": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block",
      "description": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block (Tom Lane)\nIf the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "Fix race condition when checking transaction visibility (Simon Riggs)\n`TransactionIdIsInProgress()` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "sinceVersion": "10.22",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function",
      "description": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function (Richard Guo)",
      "sinceVersion": "10.22",
      "contributor": "Richard Guo"
    },
    {
      "title": "Prevent `pg_stat_get_subscription",
      "description": "Prevent `pg_stat_get_subscription()()` from possibly returning an extra row containing garbage values (Kuntal Ghosh)",
      "sinceVersion": "10.22",
      "contributor": "Kuntal Ghosh"
    },
    {
      "title": "Ensure that `pg_stop_backup",
      "description": "Ensure that `pg_stop_backup()()` cleans up session state properly (Fujii Masao)\nThis omission could lead to assertion failures or crashes later in the session.",
      "sinceVersion": "10.22",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses (Dean Rasheed)\nIn corner cases, a misleading error could be reported.",
      "sinceVersion": "10.22",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct",
      "description": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct (Álvaro Herrera)",
      "sinceVersion": "10.22",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Reject `ROW",
      "description": "Reject `ROW()` expressions and functions in `FROM` that have too many columns (Tom Lane)\nCases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere (Tom Lane)\nPreviously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column",
      "description": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made (Tom Lane)\nThis oversight could lead to dump/reload or pg_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "Report implicitly-created operator families to event triggers (Masahiko Sawada)\nIf CREATE OPERATOR CLASS results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "sinceVersion": "10.22",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Fix control file updates made when a restartpoint is running during promotion of a standby server (Kyotaro Horiguchi)\nPreviously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "sinceVersion": "10.22",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions",
      "description": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions (Wang Wei, Amit Kapila)\nIf a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "sinceVersion": "10.22",
      "contributor": "Wang Wei, Amit Kapila"
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders",
      "description": "Disallow nested backup operations in logical replication walsenders (Fujii Masao)",
      "sinceVersion": "10.22",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix memory leak in logical replication subscribers",
      "description": "Fix memory leak in logical replication subscribers (Hou Zhijie)",
      "sinceVersion": "10.22",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Ignore heap-rewrite temporary tables for materialized views in logical replication",
      "description": "Ignore heap-rewrite temporary tables for materialized views in logical replication (Euler Taveira)\nA `FOR ALL TABLES` publication will try to publish temporary tables if left to its own devices. There is a heuristic to suppress these, but it failed to cover internal temporary tables created while rewriting a materialized view. This created a risk of “logical replication target relation ... does not exist” failures during REFRESH MATERIALIZED VIEW.",
      "sinceVersion": "10.22",
      "contributor": "Euler Taveira"
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Prevent open-file leak when reading an invalid timezone abbreviation file (Kyotaro Horiguchi)\nSuch cases could result in harmless warning messages.",
      "sinceVersion": "10.22",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Allow custom server parameters to have short descriptions that are NULL (Steve Chavez)\nPreviously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "sinceVersion": "10.22",
      "contributor": "Steve Chavez"
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags",
      "description": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags (Haiyang Wang)",
      "sinceVersion": "10.22",
      "contributor": "Haiyang Wang"
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "Remove misguided SSL key file ownership check in libpq (Tom Lane)\nIn the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Ensure ecpg reports server connection loss sanely (Tom Lane)\nMisprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Avoid core dump in ecpglib with unexpected orders of operations (Tom Lane)\nCertain operations such as EXEC SQL PREPARE would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql's \\watch command, echo a newline after cancellation with control-C",
      "description": "In psql's \\watch command, echo a newline after cancellation with control-C (Pavel Stehule)\nThis prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "sinceVersion": "10.22",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms",
      "description": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms (Tom Lane)",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification",
      "description": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification (Tom Lane)",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "Block signals while allocating dynamic shared memory on Linux (Thomas Munro)\nThis avoids problems when a signal interrupts `posix_fallocate()()`.",
      "sinceVersion": "10.22",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open",
      "description": "Detect unexpected `EEXIST` error from `shm_open()()` (Thomas Munro)\nThis avoids a possible crash on Solaris.",
      "sinceVersion": "10.22",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36",
      "description": "Adjust PL/Perl test case so it will work under Perl 5.36 (Dagfinn Ilmari MannsÃ¥ker)",
      "sinceVersion": "10.22",
      "contributor": "Dagfinn Ilmari MannsÃ¥ker"
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL",
      "description": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL (Tom Lane)",
      "sinceVersion": "10.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix VACUUM to press on if an attempted page deletion in a btree index fails to find the page's parent downlink",
      "description": "Fix VACUUM to press on if an attempted page deletion in a btree index fails to find the page's parent downlink (Peter Geoghegan)\nRather than throwing an error, just log the issue and continue without deleting the empty page. Previously, a buggy operator class or corrupted index could indefinitely prevent completion of vacuuming of the index, eventually leading to transaction wraparound problems.",
      "sinceVersion": "10.23",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view",
      "description": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view (Tom Lane)\nThis oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "Disallow rules named `_RETURN` that are not `ON SELECT` (Tom Lane)\nThis avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Repair rare failure of MULTIEXPR_SUBLINK subplans in inherited updates",
      "description": "Repair rare failure of MULTIEXPR_SUBLINK subplans in inherited updates (Tom Lane)\nUse of the syntax `UPDATE tab SET (c1, ...) = (SELECT ...)` with an inherited or partitioned target table could result in failure if the child tables are sufficiently dissimilar. This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid flattening `FROM`-less subqueries when the outer query has grouping sets",
      "description": "Avoid flattening `FROM`-less subqueries when the outer query has grouping sets (Tom Lane)\nThis oversight could lead to assertion failures or planner errors such as “variable not found in subplan target list”.",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "Prevent WAL corruption after a standby promotion (Dilip Kumar, Robert Haas)\nWhen a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "sinceVersion": "10.23",
      "contributor": "Dilip Kumar, Robert Haas"
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes (Matthias van de Meent, Zhang Mingli)\nThis mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "sinceVersion": "10.23",
      "contributor": "Matthias van de Meent, Zhang Mingli"
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction (Masahiko Sawada, Kuroda Hayato)\nThese errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "sinceVersion": "10.23",
      "contributor": "Masahiko Sawada, Kuroda Hayato"
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "Prevent examining system catalogs with the wrong snapshot during logical decoding (Masahiko Sawada)\nIf decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "sinceVersion": "10.23",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "Accept interrupts in more places during logical decoding (Amit Kapila, Masahiko Sawada)\nThis ameliorates problems with slow shutdown of replication workers.",
      "sinceVersion": "10.23",
      "contributor": "Amit Kapila, Masahiko Sawada"
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "Avoid crash after function syntax error in replication workers (Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane)\nIf a syntax error occurred in a SQL-language or PL/pgSQL-language CREATE FUNCTION or DO command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "sinceVersion": "10.23",
      "contributor": "Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "Fix handling of read-write expanded datums that are passed to SQL functions (Tom Lane)\nIf a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Fix use-after-free hazard in string comparisons (Tom Lane)\nImproper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "Prevent postmaster crash when shared-memory state is corrupted (Tom Lane)\nThe postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add some more defenses against recursion till stack overrun",
      "description": "Add some more defenses against recursion till stack overrun (Richard Guo, Tom Lane)",
      "sinceVersion": "10.23",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "Avoid long-term memory leakage in the autovacuum launcher process (Reid Thompson)\nThe lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "sinceVersion": "10.23",
      "contributor": "Reid Thompson"
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "Add missing guards for `NULL` connection pointer in libpq (Daniele Varrazzo, Tom Lane)\nThere's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()()` and `PQisnonblocking()()` didn't get that memo, so fix them.",
      "sinceVersion": "10.23",
      "contributor": "Daniele Varrazzo, Tom Lane"
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration",
      "description": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration (Andrey Sokolov)\nFor example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only str1 was marked `static`.",
      "sinceVersion": "10.23",
      "contributor": "Andrey Sokolov"
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg_basebackup",
      "description": "Allow cross-platform tablespace relocation in pg_basebackup (Robert Haas)\nAllow the remote path in --tablespace-mapping to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "sinceVersion": "10.23",
      "contributor": "Robert Haas"
    },
    {
      "title": "In pg_stat_statements, fix access to already-freed memory",
      "description": "In pg_stat_statements, fix access to already-freed memory (zhaoqigui)\nThis occurred if pg_stat_statements tracked a ROLLBACK command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "sinceVersion": "10.23",
      "contributor": "zhaoqigui"
    },
    {
      "title": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns (Richard Guo, Etsuro Fujita)\nThis avoids “variable not found in subplan target list” errors in rare cases.",
      "sinceVersion": "10.23",
      "contributor": "Richard Guo, Etsuro Fujita"
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create",
      "description": "Reject unwanted output from the platform's `uuid_create()()` function (Nazir Bilal Yavuz)\nThe uuid-ossp module expects libc's `uuid_create()()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()()`.)",
      "sinceVersion": "10.23",
      "contributor": "Nazir Bilal Yavuz"
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Include new Perl test modules in standard installations (Álvaro Herrera)\nAdd PostgreSQL/Test/Cluster.pm and PostgreSQL/Test/Utils.pm to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "sinceVersion": "10.23",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "On NetBSD, force dynamic symbol resolution at postmaster start (Andres Freund, Tom Lane)\nThis avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "sinceVersion": "10.23",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set",
      "description": "Allow use of `__sync_lock_test_and_set()()` for spinlocks on any machine (Tom Lane)\nThis eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS",
      "description": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane)",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later",
      "description": "Silence assorted compiler warnings from clang 15 and later (Tom Lane)",
      "sinceVersion": "10.23",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\nAlso, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis.",
      "description": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\nAlso, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy_River, America/Thunder_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\nThese zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of timestamptz display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\nIt is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "sinceVersion": "10.23",
      "contributor": null
    },
    {
      "title": "Avoid use of insecure search_path settings in pg_dump and other client programs",
      "description": "Avoid use of insecure search_path settings in pg_dump and other client programs (Noah Misch, Tom Lane)\npg_dump, pg_upgrade, vacuumdb and other PostgreSQL-provided applications were themselves vulnerable to the type of hijacking described in the previous changelog entry; since these applications are commonly run by superusers, they present particularly attractive targets. To make them secure whether or not the installation as a whole has been secured, modify them to include only the pg_catalog schema in their search_path settings. Autovacuum worker processes now do the same, as well.\nIn cases where user-provided functions are indirectly executed by these programs — for example, user-provided functions in index expressions — the tighter search_path may result in errors, which will need to be corrected by adjusting those user-provided functions to not assume anything about what search path they are invoked under. That has always been good practice, but now it will be necessary for correct behavior. (CVE-2018-1058)",
      "sinceVersion": "10.3",
      "contributor": "Noah Misch, Tom Lane"
    },
    {
      "title": "Prevent logical replication from trying to ship changes for unpublishable relations",
      "description": "Prevent logical replication from trying to ship changes for unpublishable relations (Peter Eisentraut)\nA publication marked `FOR ALL TABLES` would incorrectly ship changes in materialized views and information_schema tables, which are supposed to be omitted from the change stream.",
      "sinceVersion": "10.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix misbehavior of concurrent-update rechecks with CTE references appearing in subplans",
      "description": "Fix misbehavior of concurrent-update rechecks with CTE references appearing in subplans (Tom Lane)\nIf a CTE (`WITH` clause reference) is used in an InitPlan or SubPlan, and the query requires a recheck due to trying to update or lock a concurrently-updated row, incorrect results could be obtained.",
      "sinceVersion": "10.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner failures with overlapping mergejoin clauses in an outer join",
      "description": "Fix planner failures with overlapping mergejoin clauses in an outer join (Tom Lane)\nThese mistakes led to “left and right pathkeys do not match in mergejoin” or “outer pathkeys do not match mergeclauses” planner errors in corner cases.",
      "sinceVersion": "10.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Repair pg_upgrade's failure to preserve relfrozenxid for materialized views",
      "description": "Repair pg_upgrade's failure to preserve relfrozenxid for materialized views (Tom Lane, Andres Freund)\nThis oversight could lead to data corruption in materialized views after an upgrade, manifesting as “could not access status of transaction” or “found xmin from before relfrozenxid” errors. The problem would be more likely to occur in seldom-refreshed materialized views, or ones that were maintained only with REFRESH MATERIALIZED VIEW CONCURRENTLY.\nIf such corruption is observed, it can be repaired by refreshing the materialized view (without `CONCURRENTLY`).",
      "sinceVersion": "10.3",
      "contributor": "Tom Lane, Andres Freund"
    },
    {
      "title": "Fix incorrect pg_dump output for some non-default sequence limit values",
      "description": "Fix incorrect pg_dump output for some non-default sequence limit values (Alexey Bashtanov)",
      "sinceVersion": "10.3",
      "contributor": "Alexey Bashtanov"
    },
    {
      "title": "Fix pg_dump's mishandling of `STATISTICS` objects",
      "description": "Fix pg_dump's mishandling of `STATISTICS` objects (Tom Lane)\nAn extended statistics object's schema was mislabeled in the dump's table of contents, possibly leading to the wrong results in a schema-selective restore. Its ownership was not correctly restored, either. Also, change the logic so that statistics objects are dumped/restored, or not, as independent objects rather than tying them to the dump/restore decision for the table they are on. The original definition could not scale to the planned future extension to cross-table statistics.",
      "sinceVersion": "10.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect reporting of PL/Python function names in error `CONTEXT` stacks",
      "description": "Fix incorrect reporting of PL/Python function names in error `CONTEXT` stacks (Tom Lane)\nAn error occurring within a nested PL/Python function call (that is, one reached via a SPI query from another PL/Python function) would result in a stack trace showing the inner function's name twice, rather than the expected results. Also, an error in a nested PL/Python `DO` block could result in a null pointer dereference crash on some platforms.",
      "sinceVersion": "10.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow contrib/auto_explain's log_min_duration setting to range up to `INT_MAX`, or about 24 days instead of 35 minutes",
      "description": "Allow contrib/auto_explain's log_min_duration setting to range up to `INT_MAX`, or about 24 days instead of 35 minutes (Tom Lane)",
      "sinceVersion": "10.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Mark assorted GUC variables as `PGDLLIMPORT`, to ease porting extension modules to Windows",
      "description": "Mark assorted GUC variables as `PGDLLIMPORT`, to ease porting extension modules to Windows (Metin Doslu)",
      "sinceVersion": "10.3",
      "contributor": "Metin Doslu"
    },
    {
      "title": "Avoid crash if a table rewrite event trigger is added concurrently with a command that could call such a trigger",
      "description": "Avoid crash if a table rewrite event trigger is added concurrently with a command that could call such a trigger (Álvaro Herrera, Andrew Gierth, Tom Lane)",
      "sinceVersion": "10.4",
      "contributor": "Álvaro Herrera, Andrew Gierth, Tom Lane"
    },
    {
      "title": "Fix incorrect parallel-safety markings on a few built-in functions",
      "description": "Fix incorrect parallel-safety markings on a few built-in functions (Thomas Munro, Tom Lane)\nThe functions `brin_summarize_new_values()`, `brin_summarize_range()`, `brin_desummarize_range()`, `gin_clean_pending_list()`, `cursor_to_xml()`, `cursor_to_xmlschema()`, `ts_rewrite()`, `ts_stat()`, `binary_upgrade_create_empty_extension()`, and `pg_import_system_collations()` should be marked parallel-unsafe; some because they perform database modifications directly, and others because they execute user-supplied queries that might do so. They were marked parallel-restricted instead, leading to a risk of unexpected query errors. This has been repaired for new installations by correcting the initial catalog data, but existing installations will continue to contain the incorrect markings. Practical use of these functions seems to pose little hazard unless force_parallel_mode is turned on. In case of trouble, it can be fixed by manually updating these functions' pg_proc entries, for example `ALTER FUNCTION pg_catalog.brin_summarize_new_values(regclass) PARALLEL UNSAFE`. (Note that that will need to be done in each database of the installation.) Another option is to pg_upgrade the database to a version containing the corrected initial data.",
      "sinceVersion": "10.4",
      "contributor": "Thomas Munro, Tom Lane"
    },
    {
      "title": "Avoid re-using TOAST value OIDs that match dead-but-not-yet-vacuumed TOAST entries",
      "description": "Avoid re-using TOAST value OIDs that match dead-but-not-yet-vacuumed TOAST entries (Pavan Deolasee)\nOnce the OID counter has wrapped around, it's possible to assign a TOAST value whose OID matches a previously deleted entry in the same TOAST table. If that entry were not yet vacuumed away, this resulted in “unexpected chunk number 0 (expected 1) for toast value `nnnnn`” errors, which would persist until the dead entry was removed by VACUUM. Fix by not selecting such OIDs when creating a new TOAST entry.",
      "sinceVersion": "10.4",
      "contributor": "Pavan Deolasee"
    },
    {
      "title": "Correctly enforce any `CHECK` constraints on individual partitions during COPY to a partitioned table",
      "description": "Correctly enforce any `CHECK` constraints on individual partitions during COPY to a partitioned table (Etsuro Fujita)\nPreviously, only constraints declared for the partitioned table as a whole were checked.",
      "sinceVersion": "10.4",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Accept `TRUE` and `FALSE` as partition bound values",
      "description": "Accept `TRUE` and `FALSE` as partition bound values (Amit Langote)\nPreviously, only string-literal values were accepted for a boolean partitioning column. But then pg_dump would print such values as `TRUE` or `FALSE`, leading to dump/reload failures.",
      "sinceVersion": "10.4",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix memory management for partition key comparison functions",
      "description": "Fix memory management for partition key comparison functions (Álvaro Herrera, Amit Langote)\nThis error could lead to crashes when using user-defined operator classes for partition keys.",
      "sinceVersion": "10.4",
      "contributor": "Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Fix possible crash when a query inserts tuples in several partitions of a partitioned table, and those partitions don't have identical row types",
      "description": "Fix possible crash when a query inserts tuples in several partitions of a partitioned table, and those partitions don't have identical row types (Etsuro Fujita, Amit Langote)",
      "sinceVersion": "10.4",
      "contributor": "Etsuro Fujita, Amit Langote"
    },
    {
      "title": "Change ANALYZE's algorithm for updating pg_class.reltuples",
      "description": "Change ANALYZE's algorithm for updating pg_class.reltuples (David Gould)\nPreviously, pages not actually scanned by ANALYZE were assumed to retain their old tuple density. In a large table where ANALYZE samples only a small fraction of the pages, this meant that the overall tuple density estimate could not change very much, so that reltuples would change nearly proportionally to changes in the table's physical size (relpages) regardless of what was actually happening in the table. This has been observed to result in reltuples becoming so much larger than reality as to effectively shut off autovacuuming. To fix, assume that ANALYZE's sample is a statistically unbiased sample of the table (as it should be), and just extrapolate the density observed within those pages to the whole table.",
      "sinceVersion": "10.4",
      "contributor": "David Gould"
    },
    {
      "title": "Include extended-statistics objects in the set of table properties duplicated by CREATE TABLE ... LIKE ... INCLUDING ALL",
      "description": "Include extended-statistics objects in the set of table properties duplicated by CREATE TABLE ... LIKE ... INCLUDING ALL (David Rowley)\nAlso add an `INCLUDING STATISTICS` option, to allow finer-grained control over whether this happens.",
      "sinceVersion": "10.4",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix CREATE TABLE ... LIKE with bigint identity columns",
      "description": "Fix CREATE TABLE ... LIKE with bigint identity columns (Peter Eisentraut)\nOn platforms where long is 32 bits (which includes 64-bit Windows as well as most 32-bit machines), copied sequence parameters would be truncated to 32 bits.",
      "sinceVersion": "10.4",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid deadlocks in concurrent CREATE INDEX CONCURRENTLY commands that are run under `SERIALIZABLE` or `REPEATABLE READ` transaction isolation",
      "description": "Avoid deadlocks in concurrent CREATE INDEX CONCURRENTLY commands that are run under `SERIALIZABLE` or `REPEATABLE READ` transaction isolation (Tom Lane)",
      "sinceVersion": "10.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible slow execution of REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Fix possible slow execution of REFRESH MATERIALIZED VIEW CONCURRENTLY (Thomas Munro)",
      "sinceVersion": "10.4",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix `UPDATE/DELETE ... WHERE CURRENT OF` to not fail when the referenced cursor uses an index-only-scan plan",
      "description": "Fix `UPDATE/DELETE ... WHERE CURRENT OF` to not fail when the referenced cursor uses an index-only-scan plan (Yugo Nagata, Tom Lane)",
      "sinceVersion": "10.4",
      "contributor": "Yugo Nagata, Tom Lane"
    },
    {
      "title": "Fix incorrect planning of join clauses pushed into parameterized paths",
      "description": "Fix incorrect planning of join clauses pushed into parameterized paths (Andrew Gierth, Tom Lane)\nThis error could result in misclassifying a condition as a “join filter” for an outer join when it should be a plain “filter” condition, leading to incorrect join output.",
      "sinceVersion": "10.4",
      "contributor": "Andrew Gierth, Tom Lane"
    },
    {
      "title": "Fix possibly incorrect generation of an index-only-scan plan when the same table column appears in multiple index columns, and only some of those index columns use operator classes that can return the column value",
      "description": "Fix possibly incorrect generation of an index-only-scan plan when the same table column appears in multiple index columns, and only some of those index columns use operator classes that can return the column value (Kyotaro Horiguchi)",
      "sinceVersion": "10.4",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Prevent planner crash when a query has multiple `GROUPING SETS`, none of which can be implemented by sorting",
      "description": "Prevent planner crash when a query has multiple `GROUPING SETS`, none of which can be implemented by sorting (Andrew Gierth)",
      "sinceVersion": "10.4",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix executor crash due to double free in some `GROUPING SETS` usages",
      "description": "Fix executor crash due to double free in some `GROUPING SETS` usages (Peter Geoghegan)",
      "sinceVersion": "10.4",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix misexecution of self-joins on transition tables",
      "description": "Fix misexecution of self-joins on transition tables (Thomas Munro)",
      "sinceVersion": "10.4",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid failure if a query-cancel or session-termination interrupt occurs while committing a prepared transaction",
      "description": "Avoid failure if a query-cancel or session-termination interrupt occurs while committing a prepared transaction (Stas Kelvich)",
      "sinceVersion": "10.4",
      "contributor": "Stas Kelvich"
    },
    {
      "title": "Fix query-lifespan memory leakage in repeatedly executed hash joins",
      "description": "Fix query-lifespan memory leakage in repeatedly executed hash joins (Tom Lane)",
      "sinceVersion": "10.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible leak or double free of visibility map buffer pins",
      "description": "Fix possible leak or double free of visibility map buffer pins (Amit Kapila)",
      "sinceVersion": "10.4",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Avoid spuriously marking pages as all-visible",
      "description": "Avoid spuriously marking pages as all-visible (Dan Wood, Pavan Deolasee, Álvaro Herrera)\nThis could happen if some tuples were locked (but not deleted). While queries would still function correctly, vacuum would normally ignore such pages, with the long-term effect that the tuples were never frozen. In recent releases this would eventually result in errors such as “found multixact `nnnnn` from before relminmxid `nnnnn`”.",
      "sinceVersion": "10.4",
      "contributor": "Dan Wood, Pavan Deolasee, Álvaro Herrera"
    },
    {
      "title": "Fix overly strict sanity check in `heap_prepare_freeze_tuple",
      "description": "Fix overly strict sanity check in `heap_prepare_freeze_tuple()` (Álvaro Herrera)\nThis could result in incorrect “cannot freeze committed xmax” failures in databases that have been pg_upgrade'd from 9.2 or earlier.",
      "sinceVersion": "10.4",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Prevent dangling-pointer dereference when a C-coded before-update row trigger returns the “old” tuple",
      "description": "Prevent dangling-pointer dereference when a C-coded before-update row trigger returns the “old” tuple (Rushabh Lathia)",
      "sinceVersion": "10.4",
      "contributor": "Rushabh Lathia"
    },
    {
      "title": "Reduce locking during autovacuum worker scheduling",
      "description": "Reduce locking during autovacuum worker scheduling (Jeff Janes)\nThe previous behavior caused drastic loss of potential worker concurrency in databases with many tables.",
      "sinceVersion": "10.4",
      "contributor": "Jeff Janes"
    },
    {
      "title": "Ensure client hostname is copied while copying pg_stat_activity data to local memory",
      "description": "Ensure client hostname is copied while copying pg_stat_activity data to local memory (Edmund Horner)\nPreviously the supposedly-local snapshot contained a pointer into shared memory, allowing the client hostname column to change unexpectedly if any existing session disconnected.",
      "sinceVersion": "10.4",
      "contributor": "Edmund Horner"
    },
    {
      "title": "Handle pg_stat_activity information for auxiliary processes correctly",
      "description": "Handle pg_stat_activity information for auxiliary processes correctly (Edmund Horner)\nThe application_name, client_hostname, and query fields might show incorrect data for such processes.",
      "sinceVersion": "10.4",
      "contributor": "Edmund Horner"
    },
    {
      "title": "Fix incorrect processing of multiple compound affixes in `ispell` dictionaries",
      "description": "Fix incorrect processing of multiple compound affixes in `ispell` dictionaries (Arthur Zakirov)",
      "sinceVersion": "10.4",
      "contributor": "Arthur Zakirov"
    },
    {
      "title": "Fix collation-aware searches",
      "description": "Fix collation-aware searches (that is, indexscans using inequality operators) in SP-GiST indexes on text columns (Tom Lane)\nSuch searches would return the wrong set of rows in most non-C locales.",
      "sinceVersion": "10.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent query-lifespan memory leakage with SP-GiST operator classes that use traversal values",
      "description": "Prevent query-lifespan memory leakage with SP-GiST operator classes that use traversal values (Anton Dignös)",
      "sinceVersion": "10.4",
      "contributor": "Anton Dignös"
    },
    {
      "title": "Count the number of index tuples correctly during initial build of an SP-GiST index",
      "description": "Count the number of index tuples correctly during initial build of an SP-GiST index (Tomas Vondra)\nPreviously, the tuple count was reported to be the same as that of the underlying table, which is wrong if the index is partial.",
      "sinceVersion": "10.4",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Count the number of index tuples correctly during vacuuming of a GiST index",
      "description": "Count the number of index tuples correctly during vacuuming of a GiST index (Andrey Borodin)\nPreviously it reported the estimated number of heap tuples, which might be inaccurate, and is certainly wrong if the index is partial.",
      "sinceVersion": "10.4",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Fix a corner case where a streaming standby gets stuck at a WAL continuation record",
      "description": "Fix a corner case where a streaming standby gets stuck at a WAL continuation record (Kyotaro Horiguchi)",
      "sinceVersion": "10.4",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "In logical decoding, avoid possible double processing of WAL data when a walsender restarts",
      "description": "In logical decoding, avoid possible double processing of WAL data when a walsender restarts (Craig Ringer)",
      "sinceVersion": "10.4",
      "contributor": "Craig Ringer"
    },
    {
      "title": "Fix logical replication to not assume that type OIDs match between the local and remote servers",
      "description": "Fix logical replication to not assume that type OIDs match between the local and remote servers (Masahiko Sawada)",
      "sinceVersion": "10.4",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Allow `scalarltsel",
      "description": "Allow `scalarltsel()` and `scalargtsel()` to be used on non-core datatypes (Tomas Vondra)",
      "sinceVersion": "10.4",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Reduce libpq's memory consumption when a server error is reported after a large amount of query output has been collected",
      "description": "Reduce libpq's memory consumption when a server error is reported after a large amount of query output has been collected (Tom Lane)\nDiscard the previous output before, not after, processing the error message. On some platforms, notably Linux, this can make a difference in the application's subsequent memory footprint.",
      "sinceVersion": "10.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix double-free crashes in ecpg",
      "description": "Fix double-free crashes in ecpg (Patrick Krecker, Jeevan Ladhe)",
      "sinceVersion": "10.4",
      "contributor": "Patrick Krecker, Jeevan Ladhe"
    },
    {
      "title": "Fix ecpg to handle long long int variables correctly in MSVC builds",
      "description": "Fix ecpg to handle long long int variables correctly in MSVC builds (Michael Meskes, Andrew Gierth)",
      "sinceVersion": "10.4",
      "contributor": "Michael Meskes, Andrew Gierth"
    },
    {
      "title": "Fix mis-quoting of values for list-valued GUC variables in dumps",
      "description": "Fix mis-quoting of values for list-valued GUC variables in dumps (Michael Paquier, Tom Lane)\nThe local_preload_libraries, session_preload_libraries, shared_preload_libraries, and temp_tablespaces variables were not correctly quoted in pg_dump output. This would cause problems if settings for these variables appeared in CREATE FUNCTION ... SET or ALTER DATABASE/ROLE ... SET clauses.",
      "sinceVersion": "10.4",
      "contributor": "Michael Paquier, Tom Lane"
    },
    {
      "title": "Fix pg_recvlogical to not fail against pre-v10 PostgreSQL servers",
      "description": "Fix pg_recvlogical to not fail against pre-v10 PostgreSQL servers (Michael Paquier)\nA previous fix caused pg_recvlogical to issue a command regardless of server version, but it should only be issued to v10 and later servers.",
      "sinceVersion": "10.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure that pg_rewind deletes files on the target server if they are deleted from the source server during the run",
      "description": "Ensure that pg_rewind deletes files on the target server if they are deleted from the source server during the run (Takayuki Tsunakawa)\nFailure to do this could result in data inconsistency on the target, particularly if the file in question is a WAL segment.",
      "sinceVersion": "10.4",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "Fix pg_rewind to handle tables in non-default tablespaces correctly",
      "description": "Fix pg_rewind to handle tables in non-default tablespaces correctly (Takayuki Tsunakawa)",
      "sinceVersion": "10.4",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "Fix overflow handling in PL/pgSQL integer FOR loops",
      "description": "Fix overflow handling in PL/pgSQL integer FOR loops (Tom Lane)\nThe previous coding failed to detect overflow of the loop variable on some non-gcc compilers, leading to an infinite loop.",
      "sinceVersion": "10.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Adjust PL/Python regression tests to pass under Python 3.7",
      "description": "Adjust PL/Python regression tests to pass under Python 3.7 (Peter Eisentraut)",
      "sinceVersion": "10.4",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Support testing PL/Python and related modules when building with Python 3 and MSVC",
      "description": "Support testing PL/Python and related modules when building with Python 3 and MSVC (Andrew Dunstan)",
      "sinceVersion": "10.4",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix errors in initial build of contrib/bloom indexes",
      "description": "Fix errors in initial build of contrib/bloom indexes (Tomas Vondra, Tom Lane)\nFix possible omission of the table's last tuple from the index. Count the number of index tuples correctly, in case it is a partial index.",
      "sinceVersion": "10.4",
      "contributor": "Tomas Vondra, Tom Lane"
    },
    {
      "title": "Rename internal `b64_encode",
      "description": "Rename internal `b64_encode()` and `b64_decode()` functions to avoid conflict with Solaris 11.4 built-in functions (Rainer Orth)",
      "sinceVersion": "10.4",
      "contributor": "Rainer Orth"
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2018e",
      "description": "Sync our copy of the timezone library with IANA tzcode release 2018e (Tom Lane)\nThis fixes the zic timezone data compiler to cope with negative daylight-savings offsets. While the PostgreSQL project will not immediately ship such timezone data, zic might be used with timezone data obtained directly from IANA, so it seems prudent to update zic now.",
      "sinceVersion": "10.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2018d for DST law changes in Palestine and Antarctica",
      "description": "Update time zone data files to tzdata release 2018d for DST law changes in Palestine and Antarctica (Casey Station), plus historical corrections for Portugal and its colonies, as well as Enderbury, Jamaica, Turks &amp; Caicos Islands, and Uruguay.",
      "sinceVersion": "10.4",
      "contributor": null
    },
    {
      "title": "Fix `INSERT ... ON CONFLICT UPDATE` through a view that isn't just `SELECT * FROM ...`",
      "description": "Fix `INSERT ... ON CONFLICT UPDATE` through a view that isn't just `SELECT * FROM ...` (Dean Rasheed, Amit Langote)\nErroneous expansion of an updatable view could lead to crashes or “attribute ... has the wrong type” errors, if the view's `SELECT` list doesn't match one-to-one with the underlying table's columns. Furthermore, this bug could be leveraged to allow updates of columns that an attacking user lacks `UPDATE` privilege for, if that user has `INSERT` and `UPDATE` privileges for some other column(s) of the table. Any user could also use it for disclosure of server memory. (CVE-2018-10925)",
      "sinceVersion": "10.5",
      "contributor": "Dean Rasheed, Amit Langote"
    },
    {
      "title": "Ensure that updates to the relfrozenxid and relminmxid values for “nailed” system catalogs are processed in a timely fashion",
      "description": "Ensure that updates to the relfrozenxid and relminmxid values for “nailed” system catalogs are processed in a timely fashion (Andres Freund)\nOveroptimistic caching rules could prevent these updates from being seen by other sessions, leading to spurious errors and/or data corruption. The problem was significantly worse for shared catalogs, such as pg_authid, because the stale cache data could persist into new sessions as well as existing ones.",
      "sinceVersion": "10.5",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix case where a freshly-promoted standby crashes before having completed its first post-recovery checkpoint",
      "description": "Fix case where a freshly-promoted standby crashes before having completed its first post-recovery checkpoint (Michael Paquier, Kyotaro Horiguchi, Pavan Deolasee, Álvaro Herrera)\nThis led to a situation where the server did not think it had reached a consistent database state during subsequent WAL replay, preventing restart.",
      "sinceVersion": "10.5",
      "contributor": "Michael Paquier, Kyotaro Horiguchi, Pavan Deolasee, Álvaro Herrera"
    },
    {
      "title": "Avoid emitting a bogus WAL record when recycling an all-zero btree page",
      "description": "Avoid emitting a bogus WAL record when recycling an all-zero btree page (Amit Kapila)\nThis mistake has been seen to cause assertion failures, and potentially it could result in unnecessary query cancellations on hot standby servers.",
      "sinceVersion": "10.5",
      "contributor": "Amit Kapila"
    },
    {
      "title": "During WAL replay, guard against corrupted record lengths exceeding 1GB",
      "description": "During WAL replay, guard against corrupted record lengths exceeding 1GB (Michael Paquier)\nTreat such a case as corrupt data. Previously, the code would try to allocate space and get a hard error, making recovery impossible.",
      "sinceVersion": "10.5",
      "contributor": "Michael Paquier"
    },
    {
      "title": "When ending recovery, delay writing the timeline history file as long as possible",
      "description": "When ending recovery, delay writing the timeline history file as long as possible (Heikki Linnakangas)\nThis avoids some situations where a failure during recovery cleanup (such as a problem with a two-phase state file) led to inconsistent timeline state on-disk.",
      "sinceVersion": "10.5",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Make logical WAL senders report streaming state correctly",
      "description": "Make logical WAL senders report streaming state correctly (Simon Riggs, Sawada Masahiko)\nThe code previously mis-detected whether or not it had caught up with the upstream server.",
      "sinceVersion": "10.5",
      "contributor": "Simon Riggs, Sawada Masahiko"
    },
    {
      "title": "Ensure that a snapshot is provided when executing data type input functions in logical replication subscribers",
      "description": "Ensure that a snapshot is provided when executing data type input functions in logical replication subscribers (Minh-Quan Tran, Álvaro Herrera)\nThis omission led to failures in some cases, such as domains with constraints using SQL-language functions.",
      "sinceVersion": "10.5",
      "contributor": "Minh-Quan Tran, Álvaro Herrera"
    },
    {
      "title": "Fix bugs in snapshot handling during logical decoding, allowing wrong decoding results in rare cases",
      "description": "Fix bugs in snapshot handling during logical decoding, allowing wrong decoding results in rare cases (Arseny Sher, Álvaro Herrera)",
      "sinceVersion": "10.5",
      "contributor": "Arseny Sher, Álvaro Herrera"
    },
    {
      "title": "Add subtransaction handling in logical-replication table synchronization workers",
      "description": "Add subtransaction handling in logical-replication table synchronization workers (Amit Khandekar, Robert Haas)\nPreviously, table synchronization could misbehave if any subtransactions were aborted after modifying a table being synchronized.",
      "sinceVersion": "10.5",
      "contributor": "Amit Khandekar, Robert Haas"
    },
    {
      "title": "Ensure a table's cached index list is correctly rebuilt after an index creation fails partway through",
      "description": "Ensure a table's cached index list is correctly rebuilt after an index creation fails partway through (Peter Geoghegan)\nPreviously, the failed index's OID could remain in the list, causing problems later in the same session.",
      "sinceVersion": "10.5",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix mishandling of empty uncompressed posting list pages in GIN indexes",
      "description": "Fix mishandling of empty uncompressed posting list pages in GIN indexes (Sivasubramanian Ramasubramanian, Alexander Korotkov)\nThis could result in an assertion failure after pg_upgrade of a pre-9.4 GIN index (9.4 and later will not create such pages).",
      "sinceVersion": "10.5",
      "contributor": "Sivasubramanian Ramasubramanian, Alexander Korotkov"
    },
    {
      "title": "Ensure that a process doing a parallel index scan will respond to signals",
      "description": "Ensure that a process doing a parallel index scan will respond to signals (Amit Kapila)\nPreviously, parallel workers could get stuck waiting for a lock on an index page, and not notice requests to abort the query.",
      "sinceVersion": "10.5",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Ensure that VACUUM will respond to signals within btree page deletion loops",
      "description": "Ensure that VACUUM will respond to signals within btree page deletion loops (Andres Freund)\nCorrupted btree indexes could result in an infinite loop here, and that previously wasn't interruptible without forcing a crash.",
      "sinceVersion": "10.5",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix planner to avoid “ORDER/GROUP BY expression not found in targetlist” errors in some queries with set-returning functions",
      "description": "Fix planner to avoid “ORDER/GROUP BY expression not found in targetlist” errors in some queries with set-returning functions (Tom Lane)",
      "sinceVersion": "10.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of partition keys whose data type uses a polymorphic btree operator class, such as arrays",
      "description": "Fix handling of partition keys whose data type uses a polymorphic btree operator class, such as arrays (Amit Langote, Álvaro Herrera)",
      "sinceVersion": "10.5",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Fix SQL-standard `FETCH FIRST` syntax to allow parameters",
      "description": "Fix SQL-standard `FETCH FIRST` syntax to allow parameters (`$`n``), as the standard expects (Andrew Gierth)",
      "sinceVersion": "10.5",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Remove undocumented restriction against duplicate partition key columns",
      "description": "Remove undocumented restriction against duplicate partition key columns (Yugo Nagata)",
      "sinceVersion": "10.5",
      "contributor": "Yugo Nagata"
    },
    {
      "title": "Disallow temporary tables from being partitions of non-temporary tables",
      "description": "Disallow temporary tables from being partitions of non-temporary tables (Amit Langote, Michael Paquier)\nWhile previously allowed, this case didn't work reliably.",
      "sinceVersion": "10.5",
      "contributor": "Amit Langote, Michael Paquier"
    },
    {
      "title": "Fix EXPLAIN's accounting for resource usage, particularly buffer accesses, in parallel workers",
      "description": "Fix EXPLAIN's accounting for resource usage, particularly buffer accesses, in parallel workers (Amit Kapila, Robert Haas)",
      "sinceVersion": "10.5",
      "contributor": "Amit Kapila, Robert Haas"
    },
    {
      "title": "Fix SHOW ALL to show all settings to roles that are members of `pg_read_all_settings`, and also allow such roles to see source filename and line number in the pg_settings view",
      "description": "Fix SHOW ALL to show all settings to roles that are members of `pg_read_all_settings`, and also allow such roles to see source filename and line number in the pg_settings view (Laurenz Albe, Álvaro Herrera)",
      "sinceVersion": "10.5",
      "contributor": "Laurenz Albe, Álvaro Herrera"
    },
    {
      "title": "Fix failure to schema-qualify some object names in `getObjectDescription",
      "description": "Fix failure to schema-qualify some object names in `getObjectDescription()` and `getObjectIdentity()` output (Kyotaro Horiguchi, Tom Lane)\nNames of collations, conversions, text search objects, publication relations, and extended statistics objects were not schema-qualified when they should be.",
      "sinceVersion": "10.5",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "Fix CREATE AGGREGATE type checking so that parallelism support functions can be attached to variadic aggregates",
      "description": "Fix CREATE AGGREGATE type checking so that parallelism support functions can be attached to variadic aggregates (Alexey Bashtanov)",
      "sinceVersion": "10.5",
      "contributor": "Alexey Bashtanov"
    },
    {
      "title": "Widen COPY FROM's current-line-number counter from 32 to 64 bits",
      "description": "Widen COPY FROM's current-line-number counter from 32 to 64 bits (David Rowley)\nThis avoids two problems with input exceeding 4G lines: `COPY FROM WITH HEADER` would drop a line every 4G lines, not only the first line, and error reports could show a wrong line number.",
      "sinceVersion": "10.5",
      "contributor": "David Rowley"
    },
    {
      "title": "Allow replication slots to be dropped in single-user mode",
      "description": "Allow replication slots to be dropped in single-user mode (Álvaro Herrera)\nThis use-case was accidentally broken in release 10.0.",
      "sinceVersion": "10.5",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix incorrect results from `variance",
      "description": "Fix incorrect results from `variance(int4)()` and related aggregates when run in parallel aggregation mode (David Rowley)",
      "sinceVersion": "10.5",
      "contributor": "David Rowley"
    },
    {
      "title": "Process `TEXT` and `CDATA` nodes correctly in `xmltable",
      "description": "Process `TEXT` and `CDATA` nodes correctly in `xmltable()()` column expressions (Markus Winand)",
      "sinceVersion": "10.5",
      "contributor": "Markus Winand"
    },
    {
      "title": "Cope with possible failure of OpenSSL's `RAND_bytes",
      "description": "Cope with possible failure of OpenSSL's `RAND_bytes()()` function (Dean Rasheed, Michael Paquier)\nUnder rare circumstances, this oversight could result in “could not generate random cancel key” failures that could only be resolved by restarting the postmaster.",
      "sinceVersion": "10.5",
      "contributor": "Dean Rasheed, Michael Paquier"
    },
    {
      "title": "Fix libpq's handling of some cases where `hostaddr` is specified",
      "description": "Fix libpq's handling of some cases where `hostaddr` is specified (Hari Babu, Tom Lane, Robert Haas)\n`PQhost()()` gave misleading or incorrect results in some cases. Now, it uniformly returns the host name if specified, or the host address if only that is specified, or the default host name (typically `/tmp` or `localhost`) if both parameters are omitted.\nAlso, the wrong value might be compared to the server name when verifying an SSL certificate.\nAlso, the wrong value might be compared to the host name field in ~/.pgpass. Now, that field is compared to the host name if specified, or the host address if only that is specified, or `localhost` if both parameters are omitted.\nAlso, an incorrect error message was reported for an unparseable `hostaddr` value.\nAlso, when the `host`, `hostaddr`, or `port` parameters contain comma-separated lists, libpq is now more careful to treat empty elements of a list as selecting the default behavior.",
      "sinceVersion": "10.5",
      "contributor": "Hari Babu, Tom Lane, Robert Haas"
    },
    {
      "title": "Add a string freeing function to ecpg's pgtypes library, so that cross-module memory management problems can be avoided on Windows",
      "description": "Add a string freeing function to ecpg's pgtypes library, so that cross-module memory management problems can be avoided on Windows (Takayuki Tsunakawa)\nOn Windows, crashes can ensue if the `free()` call for a given chunk of memory is not made from the same DLL that `malloc()`'ed the memory. The pgtypes library sometimes returns strings that it expects the caller to free, making it impossible to follow this rule. Add a `PGTYPESchar_free()()` function that just wraps `free()`, allowing applications to follow this rule.",
      "sinceVersion": "10.5",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "Fix ecpg's support for long long variables on Windows, as well as other platforms that declare `strtoll",
      "description": "Fix ecpg's support for long long variables on Windows, as well as other platforms that declare `strtoll()`/`strtoull()` nonstandardly or not at all (Dang Minh Huong, Tom Lane)",
      "sinceVersion": "10.5",
      "contributor": "Dang Minh Huong, Tom Lane"
    },
    {
      "title": "Fix misidentification of SQL statement type in PL/pgSQL, when a rule change causes a change in the semantics of a statement intra-session",
      "description": "Fix misidentification of SQL statement type in PL/pgSQL, when a rule change causes a change in the semantics of a statement intra-session (Tom Lane)\nThis error led to assertion failures, or in rare cases, failure to enforce the `INTO STRICT` option as expected.",
      "sinceVersion": "10.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix password prompting in client programs so that echo is properly disabled on Windows when `stdin` is not the terminal",
      "description": "Fix password prompting in client programs so that echo is properly disabled on Windows when `stdin` is not the terminal (Matthew Stickney)",
      "sinceVersion": "10.5",
      "contributor": "Matthew Stickney"
    },
    {
      "title": "Further fix mis-quoting of values for list-valued GUC variables in dumps",
      "description": "Further fix mis-quoting of values for list-valued GUC variables in dumps (Tom Lane)\nThe previous fix for quoting of search_path and other list-valued variables in pg_dump output turned out to misbehave for empty-string list elements, and it risked truncation of long file paths.",
      "sinceVersion": "10.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump's failure to dump `REPLICA IDENTITY` properties for constraint indexes",
      "description": "Fix pg_dump's failure to dump `REPLICA IDENTITY` properties for constraint indexes (Tom Lane)\nManually created unique indexes were properly marked, but not those created by declaring `UNIQUE` or `PRIMARY KEY` constraints.",
      "sinceVersion": "10.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make pg_upgrade check that the old server was shut down cleanly",
      "description": "Make pg_upgrade check that the old server was shut down cleanly (Bruce Momjian)\nThe previous check could be fooled by an immediate-mode shutdown.",
      "sinceVersion": "10.5",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Fix contrib/hstore_plperl to look through Perl scalar references, and to not crash if it doesn't find a hash reference where it expects one",
      "description": "Fix contrib/hstore_plperl to look through Perl scalar references, and to not crash if it doesn't find a hash reference where it expects one (Tom Lane)",
      "sinceVersion": "10.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in contrib/ltree's `lca",
      "description": "Fix crash in contrib/ltree's `lca()()` function when the input array is empty (Pierre Ducroquet)",
      "sinceVersion": "10.5",
      "contributor": "Pierre Ducroquet"
    },
    {
      "title": "Fix various error-handling code paths in which an incorrect error code might be reported",
      "description": "Fix various error-handling code paths in which an incorrect error code might be reported (Michael Paquier, Tom Lane, Magnus Hagander)",
      "sinceVersion": "10.5",
      "contributor": "Michael Paquier, Tom Lane, Magnus Hagander"
    },
    {
      "title": "Rearrange makefiles to ensure that programs link to freshly-built libraries",
      "description": "Rearrange makefiles to ensure that programs link to freshly-built libraries (such as libpq.so) rather than ones that might exist in the system library directories (Tom Lane)\nThis avoids problems when building on platforms that supply old copies of PostgreSQL libraries.",
      "sinceVersion": "10.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2018e for DST law changes in North Korea, plus historical corrections for Czechoslovakia.\nThis update includes a redefinition of “daylight savings” in Ireland, as well as for some past years in Namibia and Czechoslovakia. In those jurisdictions, legally standard time is observed in summer, and daylight savings time in winter, so that the daylight savings offset is one hour behind standard time not one hour ahead. This does not affect either the actual UTC offset or the timezone abbreviations in use; the only known effect is that the is_dst column in the pg_timezone_names view will now be true in winter and false in summer in these cases.",
      "sinceVersion": "10.5",
      "contributor": null
    },
    {
      "title": "Fix corner-case failures in `has_`foo",
      "description": "Fix corner-case failures in `has_`foo()`_privilege()` family of functions (Tom Lane)\nReturn NULL rather than throwing an error when an invalid object OID is provided. Some of these functions got that right already, but not all. `has_column_privilege()()` was additionally capable of crashing on some platforms.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix `pg_get_partition_constraintdef",
      "description": "Fix `pg_get_partition_constraintdef()()` to return NULL rather than fail when passed an invalid relation OID (Tom Lane)",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid O",
      "description": "Avoid O(N^2) slowdown in regular expression match/split functions on long strings (Andrew Gierth)",
      "sinceVersion": "10.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix parsing of standard multi-character operators that are immediately followed by a comment or `+` or `-`",
      "description": "Fix parsing of standard multi-character operators that are immediately followed by a comment or `+` or `-` (Andrew Gierth)\nThis oversight could lead to parse errors, or to incorrect assignment of precedence.",
      "sinceVersion": "10.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Avoid O",
      "description": "Avoid O(N^3) slowdown in lexer for long strings of `+` or `-` characters (Andrew Gierth)",
      "sinceVersion": "10.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix mis-execution of SubPlans when the outer query is being scanned backwards",
      "description": "Fix mis-execution of SubPlans when the outer query is being scanned backwards (Andrew Gierth)",
      "sinceVersion": "10.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix failure of UPDATE/DELETE ... WHERE CURRENT OF ... after rewinding the referenced cursor",
      "description": "Fix failure of UPDATE/DELETE ... WHERE CURRENT OF ... after rewinding the referenced cursor (Tom Lane)\nA cursor that scans multiple relations (particularly an inheritance tree) could produce wrong behavior if rewound to an earlier relation.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix `EvalPlanQual",
      "description": "Fix `EvalPlanQual()` to handle conditionally-executed InitPlans properly (Andrew Gierth, Tom Lane)\nThis resulted in hard-to-reproduce crashes or wrong answers in concurrent updates, if they contained code such as an uncorrelated sub-`SELECT` inside a `CASE` construct.",
      "sinceVersion": "10.6",
      "contributor": "Andrew Gierth, Tom Lane"
    },
    {
      "title": "Prevent creation of a partition in a trigger attached to its parent table",
      "description": "Prevent creation of a partition in a trigger attached to its parent table (Amit Langote)\nIdeally we'd allow that, but for the moment it has to be blocked to avoid crashes.",
      "sinceVersion": "10.6",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix problems with applying `ON COMMIT DELETE ROWS` to a partitioned temporary table",
      "description": "Fix problems with applying `ON COMMIT DELETE ROWS` to a partitioned temporary table (Amit Langote)",
      "sinceVersion": "10.6",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix character-class checks to not fail on Windows for Unicode characters above U+FFFF",
      "description": "Fix character-class checks to not fail on Windows for Unicode characters above U+FFFF (Tom Lane, Kenji Uno)\nThis bug affected full-text-search operations, as well as contrib/ltree and contrib/pg_trgm.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane, Kenji Uno"
    },
    {
      "title": "Disallow pushing sub-`SELECT`s containing window functions, `LIMIT`, or `OFFSET` to parallel workers",
      "description": "Disallow pushing sub-`SELECT`s containing window functions, `LIMIT`, or `OFFSET` to parallel workers (Amit Kapila)\nSuch cases could result in inconsistent behavior due to different workers getting different answers, as a result of indeterminacy due to row-ordering variations.",
      "sinceVersion": "10.6",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Ensure that sequences owned by a foreign table are processed by `ALTER OWNER` on the table",
      "description": "Ensure that sequences owned by a foreign table are processed by `ALTER OWNER` on the table (Peter Eisentraut)\nThe ownership change should propagate to such sequences as well, but this was missed for foreign tables.",
      "sinceVersion": "10.6",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Ensure that the server will process already-received `NOTIFY` and `SIGTERM` interrupts before waiting for client input",
      "description": "Ensure that the server will process already-received `NOTIFY` and `SIGTERM` interrupts before waiting for client input (Jeff Janes, Tom Lane)",
      "sinceVersion": "10.6",
      "contributor": "Jeff Janes, Tom Lane"
    },
    {
      "title": "Fix over-allocation of space for `array_out",
      "description": "Fix over-allocation of space for `array_out()()`'s result string (Keiichi Hirobe)",
      "sinceVersion": "10.6",
      "contributor": "Keiichi Hirobe"
    },
    {
      "title": "Avoid query-lifetime memory leak in `XMLTABLE`",
      "description": "Avoid query-lifetime memory leak in `XMLTABLE` (Andrew Gierth)",
      "sinceVersion": "10.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix memory leak in repeated SP-GiST index scans",
      "description": "Fix memory leak in repeated SP-GiST index scans (Tom Lane)\nThis is only known to amount to anything significant in cases where an exclusion constraint using SP-GiST receives many new index entries in a single command.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that `ApplyLogicalMappingFile",
      "description": "Ensure that `ApplyLogicalMappingFile()()` closes the mapping file when done with it (Tomas Vondra)\nPreviously, the file descriptor was leaked, eventually resulting in failures during logical decoding.",
      "sinceVersion": "10.6",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix logical decoding to handle cases where a mapped catalog table is repeatedly rewritten, e.g., by `VACUUM FULL`",
      "description": "Fix logical decoding to handle cases where a mapped catalog table is repeatedly rewritten, e.g., by `VACUUM FULL` (Andres Freund)",
      "sinceVersion": "10.6",
      "contributor": "Andres Freund"
    },
    {
      "title": "Prevent starting the server with wal_level set to too low a value to support an existing replication slot",
      "description": "Prevent starting the server with wal_level set to too low a value to support an existing replication slot (Andres Freund)",
      "sinceVersion": "10.6",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid crash if a utility command causes infinite recursion",
      "description": "Avoid crash if a utility command causes infinite recursion (Tom Lane)",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "When initializing a hot standby, cope with duplicate XIDs caused by two-phase transactions on the master",
      "description": "When initializing a hot standby, cope with duplicate XIDs caused by two-phase transactions on the master (Michael Paquier, Konstantin Knizhnik)",
      "sinceVersion": "10.6",
      "contributor": "Michael Paquier, Konstantin Knizhnik"
    },
    {
      "title": "Fix event triggers to handle nested ALTER TABLE commands",
      "description": "Fix event triggers to handle nested ALTER TABLE commands (Michael Paquier, Álvaro Herrera)",
      "sinceVersion": "10.6",
      "contributor": "Michael Paquier, Álvaro Herrera"
    },
    {
      "title": "Propagate parent process's transaction and statement start timestamps to parallel workers",
      "description": "Propagate parent process's transaction and statement start timestamps to parallel workers (Konstantin Knizhnik)\nThis prevents misbehavior of functions such as `transaction_timestamp()()` when executed in a worker.",
      "sinceVersion": "10.6",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Fix transfer of expanded datums to parallel workers so that alignment is preserved, preventing crashes on alignment-picky platforms",
      "description": "Fix transfer of expanded datums to parallel workers so that alignment is preserved, preventing crashes on alignment-picky platforms (Tom Lane, Amit Kapila)",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane, Amit Kapila"
    },
    {
      "title": "Fix WAL file recycling logic to work correctly on standby servers",
      "description": "Fix WAL file recycling logic to work correctly on standby servers (Michael Paquier)\nDepending on the setting of archive_mode, a standby might fail to remove some WAL files that could be removed.",
      "sinceVersion": "10.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix handling of commit-timestamp tracking during recovery",
      "description": "Fix handling of commit-timestamp tracking during recovery (Masahiko Sawada, Michael Paquier)\nIf commit timestamp tracking has been turned on or off, recovery might fail due to trying to fetch the commit timestamp for a transaction that did not record it.",
      "sinceVersion": "10.6",
      "contributor": "Masahiko Sawada, Michael Paquier"
    },
    {
      "title": "Randomize the `random",
      "description": "Randomize the `random()()` seed in bootstrap and standalone backends, and in initdb (Noah Misch)\nThe main practical effect of this change is that it avoids a scenario where initdb might mistakenly conclude that POSIX shared memory is not available, due to name collisions caused by always using the same random seed.",
      "sinceVersion": "10.6",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix possible shared-memory corruption in DSA logic",
      "description": "Fix possible shared-memory corruption in DSA logic (Thomas Munro)",
      "sinceVersion": "10.6",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow DSM allocation to be interrupted",
      "description": "Allow DSM allocation to be interrupted (Chris Travers)",
      "sinceVersion": "10.6",
      "contributor": "Chris Travers"
    },
    {
      "title": "Avoid failure in a parallel worker when loading an extension that tries to access system caches within its init function",
      "description": "Avoid failure in a parallel worker when loading an extension that tries to access system caches within its init function (Thomas Munro)\nWe don't consider that to be good extension coding practice, but it mostly worked before parallel query, so continue to support it for now.",
      "sinceVersion": "10.6",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Properly handle turning full_page_writes on dynamically",
      "description": "Properly handle turning full_page_writes on dynamically (Kyotaro Horiguchi)",
      "sinceVersion": "10.6",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix possible crash due to double `free",
      "description": "Fix possible crash due to double `free()()` during SP-GiST rescan (Andrew Gierth)",
      "sinceVersion": "10.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Prevent mis-linking of src/port and src/common functions on ELF-based BSD platforms, as well as HP-UX and Solaris",
      "description": "Prevent mis-linking of src/port and src/common functions on ELF-based BSD platforms, as well as HP-UX and Solaris (Andrew Gierth, Tom Lane)\nShared libraries loaded into a backend's address space could use the backend's versions of these functions, rather than their own copies as intended. Since the behavior of the two sets of functions isn't quite the same, this led to failures.",
      "sinceVersion": "10.6",
      "contributor": "Andrew Gierth, Tom Lane"
    },
    {
      "title": "Avoid possible buffer overrun when replaying GIN page recompression from WAL",
      "description": "Avoid possible buffer overrun when replaying GIN page recompression from WAL (Alexander Korotkov, Sivasubramanian Ramasubramanian)",
      "sinceVersion": "10.6",
      "contributor": "Alexander Korotkov, Sivasubramanian Ramasubramanian"
    },
    {
      "title": "Avoid overrun of a hash index's metapage when `BLCKSZ` is smaller than default",
      "description": "Avoid overrun of a hash index's metapage when `BLCKSZ` is smaller than default (Dilip Kumar)",
      "sinceVersion": "10.6",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Fix missed page checksum updates in hash indexes",
      "description": "Fix missed page checksum updates in hash indexes (Amit Kapila)",
      "sinceVersion": "10.6",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Fix missed fsync of a replication slot's directory",
      "description": "Fix missed fsync of a replication slot's directory (Konstantin Knizhnik, Michael Paquier)",
      "sinceVersion": "10.6",
      "contributor": "Konstantin Knizhnik, Michael Paquier"
    },
    {
      "title": "Fix unexpected timeouts when using wal_sender_timeout on a slow server",
      "description": "Fix unexpected timeouts when using wal_sender_timeout on a slow server (Noah Misch)",
      "sinceVersion": "10.6",
      "contributor": "Noah Misch"
    },
    {
      "title": "Ensure that hot standby processes use the correct WAL consistency point",
      "description": "Ensure that hot standby processes use the correct WAL consistency point (Alexander Kukushkin, Michael Paquier)\nThis prevents possible misbehavior just after a standby server has reached a consistent database state during WAL replay.",
      "sinceVersion": "10.6",
      "contributor": "Alexander Kukushkin, Michael Paquier"
    },
    {
      "title": "Ensure background workers are stopped properly when the postmaster receives a fast-shutdown request before completing database startup",
      "description": "Ensure background workers are stopped properly when the postmaster receives a fast-shutdown request before completing database startup (Alexander Kukushkin)",
      "sinceVersion": "10.6",
      "contributor": "Alexander Kukushkin"
    },
    {
      "title": "Avoid premature release of parallel-query resources when query end or tuple count limit is reached",
      "description": "Avoid premature release of parallel-query resources when query end or tuple count limit is reached (Amit Kapila)\nIt's only okay to shut down the executor at this point if the caller cannot demand backwards scan afterwards.",
      "sinceVersion": "10.6",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Don't run atexit callbacks when servicing `SIGQUIT`",
      "description": "Don't run atexit callbacks when servicing `SIGQUIT` (Heikki Linnakangas)",
      "sinceVersion": "10.6",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Don't record foreign-server user mappings as members of extensions",
      "description": "Don't record foreign-server user mappings as members of extensions (Tom Lane)\nIf CREATE USER MAPPING is executed in an extension script, an extension dependency was created for the user mapping, which is unexpected. Roles can't be extension members, so user mappings shouldn't be either.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make syslogger more robust against failures in opening CSV log files",
      "description": "Make syslogger more robust against failures in opening CSV log files (Tom Lane)",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "When libpq is given multiple target host names, do the DNS lookups one at a time, not all at once",
      "description": "When libpq is given multiple target host names, do the DNS lookups one at a time, not all at once (Tom Lane)\nThis prevents unnecessary failures or slow connections when a connection is successfully made to one of the earlier servers in the list.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix libpq's handling of connection timeouts so that they are properly applied per host name or IP address",
      "description": "Fix libpq's handling of connection timeouts so that they are properly applied per host name or IP address (Tom Lane)\nPreviously, some code paths failed to restart the timer when switching to a new target host, possibly resulting in premature timeout.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix psql, as well as documentation examples, to call `PQconsumeInput",
      "description": "Fix psql, as well as documentation examples, to call `PQconsumeInput()()` before each `PQnotifies()()` call (Tom Lane)\nThis fixes cases in which psql would not report receipt of a `NOTIFY` message until after the next command.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump's --no-publications option to also ignore publication tables",
      "description": "Fix pg_dump's --no-publications option to also ignore publication tables (Gilles Darold)",
      "sinceVersion": "10.6",
      "contributor": "Gilles Darold"
    },
    {
      "title": "In pg_dump, exclude identity sequences when their parent table is excluded from the dump",
      "description": "In pg_dump, exclude identity sequences when their parent table is excluded from the dump (David Rowley)",
      "sinceVersion": "10.6",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix possible inconsistency in pg_dump's sorting of dissimilar object names",
      "description": "Fix possible inconsistency in pg_dump's sorting of dissimilar object names (Jacob Champion)",
      "sinceVersion": "10.6",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Ensure that pg_restore will schema-qualify the table name when emitting `DISABLE`/`ENABLE TRIGGER` commands",
      "description": "Ensure that pg_restore will schema-qualify the table name when emitting `DISABLE`/`ENABLE TRIGGER` commands (Tom Lane)\nThis avoids failures due to the new policy of running restores with restrictive search path.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_upgrade to handle event triggers in extensions correctly",
      "description": "Fix pg_upgrade to handle event triggers in extensions correctly (Haribabu Kommi)\npg_upgrade failed to preserve an event trigger's extension-membership status.",
      "sinceVersion": "10.6",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Fix pg_upgrade's cluster state check to work correctly on a standby server",
      "description": "Fix pg_upgrade's cluster state check to work correctly on a standby server (Bruce Momjian)",
      "sinceVersion": "10.6",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Enforce type cube's dimension limit in all contrib/cube functions",
      "description": "Enforce type cube's dimension limit in all contrib/cube functions (Andrey Borodin)\nPreviously, some cube-related functions could construct values that would be rejected by `cube_in()()`, leading to dump/reload failures.",
      "sinceVersion": "10.6",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "In contrib/pg_stat_statements, disallow the `pg_read_all_stats` role from executing `pg_stat_statements_reset",
      "description": "In contrib/pg_stat_statements, disallow the `pg_read_all_stats` role from executing `pg_stat_statements_reset()()` (Haribabu Kommi)\n`pg_read_all_stats` is only meant to grant permission to read statistics, not to change them, so this grant was incorrect.\nTo cause this change to take effect, run `ALTER EXTENSION pg_stat_statements UPDATE` in each database where pg_stat_statements has been installed.",
      "sinceVersion": "10.6",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "In contrib/postgres_fdw, don't try to ship a variable-free `ORDER BY` clause to the remote server",
      "description": "In contrib/postgres_fdw, don't try to ship a variable-free `ORDER BY` clause to the remote server (Andrew Gierth)",
      "sinceVersion": "10.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix contrib/unaccent's `unaccent",
      "description": "Fix contrib/unaccent's `unaccent()()` function to use the `unaccent` text search dictionary that is in the same schema as the function (Tom Lane)\nPreviously it tried to look up the dictionary using the search path, which could fail if the search path has a restrictive value.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix build problems on macOS 10.14",
      "description": "Fix build problems on macOS 10.14 (Mojave) (Tom Lane)\nAdjust configure to add an -isysroot switch to CPPFLAGS; without this, PL/Perl and PL/Tcl fail to configure or build on macOS 10.14. The specific sysroot used can be overridden at configure time or build time by setting the PG_SYSROOT variable in the arguments of configure or make.\nIt is now recommended that Perl-related extensions write `$(perl_includespec)` rather than `-I$(perl_archlibexp)/CORE` in their compiler flags. The latter continues to work on most platforms, but not recent macOS.\nAlso, it should no longer be necessary to specify --with-tclconfig manually to get PL/Tcl to build on recent macOS releases.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix MSVC build and regression-test scripts to work on recent Perl versions",
      "description": "Fix MSVC build and regression-test scripts to work on recent Perl versions (Andrew Dunstan)\nPerl no longer includes the current directory in its search path by default; work around that.",
      "sinceVersion": "10.6",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "On Windows, allow the regression tests to be run by an Administrator account",
      "description": "On Windows, allow the regression tests to be run by an Administrator account (Andrew Dunstan)\nTo do this safely, pg_regress now gives up any such privileges at startup.",
      "sinceVersion": "10.6",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Allow btree comparison functions to return `INT_MIN`",
      "description": "Allow btree comparison functions to return `INT_MIN` (Tom Lane)\nUp to now, we've forbidden datatype-specific comparison functions from returning `INT_MIN`, which allows callers to invert the sort order just by negating the comparison result. However, this was never safe for comparison functions that directly return the result of `memcmp()()`, `strcmp()()`, etc, as POSIX doesn't place any such restriction on those functions. At least some recent versions of `memcmp()()` can return `INT_MIN`, causing incorrect sort ordering. Hence, we've removed this restriction. Callers must now use the `INVERT_COMPARE_RESULT()` macro if they wish to invert the sort order.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix recursion hazard in shared-invalidation message processing",
      "description": "Fix recursion hazard in shared-invalidation message processing (Tom Lane)\nThis error could, for example, result in failure to access a system catalog or index that had just been processed by VACUUM FULL.\nThis change adds a new result code for `LockAcquire()`, which might possibly affect external callers of that function, though only very unusual usage patterns would have an issue with it. The API of `LockAcquireExtended()` is also changed.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Save and restore SPI's global variables during `SPI_connect",
      "description": "Save and restore SPI's global variables during `SPI_connect()()` and `SPI_finish()()` (Chapman Flack, Tom Lane)\nThis prevents possible interference when one SPI-using function calls another.",
      "sinceVersion": "10.6",
      "contributor": "Chapman Flack, Tom Lane"
    },
    {
      "title": "Make src/port/snprintf.c follow the C99 standard's definition of `snprintf",
      "description": "Make src/port/snprintf.c follow the C99 standard's definition of `snprintf()()`'s result value (Tom Lane)\nOn platforms where this code is used (mostly Windows), its pre-C99 behavior could lead to failure to detect buffer overrun, if the calling code assumed C99 semantics.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "When building on i386 with the clang compiler, require -msse2 to be used",
      "description": "When building on i386 with the clang compiler, require -msse2 to be used (Andres Freund)\nThis avoids problems with missed floating point overflow checks.",
      "sinceVersion": "10.6",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix configure's detection of the result type of `strerror_r",
      "description": "Fix configure's detection of the result type of `strerror_r()()` (Tom Lane)\nThe previous coding got the wrong answer when building with icc on Linux (and perhaps in other cases), leading to libpq not returning useful error messages for system-reported errors.",
      "sinceVersion": "10.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2018g for DST law changes in Chile, Fiji, Morocco, and Russia",
      "description": "Update time zone data files to tzdata release 2018g for DST law changes in Chile, Fiji, Morocco, and Russia (Volgograd), plus historical corrections for China, Hawaii, Japan, Macau, and North Korea.",
      "sinceVersion": "10.6",
      "contributor": null
    },
    {
      "title": "By default, panic instead of retrying after `fsync",
      "description": "By default, panic instead of retrying after `fsync()()` failure, to avoid possible data corruption (Craig Ringer, Thomas Munro)\nSome popular operating systems discard kernel data buffers when unable to write them out, reporting this as `fsync()()` failure. If we reissue the `fsync()()` request it will succeed, but in fact the data has been lost, so continuing risks database corruption. By raising a panic condition instead, we can replay from WAL, which may contain the only remaining copy of the data in such a situation. While this is surely ugly and inefficient, there are few alternatives, and fortunately the case happens very rarely.\nA new server parameter data_sync_retry has been added to control this; if you are certain that your kernel does not discard dirty data buffers in such scenarios, you can set data_sync_retry to `on` to restore the old behavior.",
      "sinceVersion": "10.7",
      "contributor": "Craig Ringer, Thomas Munro"
    },
    {
      "title": "Include each major release branch's release notes in the documentation for only that branch, rather than that branch and all later ones",
      "description": "Include each major release branch's release notes in the documentation for only that branch, rather than that branch and all later ones (Tom Lane)\nThe duplication induced by the previous policy was getting out of hand. Our plan is to provide a full archive of release notes on the project's web site, but not duplicate it within each release.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that `NOT NULL` constraints of a partitioned table are honored within its partitions",
      "description": "Ensure that `NOT NULL` constraints of a partitioned table are honored within its partitions (Álvaro Herrera, Amit Langote)",
      "sinceVersion": "10.7",
      "contributor": "Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Use a safe table lock level when detaching a partition",
      "description": "Use a safe table lock level when detaching a partition (Álvaro Herrera)\nThe previous locking level was too weak and might allow concurrent DDL on the table, with bad results.",
      "sinceVersion": "10.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix problems with applying `ON COMMIT DROP` and `ON COMMIT DELETE ROWS` to partitioned tables and tables with inheritance children",
      "description": "Fix problems with applying `ON COMMIT DROP` and `ON COMMIT DELETE ROWS` to partitioned tables and tables with inheritance children (Michael Paquier)",
      "sinceVersion": "10.7",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Disallow COPY FREEZE on partitioned tables",
      "description": "Disallow COPY FREEZE on partitioned tables (David Rowley)\nThis should eventually be made to work, but it may require a patch that's too complicated to risk back-patching.",
      "sinceVersion": "10.7",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid possible deadlock when acquiring multiple buffer locks",
      "description": "Avoid possible deadlock when acquiring multiple buffer locks (Nishant Fnu)",
      "sinceVersion": "10.7",
      "contributor": "Nishant Fnu"
    },
    {
      "title": "Avoid deadlock between hot-standby queries and replay of GIN index page deletion",
      "description": "Avoid deadlock between hot-standby queries and replay of GIN index page deletion (Alexander Korotkov)",
      "sinceVersion": "10.7",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix possible crashes in logical replication when index expressions or predicates are in use",
      "description": "Fix possible crashes in logical replication when index expressions or predicates are in use (Peter Eisentraut)",
      "sinceVersion": "10.7",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid useless and expensive logical decoding of TOAST data during a table rewrite",
      "description": "Avoid useless and expensive logical decoding of TOAST data during a table rewrite (Tomas Vondra)",
      "sinceVersion": "10.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix logic for stopping a subset of WAL senders when synchronous replication is enabled",
      "description": "Fix logic for stopping a subset of WAL senders when synchronous replication is enabled (Paul Guo, Michael Paquier)",
      "sinceVersion": "10.7",
      "contributor": "Paul Guo, Michael Paquier"
    },
    {
      "title": "Avoid possibly writing an incorrect replica identity field in a tuple deletion WAL record",
      "description": "Avoid possibly writing an incorrect replica identity field in a tuple deletion WAL record (Stas Kelvich)",
      "sinceVersion": "10.7",
      "contributor": "Stas Kelvich"
    },
    {
      "title": "Make the archiver prioritize WAL history files over WAL data files while choosing which file to archive next",
      "description": "Make the archiver prioritize WAL history files over WAL data files while choosing which file to archive next (David Steele)",
      "sinceVersion": "10.7",
      "contributor": "David Steele"
    },
    {
      "title": "Fix possible crash in UPDATE with a multiple `SET` clause using a sub-`SELECT` as source",
      "description": "Fix possible crash in UPDATE with a multiple `SET` clause using a sub-`SELECT` as source (Tom Lane)",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash if libxml2 returns a null error message",
      "description": "Avoid crash if libxml2 returns a null error message (Sergio Conde Gómez)",
      "sinceVersion": "10.7",
      "contributor": "Sergio Conde Gómez"
    },
    {
      "title": "Fix spurious grouping-related parser errors caused by inconsistent handling of collation assignment",
      "description": "Fix spurious grouping-related parser errors caused by inconsistent handling of collation assignment (Andrew Gierth)\nIn some cases, expressions that should be considered to match were not seen as matching, if they included operations on collatable data types.",
      "sinceVersion": "10.7",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Check whether the comparison function underlying `LEAST",
      "description": "Check whether the comparison function underlying `LEAST()()` or `GREATEST()()` is leakproof, rather than just assuming it is (Tom Lane)\nActual information leaks from btree comparison functions are typically hard to provoke, but in principle they could happen.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect planning of queries involving nested loops both above and below a Gather plan node",
      "description": "Fix incorrect planning of queries involving nested loops both above and below a Gather plan node (Tom Lane)\nIf both levels of nestloop needed to pass the same variable into their right-hand sides, an incorrect plan would be generated.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect planning of queries in which a lateral reference must be evaluated at a foreign table scan",
      "description": "Fix incorrect planning of queries in which a lateral reference must be evaluated at a foreign table scan (Tom Lane)",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner-case underestimation of the cost of a merge join",
      "description": "Fix corner-case underestimation of the cost of a merge join (Tom Lane)\nThe planner could prefer a merge join when the outer key range is much smaller than the inner key range, even if there are so many duplicate keys on the inner side that this is a poor choice.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid O",
      "description": "Avoid O(N^2) planning time growth when a query contains many thousand indexable clauses (Tom Lane)",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve ANALYZE's handling of concurrently-updated rows",
      "description": "Improve ANALYZE's handling of concurrently-updated rows (Jeff Janes, Tom Lane)\nPreviously, rows deleted by an in-progress transaction were omitted from ANALYZE's sample, but this has been found to lead to more inconsistency than including them would do. In effect, the sample now corresponds to an MVCC snapshot as of ANALYZE's start time.",
      "sinceVersion": "10.7",
      "contributor": "Jeff Janes, Tom Lane"
    },
    {
      "title": "Make TRUNCATE ignore inheritance child tables that are temporary tables of other sessions",
      "description": "Make TRUNCATE ignore inheritance child tables that are temporary tables of other sessions (Amit Langote, Michael Paquier)\nThis brings TRUNCATE into line with the behavior of other commands. Previously, such cases usually ended in failure.",
      "sinceVersion": "10.7",
      "contributor": "Amit Langote, Michael Paquier"
    },
    {
      "title": "Fix TRUNCATE to update the statistics counters for the right table",
      "description": "Fix TRUNCATE to update the statistics counters for the right table (Tom Lane)\nIf the truncated table had a TOAST table, that table's counters were reset instead.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Process ALTER TABLE ONLY ADD COLUMN IF NOT EXISTS correctly",
      "description": "Process ALTER TABLE ONLY ADD COLUMN IF NOT EXISTS correctly (Greg Stark)",
      "sinceVersion": "10.7",
      "contributor": "Greg Stark"
    },
    {
      "title": "Allow UNLISTEN in hot-standby mode",
      "description": "Allow UNLISTEN in hot-standby mode (Shay Rojansky)\nThis is necessarily a no-op, because LISTEN isn't allowed in hot-standby mode; but allowing the dummy operation simplifies session-state-reset logic in clients.",
      "sinceVersion": "10.7",
      "contributor": "Shay Rojansky"
    },
    {
      "title": "Fix missing role dependencies in some schema and data type permissions lists",
      "description": "Fix missing role dependencies in some schema and data type permissions lists (Tom Lane)\nIn some cases it was possible to drop a role to which permissions had been granted. This caused no immediate problem, but a subsequent dump/reload or upgrade would fail, with symptoms involving attempts to grant privileges to all-numeric role names.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent use of a session's temporary schema within a two-phase transaction",
      "description": "Prevent use of a session's temporary schema within a two-phase transaction (Michael Paquier)\nAccessing a temporary table within such a transaction has been forbidden for a long time, but it was still possible to cause problems with other operations on temporary objects.",
      "sinceVersion": "10.7",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure relation caches are updated properly after adding or removing foreign key constraints",
      "description": "Ensure relation caches are updated properly after adding or removing foreign key constraints (Álvaro Herrera)\nThis oversight could result in existing sessions failing to enforce a newly-created constraint, or continuing to enforce a dropped one.",
      "sinceVersion": "10.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure relation caches are updated properly after renaming constraints",
      "description": "Ensure relation caches are updated properly after renaming constraints (Amit Langote)",
      "sinceVersion": "10.7",
      "contributor": "Amit Langote"
    },
    {
      "title": "Make autovacuum more aggressive about removing leftover temporary tables, and also remove leftover temporary tables during DISCARD TEMP",
      "description": "Make autovacuum more aggressive about removing leftover temporary tables, and also remove leftover temporary tables during DISCARD TEMP (Álvaro Herrera)\nThis helps ensure that remnants from a crashed session are cleaned up more promptly.",
      "sinceVersion": "10.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix replay of GiST index micro-vacuum operations so that concurrent hot-standby queries do not see inconsistent state",
      "description": "Fix replay of GiST index micro-vacuum operations so that concurrent hot-standby queries do not see inconsistent state (Alexander Korotkov)",
      "sinceVersion": "10.7",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Prevent empty GIN index pages from being reclaimed too quickly, causing failures of concurrent searches",
      "description": "Prevent empty GIN index pages from being reclaimed too quickly, causing failures of concurrent searches (Andrey Borodin, Alexander Korotkov)",
      "sinceVersion": "10.7",
      "contributor": "Andrey Borodin, Alexander Korotkov"
    },
    {
      "title": "Fix edge-case failures in float-to-integer coercions",
      "description": "Fix edge-case failures in float-to-integer coercions (Andrew Gierth, Tom Lane)\nValues very slightly above the maximum valid integer value might not be rejected, and then would overflow, producing the minimum valid integer instead. Also, values that should round to the minimum or maximum integer value might be incorrectly rejected.",
      "sinceVersion": "10.7",
      "contributor": "Andrew Gierth, Tom Lane"
    },
    {
      "title": "When making a PAM authentication request, don't set the PAM_RHOST variable if the connection is via a Unix socket",
      "description": "When making a PAM authentication request, don't set the PAM_RHOST variable if the connection is via a Unix socket (Thomas Munro)\nPreviously that variable would be set to `[local]`, which is at best unhelpful, since it's supposed to be a host name.",
      "sinceVersion": "10.7",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Disallow setting client_min_messages higher than `ERROR`",
      "description": "Disallow setting client_min_messages higher than `ERROR` (Jonah Harris, Tom Lane)\nPreviously, it was possible to set this variable to `FATAL` or `PANIC`, which had the effect of suppressing transmission of ordinary error messages to the client. However, that's contrary to guarantees that are given in the PostgreSQL wire protocol specification, and it caused some clients to become very confused. In released branches, fix this by silently treating such settings as meaning `ERROR` instead. Version 12 and later will reject those alternatives altogether.",
      "sinceVersion": "10.7",
      "contributor": "Jonah Harris, Tom Lane"
    },
    {
      "title": "Fix ecpglib to use `uselocale",
      "description": "Fix ecpglib to use `uselocale()()` or `_configthreadlocale()()` in preference to `setlocale()()` (Michael Meskes, Tom Lane)\nSince `setlocale()()` is not thread-local, and might not even be thread-safe, the previous coding caused problems in multi-threaded ecpg applications.",
      "sinceVersion": "10.7",
      "contributor": "Michael Meskes, Tom Lane"
    },
    {
      "title": "Fix incorrect results for numeric data passed through an ecpg SQLDA",
      "description": "Fix incorrect results for numeric data passed through an ecpg SQLDA (SQL Descriptor Area) (Daisuke Higuchi)\nValues with leading zeroes were not copied correctly.",
      "sinceVersion": "10.7",
      "contributor": "Daisuke Higuchi"
    },
    {
      "title": "Fix psql's \\g `target` meta-command to work with COPY TO STDOUT",
      "description": "Fix psql's \\g `target` meta-command to work with COPY TO STDOUT (Daniel Vérité)\nPreviously, the `target` option was ignored, so that the copy data always went to the current query output target.",
      "sinceVersion": "10.7",
      "contributor": "Daniel Vérité"
    },
    {
      "title": "Make psql's LaTeX output formats render special characters properly",
      "description": "Make psql's LaTeX output formats render special characters properly (Tom Lane)\nBackslash and some other ASCII punctuation characters were not rendered correctly, leading to document syntax errors or wrong characters in the output.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump's handling of materialized views with indirect dependencies on primary keys",
      "description": "Fix pg_dump's handling of materialized views with indirect dependencies on primary keys (Tom Lane)\nThis led to mis-labeling of such views' dump archive entries, causing harmless warnings about “archive items not in correct section order”; less harmlessly, selective-restore options depending on those labels, such as --section, might misbehave.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid null-pointer-dereference crash on some platforms when pg_dump or pg_restore tries to report an error",
      "description": "Avoid null-pointer-dereference crash on some platforms when pg_dump or pg_restore tries to report an error (Tom Lane)",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Properly disregard `SIGPIPE` errors if COPY FROM PROGRAM stops reading the program's output early",
      "description": "Properly disregard `SIGPIPE` errors if COPY FROM PROGRAM stops reading the program's output early (Tom Lane)\nThis case isn't actually reachable directly with COPY, but it can happen when using contrib/file_fdw.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix contrib/hstore to calculate correct hash values for empty hstore values that were created in version 8.4 or before",
      "description": "Fix contrib/hstore to calculate correct hash values for empty hstore values that were created in version 8.4 or before (Andrew Gierth)\nThe previous coding did not give the same result as for an empty hstore value created by a newer version, thus potentially causing wrong results in hash joins or hash aggregation. It is advisable to reindex any hash indexes built on hstore columns, if the table might contain data that was originally stored as far back as 8.4 and was never dumped/reloaded since then.",
      "sinceVersion": "10.7",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Avoid crashes and excessive runtime with large inputs to contrib/intarray's `gist__int_ops` index support",
      "description": "Avoid crashes and excessive runtime with large inputs to contrib/intarray's `gist__int_ops` index support (Andrew Gierth)",
      "sinceVersion": "10.7",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "In configure, look for python3 and then python2 if python isn't found",
      "description": "In configure, look for python3 and then python2 if python isn't found (Peter Eisentraut)\nThis allows PL/Python to be configured without explicitly specifying `PYTHON` on platforms that no longer provide an unversioned python executable.",
      "sinceVersion": "10.7",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Support new Makefile variables `PG_CFLAGS`, `PG_CXXFLAGS`, and `PG_LDFLAGS` in pgxs builds",
      "description": "Support new Makefile variables `PG_CFLAGS`, `PG_CXXFLAGS`, and `PG_LDFLAGS` in pgxs builds (Christoph Berg)\nThis simplifies customization of extension build processes.",
      "sinceVersion": "10.7",
      "contributor": "Christoph Berg"
    },
    {
      "title": "Fix Perl-coded build scripts to not assume “`.`” is in the search path, since recent Perl versions don't include that",
      "description": "Fix Perl-coded build scripts to not assume “`.`” is in the search path, since recent Perl versions don't include that (Andrew Dunstan)",
      "sinceVersion": "10.7",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix server command-line option parsing problems on OpenBSD",
      "description": "Fix server command-line option parsing problems on OpenBSD (Tom Lane)",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Relocate call of `set_rel_pathlist_hook` so that extensions can use it to supply partial paths for parallel queries",
      "description": "Relocate call of `set_rel_pathlist_hook` so that extensions can use it to supply partial paths for parallel queries (KaiGai Kohei)\nThis is not expected to affect existing use-cases.",
      "sinceVersion": "10.7",
      "contributor": "KaiGai Kohei"
    },
    {
      "title": "Rename red-black tree support functions to use `rbt` prefix not `rb` prefix",
      "description": "Rename red-black tree support functions to use `rbt` prefix not `rb` prefix (Tom Lane)\nThis avoids name collisions with Ruby functions, which broke PL/Ruby. It's hoped that there are no other affected extensions.",
      "sinceVersion": "10.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2018i for DST law changes in Kazakhstan, Metlakatla, and Sao Tome and Principe. Kazakhstan's Qyzylorda zone is split in two, creating a new zone Asia/Qostanay, as some areas did not change UTC offset. Historical corrections for Hong Kong and numerous Pacific islands.",
      "sinceVersion": "10.7",
      "contributor": null
    },
    {
      "title": "Avoid catalog corruption when a temporary table with `ON COMMIT DROP` and an identity column is created in a single-statement transaction",
      "description": "Avoid catalog corruption when a temporary table with `ON COMMIT DROP` and an identity column is created in a single-statement transaction (Peter Eisentraut)\nThis hazard was overlooked because the case is not actually useful, since the temporary table would be dropped immediately after creation.",
      "sinceVersion": "10.8",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid crash when an EPQ recheck is performed for a partitioned query result relation",
      "description": "Avoid crash when an EPQ recheck is performed for a partitioned query result relation (Amit Langote)\nThis occurs when using `READ COMMITTED` isolation level and another session has concurrently updated some of the target row(s).",
      "sinceVersion": "10.8",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix behavior for an UPDATE or DELETE on an inheritance tree or partitioned table in which every table can be excluded",
      "description": "Fix behavior for an UPDATE or DELETE on an inheritance tree or partitioned table in which every table can be excluded (Amit Langote, Tom Lane)\nIn such cases, the query did not report the correct set of output columns when a `RETURNING` clause was present, and if there were any statement-level triggers that should be fired, it didn't fire them.",
      "sinceVersion": "10.8",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Avoid throwing incorrect errors for updates of temporary tables and unlogged tables when a `FOR ALL TABLES` publication exists",
      "description": "Avoid throwing incorrect errors for updates of temporary tables and unlogged tables when a `FOR ALL TABLES` publication exists (Peter Eisentraut)\nSuch tables should be ignored for publication purposes, but some parts of the code failed to do so.",
      "sinceVersion": "10.8",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix handling of explicit `DEFAULT` items in an INSERT ... VALUES command with multiple `VALUES` rows, if the target relation is an updatable view",
      "description": "Fix handling of explicit `DEFAULT` items in an INSERT ... VALUES command with multiple `VALUES` rows, if the target relation is an updatable view (Amit Langote, Dean Rasheed)\nWhen the updatable view has no default for the column but its underlying table has one, a single-row INSERT ... VALUES will use the underlying table's default. In the multi-row case, however, NULL was always used. Correct it to act like the single-row case.",
      "sinceVersion": "10.8",
      "contributor": "Amit Langote, Dean Rasheed"
    },
    {
      "title": "Fix CREATE VIEW to allow zero-column views",
      "description": "Fix CREATE VIEW to allow zero-column views (Ashutosh Sharma)\nWe should allow this for consistency with allowing zero-column tables. Since a table can be converted to a view, zero-column views could be created even with the restriction in place, leading to dump/reload failures.",
      "sinceVersion": "10.8",
      "contributor": "Ashutosh Sharma"
    },
    {
      "title": "Add missing support for CREATE TABLE IF NOT EXISTS ... AS EXECUTE ...",
      "description": "Add missing support for CREATE TABLE IF NOT EXISTS ... AS EXECUTE ... (Andreas Karlsson)\nThe combination of `IF NOT EXISTS` and `EXECUTE` should work, but the grammar omitted it.",
      "sinceVersion": "10.8",
      "contributor": "Andreas Karlsson"
    },
    {
      "title": "Accept XML documents as valid values of type xml when xmloption is set to `content`, as required by SQL:2006 and later",
      "description": "Accept XML documents as valid values of type xml when xmloption is set to `content`, as required by SQL:2006 and later (Chapman Flack)\nPreviously PostgreSQL followed the SQL:2003 definition, which doesn't allow this. But that creates a serious problem for dump/restore: there is no setting of xmloption that will accept all valid XML data. Hence, switch to the 2006 definition.\npg_dump is also modified to emit `SET xmloption = content` while restoring data, ensuring that dump/restore works even if the prevailing setting is `document`.",
      "sinceVersion": "10.8",
      "contributor": "Chapman Flack"
    },
    {
      "title": "Improve server's startup-time checks for whether a pre-existing shared memory segment is still in use",
      "description": "Improve server's startup-time checks for whether a pre-existing shared memory segment is still in use (Noah Misch)\nThe postmaster is now more likely to detect that there are still active processes from a previous postmaster incarnation, even if the postmaster.pid file has been removed.",
      "sinceVersion": "10.8",
      "contributor": "Noah Misch"
    },
    {
      "title": "Avoid counting parallel workers' transactions as separate transactions",
      "description": "Avoid counting parallel workers' transactions as separate transactions (Haribabu Kommi)",
      "sinceVersion": "10.8",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Fix incompatibility of GIN-index WAL records",
      "description": "Fix incompatibility of GIN-index WAL records (Alexander Korotkov)\nA fix applied in February's minor releases was not sufficiently careful about backwards compatibility, leading to problems if a standby server of that vintage reads GIN page-deletion WAL records generated by a primary server of a previous minor release.",
      "sinceVersion": "10.8",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix possible crash while executing a SHOW command in a replication connection",
      "description": "Fix possible crash while executing a SHOW command in a replication connection (Michael Paquier)",
      "sinceVersion": "10.8",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid memory leak when a partition's relation cache entry is rebuilt",
      "description": "Avoid memory leak when a partition's relation cache entry is rebuilt (Amit Langote, Tom Lane)",
      "sinceVersion": "10.8",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Tolerate `EINVAL` and `ENOSYS` error results, where appropriate, for `fsync",
      "description": "Tolerate `EINVAL` and `ENOSYS` error results, where appropriate, for `fsync()` and `sync_file_range()` calls (Thomas Munro, James Sewell)\nThe previous change to panic on file synchronization failures turns out to have been excessively paranoid for certain cases where a failure is predictable and essentially means “operation not supported”.",
      "sinceVersion": "10.8",
      "contributor": "Thomas Munro, James Sewell"
    },
    {
      "title": "Report correct relation name in autovacuum's pg_stat_activity display during BRIN summarize operations",
      "description": "Report correct relation name in autovacuum's pg_stat_activity display during BRIN summarize operations (Álvaro Herrera)",
      "sinceVersion": "10.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix “failed to build any `N`-way joins” planner failures with lateral references leading out of `FULL` outer joins",
      "description": "Fix “failed to build any `N`-way joins” planner failures with lateral references leading out of `FULL` outer joins (Tom Lane)",
      "sinceVersion": "10.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misplanning of queries in which a set-returning function is applied to a relation that is provably empty",
      "description": "Fix misplanning of queries in which a set-returning function is applied to a relation that is provably empty (Tom Lane, Julien Rouhaud)\nIn v10, this oversight only led to slightly inefficient plans, but in v11 it could cause “set-valued function called in context that cannot accept a set” errors.",
      "sinceVersion": "10.8",
      "contributor": "Tom Lane, Julien Rouhaud"
    },
    {
      "title": "Check the appropriate user's permissions when enforcing rules about letting a leaky operator see pg_statistic data",
      "description": "Check the appropriate user's permissions when enforcing rules about letting a leaky operator see pg_statistic data (Dean Rasheed)\nWhen an underlying table is being accessed via a view, consider the privileges of the view owner while deciding whether leaky operators may be applied to the table's statistics data, rather than the privileges of the user making the query. This makes the planner's rules about what data is visible match up with the executor's, avoiding unnecessarily-poor plans.",
      "sinceVersion": "10.8",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix corner-case server crashes in dynamic shared memory allocation",
      "description": "Fix corner-case server crashes in dynamic shared memory allocation (Thomas Munro, Robert Haas)",
      "sinceVersion": "10.8",
      "contributor": "Thomas Munro, Robert Haas"
    },
    {
      "title": "Fix race conditions in management of dynamic shared memory",
      "description": "Fix race conditions in management of dynamic shared memory (Thomas Munro)\nThese could lead to “dsa_area could not attach to segment” or “cannot unpin a segment that is not pinned” errors.",
      "sinceVersion": "10.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix race condition in which a hot-standby postmaster could fail to shut down after receiving a smart-shutdown request",
      "description": "Fix race condition in which a hot-standby postmaster could fail to shut down after receiving a smart-shutdown request (Tom Lane)",
      "sinceVersion": "10.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible crash when `pg_identify_object_as_address",
      "description": "Fix possible crash when `pg_identify_object_as_address()()` is given invalid input (Álvaro Herrera)",
      "sinceVersion": "10.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix possible “could not access status of transaction” failures in `txid_status",
      "description": "Fix possible “could not access status of transaction” failures in `txid_status()()` (Thomas Munro)",
      "sinceVersion": "10.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Tighten validation of encoded SCRAM-SHA-256 and MD5 passwords",
      "description": "Tighten validation of encoded SCRAM-SHA-256 and MD5 passwords (Jonathan Katz)\nA password string that had the right initial characters could be mistaken for one that is correctly hashed into SCRAM-SHA-256 or MD5 format. The password would be accepted but would be unusable later.",
      "sinceVersion": "10.8",
      "contributor": "Jonathan Katz"
    },
    {
      "title": "Fix handling of lc_time settings that imply an encoding different from the database's encoding",
      "description": "Fix handling of lc_time settings that imply an encoding different from the database's encoding (Juan José Santamaría Flecha, Tom Lane)\nLocalized month or day names that include non-ASCII characters previously caused unexpected errors or wrong output in such locales.",
      "sinceVersion": "10.8",
      "contributor": "Juan José Santamaría Flecha, Tom Lane"
    },
    {
      "title": "Fix incorrect operator_precedence_warning checks involving unary minus operators",
      "description": "Fix incorrect operator_precedence_warning checks involving unary minus operators (Rikard Falkeborn)",
      "sinceVersion": "10.8",
      "contributor": "Rikard Falkeborn"
    },
    {
      "title": "Disallow `NaN` as a value for floating-point server parameters",
      "description": "Disallow `NaN` as a value for floating-point server parameters (Tom Lane)",
      "sinceVersion": "10.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rearrange REINDEX processing to avoid assertion failures when reindexing individual indexes of pg_class",
      "description": "Rearrange REINDEX processing to avoid assertion failures when reindexing individual indexes of pg_class (Andres Freund, Tom Lane)",
      "sinceVersion": "10.8",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix planner assertion failure for parameterized dummy paths",
      "description": "Fix planner assertion failure for parameterized dummy paths (Tom Lane)",
      "sinceVersion": "10.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Insert correct test function in the result of `SnapBuildInitialSnapshot",
      "description": "Insert correct test function in the result of `SnapBuildInitialSnapshot()()` (Antonin Houska)\nNo core code cares about this, but some extensions do.",
      "sinceVersion": "10.8",
      "contributor": "Antonin Houska"
    },
    {
      "title": "Fix intermittent “could not reattach to shared memory” session startup failures on Windows",
      "description": "Fix intermittent “could not reattach to shared memory” session startup failures on Windows (Noah Misch)\nA previously unrecognized source of these failures is creation of thread stacks for a process's default thread pool. Arrange for such stacks to be allocated in a different memory region.",
      "sinceVersion": "10.8",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix error detection in directory scanning on Windows",
      "description": "Fix error detection in directory scanning on Windows (Konstantin Knizhnik)\nErrors, such as lack of permissions to read the directory, were not detected or reported correctly; instead the code silently acted as though the directory were empty.",
      "sinceVersion": "10.8",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Fix grammar problems in ecpg",
      "description": "Fix grammar problems in ecpg (Tom Lane)\nA missing semicolon led to mistranslation of `SET `variable` = DEFAULT` (but not `SET `variable` TO DEFAULT`) in ecpg programs, producing syntactically invalid output that the server would reject. Additionally, in a DROP TYPE or DROP DOMAIN command that listed multiple type names, only the first type name was actually processed.",
      "sinceVersion": "10.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Sync ecpg's syntax for CREATE TABLE AS with the server's",
      "description": "Sync ecpg's syntax for CREATE TABLE AS with the server's (Daisuke Higuchi)",
      "sinceVersion": "10.8",
      "contributor": "Daisuke Higuchi"
    },
    {
      "title": "Fix possible buffer overruns in ecpg's processing of include filenames",
      "description": "Fix possible buffer overruns in ecpg's processing of include filenames (Liu Huailing, Fei Wu)",
      "sinceVersion": "10.8",
      "contributor": "Liu Huailing, Fei Wu"
    },
    {
      "title": "Avoid crash in contrib/postgres_fdw when a query using remote grouping or aggregation has a `SELECT`-list item that is an uncorrelated sub-select, outer reference, or parameter symbol",
      "description": "Avoid crash in contrib/postgres_fdw when a query using remote grouping or aggregation has a `SELECT`-list item that is an uncorrelated sub-select, outer reference, or parameter symbol (Tom Lane)",
      "sinceVersion": "10.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash in contrib/vacuumlo if an `lo_unlink",
      "description": "Avoid crash in contrib/vacuumlo if an `lo_unlink()()` call failed (Tom Lane)",
      "sinceVersion": "10.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2019a",
      "description": "Sync our copy of the timezone library with IANA tzcode release 2019a (Tom Lane)\nThis corrects a small bug in zic that caused it to output an incorrect year-2440 transition in the `Africa/Casablanca` zone, and adds support for zic's new -r option.",
      "sinceVersion": "10.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2019a for DST law changes in Palestine and Metlakatla, plus historical corrections for Israel.\n`Etc/UCT` is now a backward-compatibility link to `Etc/UTC`, instead of being a separate zone that generates the abbreviation `UCT`, which nowadays is typically a typo. PostgreSQL will still accept `UCT` as an input zone abbreviation, but it won't output it.",
      "sinceVersion": "10.8",
      "contributor": null
    },
    {
      "title": "Improve initdb's handling of multiple equivalent names for the system time zone",
      "description": "Improve initdb's handling of multiple equivalent names for the system time zone (Tom Lane, Andrew Gierth)\nMake initdb examine the /etc/localtime symbolic link, if that exists, to break ties between equivalent names for the system time zone. This makes initdb more likely to select the time zone name that the user would expect when multiple identical time zones exist. It will not change the behavior if /etc/localtime is not a symlink to a zone data file, nor if the time zone is determined from the TZ environment variable.\nSeparately, prefer `UTC` over other spellings of that time zone, when neither TZ nor /etc/localtime provide a hint. This fixes an annoyance introduced by tzdata 2019a's change to make the `UCT` and `UTC` zone names equivalent: initdb was then preferring `UCT`, which almost nobody wants.",
      "sinceVersion": "10.9",
      "contributor": "Tom Lane, Andrew Gierth"
    },
    {
      "title": "Fix buffer-overflow hazards in SCRAM verifier parsing",
      "description": "Fix buffer-overflow hazards in SCRAM verifier parsing (Jonathan Katz, Heikki Linnakangas, Michael Paquier)\nAny authenticated user could cause a stack-based buffer overflow by changing their own password to a purpose-crafted value. In addition to the ability to crash the PostgreSQL server, this could suffice for executing arbitrary code as the PostgreSQL operating system account.\nA similar overflow hazard existed in libpq, which could allow a rogue server to crash a client or perhaps execute arbitrary code as the client's operating system account.\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2019-10164)",
      "sinceVersion": "10.9",
      "contributor": "Jonathan Katz, Heikki Linnakangas, Michael Paquier"
    },
    {
      "title": "Fix failure of ALTER TABLE ... ALTER COLUMN TYPE when the table has a partial exclusion constraint",
      "description": "Fix failure of ALTER TABLE ... ALTER COLUMN TYPE when the table has a partial exclusion constraint (Tom Lane)",
      "sinceVersion": "10.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure of COMMENT command for comments on domain constraints",
      "description": "Fix failure of COMMENT command for comments on domain constraints (Daniel Gustafsson, Michael Paquier)",
      "sinceVersion": "10.9",
      "contributor": "Daniel Gustafsson, Michael Paquier"
    },
    {
      "title": "Prevent possible memory clobber when there are duplicate columns in a hash aggregate's hash key list",
      "description": "Prevent possible memory clobber when there are duplicate columns in a hash aggregate's hash key list (Andrew Gierth)",
      "sinceVersion": "10.9",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix faulty generation of merge-append plans",
      "description": "Fix faulty generation of merge-append plans (Tom Lane)\nThis mistake could lead to “could not find pathkey item to sort” errors.",
      "sinceVersion": "10.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect printing of queries with duplicate join names",
      "description": "Fix incorrect printing of queries with duplicate join names (Philip Dubé)\nThis oversight caused a dump/restore failure for views containing such queries.",
      "sinceVersion": "10.9",
      "contributor": "Philip Dubé"
    },
    {
      "title": "Fix conversion of JSON string literals to JSON-type output columns in `json_to_record",
      "description": "Fix conversion of JSON string literals to JSON-type output columns in `json_to_record()()` and `json_populate_record()()` (Tom Lane)\nSuch cases should produce the literal as a standalone JSON value, but the code misbehaved if the literal contained any characters requiring escaping.",
      "sinceVersion": "10.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possible failures while initializing a new process's pg_stat_activity data",
      "description": "Avoid possible failures while initializing a new process's pg_stat_activity data (Tom Lane)\nCertain operations that could fail, such as converting strings extracted from an SSL certificate into the database encoding, were being performed inside a critical section. Failure there would result in database-wide lockup due to violating the access protocol for shared pg_stat_activity data.",
      "sinceVersion": "10.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition in check to see whether a pre-existing shared memory segment is still in use by a conflicting postmaster",
      "description": "Fix race condition in check to see whether a pre-existing shared memory segment is still in use by a conflicting postmaster (Tom Lane)",
      "sinceVersion": "10.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unsafe coding in walreceiver's signal handler",
      "description": "Fix unsafe coding in walreceiver's signal handler (Tom Lane)\nThis avoids rare problems in which the walreceiver process would crash or deadlock when commanded to shut down.",
      "sinceVersion": "10.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid attempting to do database accesses for parameter checking in processes that are not connected to a specific database",
      "description": "Avoid attempting to do database accesses for parameter checking in processes that are not connected to a specific database (Vignesh C, Andres Freund)\nThis error could result in failures like “cannot read pg_class without having selected a database”.",
      "sinceVersion": "10.9",
      "contributor": "Vignesh C, Andres Freund"
    },
    {
      "title": "Avoid possible hang in libpq if using SSL and OpenSSL's pending-data buffer contains an exact multiple of 256 bytes",
      "description": "Avoid possible hang in libpq if using SSL and OpenSSL's pending-data buffer contains an exact multiple of 256 bytes (David Binderman)",
      "sinceVersion": "10.9",
      "contributor": "David Binderman"
    },
    {
      "title": "Fix ordering of GRANT commands emitted by pg_dump and pg_dumpall for databases and tablespaces",
      "description": "Fix ordering of GRANT commands emitted by pg_dump and pg_dumpall for databases and tablespaces (Nathan Bossart, Michael Paquier)\nIf cascading grants had been issued, restore might fail due to the GRANT commands being given in an order that didn't respect their interdependencies.",
      "sinceVersion": "10.9",
      "contributor": "Nathan Bossart, Michael Paquier"
    },
    {
      "title": "Make pg_dump recreate table partitions using CREATE TABLE then ATTACH PARTITION, rather than including `PARTITION OF` in the creation command",
      "description": "Make pg_dump recreate table partitions using CREATE TABLE then ATTACH PARTITION, rather than including `PARTITION OF` in the creation command (Álvaro Herrera, David Rowley)\nThis avoids problems with the partition's column order possibly being changed to match the parent's. Also, a partition is now restorable from the dump (as a standalone table) even if its parent table isn't restored; the ATTACH will fail, but that can just be ignored.",
      "sinceVersion": "10.9",
      "contributor": "Álvaro Herrera, David Rowley"
    },
    {
      "title": "Fix misleading error reports from reindexdb",
      "description": "Fix misleading error reports from reindexdb (Julien Rouhaud)",
      "sinceVersion": "10.9",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Ensure that vacuumdb returns correct status if an error occurs while using parallel jobs",
      "description": "Ensure that vacuumdb returns correct status if an error occurs while using parallel jobs (Julien Rouhaud)",
      "sinceVersion": "10.9",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Fix contrib/auto_explain to not cause problems in parallel queries",
      "description": "Fix contrib/auto_explain to not cause problems in parallel queries (Tom Lane)\nPreviously, a parallel worker might try to log its query even if the parent query were not being logged by auto_explain. This would work sometimes, but it's confusing, and in some cases it resulted in failures like “could not find key N in shm TOC”.\nAlso, fix an off-by-one error that resulted in not necessarily logging every query even when the sampling rate is set to 1.0.",
      "sinceVersion": "10.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/postgres_fdw, account for possible data modifications by local `BEFORE ROW UPDATE` triggers",
      "description": "In contrib/postgres_fdw, account for possible data modifications by local `BEFORE ROW UPDATE` triggers (Shohei Mochizuki)\nIf a trigger modified a column that was otherwise not changed by the UPDATE, the new value was not transmitted to the remote server.",
      "sinceVersion": "10.9",
      "contributor": "Shohei Mochizuki"
    },
    {
      "title": "On Windows, avoid failure when the database encoding is set to SQL_ASCII and we attempt to log a non-ASCII string",
      "description": "On Windows, avoid failure when the database encoding is set to SQL_ASCII and we attempt to log a non-ASCII string (Noah Misch)\nThe code had been assuming that such strings must be in UTF-8, and would throw an error if they didn't appear to be validly encoded. Now, just transmit the untranslated bytes to the log.",
      "sinceVersion": "10.9",
      "contributor": "Noah Misch"
    },
    {
      "title": "Make PL/pgSQL's header files C++-safe",
      "description": "Make PL/pgSQL's header files C++-safe (George Tarasov)",
      "sinceVersion": "10.9",
      "contributor": "George Tarasov"
    },
    {
      "title": "Add all window function framing options specified by SQL:2011",
      "description": "Add all window function framing options specified by SQL:2011 (Oliver Ford, Tom Lane)\n            Specifically, allow `RANGE` mode to use `PRECEDING` and `FOLLOWING` to select rows having grouping values within plus or minus the specified offset. Add `GROUPS` mode to include plus or minus the number of peer groups. Frame exclusion syntax was also added.",
      "sinceVersion": "11.0",
      "contributor": "Oliver Ford, Tom Lane"
    },
    {
      "title": "Add SHA-2 family of hash functions",
      "description": "Add SHA-2 family of hash functions (Peter Eisentraut)\n            Specifically, `sha224()()`, `sha256()()`, `sha384()()`, `sha512()()` were added.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Untitled feature",
      "description": "Add support for partitioning by a hash key",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Add support for `PRIMARY KEY`, `FOREIGN KEY`, indexes, and triggers on partitioned tables",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Allow creation of a “default” partition for storing data that does not match any of the remaining partitions",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "UPDATE statements that change a partition key column now cause affected rows to be moved to the appropriate partitions",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Improvements to parallelism, including:\n          \n            \n              \n                CREATE INDEX can now use parallel processing while building a B-tree index\n              \n              \n                Parallelization is now possible in CREATE TABLE ... AS, CREATE MATERIALIZED VIEW, and certain queries using `UNION`\n              \n              \n                Parallelized hash joins and parallelized sequential scans now perform better\n              \n            \n          ",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "CREATE INDEX can now use parallel processing while building a B-tree index",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Parallelization is now possible in CREATE TABLE ... AS, CREATE MATERIALIZED VIEW, and certain queries using `UNION`",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Parallelized hash joins and parallelized sequential scans now perform better",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "SQL stored procedures that support embedded transactions",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Window functions now support all framing options shown in the SQL:2011 standard, including `RANGE `distance` PRECEDING/FOLLOWING`, `GROUPS` mode, and frame exclusion options",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Covering indexes can now be created, using the `INCLUDE` clause of CREATE INDEX",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Consider syntactic form when disambiguating function versus column references",
      "description": "Consider syntactic form when disambiguating function versus column references (Tom Lane)\n          When `x` is a table name or composite column, PostgreSQL has traditionally considered the syntactic forms ``f`(x`) and ``x`.f` to be equivalent, allowing tricks such as writing a function and then using it as though it were a computed-on-demand column. However, if both interpretations are feasible, the column interpretation was always chosen, leading to surprising results if the user intended the function interpretation. Now, if there is ambiguity, the interpretation that matches the syntactic form is chosen.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fully enforce uniqueness of table and domain constraint names",
      "description": "Fully enforce uniqueness of table and domain constraint names (Tom Lane)\n          PostgreSQL expects the names of a table's constraints to be distinct, and likewise for the names of a domain's constraints. However, there was not rigid enforcement of this, and previously there were corner cases where duplicate names could be created.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make `power",
      "description": "Make `power(numeric, numeric)()` and `power(float8, float8)()` handle `NaN` inputs according to the POSIX standard (Tom Lane, Dang Minh Huong)\n          POSIX says that `NaN ^ 0 = 1` and `1 ^ NaN = 1`, but all other cases with `NaN` input(s) should return `NaN`. `power(numeric, numeric)()` just returned `NaN` in all such cases; now it honors the two exceptions. `power(float8, float8)()` followed the standard if the C library does; but on some old Unix platforms the library doesn't, and there were also problems on some versions of Windows.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane, Dang Minh Huong"
    },
    {
      "title": "Prevent `to_number",
      "description": "Prevent `to_number()()` from consuming characters when the template separator does not match (Oliver Ford)\n          Specifically, SELECT to_number('1234', '9,999') used to return `134`. It will now return `1234`. `L` and `TH` now only consume characters that are not digits, positive/negative signs, decimal points, or commas.",
      "sinceVersion": "11.0",
      "contributor": "Oliver Ford"
    },
    {
      "title": "Fix `to_date",
      "description": "Fix `to_date()()`, `to_number()()`, and `to_timestamp()()` to skip a character for each template character (Tom Lane)\n          Previously, they skipped one byte for each byte of template character, resulting in strange behavior if either string contained multibyte characters.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Adjust the handling of backslashes inside double-quotes in template strings for `to_char",
      "description": "Adjust the handling of backslashes inside double-quotes in template strings for `to_char()()`, `to_number()()`, and `to_timestamp()()`.\n          Such a backslash now escapes the character after it, particularly a double-quote or another backslash.",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Correctly handle relative path expressions in `xmltable",
      "description": "Correctly handle relative path expressions in `xmltable()()`, `xpath()()`, and other XML-handling functions (Markus Winand)\n          Per the SQL standard, relative paths start from the document node of the XML input document, not the root node as these functions previously did.",
      "sinceVersion": "11.0",
      "contributor": "Markus Winand"
    },
    {
      "title": "In the extended query protocol, make statement_timeout apply to each Execute message separately, not to all commands before Sync",
      "description": "In the extended query protocol, make statement_timeout apply to each Execute message separately, not to all commands before Sync (Tatsuo Ishii, Andres Freund)",
      "sinceVersion": "11.0",
      "contributor": "Tatsuo Ishii, Andres Freund"
    },
    {
      "title": "Remove the relhaspkey column from system catalog pg_class",
      "description": "Remove the relhaspkey column from system catalog pg_class (Peter Eisentraut)\n          Applications needing to check for a primary key should consult pg_index.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Replace system catalog pg_proc's proisagg and proiswindow columns with prokind",
      "description": "Replace system catalog pg_proc's proisagg and proiswindow columns with prokind (Peter Eisentraut)\n          This new column more clearly distinguishes functions, procedures, aggregates, and window functions.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Correct information schema column tables.table_type to return `FOREIGN` instead of `FOREIGN TABLE`",
      "description": "Correct information schema column tables.table_type to return `FOREIGN` instead of `FOREIGN TABLE` (Peter Eisentraut)\n          This new output matches the SQL standard.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Change the ps process display labels for background workers to match the pg_stat_activity.backend_type labels",
      "description": "Change the ps process display labels for background workers to match the pg_stat_activity.backend_type labels (Peter Eisentraut)",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Cause large object permission checks to happen during large object open, `lo_open",
      "description": "Cause large object permission checks to happen during large object open, `lo_open()()`, not when a read or write is attempted (Tom Lane, Michael Paquier)\n          If write access is requested and not available, an error will now be thrown even if the large object is never written to.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane, Michael Paquier"
    },
    {
      "title": "Prevent non-superusers from reindexing shared catalogs",
      "description": "Prevent non-superusers from reindexing shared catalogs (Michael Paquier, Robert Haas)\n          Previously, database owners were also allowed to do this, but now it is considered outside the bounds of their privileges.",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier, Robert Haas"
    },
    {
      "title": "Remove deprecated adminpack functions `pg_file_read",
      "description": "Remove deprecated adminpack functions `pg_file_read()()`, `pg_file_length()()`, and `pg_logfile_rotate()()` (Stephen Frost)\n          Equivalent functionality is now present in the core backend. Existing adminpack installs will continue to have access to these functions until they are updated via ALTER EXTENSION ... UPDATE.",
      "sinceVersion": "11.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Honor the capitalization of double-quoted command options",
      "description": "Honor the capitalization of double-quoted command options (Daniel Gustafsson)\n          Previously, option names in certain SQL commands were forcibly lower-cased even if entered with double quotes; thus for example `\"FillFactor\"` would be accepted as an index storage option, though properly its name is lower-case. Such cases will now generate an error.",
      "sinceVersion": "11.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Remove server parameter replacement_sort_tuples",
      "description": "Remove server parameter replacement_sort_tuples (Peter Geoghegan)\n          Replacement sorts were determined to be no longer useful.",
      "sinceVersion": "11.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Remove `WITH` clause in CREATE FUNCTION",
      "description": "Remove `WITH` clause in CREATE FUNCTION (Michael Paquier)\n          PostgreSQL has long supported a more standard-compliant syntax for this capability.",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In PL/pgSQL trigger functions, the OLD and NEW variables now read as NULL when not assigned",
      "description": "In PL/pgSQL trigger functions, the OLD and NEW variables now read as NULL when not assigned (Tom Lane)\n          Previously, references to these variables could be parsed but not executed.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow the creation of partitions based on hashing a key column",
      "description": "Allow the creation of partitions based on hashing a key column (Amul Sul)",
      "sinceVersion": "11.0",
      "contributor": "Amul Sul"
    },
    {
      "title": "Support indexes on partitioned tables",
      "description": "Support indexes on partitioned tables (Álvaro Herrera, Amit Langote)\n              An “index” on a partitioned table is not a physical index across the whole partitioned table, but rather a template for automatically creating similar indexes on each partition of the table.\n              If the partition key is part of the index's column set, a partitioned index may be declared `UNIQUE`. It will represent a valid uniqueness constraint across the whole partitioned table, even though each physical index only enforces uniqueness within its own partition.\n              The new command ALTER INDEX ATTACH PARTITION causes an existing index on a partition to be associated with a matching index template for its partitioned table. This provides flexibility in setting up a new partitioned index for an existing partitioned table.",
      "sinceVersion": "11.0",
      "contributor": "Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Allow foreign keys on partitioned tables",
      "description": "Allow foreign keys on partitioned tables (Álvaro Herrera)",
      "sinceVersion": "11.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Allow `FOR EACH ROW` triggers on partitioned tables",
      "description": "Allow `FOR EACH ROW` triggers on partitioned tables (Álvaro Herrera)\n              Creation of a trigger on a partitioned table automatically creates triggers on all existing and future partitions. This also allows deferred unique constraints on partitioned tables.",
      "sinceVersion": "11.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Allow partitioned tables to have a default partition",
      "description": "Allow partitioned tables to have a default partition (Jeevan Ladhe, Beena Emerson, Ashutosh Bapat, Rahila Syed, Robert Haas)\n              The default partition will store rows that don't match any of the other defined partitions, and is searched accordingly.",
      "sinceVersion": "11.0",
      "contributor": "Jeevan Ladhe, Beena Emerson, Ashutosh Bapat, Rahila Syed, Robert Haas"
    },
    {
      "title": "UPDATE statements that change a partition key column now cause affected rows to be moved to the appropriate partitions",
      "description": "UPDATE statements that change a partition key column now cause affected rows to be moved to the appropriate partitions (Amit Khandekar)",
      "sinceVersion": "11.0",
      "contributor": "Amit Khandekar"
    },
    {
      "title": "Allow INSERT, UPDATE, and COPY on partitioned tables to properly route rows to foreign partitions",
      "description": "Allow INSERT, UPDATE, and COPY on partitioned tables to properly route rows to foreign partitions (Etsuro Fujita, Amit Langote)\n              This is supported by postgres_fdw foreign tables. Since the `ExecForeignInsert()` callback function is called for this in a different way than it used to be, foreign data wrappers must be modified to cope with this change.",
      "sinceVersion": "11.0",
      "contributor": "Etsuro Fujita, Amit Langote"
    },
    {
      "title": "Allow partition elimination during query execution",
      "description": "Allow partition elimination during query execution (David Rowley, Beena Emerson)\n              Previously, partition elimination only happened at planning time, meaning many joins and prepared queries could not use partition elimination.",
      "sinceVersion": "11.0",
      "contributor": "David Rowley, Beena Emerson"
    },
    {
      "title": "In an equality join between partitioned tables, allow matching partitions to be joined directly",
      "description": "In an equality join between partitioned tables, allow matching partitions to be joined directly (Ashutosh Bapat)\n              This feature is disabled by default but can be enabled by changing enable_partitionwise_join.",
      "sinceVersion": "11.0",
      "contributor": "Ashutosh Bapat"
    },
    {
      "title": "Allow aggregate functions on partitioned tables to be evaluated separately for each partition, subsequently merging the results",
      "description": "Allow aggregate functions on partitioned tables to be evaluated separately for each partition, subsequently merging the results (Jeevan Chalke, Ashutosh Bapat, Robert Haas)\n              This feature is disabled by default but can be enabled by changing enable_partitionwise_aggregate.",
      "sinceVersion": "11.0",
      "contributor": "Jeevan Chalke, Ashutosh Bapat, Robert Haas"
    },
    {
      "title": "Allow postgres_fdw to push down aggregates to foreign tables that are partitions",
      "description": "Allow postgres_fdw to push down aggregates to foreign tables that are partitions (Jeevan Chalke)",
      "sinceVersion": "11.0",
      "contributor": "Jeevan Chalke"
    },
    {
      "title": "Allow parallel building of a btree index",
      "description": "Allow parallel building of a btree index (Peter Geoghegan, Rushabh Lathia, Heikki Linnakangas)",
      "sinceVersion": "11.0",
      "contributor": "Peter Geoghegan, Rushabh Lathia, Heikki Linnakangas"
    },
    {
      "title": "Allow hash joins to be performed in parallel using a shared hash table",
      "description": "Allow hash joins to be performed in parallel using a shared hash table (Thomas Munro)",
      "sinceVersion": "11.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow `UNION` to run each SELECT in parallel if the individual SELECTs cannot be parallelized",
      "description": "Allow `UNION` to run each SELECT in parallel if the individual SELECTs cannot be parallelized (Amit Khandekar, Robert Haas, Amul Sul)",
      "sinceVersion": "11.0",
      "contributor": "Amit Khandekar, Robert Haas, Amul Sul"
    },
    {
      "title": "Allow partition scans to more efficiently use parallel workers",
      "description": "Allow partition scans to more efficiently use parallel workers (Amit Khandekar, Robert Haas, Amul Sul)",
      "sinceVersion": "11.0",
      "contributor": "Amit Khandekar, Robert Haas, Amul Sul"
    },
    {
      "title": "Allow `LIMIT` to be passed to parallel workers",
      "description": "Allow `LIMIT` to be passed to parallel workers (Robert Haas, Tom Lane)\n              This allows workers to reduce returned results and use targeted index scans.",
      "sinceVersion": "11.0",
      "contributor": "Robert Haas, Tom Lane"
    },
    {
      "title": "Allow single-evaluation queries, e.g., `WHERE` clause aggregate queries, and functions in the target list to be parallelized",
      "description": "Allow single-evaluation queries, e.g., `WHERE` clause aggregate queries, and functions in the target list to be parallelized (Amit Kapila, Robert Haas)",
      "sinceVersion": "11.0",
      "contributor": "Amit Kapila, Robert Haas"
    },
    {
      "title": "Add server parameter parallel_leader_participation to control whether the leader also executes subplans",
      "description": "Add server parameter parallel_leader_participation to control whether the leader also executes subplans (Thomas Munro)\n              The default is enabled, meaning the leader will execute subplans.",
      "sinceVersion": "11.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow parallelization of commands CREATE TABLE ... AS, SELECT INTO, and CREATE MATERIALIZED VIEW",
      "description": "Allow parallelization of commands CREATE TABLE ... AS, SELECT INTO, and CREATE MATERIALIZED VIEW (Haribabu Kommi)",
      "sinceVersion": "11.0",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Add reporting of parallel workers' sort activity in EXPLAIN",
      "description": "Add reporting of parallel workers' sort activity in EXPLAIN (Robert Haas, Tom Lane)",
      "sinceVersion": "11.0",
      "contributor": "Robert Haas, Tom Lane"
    },
    {
      "title": "Allow B-tree indexes to include columns that are not part of the search key or unique constraint, but are available to be read by index-only scans",
      "description": "Allow B-tree indexes to include columns that are not part of the search key or unique constraint, but are available to be read by index-only scans (Anastasia Lubennikova, Alexander Korotkov, Teodor Sigaev)\n              This is enabled by the new `INCLUDE` clause of CREATE INDEX. It facilitates building “covering indexes” that optimize specific types of queries. Columns can be included even if their data types don't have B-tree support.",
      "sinceVersion": "11.0",
      "contributor": "Anastasia Lubennikova, Alexander Korotkov, Teodor Sigaev"
    },
    {
      "title": "Add predicate locking for hash, GiST and GIN indexes",
      "description": "Add predicate locking for hash, GiST and GIN indexes (Shubham Barai)\n              This reduces the likelihood of serialization conflicts in serializable-mode transactions.",
      "sinceVersion": "11.0",
      "contributor": "Shubham Barai"
    },
    {
      "title": "Add prefix-match operator text `^@` text, which is supported by SP-GiST",
      "description": "Add prefix-match operator text `^@` text, which is supported by SP-GiST (Ildus Kurbangaliev)\n                This is similar to using `var` `LIKE 'word%'` with a btree index, but it is more efficient.",
      "sinceVersion": "11.0",
      "contributor": "Ildus Kurbangaliev"
    },
    {
      "title": "Allow polygons to be indexed with SP-GiST",
      "description": "Allow polygons to be indexed with SP-GiST (Nikita Glukhov, Alexander Korotkov)",
      "sinceVersion": "11.0",
      "contributor": "Nikita Glukhov, Alexander Korotkov"
    },
    {
      "title": "Allow SP-GiST to use lossy representation of leaf keys",
      "description": "Allow SP-GiST to use lossy representation of leaf keys (Teodor Sigaev, Heikki Linnakangas, Alexander Korotkov, Nikita Glukhov)",
      "sinceVersion": "11.0",
      "contributor": "Teodor Sigaev, Heikki Linnakangas, Alexander Korotkov, Nikita Glukhov"
    },
    {
      "title": "Improve selection of the most common values for statistics",
      "description": "Improve selection of the most common values for statistics (Jeff Janes, Dean Rasheed)\n              Previously, the most common values (MCVs) were identified based on their frequency compared to all column values. Now, MCVs are chosen based on their frequency compared to the non-MCV values. This improves the robustness of the algorithm for both uniform and non-uniform distributions.",
      "sinceVersion": "11.0",
      "contributor": "Jeff Janes, Dean Rasheed"
    },
    {
      "title": "Improve selectivity estimates for `&gt;=` and `&lt;=`",
      "description": "Improve selectivity estimates for `&gt;=` and `&lt;=` (Tom Lane)\n              Previously, such cases used the same selectivity estimates as `&gt;` and `&lt;`, respectively, unless the comparison constants are MCVs. This change is particularly helpful for queries involving `BETWEEN` with small ranges.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reduce `var` `=` `var` to `var` `IS NOT NULL` where equivalent",
      "description": "Reduce `var` `=` `var` to `var` `IS NOT NULL` where equivalent (Tom Lane)\n              This leads to better selectivity estimates.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve optimizer's row count estimates for `EXISTS` and `NOT EXISTS` queries",
      "description": "Improve optimizer's row count estimates for `EXISTS` and `NOT EXISTS` queries (Tom Lane)",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make the optimizer account for evaluation costs and selectivity of `HAVING` clauses",
      "description": "Make the optimizer account for evaluation costs and selectivity of `HAVING` clauses (Tom Lane)",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow bitmap scans to perform index-only scans when possible",
      "description": "Allow bitmap scans to perform index-only scans when possible (Alexander Kuzmenkov)",
      "sinceVersion": "11.0",
      "contributor": "Alexander Kuzmenkov"
    },
    {
      "title": "Update the free space map during VACUUM",
      "description": "Update the free space map during VACUUM (Claudio Freire)\n              This allows free space to be reused more quickly.",
      "sinceVersion": "11.0",
      "contributor": "Claudio Freire"
    },
    {
      "title": "Allow VACUUM to avoid unnecessary index scans",
      "description": "Allow VACUUM to avoid unnecessary index scans (Masahiko Sawada, Alexander Korotkov)",
      "sinceVersion": "11.0",
      "contributor": "Masahiko Sawada, Alexander Korotkov"
    },
    {
      "title": "Reduce memory usage for queries using set-returning functions in their target lists",
      "description": "Reduce memory usage for queries using set-returning functions in their target lists (Andres Freund)",
      "sinceVersion": "11.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Allow postgres_fdw to push UPDATEs and DELETEs using joins to foreign servers",
      "description": "Allow postgres_fdw to push UPDATEs and DELETEs using joins to foreign servers (Etsuro Fujita)\n              Previously, only non-join UPDATEs and DELETEs were pushed.",
      "sinceVersion": "11.0",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Add support for large pages on Windows",
      "description": "Add support for large pages on Windows (Takayuki Tsunakawa, Thomas Munro)\n              This is controlled by the huge_pages configuration parameter.",
      "sinceVersion": "11.0",
      "contributor": "Takayuki Tsunakawa, Thomas Munro"
    },
    {
      "title": "Show memory usage in output from log_statement_stats, log_parser_stats, log_planner_stats, and log_executor_stats",
      "description": "Show memory usage in output from log_statement_stats, log_parser_stats, log_planner_stats, and log_executor_stats (Justin Pryzby, Peter Eisentraut)",
      "sinceVersion": "11.0",
      "contributor": "Justin Pryzby, Peter Eisentraut"
    },
    {
      "title": "Add column pg_stat_activity.backend_type to show the type of a background worker",
      "description": "Add column pg_stat_activity.backend_type to show the type of a background worker (Peter Eisentraut)\n              The type is also visible in ps output.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Make log_autovacuum_min_duration log skipped tables that are concurrently being dropped",
      "description": "Make log_autovacuum_min_duration log skipped tables that are concurrently being dropped (Nathan Bossart)",
      "sinceVersion": "11.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add `information_schema` columns related to table constraints and triggers",
      "description": "Add `information_schema` columns related to table constraints and triggers (Peter Eisentraut)\n                Specifically, triggers.action_order, triggers.action_reference_old_table, and triggers.action_reference_new_table are now populated, where before they were always null. Also, table_constraints.enforced now exists but is not yet usefully populated.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow the server to specify more complex LDAP specifications in search+bind mode",
      "description": "Allow the server to specify more complex LDAP specifications in search+bind mode (Thomas Munro)\n              Specifically, `ldapsearchfilter` allows pattern matching using combinations of LDAP attributes.",
      "sinceVersion": "11.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow LDAP authentication to use encrypted LDAP",
      "description": "Allow LDAP authentication to use encrypted LDAP (Thomas Munro)\n              We already supported LDAP over TLS by using `ldaptls=1`. This new TLS LDAP method for encrypted LDAP is enabled with `ldapscheme=ldaps` or `ldapurl=ldaps://`.",
      "sinceVersion": "11.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Improve logging of LDAP errors",
      "description": "Improve logging of LDAP errors (Thomas Munro)",
      "sinceVersion": "11.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add default roles that enable file system access",
      "description": "Add default roles that enable file system access (Stephen Frost)\n              Specifically, the new roles are: `pg_read_server_files`, `pg_write_server_files`, and `pg_execute_server_program`. These roles now also control who can use server-side COPY and the file_fdw extension. Previously, only superusers could use these functions, and that is still the default behavior.",
      "sinceVersion": "11.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Allow access to file system functions to be controlled by GRANT/REVOKE permissions, rather than superuser checks",
      "description": "Allow access to file system functions to be controlled by GRANT/REVOKE permissions, rather than superuser checks (Stephen Frost)\n              Specifically, these functions were modified: `pg_ls_dir()()`, `pg_read_file()()`, `pg_read_binary_file()()`, `pg_stat_file()()`.",
      "sinceVersion": "11.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Use GRANT/REVOKE to control access to `lo_import",
      "description": "Use GRANT/REVOKE to control access to `lo_import()()` and `lo_export()()` (Michael Paquier, Tom Lane)\n              Previously, only superusers were granted access to these functions.\n              The compile-time option `ALLOW_DANGEROUS_LO_FUNCTIONS` has been removed.",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier, Tom Lane"
    },
    {
      "title": "Use view owner not session owner when preventing non-password access to postgres_fdw tables",
      "description": "Use view owner not session owner when preventing non-password access to postgres_fdw tables (Robert Haas)\n              PostgreSQL only allows superusers to access postgres_fdw tables without passwords, e.g., via `peer`. Previously, the session owner had to be a superuser to allow such access; now the view owner is checked instead.",
      "sinceVersion": "11.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Fix invalid locking permission check in SELECT FOR UPDATE on views",
      "description": "Fix invalid locking permission check in SELECT FOR UPDATE on views (Tom Lane)",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add server setting ssl_passphrase_command to allow supplying of the passphrase for SSL key files",
      "description": "Add server setting ssl_passphrase_command to allow supplying of the passphrase for SSL key files (Peter Eisentraut)\n              Also add ssl_passphrase_command_supports_reload to specify whether the SSL configuration should be reloaded and ssl_passphrase_command called during a server configuration reload.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add storage parameter toast_tuple_target to control the minimum tuple length before TOAST storage will be considered",
      "description": "Add storage parameter toast_tuple_target to control the minimum tuple length before TOAST storage will be considered (Simon Riggs)\n              The default TOAST threshold has not been changed.",
      "sinceVersion": "11.0",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Allow server options related to memory and file sizes to be specified in units of bytes",
      "description": "Allow server options related to memory and file sizes to be specified in units of bytes (Beena Emerson)\n              The new unit suffix is “B”. This is in addition to the existing units “kB”, “MB”, “GB” and “TB”.",
      "sinceVersion": "11.0",
      "contributor": "Beena Emerson"
    },
    {
      "title": "Allow the WAL file size to be set during initdb",
      "description": "Allow the WAL file size to be set during initdb (Beena Emerson)\n              Previously, the 16MB default could only be changed at compile time.",
      "sinceVersion": "11.0",
      "contributor": "Beena Emerson"
    },
    {
      "title": "Retain WAL data for only a single checkpoint",
      "description": "Retain WAL data for only a single checkpoint (Simon Riggs)\n              Previously, WAL was retained for two checkpoints.",
      "sinceVersion": "11.0",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Fill the unused portion of force-switched WAL segment files with zeros for improved compressibility",
      "description": "Fill the unused portion of force-switched WAL segment files with zeros for improved compressibility (Chapman Flack)",
      "sinceVersion": "11.0",
      "contributor": "Chapman Flack"
    },
    {
      "title": "Replicate TRUNCATE activity when using logical replication",
      "description": "Replicate TRUNCATE activity when using logical replication (Simon Riggs, Marco Nenciarini, Peter Eisentraut)",
      "sinceVersion": "11.0",
      "contributor": "Simon Riggs, Marco Nenciarini, Peter Eisentraut"
    },
    {
      "title": "Pass prepared transaction information to logical replication subscribers",
      "description": "Pass prepared transaction information to logical replication subscribers (Nikhil Sontakke, Stas Kelvich)",
      "sinceVersion": "11.0",
      "contributor": "Nikhil Sontakke, Stas Kelvich"
    },
    {
      "title": "Exclude unlogged tables, temporary tables, and pg_internal.init files from streaming base backups",
      "description": "Exclude unlogged tables, temporary tables, and pg_internal.init files from streaming base backups (David Steele)\n            There is no need to copy such files.",
      "sinceVersion": "11.0",
      "contributor": "David Steele"
    },
    {
      "title": "Allow checksums of heap pages to be verified during streaming base backup",
      "description": "Allow checksums of heap pages to be verified during streaming base backup (Michael Banck)",
      "sinceVersion": "11.0",
      "contributor": "Michael Banck"
    },
    {
      "title": "Allow replication slots to be advanced programmatically, rather than be consumed by subscribers",
      "description": "Allow replication slots to be advanced programmatically, rather than be consumed by subscribers (Petr Jelinek)\n            This allows efficient advancement of replication slots when the contents do not need to be consumed. This is performed by `pg_replication_slot_advance()()`.",
      "sinceVersion": "11.0",
      "contributor": "Petr Jelinek"
    },
    {
      "title": "Add timeline information to the backup_label file",
      "description": "Add timeline information to the backup_label file (Michael Paquier)\n            Also add a check that the WAL timeline matches the backup_label file's timeline.",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add host and port connection information to the pg_stat_wal_receiver system view",
      "description": "Add host and port connection information to the pg_stat_wal_receiver system view (Haribabu Kommi)",
      "sinceVersion": "11.0",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Allow ALTER TABLE to add a column with a non-null default without doing a table rewrite",
      "description": "Allow ALTER TABLE to add a column with a non-null default without doing a table rewrite (Andrew Dunstan, Serge Rielau)\n            This is enabled when the default value is a constant.",
      "sinceVersion": "11.0",
      "contributor": "Andrew Dunstan, Serge Rielau"
    },
    {
      "title": "Allow views to be locked by locking the underlying tables",
      "description": "Allow views to be locked by locking the underlying tables (Yugo Nagata)",
      "sinceVersion": "11.0",
      "contributor": "Yugo Nagata"
    },
    {
      "title": "Allow ALTER INDEX to set statistics-gathering targets for expression indexes",
      "description": "Allow ALTER INDEX to set statistics-gathering targets for expression indexes (Alexander Korotkov, Adrien Nayrat)\n            In psql, `\\d+` now shows the statistics target for indexes.",
      "sinceVersion": "11.0",
      "contributor": "Alexander Korotkov, Adrien Nayrat"
    },
    {
      "title": "Allow multiple tables to be specified in one VACUUM or ANALYZE command",
      "description": "Allow multiple tables to be specified in one VACUUM or ANALYZE command (Nathan Bossart)\n            Also, if any table mentioned in VACUUM uses a column list, then the ANALYZE keyword must be supplied; previously, ANALYZE was implied in such cases.",
      "sinceVersion": "11.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add parenthesized options syntax to ANALYZE",
      "description": "Add parenthesized options syntax to ANALYZE (Nathan Bossart)\n            This is similar to the syntax supported by VACUUM.",
      "sinceVersion": "11.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add CREATE AGGREGATE option to specify the behavior of the aggregate's finalization function",
      "description": "Add CREATE AGGREGATE option to specify the behavior of the aggregate's finalization function (Tom Lane)\n            This is helpful for allowing user-defined aggregate functions to be optimized and to work as window functions.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow the creation of arrays of domains",
      "description": "Allow the creation of arrays of domains (Tom Lane)\n            This also allows `array_agg()()` to be used on domains.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Support domains over composite types",
      "description": "Support domains over composite types (Tom Lane)\n            Also allow PL/Perl, PL/Python, and PL/Tcl to handle composite-domain function arguments and results. Also improve PL/Python domain handling.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add casts from JSONB scalars to numeric and boolean data types",
      "description": "Add casts from JSONB scalars to numeric and boolean data types (Anastasia Lubennikova)",
      "sinceVersion": "11.0",
      "contributor": "Anastasia Lubennikova"
    },
    {
      "title": "Add support for 64-bit non-cryptographic hash functions",
      "description": "Add support for 64-bit non-cryptographic hash functions (Robert Haas, Amul Sul)",
      "sinceVersion": "11.0",
      "contributor": "Robert Haas, Amul Sul"
    },
    {
      "title": "Allow `to_char",
      "description": "Allow `to_char()()` and `to_timestamp()()` to specify the time zone's offset from UTC in hours and minutes (Nikita Glukhov, Andrew Dunstan)\n            This is done with format specifications `TZH` and `TZM`.",
      "sinceVersion": "11.0",
      "contributor": "Nikita Glukhov, Andrew Dunstan"
    },
    {
      "title": "Add text search function `websearch_to_tsquery",
      "description": "Add text search function `websearch_to_tsquery()()` that supports a query syntax similar to that used by web search engines (Victor Drobny, Dmitry Ivanov)",
      "sinceVersion": "11.0",
      "contributor": "Victor Drobny, Dmitry Ivanov"
    },
    {
      "title": "Add functions `json",
      "description": "Add functions `json(b)_to_tsvector()()` to create a text search query for matching JSON/JSONB values (Dmitry Dolgov)",
      "sinceVersion": "11.0",
      "contributor": "Dmitry Dolgov"
    },
    {
      "title": "Add SQL-level procedures, which can start and commit their own transactions",
      "description": "Add SQL-level procedures, which can start and commit their own transactions (Peter Eisentraut)\n            They are created with the new CREATE PROCEDURE command and invoked via CALL.\n            The new ALTER/DROP ROUTINE commands allow altering/dropping of all routine-like objects, including procedures, functions, and aggregates.\n            Also, writing `FUNCTION` is now preferred over writing `PROCEDURE` in CREATE OPERATOR and CREATE TRIGGER, because the referenced object must be a function not a procedure. However, the old syntax is still accepted for compatibility.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add transaction control to PL/pgSQL, PL/Perl, PL/Python, PL/Tcl, and SPI server-side languages",
      "description": "Add transaction control to PL/pgSQL, PL/Perl, PL/Python, PL/Tcl, and SPI server-side languages (Peter Eisentraut)\n            Transaction control is only available within top-transaction-level procedures and nested DO and CALL blocks that only contain other DO and CALL blocks.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add the ability to define PL/pgSQL composite-type variables as not null, constant, or with initial values",
      "description": "Add the ability to define PL/pgSQL composite-type variables as not null, constant, or with initial values (Tom Lane)",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow PL/pgSQL to handle changes to composite types",
      "description": "Allow PL/pgSQL to handle changes to composite types (e.g., record, row) that happen between the first and later function executions in the same session (Tom Lane)\n            Previously, such circumstances generated errors.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add extension jsonb_plpython to transform JSONB to/from PL/Python types",
      "description": "Add extension jsonb_plpython to transform JSONB to/from PL/Python types (Anthony Bykov)",
      "sinceVersion": "11.0",
      "contributor": "Anthony Bykov"
    },
    {
      "title": "Add extension jsonb_plperl to transform JSONB to/from PL/Perl types",
      "description": "Add extension jsonb_plperl to transform JSONB to/from PL/Perl types (Anthony Bykov)",
      "sinceVersion": "11.0",
      "contributor": "Anthony Bykov"
    },
    {
      "title": "Change libpq to disable compression by default",
      "description": "Change libpq to disable compression by default (Peter Eisentraut)\n            Compression is already disabled in modern OpenSSL versions, so that the libpq setting had no effect with such libraries.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add `DO CONTINUE` option to ecpg's `WHENEVER` statement",
      "description": "Add `DO CONTINUE` option to ecpg's `WHENEVER` statement (Vinayak Pokale)\n            This generates a C continue statement, causing a return to the top of the contained loop when the specified condition occurs.",
      "sinceVersion": "11.0",
      "contributor": "Vinayak Pokale"
    },
    {
      "title": "Untitled feature",
      "description": "Add an ecpg mode to enable Oracle Pro*C-style handling of char arrays.\n            This mode is enabled with -C.",
      "sinceVersion": "11.0",
      "contributor": null
    },
    {
      "title": "Add psql command `\\gdesc` to display the names and types of the columns in a query result",
      "description": "Add psql command `\\gdesc` to display the names and types of the columns in a query result (Pavel Stehule)",
      "sinceVersion": "11.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Add psql variables to report query activity and errors",
      "description": "Add psql variables to report query activity and errors (Fabien Coelho)\n              Specifically, the new variables are `ERROR`, `SQLSTATE`, `ROW_COUNT`, `LAST_ERROR_MESSAGE`, and `LAST_ERROR_SQLSTATE`.",
      "sinceVersion": "11.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Allow psql to test for the existence of a variable",
      "description": "Allow psql to test for the existence of a variable (Fabien Coelho)\n              Specifically, the syntax `:{?variable_name}` allows a variable's existence to be tested in an `\\if` statement.",
      "sinceVersion": "11.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Allow environment variable PSQL_PAGER to control psql's pager",
      "description": "Allow environment variable PSQL_PAGER to control psql's pager (Pavel Stehule)\n              This allows psql's default pager to be specified as a separate environment variable from the pager for other applications. PAGER is still honored if PSQL_PAGER is not set.",
      "sinceVersion": "11.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Make psql's `\\d+` command always show the table's partitioning information",
      "description": "Make psql's `\\d+` command always show the table's partitioning information (Amit Langote, Ashutosh Bapat)\n              Previously, partition information would not be displayed for a partitioned table if it had no partitions. Also indicate which partitions are themselves partitioned.",
      "sinceVersion": "11.0",
      "contributor": "Amit Langote, Ashutosh Bapat"
    },
    {
      "title": "Ensure that psql reports the proper user name when prompting for a password",
      "description": "Ensure that psql reports the proper user name when prompting for a password (Tom Lane)\n              Previously, combinations of -U and a user name embedded in a URI caused incorrect reporting. Also suppress the user name before the password prompt when --password is specified.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow quit and exit to exit psql when given with no prior input",
      "description": "Allow quit and exit to exit psql when given with no prior input (Bruce Momjian)\n              Also print hints about how to exit when quit and exit are used alone on a line while the input buffer is not empty. Add a similar hint for help.",
      "sinceVersion": "11.0",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Make psql hint at using control-D when \\q is entered alone on a line but ignored",
      "description": "Make psql hint at using control-D when \\q is entered alone on a line but ignored (Bruce Momjian)\n              For example, \\q does not exit when supplied in character strings.",
      "sinceVersion": "11.0",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Improve tab completion for ALTER INDEX RESET/SET",
      "description": "Improve tab completion for ALTER INDEX RESET/SET (Masahiko Sawada)",
      "sinceVersion": "11.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Add infrastructure to allow psql to adapt its tab completion queries based on the server version",
      "description": "Add infrastructure to allow psql to adapt its tab completion queries based on the server version (Tom Lane)\n              Previously, tab completion queries could fail against older servers.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add pgbench expression support for NULLs, booleans, and some functions and operators",
      "description": "Add pgbench expression support for NULLs, booleans, and some functions and operators (Fabien Coelho)",
      "sinceVersion": "11.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Add `\\if` conditional support to pgbench",
      "description": "Add `\\if` conditional support to pgbench (Fabien Coelho)",
      "sinceVersion": "11.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Allow the use of non-ASCII characters in pgbench variable names",
      "description": "Allow the use of non-ASCII characters in pgbench variable names (Fabien Coelho)",
      "sinceVersion": "11.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Add pgbench option --init-steps to control the initialization steps performed",
      "description": "Add pgbench option --init-steps to control the initialization steps performed (Masahiko Sawada)",
      "sinceVersion": "11.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Add an approximately Zipfian-distributed random generator to pgbench",
      "description": "Add an approximately Zipfian-distributed random generator to pgbench (Alik Khilazhev)",
      "sinceVersion": "11.0",
      "contributor": "Alik Khilazhev"
    },
    {
      "title": "Allow the random seed to be set in pgbench",
      "description": "Allow the random seed to be set in pgbench (Fabien Coelho)",
      "sinceVersion": "11.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Allow pgbench to do exponentiation with `pow",
      "description": "Allow pgbench to do exponentiation with `pow()()` and `power()()` (Raúl Marín Rodríguez)",
      "sinceVersion": "11.0",
      "contributor": "Raúl Marín Rodríguez"
    },
    {
      "title": "Add hashing functions to pgbench",
      "description": "Add hashing functions to pgbench (Ildar Musin)",
      "sinceVersion": "11.0",
      "contributor": "Ildar Musin"
    },
    {
      "title": "Make pgbench statistics more accurate when using --latency-limit and --rate",
      "description": "Make pgbench statistics more accurate when using --latency-limit and --rate (Fabien Coelho)",
      "sinceVersion": "11.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Add an option to pg_basebackup that creates a named replication slot",
      "description": "Add an option to pg_basebackup that creates a named replication slot (Michael Banck)\n            The option --create-slot creates the named replication slot (--slot) when the WAL streaming method (--wal-method=stream) is used.",
      "sinceVersion": "11.0",
      "contributor": "Michael Banck"
    },
    {
      "title": "Allow initdb to set group read access to the data directory",
      "description": "Allow initdb to set group read access to the data directory (David Steele)\n            This is accomplished with the new initdb option --allow-group-access. Administrators can also set group permissions on the empty data directory before running initdb. Server variable data_directory_mode allows reading of data directory group permissions.",
      "sinceVersion": "11.0",
      "contributor": "David Steele"
    },
    {
      "title": "Add pg_verify_checksums tool to verify database checksums while offline",
      "description": "Add pg_verify_checksums tool to verify database checksums while offline (Magnus Hagander)",
      "sinceVersion": "11.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Allow pg_resetwal to change the WAL segment size via --wal-segsize",
      "description": "Allow pg_resetwal to change the WAL segment size via --wal-segsize (Nathan Bossart)",
      "sinceVersion": "11.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add long options to pg_resetwal and pg_controldata",
      "description": "Add long options to pg_resetwal and pg_controldata (Nathan Bossart, Peter Eisentraut)",
      "sinceVersion": "11.0",
      "contributor": "Nathan Bossart, Peter Eisentraut"
    },
    {
      "title": "Add pg_receivewal option --no-sync to prevent synchronous WAL writes, for testing",
      "description": "Add pg_receivewal option --no-sync to prevent synchronous WAL writes, for testing (Michael Paquier)",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add pg_receivewal option --endpos to specify when WAL receiving should stop",
      "description": "Add pg_receivewal option --endpos to specify when WAL receiving should stop (Michael Paquier)",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Allow pg_ctl to send the `SIGKILL` signal to processes",
      "description": "Allow pg_ctl to send the `SIGKILL` signal to processes (Andres Freund)\n            This was previously unsupported due to concerns over possible misuse.",
      "sinceVersion": "11.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Reduce the number of files copied by pg_rewind",
      "description": "Reduce the number of files copied by pg_rewind (Michael Paquier)",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Prevent pg_rewind from running as `root`",
      "description": "Prevent pg_rewind from running as `root` (Michael Paquier)",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add pg_dumpall option --encoding to control output encoding",
      "description": "Add pg_dumpall option --encoding to control output encoding (Michael Paquier)\n              pg_dump already had this option.",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add pg_dump option --load-via-partition-root to force loading of data into the partition's root table, rather than the original partition",
      "description": "Add pg_dump option --load-via-partition-root to force loading of data into the partition's root table, rather than the original partition (Rushabh Lathia)\n              This is useful if the system to be loaded to has different collation definitions or endianness, possibly requiring rows to be stored in different partitions than previously.",
      "sinceVersion": "11.0",
      "contributor": "Rushabh Lathia"
    },
    {
      "title": "Add an option to suppress dumping and restoring database object comments",
      "description": "Add an option to suppress dumping and restoring database object comments (Robins Tharakan)\n              The new pg_dump, pg_dumpall, and pg_restore option is --no-comments.",
      "sinceVersion": "11.0",
      "contributor": "Robins Tharakan"
    },
    {
      "title": "Add PGXS support for installing include files",
      "description": "Add PGXS support for installing include files (Andrew Gierth)\n            This supports creating extension modules that depend on other modules. Formerly there was no easy way for the dependent module to find the referenced one's include files. Several existing contrib modules that define data types have been adjusted to install relevant files. Also, PL/Perl and PL/Python now install their include files, to support creation of transform modules for those languages.",
      "sinceVersion": "11.0",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Install errcodes.txt to allow extensions to access the list of error codes known to PostgreSQL",
      "description": "Install errcodes.txt to allow extensions to access the list of error codes known to PostgreSQL (Thomas Munro)",
      "sinceVersion": "11.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Convert documentation to DocBook XML",
      "description": "Convert documentation to DocBook XML (Peter Eisentraut, Alexander Lakhin, Jürgen Purtz)\n            The file names still use an sgml extension for compatibility with back branches.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut, Alexander Lakhin, Jürgen Purtz"
    },
    {
      "title": "Use stdbool.h to define type bool on platforms where it's suitable, which is most",
      "description": "Use stdbool.h to define type bool on platforms where it's suitable, which is most (Peter Eisentraut)\n            This eliminates a coding hazard for extension modules that need to include stdbool.h.",
      "sinceVersion": "11.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Overhaul the way that initial system catalog contents are defined",
      "description": "Overhaul the way that initial system catalog contents are defined (John Naylor)\n            The initial data is now represented in Perl data structures, making it much easier to manipulate mechanically.",
      "sinceVersion": "11.0",
      "contributor": "John Naylor"
    },
    {
      "title": "Prevent extensions from creating custom server parameters that take a quoted list of values",
      "description": "Prevent extensions from creating custom server parameters that take a quoted list of values (Tom Lane)\n            This cannot be supported at present because knowledge of the parameter's property would be required even before the extension is loaded.",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add ability to use channel binding when using SCRAM authentication",
      "description": "Add ability to use channel binding when using SCRAM authentication (Michael Paquier)\n            Channel binding is intended to prevent man-in-the-middle attacks, but SCRAM cannot prevent them unless it can be forced to be active. Unfortunately, there is no way to do that in libpq. Support for it is expected in future versions of libpq and in interfaces not built using libpq, e.g., JDBC.",
      "sinceVersion": "11.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Allow background workers to attach to databases that normally disallow connections",
      "description": "Allow background workers to attach to databases that normally disallow connections (Magnus Hagander)",
      "sinceVersion": "11.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Add support for hardware CRC calculations on ARMv8",
      "description": "Add support for hardware CRC calculations on ARMv8 (Yuqi Gu, Heikki Linnakangas, Thomas Munro)",
      "sinceVersion": "11.0",
      "contributor": "Yuqi Gu, Heikki Linnakangas, Thomas Munro"
    },
    {
      "title": "Add a generational memory allocator which is optimized for serial allocation/deallocation",
      "description": "Add a generational memory allocator which is optimized for serial allocation/deallocation (Tomas Vondra)\n            This reduces memory usage for logical decoding.",
      "sinceVersion": "11.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Make the computation of pg_class.reltuples by VACUUM consistent with its computation by ANALYZE",
      "description": "Make the computation of pg_class.reltuples by VACUUM consistent with its computation by ANALYZE (Tomas Vondra)",
      "sinceVersion": "11.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Update to use perltidy version `20170521`",
      "description": "Update to use perltidy version `20170521` (Tom Lane, Peter Eisentraut)",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane, Peter Eisentraut"
    },
    {
      "title": "Allow extension pg_prewarm to restore the previous shared buffer contents on startup",
      "description": "Allow extension pg_prewarm to restore the previous shared buffer contents on startup (Mithun Cy, Robert Haas)\n            This is accomplished by having pg_prewarm store the shared buffers' relation and block number data to disk occasionally during server operation, and at shutdown.",
      "sinceVersion": "11.0",
      "contributor": "Mithun Cy, Robert Haas"
    },
    {
      "title": "Add pg_trgm function `strict_word_similarity",
      "description": "Add pg_trgm function `strict_word_similarity()()` to compute the similarity of whole words (Alexander Korotkov)\n            The function `word_similarity()()` already existed for this purpose, but it was designed to find similar parts of words, while `strict_word_similarity()()` computes the similarity to whole words.",
      "sinceVersion": "11.0",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Allow btree_gin to index bool, bpchar, name and uuid data types",
      "description": "Allow btree_gin to index bool, bpchar, name and uuid data types (Matheus Oliveira)",
      "sinceVersion": "11.0",
      "contributor": "Matheus Oliveira"
    },
    {
      "title": "Allow cube and seg extensions to perform index-only scans using GiST indexes",
      "description": "Allow cube and seg extensions to perform index-only scans using GiST indexes (Andrey Borodin)",
      "sinceVersion": "11.0",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Allow retrieval of negative cube coordinates using the `~&gt;` operator",
      "description": "Allow retrieval of negative cube coordinates using the `~&gt;` operator (Alexander Korotkov)\n            This is useful for KNN-GiST searches when looking for coordinates in descending order.",
      "sinceVersion": "11.0",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Add Vietnamese letter handling to the unaccent extension",
      "description": "Add Vietnamese letter handling to the unaccent extension (Dang Minh Huong, Michael Paquier)",
      "sinceVersion": "11.0",
      "contributor": "Dang Minh Huong, Michael Paquier"
    },
    {
      "title": "Enhance amcheck to check that each heap tuple has an index entry",
      "description": "Enhance amcheck to check that each heap tuple has an index entry (Peter Geoghegan)",
      "sinceVersion": "11.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Have adminpack use the new default file system access roles",
      "description": "Have adminpack use the new default file system access roles (Stephen Frost)\n            Previously, only superusers could call adminpack functions; now role permissions are checked.",
      "sinceVersion": "11.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Widen pg_stat_statement's query ID to 64 bits",
      "description": "Widen pg_stat_statement's query ID to 64 bits (Robert Haas)\n            This greatly reduces the chance of query ID hash collisions. The query ID can now potentially display as a negative value.",
      "sinceVersion": "11.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Remove the contrib/start-scripts/osx scripts since they are no longer recommended",
      "description": "Remove the contrib/start-scripts/osx scripts since they are no longer recommended (use contrib/start-scripts/macos instead) (Tom Lane)",
      "sinceVersion": "11.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect expansion of tuples lacking recently-added columns",
      "description": "Fix incorrect expansion of tuples lacking recently-added columns (Andrew Dunstan, Amit Langote)\n          This is known to lead to crashes in triggers on tables with recently-added columns, and could have other symptoms as well.",
      "sinceVersion": "11.1",
      "contributor": "Andrew Dunstan, Amit Langote"
    },
    {
      "title": "Apply the tablespace specified for a partitioned index when creating a child index",
      "description": "Apply the tablespace specified for a partitioned index when creating a child index (Álvaro Herrera)\n          Previously, child indexes were always created in the default tablespace.",
      "sinceVersion": "11.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix NULL handling in parallel hashed multi-batch left joins",
      "description": "Fix NULL handling in parallel hashed multi-batch left joins (Andrew Gierth, Thomas Munro)\n          Outer-relation rows with null values of the hash key were omitted from the join result.",
      "sinceVersion": "11.1",
      "contributor": "Andrew Gierth, Thomas Munro"
    },
    {
      "title": "Fix incorrect processing of an array-type coercion expression appearing within a `CASE` clause that has a constant test expression",
      "description": "Fix incorrect processing of an array-type coercion expression appearing within a `CASE` clause that has a constant test expression (Tom Lane)",
      "sinceVersion": "11.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bugs with named or defaulted arguments in CALL argument lists",
      "description": "Fix bugs with named or defaulted arguments in CALL argument lists (Tom Lane, Pavel Stehule)",
      "sinceVersion": "11.1",
      "contributor": "Tom Lane, Pavel Stehule"
    },
    {
      "title": "Fix strictness check for strict aggregates with `ORDER BY` columns",
      "description": "Fix strictness check for strict aggregates with `ORDER BY` columns (Andrew Gierth, Andres Freund)\n          The strictness logic incorrectly ignored rows for which the `ORDER BY` value(s) were null.",
      "sinceVersion": "11.1",
      "contributor": "Andrew Gierth, Andres Freund"
    },
    {
      "title": "Prevent creation of a partition in a trigger attached to its parent table",
      "description": "Prevent creation of a partition in a trigger attached to its parent table (Amit Langote)\n          Ideally we'd allow that, but for the moment it has to be blocked to avoid crashes.",
      "sinceVersion": "11.1",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix problems with applying `ON COMMIT DELETE ROWS` to a partitioned temporary table",
      "description": "Fix problems with applying `ON COMMIT DELETE ROWS` to a partitioned temporary table (Amit Langote)",
      "sinceVersion": "11.1",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix character-class checks to not fail on Windows for Unicode characters above U+FFFF",
      "description": "Fix character-class checks to not fail on Windows for Unicode characters above U+FFFF (Tom Lane, Kenji Uno)\n          This bug affected full-text-search operations, as well as contrib/ltree and contrib/pg_trgm.",
      "sinceVersion": "11.1",
      "contributor": "Tom Lane, Kenji Uno"
    },
    {
      "title": "Ensure that the server will process already-received `NOTIFY` and `SIGTERM` interrupts before waiting for client input",
      "description": "Ensure that the server will process already-received `NOTIFY` and `SIGTERM` interrupts before waiting for client input (Jeff Janes, Tom Lane)",
      "sinceVersion": "11.1",
      "contributor": "Jeff Janes, Tom Lane"
    },
    {
      "title": "Fix memory leak in repeated SP-GiST index scans",
      "description": "Fix memory leak in repeated SP-GiST index scans (Tom Lane)\n          This is only known to amount to anything significant in cases where an exclusion constraint using SP-GiST receives many new index entries in a single command.",
      "sinceVersion": "11.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent starting the server with wal_level set to too low a value to support an existing replication slot",
      "description": "Prevent starting the server with wal_level set to too low a value to support an existing replication slot (Andres Freund)",
      "sinceVersion": "11.1",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix psql, as well as documentation examples, to call `PQconsumeInput",
      "description": "Fix psql, as well as documentation examples, to call `PQconsumeInput()()` before each `PQnotifies()()` call (Tom Lane)\n          This fixes cases in which psql would not report receipt of a `NOTIFY` message until after the next command.",
      "sinceVersion": "11.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_verify_checksums's determination of which files to check the checksums of",
      "description": "Fix pg_verify_checksums's determination of which files to check the checksums of (Michael Paquier)\n          In some cases it complained about files that are not expected to have checksums.",
      "sinceVersion": "11.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In contrib/pg_stat_statements, disallow the `pg_read_all_stats` role from executing `pg_stat_statements_reset",
      "description": "In contrib/pg_stat_statements, disallow the `pg_read_all_stats` role from executing `pg_stat_statements_reset()()` (Haribabu Kommi)\n          `pg_read_all_stats` is only meant to grant permission to read statistics, not to change them, so this grant was incorrect.\n          To cause this change to take effect, run `ALTER EXTENSION pg_stat_statements UPDATE` in each database where pg_stat_statements has been installed. (A database freshly created in 11.0 should not need this, but a database upgraded from a previous release probably still contains the old version of pg_stat_statements. The `UPDATE` command is harmless if the module was already updated.)",
      "sinceVersion": "11.1",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Rename red-black tree support functions to use `rbt` prefix not `rb` prefix",
      "description": "Rename red-black tree support functions to use `rbt` prefix not `rb` prefix (Tom Lane)\n          This avoids name collisions with Ruby functions, which broke PL/Ruby. It's hoped that there are no other affected extensions.",
      "sinceVersion": "11.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix build problems on macOS 10.14",
      "description": "Fix build problems on macOS 10.14 (Mojave) (Tom Lane)\n          Adjust configure to add an -isysroot switch to CPPFLAGS; without this, PL/Perl and PL/Tcl fail to configure or build on macOS 10.14. The specific sysroot used can be overridden at configure time or build time by setting the PG_SYSROOT variable in the arguments of configure or make.\n          It is now recommended that Perl-related extensions write `$(perl_includespec)` rather than `-I$(perl_archlibexp)/CORE` in their compiler flags. The latter continues to work on most platforms, but not recent macOS.\n          Also, it should no longer be necessary to specify --with-tclconfig manually to get PL/Tcl to build on recent macOS releases.",
      "sinceVersion": "11.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix MSVC build and regression-test scripts to work on recent Perl versions",
      "description": "Fix MSVC build and regression-test scripts to work on recent Perl versions (Andrew Dunstan)\n          Perl no longer includes the current directory in its search path by default; work around that.",
      "sinceVersion": "11.1",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "On Windows, allow the regression tests to be run by an Administrator account",
      "description": "On Windows, allow the regression tests to be run by an Administrator account (Andrew Dunstan)\n          To do this safely, pg_regress now gives up any such privileges at startup.",
      "sinceVersion": "11.1",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Update time zone data files to tzdata release 2018g for DST law changes in Chile, Fiji, Morocco, and Russia",
      "description": "Update time zone data files to tzdata release 2018g for DST law changes in Chile, Fiji, Morocco, and Russia (Volgograd), plus historical corrections for China, Hawaii, Japan, Macau, and North Korea.",
      "sinceVersion": "11.1",
      "contributor": null
    },
    {
      "title": "Fix recently-added timetz test case so it works when the USA is not observing daylight savings time",
      "description": "Fix recently-added timetz test case so it works when the USA is not observing daylight savings time (Tom Lane)",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix usage of complex connection-string parameters in pg_dump, pg_restore, clusterdb, reindexdb, and vacuumdb",
      "description": "Fix usage of complex connection-string parameters in pg_dump, pg_restore, clusterdb, reindexdb, and vacuumdb (Tom Lane)\n          The -d parameter of pg_dump and pg_restore, or the --maintenance-db parameter of the other programs mentioned, can be a “connection string” containing multiple connection parameters rather than just a database name. In cases where these programs need to initiate additional connections, such as parallel processing or processing of multiple databases, the connection string was forgotten and just the basic connection parameters (database name, host, port, and username) were used for the additional connections. This could lead to connection failures if the connection string included any other essential information, such as non-default SSL or GSS parameters. Worse, the connection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. (CVE-2020-25694)",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "When psql's \\connect command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used",
      "description": "When psql's \\connect command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used (Tom Lane)\n          This avoids cases where reconnection might fail due to omission of relevant parameters, such as non-default SSL or GSS options. Worse, the reconnection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. This is largely the same problem as just cited for pg_dump et al, although psql's behavior is more complex since the user may intentionally override some connection parameters. (CVE-2020-25694)",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent psql's \\gset command from modifying specially-treated variables",
      "description": "Prevent psql's \\gset command from modifying specially-treated variables (Noah Misch)\n          \\gset without a prefix would overwrite whatever variables the server told it to. Thus, a compromised server could set specially-treated variables such as PROMPT1, giving the ability to execute arbitrary shell code in the user's session.\n          The PostgreSQL Project thanks Nick Cleaton for reporting this problem. (CVE-2020-25696)",
      "sinceVersion": "11.10",
      "contributor": "Noah Misch"
    },
    {
      "title": "Prevent possible data loss from concurrent truncations of SLRU logs",
      "description": "Prevent possible data loss from concurrent truncations of SLRU logs (Noah Misch)\n          This rare problem would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "sinceVersion": "11.10",
      "contributor": "Noah Misch"
    },
    {
      "title": "Ensure that SLRU directories are properly fsync'd during checkpoints",
      "description": "Ensure that SLRU directories are properly fsync'd during checkpoints (Thomas Munro)\n          This prevents possible data loss in a subsequent operating system crash.",
      "sinceVersion": "11.10",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix ALTER ROLE for users with the `BYPASSRLS` attribute",
      "description": "Fix ALTER ROLE for users with the `BYPASSRLS` attribute (Tom Lane, Stephen Frost)\n          The `BYPASSRLS` attribute is only allowed to be changed by superusers, but other ALTER ROLE operations, such as password changes, should be allowed with only ordinary permission checks. The previous coding erroneously restricted all changes on such a role to superusers.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane, Stephen Frost"
    },
    {
      "title": "Ensure that ALTER TABLE ONLY ... ENABLE/DISABLE TRIGGER does not recurse to child tables",
      "description": "Ensure that ALTER TABLE ONLY ... ENABLE/DISABLE TRIGGER does not recurse to child tables (Álvaro Herrera)\n          Previously the `ONLY` flag was ignored.",
      "sinceVersion": "11.10",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix handling of expressions in CREATE TABLE LIKE with inheritance",
      "description": "Fix handling of expressions in CREATE TABLE LIKE with inheritance (Tom Lane)\n          If a CREATE TABLE command uses both `LIKE` and traditional inheritance, column references in `CHECK` constraints and expression indexes that came from a `LIKE` parent table tended to get mis-numbered, resulting in wrong answers and/or bizarre error messages. The same could happen in `GENERATED` expressions, in branches that have that feature.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow DROP INDEX CONCURRENTLY on a partitioned table",
      "description": "Disallow DROP INDEX CONCURRENTLY on a partitioned table (Álvaro Herrera, Michael Paquier)\n          This case failed anyway, but with a confusing error message.",
      "sinceVersion": "11.10",
      "contributor": "Álvaro Herrera, Michael Paquier"
    },
    {
      "title": "Allow LOCK TABLE to succeed on a self-referential view",
      "description": "Allow LOCK TABLE to succeed on a self-referential view (Tom Lane)\n          It previously threw an error complaining about infinite recursion, but there seems no need to disallow the case.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix off-by-one conversion of negative years to BC dates in `to_date",
      "description": "Fix off-by-one conversion of negative years to BC dates in `to_date()()` and `to_timestamp()()` (Dar Alathar-Yemen, Tom Lane)\n          Also, arrange for the combination of a negative year and an explicit “BC” marker to cancel out and produce AD.",
      "sinceVersion": "11.10",
      "contributor": "Dar Alathar-Yemen, Tom Lane"
    },
    {
      "title": "Ensure that standby servers will archive WAL timeline history files when archive_mode is set to `always`",
      "description": "Ensure that standby servers will archive WAL timeline history files when archive_mode is set to `always` (Grigory Smolkin, Fujii Masao)\n          This oversight could lead to failure of subsequent PITR recovery attempts.",
      "sinceVersion": "11.10",
      "contributor": "Grigory Smolkin, Fujii Masao"
    },
    {
      "title": "Fix “cache lookup failed for relation 0” failures in logical replication workers",
      "description": "Fix “cache lookup failed for relation 0” failures in logical replication workers (Tom Lane)\n          The real-world impact is small, since the failure is unlikely, and if it does happen the worker would just exit and be restarted.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent logical replication workers from sending redundant ping requests",
      "description": "Prevent logical replication workers from sending redundant ping requests (Tom Lane)",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "During “smart” shutdown, don't terminate background processes until all client",
      "description": "During “smart” shutdown, don't terminate background processes until all client (foreground) sessions are done (Tom Lane)\n          The previous behavior broke parallel query processing, since the postmaster would terminate parallel workers and refuse to launch any new ones. It also caused autovacuum to cease functioning, which could have dire long-term effects if the surviving client sessions make a lot of data changes.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid recursive consumption of stack space while processing signals in the postmaster",
      "description": "Avoid recursive consumption of stack space while processing signals in the postmaster (Tom Lane)\n          Heavy use of parallel processing has been observed to cause postmaster crashes due to too many concurrent signals requesting creation of a parallel worker process.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid running atexit handlers when exiting due to SIGQUIT",
      "description": "Avoid running atexit handlers when exiting due to SIGQUIT (Kyotaro Horiguchi, Tom Lane)\n          Most server processes followed this practice already, but the archiver process was overlooked. Backends that were still waiting for a client startup packet got it wrong, too.",
      "sinceVersion": "11.10",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "Avoid failure when SQL function inlining changes the shape of a potentially-hashable subplan comparison expression",
      "description": "Avoid failure when SQL function inlining changes the shape of a potentially-hashable subplan comparison expression (Tom Lane)",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "While building or re-building an index, tolerate the appearance of new HOT chains due to concurrent updates",
      "description": "While building or re-building an index, tolerate the appearance of new HOT chains due to concurrent updates (Anastasia Lubennikova, Álvaro Herrera)\n          This oversight could lead to “failed to find parent tuple for heap-only tuple” errors.",
      "sinceVersion": "11.10",
      "contributor": "Anastasia Lubennikova, Álvaro Herrera"
    },
    {
      "title": "Fix failure of parallel B-tree index scans when the index condition is unsatisfiable",
      "description": "Fix failure of parallel B-tree index scans when the index condition is unsatisfiable (James Hunter)",
      "sinceVersion": "11.10",
      "contributor": "James Hunter"
    },
    {
      "title": "Ensure that data is detoasted before being inserted into a BRIN index",
      "description": "Ensure that data is detoasted before being inserted into a BRIN index (Tomas Vondra)\n          Index entries are not supposed to contain out-of-line TOAST pointers, but BRIN didn't get that memo. This could lead to errors like “missing chunk number 0 for toast value NNN”. (If you are faced with such an error from an existing index, REINDEX should be enough to fix it.)",
      "sinceVersion": "11.10",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Handle concurrent desummarization correctly during BRIN index scans",
      "description": "Handle concurrent desummarization correctly during BRIN index scans (Alexander Lakhin, Álvaro Herrera)\n          Previously, if a page range was desummarized at just the wrong time, an index scan might falsely raise an error indicating index corruption.",
      "sinceVersion": "11.10",
      "contributor": "Alexander Lakhin, Álvaro Herrera"
    },
    {
      "title": "Fix rare “lost saved point in index” errors in scans of multicolumn GIN indexes",
      "description": "Fix rare “lost saved point in index” errors in scans of multicolumn GIN indexes (Tom Lane)",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unportable use of `getnameinfo",
      "description": "Fix unportable use of `getnameinfo()()` in pg_hba_file_rules view (Tom Lane)\n          On FreeBSD 11, and possibly other platforms, the view's address and netmask columns were always null due to this error.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash if debug_query_string is NULL when starting a parallel worker",
      "description": "Avoid crash if debug_query_string is NULL when starting a parallel worker (Noah Misch)",
      "sinceVersion": "11.10",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix use-after-free hazard when an event trigger monitors an ALTER TABLE operation",
      "description": "Fix use-after-free hazard when an event trigger monitors an ALTER TABLE operation (Jehan-Guillaume de Rorthais)",
      "sinceVersion": "11.10",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix incorrect error message about inconsistent moving-aggregate data types",
      "description": "Fix incorrect error message about inconsistent moving-aggregate data types (Jeff Janes)",
      "sinceVersion": "11.10",
      "contributor": "Jeff Janes"
    },
    {
      "title": "Avoid lockup when a parallel worker reports a very long error message",
      "description": "Avoid lockup when a parallel worker reports a very long error message (Vignesh C)",
      "sinceVersion": "11.10",
      "contributor": "Vignesh C"
    },
    {
      "title": "Avoid unnecessary failure when transferring very large payloads through shared memory queues",
      "description": "Avoid unnecessary failure when transferring very large payloads through shared memory queues (Markus Wanner)",
      "sinceVersion": "11.10",
      "contributor": "Markus Wanner"
    },
    {
      "title": "Fix incorrect handling of template function attributes in JIT code generation",
      "description": "Fix incorrect handling of template function attributes in JIT code generation (Andres Freund)\n          This has been shown to cause crashes on `s390x`, and very possibly there are other cases on other platforms.",
      "sinceVersion": "11.10",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix relation cache memory leaks with RLS policies",
      "description": "Fix relation cache memory leaks with RLS policies (Tom Lane)",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart",
      "description": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart (Tom Lane)",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leaks in PL/pgsql's CALL processing",
      "description": "Fix memory leaks in PL/pgsql's CALL processing (Pavel Stehule, Tom Lane)",
      "sinceVersion": "11.10",
      "contributor": "Pavel Stehule, Tom Lane"
    },
    {
      "title": "Fix ecpg library's per-thread initialization logic for Windows",
      "description": "Fix ecpg library's per-thread initialization logic for Windows (Tom Lane, Alexander Lakhin)\n          Multi-threaded ecpg applications could suffer rare misbehavior due to incorrect locking.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane, Alexander Lakhin"
    },
    {
      "title": "On Windows, make psql read the output of a backtick command in text mode, not binary mode",
      "description": "On Windows, make psql read the output of a backtick command in text mode, not binary mode (Tom Lane)\n          This ensures proper handling of newlines.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that pg_dump collects per-column information about extension configuration tables",
      "description": "Ensure that pg_dump collects per-column information about extension configuration tables (Fabrízio de Royes Mello, Tom Lane)\n          Failure to do this led to crashes when specifying --inserts, or underspecified (though usually correct) COPY commands when using COPY to reload the tables' data.",
      "sinceVersion": "11.10",
      "contributor": "Fabrízio de Royes Mello, Tom Lane"
    },
    {
      "title": "Make pg_upgrade check for pre-existence of tablespace directories in the target cluster",
      "description": "Make pg_upgrade check for pre-existence of tablespace directories in the target cluster (Bruce Momjian)",
      "sinceVersion": "11.10",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Fix potential memory leak in contrib/pgcrypto",
      "description": "Fix potential memory leak in contrib/pgcrypto (Michael Paquier)",
      "sinceVersion": "11.10",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add check for an unlikely failure case in contrib/pgcrypto",
      "description": "Add check for an unlikely failure case in contrib/pgcrypto (Daniel Gustafsson)",
      "sinceVersion": "11.10",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station",
      "description": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station (Antarctica); plus historical corrections for France, Hungary, Monaco, and Palestine.",
      "sinceVersion": "11.10",
      "contributor": null
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2020d",
      "description": "Sync our copy of the timezone library with IANA tzcode release 2020d (Tom Lane)\n          This absorbs upstream's change of zic's default output option from “fat” to “slim”. That's just cosmetic for our purposes, as we continue to select the “fat” mode in pre-v13 branches. This change also ensures that `strftime()()` does not change errno unless it fails.",
      "sinceVersion": "11.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix recently-introduced race conditions in LISTEN/NOTIFY queue handling",
      "description": "Fix recently-introduced race conditions in LISTEN/NOTIFY queue handling (Tom Lane)\n          A newly-listening backend could attempt to read SLRU pages that were in process of being truncated, possibly causing an error.\n          The queue tail pointer could become set to a value that's not equal to the queue position of any backend, resulting in effective disabling of the queue truncation logic. Continued use of NOTIFY then led to queue-fill warnings, and eventually to inability to send any more notifies until the server is restarted.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix integer-overflow cases in `substring",
      "description": "Fix integer-overflow cases in `substring()()` functions (Tom Lane, Pavel Stehule)\n          If the specified starting index and length overflow an integer when added together, `substring()()` misbehaved, either throwing a bogus “negative substring length” error for a case that should succeed, or failing to complain that a negative length is negative (and instead returning the whole string, in most cases).",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane, Pavel Stehule"
    },
    {
      "title": "Fix information leakage in constraint-violation error messages",
      "description": "Fix information leakage in constraint-violation error messages (Heikki Linnakangas)\n          If an UPDATE command attempts to move a row to a different partition but finds that it violates some constraint on the new partition, and the columns in that partition are in different physical positions than in the parent table, the error message could reveal the contents of columns that the user does not have `SELECT` privilege on. (CVE-2021-3393)",
      "sinceVersion": "11.11",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix CREATE INDEX CONCURRENTLY to wait for concurrent prepared transactions",
      "description": "Fix CREATE INDEX CONCURRENTLY to wait for concurrent prepared transactions (Andrey Borodin)\n          At the point where CREATE INDEX CONCURRENTLY waits for all concurrent transactions to complete so that it can see rows they inserted, it must also wait for all prepared transactions to complete, for the same reason. Its failure to do so meant that rows inserted by prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. In installations that have enabled prepared transactions (max_prepared_transactions &gt; 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "sinceVersion": "11.11",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Avoid crash when a `CALL` or `DO` statement that performs a transaction rollback is executed via extended query protocol",
      "description": "Avoid crash when a `CALL` or `DO` statement that performs a transaction rollback is executed via extended query protocol (Thomas Munro, Tom Lane)\n          In PostgreSQL 13, this case reliably caused a null-pointer dereference. In earlier versions the bug seems to have no visible symptoms, but it's not quite clear that it could never cause a problem.",
      "sinceVersion": "11.11",
      "contributor": "Thomas Munro, Tom Lane"
    },
    {
      "title": "Fix partition pruning logic to handle asymmetric hash partition sets",
      "description": "Fix partition pruning logic to handle asymmetric hash partition sets (Tom Lane)\n          If a hash-partitioned table has unequally-sized partitions (that is, varying modulus values), or it lacks partitions for some remainder values, then the planner's pruning logic could mistakenly conclude that some partitions don't need to be scanned, leading to failure to find rows that the query should find.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node",
      "description": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node (Tom Lane)\n          This case is unsupported (in general, a cursor using `ORDER BY` is not guaranteed to be simply updatable); but the code previously did not reject it, and could silently give false matches.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node",
      "description": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node (David Geier)",
      "sinceVersion": "11.11",
      "contributor": "David Geier"
    },
    {
      "title": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level",
      "description": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level (Tom Lane)\n          This oversight could lead to “failed to build any `N`-way joins” planner errors.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Be more careful about whether index AMs support mark/restore",
      "description": "Be more careful about whether index AMs support mark/restore (Andrew Gierth)\n          This prevents errors about missing support functions in rare edge cases.",
      "sinceVersion": "11.11",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Adjust settings to make it more difficult to run out of DSM slots during heavy usage of parallel queries",
      "description": "Adjust settings to make it more difficult to run out of DSM slots during heavy usage of parallel queries (Thomas Munro)",
      "sinceVersion": "11.11",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix overestimate of the amount of shared memory needed for parallel queries",
      "description": "Fix overestimate of the amount of shared memory needed for parallel queries (Takayuki Tsunakawa)",
      "sinceVersion": "11.11",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "Fix ALTER DEFAULT PRIVILEGES to handle duplicated arguments safely",
      "description": "Fix ALTER DEFAULT PRIVILEGES to handle duplicated arguments safely (Michael Paquier)\n          Duplicate role or schema names within the same command could lead to “tuple already updated by self” errors or unique-constraint violations.",
      "sinceVersion": "11.11",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Flush ACL-related caches when pg_authid changes",
      "description": "Flush ACL-related caches when pg_authid changes (Noah Misch)\n          This change ensures that permissions-related decisions will promptly reflect the results of ALTER ROLE ... [NO] INHERIT.",
      "sinceVersion": "11.11",
      "contributor": "Noah Misch"
    },
    {
      "title": "Prevent misprocessing of ambiguous CREATE TABLE LIKE clauses",
      "description": "Prevent misprocessing of ambiguous CREATE TABLE LIKE clauses (Tom Lane)\n          A `LIKE` clause is re-examined after initial creation of the new table, to handle importation of indexes and such. It was possible for this re-examination to find a different table of the same name, causing unexpected behavior; one example is where the new table is a temporary table of the same name as the `LIKE` target.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rearrange order of operations in CREATE TABLE LIKE so that indexes are cloned before building foreign key constraints",
      "description": "Rearrange order of operations in CREATE TABLE LIKE so that indexes are cloned before building foreign key constraints (Tom Lane)\n          This fixes the case where a self-referential foreign key constraint declared in the outer CREATE TABLE depends on an index that's coming from the `LIKE` clause.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow CREATE STATISTICS on system catalogs",
      "description": "Disallow CREATE STATISTICS on system catalogs (Tomas Vondra)",
      "sinceVersion": "11.11",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Disallow converting an inheritance child table to a view",
      "description": "Disallow converting an inheritance child table to a view (Tom Lane)",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that disk space allocated for a dropped relation is released promptly at commit",
      "description": "Ensure that disk space allocated for a dropped relation is released promptly at commit (Thomas Munro)\n          Previously, if the dropped relation spanned multiple 1GB segments, only the first segment was truncated immediately. Other segments were simply unlinked, which doesn't authorize the kernel to release the storage so long as any other backends still have the files open.",
      "sinceVersion": "11.11",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Prevent dropping a tablespace that is referenced by a partitioned relation, but is not used for any actual storage",
      "description": "Prevent dropping a tablespace that is referenced by a partitioned relation, but is not used for any actual storage (Álvaro Herrera)\n          Previously this was allowed, but subsequent operations on the partitioned relation would fail.",
      "sinceVersion": "11.11",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix handling of backslash-escaped multibyte characters in COPY FROM",
      "description": "Fix handling of backslash-escaped multibyte characters in COPY FROM (Heikki Linnakangas)\n          A backslash followed by a multibyte character was not handled correctly. In some client character encodings, this could lead to misinterpreting part of a multibyte character as a field separator or end-of-copy-data marker.",
      "sinceVersion": "11.11",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid preallocating executor hash tables in EXPLAIN without `ANALYZE`",
      "description": "Avoid preallocating executor hash tables in EXPLAIN without `ANALYZE` (Alexey Bashtanov)",
      "sinceVersion": "11.11",
      "contributor": "Alexey Bashtanov"
    },
    {
      "title": "Allow the jsonb concatenation operator to handle all combinations of JSON data types",
      "description": "Allow the jsonb concatenation operator to handle all combinations of JSON data types (Tom Lane)\n          We can concatenate two JSON objects or two JSON arrays. Handle other cases by wrapping non-array inputs in one-element arrays, then performing an array concatenation. Previously, some combinations of inputs followed this rule but others arbitrarily threw an error.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression",
      "description": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression (Tom Lane)\n          This error could cause the quantifier to act non-greedy, that is behave like a `*?` quantifier would do in full regular expressions.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix numeric `power",
      "description": "Fix numeric `power()()` for the case where the exponent is exactly `INT_MIN` (-2147483648) (Dean Rasheed)\n          Previously, a result with no significant digits was produced.",
      "sinceVersion": "11.11",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log",
      "description": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log (Noah Misch)\n          The wraparound point typically falls in the middle of a page, which must be rounded off to a page boundary, and that was not done correctly. No issue could arise unless an installation had gotten to within one page of SLRU overflow, which is unlikely in a properly-functioning system. If this did happen, it would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "sinceVersion": "11.11",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix memory leak in walsender processes while sending new snapshots for logical decoding",
      "description": "Fix memory leak in walsender processes while sending new snapshots for logical decoding (Amit Kapila)",
      "sinceVersion": "11.11",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Fix walsender to accept additional commands after terminating replication",
      "description": "Fix walsender to accept additional commands after terminating replication (Jeff Davis)",
      "sinceVersion": "11.11",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Ensure detection of deadlocks between hot standby backends and the startup",
      "description": "Ensure detection of deadlocks between hot standby backends and the startup (WAL-application) process (Fujii Masao)\n          The startup process did not run the deadlock detection code, so that in situations where the startup process is last to join a circular wait situation, the deadlock might never be recognized.",
      "sinceVersion": "11.11",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence",
      "description": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence (Tom Lane)\n          Previously, there was a race condition whereby a child process that had requested a background worker just before shutdown could wait indefinitely, preventing shutdown from completing.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix portability problem in parsing of recovery_target_xid values",
      "description": "Fix portability problem in parsing of recovery_target_xid values (Michael Paquier)\n          The target XID is potentially 64 bits wide, but it was parsed with `strtoul()()`, causing misbehavior on platforms where long is 32 bits (such as Windows).",
      "sinceVersion": "11.11",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid trying to use parallel index build in a standalone backend",
      "description": "Avoid trying to use parallel index build in a standalone backend (Yulin Pei)",
      "sinceVersion": "11.11",
      "contributor": "Yulin Pei"
    },
    {
      "title": "Allow index AMs to support included columns without necessarily supporting multiple key columns",
      "description": "Allow index AMs to support included columns without necessarily supporting multiple key columns (Tom Lane)",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid assertion failure during parallel aggregation of an aggregate with a non-strict deserialization function",
      "description": "Avoid assertion failure during parallel aggregation of an aggregate with a non-strict deserialization function (Andrew Gierth)\n          No such aggregate functions exist in core PostgreSQL, but some extensions such as PostGIS provide some. The mistake is harmless anyway in a non-assert build.",
      "sinceVersion": "11.11",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Avoid assertion failure in `pg_get_functiondef",
      "description": "Avoid assertion failure in `pg_get_functiondef()()` when examining a function with a `TRANSFORM` option (Tom Lane)",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data structure misallocation in PL/pgSQL's CALL statement",
      "description": "Fix data structure misallocation in PL/pgSQL's CALL statement (Tom Lane)\n          A CALL in a PL/pgSQL procedure, to another procedure that has OUT parameters, would fail if the called procedure did a COMMIT or ROLLBACK.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql, re-allow including a password in a `connection_string` argument of a \\connect command",
      "description": "In psql, re-allow including a password in a `connection_string` argument of a \\connect command (Tom Lane)\n          This used to work, but a recent bug fix caused the password to be ignored (resulting in prompting for a password).",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix assorted bugs in psql's \\help command",
      "description": "Fix assorted bugs in psql's \\help command (Kyotaro Horiguchi, Tom Lane)\n          \\help with two argument words failed to find a command description using only the first word, for example `\\help reset all` should show the help for RESET but did not. Also, \\help often failed to invoke the pager when it should. It also leaked memory.",
      "sinceVersion": "11.11",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "In pg_dump, ensure that the restore script runs ALTER PUBLICATION ADD TABLE commands as the owner of the publication, and similarly runs ALTER INDEX ATTACH PARTITION commands as the owner of the partitioned index",
      "description": "In pg_dump, ensure that the restore script runs ALTER PUBLICATION ADD TABLE commands as the owner of the publication, and similarly runs ALTER INDEX ATTACH PARTITION commands as the owner of the partitioned index (Tom Lane)\n          Previously, these commands would be run by the role that started the restore script; which will usually work, but in corner cases that role might not have adequate permissions.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump to handle `WITH GRANT OPTION` in an extension's initial privileges",
      "description": "Fix pg_dump to handle `WITH GRANT OPTION` in an extension's initial privileges (Noah Misch)\n          If an extension's script creates an object and grants privileges on it with grant option, then later the user revokes such privileges, pg_dump would generate incorrect SQL for reproducing the situation. (Few if any extensions do this today.)",
      "sinceVersion": "11.11",
      "contributor": "Noah Misch"
    },
    {
      "title": "In pg_rewind, ensure that all WAL is accounted for when rewinding a standby server",
      "description": "In pg_rewind, ensure that all WAL is accounted for when rewinding a standby server (Ian Barwick, Heikki Linnakangas)",
      "sinceVersion": "11.11",
      "contributor": "Ian Barwick, Heikki Linnakangas"
    },
    {
      "title": "In pgbench, disallow a digit as the first character of a variable name",
      "description": "In pgbench, disallow a digit as the first character of a variable name (Fabien Coelho)\n          This prevents trying to substitute variables into timestamp literal values, which may contain strings like `12:34`.",
      "sinceVersion": "11.11",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Report the correct database name in connection failure error messages from some client programs",
      "description": "Report the correct database name in connection failure error messages from some client programs (Álvaro Herrera)\n          If the database name was defaulted rather than given on the command line, pg_dumpall, pgbench, oid2name, and vacuumlo would produce misleading error messages after a connection failure.",
      "sinceVersion": "11.11",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix memory leak in contrib/auto_explain",
      "description": "Fix memory leak in contrib/auto_explain (Japin Li)\n          Memory consumed while producing the `EXPLAIN` output was not freed until the end of the current transaction (for a top-level statement) or the end of the surrounding statement (for a nested statement). This was particularly a problem with log_nested_statements enabled.",
      "sinceVersion": "11.11",
      "contributor": "Japin Li"
    },
    {
      "title": "In contrib/postgres_fdw, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped",
      "description": "In contrib/postgres_fdw, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped (Bharath Rupireddy)\n          Open connections that depend on a dropped user mapping or foreign server can no longer be referenced, but formerly they were kept around anyway for the duration of the local session.",
      "sinceVersion": "11.11",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "In contrib/pgcrypto, check for error returns from OpenSSL's EVP functions",
      "description": "In contrib/pgcrypto, check for error returns from OpenSSL's EVP functions (Michael Paquier)\n          We do not really expect errors here, but this change silences warnings from static analysis tools.",
      "sinceVersion": "11.11",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Make contrib/pg_prewarm more robust when the cluster is shut down before prewarming is complete",
      "description": "Make contrib/pg_prewarm more robust when the cluster is shut down before prewarming is complete (Tom Lane)\n          Previously, autoprewarm would rewrite its status file with only the block numbers that it had managed to load so far, thus perhaps largely disabling the prewarm functionality in the next startup. Instead, suppress status file updates until the initial loading pass is complete.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/pg_trgm's GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items",
      "description": "In contrib/pg_trgm's GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items (Andrew Gierth, Alexander Korotkov)",
      "sinceVersion": "11.11",
      "contributor": "Andrew Gierth, Alexander Korotkov"
    },
    {
      "title": "Fix miscalculation of timeouts in contrib/pg_prewarm and contrib/postgres_fdw",
      "description": "Fix miscalculation of timeouts in contrib/pg_prewarm and contrib/postgres_fdw (Alexey Kondratov, Tom Lane)\n          The main loop in contrib/pg_prewarm's autoprewarm parent process underestimated its desired sleep time by a factor of 1000, causing it to consume much more CPU than intended. When waiting for a result from a remote server, contrib/postgres_fdw overestimated the desired timeout by a factor of 1000 (though this error had been mitigated by imposing a clamp to 60 seconds).\n          Both of these errors stemmed from incorrectly converting seconds-and-microseconds to milliseconds. Introduce a new API `TimestampDifferenceMilliseconds()()` to make it easier to get this right in the future.",
      "sinceVersion": "11.11",
      "contributor": "Alexey Kondratov, Tom Lane"
    },
    {
      "title": "Improve configure's heuristics for selecting PG_SYSROOT on macOS",
      "description": "Improve configure's heuristics for selecting PG_SYSROOT on macOS (Tom Lane)\n          The new method is more likely to produce desirable results when Xcode is newer than the underlying operating system. Choosing a sysroot that does not match the OS version may result in nonfunctional executables.",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "While building on macOS, specify -isysroot in link steps as well as compile steps",
      "description": "While building on macOS, specify -isysroot in link steps as well as compile steps (James Hilliard)\n          This likewise improves the results when Xcode is out of sync with the operating system.",
      "sinceVersion": "11.11",
      "contributor": "James Hilliard"
    },
    {
      "title": "Fix JIT compilation to be compatible with LLVM 11 and LLVM 12",
      "description": "Fix JIT compilation to be compatible with LLVM 11 and LLVM 12 (Andres Freund)",
      "sinceVersion": "11.11",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix potential mishandling of references to boolean variables in JIT expression compilation",
      "description": "Fix potential mishandling of references to boolean variables in JIT expression compilation (Andres Freund)\n          No field reports attributable to this have been seen, but it seems likely that it could cause problems on some architectures.",
      "sinceVersion": "11.11",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix compile failure with ICU 68 and later",
      "description": "Fix compile failure with ICU 68 and later (Tom Lane)",
      "sinceVersion": "11.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2021a for DST law changes in Russia",
      "description": "Update time zone data files to tzdata release 2021a for DST law changes in Russia (Volgograd zone) and South Sudan, plus historical corrections for Australia, Bahamas, Belize, Bermuda, Ghana, Israel, Kenya, Nigeria, Palestine, Seychelles, and Vanuatu.\n          Notably, the Australia/Currie zone has been corrected to the point where it is identical to Australia/Hobart.",
      "sinceVersion": "11.11",
      "contributor": null
    },
    {
      "title": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists",
      "description": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists (Tom Lane)\n          If the `UPDATE` list contains any multi-column sub-selects (which give rise to junk columns in addition to the results proper), the `UPDATE` path would end up storing tuples that include the values of the extra junk columns. That's fairly harmless in the short run, but if new columns are added to the table then the values would become accessible, possibly leading to malfunctions if they don't match the datatypes of the added columns.\n          In addition, in versions supporting cross-partition updates, a cross-partition update triggered by such a case had the reverse problem: the junk columns were removed from the target list, typically causing an immediate crash due to malfunction of the multi-column sub-select mechanism. (CVE-2021-32028)",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent integer overflows in array subscripting calculations",
      "description": "Prevent integer overflows in array subscripting calculations (Tom Lane)\n          The array code previously did not complain about cases where an array's lower bound plus length overflows an integer. This resulted in later entries in the array becoming inaccessible (since their subscripts could not be written as integers), but more importantly it confused subsequent assignment operations. This could lead to memory overwrites, with ensuing crashes or unwanted data modifications. (CVE-2021-32027)",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possibly-incorrect computation of UPDATE ... RETURNING outputs for joined cross-partition updates",
      "description": "Fix possibly-incorrect computation of UPDATE ... RETURNING outputs for joined cross-partition updates (Amit Langote, Etsuro Fujita)\n          If an UPDATE for a partitioned table caused a row to be moved to another partition with a physically different row type (for example, one with a different set of dropped columns), computation of `RETURNING` results for that row could produce errors or wrong answers. No error is observed unless the UPDATE involves other tables being joined to the target table. (CVE-2021-32029)",
      "sinceVersion": "11.12",
      "contributor": "Amit Langote, Etsuro Fujita"
    },
    {
      "title": "Fix adjustment of constraint deferrability properties in partitioned tables",
      "description": "Fix adjustment of constraint deferrability properties in partitioned tables (Álvaro Herrera)\n          When applied to a foreign-key constraint of a partitioned table, ALTER TABLE ... ALTER CONSTRAINT failed to adjust the `DEFERRABLE` and/or `INITIALLY DEFERRED` markings of the constraints and triggers of leaf partitions. This led to unexpected behavior of such constraints. After updating to this version, any misbehaving partitioned tables can be fixed by executing a new ALTER command to set the desired properties.\n          This change also disallows applying such an ALTER directly to the constraints of leaf partitions. The only supported case is for the whole partitioning hierarchy to have identical constraint properties, so such ALTERs must be applied at the partition root.",
      "sinceVersion": "11.12",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Forbid marking an identity column as nullable",
      "description": "Forbid marking an identity column as nullable (Vik Fearing)\n          `GENERATED ... AS IDENTITY` implies `NOT NULL`, so don't allow it to be combined with an explicit `NULL` specification.",
      "sinceVersion": "11.12",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Allow `ALTER ROLE/DATABASE ... SET` to set the role, session_authorization, and temp_buffers parameters",
      "description": "Allow `ALTER ROLE/DATABASE ... SET` to set the role, session_authorization, and temp_buffers parameters (Tom Lane)\n          Previously, over-eager validity checks might reject these commands, even if the values would have worked when used later. This created a command ordering hazard for dump/reload and upgrade scenarios.",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type",
      "description": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type (Tom Lane)\n          This led to a parse tree in which the `COLLATE` appears to be applied to a non-collatable value. While that normally has no real impact (since `COLLATE` has no effect at runtime), it was possible to construct views that would be rejected during dump/reload.",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow calling window functions and procedures via the “fast path” wire protocol message",
      "description": "Disallow calling window functions and procedures via the “fast path” wire protocol message (Tom Lane)\n          Only plain functions are supported here. While trying to call an aggregate function failed already, calling a window function would crash, and calling a procedure would work only if the procedure did no transaction control.",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Extend `pg_identify_object_as_address",
      "description": "Extend `pg_identify_object_as_address()()` to support event triggers (Joel Jacobson)",
      "sinceVersion": "11.12",
      "contributor": "Joel Jacobson"
    },
    {
      "title": "Fix `to_char",
      "description": "Fix `to_char()()`'s handling of Roman-numeral month format codes with negative intervals (Julien Rouhaud)\n          Previously, such cases would usually cause a crash.",
      "sinceVersion": "11.12",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Check that the argument of `pg_import_system_collations",
      "description": "Check that the argument of `pg_import_system_collations()()` is a valid schema OID (Tom Lane)",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use of uninitialized value while parsing an `\\{`m`,n`\\} quantifier in a BRE-mode regular expression",
      "description": "Fix use of uninitialized value while parsing an `\\{`m`,n`\\} quantifier in a BRE-mode regular expression (Tom Lane)\n          This error could cause the quantifier to act non-greedy, that is behave like an `{`m`,n`}? quantifier would do in full regular expressions.",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't ignore system columns when estimating the number of groups using extended statistics",
      "description": "Don't ignore system columns when estimating the number of groups using extended statistics (Tomas Vondra)\n          This led to strange estimates for queries such as `SELECT ... GROUP BY a, b, ctid`.",
      "sinceVersion": "11.12",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix",
      "description": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix (Tom Lane)\n          This typically led to a `NaN` selectivity value, causing assertion failures or strange planner behavior.",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans",
      "description": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans (Tomas Vondra)\n          If the page range size used by a BRIN index isn't a power of two, there were corner cases in which a bitmap scan could try to fetch pages past the actual end of the table, leading to “could not open file” errors.",
      "sinceVersion": "11.12",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL",
      "description": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL (Soumyadeep Chakraborty, Jimmy Yih, Kevin Yeap)\n          This error could lead to subsequent WAL records being written under the wrong timeline ID, leading to consistency problems, or even complete failure to be able to restart the server, later on.",
      "sinceVersion": "11.12",
      "contributor": "Soumyadeep Chakraborty, Jimmy Yih, Kevin Yeap"
    },
    {
      "title": "Ensure that locks are released while shutting down a standby server's startup process",
      "description": "Ensure that locks are released while shutting down a standby server's startup process (Fujii Masao)\n          When a standby server is shut down while still in recovery, some locks might be left held. This causes assertion failures in debug builds; it's unclear whether any serious consequence could occur in production builds.",
      "sinceVersion": "11.12",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix crash when a logical replication worker does ALTER SUBSCRIPTION REFRESH",
      "description": "Fix crash when a logical replication worker does ALTER SUBSCRIPTION REFRESH (Peter Smith)\n          The core code won't do this, but a replica trigger could.",
      "sinceVersion": "11.12",
      "contributor": "Peter Smith"
    },
    {
      "title": "Ensure we default to wal_sync_method = `fdatasync` on recent FreeBSD",
      "description": "Ensure we default to wal_sync_method = `fdatasync` on recent FreeBSD (Thomas Munro)\n          FreeBSD 13 supports `open_datasync`, which would normally become the default choice. However, it's unclear whether that is actually an improvement for Postgres, so preserve the existing default for now.",
      "sinceVersion": "11.12",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Ensure we finish cleaning up when interrupted while detaching a DSM segment",
      "description": "Ensure we finish cleaning up when interrupted while detaching a DSM segment (Thomas Munro)\n          This error could result in temporary files not being cleaned up promptly after a parallel query.",
      "sinceVersion": "11.12",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix memory leak while initializing server's SSL parameters",
      "description": "Fix memory leak while initializing server's SSL parameters (Michael Paquier)\n          This is ordinarily insignificant, but if the postmaster is repeatedly sent SIGHUP signals, the leak can build up over time.",
      "sinceVersion": "11.12",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix assorted minor memory leaks in the server",
      "description": "Fix assorted minor memory leaks in the server (Tom Lane, Andres Freund)",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane, Andres Freund"
    },
    {
      "title": "Fix failure when a PL/pgSQL DO block makes use of both composite-type variables and transaction control",
      "description": "Fix failure when a PL/pgSQL DO block makes use of both composite-type variables and transaction control (Tom Lane)\n          Previously, such cases led to errors about leaked tuple descriptors.",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received",
      "description": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received (Tom Lane)",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "When initdb prints instructions about how to start the server, make the path shown for pg_ctl use backslash separators on Windows",
      "description": "When initdb prints instructions about how to start the server, make the path shown for pg_ctl use backslash separators on Windows (Nitin Jadhav)",
      "sinceVersion": "11.12",
      "contributor": "Nitin Jadhav"
    },
    {
      "title": "Fix psql to restore the previous behavior of `\\connect service=`something``",
      "description": "Fix psql to restore the previous behavior of `\\connect service=`something`` (Tom Lane)\n          A previous bug fix caused environment variables (such as PGPORT) to override entries in the service file in this context. Restore the previous behavior, in which the priority is the other way around.",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition in detection of file modification by psql's `\\e` and related commands",
      "description": "Fix race condition in detection of file modification by psql's `\\e` and related commands (Laurenz Albe)\n          A very fast typist could fool the code's file-timestamp-based detection of whether the temporary edit file was changed.",
      "sinceVersion": "11.12",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Fix missed file version check in pg_restore",
      "description": "Fix missed file version check in pg_restore (Tom Lane)\n          When reading a custom-format archive from a non-seekable source, pg_restore neglected to check the archive version. If it was fed a newer archive version than it can support, it would fail messily later on.",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add some more checks to pg_upgrade for user tables containing non-upgradable data types",
      "description": "Add some more checks to pg_upgrade for user tables containing non-upgradable data types (Tom Lane)\n          Fix detection of some cases where a non-upgradable data type is embedded within a container type (such as an array or range). Also disallow upgrading when user tables contain columns of system-defined composite types, since those types' OIDs are not stable across versions.",
      "sinceVersion": "11.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_waldump to count `XACT` records correctly when generating per-record statistics",
      "description": "Fix pg_waldump to count `XACT` records correctly when generating per-record statistics (Kyotaro Horiguchi)",
      "sinceVersion": "11.12",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix contrib/amcheck to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set",
      "description": "Fix contrib/amcheck to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set (Julien Rouhaud)\n          This is a valid state after `SELECT FOR UPDATE`.",
      "sinceVersion": "11.12",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions",
      "description": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions (Noah Misch)",
      "sinceVersion": "11.12",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix testing of PL/Python for Python 3 on Solaris",
      "description": "Fix testing of PL/Python for Python 3 on Solaris (Noah Misch)",
      "sinceVersion": "11.12",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix mis-planning of repeated application of a projection step",
      "description": "Fix mis-planning of repeated application of a projection step (Tom Lane)\n          The planner could create an incorrect plan in cases where two ProjectionPaths were stacked on top of each other. The only known way to trigger that situation involves parallel sort operations, but there may be other instances. The result would be crashes or incorrect query results. Disclosure of server memory contents is also possible. (CVE-2021-3677)",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow SSL renegotiation more completely",
      "description": "Disallow SSL renegotiation more completely (Michael Paquier)\n          SSL renegotiation has been disabled for some time, but the server would still cooperate with a client-initiated renegotiation request. A maliciously crafted renegotiation request could result in a server crash (see OpenSSL issue CVE-2021-3449). Disable the feature altogether on OpenSSL versions that permit doing so, which are 1.1.0h and newer.",
      "sinceVersion": "11.13",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Restore the Portal-level snapshot after COMMIT or ROLLBACK within a procedure",
      "description": "Restore the Portal-level snapshot after COMMIT or ROLLBACK within a procedure (Tom Lane)\n          This change fixes cases where an attempt to fetch a toasted value immediately after COMMIT/ROLLBACK would fail with errors like “no known snapshots” or “missing chunk number 0 for toast value”.\n          Some extensions may attempt to execute SQL code outside of any Portal. They are responsible for ensuring that an outer snapshot exists before doing so. Previously, not providing a snapshot might work or it might not; now it will consistently fail with “cannot execute SQL without an outer snapshot or portal”.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid misbehavior when persisting the output of a cursor that's reading a non-stable query",
      "description": "Avoid misbehavior when persisting the output of a cursor that's reading a non-stable query (Tom Lane)\n          Previously, we'd always rewind and re-read the whole query result, possibly getting results different from the earlier execution, causing great confusion later. For a NO SCROLL cursor, we can fix this by only storing the not-yet-read portion of the query output, which is sufficient since a NO SCROLL cursor can't be backed up. Cursors with the SCROLL option remain at hazard, but that was already documented to be an unsafe option to use with a non-stable query. Make those documentation warnings stronger.\n          Also force NO SCROLL mode for the implicit cursor used by a PL/pgSQL FOR-over-query loop, to avoid this type of problem when persisting such a cursor during an intra-procedure commit.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject `SELECT ... GROUP BY GROUPING SETS",
      "description": "Reject `SELECT ... GROUP BY GROUPING SETS (()) FOR UPDATE` (Tom Lane)\n          This should be disallowed, just as `FOR UPDATE` with a plain `GROUP BY` is disallowed, but the test for that failed to handle empty grouping sets correctly. The end result would be a null-pointer dereference in the executor.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject cases where a query in `WITH` rewrites to just NOTIFY",
      "description": "Reject cases where a query in `WITH` rewrites to just NOTIFY (Tom Lane)\n          Such cases previously crashed.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "In numeric multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point",
      "description": "In numeric multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point (Dean Rasheed)",
      "sinceVersion": "11.13",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix corner-case errors and loss of precision when raising numeric values to very large powers",
      "description": "Fix corner-case errors and loss of precision when raising numeric values to very large powers (Dean Rasheed)",
      "sinceVersion": "11.13",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix division-by-zero failure in `to_char",
      "description": "Fix division-by-zero failure in `to_char()()` with `EEEE` format and a numeric input value less than 10^(-1001) (Dean Rasheed)",
      "sinceVersion": "11.13",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix `pg_size_pretty",
      "description": "Fix `pg_size_pretty(bigint)()` to round negative values consistently with the way it rounds positive ones (and consistently with the numeric version) (Dean Rasheed, David Rowley)",
      "sinceVersion": "11.13",
      "contributor": "Dean Rasheed, David Rowley"
    },
    {
      "title": "Make `pg_filenode_relation",
      "description": "Make `pg_filenode_relation(0, 0)` return NULL rather than failing (Justin Pryzby)",
      "sinceVersion": "11.13",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Make ALTER EXTENSION lock the extension when adding or removing a member object",
      "description": "Make ALTER EXTENSION lock the extension when adding or removing a member object (Tom Lane)\n          The previous coding allowed ALTER EXTENSION ADD/DROP to occur concurrently with DROP EXTENSION, leading to a crash or corrupt catalog entries.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ALTER SUBSCRIPTION to reject an empty slot name",
      "description": "Fix ALTER SUBSCRIPTION to reject an empty slot name (Japin Li)",
      "sinceVersion": "11.13",
      "contributor": "Japin Li"
    },
    {
      "title": "When cloning a partitioned table's triggers to a new partition, ensure that their enabled status is copied",
      "description": "When cloning a partitioned table's triggers to a new partition, ensure that their enabled status is copied (Álvaro Herrera)",
      "sinceVersion": "11.13",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid alias conflicts in queries generated for REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Avoid alias conflicts in queries generated for REFRESH MATERIALIZED VIEW CONCURRENTLY (Tom Lane, Bharath Rupireddy)\n          This command failed on materialized views containing columns with certain names, notably mv and newdata.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane, Bharath Rupireddy"
    },
    {
      "title": "Fix PREPARE TRANSACTION to check correctly for conflicting session-lifespan and transaction-lifespan locks",
      "description": "Fix PREPARE TRANSACTION to check correctly for conflicting session-lifespan and transaction-lifespan locks (Tom Lane)\n          A transaction cannot be prepared if it has both session-lifespan and transaction-lifespan locks on the same advisory-lock ID value. This restriction was not fully checked, which could lead to a PANIC during PREPARE TRANSACTION.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior of DROP OWNED BY when the target role is listed more than once in an RLS policy",
      "description": "Fix misbehavior of DROP OWNED BY when the target role is listed more than once in an RLS policy (Tom Lane)",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Skip unnecessary error tests when removing a role from an RLS policy during DROP OWNED BY",
      "description": "Skip unnecessary error tests when removing a role from an RLS policy during DROP OWNED BY (Tom Lane)\n          Notably, this fixes some cases where it was necessary to be a superuser to use DROP OWNED BY.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't store a “fast default” when adding a column to a foreign table",
      "description": "Don't store a “fast default” when adding a column to a foreign table (Andrew Dunstan)\n          The fast default is useless since no local heap storage exists for such a table, but it confused subsequent operations. In addition to suppressing creation of such catalog entries in ALTER TABLE commands, adjust the downstream code to cope when one is incorrectly present.",
      "sinceVersion": "11.13",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Allow index state flags to be updated transactionally",
      "description": "Allow index state flags to be updated transactionally (Michael Paquier, Andrey Lepikhov)\n          This avoids failures when dealing with index predicates that aren't really immutable. While that's not considered a supported case, the original reason for using a non-transactional update here is long gone, so we may as well change it.",
      "sinceVersion": "11.13",
      "contributor": "Michael Paquier, Andrey Lepikhov"
    },
    {
      "title": "Avoid corrupting the plan cache entry when CREATE DOMAIN or ALTER DOMAIN appears in a cached plan",
      "description": "Avoid corrupting the plan cache entry when CREATE DOMAIN or ALTER DOMAIN appears in a cached plan (Tom Lane)",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make walsenders show their latest replication commands in pg_stat_activity",
      "description": "Make walsenders show their latest replication commands in pg_stat_activity (Tom Lane)\n          Previously, a walsender would show its latest SQL command, which was confusing if it's now doing some replication operation instead. Now we show replication-protocol commands on the same footing as SQL commands.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make pg_settings.pending_restart show as true when the pertinent entry in postgresql.conf has been removed",
      "description": "Make pg_settings.pending_restart show as true when the pertinent entry in postgresql.conf has been removed (Álvaro Herrera)\n          pending_restart correctly showed the case where an entry that cannot be changed without a postmaster restart has been modified, but not where the entry had been removed altogether.",
      "sinceVersion": "11.13",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix corner-case failure of a new standby to follow a new primary",
      "description": "Fix corner-case failure of a new standby to follow a new primary (Dilip Kumar, Robert Haas)\n          Under a narrow combination of conditions, the standby could wind up trying to follow the wrong WAL timeline.",
      "sinceVersion": "11.13",
      "contributor": "Dilip Kumar, Robert Haas"
    },
    {
      "title": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation",
      "description": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation (Fujii Masao)\n          File truncation is irreversible, so it's no longer safe to stop recovery at a point earlier than that record. The corresponding case for transaction commit was fixed years ago, but this one was overlooked.",
      "sinceVersion": "11.13",
      "contributor": "Fujii Masao"
    },
    {
      "title": "In walreceivers, avoid attempting catalog lookups after an error",
      "description": "In walreceivers, avoid attempting catalog lookups after an error (Masahiko Sawada, Bharath Rupireddy)",
      "sinceVersion": "11.13",
      "contributor": "Masahiko Sawada, Bharath Rupireddy"
    },
    {
      "title": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive",
      "description": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive (Fujii Masao, Soumyadeep Chakraborty)",
      "sinceVersion": "11.13",
      "contributor": "Fujii Masao, Soumyadeep Chakraborty"
    },
    {
      "title": "Correctly clear shared state after failing to become a member of a transaction commit group",
      "description": "Correctly clear shared state after failing to become a member of a transaction commit group (Amit Kapila)\n          Given the right timing, this could cause an assertion failure when some later session re-uses the same PGPROC object.",
      "sinceVersion": "11.13",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process",
      "description": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process (Heikki Linnakangas)",
      "sinceVersion": "11.13",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Improve checks for violations of replication protocol",
      "description": "Improve checks for violations of replication protocol (Tom Lane)\n          Logical replication workers frequently used Asserts to check for cases that could be triggered by invalid or out-of-order replication commands. This seems unwise, so promote these tests to regular error checks.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix deadlock when multiple logical replication workers try to truncate the same table",
      "description": "Fix deadlock when multiple logical replication workers try to truncate the same table (Peter Smith, Haiying Tang)",
      "sinceVersion": "11.13",
      "contributor": "Peter Smith, Haiying Tang"
    },
    {
      "title": "Fix error cases and memory leaks in logical decoding of speculative insertions",
      "description": "Fix error cases and memory leaks in logical decoding of speculative insertions (Dilip Kumar)",
      "sinceVersion": "11.13",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Avoid leaving an invalid record-type hash table entry behind after an error",
      "description": "Avoid leaving an invalid record-type hash table entry behind after an error (Sait Talha Nisanci)\n          This could lead to later crashes or memory leakage.",
      "sinceVersion": "11.13",
      "contributor": "Sait Talha Nisanci"
    },
    {
      "title": "Fix plan cache reference leaks in some error cases in CREATE TABLE ... AS EXECUTE",
      "description": "Fix plan cache reference leaks in some error cases in CREATE TABLE ... AS EXECUTE (Tom Lane)",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition in code for sharing tuple descriptors across parallel workers",
      "description": "Fix race condition in code for sharing tuple descriptors across parallel workers (Thomas Munro)\n          Given the right timing, a crash could result.",
      "sinceVersion": "11.13",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix possible race condition when releasing BackgroundWorkerSlots",
      "description": "Fix possible race condition when releasing BackgroundWorkerSlots (Tom Lane)\n          It's likely that this doesn't fix any observable bug on Intel hardware, but machines with weaker memory ordering rules could have problems.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix latent crash in sorting code",
      "description": "Fix latent crash in sorting code (Ronan Dunklau)\n          One code path could attempt to free a null pointer. The case appears unreachable in the core server's use of sorting, but perhaps it could be triggered by extensions.",
      "sinceVersion": "11.13",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Prevent infinite loops in SP-GiST index insertion",
      "description": "Prevent infinite loops in SP-GiST index insertion (Tom Lane)\n          In the event that INCLUDE columns take up enough space to prevent a leaf index tuple from ever fitting on a page, the text_ops operator class would get into an infinite loop vainly trying to make the tuple fit. While pre-v11 versions don't have INCLUDE columns, back-patch this anti-looping fix to them anyway, as it seems like a good defense against bugs in operator classes.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that SP-GiST index insertion can be terminated by a query cancel request",
      "description": "Ensure that SP-GiST index insertion can be terminated by a query cancel request (Tom Lane, Álvaro Herrera)",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't",
      "description": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't (Tom Lane)",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't abort the process for an out-of-memory failure in libpq's printing functions",
      "description": "Don't abort the process for an out-of-memory failure in libpq's printing functions (Tom Lane)",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpg, allow the numeric value INT_MIN",
      "description": "In ecpg, allow the numeric value INT_MIN (usually -2147483648) to be converted to integer (John Naylor)",
      "sinceVersion": "11.13",
      "contributor": "John Naylor"
    },
    {
      "title": "Fix pg_dump to correctly handle triggers on partitioned tables whose enabled status is different from their parent triggers' status",
      "description": "Fix pg_dump to correctly handle triggers on partitioned tables whose enabled status is different from their parent triggers' status (Justin Pryzby, Álvaro Herrera)",
      "sinceVersion": "11.13",
      "contributor": "Justin Pryzby, Álvaro Herrera"
    },
    {
      "title": "Avoid “invalid creation date in header” warnings observed when running pg_restore on an archive file created in a different time zone",
      "description": "Avoid “invalid creation date in header” warnings observed when running pg_restore on an archive file created in a different time zone (Tom Lane)",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Extend pg_upgrade to detect and warn about extensions that should be upgraded",
      "description": "Extend pg_upgrade to detect and warn about extensions that should be upgraded (Bruce Momjian)\n          A script file is now produced containing the ALTER EXTENSION UPDATE commands needed to bring extensions up to the versions that are considered default in the new installation.",
      "sinceVersion": "11.13",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Avoid problems when switching pg_receivewal between compressed and non-compressed WAL storage",
      "description": "Avoid problems when switching pg_receivewal between compressed and non-compressed WAL storage (Michael Paquier)",
      "sinceVersion": "11.13",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In contrib/postgres_fdw, avoid attempting catalog lookups after an error",
      "description": "In contrib/postgres_fdw, avoid attempting catalog lookups after an error (Tom Lane)\n          While this usually worked, it's not very safe since the error might have been one that made catalog access nonfunctional. A side effect of the fix is that messages about data conversion errors will now mention the query's table and column aliases (if used) rather than the true underlying name of a foreign table or column.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve the isolation-test infrastructure",
      "description": "Improve the isolation-test infrastructure (Tom Lane, Michael Paquier)\n          Allow isolation test steps to be annotated to show the expected completion order. This allows getting stable results from otherwise-racy test cases, without the long delays that we previously used (not entirely successfully) to fend off race conditions. Allow non-quoted identifiers as isolation test session/step names (formerly, all such names had to be double-quoted). Detect and warn about unused steps in isolation tests. Improve display of query results in isolation tests. Remove isolationtester's “dry-run” mode. Remove memory leaks in isolationtester itself.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane, Michael Paquier"
    },
    {
      "title": "Reduce overhead of cache-clobber testing",
      "description": "Reduce overhead of cache-clobber testing (Tom Lane)",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Python's regression tests to pass with Python 3.10",
      "description": "Fix PL/Python's regression tests to pass with Python 3.10 (Honza Horak)",
      "sinceVersion": "11.13",
      "contributor": "Honza Horak"
    },
    {
      "title": "Make `printf",
      "description": "Make `printf(\"%s\", NULL)` print `(null)` instead of crashing (Tom Lane)\n          This should improve server robustness in corner cases, and it syncs our `printf()` implementation with common libraries.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect log message when point-in-time recovery stops at a ROLLBACK PREPARED record",
      "description": "Fix incorrect log message when point-in-time recovery stops at a ROLLBACK PREPARED record (Simon Riggs)",
      "sinceVersion": "11.13",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Improve ALTER TABLE's messages for wrong-relation-kind errors",
      "description": "Improve ALTER TABLE's messages for wrong-relation-kind errors (Kyotaro Horiguchi)",
      "sinceVersion": "11.13",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Clarify error messages referring to “non-negative” values",
      "description": "Clarify error messages referring to “non-negative” values (Bharath Rupireddy)",
      "sinceVersion": "11.13",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate libldap_r library",
      "description": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate libldap_r library (Adrian Ho, Tom Lane)\n          If there is no libldap_r library, we now silently assume that libldap is thread-safe.",
      "sinceVersion": "11.13",
      "contributor": "Adrian Ho, Tom Lane"
    },
    {
      "title": "Add new make targets `world-bin` and `install-world-bin`",
      "description": "Add new make targets `world-bin` and `install-world-bin` (Andrew Dunstan)\n          These are the same as `world` and `install-world` respectively, except that they do not build or install the documentation.",
      "sinceVersion": "11.13",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix make rule for TAP tests",
      "description": "Fix make rule for TAP tests (`prove_installcheck`) to work in PGXS usage (Andrew Dunstan)",
      "sinceVersion": "11.13",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Adjust JIT code to prepare for forthcoming LLVM API change",
      "description": "Adjust JIT code to prepare for forthcoming LLVM API change (Thomas Munro, Andres Freund)\n          LLVM 13 has made an incompatible API change that will cause crashing of our previous JIT compiler.",
      "sinceVersion": "11.13",
      "contributor": "Thomas Munro, Andres Freund"
    },
    {
      "title": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated",
      "description": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated (Tom Lane)\n          The GSSAPI spec provides for a string pointer and length. It seems that in practice the next byte after the string is usually zero, so that our previous coding didn't actually fail; but we do have a report of AddressSanitizer complaints.",
      "sinceVersion": "11.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Enable building with GSSAPI on MSVC",
      "description": "Enable building with GSSAPI on MSVC (Michael Paquier)\n          Fix various incompatibilities with modern Kerberos builds.",
      "sinceVersion": "11.13",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In MSVC builds, include --with-pgport in the set of configure options reported by pg_config, if it had been specified",
      "description": "In MSVC builds, include --with-pgport in the set of configure options reported by pg_config, if it had been specified (Andrew Dunstan)",
      "sinceVersion": "11.13",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "Use the CLDR project's data to map Windows time zone names to IANA time zones (Tom Lane)\n          When running on Windows, initdb attempts to set the new cluster's timezone parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make the server reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\n          A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\n          The PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make libpq reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\n          A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\n          The PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record (Álvaro Herrera)\n          If the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\n          When applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "sinceVersion": "11.14",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions",
      "description": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions (Andrey Borodin)\n          Rows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for PREPARE TRANSACTION commands that were still in progress when CREATE INDEX CONCURRENTLY checked for them. As before, in installations that have enabled prepared transactions (max_prepared_transactions &gt; 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "sinceVersion": "11.14",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently (Noah Misch, Andrey Borodin)\n          While it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "sinceVersion": "11.14",
      "contributor": "Noah Misch, Andrey Borodin"
    },
    {
      "title": "Fix float4 and float8 hash functions to produce uniform results for NaNs",
      "description": "Fix float4 and float8 hash functions to produce uniform results for NaNs (Tom Lane)\n          Since PostgreSQL's floating-point types deem all NaNs to be equal, it's important for the hash functions to produce the same hash code for all bit-patterns that are NaNs according to the IEEE 754 standard. This failed to happen before, meaning that hash indexes and hash-based query plans might produce incorrect results for non-canonical NaN values. (`'-NaN'::float8` is one way to produce such a value on most machines.) It is advisable to reindex hash indexes on floating-point columns, if there is any possibility that they might contain such values.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table (Amit Langote, Álvaro Herrera)\n          This oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "sinceVersion": "11.14",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication",
      "description": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication (Hou Zhijie, Vignesh C)\n          This oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "sinceVersion": "11.14",
      "contributor": "Hou Zhijie, Vignesh C"
    },
    {
      "title": "Don't discard a cast to the same type with unspecified type modifier",
      "description": "Don't discard a cast to the same type with unspecified type modifier (Tom Lane)\n          For example, if column `f1` is of type `numeric(18,3)`, the parser used to simply discard a cast like `f1::numeric`, on the grounds that it would have no run-time effect. That's true, but the exposed type of the expression should still be considered to be plain `numeric`, not `numeric(18,3)`. This is important for correctly resolving the type of larger constructs, such as recursive `UNION`s.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix updates of element fields in arrays of domain over composite",
      "description": "Fix updates of element fields in arrays of domain over composite (Tom Lane)\n          A command such as `UPDATE tab SET fld[1].subfld = val` failed if the array's elements were domains rather than plain composites.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow creating an ICU collation if the current database's encoding won't support it",
      "description": "Disallow creating an ICU collation if the current database's encoding won't support it (Tom Lane)\n          Previously this was allowed, but then the collation could not be referenced because of the way collation lookup works; you could not use the collation, nor even drop it.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power",
      "description": "Fix corner-case loss of precision in numeric `power()()` (Dean Rasheed)\n          The result could be inaccurate when the first argument is very close to 1.",
      "sinceVersion": "11.14",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid regular expression errors with capturing parentheses inside `{0}`",
      "description": "Avoid regular expression errors with capturing parentheses inside `{0}` (Tom Lane)\n          Regular expressions like `(.){0}...\\1` drew “invalid backreference number”. Other regexp engines such as Perl don't complain, though, and for that matter ours doesn't either in some closely related cases. Worse, it could throw an assertion failure instead. Fix it so that no error is thrown and instead the back-reference is silently deemed to never match.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent regular expression back-references from sometimes matching when they shouldn't",
      "description": "Prevent regular expression back-references from sometimes matching when they shouldn't (Tom Lane)\n          The regexp engine was careless about clearing match data for capturing parentheses after rejecting a partial match. This could allow a later back-reference to match in places where it should fail for lack of a defined referent.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect results from `AT TIME ZONE` applied to a time with time zone value",
      "description": "Fix incorrect results from `AT TIME ZONE` applied to a time with time zone value (Tom Lane)\n          The results were incorrect if the target time zone was specified by a dynamic timezone abbreviation (that is, one that is defined as equivalent to a full time zone name, rather than a fixed UTC offset).",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "Avoid using MCV-only statistics to estimate the range of a column (Tom Lane)\n          There are corner cases in which ANALYZE will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix restoration of a Portal's snapshot inside a subtransaction",
      "description": "Fix restoration of a Portal's snapshot inside a subtransaction (Bertrand Drouvot)\n          If a procedure commits or rolls back a transaction, and then its next significant action is inside a new subtransaction, snapshot management went wrong, leading to a dangling pointer and probable crash. A typical example in PL/pgSQL is a `COMMIT` immediately followed by a `BEGIN ... EXCEPTION` block that performs a query.",
      "sinceVersion": "11.14",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "Clean up correctly if a transaction fails after exporting its snapshot (Dilip Kumar)\n          This oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "sinceVersion": "11.14",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "Ensure that prepared transactions are properly accounted for during promotion of a standby server (Michael Paquier, Andres Freund)\n          There was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "sinceVersion": "11.14",
      "contributor": "Michael Paquier, Andres Freund"
    },
    {
      "title": "Refuse to rewind a cursor marked `NO SCROLL` if it has been held over from a previous transaction due to the `WITH HOLD` option",
      "description": "Refuse to rewind a cursor marked `NO SCROLL` if it has been held over from a previous transaction due to the `WITH HOLD` option (Tom Lane)\n          We have long forbidden fetching backwards from a `NO SCROLL` cursor, but for historical reasons the prohibition didn't extend to cases in which we rewind the query altogether and then re-fetch forwards. That exception leads to inconsistencies, particularly for held-over cursors which may not have stored all the data necessary to rewind. Disallow rewinding for non-scrollable held-over cursors to block the worst inconsistencies. (v15 will remove the exception altogether.)",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible failure while saving a `WITH HOLD` cursor at transaction end, if it had already been read to completion",
      "description": "Fix possible failure while saving a `WITH HOLD` cursor at transaction end, if it had already been read to completion (Tom Lane)",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix detection of a relation that has grown to the maximum allowed length",
      "description": "Fix detection of a relation that has grown to the maximum allowed length (Tom Lane)\n          An attempt to extend a table or index past the limit of 2^32-1 blocks was rejected, but not soon enough to prevent inconsistent internal state from being created.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule",
      "description": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule (Greg Nancarrow, Tom Lane)\n          The previous failure to do this could lead to problems such as unsafely choosing a parallel plan.",
      "sinceVersion": "11.14",
      "contributor": "Greg Nancarrow, Tom Lane"
    },
    {
      "title": "Fix incorrect reporting of permissions failures on extended statistics objects",
      "description": "Fix incorrect reporting of permissions failures on extended statistics objects (Tomas Vondra)\n          The code typically produced “cache lookup error” rather than the intended message.",
      "sinceVersion": "11.14",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix incorrect snapshot handling in parallel workers",
      "description": "Fix incorrect snapshot handling in parallel workers (Greg Nancarrow)\n          This oversight could lead to misbehavior in parallel queries if the transaction isolation level is less than `REPEATABLE READ`.",
      "sinceVersion": "11.14",
      "contributor": "Greg Nancarrow"
    },
    {
      "title": "Fix logical decoding to correctly ignore toast-table changes for transient tables",
      "description": "Fix logical decoding to correctly ignore toast-table changes for transient tables (Bertrand Drouvot)\n          Logical decoding normally ignores changes in transient tables such as those created during an ALTER TABLE heap rewrite. But that filtering wasn't applied to the associated toast table if any, leading to possible errors when rewriting a table that's being published.",
      "sinceVersion": "11.14",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Ensure that walreceiver processes create all required archive notification files before exiting",
      "description": "Ensure that walreceiver processes create all required archive notification files before exiting (Fujii Masao)\n          If a walreceiver exited exactly at a WAL segment boundary, it failed to make a notification file for the last-received segment, thus delaying archiving of that segment on the standby.",
      "sinceVersion": "11.14",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE`",
      "description": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE` (Masahiko Sawada, Tom Lane)",
      "sinceVersion": "11.14",
      "contributor": "Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Fix parser's processing of aggregate `FILTER` clauses",
      "description": "Fix parser's processing of aggregate `FILTER` clauses (Tom Lane)\n          If the `FILTER` expression is a plain boolean column, the semantic level of the aggregate could be mis-determined, leading to not-per-spec behavior. If the `FILTER` expression is itself a boolean-returning aggregate, an error should be thrown but was not, likely resulting in a crash at execution.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid trying to clean up LLVM state after an error within LLVM",
      "description": "Avoid trying to clean up LLVM state after an error within LLVM (Andres Freund, Justin Pryzby)\n          This prevents a likely crash during backend exit after a fatal LLVM error.",
      "sinceVersion": "11.14",
      "contributor": "Andres Freund, Justin Pryzby"
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently",
      "description": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently (Álvaro Herrera)",
      "sinceVersion": "11.14",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export",
      "description": "Prevent “snapshot reference leak” warning when `lo_export()()` or a related function fails (Heikki Linnakangas)",
      "sinceVersion": "11.14",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Ensure that scans of SP-GiST indexes are counted in the statistics views",
      "description": "Ensure that scans of SP-GiST indexes are counted in the statistics views (Tom Lane)\n          Incrementing the number-of-index-scans counter was overlooked in the SP-GiST code, although per-tuple counters were advanced correctly.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Recalculate relevant wait intervals if recovery_min_apply_delay is changed during recovery",
      "description": "Recalculate relevant wait intervals if recovery_min_apply_delay is changed during recovery (Soumyadeep Chakraborty, Ashwin Agrawal)",
      "sinceVersion": "11.14",
      "contributor": "Soumyadeep Chakraborty, Ashwin Agrawal"
    },
    {
      "title": "Fix infinite loop if a simplehash.h hash table reaches 2^32 elements",
      "description": "Fix infinite loop if a simplehash.h hash table reaches 2^32 elements (Yura Sokolov)\n          It seems unlikely that this bug has been hit in practice, as it would require work_mem settings of hundreds of gigabytes for existing uses of simplehash.h.",
      "sinceVersion": "11.14",
      "contributor": "Yura Sokolov"
    },
    {
      "title": "Reduce memory consumption during calculation of extended statistics",
      "description": "Reduce memory consumption during calculation of extended statistics (Justin Pryzby, Tomas Vondra)",
      "sinceVersion": "11.14",
      "contributor": "Justin Pryzby, Tomas Vondra"
    },
    {
      "title": "Fix ecpg to recover correctly after `malloc",
      "description": "Fix ecpg to recover correctly after `malloc()()` failure while establishing a connection (Michael Paquier)",
      "sinceVersion": "11.14",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix misevaluation of stable functions called in the arguments of a PL/pgSQL CALL statement",
      "description": "Fix misevaluation of stable functions called in the arguments of a PL/pgSQL CALL statement (Tom Lane)\n          They were being called with an out-of-date snapshot, so that they would not see any database changes made since the start of the session's top-level command.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine",
      "description": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine (Tom Lane)\n          If the routine does not require an explicit `RETURN`, this usage should be valid, but it was rejected.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove pg_ctl's hard-coded limits on the total length of generated commands",
      "description": "Remove pg_ctl's hard-coded limits on the total length of generated commands (Phil Krylov)\n          For example, this removes a restriction on how many command-line options can be passed through to the postmaster. Individual path names that pg_ctl deals with, such as the postmaster executable's name or the data directory name, are still limited to `MAXPGPATH` bytes in most cases.",
      "sinceVersion": "11.14",
      "contributor": "Phil Krylov"
    },
    {
      "title": "Fix pg_dump to dump non-global default privileges correctly",
      "description": "Fix pg_dump to dump non-global default privileges correctly (Neil Chen, Masahiko Sawada)\n          If a global (unrestricted) ALTER DEFAULT PRIVILEGES command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted ALTER DEFAULT PRIVILEGES command granted that privilege again for a selected role or schema, pg_dump failed to dump the restricted privilege grant correctly.",
      "sinceVersion": "11.14",
      "contributor": "Neil Chen, Masahiko Sawada"
    },
    {
      "title": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped (Tom Lane)\n          This oversight was usually pretty harmless, since once pg_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in pg_dump when attempting to dump trigger definitions from a pre-8.3 server",
      "description": "Fix crash in pg_dump when attempting to dump trigger definitions from a pre-8.3 server (Tom Lane)",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file",
      "description": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file (Daniel Gustafsson)",
      "sinceVersion": "11.14",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on \"char\"",
      "description": "Fix failure of contrib/btree_gin indexes on \"char\" (not char(`n`)) columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Tom Lane)\n          Such an indexscan failed to return all the entries it should.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB",
      "description": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB (Tom Lane)\n          Such large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error",
      "description": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error (Tom Lane)",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Support OpenSSL 3.0.0",
      "description": "Support OpenSSL 3.0.0 (Peter Eisentraut, Daniel Gustafsson, Michael Paquier)",
      "sinceVersion": "11.14",
      "contributor": "Peter Eisentraut, Daniel Gustafsson, Michael Paquier"
    },
    {
      "title": "Set correct type identifier on OpenSSL BIO",
      "description": "Set correct type identifier on OpenSSL BIO (I/O abstraction) objects created by PostgreSQL (Itamar Gafni)\n          This oversight probably only matters for code that is doing tasks like auditing the OpenSSL installation. But it's nominally a violation of the OpenSSL API, so fix it.",
      "sinceVersion": "11.14",
      "contributor": "Itamar Gafni"
    },
    {
      "title": "Make `pg_regexec",
      "description": "Make `pg_regexec()()` robust against an out-of-range `search_start` parameter (Tom Lane)\n          Return `REG_NOMATCH`, instead of possibly crashing, when `search_start` is past the end of the string. This case is probably unreachable within core PostgreSQL, but extensions might be more careless about the parameter value.",
      "sinceVersion": "11.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.\n          Also, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port_of_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "sinceVersion": "11.14",
      "contributor": null
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "Fix index-only scan plans for cases where not all index columns can be returned (Tom Lane)\n          If an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call (Tom Lane)\n          While the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary",
      "description": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary (Álvaro Herrera)",
      "sinceVersion": "11.15",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "Fix startup of a physical replica to tolerate transaction ID wraparound (Abhijit Menon-Sen, Tomas Vondra)\n          If a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "sinceVersion": "11.15",
      "contributor": "Abhijit Menon-Sen, Tomas Vondra"
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "Remove lexical limitations for SQL commands issued on a logical replication connection (Tom Lane)\n          The walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction",
      "description": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction (Alex Kingsborough, Kyotaro Horiguchi)",
      "sinceVersion": "11.15",
      "contributor": "Alex Kingsborough, Kyotaro Horiguchi"
    },
    {
      "title": "Be sure to `fsync",
      "description": "Be sure to `fsync()` the pg_logical/mappings subdirectory during checkpoints (Nathan Bossart)\n          On some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "sinceVersion": "11.15",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "Build extended statistics for partitioned tables (Justin Pryzby)\n          A previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows ANALYZE to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual ANALYZE on the partitioned table if you want to maintain such statistics.)",
      "sinceVersion": "11.15",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Ignore extended statistics for inheritance trees (Justin Pryzby)\n          Currently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "sinceVersion": "11.15",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere (Tom Lane)\n          This restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index (Haiying Tang, Hou Zhijie)\n          The same prohibition already existed for primary key indexes.",
      "sinceVersion": "11.15",
      "contributor": "Haiying Tang, Hou Zhijie"
    },
    {
      "title": "Correctly update cached table state during ALTER TABLE ADD PRIMARY KEY USING INDEX",
      "description": "Correctly update cached table state during ALTER TABLE ADD PRIMARY KEY USING INDEX (Hou Zhijie)\n          Concurrent sessions failed to update their opinion of whether the table has a primary key, possibly causing incorrect logical replication behavior.",
      "sinceVersion": "11.15",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Correctly update cached table state when switching `REPLICA IDENTITY` index (Tang Haiying, Hou Zhijie)\n          Concurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "sinceVersion": "11.15",
      "contributor": "Tang Haiying, Hou Zhijie"
    },
    {
      "title": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects",
      "description": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects (Justin Pryzby)",
      "sinceVersion": "11.15",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules (Tom Lane)\n          A whole-row variable would be printed as “var.*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "Fix or remove some incorrect assertions (Simon Riggs, Michael Paquier, Alexander Lakhin)\n          These errors should affect only debug builds, not production.",
      "sinceVersion": "11.15",
      "contributor": "Simon Riggs, Michael Paquier, Alexander Lakhin"
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib",
      "description": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib (Tom Lane)",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid calling `strerror",
      "description": "Avoid calling `strerror()` from libpq's `PQcancel()` function (Tom Lane)\n          `PQcancel()` is supposed to be safe to call from a signal handler, but `strerror()` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name (Tom Lane)\n          This agrees with the documented behavior, and avoids probable permissions failure if SET ROLE or SET SESSION AUTHORIZATION has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext",
      "description": "In psql and some other client programs, avoid trying to invoke `gettext()()` from a control-C signal handler (Tom Lane)\n          While no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical",
      "description": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical (Tom Lane, Nathan Bossart)\n          Previously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane, Nathan Bossart"
    },
    {
      "title": "Fix pg_dump's dump ordering for user-defined casts",
      "description": "Fix pg_dump's dump ordering for user-defined casts (Tom Lane)\n          In rare cases, the output script might refer to a user-defined cast before it had been created.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup",
      "description": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup (Tom Lane)\n          The previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix results of index-only scans on contrib/btree_gist indexes on char",
      "description": "Fix results of index-only scans on contrib/btree_gist indexes on char(`N`) columns (Tom Lane)\n          Index-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store char(`N`) values with the expected amount of space padding. The behavior of such an index will not change immediately unless you REINDEX it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "sinceVersion": "11.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python (Peter Eisentraut, Tom Lane, Andres Freund)\n          With Python 3.10, this avoids configure-time warnings about distutils being deprecated and scheduled for removal in Python 3.12. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "sinceVersion": "11.15",
      "contributor": "Peter Eisentraut, Tom Lane, Andres Freund"
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later",
      "description": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later (Victor Wagner)",
      "sinceVersion": "11.15",
      "contributor": "Victor Wagner"
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later",
      "description": "Fix PL/Python compile failure with Python 3.11 and later (Peter Eisentraut)",
      "sinceVersion": "11.15",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add support for building with Visual Studio 2022",
      "description": "Add support for building with Visual Studio 2022 (Hans Buschmann)",
      "sinceVersion": "11.15",
      "contributor": "Hans Buschmann"
    },
    {
      "title": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory",
      "description": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory (Anton Voloshin, Andrew Dunstan)",
      "sinceVersion": "11.15",
      "contributor": "Anton Voloshin, Andrew Dunstan"
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns (Tom Lane)\n          The previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "sinceVersion": "11.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables (Tom Lane)\n          The column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\n          In cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type record to begin with and there's no issue.",
      "sinceVersion": "11.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema",
      "description": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema()()` and allied functions (Renan Soares Lopes)\n          The xmlschema output for these types included a malformed regular expression.",
      "sinceVersion": "11.16",
      "contributor": "Renan Soares Lopes"
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns",
      "description": "Avoid core dump in parser for a `VALUES` clause with zero columns (Tom Lane)",
      "sinceVersion": "11.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner errors for `GROUPING",
      "description": "Fix planner errors for `GROUPING()()` constructs that reference outer query levels (Richard Guo, Tom Lane)",
      "sinceVersion": "11.16",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering",
      "description": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering (Aliaksandr Kalenik)",
      "sinceVersion": "11.16",
      "contributor": "Aliaksandr Kalenik"
    },
    {
      "title": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command",
      "description": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command (Tom Lane)\n          The parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "sinceVersion": "11.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression",
      "description": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression (Peter Geoghegan, Thomas Munro)\n          The table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "sinceVersion": "11.16",
      "contributor": "Peter Geoghegan, Thomas Munro"
    },
    {
      "title": "Fix risk of deadlock failures while dropping a partitioned index",
      "description": "Fix risk of deadlock failures while dropping a partitioned index (Jimmy Yih, Gaurab Dey, Tom Lane)\n          Ensure that the required table and index locks are taken in the standard order (parents before children, tables before indexes). The previous coding for DROP INDEX did it differently, and so could deadlock against concurrent queries taking these locks in the standard order.",
      "sinceVersion": "11.16",
      "contributor": "Jimmy Yih, Gaurab Dey, Tom Lane"
    },
    {
      "title": "Fix race condition between DROP TABLESPACE and checkpointing",
      "description": "Fix race condition between DROP TABLESPACE and checkpointing (Nathan Bossart)\n          The checkpoint forced by DROP TABLESPACE could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "sinceVersion": "11.16",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint",
      "description": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint (Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas)\n          TRUNCATE must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "sinceVersion": "11.16",
      "contributor": "Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas"
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Fix unsafe toast-data accesses during temporary object cleanup (Andres Freund)\n          Temporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "sinceVersion": "11.16",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record",
      "description": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record (Sami Imseih)",
      "sinceVersion": "11.16",
      "contributor": "Sami Imseih"
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "Fix possibility of self-deadlock in hot standby conflict handling (Andres Freund)\n          With unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "sinceVersion": "11.16",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit",
      "description": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit (Amit Kapila)\n          Faulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "sinceVersion": "11.16",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line (Dilip Kumar, Amit Kapila)\n          Otherwise subscribers cannot see the values and will fail to replicate the update.",
      "sinceVersion": "11.16",
      "contributor": "Dilip Kumar, Amit Kapila"
    },
    {
      "title": "Improve logical replication subscriber's error message for an unsupported relation kind",
      "description": "Improve logical replication subscriber's error message for an unsupported relation kind (Tom Lane)\n          v13 and later servers support publishing partitioned tables. Older server versions cannot handle subscribing to such a table, and they gave a very misleading error message: “table XYZ not found on publisher”. Arrange to deliver a more on-point message.",
      "sinceVersion": "11.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "Make libpq accept root-owned SSL private key files (David Steele)\n          This change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "sinceVersion": "11.16",
      "contributor": "David Steele"
    },
    {
      "title": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions (Tom Lane)\n          pg_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "sinceVersion": "11.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error handling in pg_waldump",
      "description": "Fix error handling in pg_waldump (Kyotaro Horiguchi, Andres Freund)\n          While trying to read a WAL file to determine the WAL segment size, pg_waldump would report an incorrect error for the case of a too-short file. In addition, the file name reported in this and related error messages could be garbage.",
      "sinceVersion": "11.16",
      "contributor": "Kyotaro Horiguchi, Andres Freund"
    },
    {
      "title": "Ensure that contrib/pageinspect functions cope with all-zero pages",
      "description": "Ensure that contrib/pageinspect functions cope with all-zero pages (Michael Paquier)\n          This is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "sinceVersion": "11.16",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type (Michael Paquier, Justin Pryzby, Julien Rouhaud)\n          These changes make it less likely that the module will crash on bad data.",
      "sinceVersion": "11.16",
      "contributor": "Michael Paquier, Justin Pryzby, Julien Rouhaud"
    },
    {
      "title": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary (Ronan Dunklau)\n          This fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "sinceVersion": "11.16",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Update JIT code to work with LLVM 14",
      "description": "Update JIT code to work with LLVM 14 (Thomas Munro)",
      "sinceVersion": "11.16",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Clean up assorted failures under clang's `-fsanitize=undefined` checks (Tom Lane, Andres Freund, Zhihong Yu)\n          Most of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "sinceVersion": "11.16",
      "contributor": "Tom Lane, Andres Freund, Zhihong Yu"
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions",
      "description": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions (Tom Lane)",
      "sinceVersion": "11.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build",
      "description": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build (Andres Freund)",
      "sinceVersion": "11.16",
      "contributor": "Andres Freund"
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "In Windows builds, use gendef instead of pexports to build DEF files (Andrew Dunstan)\n          This adapts the build process to work on recent MSys tool chains.",
      "sinceVersion": "11.16",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW (Andrew Dunstan)\n          For some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "sinceVersion": "11.16",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine.",
      "sinceVersion": "11.16",
      "contributor": null
    },
    {
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "Do not let extension scripts replace objects not already belonging to the extension (Tom Lane)\n          This change prevents extension scripts from doing CREATE OR REPLACE if there is an existing object that does not belong to the extension. It also prevents CREATE IF NOT EXISTS in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\n          The PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix replay of CREATE DATABASE WAL records on standby servers",
      "description": "Fix replay of CREATE DATABASE WAL records on standby servers (Kyotaro Horiguchi, Asim R Praveen, Paul Guo)\n          Standby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "sinceVersion": "11.17",
      "contributor": "Kyotaro Horiguchi, Asim R Praveen, Paul Guo"
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Support “in place” tablespaces (Thomas Munro, Michael Paquier, Álvaro Herrera)\n          Normally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the CREATE DATABASE replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "sinceVersion": "11.17",
      "contributor": "Thomas Munro, Michael Paquier, Álvaro Herrera"
    },
    {
      "title": "Fix permissions checks in CREATE INDEX",
      "description": "Fix permissions checks in CREATE INDEX (Nathan Bossart, Noah Misch)\n          The fix for CVE-2022-1552 caused CREATE INDEX to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg_dump issues CREATE INDEX before re-granting permissions.",
      "sinceVersion": "11.17",
      "contributor": "Nathan Bossart, Noah Misch"
    },
    {
      "title": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block",
      "description": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block (Tom Lane)\n          If the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "Fix race condition when checking transaction visibility (Simon Riggs)\n          `TransactionIdIsInProgress()` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "sinceVersion": "11.17",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type",
      "description": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type (Tom Lane)",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function",
      "description": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function (Richard Guo)",
      "sinceVersion": "11.17",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables",
      "description": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables (Álvaro Herrera, Amit Langote)\n          In certain cases, a “trigger does not exist” failure would occur because the command would try to adjust the trigger on a child partition that doesn't have it.",
      "sinceVersion": "11.17",
      "contributor": "Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Prevent `pg_stat_get_subscription",
      "description": "Prevent `pg_stat_get_subscription()()` from possibly returning an extra row containing garbage values (Kuntal Ghosh)",
      "sinceVersion": "11.17",
      "contributor": "Kuntal Ghosh"
    },
    {
      "title": "Ensure that `pg_stop_backup",
      "description": "Ensure that `pg_stop_backup()()` cleans up session state properly (Fujii Masao)\n          This omission could lead to assertion failures or crashes later in the session.",
      "sinceVersion": "11.17",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses (Dean Rasheed)\n          In corner cases, a misleading error could be reported.",
      "sinceVersion": "11.17",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct",
      "description": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct (Álvaro Herrera)",
      "sinceVersion": "11.17",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Reject `ROW",
      "description": "Reject `ROW()` expressions and functions in `FROM` that have too many columns (Tom Lane)\n          Cases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere (Tom Lane)\n          Previously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column",
      "description": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made (Tom Lane)\n          This oversight could lead to dump/reload or pg_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "Report implicitly-created operator families to event triggers (Masahiko Sawada)\n          If CREATE OPERATOR CLASS results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "sinceVersion": "11.17",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Fix control file updates made when a restartpoint is running during promotion of a standby server (Kyotaro Horiguchi)\n          Previously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "sinceVersion": "11.17",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions",
      "description": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions (Wang Wei, Amit Kapila)\n          If a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "sinceVersion": "11.17",
      "contributor": "Wang Wei, Amit Kapila"
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders",
      "description": "Disallow nested backup operations in logical replication walsenders (Fujii Masao)",
      "sinceVersion": "11.17",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix memory leak in logical replication subscribers",
      "description": "Fix memory leak in logical replication subscribers (Hou Zhijie)",
      "sinceVersion": "11.17",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Prevent open-file leak when reading an invalid timezone abbreviation file (Kyotaro Horiguchi)\n          Such cases could result in harmless warning messages.",
      "sinceVersion": "11.17",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Allow custom server parameters to have short descriptions that are NULL (Steve Chavez)\n          Previously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "sinceVersion": "11.17",
      "contributor": "Steve Chavez"
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags",
      "description": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags (Haiyang Wang)",
      "sinceVersion": "11.17",
      "contributor": "Haiyang Wang"
    },
    {
      "title": "Fix erroneous assertion checks in shared hashtable management",
      "description": "Fix erroneous assertion checks in shared hashtable management (Thomas Munro)",
      "sinceVersion": "11.17",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Arrange to clean up after commit-time errors within `SPI_commit",
      "description": "Arrange to clean up after commit-time errors within `SPI_commit()()`, rather than expecting callers to do that (Peter Eisentraut, Tom Lane)\n          Proper cleanup is complicated and requires use of low-level facilities, so it's not surprising that no known caller got it right. This led to misbehaviors when a PL procedure issued COMMIT but a failure occurred (such as a deferred constraint check). To improve matters, redefine `SPI_commit()()` as starting a new transaction, so that it becomes equivalent to `SPI_commit_and_chain()()` except that you get default transaction characteristics instead of preserving the prior transaction's characteristics. To make this somewhat transparent API-wise, redefine `SPI_start_transaction()()` as a no-op. All known callers of `SPI_commit()()` immediately call `SPI_start_transaction()()`, so they will not notice any change. Similar remarks apply to `SPI_rollback()()`.\n          Also fix PL/Python, which omitted any handling of such errors at all, resulting in jumping out of the Python interpreter. This is reported to crash Python 3.11. Older Python releases leak some memory but seem okay with it otherwise.",
      "sinceVersion": "11.17",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "Remove misguided SSL key file ownership check in libpq (Tom Lane)\n          In the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Ensure ecpg reports server connection loss sanely (Tom Lane)\n          Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Avoid core dump in ecpglib with unexpected orders of operations (Tom Lane)\n          Certain operations such as EXEC SQL PREPARE would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql's \\watch command, echo a newline after cancellation with control-C",
      "description": "In psql's \\watch command, echo a newline after cancellation with control-C (Pavel Stehule)\n          This prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "sinceVersion": "11.17",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms",
      "description": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms (Tom Lane)",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification",
      "description": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification (Tom Lane)",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "Block signals while allocating dynamic shared memory on Linux (Thomas Munro)\n          This avoids problems when a signal interrupts `posix_fallocate()()`.",
      "sinceVersion": "11.17",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open",
      "description": "Detect unexpected `EEXIST` error from `shm_open()()` (Thomas Munro)\n          This avoids a possible crash on Solaris.",
      "sinceVersion": "11.17",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36",
      "description": "Adjust PL/Perl test case so it will work under Perl 5.36 (Dagfinn Ilmari Mannsåker)",
      "sinceVersion": "11.17",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL",
      "description": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL (Tom Lane)",
      "sinceVersion": "11.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix VACUUM to press on if an attempted page deletion in a btree index fails to find the page's parent downlink",
      "description": "Fix VACUUM to press on if an attempted page deletion in a btree index fails to find the page's parent downlink (Peter Geoghegan)\n          Rather than throwing an error, just log the issue and continue without deleting the empty page. Previously, a buggy operator class or corrupted index could indefinitely prevent completion of vacuuming of the index, eventually leading to transaction wraparound problems.",
      "sinceVersion": "11.18",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view",
      "description": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view (Tom Lane)\n          This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "Disallow rules named `_RETURN` that are not `ON SELECT` (Tom Lane)\n          This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Repair rare failure of MULTIEXPR_SUBLINK subplans in inherited updates",
      "description": "Repair rare failure of MULTIEXPR_SUBLINK subplans in inherited updates (Tom Lane)\n          Use of the syntax `UPDATE tab SET (c1, ...) = (SELECT ...)` with an inherited or partitioned target table could result in failure if the child tables are sufficiently dissimilar. This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect matching of index expressions and predicates when creating a partitioned index",
      "description": "Fix incorrect matching of index expressions and predicates when creating a partitioned index (Richard Guo, Tom Lane)\n          While creating a partitioned index, we try to identify any existing indexes on the partitions that match the partitioned index, so that we can absorb those as child indexes instead of building new ones. Matching of expressions was not done right, so that a usable child index might be ignored, leading to creation of a duplicative index.",
      "sinceVersion": "11.18",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid flattening `FROM`-less subqueries when the outer query has grouping sets",
      "description": "Avoid flattening `FROM`-less subqueries when the outer query has grouping sets (Tom Lane)\n          This oversight could lead to assertion failures or planner errors such as “variable not found in subplan target list”.",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "Prevent WAL corruption after a standby promotion (Dilip Kumar, Robert Haas)\n          When a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "sinceVersion": "11.18",
      "contributor": "Dilip Kumar, Robert Haas"
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes (Matthias van de Meent, Zhang Mingli)\n          This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "sinceVersion": "11.18",
      "contributor": "Matthias van de Meent, Zhang Mingli"
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction (Masahiko Sawada, Kuroda Hayato)\n          These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "sinceVersion": "11.18",
      "contributor": "Masahiko Sawada, Kuroda Hayato"
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "Prevent examining system catalogs with the wrong snapshot during logical decoding (Masahiko Sawada)\n          If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "sinceVersion": "11.18",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "Accept interrupts in more places during logical decoding (Amit Kapila, Masahiko Sawada)\n          This ameliorates problems with slow shutdown of replication workers.",
      "sinceVersion": "11.18",
      "contributor": "Amit Kapila, Masahiko Sawada"
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "Avoid crash after function syntax error in replication workers (Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane)\n          If a syntax error occurred in a SQL-language or PL/pgSQL-language CREATE FUNCTION or DO command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "sinceVersion": "11.18",
      "contributor": "Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "Fix handling of read-write expanded datums that are passed to SQL functions (Tom Lane)\n          If a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Fix use-after-free hazard in string comparisons (Tom Lane)\n          Improper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "Prevent postmaster crash when shared-memory state is corrupted (Tom Lane)\n          The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add some more defenses against recursion till stack overrun",
      "description": "Add some more defenses against recursion till stack overrun (Richard Guo, Tom Lane)",
      "sinceVersion": "11.18",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "Avoid long-term memory leakage in the autovacuum launcher process (Reid Thompson)\n          The lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "sinceVersion": "11.18",
      "contributor": "Reid Thompson"
    },
    {
      "title": "Improve PL/pgSQL's ability to handle parameters declared as RECORD",
      "description": "Improve PL/pgSQL's ability to handle parameters declared as RECORD (Tom Lane)\n          Build a separate function cache entry for each concrete type passed to the RECORD parameter during a session, much as we do for polymorphic parameters. This allows some usages to work that previously failed with errors such as “type of parameter does not match that when preparing the plan”.",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "Add missing guards for `NULL` connection pointer in libpq (Daniele Varrazzo, Tom Lane)\n          There's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()()` and `PQisnonblocking()()` didn't get that memo, so fix them.",
      "sinceVersion": "11.18",
      "contributor": "Daniele Varrazzo, Tom Lane"
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration",
      "description": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration (Andrey Sokolov)\n          For example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only str1 was marked `static`.",
      "sinceVersion": "11.18",
      "contributor": "Andrey Sokolov"
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg_basebackup",
      "description": "Allow cross-platform tablespace relocation in pg_basebackup (Robert Haas)\n          Allow the remote path in --tablespace-mapping to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "sinceVersion": "11.18",
      "contributor": "Robert Haas"
    },
    {
      "title": "In pg_stat_statements, fix access to already-freed memory",
      "description": "In pg_stat_statements, fix access to already-freed memory (zhaoqigui)\n          This occurred if pg_stat_statements tracked a ROLLBACK command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "sinceVersion": "11.18",
      "contributor": "zhaoqigui"
    },
    {
      "title": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns (Richard Guo, Etsuro Fujita)\n          This avoids “variable not found in subplan target list” errors in rare cases.",
      "sinceVersion": "11.18",
      "contributor": "Richard Guo, Etsuro Fujita"
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create",
      "description": "Reject unwanted output from the platform's `uuid_create()()` function (Nazir Bilal Yavuz)\n          The uuid-ossp module expects libc's `uuid_create()()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()()`.)",
      "sinceVersion": "11.18",
      "contributor": "Nazir Bilal Yavuz"
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Include new Perl test modules in standard installations (Álvaro Herrera)\n          Add PostgreSQL/Test/Cluster.pm and PostgreSQL/Test/Utils.pm to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "sinceVersion": "11.18",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "On NetBSD, force dynamic symbol resolution at postmaster start (Andres Freund, Tom Lane)\n          This avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "sinceVersion": "11.18",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix incompatibilities with LLVM 15",
      "description": "Fix incompatibilities with LLVM 15 (Thomas Munro, Andres Freund)",
      "sinceVersion": "11.18",
      "contributor": "Thomas Munro, Andres Freund"
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set",
      "description": "Allow use of `__sync_lock_test_and_set()()` for spinlocks on any machine (Tom Lane)\n          This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS",
      "description": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane)",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later",
      "description": "Silence assorted compiler warnings from clang 15 and later (Tom Lane)",
      "sinceVersion": "11.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis.",
      "description": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy_River, America/Thunder_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n          These zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of timestamptz display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n          It is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "sinceVersion": "11.18",
      "contributor": null
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not",
      "description": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid (Tom Lane)\n          When pg_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "sinceVersion": "11.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list",
      "description": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list (Dean Rasheed)\n          In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "sinceVersion": "11.19",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "Fix edge-case data corruption in parallel hash joins (Dmitry Astapov)\n          If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "sinceVersion": "11.19",
      "contributor": "Dmitry Astapov"
    },
    {
      "title": "Log the correct ending timestamp in recovery_target_xid mode",
      "description": "Log the correct ending timestamp in recovery_target_xid mode (Tom Lane)\n          When ending recovery based on the recovery_target_xid setting with recovery_target_inclusive = `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "sinceVersion": "11.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline",
      "description": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline (Tom Lane)\n          If there's not been an explicit BEGIN TRANSACTION, ANALYZE would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "sinceVersion": "11.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "Reject cancel request packets having the wrong length (Andrey Borodin)\n          The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "sinceVersion": "11.19",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "Add recursion and looping defenses in subquery pullup (Tom Lane)\n          A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "sinceVersion": "11.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition (Tom Lane)\n          This could result in “could not devise a query plan for the given query” errors.",
      "sinceVersion": "11.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches",
      "description": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches (Tom Lane)",
      "sinceVersion": "11.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "Clean up the libpq connection object after a failed replication connection attempt (Andres Freund)\n          The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as CREATE SUBSCRIPTION, such a failure resulted in a small session-lifespan memory leak.",
      "sinceVersion": "11.19",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "Fix uninitialized-memory usage in logical decoding (Masahiko Sawada)\n          In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "sinceVersion": "11.19",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations",
      "description": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations (Robert Haas)",
      "sinceVersion": "11.19",
      "contributor": "Robert Haas"
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Advance a heap page's LSN when setting its all-visible bit during WAL replay (Jeff Davis)\n          Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "sinceVersion": "11.19",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Prevent unsafe usage of a relation cache entry's rd_smgr pointer",
      "description": "Prevent unsafe usage of a relation cache entry's rd_smgr pointer (Amul Sul)\n          Remove various assumptions that rd_smgr would stay valid over a series of operations, by wrapping all uses of it in a function that will recompute it if needed. This prevents bugs occurring when an unexpected cache flush occurs partway through such a series.",
      "sinceVersion": "11.19",
      "contributor": "Amul Sul"
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "Fix latent buffer-overrun problem in `WaitEventSet` logic (Thomas Munro)\n          The `epoll()`-based and `kqueue()`-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "sinceVersion": "11.19",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds (Andres Freund)\n          clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "sinceVersion": "11.19",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks (Justin Pryzby)\n          In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "sinceVersion": "11.19",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "In pg_dump, avoid calling unsafe server functions before we have locks on the tables to be examined",
      "description": "In pg_dump, avoid calling unsafe server functions before we have locks on the tables to be examined (Tom Lane, Gilles Darold)\n          pg_dump uses certain server functions that can fail if examining a table that gets dropped concurrently. Avoid this type of failure by ensuring that we obtain access share lock before inquiring too deeply into a table's properties, and that we don't apply such functions to tables we don't intend to dump at all.",
      "sinceVersion": "11.19",
      "contributor": "Tom Lane, Gilles Darold"
    },
    {
      "title": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA",
      "description": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA (Dean Rasheed)",
      "sinceVersion": "11.19",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits",
      "description": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits (Tom Lane)",
      "sinceVersion": "11.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/sepgsql, avoid deprecation warnings with recent libselinux",
      "description": "In contrib/sepgsql, avoid deprecation warnings with recent libselinux (Michael Paquier)",
      "sinceVersion": "11.19",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl",
      "description": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl (Andrew Dunstan)",
      "sinceVersion": "11.19",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc (Andrew Dunstan)\n          Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "sinceVersion": "11.19",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Suppress compiler warnings from Perl's header files (Andres Freund)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "11.19",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions",
      "description": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions (Tom Lane)",
      "sinceVersion": "11.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.\n          Notably, a new timezone America/Ciudad_Juarez has been split off from America/Ojinaga.",
      "sinceVersion": "11.19",
      "contributor": null
    },
    {
      "title": "By default, panic instead of retrying after `fsync",
      "description": "By default, panic instead of retrying after `fsync()()` failure, to avoid possible data corruption (Craig Ringer, Thomas Munro)\n          Some popular operating systems discard kernel data buffers when unable to write them out, reporting this as `fsync()()` failure. If we reissue the `fsync()()` request it will succeed, but in fact the data has been lost, so continuing risks database corruption. By raising a panic condition instead, we can replay from WAL, which may contain the only remaining copy of the data in such a situation. While this is surely ugly and inefficient, there are few alternatives, and fortunately the case happens very rarely.\n          A new server parameter data_sync_retry has been added to control this; if you are certain that your kernel does not discard dirty data buffers in such scenarios, you can set data_sync_retry to `on` to restore the old behavior.",
      "sinceVersion": "11.2",
      "contributor": "Craig Ringer, Thomas Munro"
    },
    {
      "title": "Fix possible index corruption when the indexed column has a “fast default”",
      "description": "Fix possible index corruption when the indexed column has a “fast default” (that is, it was added by `ALTER TABLE ADD COLUMN` with a constant non-NULL default value specified, after the table already contained some rows) (Andres Freund)",
      "sinceVersion": "11.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Make pg_dump include ALTER INDEX SET STATISTICS commands",
      "description": "Make pg_dump include ALTER INDEX SET STATISTICS commands (Michael Paquier)\n          When the ability to attach statistics targets to index expressions was added, we forgot to teach pg_dump about it, so that such settings were lost in dump/reload.",
      "sinceVersion": "11.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Include each major release branch's release notes in the documentation for only that branch, rather than that branch and all later ones",
      "description": "Include each major release branch's release notes in the documentation for only that branch, rather than that branch and all later ones (Tom Lane)\n          The duplication induced by the previous policy was getting out of hand. Our plan is to provide a full archive of release notes on the project's web site, but not duplicate it within each release.",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of unique indexes with `INCLUDE` columns on partitioned tables",
      "description": "Fix handling of unique indexes with `INCLUDE` columns on partitioned tables (Álvaro Herrera)\n          The uniqueness condition was not checked properly in such cases.",
      "sinceVersion": "11.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure that `NOT NULL` constraints of a partitioned table are honored within its partitions",
      "description": "Ensure that `NOT NULL` constraints of a partitioned table are honored within its partitions (Álvaro Herrera, Amit Langote)",
      "sinceVersion": "11.2",
      "contributor": "Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Update catalog state correctly for partition table constraints when detaching their partition",
      "description": "Update catalog state correctly for partition table constraints when detaching their partition (Amit Langote, Álvaro Herrera)\n          Previously, the pg_constraint.conislocal field for such a constraint might improperly be left as `false`, rendering it undroppable. A dump/restore or pg_upgrade would cure the problem, but if necessary, the catalog field can be adjusted manually.",
      "sinceVersion": "11.2",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Create or delete foreign key enforcement triggers correctly when attaching or detaching a partition in a partitioned table that has a foreign-key constraint",
      "description": "Create or delete foreign key enforcement triggers correctly when attaching or detaching a partition in a partitioned table that has a foreign-key constraint (Amit Langote, Álvaro Herrera)",
      "sinceVersion": "11.2",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Avoid useless creation of duplicate foreign key constraints in partitioned tables",
      "description": "Avoid useless creation of duplicate foreign key constraints in partitioned tables (Álvaro Herrera)",
      "sinceVersion": "11.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "When an index is created on a partitioned table using `ONLY`, and there are no partitions yet, mark it valid immediately",
      "description": "When an index is created on a partitioned table using `ONLY`, and there are no partitions yet, mark it valid immediately (Álvaro Herrera)\n          Otherwise there is no way to make it become valid.",
      "sinceVersion": "11.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Use a safe table lock level when detaching a partition",
      "description": "Use a safe table lock level when detaching a partition (Álvaro Herrera)\n          The previous locking level was too weak and might allow concurrent DDL on the table, with bad results.",
      "sinceVersion": "11.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix problems with applying `ON COMMIT DROP` and `ON COMMIT DELETE ROWS` to partitioned tables and tables with inheritance children",
      "description": "Fix problems with applying `ON COMMIT DROP` and `ON COMMIT DELETE ROWS` to partitioned tables and tables with inheritance children (Michael Paquier)",
      "sinceVersion": "11.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Disallow COPY FREEZE on partitioned tables",
      "description": "Disallow COPY FREEZE on partitioned tables (David Rowley)\n          This should eventually be made to work, but it may require a patch that's too complicated to risk back-patching.",
      "sinceVersion": "11.2",
      "contributor": "David Rowley"
    },
    {
      "title": "Correctly adjust “fast default” values during ALTER TABLE ... ALTER COLUMN TYPE",
      "description": "Correctly adjust “fast default” values during ALTER TABLE ... ALTER COLUMN TYPE (Andrew Dunstan)",
      "sinceVersion": "11.2",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Avoid possible deadlock when acquiring multiple buffer locks",
      "description": "Avoid possible deadlock when acquiring multiple buffer locks (Nishant Fnu)",
      "sinceVersion": "11.2",
      "contributor": "Nishant Fnu"
    },
    {
      "title": "Avoid deadlock between hot-standby queries and replay of GIN index page deletion",
      "description": "Avoid deadlock between hot-standby queries and replay of GIN index page deletion (Alexander Korotkov)",
      "sinceVersion": "11.2",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix possible crashes in logical replication when index expressions or predicates are in use",
      "description": "Fix possible crashes in logical replication when index expressions or predicates are in use (Peter Eisentraut)",
      "sinceVersion": "11.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid useless and expensive logical decoding of TOAST data during a table rewrite",
      "description": "Avoid useless and expensive logical decoding of TOAST data during a table rewrite (Tomas Vondra)",
      "sinceVersion": "11.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix logic for stopping a subset of WAL senders when synchronous replication is enabled",
      "description": "Fix logic for stopping a subset of WAL senders when synchronous replication is enabled (Paul Guo, Michael Paquier)",
      "sinceVersion": "11.2",
      "contributor": "Paul Guo, Michael Paquier"
    },
    {
      "title": "Avoid possibly writing an incorrect replica identity field in a tuple deletion WAL record",
      "description": "Avoid possibly writing an incorrect replica identity field in a tuple deletion WAL record (Stas Kelvich)",
      "sinceVersion": "11.2",
      "contributor": "Stas Kelvich"
    },
    {
      "title": "Make the archiver prioritize WAL history files over WAL data files while choosing which file to archive next",
      "description": "Make the archiver prioritize WAL history files over WAL data files while choosing which file to archive next (David Steele)",
      "sinceVersion": "11.2",
      "contributor": "David Steele"
    },
    {
      "title": "Fix possible crash in UPDATE with a multiple `SET` clause using a sub-`SELECT` as source",
      "description": "Fix possible crash in UPDATE with a multiple `SET` clause using a sub-`SELECT` as source (Tom Lane)",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash when zero rows are fed to `json[b]_populate_recordset",
      "description": "Fix crash when zero rows are fed to `json[b]_populate_recordset()()` or `json[b]_to_recordset()()` (Tom Lane)",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash if libxml2 returns a null error message",
      "description": "Avoid crash if libxml2 returns a null error message (Sergio Conde Gómez)",
      "sinceVersion": "11.2",
      "contributor": "Sergio Conde Gómez"
    },
    {
      "title": "Fix incorrect JIT tuple deforming code for tables with many columns",
      "description": "Fix incorrect JIT tuple deforming code for tables with many columns (more than approximately 800) (Andres Freund)",
      "sinceVersion": "11.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix spurious grouping-related parser errors caused by inconsistent handling of collation assignment",
      "description": "Fix spurious grouping-related parser errors caused by inconsistent handling of collation assignment (Andrew Gierth)\n          In some cases, expressions that should be considered to match were not seen as matching, if they included operations on collatable data types.",
      "sinceVersion": "11.2",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix parsing of collation-sensitive expressions in the arguments of a CALL statement",
      "description": "Fix parsing of collation-sensitive expressions in the arguments of a CALL statement (Peter Eisentraut)",
      "sinceVersion": "11.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Ensure proper cleanup after detecting an error in the argument list of a CALL statement",
      "description": "Ensure proper cleanup after detecting an error in the argument list of a CALL statement (Tom Lane)",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Check whether the comparison function underlying `LEAST",
      "description": "Check whether the comparison function underlying `LEAST()()` or `GREATEST()()` is leakproof, rather than just assuming it is (Tom Lane)\n          Actual information leaks from btree comparison functions are typically hard to provoke, but in principle they could happen.",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect planning of queries involving nested loops both above and below a Gather plan node",
      "description": "Fix incorrect planning of queries involving nested loops both above and below a Gather plan node (Tom Lane)\n          If both levels of nestloop needed to pass the same variable into their right-hand sides, an incorrect plan would be generated.",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect planning of queries in which a lateral reference must be evaluated at a foreign table scan",
      "description": "Fix incorrect planning of queries in which a lateral reference must be evaluated at a foreign table scan (Tom Lane)",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner failure when the first column of a row comparison matches an index column, but later column",
      "description": "Fix planner failure when the first column of a row comparison matches an index column, but later column(s) do not, and the index has included (non-key) columns (Tom Lane)",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner-case underestimation of the cost of a merge join",
      "description": "Fix corner-case underestimation of the cost of a merge join (Tom Lane)\n          The planner could prefer a merge join when the outer key range is much smaller than the inner key range, even if there are so many duplicate keys on the inner side that this is a poor choice.",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid O",
      "description": "Avoid O(N^2) planning time growth when a query contains many thousand indexable clauses (Tom Lane)",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve ANALYZE's handling of concurrently-updated rows",
      "description": "Improve ANALYZE's handling of concurrently-updated rows (Jeff Janes, Tom Lane)\n          Previously, rows deleted by an in-progress transaction were omitted from ANALYZE's sample, but this has been found to lead to more inconsistency than including them would do. In effect, the sample now corresponds to an MVCC snapshot as of ANALYZE's start time.",
      "sinceVersion": "11.2",
      "contributor": "Jeff Janes, Tom Lane"
    },
    {
      "title": "Make TRUNCATE ignore inheritance child tables that are temporary tables of other sessions",
      "description": "Make TRUNCATE ignore inheritance child tables that are temporary tables of other sessions (Amit Langote, Michael Paquier)\n          This brings TRUNCATE into line with the behavior of other commands. Previously, such cases usually ended in failure.",
      "sinceVersion": "11.2",
      "contributor": "Amit Langote, Michael Paquier"
    },
    {
      "title": "Fix TRUNCATE to update the statistics counters for the right table",
      "description": "Fix TRUNCATE to update the statistics counters for the right table (Tom Lane)\n          If the truncated table had a TOAST table, that table's counters were reset instead.",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Process ALTER TABLE ONLY ADD COLUMN IF NOT EXISTS correctly",
      "description": "Process ALTER TABLE ONLY ADD COLUMN IF NOT EXISTS correctly (Greg Stark)",
      "sinceVersion": "11.2",
      "contributor": "Greg Stark"
    },
    {
      "title": "Allow UNLISTEN in hot-standby mode",
      "description": "Allow UNLISTEN in hot-standby mode (Shay Rojansky)\n          This is necessarily a no-op, because LISTEN isn't allowed in hot-standby mode; but allowing the dummy operation simplifies session-state-reset logic in clients.",
      "sinceVersion": "11.2",
      "contributor": "Shay Rojansky"
    },
    {
      "title": "Fix missing role dependencies in some schema and data type permissions lists",
      "description": "Fix missing role dependencies in some schema and data type permissions lists (Tom Lane)\n          In some cases it was possible to drop a role to which permissions had been granted. This caused no immediate problem, but a subsequent dump/reload or upgrade would fail, with symptoms involving attempts to grant privileges to all-numeric role names.",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent use of a session's temporary schema within a two-phase transaction",
      "description": "Prevent use of a session's temporary schema within a two-phase transaction (Michael Paquier)\n          Accessing a temporary table within such a transaction has been forbidden for a long time, but it was still possible to cause problems with other operations on temporary objects.",
      "sinceVersion": "11.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure relation caches are updated properly after adding or removing foreign key constraints",
      "description": "Ensure relation caches are updated properly after adding or removing foreign key constraints (Álvaro Herrera)\n          This oversight could result in existing sessions failing to enforce a newly-created constraint, or continuing to enforce a dropped one.",
      "sinceVersion": "11.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure relation caches are updated properly after renaming constraints",
      "description": "Ensure relation caches are updated properly after renaming constraints (Amit Langote)",
      "sinceVersion": "11.2",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix replay of GiST index micro-vacuum operations so that concurrent hot-standby queries do not see inconsistent state",
      "description": "Fix replay of GiST index micro-vacuum operations so that concurrent hot-standby queries do not see inconsistent state (Alexander Korotkov)",
      "sinceVersion": "11.2",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Prevent empty GIN index pages from being reclaimed too quickly, causing failures of concurrent searches",
      "description": "Prevent empty GIN index pages from being reclaimed too quickly, causing failures of concurrent searches (Andrey Borodin, Alexander Korotkov)",
      "sinceVersion": "11.2",
      "contributor": "Andrey Borodin, Alexander Korotkov"
    },
    {
      "title": "Fix edge-case failures in float-to-integer coercions",
      "description": "Fix edge-case failures in float-to-integer coercions (Andrew Gierth, Tom Lane)\n          Values very slightly above the maximum valid integer value might not be rejected, and then would overflow, producing the minimum valid integer instead. Also, values that should round to the minimum or maximum integer value might be incorrectly rejected.",
      "sinceVersion": "11.2",
      "contributor": "Andrew Gierth, Tom Lane"
    },
    {
      "title": "Fix parsing of space-separated lists of host names in the ldapserver parameter of LDAP authentication entries in pg_hba.conf",
      "description": "Fix parsing of space-separated lists of host names in the ldapserver parameter of LDAP authentication entries in pg_hba.conf (Thomas Munro)",
      "sinceVersion": "11.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "When making a PAM authentication request, don't set the PAM_RHOST variable if the connection is via a Unix socket",
      "description": "When making a PAM authentication request, don't set the PAM_RHOST variable if the connection is via a Unix socket (Thomas Munro)\n          Previously that variable would be set to `[local]`, which is at best unhelpful, since it's supposed to be a host name.",
      "sinceVersion": "11.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Disallow setting client_min_messages higher than `ERROR`",
      "description": "Disallow setting client_min_messages higher than `ERROR` (Jonah Harris, Tom Lane)\n          Previously, it was possible to set this variable to `FATAL` or `PANIC`, which had the effect of suppressing transmission of ordinary error messages to the client. However, that's contrary to guarantees that are given in the PostgreSQL wire protocol specification, and it caused some clients to become very confused. In released branches, fix this by silently treating such settings as meaning `ERROR` instead. Version 12 and later will reject those alternatives altogether.",
      "sinceVersion": "11.2",
      "contributor": "Jonah Harris, Tom Lane"
    },
    {
      "title": "Fix ecpglib to use `uselocale",
      "description": "Fix ecpglib to use `uselocale()()` or `_configthreadlocale()()` in preference to `setlocale()()` (Michael Meskes, Tom Lane)\n          Since `setlocale()()` is not thread-local, and might not even be thread-safe, the previous coding caused problems in multi-threaded ecpg applications.",
      "sinceVersion": "11.2",
      "contributor": "Michael Meskes, Tom Lane"
    },
    {
      "title": "Fix incorrect results for numeric data passed through an ecpg SQLDA",
      "description": "Fix incorrect results for numeric data passed through an ecpg SQLDA (SQL Descriptor Area) (Daisuke Higuchi)\n          Values with leading zeroes were not copied correctly.",
      "sinceVersion": "11.2",
      "contributor": "Daisuke Higuchi"
    },
    {
      "title": "Fix psql's \\g `target` meta-command to work with COPY TO STDOUT",
      "description": "Fix psql's \\g `target` meta-command to work with COPY TO STDOUT (Daniel Vérité)\n          Previously, the `target` option was ignored, so that the copy data always went to the current query output target.",
      "sinceVersion": "11.2",
      "contributor": "Daniel Vérité"
    },
    {
      "title": "Make psql's LaTeX output formats render special characters properly",
      "description": "Make psql's LaTeX output formats render special characters properly (Tom Lane)\n          Backslash and some other ASCII punctuation characters were not rendered correctly, leading to document syntax errors or wrong characters in the output.",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make pgbench's random number generation fully deterministic and platform-independent when --random-seed=`N` is specified",
      "description": "Make pgbench's random number generation fully deterministic and platform-independent when --random-seed=`N` is specified (Fabien Coelho, Tom Lane)\n          On any specific platform, the sequence obtained with a particular value of `N` will probably be different from what it was before this patch.",
      "sinceVersion": "11.2",
      "contributor": "Fabien Coelho, Tom Lane"
    },
    {
      "title": "Fix pg_basebackup and pg_verify_checksums to ignore temporary files appropriately",
      "description": "Fix pg_basebackup and pg_verify_checksums to ignore temporary files appropriately (Michael Banck, Michael Paquier)",
      "sinceVersion": "11.2",
      "contributor": "Michael Banck, Michael Paquier"
    },
    {
      "title": "Fix pg_dump's handling of materialized views with indirect dependencies on primary keys",
      "description": "Fix pg_dump's handling of materialized views with indirect dependencies on primary keys (Tom Lane)\n          This led to mis-labeling of such views' dump archive entries, causing harmless warnings about “archive items not in correct section order”; less harmlessly, selective-restore options depending on those labels, such as --section, might misbehave.",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump's dumping of tables that have OIDs",
      "description": "Fix pg_dump's dumping of tables that have OIDs (Peter Eisentraut)\n          The `WITH OIDS` clause was omitted if it needed to be applied to the first table to be dumped.",
      "sinceVersion": "11.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid null-pointer-dereference crash on some platforms when pg_dump or pg_restore tries to report an error",
      "description": "Avoid null-pointer-dereference crash on some platforms when pg_dump or pg_restore tries to report an error (Tom Lane)",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent false index-corruption reports from contrib/amcheck caused by inline-compressed data",
      "description": "Prevent false index-corruption reports from contrib/amcheck caused by inline-compressed data (Peter Geoghegan)",
      "sinceVersion": "11.2",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Properly disregard `SIGPIPE` errors if COPY FROM PROGRAM stops reading the program's output early",
      "description": "Properly disregard `SIGPIPE` errors if COPY FROM PROGRAM stops reading the program's output early (Tom Lane)\n          This case isn't actually reachable directly with COPY, but it can happen when using contrib/file_fdw.",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix contrib/hstore to calculate correct hash values for empty hstore values that were created in version 8.4 or before",
      "description": "Fix contrib/hstore to calculate correct hash values for empty hstore values that were created in version 8.4 or before (Andrew Gierth)\n          The previous coding did not give the same result as for an empty hstore value created by a newer version, thus potentially causing wrong results in hash joins or hash aggregation. It is advisable to reindex any hash indexes built on hstore columns, if the table might contain data that was originally stored as far back as 8.4 and was never dumped/reloaded since then.",
      "sinceVersion": "11.2",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Avoid crashes and excessive runtime with large inputs to contrib/intarray's `gist__int_ops` index support",
      "description": "Avoid crashes and excessive runtime with large inputs to contrib/intarray's `gist__int_ops` index support (Andrew Gierth)",
      "sinceVersion": "11.2",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "In configure, look for python3 and then python2 if python isn't found",
      "description": "In configure, look for python3 and then python2 if python isn't found (Peter Eisentraut)\n          This allows PL/Python to be configured without explicitly specifying `PYTHON` on platforms that no longer provide an unversioned python executable.",
      "sinceVersion": "11.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Include JIT-related headers in the installed set of header files",
      "description": "Include JIT-related headers in the installed set of header files (Donald Dong)",
      "sinceVersion": "11.2",
      "contributor": "Donald Dong"
    },
    {
      "title": "Support new Makefile variables `PG_CFLAGS`, `PG_CXXFLAGS`, and `PG_LDFLAGS` in pgxs builds",
      "description": "Support new Makefile variables `PG_CFLAGS`, `PG_CXXFLAGS`, and `PG_LDFLAGS` in pgxs builds (Christoph Berg)\n          This simplifies customization of extension build processes.",
      "sinceVersion": "11.2",
      "contributor": "Christoph Berg"
    },
    {
      "title": "Fix Perl-coded build scripts to not assume “`.`” is in the search path, since recent Perl versions don't include that",
      "description": "Fix Perl-coded build scripts to not assume “`.`” is in the search path, since recent Perl versions don't include that (Andrew Dunstan)",
      "sinceVersion": "11.2",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix server command-line option parsing problems on OpenBSD",
      "description": "Fix server command-line option parsing problems on OpenBSD (Tom Lane)",
      "sinceVersion": "11.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Relocate call of `set_rel_pathlist_hook` so that extensions can use it to supply partial paths for parallel queries",
      "description": "Relocate call of `set_rel_pathlist_hook` so that extensions can use it to supply partial paths for parallel queries (KaiGai Kohei)\n          This is not expected to affect existing use-cases.",
      "sinceVersion": "11.2",
      "contributor": "KaiGai Kohei"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2018i for DST law changes in Kazakhstan, Metlakatla, and Sao Tome and Principe. Kazakhstan's Qyzylorda zone is split in two, creating a new zone Asia/Qostanay, as some areas did not change UTC offset. Historical corrections for Hong Kong and numerous Pacific islands.",
      "sinceVersion": "11.2",
      "contributor": null
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view",
      "description": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane)",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash when the new schema name is omitted in CREATE SCHEMA",
      "description": "Avoid crash when the new schema name is omitted in CREATE SCHEMA (Michael Paquier)\n          The SQL standard allows writing `CREATE SCHEMA AUTHORIZATION `owner_name``, with the schema name defaulting to `owner_name`. However some code paths expected the schema name to be present and would fail.",
      "sinceVersion": "11.20",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "Disallow altering composite types that are stored in indexes (Tom Lane)\n          ALTER TYPE disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possible crash when `array_position",
      "description": "Avoid possible crash when `array_position()()` or `array_positions()()` is passed an empty array (Tom Lane)",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char",
      "description": "Fix possible out-of-bounds fetch in `to_char()()` (Tom Lane)\n          With bad luck this could have resulted in a server crash.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid buffer overread in `translate",
      "description": "Avoid buffer overread in `translate()()` function (Daniil Anisimov)\n          When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "sinceVersion": "11.20",
      "contributor": "Daniil Anisimov"
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Fix error cursor setting for parse errors in JSON string literals (Tom Lane)\n          Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "Fix parser's failure to detect some cases of improperly-nested aggregates (Tom Lane)\n          This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options (David Rowley)\n          This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "sinceVersion": "11.20",
      "contributor": "David Rowley"
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another (Tom Lane)\n          This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Fix oversights in execution of nested `ARRAY[]` constructs (Alexander Lakhin, Tom Lane)\n          Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "sinceVersion": "11.20",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Fix partition pruning logic for partitioning on boolean columns (David Rowley)\n          Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "sinceVersion": "11.20",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "Fix race condition in per-batch cleanup during parallel hash join (Thomas Munro, Melanie Plageman)\n          A crash was possible given unlucky timing and parallel_leader_participation = `off` (which is not the default).",
      "sinceVersion": "11.20",
      "contributor": "Thomas Munro, Melanie Plageman"
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero",
      "description": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero (Masahiko Sawada)\n          Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation vacuum_cost_delay setting, but this was done only for positive settings, not zero.",
      "sinceVersion": "11.20",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates",
      "description": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates (Andres Freund, Tom Lane)\n          Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "sinceVersion": "11.20",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule (Dean Rasheed)\n          Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "sinceVersion": "11.20",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Support references to `OLD` and `NEW` within subqueries in rule actions (Dean Rasheed, Tom Lane)\n          Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "sinceVersion": "11.20",
      "contributor": "Dean Rasheed, Tom Lane"
    },
    {
      "title": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table",
      "description": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table (Tom Lane)",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin (Shi Yu)\n          Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache_callback_list slots” error.",
      "sinceVersion": "11.20",
      "contributor": "Shi Yu"
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "Fix dereference of dangling pointer during buffering build of a GiST index (Alexander Lakhin)\n          This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "sinceVersion": "11.20",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Ignore dropped columns during logical replication of an update or delete action",
      "description": "Ignore dropped columns during logical replication of an update or delete action (Onder Kalaci, Shi Yu)\n          Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "sinceVersion": "11.20",
      "contributor": "Onder Kalaci, Shi Yu"
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding (Jacob Champion, Heikki Linnakangas)\n          This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "sinceVersion": "11.20",
      "contributor": "Jacob Champion, Heikki Linnakangas"
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "Avoid race condition with process ID tracking on Windows (Thomas Munro)\n          The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "sinceVersion": "11.20",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add missing cases to `SPI_result_code_string",
      "description": "Add missing cases to `SPI_result_code_string()()` (Dean Rasheed)",
      "sinceVersion": "11.20",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc",
      "description": "Fix erroneous Valgrind markings in `AllocSetRealloc()()` (Karina Litskevich)\n          In the unusual case where the size of a large (&gt;8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "sinceVersion": "11.20",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message",
      "description": "Avoid assertion failure when decoding a transactional logical replication message (Tomas Vondra)",
      "sinceVersion": "11.20",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "Avoid locale sensitivity when processing regular expression escapes (Jeff Davis)\n          A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "sinceVersion": "11.20",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range",
      "description": "Avoid trying to write an empty WAL record in `log_newpage_range()()` when the last few pages in the specified range are empty (Matthias van de Meent)\n          It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "sinceVersion": "11.20",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays (Tom Lane)\n          plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays (Tom Lane)\n          plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Fix unwinding of exception stack in plpython (Xing Guo)\n          Some rare failure cases could return without cleaning up the PG_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "sinceVersion": "11.20",
      "contributor": "Xing Guo"
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the -C ORACLE option",
      "description": "Fix possible data corruption in ecpg programs built with the -C ORACLE option (Kyotaro Horiguchi)\n          When `ecpg_get_data()()` is called with varcharsize set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "sinceVersion": "11.20",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully (Tom Lane)\n          Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the --load-via-partition-root option; but since there is very little chance of success without that, teach pg_dump to apply it automatically to such tables.\n          Also, fix pg_restore to not try to TRUNCATE target tables before restoring into them when --load-via-partition-root mode is used. This avoids a hazard of deadlocks and lost data.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping (Dmitry Dolgov, Tom Lane)\n          This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "sinceVersion": "11.20",
      "contributor": "Dmitry Dolgov, Tom Lane"
    },
    {
      "title": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression",
      "description": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression (Tom Lane)\n          A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip",
      "description": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip (Tom Lane)\n          Previously, `make install-strip` used the -x option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "sinceVersion": "11.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it (Aleksander Alekseev, Peter Eisentraut, Tom Lane)\n          It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's --nonet option to the build recipes.",
      "sinceVersion": "11.20",
      "contributor": "Aleksander Alekseev, Peter Eisentraut, Tom Lane"
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory",
      "description": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory (Peter Eisentraut)\n          Place it under tmp_check in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "sinceVersion": "11.20",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.\n          When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "sinceVersion": "11.20",
      "contributor": null
    },
    {
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign (Noah Misch)\n          This restriction guards against SQL-injection hazards for trusted extensions.\n          The PostgreSQL Project thanks Micah Gate, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "sinceVersion": "11.21",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix confusion between empty",
      "description": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries (Tomas Vondra)\n          Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n          This fix will not in itself correct faulty BRIN entries. It's recommended to REINDEX any BRIN indexes that may be used to search for nulls.",
      "sinceVersion": "11.21",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted",
      "description": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted (Andres Freund)\n          If DROP DATABASE was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its pg_database row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another DROP DATABASE.",
      "sinceVersion": "11.21",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "Ensure that partitioned indexes are correctly marked as valid or not at creation (Michael Paquier)\n          If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "sinceVersion": "11.21",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION",
      "description": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION (Michael Paquier)\n          Such an index will now be ignored, and a new child index created instead.",
      "sinceVersion": "11.21",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached (Michael Paquier)\n          The update of the index's pg_index entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "sinceVersion": "11.21",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema",
      "description": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema (Michael Paquier, Heikki Linnakangas)\n          Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "sinceVersion": "11.21",
      "contributor": "Michael Paquier, Heikki Linnakangas"
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "Don't use partial unique indexes for uniqueness proofs in the planner (David Rowley)\n          This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "sinceVersion": "11.21",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses (Etsuro Fujita)\n          The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "sinceVersion": "11.21",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode (Thomas Munro)\n          Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "sinceVersion": "11.21",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "Fix intermittent failures when trying to update a field of a composite column (Tom Lane)\n          If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "sinceVersion": "11.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns",
      "description": "Prevent stack-overflow crashes with very complex text search patterns (Tom Lane)",
      "sinceVersion": "11.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf",
      "description": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf (Tom Lane)\n          The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "sinceVersion": "11.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "Fix mishandling of C++ out-of-memory conditions (Heikki Linnakangas)\n          If JIT is in use, running out of memory in a C++ `new()` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "sinceVersion": "11.21",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space (Dongming Liu)\n          Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "sinceVersion": "11.21",
      "contributor": "Dongming Liu"
    },
    {
      "title": "Allow VACUUM to continue after detecting certain types of b-tree index corruption",
      "description": "Allow VACUUM to continue after detecting certain types of b-tree index corruption (Peter Geoghegan)\n          If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of REINDEX will fix the broken index, but preventing VACUUM from completing until that is done risks making matters far worse.",
      "sinceVersion": "11.21",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid",
      "description": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid (Andres Freund)\n          Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "sinceVersion": "11.21",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "Avoid double replay of prepared transactions during crash recovery (suyu.cmj, Michael Paquier)\n          After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "sinceVersion": "11.21",
      "contributor": "suyu.cmj, Michael Paquier"
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync",
      "description": "Ensure that a newly created, but still empty table is `fsync()`'ed at the next checkpoint (Heikki Linnakangas)\n          Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "sinceVersion": "11.21",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "Ensure that creation of the init fork of an unlogged index is WAL-logged (Heikki Linnakangas)\n          While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "sinceVersion": "11.21",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix missing reinitializations of delay-checkpoint-end flags",
      "description": "Fix missing reinitializations of delay-checkpoint-end flags (suyu.cmj)\n          This could result in unnecessary delays of checkpoints, or in assertion failures in assert-enabled builds.",
      "sinceVersion": "11.21",
      "contributor": "suyu.cmj"
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction",
      "description": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction (Tom Lane)",
      "sinceVersion": "11.21",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix contrib/fuzzystrmatch's Soundex `difference",
      "description": "Fix contrib/fuzzystrmatch's Soundex `difference()()` function to handle empty input sanely (Alexander Lakhin, Tom Lane)\n          An input string containing no alphabetic characters resulted in unpredictable output.",
      "sinceVersion": "11.21",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Tighten whitespace checks in contrib/hstore input",
      "description": "Tighten whitespace checks in contrib/hstore input (Evan Jones)\n          In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "sinceVersion": "11.21",
      "contributor": "Evan Jones"
    },
    {
      "title": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass",
      "description": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass (Ankit Kumar Pandey, Alexander Lakhin)\n          Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "sinceVersion": "11.21",
      "contributor": "Ankit Kumar Pandey, Alexander Lakhin"
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in contrib/intarray",
      "description": "Avoid useless double decompression of GiST index entries in contrib/intarray (Konstantin Knizhnik, Matthias van de Meent, Tom Lane)",
      "sinceVersion": "11.21",
      "contributor": "Konstantin Knizhnik, Matthias van de Meent, Tom Lane"
    },
    {
      "title": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries",
      "description": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries (Shruthi Gowda)\n          This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "sinceVersion": "11.21",
      "contributor": "Shruthi Gowda"
    },
    {
      "title": "Silence deprecation warnings when compiling with OpenSSL 3.0.0 or later",
      "description": "Silence deprecation warnings when compiling with OpenSSL 3.0.0 or later (Peter Eisentraut)",
      "sinceVersion": "11.21",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions",
      "description": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions (Tom Lane)\n          This error led to a text-type value being interpreted as an unknown-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the text value.\n          The PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys (David Rowley)\n          Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "sinceVersion": "11.22",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses (Peter Geoghegan)\n          When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "sinceVersion": "11.22",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows",
      "description": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane)",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema",
      "description": "Don't crash if `cursor_to_xmlschema()()` is applied to a non-data-returning Portal (Boyu Yang)",
      "sinceVersion": "11.22",
      "contributor": "Boyu Yang"
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Handle invalid indexes more cleanly in assorted SQL functions (Noah Misch)\n          Report an error if `pgstatindex()()`, `pgstatginindex()()`, `pgstathashindex()()`, or `pgstattuple()()` is applied to an invalid index. If `brin_desummarize_range()()`, `brin_summarize_new_values()()`, `brin_summarize_range()()`, or `gin_clean_pending_list()()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed CREATE INDEX had left behind.",
      "sinceVersion": "11.22",
      "contributor": "Noah Misch"
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector",
      "description": "Avoid premature memory allocation failure with long inputs to `to_tsvector()()` (Tom Lane)",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix over-allocation of the constructed tsvector in `tsvectorrecv",
      "description": "Fix over-allocation of the constructed tsvector in `tsvectorrecv()()` (Denis Erokhin)\n          If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished tsvector. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "sinceVersion": "11.22",
      "contributor": "Denis Erokhin"
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit",
      "description": "Fix incorrect coding in `gtsvector_picksplit()()` (Alexander Lakhin)\n          This could lead to poor page-split decisions in GiST indexes on tsvector columns.",
      "sinceVersion": "11.22",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables (Tom Lane)\n          This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system",
      "description": "Avoid improper response to shutdown signals in child processes just forked by `system()()` (Nathan Bossart)\n          This fix avoids a race condition in which a child process that has been forked off by `system()()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "sinceVersion": "11.22",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Avoid torn reads of pg_control in relevant SQL functions",
      "description": "Avoid torn reads of pg_control in relevant SQL functions (Thomas Munro)\n          Acquire the appropriate lock before reading pg_control, to ensure we get a consistent view of that file.",
      "sinceVersion": "11.22",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Track the dependencies of cached CALL statements, and re-plan them when needed",
      "description": "Track the dependencies of cached CALL statements, and re-plan them when needed (Tom Lane)\n          DDL commands, such as replacement of a function that has been inlined into a CALL argument, can create the need to re-plan a CALL that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels",
      "description": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels (Richard Guo)\n          This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "sinceVersion": "11.22",
      "contributor": "Richard Guo"
    },
    {
      "title": "Avoid “record type has not been registered” failure when deparsing a view that contains references to fields of composite constants",
      "description": "Avoid “record type has not been registered” failure when deparsing a view that contains references to fields of composite constants (Tom Lane)",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow extracting fields from a RECORD-type `ROW",
      "description": "Allow extracting fields from a RECORD-type `ROW()` expression (Tom Lane)\n          SQL code that knows that we name such fields `f1`, `f2`, etc can use those names to extract fields from the expression. This change was originally made in version 13, and is now being back-patched into older branches to support tests for a related bug.",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error-handling bug in RECORD type cache management",
      "description": "Fix error-handling bug in RECORD type cache management (Thomas Munro)\n          An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "sinceVersion": "11.22",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error",
      "description": "Fix assertion failure when logical decoding is retried in the same session after an error (Hou Zhijie)",
      "sinceVersion": "11.22",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis (Tom Lane)\n          Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as SET TRANSACTION ISOLATION LEVEL.",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Keep by-reference attmissingval values in a long-lived context while they are being used",
      "description": "Keep by-reference attmissingval values in a long-lived context while they are being used (Andrew Dunstan)\n          This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "sinceVersion": "11.22",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Recalculate the effective value of search_path after ALTER ROLE",
      "description": "Recalculate the effective value of search_path after ALTER ROLE (Jeff Davis)\n          This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "sinceVersion": "11.22",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish",
      "description": "Fix order of operations in `GenericXLogFinish()` (Jeff Davis)\n          This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (contrib/bloom does, for example).",
      "sinceVersion": "11.22",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling",
      "description": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin)",
      "sinceVersion": "11.22",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables (Euler Taveira, Tom Lane)\n          Formerly, only the table-level ACL would get restored if both types were present.",
      "sinceVersion": "11.22",
      "contributor": "Euler Taveira, Tom Lane"
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg_basebackup",
      "description": "Avoid generating invalid temporary slot names in pg_basebackup (Jelte Fennema)\n          This has only been seen to occur when the server connection runs through pgbouncer.",
      "sinceVersion": "11.22",
      "contributor": "Jelte Fennema"
    },
    {
      "title": "In contrib/amcheck, do not report interrupted page deletion as corruption",
      "description": "In contrib/amcheck, do not report interrupted page deletion as corruption (Noah Misch)\n          This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before VACUUM had cleaned things up.",
      "sinceVersion": "11.22",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed",
      "description": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Dean Rasheed)\n          Such an indexscan failed to return all the entries it should.",
      "sinceVersion": "11.22",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Suppress assorted build-time warnings on recent macOS (Tom Lane)\n          Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the -multiply_defined suppress linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove `PHOT`",
      "description": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list (Tom Lane)\n          Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "sinceVersion": "11.22",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid access to already-freed memory during partition routing error reports",
      "description": "Avoid access to already-freed memory during partition routing error reports (Michael Paquier)\n          This mistake could lead to a crash, and in principle it might be possible to use it to disclose server memory contents. (CVE-2019-10129)",
      "sinceVersion": "11.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid catalog corruption when an ALTER TABLE on a partitioned table finds that a partitioned index is reusable",
      "description": "Avoid catalog corruption when an ALTER TABLE on a partitioned table finds that a partitioned index is reusable (Amit Langote, Tom Lane)\n          This occurs, for example, when ALTER COLUMN TYPE finds that no physical table rewrite is required.",
      "sinceVersion": "11.3",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Avoid catalog corruption when a temporary table with `ON COMMIT DROP` and an identity column is created in a single-statement transaction",
      "description": "Avoid catalog corruption when a temporary table with `ON COMMIT DROP` and an identity column is created in a single-statement transaction (Peter Eisentraut)\n          This hazard was overlooked because the case is not actually useful, since the temporary table would be dropped immediately after creation.",
      "sinceVersion": "11.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix failure in ALTER INDEX ... ATTACH PARTITION if the partitioned table contains more dropped columns than its partition does",
      "description": "Fix failure in ALTER INDEX ... ATTACH PARTITION if the partitioned table contains more dropped columns than its partition does (Álvaro Herrera)",
      "sinceVersion": "11.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix failure to attach a partition's existing index to a newly-created partitioned index in some cases",
      "description": "Fix failure to attach a partition's existing index to a newly-created partitioned index in some cases (Amit Langote, Álvaro Herrera)\n          This would lead to errors such as “index ... not found in partition” in subsequent DDL that uses the partitioned index.",
      "sinceVersion": "11.3",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Avoid crash when an EPQ recheck is performed for a partitioned query result relation",
      "description": "Avoid crash when an EPQ recheck is performed for a partitioned query result relation (Amit Langote)\n          This occurs when using `READ COMMITTED` isolation level and another session has concurrently updated some of the target row(s).",
      "sinceVersion": "11.3",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix tuple routing in multi-level partitioned tables that have dropped attributes",
      "description": "Fix tuple routing in multi-level partitioned tables that have dropped attributes (Amit Langote, Michael Paquier)",
      "sinceVersion": "11.3",
      "contributor": "Amit Langote, Michael Paquier"
    },
    {
      "title": "Fix failure when the slow path of foreign key constraint initial validation is applied to partitioned tables",
      "description": "Fix failure when the slow path of foreign key constraint initial validation is applied to partitioned tables (Hadi Moshayedi, Tom Lane, Andres Freund)\n          This didn't manifest except in the uncommon cases where the fast path can't be used (such as permissions problems).",
      "sinceVersion": "11.3",
      "contributor": "Hadi Moshayedi, Tom Lane, Andres Freund"
    },
    {
      "title": "Fix behavior for an UPDATE or DELETE on an inheritance tree or partitioned table in which every table can be excluded",
      "description": "Fix behavior for an UPDATE or DELETE on an inheritance tree or partitioned table in which every table can be excluded (Amit Langote, Tom Lane)\n          In such cases, the query did not report the correct set of output columns when a `RETURNING` clause was present, and if there were any statement-level triggers that should be fired, it didn't fire them.",
      "sinceVersion": "11.3",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "When accessing a partition directly, and constraint_exclusion is set to `on`, use the partition's partition constraint as well as any `CHECK` constraints for exclusion checking",
      "description": "When accessing a partition directly, and constraint_exclusion is set to `on`, use the partition's partition constraint as well as any `CHECK` constraints for exclusion checking (Amit Langote, Tom Lane)\n          This change restores the behavior to what it was in v10.",
      "sinceVersion": "11.3",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Avoid server crash when an error occurs while trying to persist a cursor query across a transaction commit",
      "description": "Avoid server crash when an error occurs while trying to persist a cursor query across a transaction commit (Tom Lane)\n          If a procedure attempts to commit while it has an open explicit or implicit cursor (for example, a PL/pgSQL FOR-loop query), the cursor must be executed to completion and its results saved before the transaction commit can be performed. An error occurring during such execution led to a crash.",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid throwing incorrect errors for updates of temporary tables and unlogged tables when a `FOR ALL TABLES` publication exists",
      "description": "Avoid throwing incorrect errors for updates of temporary tables and unlogged tables when a `FOR ALL TABLES` publication exists (Peter Eisentraut)\n          Such tables should be ignored for publication purposes, but some parts of the code failed to do so.",
      "sinceVersion": "11.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix handling of explicit `DEFAULT` items in an INSERT ... VALUES command with multiple `VALUES` rows, if the target relation is an updatable view",
      "description": "Fix handling of explicit `DEFAULT` items in an INSERT ... VALUES command with multiple `VALUES` rows, if the target relation is an updatable view (Amit Langote, Dean Rasheed)\n          When the updatable view has no default for the column but its underlying table has one, a single-row INSERT ... VALUES will use the underlying table's default. In the multi-row case, however, NULL was always used. Correct it to act like the single-row case.",
      "sinceVersion": "11.3",
      "contributor": "Amit Langote, Dean Rasheed"
    },
    {
      "title": "Fix CREATE VIEW to allow zero-column views",
      "description": "Fix CREATE VIEW to allow zero-column views (Ashutosh Sharma)\n          We should allow this for consistency with allowing zero-column tables. Since a table can be converted to a view, zero-column views could be created even with the restriction in place, leading to dump/reload failures.",
      "sinceVersion": "11.3",
      "contributor": "Ashutosh Sharma"
    },
    {
      "title": "Add missing support for CREATE TABLE IF NOT EXISTS ... AS EXECUTE ...",
      "description": "Add missing support for CREATE TABLE IF NOT EXISTS ... AS EXECUTE ... (Andreas Karlsson)\n          The combination of `IF NOT EXISTS` and `EXECUTE` should work, but the grammar omitted it.",
      "sinceVersion": "11.3",
      "contributor": "Andreas Karlsson"
    },
    {
      "title": "Accept XML documents as valid values of type xml when xmloption is set to `content`, as required by SQL:2006 and later",
      "description": "Accept XML documents as valid values of type xml when xmloption is set to `content`, as required by SQL:2006 and later (Chapman Flack)\n          Previously PostgreSQL followed the SQL:2003 definition, which doesn't allow this. But that creates a serious problem for dump/restore: there is no setting of xmloption that will accept all valid XML data. Hence, switch to the 2006 definition.\n          pg_dump is also modified to emit `SET xmloption = content` while restoring data, ensuring that dump/restore works even if the prevailing setting is `document`.",
      "sinceVersion": "11.3",
      "contributor": "Chapman Flack"
    },
    {
      "title": "Improve server's startup-time checks for whether a pre-existing shared memory segment is still in use",
      "description": "Improve server's startup-time checks for whether a pre-existing shared memory segment is still in use (Noah Misch)\n          The postmaster is now more likely to detect that there are still active processes from a previous postmaster incarnation, even if the postmaster.pid file has been removed.",
      "sinceVersion": "11.3",
      "contributor": "Noah Misch"
    },
    {
      "title": "Avoid possible division-by-zero in btree index vacuum logic",
      "description": "Avoid possible division-by-zero in btree index vacuum logic (Piotr Stefaniak, Alexander Korotkov)\n          This could lead to incorrect decisions about whether index cleanup is needed.",
      "sinceVersion": "11.3",
      "contributor": "Piotr Stefaniak, Alexander Korotkov"
    },
    {
      "title": "Avoid counting parallel workers' transactions as separate transactions",
      "description": "Avoid counting parallel workers' transactions as separate transactions (Haribabu Kommi)",
      "sinceVersion": "11.3",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Fix incompatibility of GIN-index WAL records",
      "description": "Fix incompatibility of GIN-index WAL records (Alexander Korotkov)\n          A fix applied in February's minor releases was not sufficiently careful about backwards compatibility, leading to problems if a standby server of that vintage reads GIN page-deletion WAL records generated by a primary server of a previous minor release.",
      "sinceVersion": "11.3",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix possible crash while executing a SHOW command in a replication connection",
      "description": "Fix possible crash while executing a SHOW command in a replication connection (Michael Paquier)",
      "sinceVersion": "11.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid server memory leak when fetching rows from a portal one at a time",
      "description": "Avoid server memory leak when fetching rows from a portal one at a time (Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid memory leak when a partition's relation cache entry is rebuilt",
      "description": "Avoid memory leak when a partition's relation cache entry is rebuilt (Amit Langote, Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Tolerate `EINVAL` and `ENOSYS` error results, where appropriate, for `fsync",
      "description": "Tolerate `EINVAL` and `ENOSYS` error results, where appropriate, for `fsync()` and `sync_file_range()` calls (Thomas Munro, James Sewell)\n          The previous change to panic on file synchronization failures turns out to have been excessively paranoid for certain cases where a failure is predictable and essentially means “operation not supported”.",
      "sinceVersion": "11.3",
      "contributor": "Thomas Munro, James Sewell"
    },
    {
      "title": "Report correct relation name in autovacuum's pg_stat_activity display during BRIN summarize operations",
      "description": "Report correct relation name in autovacuum's pg_stat_activity display during BRIN summarize operations (Álvaro Herrera)",
      "sinceVersion": "11.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid crash when trying to plan a partition-wise join when GEQO is active",
      "description": "Avoid crash when trying to plan a partition-wise join when GEQO is active (Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “failed to build any `N`-way joins” planner failures with lateral references leading out of `FULL` outer joins",
      "description": "Fix “failed to build any `N`-way joins” planner failures with lateral references leading out of `FULL` outer joins (Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misplanning of queries in which a set-returning function is applied to a relation that is provably empty",
      "description": "Fix misplanning of queries in which a set-returning function is applied to a relation that is provably empty (Tom Lane, Julien Rouhaud)\n          In v10, this oversight only led to slightly inefficient plans, but in v11 it could cause “set-valued function called in context that cannot accept a set” errors.",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane, Julien Rouhaud"
    },
    {
      "title": "Check the appropriate user's permissions when enforcing rules about letting a leaky operator see pg_statistic data",
      "description": "Check the appropriate user's permissions when enforcing rules about letting a leaky operator see pg_statistic data (Dean Rasheed)\n          When an underlying table is being accessed via a view, consider the privileges of the view owner while deciding whether leaky operators may be applied to the table's statistics data, rather than the privileges of the user making the query. This makes the planner's rules about what data is visible match up with the executor's, avoiding unnecessarily-poor plans.",
      "sinceVersion": "11.3",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix planner's parallel-safety assessment for grouped queries",
      "description": "Fix planner's parallel-safety assessment for grouped queries (Etsuro Fujita)\n          Previously, target-list evaluation work that could have been parallelized might not be.",
      "sinceVersion": "11.3",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix mishandling of “included” index columns in planner's unique-index logic",
      "description": "Fix mishandling of “included” index columns in planner's unique-index logic (Tom Lane)\n          This could result in failing to recognize that a unique index with included columns proves uniqueness of a query result, leading to a poor plan.",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect strictness check for array coercion expressions",
      "description": "Fix incorrect strictness check for array coercion expressions (Tom Lane)\n          This might allow, for example, incorrect inlining of a strict SQL function, leading to non-enforcement of the strictness condition.",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner-case server crashes in dynamic shared memory allocation",
      "description": "Fix corner-case server crashes in dynamic shared memory allocation (Thomas Munro, Robert Haas)",
      "sinceVersion": "11.3",
      "contributor": "Thomas Munro, Robert Haas"
    },
    {
      "title": "Fix race conditions in management of dynamic shared memory",
      "description": "Fix race conditions in management of dynamic shared memory (Thomas Munro)\n          These could lead to “dsa_area could not attach to segment” or “cannot unpin a segment that is not pinned” errors.",
      "sinceVersion": "11.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix race condition in which a hot-standby postmaster could fail to shut down after receiving a smart-shutdown request",
      "description": "Fix race condition in which a hot-standby postmaster could fail to shut down after receiving a smart-shutdown request (Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible crash when `pg_identify_object_as_address",
      "description": "Fix possible crash when `pg_identify_object_as_address()()` is given invalid input (Álvaro Herrera)",
      "sinceVersion": "11.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix possible “could not access status of transaction” failures in `txid_status",
      "description": "Fix possible “could not access status of transaction” failures in `txid_status()()` (Thomas Munro)",
      "sinceVersion": "11.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix authentication failure when attempting to use SCRAM authentication with mixed OpenSSL library versions",
      "description": "Fix authentication failure when attempting to use SCRAM authentication with mixed OpenSSL library versions (Michael Paquier, Peter Eisentraut)\n          If libpq is using OpenSSL 1.0.1 or older while the server is using OpenSSL 1.0.2 or newer, the negotiation of which SASL mechanism to use went wrong, leading to a confusing “channel binding not supported by this build” error message.",
      "sinceVersion": "11.3",
      "contributor": "Michael Paquier, Peter Eisentraut"
    },
    {
      "title": "Tighten validation of encoded SCRAM-SHA-256 and MD5 passwords",
      "description": "Tighten validation of encoded SCRAM-SHA-256 and MD5 passwords (Jonathan Katz)\n          A password string that had the right initial characters could be mistaken for one that is correctly hashed into SCRAM-SHA-256 or MD5 format. The password would be accepted but would be unusable later.",
      "sinceVersion": "11.3",
      "contributor": "Jonathan Katz"
    },
    {
      "title": "Fix handling of lc_time settings that imply an encoding different from the database's encoding",
      "description": "Fix handling of lc_time settings that imply an encoding different from the database's encoding (Juan José Santamaría Flecha, Tom Lane)\n          Localized month or day names that include non-ASCII characters previously caused unexpected errors or wrong output in such locales.",
      "sinceVersion": "11.3",
      "contributor": "Juan José Santamaría Flecha, Tom Lane"
    },
    {
      "title": "Create the current_logfiles file with the same permissions as other files in the server's data directory",
      "description": "Create the current_logfiles file with the same permissions as other files in the server's data directory (Haribabu Kommi)\n          Previously it used the permissions specified by log_file_mode, but that can cause problems for backup utilities.",
      "sinceVersion": "11.3",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Fix incorrect operator_precedence_warning checks involving unary minus operators",
      "description": "Fix incorrect operator_precedence_warning checks involving unary minus operators (Rikard Falkeborn)",
      "sinceVersion": "11.3",
      "contributor": "Rikard Falkeborn"
    },
    {
      "title": "Disallow `NaN` as a value for floating-point server parameters",
      "description": "Disallow `NaN` as a value for floating-point server parameters (Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rearrange REINDEX processing to avoid assertion failures when reindexing individual indexes of pg_class",
      "description": "Rearrange REINDEX processing to avoid assertion failures when reindexing individual indexes of pg_class (Andres Freund, Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix planner assertion failure for parameterized dummy paths",
      "description": "Fix planner assertion failure for parameterized dummy paths (Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Insert correct test function in the result of `SnapBuildInitialSnapshot",
      "description": "Insert correct test function in the result of `SnapBuildInitialSnapshot()()` (Antonin Houska)\n          No core code cares about this, but some extensions do.",
      "sinceVersion": "11.3",
      "contributor": "Antonin Houska"
    },
    {
      "title": "Fix intermittent “could not reattach to shared memory” session startup failures on Windows",
      "description": "Fix intermittent “could not reattach to shared memory” session startup failures on Windows (Noah Misch)\n          A previously unrecognized source of these failures is creation of thread stacks for a process's default thread pool. Arrange for such stacks to be allocated in a different memory region.",
      "sinceVersion": "11.3",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix error detection in directory scanning on Windows",
      "description": "Fix error detection in directory scanning on Windows (Konstantin Knizhnik)\n          Errors, such as lack of permissions to read the directory, were not detected or reported correctly; instead the code silently acted as though the directory were empty.",
      "sinceVersion": "11.3",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Fix grammar problems in ecpg",
      "description": "Fix grammar problems in ecpg (Tom Lane)\n          A missing semicolon led to mistranslation of `SET `variable` = DEFAULT` (but not `SET `variable` TO DEFAULT`) in ecpg programs, producing syntactically invalid output that the server would reject. Additionally, in a DROP TYPE or DROP DOMAIN command that listed multiple type names, only the first type name was actually processed.",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Sync ecpg's syntax for CREATE TABLE AS with the server's",
      "description": "Sync ecpg's syntax for CREATE TABLE AS with the server's (Daisuke Higuchi)",
      "sinceVersion": "11.3",
      "contributor": "Daisuke Higuchi"
    },
    {
      "title": "Fix possible buffer overruns in ecpg's processing of include filenames",
      "description": "Fix possible buffer overruns in ecpg's processing of include filenames (Liu Huailing, Fei Wu)",
      "sinceVersion": "11.3",
      "contributor": "Liu Huailing, Fei Wu"
    },
    {
      "title": "Fix pg_rewind failures due to failure to remove some transient files in the target data directory",
      "description": "Fix pg_rewind failures due to failure to remove some transient files in the target data directory (Michael Paquier)",
      "sinceVersion": "11.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Make pg_verify_checksums verify that the data directory it's pointed at is of the right PostgreSQL version",
      "description": "Make pg_verify_checksums verify that the data directory it's pointed at is of the right PostgreSQL version (Michael Paquier)",
      "sinceVersion": "11.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid crash in contrib/postgres_fdw when a query using remote grouping or aggregation has a `SELECT`-list item that is an uncorrelated sub-select, outer reference, or parameter symbol",
      "description": "Avoid crash in contrib/postgres_fdw when a query using remote grouping or aggregation has a `SELECT`-list item that is an uncorrelated sub-select, outer reference, or parameter symbol (Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change contrib/postgres_fdw to report an error when a remote partition chosen to insert a routed row into is also an UPDATE subplan target that will be updated later in the same command",
      "description": "Change contrib/postgres_fdw to report an error when a remote partition chosen to insert a routed row into is also an UPDATE subplan target that will be updated later in the same command (Amit Langote, Etsuro Fujita)\n          Previously, such situations led to server crashes or incorrect results of the UPDATE. Allowing such cases to work correctly is a matter for future work.",
      "sinceVersion": "11.3",
      "contributor": "Amit Langote, Etsuro Fujita"
    },
    {
      "title": "In contrib/pg_prewarm, avoid indefinitely respawning background worker processes if prewarming fails for some reason",
      "description": "In contrib/pg_prewarm, avoid indefinitely respawning background worker processes if prewarming fails for some reason (Mithun Cy)",
      "sinceVersion": "11.3",
      "contributor": "Mithun Cy"
    },
    {
      "title": "Avoid crash in contrib/vacuumlo if an `lo_unlink",
      "description": "Avoid crash in contrib/vacuumlo if an `lo_unlink()()` call failed (Tom Lane)",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2019a",
      "description": "Sync our copy of the timezone library with IANA tzcode release 2019a (Tom Lane)\n          This corrects a small bug in zic that caused it to output an incorrect year-2440 transition in the `Africa/Casablanca` zone, and adds support for zic's new -r option.",
      "sinceVersion": "11.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2019a for DST law changes in Palestine and Metlakatla, plus historical corrections for Israel.\n          `Etc/UCT` is now a backward-compatibility link to `Etc/UTC`, instead of being a separate zone that generates the abbreviation `UCT`, which nowadays is typically a typo. PostgreSQL will still accept `UCT` as an input zone abbreviation, but it won't output it.",
      "sinceVersion": "11.3",
      "contributor": null
    },
    {
      "title": "Improve initdb's handling of multiple equivalent names for the system time zone",
      "description": "Improve initdb's handling of multiple equivalent names for the system time zone (Tom Lane, Andrew Gierth)\n          Make initdb examine the /etc/localtime symbolic link, if that exists, to break ties between equivalent names for the system time zone. This makes initdb more likely to select the time zone name that the user would expect when multiple identical time zones exist. It will not change the behavior if /etc/localtime is not a symlink to a zone data file, nor if the time zone is determined from the TZ environment variable.\n          Separately, prefer `UTC` over other spellings of that time zone, when neither TZ nor /etc/localtime provide a hint. This fixes an annoyance introduced by tzdata 2019a's change to make the `UCT` and `UTC` zone names equivalent: initdb was then preferring `UCT`, which almost nobody wants.",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane, Andrew Gierth"
    },
    {
      "title": "Fix buffer-overflow hazards in SCRAM verifier parsing",
      "description": "Fix buffer-overflow hazards in SCRAM verifier parsing (Jonathan Katz, Heikki Linnakangas, Michael Paquier)\n          Any authenticated user could cause a stack-based buffer overflow by changing their own password to a purpose-crafted value. In addition to the ability to crash the PostgreSQL server, this could suffice for executing arbitrary code as the PostgreSQL operating system account.\n          A similar overflow hazard existed in libpq, which could allow a rogue server to crash a client or perhaps execute arbitrary code as the client's operating system account.\n          The PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2019-10164)",
      "sinceVersion": "11.4",
      "contributor": "Jonathan Katz, Heikki Linnakangas, Michael Paquier"
    },
    {
      "title": "Fix assorted errors in run-time partition pruning logic",
      "description": "Fix assorted errors in run-time partition pruning logic (Tom Lane, Amit Langote, David Rowley)\n          These mistakes could lead to wrong answers in queries on partitioned tables, if the comparison value used for pruning is dynamically determined, or if multiple range-partitioned columns are involved in pruning decisions, or if stable (not immutable) comparison operators are involved.",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane, Amit Langote, David Rowley"
    },
    {
      "title": "Fix possible crash while trying to copy trigger definitions to a new partition",
      "description": "Fix possible crash while trying to copy trigger definitions to a new partition (Tom Lane)",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure of ALTER TABLE ... ALTER COLUMN TYPE when the table has a partial exclusion constraint",
      "description": "Fix failure of ALTER TABLE ... ALTER COLUMN TYPE when the table has a partial exclusion constraint (Tom Lane)",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure of COMMENT command for comments on domain constraints",
      "description": "Fix failure of COMMENT command for comments on domain constraints (Daniel Gustafsson, Michael Paquier)",
      "sinceVersion": "11.4",
      "contributor": "Daniel Gustafsson, Michael Paquier"
    },
    {
      "title": "Prevent possible memory clobber when there are duplicate columns in a hash aggregate's hash key list",
      "description": "Prevent possible memory clobber when there are duplicate columns in a hash aggregate's hash key list (Andrew Gierth)",
      "sinceVersion": "11.4",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix incorrect argument null-ness checking during partial aggregation of aggregates with zero or multiple arguments",
      "description": "Fix incorrect argument null-ness checking during partial aggregation of aggregates with zero or multiple arguments (David Rowley, Kyotaro Horiguchi, Andres Freund)",
      "sinceVersion": "11.4",
      "contributor": "David Rowley, Kyotaro Horiguchi, Andres Freund"
    },
    {
      "title": "Fix faulty generation of merge-append plans",
      "description": "Fix faulty generation of merge-append plans (Tom Lane)\n          This mistake could lead to “could not find pathkey item to sort” errors.",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect printing of queries with duplicate join names",
      "description": "Fix incorrect printing of queries with duplicate join names (Philip Dubé)\n          This oversight caused a dump/restore failure for views containing such queries.",
      "sinceVersion": "11.4",
      "contributor": "Philip Dubé"
    },
    {
      "title": "Fix conversion of JSON string literals to JSON-type output columns in `json_to_record",
      "description": "Fix conversion of JSON string literals to JSON-type output columns in `json_to_record()()` and `json_populate_record()()` (Tom Lane)\n          Such cases should produce the literal as a standalone JSON value, but the code misbehaved if the literal contained any characters requiring escaping.",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid writing an invalid empty btree index page in the unlikely case that a failure occurs while processing INCLUDEd columns during a page split",
      "description": "Avoid writing an invalid empty btree index page in the unlikely case that a failure occurs while processing INCLUDEd columns during a page split (Peter Geoghegan)\n          The invalid page would not affect normal index operations, but it might cause failures in subsequent VACUUMs. If that has happened to one of your indexes, recover by reindexing the index.",
      "sinceVersion": "11.4",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Avoid possible failures while initializing a new process's pg_stat_activity data",
      "description": "Avoid possible failures while initializing a new process's pg_stat_activity data (Tom Lane)\n          Certain operations that could fail, such as converting strings extracted from an SSL certificate into the database encoding, were being performed inside a critical section. Failure there would result in database-wide lockup due to violating the access protocol for shared pg_stat_activity data.",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition in check to see whether a pre-existing shared memory segment is still in use by a conflicting postmaster",
      "description": "Fix race condition in check to see whether a pre-existing shared memory segment is still in use by a conflicting postmaster (Tom Lane)",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unsafe coding in walreceiver's signal handler",
      "description": "Fix unsafe coding in walreceiver's signal handler (Tom Lane)\n          This avoids rare problems in which the walreceiver process would crash or deadlock when commanded to shut down.",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid attempting to do database accesses for parameter checking in processes that are not connected to a specific database",
      "description": "Avoid attempting to do database accesses for parameter checking in processes that are not connected to a specific database (Vignesh C, Andres Freund)\n          This error could result in failures like “cannot read pg_class without having selected a database”.",
      "sinceVersion": "11.4",
      "contributor": "Vignesh C, Andres Freund"
    },
    {
      "title": "Avoid possible hang in libpq if using SSL and OpenSSL's pending-data buffer contains an exact multiple of 256 bytes",
      "description": "Avoid possible hang in libpq if using SSL and OpenSSL's pending-data buffer contains an exact multiple of 256 bytes (David Binderman)",
      "sinceVersion": "11.4",
      "contributor": "David Binderman"
    },
    {
      "title": "Fix ordering of GRANT commands emitted by pg_dump and pg_dumpall for databases and tablespaces",
      "description": "Fix ordering of GRANT commands emitted by pg_dump and pg_dumpall for databases and tablespaces (Nathan Bossart, Michael Paquier)\n          If cascading grants had been issued, restore might fail due to the GRANT commands being given in an order that didn't respect their interdependencies.",
      "sinceVersion": "11.4",
      "contributor": "Nathan Bossart, Michael Paquier"
    },
    {
      "title": "Make pg_dump recreate table partitions using CREATE TABLE then ATTACH PARTITION, rather than including `PARTITION OF` in the creation command",
      "description": "Make pg_dump recreate table partitions using CREATE TABLE then ATTACH PARTITION, rather than including `PARTITION OF` in the creation command (Álvaro Herrera, David Rowley)\n          This avoids problems with the partition's column order possibly being changed to match the parent's. Also, a partition is now restorable from the dump (as a standalone table) even if its parent table isn't restored; the ATTACH will fail, but that can just be ignored.",
      "sinceVersion": "11.4",
      "contributor": "Álvaro Herrera, David Rowley"
    },
    {
      "title": "Fix misleading error reports from reindexdb",
      "description": "Fix misleading error reports from reindexdb (Julien Rouhaud)",
      "sinceVersion": "11.4",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Ensure that vacuumdb returns correct status if an error occurs while using parallel jobs",
      "description": "Ensure that vacuumdb returns correct status if an error occurs while using parallel jobs (Julien Rouhaud)",
      "sinceVersion": "11.4",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Fix contrib/auto_explain to not cause problems in parallel queries",
      "description": "Fix contrib/auto_explain to not cause problems in parallel queries (Tom Lane)\n          Previously, a parallel worker might try to log its query even if the parent query were not being logged by auto_explain. This would work sometimes, but it's confusing, and in some cases it resulted in failures like “could not find key N in shm TOC”.\n          Also, fix an off-by-one error that resulted in not necessarily logging every query even when the sampling rate is set to 1.0.",
      "sinceVersion": "11.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/postgres_fdw, account for possible data modifications by local `BEFORE ROW UPDATE` triggers",
      "description": "In contrib/postgres_fdw, account for possible data modifications by local `BEFORE ROW UPDATE` triggers (Shohei Mochizuki)\n          If a trigger modified a column that was otherwise not changed by the UPDATE, the new value was not transmitted to the remote server.",
      "sinceVersion": "11.4",
      "contributor": "Shohei Mochizuki"
    },
    {
      "title": "On Windows, avoid failure when the database encoding is set to SQL_ASCII and we attempt to log a non-ASCII string",
      "description": "On Windows, avoid failure when the database encoding is set to SQL_ASCII and we attempt to log a non-ASCII string (Noah Misch)\n          The code had been assuming that such strings must be in UTF-8, and would throw an error if they didn't appear to be validly encoded. Now, just transmit the untranslated bytes to the log.",
      "sinceVersion": "11.4",
      "contributor": "Noah Misch"
    },
    {
      "title": "Make PL/pgSQL's header files C++-safe",
      "description": "Make PL/pgSQL's header files C++-safe (George Tarasov)",
      "sinceVersion": "11.4",
      "contributor": "George Tarasov"
    },
    {
      "title": "Fix failure of ALTER TABLE ... ALTER COLUMN TYPE when altering multiple columns' types in one command",
      "description": "Fix failure of ALTER TABLE ... ALTER COLUMN TYPE when altering multiple columns' types in one command (Tom Lane)\n          This fixes a regression introduced in the most recent minor releases: indexes using the altered columns were not processed correctly, leading to strange failures during ALTER TABLE.",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Require schema qualification to cast to a temporary type when using functional cast syntax",
      "description": "Require schema qualification to cast to a temporary type when using functional cast syntax (Noah Misch)\n          We have long required invocations of temporary functions to explicitly specify the temporary schema, that is `pg_temp.`func_name`(args`). Require this as well for casting to temporary types using functional notation, for example `pg_temp.`type_name`(arg`). Otherwise it's possible to capture a function call using a temporary object, allowing privilege escalation in much the same ways that we blocked in CVE-2007-2138. (CVE-2019-10208)",
      "sinceVersion": "11.5",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix execution of hashed subplans that require cross-type comparison",
      "description": "Fix execution of hashed subplans that require cross-type comparison (Tom Lane, Andreas Seltenreich)\n          Hashed subplans used the outer query's original comparison operator to compare entries of the hash table. This is the wrong thing if that operator is cross-type, since all the hash table entries will be of the subquery's output type. For the set of hashable cross-type operators in core PostgreSQL, this mistake seems nearly harmless on 64-bit machines, but it can result in crashes or perhaps unauthorized disclosure of server memory on 32-bit machines. Extensions might provide hashable cross-type operators that create larger risks. (CVE-2019-10209)",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane, Andreas Seltenreich"
    },
    {
      "title": "Prevent dropping a partitioned table's trigger if there are pending trigger events in child partitions",
      "description": "Prevent dropping a partitioned table's trigger if there are pending trigger events in child partitions (Álvaro Herrera)\n          This notably applies to foreign key constraints, since those are implemented by triggers.",
      "sinceVersion": "11.5",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Include user-specified trigger arguments when copying a trigger definition from a partitioned table to one of its partitions",
      "description": "Include user-specified trigger arguments when copying a trigger definition from a partitioned table to one of its partitions (Patrick McHardy)",
      "sinceVersion": "11.5",
      "contributor": "Patrick McHardy"
    },
    {
      "title": "Install dependencies to prevent dropping partition key columns",
      "description": "Install dependencies to prevent dropping partition key columns (Tom Lane)\n          ALTER TABLE ... DROP COLUMN will refuse to drop a column that is a partition key column. However, indirect drops (such as a cascade from dropping a key column's data type) had no such check, allowing the deletion of a key column. This resulted in a badly broken partitioned table that could neither be accessed nor dropped.\n          This fix adds pg_depend entries that enforce that the whole partitioned table, not just the key column, will be dropped if a cascaded drop forces removal of the key column. However, such entries will only be created when a partitioned table is created; so this fix does not remove the risk for pre-existing partitioned tables. The issue can only arise for partition key columns of non-built-in data types, so it seems not to be a hazard for most users.",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that column numbers are correctly mapped between a partitioned table and its default partition",
      "description": "Ensure that column numbers are correctly mapped between a partitioned table and its default partition (Amit Langote)\n          Some operations misbehaved if the mapping wasn't exactly one-to-one, for example if there were dropped columns in one table and not the other.",
      "sinceVersion": "11.5",
      "contributor": "Amit Langote"
    },
    {
      "title": "Ignore partitions that are foreign tables when creating indexes on partitioned tables",
      "description": "Ignore partitions that are foreign tables when creating indexes on partitioned tables (Álvaro Herrera)\n          Previously an error was thrown on encountering a foreign-table partition, but that's unhelpful and doesn't protect against any actual problem.",
      "sinceVersion": "11.5",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Prune a partitioned table's default partition",
      "description": "Prune a partitioned table's default partition (that is, avoid uselessly scanning it) in more cases (Yuzuko Hosoya)",
      "sinceVersion": "11.5",
      "contributor": "Yuzuko Hosoya"
    },
    {
      "title": "Fix possible failure to prune partitions when there are multiple partition key columns of boolean type",
      "description": "Fix possible failure to prune partitions when there are multiple partition key columns of boolean type (David Rowley)",
      "sinceVersion": "11.5",
      "contributor": "David Rowley"
    },
    {
      "title": "Don't optimize away `GROUP BY` columns when the table involved is an inheritance parent",
      "description": "Don't optimize away `GROUP BY` columns when the table involved is an inheritance parent (David Rowley)\n          Normally, if a table's primary key column(s) are included in `GROUP BY`, it's safe to drop any other grouping columns, since the primary key columns are enough to make the groups unique. This rule does not work if the query is also reading inheritance child tables, though; the parent's uniqueness does not extend to the children.",
      "sinceVersion": "11.5",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid incorrect use of parallel hash join for semi-join queries",
      "description": "Avoid incorrect use of parallel hash join for semi-join queries (Thomas Munro)\n          This error resulted in duplicate result rows from some `EXISTS` queries.",
      "sinceVersion": "11.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid using unnecessary sort steps for some queries with `GROUPING SETS`",
      "description": "Avoid using unnecessary sort steps for some queries with `GROUPING SETS` (Andrew Gierth, Richard Guo)",
      "sinceVersion": "11.5",
      "contributor": "Andrew Gierth, Richard Guo"
    },
    {
      "title": "Fix possible failure of planner's index endpoint probes",
      "description": "Fix possible failure of planner's index endpoint probes (Tom Lane)\n          When using a recently-created index to determine the minimum or maximum value of a column, the planner could select a recently-dead tuple that does not actually contain the endpoint value. In the worst case the tuple might contain a null, resulting in a visible error “found unexpected null value in index”; more likely we would just end up using the wrong value, degrading the quality of planning estimates.",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to access trigger transition tables during `EvalPlanQual` rechecks",
      "description": "Fix failure to access trigger transition tables during `EvalPlanQual` rechecks (Alex Aktsipetrov)\n          Triggers that rely on transition tables sometimes failed in the presence of concurrent updates.",
      "sinceVersion": "11.5",
      "contributor": "Alex Aktsipetrov"
    },
    {
      "title": "Fix mishandling of multi-column foreign keys when rebuilding a foreign key constraint",
      "description": "Fix mishandling of multi-column foreign keys when rebuilding a foreign key constraint (Tom Lane)\n          ALTER TABLE could make an incorrect decision about whether revalidation of a foreign key is necessary, if not all columns of the key are of the same type. It seems likely that the error would always have been in the conservative direction, that is revalidating unnecessarily.",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't build extended statistics for inheritance trees",
      "description": "Don't build extended statistics for inheritance trees (Tomas Vondra)\n          This avoids a “tuple already updated by self” error during ANALYZE.",
      "sinceVersion": "11.5",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid spurious deadlock errors when upgrading a tuple lock",
      "description": "Avoid spurious deadlock errors when upgrading a tuple lock (Oleksii Kliukin)\n          When two or more transactions are waiting for a transaction T1 to release a tuple-level lock, and T1 upgrades its lock to a higher level, a spurious deadlock among the waiting transactions could be reported when T1 finishes.",
      "sinceVersion": "11.5",
      "contributor": "Oleksii Kliukin"
    },
    {
      "title": "Fix failure to resolve deadlocks involving multiple parallel worker processes",
      "description": "Fix failure to resolve deadlocks involving multiple parallel worker processes (Rui Hai Jiang)\n          It is not clear whether this bug is reachable with non-artificial queries, but if it did happen, the queries involved in an otherwise-resolvable deadlock would block until canceled.",
      "sinceVersion": "11.5",
      "contributor": "Rui Hai Jiang"
    },
    {
      "title": "Prevent incorrect canonicalization of date ranges with `infinity` endpoints",
      "description": "Prevent incorrect canonicalization of date ranges with `infinity` endpoints (Laurenz Albe)\n          It's incorrect to try to convert an open range to a closed one or vice versa by incrementing or decrementing the endpoint value, if the endpoint is infinite; so leave the range alone in such cases.",
      "sinceVersion": "11.5",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Fix loss of fractional digits when converting very large money values to numeric",
      "description": "Fix loss of fractional digits when converting very large money values to numeric (Tom Lane)",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix printing of `BTREE_META_CLEANUP` WAL records",
      "description": "Fix printing of `BTREE_META_CLEANUP` WAL records (Michael Paquier)",
      "sinceVersion": "11.5",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Prevent assertion failures due to mishandling of version-2 btree metapages",
      "description": "Prevent assertion failures due to mishandling of version-2 btree metapages (Peter Geoghegan)",
      "sinceVersion": "11.5",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix spinlock assembly code for MIPS CPUs so that it works on MIPS r6",
      "description": "Fix spinlock assembly code for MIPS CPUs so that it works on MIPS r6 (YunQiang Su)",
      "sinceVersion": "11.5",
      "contributor": "YunQiang Su"
    },
    {
      "title": "Ensure that a record or row value returned from a PL/pgSQL function is marked with the function's declared composite type",
      "description": "Ensure that a record or row value returned from a PL/pgSQL function is marked with the function's declared composite type (Tom Lane)\n          This avoids problems if the result is stored directly into a table.",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq ignore carriage return",
      "description": "Make libpq ignore carriage return (`\\r`) in connection service files (Tom Lane, Michael Paquier)\n          In some corner cases, service files containing Windows-style newlines could be mis-parsed, resulting in connection failures.",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane, Michael Paquier"
    },
    {
      "title": "In psql, avoid offering incorrect tab completion options after `SET `variable` =`",
      "description": "In psql, avoid offering incorrect tab completion options after `SET `variable` =` (Tom Lane)",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix a small memory leak in psql's `\\d` command",
      "description": "Fix a small memory leak in psql's `\\d` command (Tom Lane)",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump to ensure that custom operator classes are dumped in the right order",
      "description": "Fix pg_dump to ensure that custom operator classes are dumped in the right order (Tom Lane)\n          If a user-defined opclass is the subtype opclass of a user-defined range type, related objects were dumped in the wrong order, producing an unrestorable dump. (The underlying failure to handle opclass dependencies might manifest in other cases too, but this is the only known case.)",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible lockup in pgbench when using -R option",
      "description": "Fix possible lockup in pgbench when using -R option (Fabien Coelho)",
      "sinceVersion": "11.5",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Improve reliability of contrib/amcheck's index verification",
      "description": "Improve reliability of contrib/amcheck's index verification (Peter Geoghegan)",
      "sinceVersion": "11.5",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix handling of Perl `undef` values in contrib/jsonb_plperl",
      "description": "Fix handling of Perl `undef` values in contrib/jsonb_plperl (Ivan Panchenko)",
      "sinceVersion": "11.5",
      "contributor": "Ivan Panchenko"
    },
    {
      "title": "Fix contrib/passwordcheck to coexist with other users of check_password_hook",
      "description": "Fix contrib/passwordcheck to coexist with other users of check_password_hook (Michael Paquier)",
      "sinceVersion": "11.5",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix contrib/sepgsql tests to work under recent SELinux releases",
      "description": "Fix contrib/sepgsql tests to work under recent SELinux releases (Mike Palmiotto)",
      "sinceVersion": "11.5",
      "contributor": "Mike Palmiotto"
    },
    {
      "title": "Improve stability of src/test/kerberos and src/test/ldap regression tests",
      "description": "Improve stability of src/test/kerberos and src/test/ldap regression tests (Thomas Munro, Tom Lane)",
      "sinceVersion": "11.5",
      "contributor": "Thomas Munro, Tom Lane"
    },
    {
      "title": "Improve stability of src/test/recovery regression tests",
      "description": "Improve stability of src/test/recovery regression tests (Michael Paquier)",
      "sinceVersion": "11.5",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Reduce stderr output from pg_upgrade's test script",
      "description": "Reduce stderr output from pg_upgrade's test script (Tom Lane)",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pgbench regression tests to work on Windows",
      "description": "Fix pgbench regression tests to work on Windows (Fabien Coelho)",
      "sinceVersion": "11.5",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Fix TAP tests to work with msys Perl, in cases where the build directory is on a non-root msys mount point",
      "description": "Fix TAP tests to work with msys Perl, in cases where the build directory is on a non-root msys mount point (Noah Misch)",
      "sinceVersion": "11.5",
      "contributor": "Noah Misch"
    },
    {
      "title": "Support building Postgres with Microsoft Visual Studio 2019",
      "description": "Support building Postgres with Microsoft Visual Studio 2019 (Haribabu Kommi)",
      "sinceVersion": "11.5",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "In Visual Studio builds, honor `WindowsSDKVersion` environment variable, if that's set",
      "description": "In Visual Studio builds, honor `WindowsSDKVersion` environment variable, if that's set (Peifeng Qiu)\n          This fixes build failures in some configurations.",
      "sinceVersion": "11.5",
      "contributor": "Peifeng Qiu"
    },
    {
      "title": "Support OpenSSL 1.1.0 and newer in Visual Studio builds",
      "description": "Support OpenSSL 1.1.0 and newer in Visual Studio builds (Juan José Santamaría Flecha, Michael Paquier)",
      "sinceVersion": "11.5",
      "contributor": "Juan José Santamaría Flecha, Michael Paquier"
    },
    {
      "title": "Allow make options to be passed down to gmake when non-GNU make is invoked at the top level",
      "description": "Allow make options to be passed down to gmake when non-GNU make is invoked at the top level (Thomas Munro)",
      "sinceVersion": "11.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid choosing `localtime` or `posixrules` as TimeZone during initdb",
      "description": "Avoid choosing `localtime` or `posixrules` as TimeZone during initdb (Tom Lane)\n          In some cases initdb would choose one of these artificial zone names over the “real” zone name. Prefer any other match to the C library's timezone behavior over these two.",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Adjust pg_timezone_names view to show the `Factory` time zone if and only if it has a short abbreviation",
      "description": "Adjust pg_timezone_names view to show the `Factory` time zone if and only if it has a short abbreviation (Tom Lane)\n          Historically, IANA set up this artificial zone with an “abbreviation” like `Local time zone must be set--see zic manual page`. Modern versions of the tzdb database show `-00` instead, but some platforms alter the data to show one or another of the historical phrases. Show this zone only if it uses the modern abbreviation.",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2019b",
      "description": "Sync our copy of the timezone library with IANA tzcode release 2019b (Tom Lane)\n          This adds support for zic's new -b slim option to reduce the size of the installed zone files. We are not currently using that, but may enable it in future.",
      "sinceVersion": "11.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2019b for DST law changes in Brazil, plus historical corrections for Hong Kong, Italy, and Palestine.",
      "sinceVersion": "11.5",
      "contributor": null
    },
    {
      "title": "Fix failure of ALTER TABLE SET with a custom relation option",
      "description": "Fix failure of ALTER TABLE SET with a custom relation option (Michael Paquier)",
      "sinceVersion": "11.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Disallow changing a multiply-inherited column's type if not all parent tables were changed",
      "description": "Disallow changing a multiply-inherited column's type if not all parent tables were changed (Tom Lane)\n          Previously, this was allowed, whereupon queries on the now-out-of-sync parent would fail.",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure if the same target table is specified twice in an ANALYZE command inside a transaction block",
      "description": "Avoid failure if the same target table is specified twice in an ANALYZE command inside a transaction block (Tom Lane)",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent VACUUM from trying to freeze an old multixact ID involving a still-running transaction",
      "description": "Prevent VACUUM from trying to freeze an old multixact ID involving a still-running transaction (Nathan Bossart, Jeremy Schneider)\n          This case would lead to VACUUM failing until the old transaction terminates.",
      "sinceVersion": "11.6",
      "contributor": "Nathan Bossart, Jeremy Schneider"
    },
    {
      "title": "SET CONSTRAINTS ... DEFERRED failed on partitioned tables, incorrectly complaining about lack of triggers",
      "description": "SET CONSTRAINTS ... DEFERRED failed on partitioned tables, incorrectly complaining about lack of triggers (Álvaro Herrera)",
      "sinceVersion": "11.6",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix failure when creating indexes for a partition, if the parent partitioned table contains any dropped columns",
      "description": "Fix failure when creating indexes for a partition, if the parent partitioned table contains any dropped columns (Michael Paquier)",
      "sinceVersion": "11.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix planner's test for case-foldable characters in `ILIKE` with an ICU collation",
      "description": "Fix planner's test for case-foldable characters in `ILIKE` with an ICU collation (Tom Lane)\n          This mistake caused the planner to treat too much of the pattern as being a fixed prefix, so that indexscans derived from an `ILIKE` clause might miss entries that they should find.",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that offset expressions in `WINDOW` clauses are processed when a query's expressions are manipulated",
      "description": "Ensure that offset expressions in `WINDOW` clauses are processed when a query's expressions are manipulated (Andrew Gierth)\n          This oversight could result in assorted failures when the offsets are nontrivial expressions. One example is that a function parameter reference in such an expression would fail if the function was inlined.",
      "sinceVersion": "11.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Avoid postmaster failure if a parallel query requests a background worker when no postmaster child process array slots remain free",
      "description": "Avoid postmaster failure if a parallel query requests a background worker when no postmaster child process array slots remain free (Tom Lane)",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent possible double-free if a `BEFORE UPDATE` trigger returns the old tuple as-is, and it is not the last such trigger",
      "description": "Prevent possible double-free if a `BEFORE UPDATE` trigger returns the old tuple as-is, and it is not the last such trigger (Thomas Munro)",
      "sinceVersion": "11.6",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix crash if ``x` = ANY",
      "description": "Fix crash if ``x` = ANY (array`), or related operations, contains a constant-null array (Tom Lane)",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “unexpected relkind” error when a query tries to access a TOAST table",
      "description": "Fix “unexpected relkind” error when a query tries to access a TOAST table (John Hsu, Michael Paquier, Tom Lane)\n          The error should say that permission is denied, but this case got broken during code refactoring.",
      "sinceVersion": "11.6",
      "contributor": "John Hsu, Michael Paquier, Tom Lane"
    },
    {
      "title": "Provide a relevant error context line when an error occurs while setting GUC parameters during parallel worker startup",
      "description": "Provide a relevant error context line when an error occurs while setting GUC parameters during parallel worker startup (Thomas Munro)",
      "sinceVersion": "11.6",
      "contributor": "Thomas Munro"
    },
    {
      "title": "In serializable mode, ensure that row-level predicate locks are acquired on the correct version of the row",
      "description": "In serializable mode, ensure that row-level predicate locks are acquired on the correct version of the row (Thomas Munro, Heikki Linnakangas)\n          If the visible version of the row is HOT-updated, the lock might be taken on its now-dead predecessor, resulting in subtle failures to guarantee serialization.",
      "sinceVersion": "11.6",
      "contributor": "Thomas Munro, Heikki Linnakangas"
    },
    {
      "title": "Ensure that `fsync",
      "description": "Ensure that `fsync()()` is applied only to files that are opened read/write (Andres Freund, Michael Paquier)\n          Some code paths tried to do this after opening a file read-only, but on some platforms that causes “bad file descriptor” or similar errors.",
      "sinceVersion": "11.6",
      "contributor": "Andres Freund, Michael Paquier"
    },
    {
      "title": "Allow encoding conversion to succeed on longer strings than before",
      "description": "Allow encoding conversion to succeed on longer strings than before (Álvaro Herrera, Tom Lane)\n          Previously, there was a hard limit of 0.25GB on the input string, but now it will work as long as the converted output is not over 1GB.",
      "sinceVersion": "11.6",
      "contributor": "Álvaro Herrera, Tom Lane"
    },
    {
      "title": "Avoid creating unnecessarily-bulky tuple stores for window functions",
      "description": "Avoid creating unnecessarily-bulky tuple stores for window functions (Andrew Gierth)\n          In some cases the tuple storage would include all columns of the source table(s), not just the ones that are needed by the query.",
      "sinceVersion": "11.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Allow `repalloc",
      "description": "Allow `repalloc()()` to give back space when a large chunk is reduced in size (Tom Lane)",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that temporary WAL and history files are removed at the end of archive recovery",
      "description": "Ensure that temporary WAL and history files are removed at the end of archive recovery (Sawada Masahiko)",
      "sinceVersion": "11.6",
      "contributor": "Sawada Masahiko"
    },
    {
      "title": "Avoid failure in archive recovery if recovery_min_apply_delay is enabled",
      "description": "Avoid failure in archive recovery if recovery_min_apply_delay is enabled (Fujii Masao)\n          recovery_min_apply_delay is not typically used in this configuration, but it should work.",
      "sinceVersion": "11.6",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix logical replication failure when publisher and subscriber have different ideas about a table's replica identity columns",
      "description": "Fix logical replication failure when publisher and subscriber have different ideas about a table's replica identity columns (Jehan-Guillaume de Rorthais, Peter Eisentraut)\n          Declaring a column as part of the replica identity on the subscriber, when it does not exist at all on the publisher, led to “negative bitmapset member not allowed” errors.",
      "sinceVersion": "11.6",
      "contributor": "Jehan-Guillaume de Rorthais, Peter Eisentraut"
    },
    {
      "title": "Avoid unwanted delay during shutdown of a logical replication walsender",
      "description": "Avoid unwanted delay during shutdown of a logical replication walsender (Craig Ringer, Álvaro Herrera)",
      "sinceVersion": "11.6",
      "contributor": "Craig Ringer, Álvaro Herrera"
    },
    {
      "title": "Fix timeout handling in logical replication walreceiver processes",
      "description": "Fix timeout handling in logical replication walreceiver processes (Julien Rouhaud)\n          Erroneous logic prevented wal_receiver_timeout from working in logical replication deployments.",
      "sinceVersion": "11.6",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Correctly time-stamp replication messages for logical decoding",
      "description": "Correctly time-stamp replication messages for logical decoding (Jeff Janes)\n          This oversight resulted, for example, in pg_stat_subscription.last_msg_send_time usually reading as NULL.",
      "sinceVersion": "11.6",
      "contributor": "Jeff Janes"
    },
    {
      "title": "In logical decoding, ensure that sub-transactions are correctly accounted for when reconstructing a snapshot",
      "description": "In logical decoding, ensure that sub-transactions are correctly accounted for when reconstructing a snapshot (Masahiko Sawada)\n          This error leads to assertion failures; it's unclear whether any bad effects exist in production builds.",
      "sinceVersion": "11.6",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix race condition during backend exit, when the backend process has previously waited for synchronous replication to occur",
      "description": "Fix race condition during backend exit, when the backend process has previously waited for synchronous replication to occur (Dongming Liu)",
      "sinceVersion": "11.6",
      "contributor": "Dongming Liu"
    },
    {
      "title": "Fix ALTER SYSTEM to cope with duplicate entries in postgresql.auto.conf",
      "description": "Fix ALTER SYSTEM to cope with duplicate entries in postgresql.auto.conf (Ian Barwick)\n          ALTER SYSTEM itself will not generate such a state, but external tools that modify postgresql.auto.conf could do so. Duplicate entries for the target variable will now be removed, and then the new setting (if any) will be appended at the end.",
      "sinceVersion": "11.6",
      "contributor": "Ian Barwick"
    },
    {
      "title": "Reject include directives with empty file names in configuration files, and report include-file recursion more clearly",
      "description": "Reject include directives with empty file names in configuration files, and report include-file recursion more clearly (Ian Barwick, Tom Lane)",
      "sinceVersion": "11.6",
      "contributor": "Ian Barwick, Tom Lane"
    },
    {
      "title": "Avoid logging complaints about abandoned connections when using PAM authentication",
      "description": "Avoid logging complaints about abandoned connections when using PAM authentication (Tom Lane)\n          libpq-based clients will typically make two connection attempts when a password is required, since they don't prompt their user for a password until their first connection attempt fails. Therefore the server is coded not to generate useless log spam when a client closes the connection upon being asked for a password. However, the PAM authentication code hadn't gotten that memo, and would generate several messages about a phantom authentication failure.",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix some cases where an incomplete date specification is not detected in time with time zone input",
      "description": "Fix some cases where an incomplete date specification is not detected in time with time zone input (Alexander Lakhin)\n          If a time zone with a time-varying UTC offset is specified, then a date must be as well, so that the offset can be resolved. Depending on the syntax used, this check was not enforced in some cases, allowing bogus output to be produced.",
      "sinceVersion": "11.6",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix misbehavior of `bitshiftright",
      "description": "Fix misbehavior of `bitshiftright()()` (Tom Lane)\n          The bitstring right shift operator failed to zero out padding space that exists in the last byte of the result when the bitstring length is not a multiple of 8. While invisible to most operations, any nonzero bits there would result in unexpected comparison behavior, since bitstring comparisons don't bother to ignore the extra bits, expecting them to always be zero.\n          If you have inconsistent data as a result of saving the output of `bitshiftright()()` in a table, it's possible to fix it with something like\n          UPDATE mytab SET bitcol = ~(~bitcol) WHERE bitcol != ~(~bitcol);\n",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Restore the ability to take type information from an `AS` clause in `json[b]_populate_record",
      "description": "Restore the ability to take type information from an `AS` clause in `json[b]_populate_record()()` and `json[b]_populate_recordset()()` (Tom Lane)\n          If the record argument is NULL and has no declared composite type, try to use the `AS` clause instead. This isn't recommended usage, but it used to work, and now does again.",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash when selecting a namespace node in `XMLTABLE`",
      "description": "Avoid crash when selecting a namespace node in `XMLTABLE` (Chapman Flack)",
      "sinceVersion": "11.6",
      "contributor": "Chapman Flack"
    },
    {
      "title": "Fix detection of edge-case integer overflow in interval multiplication",
      "description": "Fix detection of edge-case integer overflow in interval multiplication (Yuya Watari)",
      "sinceVersion": "11.6",
      "contributor": "Yuya Watari"
    },
    {
      "title": "Fix memory leaks in `lower",
      "description": "Fix memory leaks in `lower()()`, `upper()()`, and `initcap()()` functions when using ICU collations (Konstantin Knizhnik)",
      "sinceVersion": "11.6",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Avoid crashes if `ispell` text search dictionaries contain wrong affix data",
      "description": "Avoid crashes if `ispell` text search dictionaries contain wrong affix data (Arthur Zakirov)",
      "sinceVersion": "11.6",
      "contributor": "Arthur Zakirov"
    },
    {
      "title": "Fix incorrect compression logic for GIN posting lists",
      "description": "Fix incorrect compression logic for GIN posting lists (Heikki Linnakangas)\n          A GIN posting list item can require 7 bytes if the distance between adjacent indexed TIDs exceeds 16TB. One step in the logic was out of sync with that, and might try to write the value into a 6-byte buffer. In principle this could cause a stack overrun, but on most architectures it's likely that the next byte would be unused alignment padding, making the bug harmless. In any case the bug would be very difficult to hit.",
      "sinceVersion": "11.6",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix handling of infinity, NaN, and NULL values in KNN-GiST",
      "description": "Fix handling of infinity, NaN, and NULL values in KNN-GiST (Alexander Korotkov)\n          The query's output order could be wrong (different from a plain sort's result) if some distances computed for non-null column values are infinity or NaN.",
      "sinceVersion": "11.6",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix handling of searches for NULL in KNN-SP-GiST",
      "description": "Fix handling of searches for NULL in KNN-SP-GiST (Nikita Glukhov)",
      "sinceVersion": "11.6",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "On Windows, recognize additional spellings of the “Norwegian",
      "description": "On Windows, recognize additional spellings of the “Norwegian (Bokmål)” locale name (Tom Lane)",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid compile failure if an ECPG client includes ecpglib.h while having `ENABLE_NLS` defined",
      "description": "Avoid compile failure if an ECPG client includes ecpglib.h while having `ENABLE_NLS` defined (Tom Lane)\n          This risk was created by a misplaced declaration: `ecpg_gettext()()` should not be visible to client code.",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql, resynchronize internal state about the server after an unexpected connection loss and successful reconnection",
      "description": "In psql, resynchronize internal state about the server after an unexpected connection loss and successful reconnection (Peter Billen, Tom Lane)\n          Ordinarily this is unnecessary since the state would be the same anyway. But it can matter in corner cases, such as where the connection might lead to one of several servers. This change causes psql to re-issue any interactive messages that it would have issued at startup, for example about whether SSL is in use.",
      "sinceVersion": "11.6",
      "contributor": "Peter Billen, Tom Lane"
    },
    {
      "title": "Avoid platform-specific null pointer dereference in psql",
      "description": "Avoid platform-specific null pointer dereference in psql (Quentin Rameau)",
      "sinceVersion": "11.6",
      "contributor": "Quentin Rameau"
    },
    {
      "title": "Fix pg_dump to work again with pre-8.3 source servers",
      "description": "Fix pg_dump to work again with pre-8.3 source servers (Tom Lane)\n          A previous fix caused pg_dump to always try to query pg_opfamily, but that catalog doesn't exist before version 8.3.",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_restore, treat -f - as meaning “output to stdout”",
      "description": "In pg_restore, treat -f - as meaning “output to stdout” (Álvaro Herrera)\n          This synchronizes pg_restore's behavior with some other applications, and in particular makes pre-v12 branches act similarly to version 12's pg_restore, simplifying creation of dump/restore scripts that work across multiple PostgreSQL versions. Before this change, pg_restore interpreted such a switch as meaning “output to a file named -”, but few people would want that.",
      "sinceVersion": "11.6",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Improve pg_upgrade's checks for the use of a data type that has changed representation, such as line",
      "description": "Improve pg_upgrade's checks for the use of a data type that has changed representation, such as line (Tomas Vondra)\n          The previous coding could be fooled by cases where the data type of interest underlies a stored column of a domain or composite type.",
      "sinceVersion": "11.6",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Detect file read errors during pg_basebackup",
      "description": "Detect file read errors during pg_basebackup (Jeevan Chalke)",
      "sinceVersion": "11.6",
      "contributor": "Jeevan Chalke"
    },
    {
      "title": "In pg_basebackup, don't fsync output files until the end of backup",
      "description": "In pg_basebackup, don't fsync output files until the end of backup (Michael Paquier)\n          The previous coding could result in timeout failures if fsync was slow.",
      "sinceVersion": "11.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In pg_rewind with an online source cluster, disable timeouts, much as pg_dump does",
      "description": "In pg_rewind with an online source cluster, disable timeouts, much as pg_dump does (Alexander Kukushkin)",
      "sinceVersion": "11.6",
      "contributor": "Alexander Kukushkin"
    },
    {
      "title": "Fix failure in pg_waldump with the -s option, when a continuation WAL record ends exactly at a page boundary",
      "description": "Fix failure in pg_waldump with the -s option, when a continuation WAL record ends exactly at a page boundary (Andrey Lepikhov)",
      "sinceVersion": "11.6",
      "contributor": "Andrey Lepikhov"
    },
    {
      "title": "In pg_waldump, include the `newitemoff` field in btree page split records",
      "description": "In pg_waldump, include the `newitemoff` field in btree page split records (Peter Geoghegan)",
      "sinceVersion": "11.6",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "In pg_waldump with the --bkp-details option, avoid emitting extra newlines for WAL records involving full-page writes",
      "description": "In pg_waldump with the --bkp-details option, avoid emitting extra newlines for WAL records involving full-page writes (Andres Freund)",
      "sinceVersion": "11.6",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix small memory leak in pg_waldump",
      "description": "Fix small memory leak in pg_waldump (Andres Freund)",
      "sinceVersion": "11.6",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix vacuumdb with a high --jobs option to handle running out of file descriptors better",
      "description": "Fix vacuumdb with a high --jobs option to handle running out of file descriptors better (Michael Paquier)",
      "sinceVersion": "11.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix PL/pgSQL to handle replacements of composite types better",
      "description": "Fix PL/pgSQL to handle replacements of composite types better (Tom Lane)\n          Cover the case where a composite type is dropped entirely, and then a new type of the same name is created, between executions of a PL/pgSQL function. Variables of the composite type will now update to match the new definition.",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix contrib/amcheck to skip unlogged indexes during hot standby",
      "description": "Fix contrib/amcheck to skip unlogged indexes during hot standby (Andrey Borodin, Peter Geoghegan)\n          An unlogged index won't necessarily contain valid data in this context, so don't try to check it.",
      "sinceVersion": "11.6",
      "contributor": "Andrey Borodin, Peter Geoghegan"
    },
    {
      "title": "Fix configure's test for presence of libperl so that it works on recent Red Hat releases",
      "description": "Fix configure's test for presence of libperl so that it works on recent Red Hat releases (Tom Lane)\n          Previously, it could fail if the user sets `CFLAGS` to `-O0`.",
      "sinceVersion": "11.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure correct code generation for spinlocks on PowerPC",
      "description": "Ensure correct code generation for spinlocks on PowerPC (Noah Misch)\n          The previous spinlock coding allowed the compiler to select register zero for use with an assembly instruction that does not accept that register, causing a build failure. We have seen only one long-ago report that matches this bug, but it could cause problems for people trying to build modified PostgreSQL code or use atypical compiler options.",
      "sinceVersion": "11.6",
      "contributor": "Noah Misch"
    },
    {
      "title": "On PowerPC, avoid depending on the xlc compiler's `__fetch_and_add",
      "description": "On PowerPC, avoid depending on the xlc compiler's `__fetch_and_add()()` function (Noah Misch)\n          xlc 13 and newer interpret this function in a way incompatible with our usage, resulting in an unusable build of PostgreSQL. Fix by using custom assembly code instead.",
      "sinceVersion": "11.6",
      "contributor": "Noah Misch"
    },
    {
      "title": "On AIX, don't use the compiler option -qsrcmsg",
      "description": "On AIX, don't use the compiler option -qsrcmsg (Noah Misch)\n          This avoids an internal compiler error with xlc v16.1.0, with little consequence other than changing the format of compiler error messages.",
      "sinceVersion": "11.6",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix MSVC build process to cope with spaces in the file path of OpenSSL",
      "description": "Fix MSVC build process to cope with spaces in the file path of OpenSSL (Andrew Dunstan)",
      "sinceVersion": "11.6",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Update time zone data files to tzdata release 2019c for DST law changes in Fiji and Norfolk Island, plus historical corrections for Alberta, Austria, Belgium, British Columbia, Cambodia, Hong Kong, Indiana",
      "description": "Update time zone data files to tzdata release 2019c for DST law changes in Fiji and Norfolk Island, plus historical corrections for Alberta, Austria, Belgium, British Columbia, Cambodia, Hong Kong, Indiana (Perry County), Kaliningrad, Kentucky, Michigan, Norfolk Island, South Korea, and Turkey.",
      "sinceVersion": "11.6",
      "contributor": null
    },
    {
      "title": "Fix failure to insert default values for “missing” attributes during tuple conversion",
      "description": "Fix failure to insert default values for “missing” attributes during tuple conversion (Vik Fearing, Andrew Gierth)\n          This could result in values incorrectly reading as NULL, when they come from columns that had been added by `ALTER TABLE ADD COLUMN` with a constant default.",
      "sinceVersion": "11.7",
      "contributor": "Vik Fearing, Andrew Gierth"
    },
    {
      "title": "Add missing permissions checks for ALTER ... DEPENDS ON EXTENSION",
      "description": "Add missing permissions checks for ALTER ... DEPENDS ON EXTENSION (Álvaro Herrera)\n          Marking an object as dependent on an extension did not have any privilege check whatsoever. This oversight allowed any user to mark routines, triggers, materialized views, or indexes as droppable by anyone able to drop an extension. Require that the calling user own the specified object (and hence have privilege to drop it). (CVE-2020-1720)",
      "sinceVersion": "11.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure that row triggers on partitioned tables are correctly cloned to sub-partitions when appropriate",
      "description": "Ensure that row triggers on partitioned tables are correctly cloned to sub-partitions when appropriate (Álvaro Herrera)\n          User-defined triggers (but not triggers for foreign key or deferred unique constraints) might be missed when creating or attaching a partition.",
      "sinceVersion": "11.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix logical replication subscriber code to execute per-column `UPDATE` triggers when appropriate",
      "description": "Fix logical replication subscriber code to execute per-column `UPDATE` triggers when appropriate (Peter Eisentraut)",
      "sinceVersion": "11.7",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid failure in logical decoding when a large transaction must be spilled into many separate temporary files",
      "description": "Avoid failure in logical decoding when a large transaction must be spilled into many separate temporary files (Amit Khandekar)",
      "sinceVersion": "11.7",
      "contributor": "Amit Khandekar"
    },
    {
      "title": "Fix possible crash or data corruption when a logical replication subscriber processes a row update",
      "description": "Fix possible crash or data corruption when a logical replication subscriber processes a row update (Tom Lane, Tomas Vondra)\n          This bug caused visible problems only if the subscriber's table contained columns that were not being copied from the publisher and had pass-by-reference data types.",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane, Tomas Vondra"
    },
    {
      "title": "Fix crash in logical replication subscriber after DDL changes on a subscribed relation",
      "description": "Fix crash in logical replication subscriber after DDL changes on a subscribed relation (Jehan-Guillaume de Rorthais, Vignesh C)",
      "sinceVersion": "11.7",
      "contributor": "Jehan-Guillaume de Rorthais, Vignesh C"
    },
    {
      "title": "Fix failure in logical replication publisher after a database crash and restart",
      "description": "Fix failure in logical replication publisher after a database crash and restart (Vignesh C)",
      "sinceVersion": "11.7",
      "contributor": "Vignesh C"
    },
    {
      "title": "Ensure that the effect of `pg_replication_slot_advance",
      "description": "Ensure that the effect of `pg_replication_slot_advance()()` on a physical replication slot will persist across restarts (Alexey Kondratov, Michael Paquier)",
      "sinceVersion": "11.7",
      "contributor": "Alexey Kondratov, Michael Paquier"
    },
    {
      "title": "Improve efficiency of logical replication with `REPLICA IDENTITY FULL`",
      "description": "Improve efficiency of logical replication with `REPLICA IDENTITY FULL` (Konstantin Knizhnik)\n          When searching for an existing tuple during an update or delete operation, return the first matching tuple not the last one.",
      "sinceVersion": "11.7",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Ensure parallel plans are always shut down at the correct time",
      "description": "Ensure parallel plans are always shut down at the correct time (Kyotaro Horiguchi)\n          This oversight is known to result in “temporary file leak” warnings from multi-batch parallel hash joins.",
      "sinceVersion": "11.7",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Prevent premature shutdown of a Gather or GatherMerge plan node that is underneath a Limit node",
      "description": "Prevent premature shutdown of a Gather or GatherMerge plan node that is underneath a Limit node (Amit Kapila)\n          This avoids failure if such a plan node needs to be scanned more than once, as for instance if it is on the inside of a nestloop.",
      "sinceVersion": "11.7",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Improve efficiency of parallel hash join on CPUs with many cores",
      "description": "Improve efficiency of parallel hash join on CPUs with many cores (Gang Deng, Thomas Munro)",
      "sinceVersion": "11.7",
      "contributor": "Gang Deng, Thomas Munro"
    },
    {
      "title": "Avoid crash in parallel CREATE INDEX when there are no free dynamic shared memory slots",
      "description": "Avoid crash in parallel CREATE INDEX when there are no free dynamic shared memory slots (Thomas Munro)\n          Fall back to a non-parallel index build, instead.",
      "sinceVersion": "11.7",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid memory leak when there are no free dynamic shared memory slots",
      "description": "Avoid memory leak when there are no free dynamic shared memory slots (Thomas Munro)",
      "sinceVersion": "11.7",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Ignore the `CONCURRENTLY` option when performing an index creation, drop, or rebuild on a temporary table",
      "description": "Ignore the `CONCURRENTLY` option when performing an index creation, drop, or rebuild on a temporary table (Michael Paquier, Heikki Linnakangas, Andres Freund)\n          This avoids strange failures if the temporary table has an `ON COMMIT` action. There is no benefit in using `CONCURRENTLY` for a temporary table anyway, since other sessions cannot access the table, making the extra processing pointless.",
      "sinceVersion": "11.7",
      "contributor": "Michael Paquier, Heikki Linnakangas, Andres Freund"
    },
    {
      "title": "Fix possible failure when resetting expression indexes on temporary tables that are marked `ON COMMIT DELETE ROWS`",
      "description": "Fix possible failure when resetting expression indexes on temporary tables that are marked `ON COMMIT DELETE ROWS` (Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible crash in BRIN index operations with box, range and inet data types",
      "description": "Fix possible crash in BRIN index operations with box, range and inet data types (Heikki Linnakangas)",
      "sinceVersion": "11.7",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix handling of deleted pages in GIN indexes",
      "description": "Fix handling of deleted pages in GIN indexes (Alexander Korotkov)\n          Avoid possible deadlocks, incorrect updates of a deleted page's state, and failure to traverse through a recently-deleted page.",
      "sinceVersion": "11.7",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix possible crash with a SubPlan",
      "description": "Fix possible crash with a SubPlan (sub-`SELECT`) within a multi-row `VALUES` list (Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash after FileClose",
      "description": "Fix crash after FileClose() failure (Noah Misch)\n          This issue could only be observed with data_sync_retry enabled, since otherwise FileClose() failure would be reported as a PANIC.",
      "sinceVersion": "11.7",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix unlikely crash with pass-by-reference aggregate transition states",
      "description": "Fix unlikely crash with pass-by-reference aggregate transition states (Andres Freund, Teodor Sigaev)",
      "sinceVersion": "11.7",
      "contributor": "Andres Freund, Teodor Sigaev"
    },
    {
      "title": "Improve error reporting in `to_date",
      "description": "Improve error reporting in `to_date()()` and `to_timestamp()()` (Tom Lane, Álvaro Herrera)\n          Reports about incorrect month or day names in input strings could truncate the input in the middle of a multi-byte character, leading to an improperly encoded error message that could cause follow-on failures. Truncate at the next whitespace instead.",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Fix off-by-one result for `EXTRACT",
      "description": "Fix off-by-one result for `EXTRACT(ISOYEAR FROM `timestamp`)` for BC dates (Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid stack overflow in `information_schema` views when a self-referential view exists in the system catalogs",
      "description": "Avoid stack overflow in `information_schema` views when a self-referential view exists in the system catalogs (Tom Lane)\n          A self-referential view can't work; it will always result in infinite recursion. We handled that situation correctly when trying to execute the view, but not when inquiring whether it is automatically updatable.",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that walsender processes always show NULL for transaction start time in pg_stat_activity",
      "description": "Ensure that walsender processes always show NULL for transaction start time in pg_stat_activity (Álvaro Herrera)\n          Previously, the xact_start column would sometimes show the process start time.",
      "sinceVersion": "11.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix placement of “Subplans Removed” field in EXPLAIN output",
      "description": "Fix placement of “Subplans Removed” field in EXPLAIN output (Daniel Gustafsson, Tom Lane)\n          In non-text output formats, this field was emitted inside the “Plans” sub-group, resulting in syntactically invalid output. Attach it to the parent Append or MergeAppend plan node as intended. This causes the field to change position in text output format too: if there are any InitPlans attached to the same plan node, “Subplans Removed” will now appear before those.",
      "sinceVersion": "11.7",
      "contributor": "Daniel Gustafsson, Tom Lane"
    },
    {
      "title": "Fix edge-case crashes and misestimations in selectivity calculations for the `&lt;@` and `@&gt;` range operators",
      "description": "Fix edge-case crashes and misestimations in selectivity calculations for the `&lt;@` and `@&gt;` range operators (Michael Paquier, Andrey Borodin, Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Michael Paquier, Andrey Borodin, Tom Lane"
    },
    {
      "title": "Ignore system columns when applying most-common-value extended statistics",
      "description": "Ignore system columns when applying most-common-value extended statistics (Tomas Vondra)\n          This prevents “negative bitmapset member not allowed” planner errors for affected queries.",
      "sinceVersion": "11.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix BRIN index logic to support hypothetical BRIN indexes",
      "description": "Fix BRIN index logic to support hypothetical BRIN indexes (Julien Rouhaud, Heikki Linnakangas)\n          Previously, if an “index adviser” extension tried to get the planner to produce a plan involving a hypothetical BRIN index, that would fail, because the BRIN cost estimation code would always try to physically access the index's metapage. Now it checks to see if the index is only hypothetical, and uses default assumptions about the index parameters if so.",
      "sinceVersion": "11.7",
      "contributor": "Julien Rouhaud, Heikki Linnakangas"
    },
    {
      "title": "Improve error reporting for attempts to use automatic updating of views with conditional `INSTEAD` rules",
      "description": "Improve error reporting for attempts to use automatic updating of views with conditional `INSTEAD` rules (Dean Rasheed)\n          This has never been supported, but previously the error was thrown only at execution time, so that it could be masked by planner errors.",
      "sinceVersion": "11.7",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent a composite type from being included in itself indirectly via a range type",
      "description": "Prevent a composite type from being included in itself indirectly via a range type (Tom Lane, Julien Rouhaud)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane, Julien Rouhaud"
    },
    {
      "title": "Disallow partition key expressions that return pseudo-types, such as record",
      "description": "Disallow partition key expressions that return pseudo-types, such as record (Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error reporting for index expressions of prohibited types",
      "description": "Fix error reporting for index expressions of prohibited types (Amit Langote)",
      "sinceVersion": "11.7",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix dumping of views that contain only a `VALUES` list to handle cases where a view output column has been renamed",
      "description": "Fix dumping of views that contain only a `VALUES` list to handle cases where a view output column has been renamed (Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that data types and collations used in `XMLTABLE` constructs are accounted for when computing dependencies of a view or rule",
      "description": "Ensure that data types and collations used in `XMLTABLE` constructs are accounted for when computing dependencies of a view or rule (Tom Lane)\n          Previously it was possible to break a view using `XMLTABLE` by dropping a type, if the type was not otherwise referenced in the view. This fix does not correct the dependencies already recorded for existing views, only for newly-created ones.",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent unwanted downcasing and truncation of RADIUS authentication parameters",
      "description": "Prevent unwanted downcasing and truncation of RADIUS authentication parameters (Marcos David)\n          The pg_hba.conf parser mistakenly treated these fields as SQL identifiers, which in general they aren't.",
      "sinceVersion": "11.7",
      "contributor": "Marcos David"
    },
    {
      "title": "Transmit incoming NOTIFY messages to the client before sending `ReadyForQuery`, rather than after",
      "description": "Transmit incoming NOTIFY messages to the client before sending `ReadyForQuery`, rather than after (Tom Lane)\n          This change ensures that, with libpq and other client libraries that act similarly to it, any notifications received during a transaction will be available by the time the client thinks the transaction is complete. This probably makes no difference in practical applications (which would need to cope with asynchronous notifications in any case); but it makes it easier to build test cases with reproducible behavior.",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow libpq to parse all GSS-related connection parameters even when the GSSAPI code hasn't been compiled in",
      "description": "Allow libpq to parse all GSS-related connection parameters even when the GSSAPI code hasn't been compiled in (Tom Lane)\n          This makes the behavior similar to our SSL support, where it was long ago deemed to be a good idea to always accept all the related parameters, even if some are ignored or restricted due to lack of the feature in a particular build.",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect handling of `%b` and `%B` format codes in ecpg's `PGTYPEStimestamp_fmt_asc",
      "description": "Fix incorrect handling of `%b` and `%B` format codes in ecpg's `PGTYPEStimestamp_fmt_asc()()` function (Tomas Vondra)\n          Due to an off-by-one error, these codes would print the wrong month name, or possibly crash.",
      "sinceVersion": "11.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix parallel pg_dump/pg_restore to more gracefully handle failure to create worker processes",
      "description": "Fix parallel pg_dump/pg_restore to more gracefully handle failure to create worker processes (Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent possible crash or lockup when attempting to terminate a parallel pg_dump/pg_restore run via a signal",
      "description": "Prevent possible crash or lockup when attempting to terminate a parallel pg_dump/pg_restore run via a signal (Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_upgrade, look inside arrays and ranges while searching for non-upgradable data types in tables",
      "description": "In pg_upgrade, look inside arrays and ranges while searching for non-upgradable data types in tables (Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Apply more thorough syntax checking to createuser's --connection-limit option",
      "description": "Apply more thorough syntax checking to createuser's --connection-limit option (Álvaro Herrera)",
      "sinceVersion": "11.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Cope with changes of the specific type referenced by a PL/pgSQL composite-type variable in more cases",
      "description": "Cope with changes of the specific type referenced by a PL/pgSQL composite-type variable in more cases (Ashutosh Sharma, Tom Lane)\n          Dropping and re-creating the composite type referenced by a PL/pgSQL variable could lead to “could not open relation with OID `NNNN`” errors.",
      "sinceVersion": "11.7",
      "contributor": "Ashutosh Sharma, Tom Lane"
    },
    {
      "title": "Avoid crash in postgres_fdw when trying to send a command like `UPDATE remote_tab SET",
      "description": "Avoid crash in postgres_fdw when trying to send a command like `UPDATE remote_tab SET (x,y) = (SELECT ...)` to the remote server (Tom Lane)",
      "sinceVersion": "11.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/dict_int, reject maxlen settings less than one",
      "description": "In contrib/dict_int, reject maxlen settings less than one (Tomas Vondra)\n          This prevents a possible crash with silly settings for that parameter.",
      "sinceVersion": "11.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Disallow NULL category values in contrib/tablefunc's `crosstab",
      "description": "Disallow NULL category values in contrib/tablefunc's `crosstab()()` function (Joe Conway)\n          This case never worked usefully, and it would crash on some platforms.",
      "sinceVersion": "11.7",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix configure's probe for OpenSSL's `SSL_clear_options",
      "description": "Fix configure's probe for OpenSSL's `SSL_clear_options()()` function so that it works with OpenSSL versions before 1.1.0 (Michael Paquier, Daniel Gustafsson)\n          This problem could lead to failure to set the SSL compression option as desired, when PostgreSQL is built against an old version of OpenSSL.",
      "sinceVersion": "11.7",
      "contributor": "Michael Paquier, Daniel Gustafsson"
    },
    {
      "title": "Mark some timeout and statistics-tracking GUC variables as `PGDLLIMPORT`, to allow extensions to access them on Windows",
      "description": "Mark some timeout and statistics-tracking GUC variables as `PGDLLIMPORT`, to allow extensions to access them on Windows (Pascal Legrand)\n          This applies to `idle_in_transaction_session_timeout`, `lock_timeout`, `statement_timeout`, `track_activities`, `track_counts`, and `track_functions`.",
      "sinceVersion": "11.7",
      "contributor": "Pascal Legrand"
    },
    {
      "title": "Avoid memory leak in sanity checks for “slab” memory contexts",
      "description": "Avoid memory leak in sanity checks for “slab” memory contexts (Tomas Vondra)\n          This isn't an issue for production builds, since they wouldn't ordinarily have memory context checking enabled; but the leak could be quite severe in a debug build.",
      "sinceVersion": "11.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix multiple statistics entries reported by the LWLock statistics mechanism",
      "description": "Fix multiple statistics entries reported by the LWLock statistics mechanism (Fujii Masao)\n          The LWLock statistics code (which is not built by default; it requires compiling with -DLWLOCK_STATS) could report multiple entries for the same LWLock and backend process, as a result of faulty hashtable key creation.",
      "sinceVersion": "11.7",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix race condition that led to delayed delivery of interprocess signals on Windows",
      "description": "Fix race condition that led to delayed delivery of interprocess signals on Windows (Amit Kapila)\n          This caused visible timing oddities in NOTIFY, and perhaps other misbehavior.",
      "sinceVersion": "11.7",
      "contributor": "Amit Kapila"
    },
    {
      "title": "On Windows, retry a few times after an `ERROR_ACCESS_DENIED` file access failure",
      "description": "On Windows, retry a few times after an `ERROR_ACCESS_DENIED` file access failure (Alexander Lakhin, Tom Lane)\n          This helps cope with cases where a file open attempt fails because the targeted file is flagged for deletion but not yet actually gone. pg_ctl, for example, frequently failed with such an error when probing to see if the postmaster had shut down yet.",
      "sinceVersion": "11.7",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Add pg_dump support for ALTER ... DEPENDS ON EXTENSION",
      "description": "Add pg_dump support for ALTER ... DEPENDS ON EXTENSION (Álvaro Herrera)\n          pg_dump previously ignored dependencies added this way, causing them to be forgotten during dump/restore or pg_upgrade.",
      "sinceVersion": "11.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Propagate ALTER TABLE ... SET STORAGE to indexes",
      "description": "Propagate ALTER TABLE ... SET STORAGE to indexes (Peter Eisentraut)\n          Non-expression index columns have always copied the attstorage property of their table column at creation. Update them when ALTER TABLE ... SET STORAGE is done, to maintain consistency.",
      "sinceVersion": "11.8",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Preserve the indisclustered setting of indexes rewritten by ALTER TABLE",
      "description": "Preserve the indisclustered setting of indexes rewritten by ALTER TABLE (Amit Langote, Justin Pryzby)\n          Previously, ALTER TABLE lost track of which index had been used for CLUSTER.",
      "sinceVersion": "11.8",
      "contributor": "Amit Langote, Justin Pryzby"
    },
    {
      "title": "Preserve the replica identity properties of indexes rewritten by ALTER TABLE",
      "description": "Preserve the replica identity properties of indexes rewritten by ALTER TABLE (Quan Zongliang, Peter Eisentraut)",
      "sinceVersion": "11.8",
      "contributor": "Quan Zongliang, Peter Eisentraut"
    },
    {
      "title": "Lock objects sooner during DROP OWNED BY",
      "description": "Lock objects sooner during DROP OWNED BY (Álvaro Herrera)\n          This avoids failures in race-condition cases where another session is deleting some of the same objects.",
      "sinceVersion": "11.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix error-case processing for CREATE ROLE ... IN ROLE",
      "description": "Fix error-case processing for CREATE ROLE ... IN ROLE (Andrew Gierth)\n          Some error cases would be reported as “unexpected node type” or the like, instead of the intended message.",
      "sinceVersion": "11.8",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Ensure that when a partition is detached, any triggers cloned from its formerly-parent table are removed",
      "description": "Ensure that when a partition is detached, any triggers cloned from its formerly-parent table are removed (Justin Pryzby)",
      "sinceVersion": "11.8",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Ensure that unique indexes over partitioned tables match the equality semantics of the partitioning key",
      "description": "Ensure that unique indexes over partitioned tables match the equality semantics of the partitioning key (Guancheng Luo)\n          This would only be an issue with index opclasses that have unusual notions of equality, but it's wrong in theory, so check.",
      "sinceVersion": "11.8",
      "contributor": "Guancheng Luo"
    },
    {
      "title": "Ensure that members of the `pg_read_all_stats` role can read all statistics views, as expected",
      "description": "Ensure that members of the `pg_read_all_stats` role can read all statistics views, as expected (Magnus Hagander)\n          The functions underlying the pg_stat_progress_* views had not gotten this memo.",
      "sinceVersion": "11.8",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Fix full text search to handle NOT above a phrase search correctly",
      "description": "Fix full text search to handle NOT above a phrase search correctly (Tom Lane)\n          Queries such as `!(foo&lt;-&gt;bar)` failed to find matching rows when implemented as a GiST or GIN index search.",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix full text search for cases where a phrase search includes an item with both prefix matching and a weight restriction",
      "description": "Fix full text search for cases where a phrase search includes an item with both prefix matching and a weight restriction (Tom Lane)",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix `ts_headline",
      "description": "Fix `ts_headline()()` to make better headline selections when working with phrase queries (Tom Lane)",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bugs in gin_fuzzy_search_limit processing",
      "description": "Fix bugs in gin_fuzzy_search_limit processing (Adé Heyward, Tom Lane)\n          A small value of gin_fuzzy_search_limit could result in unexpected slowness due to unintentionally rescanning the same index page many times. Another code path failed to apply the intended filtering at all, possibly returning too many values.",
      "sinceVersion": "11.8",
      "contributor": "Adé Heyward, Tom Lane"
    },
    {
      "title": "Allow input of type circle to accept the format “`",
      "description": "Allow input of type circle to accept the format “`(`x`,y`),`r`” as the documentation says it does (David Zhang)",
      "sinceVersion": "11.8",
      "contributor": "David Zhang"
    },
    {
      "title": "Make the `get_bit",
      "description": "Make the `get_bit()()` and `set_bit()()` functions cope with bytea strings longer than 256MB (Movead Li)\n          Since the bit number argument is only int4, it's impossible to use these functions to access bits beyond the first 256MB of a long bytea. We'll widen the argument to int8 in v13, but in the meantime, allow these functions to work on the initial substring of a long bytea.",
      "sinceVersion": "11.8",
      "contributor": "Movead Li"
    },
    {
      "title": "Ignore file-not-found errors in `pg_ls_waldir",
      "description": "Ignore file-not-found errors in `pg_ls_waldir()()` and allied functions (Tom Lane)\n          This prevents a race condition failure if a file is removed between when we see its directory entry and when we attempt to `stat()()` it.",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possibly leaking an open-file descriptor for a directory in `pg_ls_dir",
      "description": "Avoid possibly leaking an open-file descriptor for a directory in `pg_ls_dir()()`, `pg_timezone_names()()`, `pg_tablespace_databases()()`, and allied functions (Justin Pryzby)",
      "sinceVersion": "11.8",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix polymorphic-function type resolution to correctly infer the actual type of an anyarray output when given only an anyrange input",
      "description": "Fix polymorphic-function type resolution to correctly infer the actual type of an anyarray output when given only an anyrange input (Tom Lane)",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid leakage of a hashed subplan's hash tables across multiple executions",
      "description": "Avoid leakage of a hashed subplan's hash tables across multiple executions (Andreas Karlsson, Tom Lane)\n          This mistake could result in severe memory bloat if a query re-executed a hashed subplan enough times.",
      "sinceVersion": "11.8",
      "contributor": "Andreas Karlsson, Tom Lane"
    },
    {
      "title": "Avoid unlikely crash when REINDEX is terminated by a session-shutdown signal",
      "description": "Avoid unlikely crash when REINDEX is terminated by a session-shutdown signal (Tom Lane)",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix low-probability crash after constraint violation errors in partitioned tables",
      "description": "Fix low-probability crash after constraint violation errors in partitioned tables (Andres Freund)",
      "sinceVersion": "11.8",
      "contributor": "Andres Freund"
    },
    {
      "title": "Prevent printout of possibly-incorrect hash join table statistics in EXPLAIN",
      "description": "Prevent printout of possibly-incorrect hash join table statistics in EXPLAIN (Konstantin Knizhnik, Tom Lane, Thomas Munro)",
      "sinceVersion": "11.8",
      "contributor": "Konstantin Knizhnik, Tom Lane, Thomas Munro"
    },
    {
      "title": "Fix reporting of elapsed time for heap truncation steps in VACUUM VERBOSE",
      "description": "Fix reporting of elapsed time for heap truncation steps in VACUUM VERBOSE (Tatsuhito Kasahara)",
      "sinceVersion": "11.8",
      "contributor": "Tatsuhito Kasahara"
    },
    {
      "title": "Fix possible undercounting of deleted B-tree index pages in VACUUM VERBOSE output",
      "description": "Fix possible undercounting of deleted B-tree index pages in VACUUM VERBOSE output (Peter Geoghegan)",
      "sinceVersion": "11.8",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix wrong bookkeeping for oldest deleted page in a B-tree index",
      "description": "Fix wrong bookkeeping for oldest deleted page in a B-tree index (Peter Geoghegan)\n          This could cause subtly wrong decisions about when VACUUM can skip an index cleanup scan; although it appears there may be no significant user-visible effects from that.",
      "sinceVersion": "11.8",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that TimelineHistoryRead and TimelineHistoryWrite wait states are reported in all code paths that read or write timeline history files",
      "description": "Ensure that TimelineHistoryRead and TimelineHistoryWrite wait states are reported in all code paths that read or write timeline history files (Masahiro Ikeda)",
      "sinceVersion": "11.8",
      "contributor": "Masahiro Ikeda"
    },
    {
      "title": "Avoid possibly showing “waiting” twice in a process's PS status",
      "description": "Avoid possibly showing “waiting” twice in a process's PS status (Masahiko Sawada)",
      "sinceVersion": "11.8",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid failure if autovacuum tries to access a just-dropped temporary schema",
      "description": "Avoid failure if autovacuum tries to access a just-dropped temporary schema (Tom Lane)\n          This hazard only arises if a superuser manually drops a temporary schema; which isn't normal practice, but should work.",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid premature recycling of WAL segments during crash recovery",
      "description": "Avoid premature recycling of WAL segments during crash recovery (Jehan-Guillaume de Rorthais)\n          WAL segments that become ready to be archived during crash recovery were potentially recycled without being archived.",
      "sinceVersion": "11.8",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Avoid scanning irrelevant timelines during archive recovery",
      "description": "Avoid scanning irrelevant timelines during archive recovery (Kyotaro Horiguchi)\n          This can eliminate many attempts to fetch non-existent WAL files from archive storage, which is helpful if archive access is slow.",
      "sinceVersion": "11.8",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Remove bogus “subtransaction logged without previous top-level txn record” error check in logical decoding",
      "description": "Remove bogus “subtransaction logged without previous top-level txn record” error check in logical decoding (Arseny Sher, Amit Kapila)\n          This condition is legitimately reachable in various scenarios, so remove the check.",
      "sinceVersion": "11.8",
      "contributor": "Arseny Sher, Amit Kapila"
    },
    {
      "title": "Ensure that a replication slot's `io_in_progress_lock` is released in failure code paths",
      "description": "Ensure that a replication slot's `io_in_progress_lock` is released in failure code paths (Pavan Deolasee)\n          This could result in a walsender later becoming stuck waiting for the lock.",
      "sinceVersion": "11.8",
      "contributor": "Pavan Deolasee"
    },
    {
      "title": "Fix race conditions in synchronous standby management",
      "description": "Fix race conditions in synchronous standby management (Tom Lane)\n          During a change in the synchronous_standby_names setting, there was a window in which wrong decisions could be made about whether it is OK to release transactions that are waiting for synchronous commit. Another hazard for similarly wrong decisions existed if a walsender process exited and was immediately replaced by another.",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure nextXid can't go backwards on a standby server",
      "description": "Ensure nextXid can't go backwards on a standby server (Eka Palamadai)\n          This race condition could allow incorrect hot standby feedback messages to be sent back to the primary server, potentially allowing VACUUM to run too soon on the primary.",
      "sinceVersion": "11.8",
      "contributor": "Eka Palamadai"
    },
    {
      "title": "Add missing SQLSTATE values to a few error reports",
      "description": "Add missing SQLSTATE values to a few error reports (Sawada Masahiko)",
      "sinceVersion": "11.8",
      "contributor": "Sawada Masahiko"
    },
    {
      "title": "Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function",
      "description": "Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function (Tom Lane)",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak in libpq when using `sslmode=verify-full`",
      "description": "Fix memory leak in libpq when using `sslmode=verify-full` (Roman Peshkurov)\n          Certificate verification during connection startup could leak some memory. This would become an issue if a client process opened many database connections during its lifetime.",
      "sinceVersion": "11.8",
      "contributor": "Roman Peshkurov"
    },
    {
      "title": "Fix ecpg to treat an argument of just “`-`” as meaning “read from stdin” on all platforms",
      "description": "Fix ecpg to treat an argument of just “`-`” as meaning “read from stdin” on all platforms (Tom Lane)",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow tab-completion of the filename argument to psql's \\gx command",
      "description": "Allow tab-completion of the filename argument to psql's \\gx command (Vik Fearing)",
      "sinceVersion": "11.8",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Fix pg_dump to dump comments on RLS policy objects",
      "description": "Fix pg_dump to dump comments on RLS policy objects (Tom Lane)",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_dump, postpone restore of event triggers till the end",
      "description": "In pg_dump, postpone restore of event triggers till the end (Fabrízio de Royes Mello, Hamid Akhtar, Tom Lane)\n          This minimizes the risk that an event trigger could interfere with the restoration of other objects.",
      "sinceVersion": "11.8",
      "contributor": "Fabrízio de Royes Mello, Hamid Akhtar, Tom Lane"
    },
    {
      "title": "Make pg_verify_checksums skip tablespace subdirectories that belong to a different PostgreSQL major version",
      "description": "Make pg_verify_checksums skip tablespace subdirectories that belong to a different PostgreSQL major version (Michael Banck, Bernd Helmle)\n          Such subdirectories don't really belong to our database cluster, and so must not be processed.",
      "sinceVersion": "11.8",
      "contributor": "Michael Banck, Bernd Helmle"
    },
    {
      "title": "Ignore temporary copies of pg_internal.init in pg_verify_checksums and related programs",
      "description": "Ignore temporary copies of pg_internal.init in pg_verify_checksums and related programs (Michael Paquier)",
      "sinceVersion": "11.8",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix quoting of --encoding, --lc-ctype and --lc-collate values in createdb utility",
      "description": "Fix quoting of --encoding, --lc-ctype and --lc-collate values in createdb utility (Michael Paquier)",
      "sinceVersion": "11.8",
      "contributor": "Michael Paquier"
    },
    {
      "title": "contrib/lo's `lo_manage",
      "description": "contrib/lo's `lo_manage()()` function crashed if called directly rather than as a trigger (Tom Lane)",
      "sinceVersion": "11.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/ltree, protect against overflow of ltree and lquery length fields",
      "description": "In contrib/ltree, protect against overflow of ltree and lquery length fields (Nikita Glukhov)",
      "sinceVersion": "11.8",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Work around failure in contrib/pageinspect's `bt_metap",
      "description": "Work around failure in contrib/pageinspect's `bt_metap()()` function when an oldest_xact value exceeds 2^31-1 (Peter Geoghegan)\n          Such XIDs will now be reported as negative integers, which isn't great but it beats throwing an error. v13 will widen the output argument to int8 to provide saner reporting.",
      "sinceVersion": "11.8",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix cache reference leak in contrib/sepgsql",
      "description": "Fix cache reference leak in contrib/sepgsql (Michael Luo)",
      "sinceVersion": "11.8",
      "contributor": "Michael Luo"
    },
    {
      "title": "Avoid failures when dealing with Unix-style locale names on Windows",
      "description": "Avoid failures when dealing with Unix-style locale names on Windows (Juan José Santamaría Flecha)",
      "sinceVersion": "11.8",
      "contributor": "Juan José Santamaría Flecha"
    },
    {
      "title": "Use pkg-config, if available, to locate libxml2 during configure",
      "description": "Use pkg-config, if available, to locate libxml2 during configure (Hugh McMaster, Tom Lane, Peter Eisentraut)\n          If pkg-config is not present or lacks knowledge of libxml2, we still query xml2-config as before.\n          This change could break build processes that try to make PostgreSQL use a non-default version of libxml2 by putting that version's xml2-config into the PATH. Instead, set XML2_CONFIG to point to the non-default xml2-config. That method will work with either older or newer PostgreSQL releases.",
      "sinceVersion": "11.8",
      "contributor": "Hugh McMaster, Tom Lane, Peter Eisentraut"
    },
    {
      "title": "In MSVC builds, cope with spaces in the path name for Python",
      "description": "In MSVC builds, cope with spaces in the path name for Python (Victor Wagner)",
      "sinceVersion": "11.8",
      "contributor": "Victor Wagner"
    },
    {
      "title": "In MSVC builds, fix detection of Visual Studio version to work with more language settings",
      "description": "In MSVC builds, fix detection of Visual Studio version to work with more language settings (Andrew Dunstan)",
      "sinceVersion": "11.8",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "In MSVC builds, use `-Wno-deprecated` with bison versions newer than 3.0, as non-Windows builds already do",
      "description": "In MSVC builds, use `-Wno-deprecated` with bison versions newer than 3.0, as non-Windows builds already do (Andrew Dunstan)",
      "sinceVersion": "11.8",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2020a for DST law changes in Morocco and the Canadian Yukon, plus historical corrections for Shanghai.\n          The America/Godthab zone has been renamed to America/Nuuk to reflect current English usage; however, the old name remains available as a compatibility link.\n          Also, update initdb's list of known Windows time zone names to include recent additions, improving the odds that it will correctly translate the system time zone setting on that platform.",
      "sinceVersion": "11.8",
      "contributor": null
    },
    {
      "title": "Fix slow execution of `ts_headline",
      "description": "Fix slow execution of `ts_headline()()` (Tom Lane)\n          The phrase-search fix added in our previous set of minor releases could cause `ts_headline()()` to take unreasonable amounts of time for long documents; to make matters worse, the query was not cancellable within the troublesome loop.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Set a secure search_path in logical replication walsenders and apply workers",
      "description": "Set a secure search_path in logical replication walsenders and apply workers (Noah Misch)\n          A malicious user of either the publisher or subscriber database could potentially cause execution of arbitrary SQL code by the role running replication, which is often a superuser. Some of the risks here are equivalent to those described in CVE-2018-1058, and are mitigated in this patch by ensuring that the replication sender and receiver execute with empty search_path settings. (As with CVE-2018-1058, that change might cause problems for under-qualified names used in replicated tables' DDL.) Other risks are inherent in replicating objects that belong to untrusted roles; the most we can do is document that there is a hazard to consider. (CVE-2020-14349)",
      "sinceVersion": "11.9",
      "contributor": "Noah Misch"
    },
    {
      "title": "Make contrib modules' installation scripts more secure",
      "description": "Make contrib modules' installation scripts more secure (Tom Lane)\n          Attacks similar to those described in CVE-2018-1058 could be carried out against an extension installation script, if the attacker can create objects in either the extension's target schema or the schema of some prerequisite extension. Since extensions often require superuser privilege to install, this can open a path to obtaining superuser privilege. To mitigate this risk, be more careful about the search_path used to run an installation script; disable check_function_bodies within the script; and fix catalog-adjustment queries used in some contrib modules to ensure they are secure. Also provide documentation to help third-party extension authors make their installation scripts secure. This is not a complete solution; extensions that depend on other extensions can still be at risk if installed carelessly. (CVE-2020-14350)",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge cases in partition pruning",
      "description": "Fix edge cases in partition pruning (Etsuro Fujita, Dmitry Dolgov)\n          When there are multiple partition key columns, generation of pruning tests could misbehave if some columns had no constraining `WHERE` clauses or multiple constraining clauses. This could lead to server crashes, incorrect query results, or assertion failures.",
      "sinceVersion": "11.9",
      "contributor": "Etsuro Fujita, Dmitry Dolgov"
    },
    {
      "title": "Fix construction of parameterized BitmapAnd and BitmapOr index scans on the inside of partition-wise nestloop joins",
      "description": "Fix construction of parameterized BitmapAnd and BitmapOr index scans on the inside of partition-wise nestloop joins (Tom Lane)\n          A plan in which such a scan needed to use a value from the outside of the join would usually crash at execution.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix firing of column-specific `UPDATE` triggers in logical replication subscribers",
      "description": "Fix firing of column-specific `UPDATE` triggers in logical replication subscribers (Tom Lane)\n          The code neglected to account for the possibility of column numbers being different between the publisher and subscriber tables, so that if those were indeed different, wrong decisions might be made about which triggers to fire.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update oldest xmin and LSN values during `pg_replication_slot_advance",
      "description": "Update oldest xmin and LSN values during `pg_replication_slot_advance()()` (Michael Paquier)\n          This function previously failed to do that, possibly preventing resource cleanup (such as removal of no-longer-needed WAL segments) after manual advancement of a replication slot.",
      "sinceVersion": "11.9",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure the `repeat",
      "description": "Ensure the `repeat()()` function can be interrupted by query cancel (Joe Conway)",
      "sinceVersion": "11.9",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix `pg_current_logfile",
      "description": "Fix `pg_current_logfile()()` to not include a carriage return (`\\r`) in its result on Windows (Tom Lane)",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that `pg_read_file",
      "description": "Ensure that `pg_read_file()()` and related functions read until EOF is reached (Joe Conway)\n          Previously, if not given a specific data length to read, these functions would stop at whatever file length was reported by `stat()()`. That's unhelpful for pipes and other sorts of virtual files.",
      "sinceVersion": "11.9",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix mis-handling of `NaN` inputs during parallel aggregation on numeric-type columns",
      "description": "Fix mis-handling of `NaN` inputs during parallel aggregation on numeric-type columns (Tom Lane)\n          If some partial aggregation workers found only `NaN`s while others found only non-`NaN`s, the results were combined incorrectly, possibly leading to the wrong overall result (i.e., not `NaN` when it should be).",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject time-of-day values greater than 24 hours",
      "description": "Reject time-of-day values greater than 24 hours (Tom Lane)\n          The intention of the datetime input code is to allow “24:00:00” or equivalently “23:59:60”, but no larger value. However, the range check was miscoded so that it would accept “23:59:60.`nnn`” with nonzero fractional-second `nnn`. In timestamp values this would result in wrapping into the first second of the next day. In time and timetz values, the stored value would actually be more than 24 hours, causing dump/reload failures and possibly other misbehavior.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Undo double-quoting of index names in EXPLAIN's non-text output formats",
      "description": "Undo double-quoting of index names in EXPLAIN's non-text output formats (Tom Lane, Euler Taveira)",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane, Euler Taveira"
    },
    {
      "title": "Fix EXPLAIN's accounting for resource usage, particularly buffer accesses, in parallel workers in a plan using `Gather Merge` nodes",
      "description": "Fix EXPLAIN's accounting for resource usage, particularly buffer accesses, in parallel workers in a plan using `Gather Merge` nodes (Jehan-Guillaume de Rorthais)",
      "sinceVersion": "11.9",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix timing of constraint revalidation in ALTER TABLE",
      "description": "Fix timing of constraint revalidation in ALTER TABLE (David Rowley)\n          If ALTER TABLE needs to fully rewrite the table's contents (for example, due to change of a column's data type) and also needs to scan the table to re-validate foreign keys or `CHECK` constraints, it sometimes did things in the wrong order, leading to odd errors such as “could not read block 0 in file \"base/nnnnn/nnnnn\": read only 0 of 8192 bytes”.",
      "sinceVersion": "11.9",
      "contributor": "David Rowley"
    },
    {
      "title": "Work around incorrect not-null markings for pg_subscription.subslotname and pg_subscription_rel.srsublsn",
      "description": "Work around incorrect not-null markings for pg_subscription.subslotname and pg_subscription_rel.srsublsn (Tom Lane)\n          The bootstrap catalog data incorrectly marks these two catalog columns as always non-null. There's no easy way to correct that mistake in existing installations (though v13 and later will have the correct markings). The main place that depends on that marking being correct is JIT-enabled tuple deconstruction, so teach it to explicitly ignore the marking for these two columns. Also adjust some C code that accessed srsublsn without checking to see if it's null; a crash from that is improbable but perhaps not impossible.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope with `LATERAL` references in restriction clauses attached to an un-flattened sub-`SELECT` in the `FROM` clause",
      "description": "Cope with `LATERAL` references in restriction clauses attached to an un-flattened sub-`SELECT` in the `FROM` clause (Tom Lane)\n          This oversight could result in assertion failures or crashes at query execution.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid believing that a never-analyzed foreign table has zero tuples",
      "description": "Avoid believing that a never-analyzed foreign table has zero tuples (Tom Lane)\n          This primarily affected the planner's estimate of the number of groups that would be obtained by `GROUP BY`.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove bogus warning about “leftover placeholder tuple” in BRIN index de-summarization",
      "description": "Remove bogus warning about “leftover placeholder tuple” in BRIN index de-summarization (Álvaro Herrera)\n          The case can occur legitimately after a cancelled vacuum, so warning about it is overly noisy.",
      "sinceVersion": "11.9",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix selection of tablespaces for “shared fileset” temporary files",
      "description": "Fix selection of tablespaces for “shared fileset” temporary files (Magnus Hagander, Tom Lane)\n          If temp_tablespaces is empty or explicitly names the database's primary tablespace, such files got placed into the `pg_default` tablespace rather than the database's primary tablespace as expected.",
      "sinceVersion": "11.9",
      "contributor": "Magnus Hagander, Tom Lane"
    },
    {
      "title": "Fix corner-case error in masking of SP-GiST index pages during WAL consistency checking",
      "description": "Fix corner-case error in masking of SP-GiST index pages during WAL consistency checking (Alexander Korotkov)\n          This could cause false failure reports when wal_consistency_checking is enabled.",
      "sinceVersion": "11.9",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Improve error handling in the server's buffile module",
      "description": "Improve error handling in the server's buffile module (Thomas Munro)\n          Fix some cases where I/O errors were indistinguishable from reaching EOF, or were not reported at all. Also add details such as block numbers and byte counts where appropriate.",
      "sinceVersion": "11.9",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix conflict-checking anomalies in `SERIALIZABLE` isolation mode",
      "description": "Fix conflict-checking anomalies in `SERIALIZABLE` isolation mode (Peter Geoghegan)\n          If a concurrently-inserted tuple was updated by a different concurrent transaction, and neither tuple version was visible to the current transaction's snapshot, serialization conflict checking could draw the wrong conclusions about whether the tuple was relevant to the results of the current transaction. This could allow a serializable transaction to commit when it should have failed with a serialization error.",
      "sinceVersion": "11.9",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Avoid repeated marking of dead btree index entries as dead",
      "description": "Avoid repeated marking of dead btree index entries as dead (Masahiko Sawada)\n          While functionally harmless, this led to useless WAL traffic when checksums are enabled or wal_log_hints is on.",
      "sinceVersion": "11.9",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid trouble during cleanup of a non-exclusive backup when JIT compilation has been activated during the backup",
      "description": "Avoid trouble during cleanup of a non-exclusive backup when JIT compilation has been activated during the backup (Robert Haas)",
      "sinceVersion": "11.9",
      "contributor": "Robert Haas"
    },
    {
      "title": "Fix failure of some code paths to acquire the correct lock before modifying pg_control",
      "description": "Fix failure of some code paths to acquire the correct lock before modifying pg_control (Nathan Bossart, Fujii Masao)\n          This oversight could allow pg_control to be written out with an inconsistent checksum, possibly causing trouble later, including inability to restart the database if it crashed before the next pg_control update.",
      "sinceVersion": "11.9",
      "contributor": "Nathan Bossart, Fujii Masao"
    },
    {
      "title": "Fix errors in `currtid",
      "description": "Fix errors in `currtid()()` and `currtid2()()` (Michael Paquier)\n          These functions (which are undocumented and used only by ancient versions of the ODBC driver) contained coding errors that could result in crashes, or in confusing error messages such as “could not open file” when applied to a relation having no storage.",
      "sinceVersion": "11.9",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid calling `elog",
      "description": "Avoid calling `elog()()` or `palloc()()` while holding a spinlock (Michael Paquier, Tom Lane)\n          Logic associated with replication slots had several violations of this coding rule. While the odds of trouble are quite low, an error in the called function would lead to a stuck spinlock.",
      "sinceVersion": "11.9",
      "contributor": "Michael Paquier, Tom Lane"
    },
    {
      "title": "Fix assertion in logical replication subscriber to allow use of `REPLICA IDENTITY FULL`",
      "description": "Fix assertion in logical replication subscriber to allow use of `REPLICA IDENTITY FULL` (Euler Taveira)\n          This was just an incorrect assertion, so it has no impact on standard production builds.",
      "sinceVersion": "11.9",
      "contributor": "Euler Taveira"
    },
    {
      "title": "Report out-of-disk-space errors properly in pg_dump and pg_basebackup",
      "description": "Report out-of-disk-space errors properly in pg_dump and pg_basebackup (Justin Pryzby, Tom Lane, Álvaro Herrera)\n          Some code paths could produce silly reports like “could not write file: Success”.",
      "sinceVersion": "11.9",
      "contributor": "Justin Pryzby, Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Fix parallel restore of tables having both table-level privileges and per-column privileges",
      "description": "Fix parallel restore of tables having both table-level privileges and per-column privileges (Tom Lane)\n          The table-level privilege grants have to be applied first, but a parallel restore did not reliably order them that way; this could lead to “tuple concurrently updated” errors, or to disappearance of some per-column privilege grants. The fix for this is to include dependency links between such entries in the archive file, meaning that a new dump has to be taken with a corrected pg_dump to ensure that the problem will not recur.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that pg_upgrade runs with vacuum_defer_cleanup_age set to zero in the target cluster",
      "description": "Ensure that pg_upgrade runs with vacuum_defer_cleanup_age set to zero in the target cluster (Bruce Momjian)\n          If the target cluster's configuration has been modified to set vacuum_defer_cleanup_age to a nonzero value, that prevented freezing of the system catalogs from working properly, which caused the upgrade to fail in confusing ways. Ensure that any such setting is overridden for the duration of the upgrade.",
      "sinceVersion": "11.9",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Fix pg_recvlogical to drain pending messages before exiting",
      "description": "Fix pg_recvlogical to drain pending messages before exiting (Noah Misch)\n          Without this, the replication sender might detect a send failure and exit without making the expected final update to the replication slot's LSN position. That led to re-transmitting data after the next connection. It was also possible to miss error messages sent after the last data that pg_recvlogical wants to consume.",
      "sinceVersion": "11.9",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix pg_rewind's handling of just-deleted files in the source data directory",
      "description": "Fix pg_rewind's handling of just-deleted files in the source data directory (Justin Pryzby, Michael Paquier)\n          When working with an on-line source database, concurrent file deletions are possible, but pg_rewind would get confused if deletion happened between seeing a file's directory entry and examining it with `stat()()`.",
      "sinceVersion": "11.9",
      "contributor": "Justin Pryzby, Michael Paquier"
    },
    {
      "title": "Make pg_test_fsync use binary I/O mode on Windows",
      "description": "Make pg_test_fsync use binary I/O mode on Windows (Michael Paquier)\n          Previously it wrote the test file in text mode, which is not an accurate reflection of PostgreSQL's actual usage.",
      "sinceVersion": "11.9",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix contrib/amcheck to not complain about deleted index pages that are empty",
      "description": "Fix contrib/amcheck to not complain about deleted index pages that are empty (Alexander Korotkov)\n          This state of affairs is normal during WAL replay.",
      "sinceVersion": "11.9",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix failure to initialize local state correctly in contrib/dblink",
      "description": "Fix failure to initialize local state correctly in contrib/dblink (Joe Conway)\n          With the right combination of circumstances, this could lead to `dblink_close()()` issuing an unexpected remote COMMIT.",
      "sinceVersion": "11.9",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix contrib/pgcrypto's misuse of `deflate",
      "description": "Fix contrib/pgcrypto's misuse of `deflate()()` (Tom Lane)\n          The `pgp_sym_encrypt()` functions could produce incorrect compressed data due to mishandling of zlib's API requirements. We have no reports of this error manifesting with stock zlib, but it can be seen when using IBM's zlibNX implementation.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner case in decompression logic in contrib/pgcrypto's `pgp_sym_decrypt",
      "description": "Fix corner case in decompression logic in contrib/pgcrypto's `pgp_sym_decrypt()` functions (Kyotaro Horiguchi, Michael Paquier)\n          A compressed stream can validly end with an empty packet, but the decompressor failed to handle this and would complain about corrupt data.",
      "sinceVersion": "11.9",
      "contributor": "Kyotaro Horiguchi, Michael Paquier"
    },
    {
      "title": "Use POSIX-standard `strsignal",
      "description": "Use POSIX-standard `strsignal()()` in place of the BSD-ish `sys_siglist[]` (Tom Lane)\n          This avoids build failures with very recent versions of glibc.",
      "sinceVersion": "11.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Support building our NLS code with Microsoft Visual Studio 2015 or later",
      "description": "Support building our NLS code with Microsoft Visual Studio 2015 or later (Juan José Santamaría Flecha, Davinder Singh, Amit Kapila)",
      "sinceVersion": "11.9",
      "contributor": "Juan José Santamaría Flecha, Davinder Singh, Amit Kapila"
    },
    {
      "title": "Avoid possible failure of our MSVC install script when there is a file named configure several levels above the source code tree",
      "description": "Avoid possible failure of our MSVC install script when there is a file named configure several levels above the source code tree (Arnold Müller)\n          This could confuse some logic that looked for configure to identify the top level of the source tree.",
      "sinceVersion": "11.9",
      "contributor": "Arnold Müller"
    },
    {
      "title": "Allow enumerated values to be added more flexibly",
      "description": "Allow enumerated values to be added more flexibly (Andrew Dunstan, Tom Lane, Thomas Munro)\n            Previously, ALTER TYPE ... ADD VALUE could not be called in a transaction block, unless it was part of the same transaction that created the enumerated type. Now it can be called in a later transaction, so long as the new enumerated value is not referenced until after it is committed.",
      "sinceVersion": "12.0",
      "contributor": "Andrew Dunstan, Tom Lane, Thomas Munro"
    },
    {
      "title": "Automatic",
      "description": "Automatic (but overridable) inlining of common table expressions (CTEs)",
      "sinceVersion": "12.0",
      "contributor": "CTEs"
    },
    {
      "title": "Untitled feature",
      "description": "Reduction of WAL overhead for creation of GiST, GIN, and SP-GiST indexes",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Support for covering GiST indexes, via the `INCLUDE` clause",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Multi-column most-common-value",
      "description": "Multi-column most-common-value (MCV) statistics can be defined via CREATE STATISTICS, to support better plans for queries that test several non-uniformly-distributed columns",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Enhancements to administrative functionality, including:\n          \n            \n              \n                REINDEX CONCURRENTLY can rebuild an index without blocking writes to its table\n              \n              \n                pg_checksums can enable/disable page checksums",
      "description": "Enhancements to administrative functionality, including:\n          \n            \n              \n                REINDEX CONCURRENTLY can rebuild an index without blocking writes to its table\n              \n              \n                pg_checksums can enable/disable page checksums (used for detecting data corruption) in an offline cluster\n              \n              \n                Progress reporting statistics for CREATE INDEX, REINDEX, CLUSTER, VACUUM FULL, and pg_checksums\n              \n            \n          ",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "REINDEX CONCURRENTLY can rebuild an index without blocking writes to its table",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "pg_checksums can enable/disable page checksums",
      "description": "pg_checksums can enable/disable page checksums (used for detecting data corruption) in an offline cluster",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Progress reporting statistics for CREATE INDEX, REINDEX, CLUSTER, VACUUM FULL, and pg_checksums",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Support for the SQL/JSON path language",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Stored generated columns",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Nondeterministic ICU collations, enabling case-insensitive and accent-insensitive grouping and ordering",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "New authentication features, including:\n          \n            \n              \n                Encryption of TCP/IP connections when using GSSAPI authentication\n              \n              \n                Discovery of LDAP servers using DNS SRV records\n              \n              \n                Multi-factor authentication, using the `clientcert=verify-full` option combined with an additional authentication method in pg_hba.conf\n              \n            \n          ",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Encryption of TCP/IP connections when using GSSAPI authentication",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Discovery of LDAP servers using DNS SRV records",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Multi-factor authentication, using the `clientcert=verify-full` option combined with an additional authentication method in pg_hba.conf",
      "sinceVersion": "12.0",
      "contributor": null
    },
    {
      "title": "Remove the special behavior of oid columns",
      "description": "Remove the special behavior of oid columns (Andres Freund, John Naylor)\n          Previously, a normally-invisible oid column could be specified during table creation using `WITH OIDS`; that ability has been removed. Columns can still be explicitly declared as type oid. Operations on tables that have columns created using `WITH OIDS` will need adjustment.\n          The system catalogs that previously had hidden oid columns now have ordinary oid columns. Hence, SELECT * will now output those columns, whereas previously they would be displayed only if selected explicitly.",
      "sinceVersion": "12.0",
      "contributor": "Andres Freund, John Naylor"
    },
    {
      "title": "Remove data types abstime, reltime, and tinterval",
      "description": "Remove data types abstime, reltime, and tinterval (Andres Freund)\n          These are obsoleted by SQL-standard types such as timestamp.",
      "sinceVersion": "12.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Remove the timetravel extension",
      "description": "Remove the timetravel extension (Andres Freund)",
      "sinceVersion": "12.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Move recovery.conf settings into postgresql.conf",
      "description": "Move recovery.conf settings into postgresql.conf (Masao Fujii, Simon Riggs, Abhijit Menon-Sen, Sergei Kornilov)\n          recovery.conf is no longer used, and the server will not start if that file exists. recovery.signal and standby.signal files are now used to switch into non-primary mode. The trigger_file setting has been renamed to promote_trigger_file. The standby_mode setting has been removed.",
      "sinceVersion": "12.0",
      "contributor": "Masao Fujii, Simon Riggs, Abhijit Menon-Sen, Sergei Kornilov"
    },
    {
      "title": "Do not allow multiple conflicting recovery_target* specifications",
      "description": "Do not allow multiple conflicting recovery_target* specifications (Peter Eisentraut)\n          Specifically, only allow one of recovery_target, recovery_target_lsn, recovery_target_name, recovery_target_time, and recovery_target_xid. Previously, multiple different instances of these parameters could be specified, and the last one was honored. Now, only one can be specified, though the same one can be specified multiple times and the last specification is honored.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Cause recovery to advance to the latest timeline by default",
      "description": "Cause recovery to advance to the latest timeline by default (Peter Eisentraut)\n          Specifically, recovery_target_timeline now defaults to `latest`. Previously, it defaulted to `current`.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Refactor code for geometric functions and operators",
      "description": "Refactor code for geometric functions and operators (Emre Hasegeli)\n          This could lead to more accurate, but slightly different, results compared to previous releases. Notably, cases involving NaN, underflow, overflow, and division by zero are handled more consistently than before.",
      "sinceVersion": "12.0",
      "contributor": "Emre Hasegeli"
    },
    {
      "title": "`random",
      "description": "`random()()` and `setseed()()` now behave uniformly across platforms (Tom Lane)\n          The sequence of `random()()` values generated following a `setseed()()` call with a particular seed value is likely to be different now than before. However, it will also be repeatable, which was not previously guaranteed because of interference from other uses of random numbers inside the server. The SQL `random()()` function now has its own private per-session state to forestall that.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change SQL-style `substring",
      "description": "Change SQL-style `substring()()` to have standard-compliant greediness behavior (Tom Lane)\n          In cases where the pattern can be matched in more than one way, the initial sub-pattern is now treated as matching the least possible amount of text rather than the greatest; for example, a pattern such as `%#\"aa*#\"%` now selects the first group of `a`'s from the input, not the last group.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Do not pretty-print the result of `xpath",
      "description": "Do not pretty-print the result of `xpath()()` or the `XMLTABLE` construct (Tom Lane)\n          In some cases, these functions would insert extra whitespace (newlines and/or spaces) in nodeset values. This is undesirable since depending on usage, the whitespace might be considered semantically significant.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rename command-line tool pg_verify_checksums to pg_checksums",
      "description": "Rename command-line tool pg_verify_checksums to pg_checksums (Michaël Paquier)",
      "sinceVersion": "12.0",
      "contributor": "Michaël Paquier"
    },
    {
      "title": "In pg_restore, require specification of `-f -` to send the dump contents to standard output",
      "description": "In pg_restore, require specification of `-f -` to send the dump contents to standard output (Euler Taveira)\n          Previously, this happened by default if no destination was specified, but that was deemed to be unfriendly.",
      "sinceVersion": "12.0",
      "contributor": "Euler Taveira"
    },
    {
      "title": "Disallow non-unique abbreviations in psql's \\pset format command",
      "description": "Disallow non-unique abbreviations in psql's \\pset format command (Daniel Vérité)\n          Previously, for example, \\pset format a chose `aligned`; it will now fail since that could equally well mean `asciidoc`.",
      "sinceVersion": "12.0",
      "contributor": "Daniel Vérité"
    },
    {
      "title": "In new btree indexes, the maximum index entry length is reduced by eight bytes, to improve handling of duplicate entries",
      "description": "In new btree indexes, the maximum index entry length is reduced by eight bytes, to improve handling of duplicate entries (Peter Geoghegan)\n          This means that a REINDEX operation on an index pg_upgrade'd from a previous release could potentially fail.",
      "sinceVersion": "12.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Cause DROP IF EXISTS FUNCTION/`PROCEDURE`/`AGGREGATE`/`ROUTINE` to generate an error if no argument list is supplied and there are multiple matching objects",
      "description": "Cause DROP IF EXISTS FUNCTION/`PROCEDURE`/`AGGREGATE`/`ROUTINE` to generate an error if no argument list is supplied and there are multiple matching objects (David Rowley)\n          Also improve the error message in such cases.",
      "sinceVersion": "12.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Split the pg_statistic_ext catalog into two catalogs, and add the pg_stats_ext view of it",
      "description": "Split the pg_statistic_ext catalog into two catalogs, and add the pg_stats_ext view of it (Dean Rasheed, Tomas Vondra)\n          This change supports hiding potentially-sensitive statistics data from unprivileged users.",
      "sinceVersion": "12.0",
      "contributor": "Dean Rasheed, Tomas Vondra"
    },
    {
      "title": "Remove obsolete pg_constraint.consrc column",
      "description": "Remove obsolete pg_constraint.consrc column (Peter Eisentraut)\n          This column has been deprecated for a long time, because it did not update in response to other catalog changes (such as column renamings). The recommended way to get a text version of a check constraint's expression from pg_constraint is `pg_get_expr(conbin, conrelid)`. `pg_get_constraintdef()()` is also a useful alternative.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Remove obsolete pg_attrdef.adsrc column",
      "description": "Remove obsolete pg_attrdef.adsrc column (Peter Eisentraut)\n          This column has been deprecated for a long time, because it did not update in response to other catalog changes (such as column renamings). The recommended way to get a text version of a default-value expression from pg_attrdef is `pg_get_expr(adbin, adrelid)`.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Mark table columns of type name as having “C” collation by default",
      "description": "Mark table columns of type name as having “C” collation by default (Tom Lane, Daniel Vérité)\n          The comparison operators for data type name can now use any collation, rather than always using “C” collation. To preserve the previous semantics of queries, columns of type name are now explicitly marked as having “C” collation. A side effect of this is that regular-expression operators on name columns will now use the “C” collation by default, not the database collation, to determine the behavior of locale-dependent regular expression patterns (such as `\\w`). If you want non-C behavior for a regular expression on a name column, attach an explicit `COLLATE` clause. (For user-defined name columns, another possibility is to specify a different collation at table creation time; but that just moves the non-backwards-compatibility to the comparison operators.)",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane, Daniel Vérité"
    },
    {
      "title": "Remove the ability to disable dynamic shared memory",
      "description": "Remove the ability to disable dynamic shared memory (Kyotaro Horiguchi)\n          Specifically, dynamic_shared_memory_type can no longer be set to `none`.",
      "sinceVersion": "12.0",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Parse libpq integer connection parameters more strictly",
      "description": "Parse libpq integer connection parameters more strictly (Fabien Coelho)\n          In previous releases, using an incorrect integer value for connection parameters `connect_timeout`, `keepalives`, `keepalives_count`, `keepalives_idle`, `keepalives_interval` and `port` resulted in libpq either ignoring those values or failing with incorrect error messages.",
      "sinceVersion": "12.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Allow foreign keys to reference partitioned tables",
      "description": "Allow foreign keys to reference partitioned tables (Álvaro Herrera)",
      "sinceVersion": "12.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Allow partition bounds to be any expression",
      "description": "Allow partition bounds to be any expression (Kyotaro Horiguchi, Tom Lane, Amit Langote)\n              Such expressions are evaluated at partitioned-table creation time. Previously, only simple constants were allowed as partition bounds.",
      "sinceVersion": "12.0",
      "contributor": "Kyotaro Horiguchi, Tom Lane, Amit Langote"
    },
    {
      "title": "Allow CREATE TABLE's tablespace specification for a partitioned table to affect the tablespace of its children",
      "description": "Allow CREATE TABLE's tablespace specification for a partitioned table to affect the tablespace of its children (David Rowley, Álvaro Herrera)",
      "sinceVersion": "12.0",
      "contributor": "David Rowley, Álvaro Herrera"
    },
    {
      "title": "Avoid sorting when partitions are already being scanned in the necessary order",
      "description": "Avoid sorting when partitions are already being scanned in the necessary order (David Rowley)",
      "sinceVersion": "12.0",
      "contributor": "David Rowley"
    },
    {
      "title": "ALTER TABLE ATTACH PARTITION is now performed with reduced locking requirements",
      "description": "ALTER TABLE ATTACH PARTITION is now performed with reduced locking requirements (Robert Haas)",
      "sinceVersion": "12.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Add partition introspection functions",
      "description": "Add partition introspection functions (Michaël Paquier, Álvaro Herrera, Amit Langote)\n              The new function `pg_partition_root()()` returns the top-most parent of a partition tree, `pg_partition_ancestors()()` reports all ancestors of a partition, and `pg_partition_tree()()` displays information about partitions.",
      "sinceVersion": "12.0",
      "contributor": "Michaël Paquier, Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Include partitioned indexes in the system view pg_indexes",
      "description": "Include partitioned indexes in the system view pg_indexes (Suraj Kharage)",
      "sinceVersion": "12.0",
      "contributor": "Suraj Kharage"
    },
    {
      "title": "Add psql command \\dP to list partitioned tables and indexes",
      "description": "Add psql command \\dP to list partitioned tables and indexes (Pavel Stehule)",
      "sinceVersion": "12.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Improve psql \\d and \\z display of partitioned tables",
      "description": "Improve psql \\d and \\z display of partitioned tables (Pavel Stehule, Michaël Paquier, Álvaro Herrera)",
      "sinceVersion": "12.0",
      "contributor": "Pavel Stehule, Michaël Paquier, Álvaro Herrera"
    },
    {
      "title": "Fix bugs that could cause ALTER TABLE DETACH PARTITION to leave behind incorrect dependency state, allowing subsequent operations to misbehave, for example by not dropping a former partition child index when its table is dropped",
      "description": "Fix bugs that could cause ALTER TABLE DETACH PARTITION to leave behind incorrect dependency state, allowing subsequent operations to misbehave, for example by not dropping a former partition child index when its table is dropped (Tom Lane)",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow multi-column btree indexes to be smaller",
      "description": "Allow multi-column btree indexes to be smaller (Peter Geoghegan, Heikki Linnakangas)\n              Internal pages and min/max leaf page indicators now only store index keys until the change key, rather than all indexed keys. This also improves the locality of index access.\n              Indexes pg_upgrade'd from previous releases will not have these benefits.",
      "sinceVersion": "12.0",
      "contributor": "Peter Geoghegan, Heikki Linnakangas"
    },
    {
      "title": "Support `INCLUDE` columns in GiST indexes",
      "description": "Support `INCLUDE` columns in GiST indexes (Andrey Borodin)",
      "sinceVersion": "12.0",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Add support for nearest-neighbor",
      "description": "Add support for nearest-neighbor (KNN) searches of SP-GiST indexes (Nikita Glukhov, Alexander Korotkov, Vlad Sterzhanov)",
      "sinceVersion": "12.0",
      "contributor": "Nikita Glukhov, Alexander Korotkov, Vlad Sterzhanov"
    },
    {
      "title": "Reduce the WAL write overhead of GiST, GIN, and SP-GiST index creation",
      "description": "Reduce the WAL write overhead of GiST, GIN, and SP-GiST index creation (Anastasia Lubennikova, Andrey V. Lepikhov)",
      "sinceVersion": "12.0",
      "contributor": "Anastasia Lubennikova, Andrey V. Lepikhov"
    },
    {
      "title": "Allow index-only scans to be more efficient on indexes with many columns",
      "description": "Allow index-only scans to be more efficient on indexes with many columns (Konstantin Knizhnik)",
      "sinceVersion": "12.0",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Delete empty leaf pages during GiST VACUUM",
      "description": "Delete empty leaf pages during GiST VACUUM (Andrey Borodin)",
      "sinceVersion": "12.0",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Reduce locking requirements for index renaming",
      "description": "Reduce locking requirements for index renaming (Peter Eisentraut)",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow common table expressions",
      "description": "Allow common table expressions (CTEs) to be inlined into the outer query (Andreas Karlsson, Andrew Gierth, David Fetter, Tom Lane)\n              Specifically, CTEs are automatically inlined if they have no side-effects, are not recursive, and are referenced only once in the query. Inlining can be prevented by specifying `MATERIALIZED`, or forced for multiply-referenced CTEs by specifying `NOT MATERIALIZED`. Previously, CTEs were never inlined and were always evaluated before the rest of the query.",
      "sinceVersion": "12.0",
      "contributor": "Andreas Karlsson, Andrew Gierth, David Fetter, Tom Lane"
    },
    {
      "title": "Allow control over when generic plans are used for prepared statements",
      "description": "Allow control over when generic plans are used for prepared statements (Pavel Stehule)\n              This is controlled by the plan_cache_mode server parameter.",
      "sinceVersion": "12.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Pre-evaluate calls of `LEAST` and `GREATEST` when their arguments are constants",
      "description": "Pre-evaluate calls of `LEAST` and `GREATEST` when their arguments are constants (Vik Fearing)",
      "sinceVersion": "12.0",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Improve optimizer's ability to verify that partial indexes with `IS NOT NULL` conditions are usable in queries",
      "description": "Improve optimizer's ability to verify that partial indexes with `IS NOT NULL` conditions are usable in queries (Tom Lane, James Coleman)\n              Usability can now be recognized in more cases where the calling query involves casts or large ``x` IN (array`) clauses.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane, James Coleman"
    },
    {
      "title": "Compute ANALYZE statistics using the collation defined for each column",
      "description": "Compute ANALYZE statistics using the collation defined for each column (Tom Lane)\n              Previously, the database's default collation was used for all statistics. This potentially gives better optimizer behavior for columns with non-default collations.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve selectivity estimates for inequality comparisons on ctid columns",
      "description": "Improve selectivity estimates for inequality comparisons on ctid columns (Edmund Horner)",
      "sinceVersion": "12.0",
      "contributor": "Edmund Horner"
    },
    {
      "title": "Enable Just-in-Time",
      "description": "Enable Just-in-Time (JIT) compilation by default, if the server has been built with support for it (Andres Freund)\n              Note that this support is not built by default, but has to be selected explicitly while configuring the build.",
      "sinceVersion": "12.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Allow toasted values to be minimally decompressed",
      "description": "Allow toasted values to be minimally decompressed (Paul Ramsey)\n              This is useful for routines that only need to examine the initial portion of a toasted field.",
      "sinceVersion": "12.0",
      "contributor": "Paul Ramsey"
    },
    {
      "title": "Allow ALTER TABLE ... SET NOT NULL to avoid unnecessary table scans",
      "description": "Allow ALTER TABLE ... SET NOT NULL to avoid unnecessary table scans (Sergei Kornilov)\n              This can be optimized when the table's column constraints can be recognized as disallowing nulls.",
      "sinceVersion": "12.0",
      "contributor": "Sergei Kornilov"
    },
    {
      "title": "Allow ALTER TABLE ... SET DATA TYPE changing between timestamp and timestamptz to avoid a table rewrite when the session time zone is UTC",
      "description": "Allow ALTER TABLE ... SET DATA TYPE changing between timestamp and timestamptz to avoid a table rewrite when the session time zone is UTC (Noah Misch)\n              In the UTC time zone, these two data types are binary compatible.",
      "sinceVersion": "12.0",
      "contributor": "Noah Misch"
    },
    {
      "title": "Allow parallelized queries when in `SERIALIZABLE` isolation mode",
      "description": "Allow parallelized queries when in `SERIALIZABLE` isolation mode (Thomas Munro)\n              Previously, parallelism was disabled when in this mode.",
      "sinceVersion": "12.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Use `pread",
      "description": "Use `pread()()` and `pwrite()()` for random I/O (Oskari Saarenmaa, Thomas Munro)\n              This reduces the number of system calls required for I/O.",
      "sinceVersion": "12.0",
      "contributor": "Oskari Saarenmaa, Thomas Munro"
    },
    {
      "title": "Allow logging of statements from only a percentage of transactions",
      "description": "Allow logging of statements from only a percentage of transactions (Adrien Nayrat)\n              The parameter log_transaction_sample_rate controls this.",
      "sinceVersion": "12.0",
      "contributor": "Adrien Nayrat"
    },
    {
      "title": "Add progress reporting to CREATE INDEX and REINDEX operations",
      "description": "Add progress reporting to CREATE INDEX and REINDEX operations (Álvaro Herrera, Peter Eisentraut)\n              Progress is reported in the pg_stat_progress_create_index system view.",
      "sinceVersion": "12.0",
      "contributor": "Álvaro Herrera, Peter Eisentraut"
    },
    {
      "title": "Add progress reporting to CLUSTER and VACUUM FULL",
      "description": "Add progress reporting to CLUSTER and VACUUM FULL (Tatsuro Yamada)\n              Progress is reported in the pg_stat_progress_cluster system view.",
      "sinceVersion": "12.0",
      "contributor": "Tatsuro Yamada"
    },
    {
      "title": "Add progress reporting to pg_checksums",
      "description": "Add progress reporting to pg_checksums (Michael Banck, Bernd Helmle)\n              This is enabled with the option --progress.",
      "sinceVersion": "12.0",
      "contributor": "Michael Banck, Bernd Helmle"
    },
    {
      "title": "Add counter of checksum failures to pg_stat_database",
      "description": "Add counter of checksum failures to pg_stat_database (Magnus Hagander)",
      "sinceVersion": "12.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Add tracking of global objects in system view pg_stat_database",
      "description": "Add tracking of global objects in system view pg_stat_database (Julien Rouhaud)\n              Global objects are shown with a pg_stat_database.datid value of zero.",
      "sinceVersion": "12.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Add the ability to list the contents of the archive directory",
      "description": "Add the ability to list the contents of the archive directory (Christoph Moench-Tegeder)\n              The function is `pg_ls_archive_statusdir()()`.",
      "sinceVersion": "12.0",
      "contributor": "Christoph Moench-Tegeder"
    },
    {
      "title": "Add the ability to list the contents of temporary directories",
      "description": "Add the ability to list the contents of temporary directories (Nathan Bossart)\n              The function, `pg_ls_tmpdir()()`, optionally allows specification of a tablespace.",
      "sinceVersion": "12.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add information about the client certificate to the system view pg_stat_ssl",
      "description": "Add information about the client certificate to the system view pg_stat_ssl (Peter Eisentraut)\n              The new columns are client_serial and issuer_dn. Column clientdn has been renamed to client_dn for clarity.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Restrict visibility of rows in pg_stat_ssl for unprivileged users",
      "description": "Restrict visibility of rows in pg_stat_ssl for unprivileged users (Peter Eisentraut)",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "At server start, emit a log message including the server version number",
      "description": "At server start, emit a log message including the server version number (Christoph Berg)",
      "sinceVersion": "12.0",
      "contributor": "Christoph Berg"
    },
    {
      "title": "Prevent logging “incomplete startup packet” if a new connection is immediately closed",
      "description": "Prevent logging “incomplete startup packet” if a new connection is immediately closed (Tom Lane)\n              This avoids log spam from certain forms of monitoring.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Include the application_name, if set, in log_connections log messages",
      "description": "Include the application_name, if set, in log_connections log messages (Don Seiler)",
      "sinceVersion": "12.0",
      "contributor": "Don Seiler"
    },
    {
      "title": "Make the walreceiver set its application name to the cluster name, if set",
      "description": "Make the walreceiver set its application name to the cluster name, if set (Peter Eisentraut)",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add the timestamp of the last received standby message to pg_stat_replication",
      "description": "Add the timestamp of the last received standby message to pg_stat_replication (Lim Myungkyu)",
      "sinceVersion": "12.0",
      "contributor": "Lim Myungkyu"
    },
    {
      "title": "Add a wait event for fsync of WAL segments",
      "description": "Add a wait event for fsync of WAL segments (Konstantin Knizhnik)",
      "sinceVersion": "12.0",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Add GSSAPI encryption support",
      "description": "Add GSSAPI encryption support (Robbie Harwood, Stephen Frost)\n              This feature allows TCP/IP connections to be encrypted when using GSSAPI authentication, without having to set up a separate encryption facility such as SSL. In support of this, add `hostgssenc` and `hostnogssenc` record types in pg_hba.conf for selecting connections that do or do not use GSSAPI encryption, corresponding to the existing `hostssl` and `hostnossl` record types. There is also a new gssencmode libpq option, and a pg_stat_gssapi system view.",
      "sinceVersion": "12.0",
      "contributor": "Robbie Harwood, Stephen Frost"
    },
    {
      "title": "Allow the `clientcert` pg_hba.conf option to check that the database user name matches the client certificate's common name",
      "description": "Allow the `clientcert` pg_hba.conf option to check that the database user name matches the client certificate's common name (Julian Markwort, Marius Timmer)\n              This new check is enabled with `clientcert=verify-full`.",
      "sinceVersion": "12.0",
      "contributor": "Julian Markwort, Marius Timmer"
    },
    {
      "title": "Allow discovery of an LDAP server using DNS SRV records",
      "description": "Allow discovery of an LDAP server using DNS SRV records (Thomas Munro)\n              This avoids the requirement of specifying `ldapserver`. It is only supported if PostgreSQL is compiled with OpenLDAP.",
      "sinceVersion": "12.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add ability to enable/disable cluster checksums using pg_checksums",
      "description": "Add ability to enable/disable cluster checksums using pg_checksums (Michael Banck, Michaël Paquier)\n              The cluster must be shut down for these operations.",
      "sinceVersion": "12.0",
      "contributor": "Michael Banck, Michaël Paquier"
    },
    {
      "title": "Allow vacuum_cost_delay to specify sub-millisecond delays, by accepting fractional values",
      "description": "Allow vacuum_cost_delay to specify sub-millisecond delays, by accepting fractional values (Tom Lane)",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow time-based server parameters to use units of microseconds",
      "description": "Allow time-based server parameters to use units of microseconds (`us`) (Tom Lane)",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow fractional input for integer server parameters",
      "description": "Allow fractional input for integer server parameters (Tom Lane)\n              For example, SET work_mem = '30.1GB' is now allowed, even though work_mem is an integer parameter. The value will be rounded to an integer after any required units conversion.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow units to be defined for floating-point server parameters",
      "description": "Allow units to be defined for floating-point server parameters (Tom Lane)",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add wal_recycle and wal_init_zero server parameters to control WAL file recycling",
      "description": "Add wal_recycle and wal_init_zero server parameters to control WAL file recycling (Jerry Jelinek)\n              Avoiding file recycling can be beneficial on copy-on-write file systems like ZFS.",
      "sinceVersion": "12.0",
      "contributor": "Jerry Jelinek"
    },
    {
      "title": "Add server parameter tcp_user_timeout to control the server's TCP timeout",
      "description": "Add server parameter tcp_user_timeout to control the server's TCP timeout (Ryohei Nagaura)",
      "sinceVersion": "12.0",
      "contributor": "Ryohei Nagaura"
    },
    {
      "title": "Allow control of the minimum and maximum SSL protocol versions",
      "description": "Allow control of the minimum and maximum SSL protocol versions (Peter Eisentraut)\n              The server parameters are ssl_min_protocol_version and ssl_max_protocol_version.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add server parameter ssl_library to report the SSL library version used by the server",
      "description": "Add server parameter ssl_library to report the SSL library version used by the server (Peter Eisentraut)",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add server parameter shared_memory_type to control the type of shared memory to use",
      "description": "Add server parameter shared_memory_type to control the type of shared memory to use (Andres Freund)\n              This allows selection of System V shared memory, if desired.",
      "sinceVersion": "12.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Allow some recovery parameters to be changed with reload",
      "description": "Allow some recovery parameters to be changed with reload (Peter Eisentraut)\n            These parameters are archive_cleanup_command, promote_trigger_file, recovery_end_command, and recovery_min_apply_delay.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow the streaming replication timeout",
      "description": "Allow the streaming replication timeout (wal_sender_timeout) to be set per connection (Takayuki Tsunakawa)\n            Previously, this could only be set cluster-wide.",
      "sinceVersion": "12.0",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "Add function `pg_promote",
      "description": "Add function `pg_promote()()` to promote standbys to primaries (Laurenz Albe, Michaël Paquier)\n            Previously, this operation was only possible by using pg_ctl or creating a trigger file.",
      "sinceVersion": "12.0",
      "contributor": "Laurenz Albe, Michaël Paquier"
    },
    {
      "title": "Allow replication slots to be copied",
      "description": "Allow replication slots to be copied (Masahiko Sawada)\n            The functions for this are `pg_copy_physical_replication_slot()()` and `pg_copy_logical_replication_slot()()`.",
      "sinceVersion": "12.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Make max_wal_senders not count as part of max_connections",
      "description": "Make max_wal_senders not count as part of max_connections (Alexander Kukushkin)",
      "sinceVersion": "12.0",
      "contributor": "Alexander Kukushkin"
    },
    {
      "title": "Add an explicit value of `current` for recovery_target_timeline",
      "description": "Add an explicit value of `current` for recovery_target_timeline (Peter Eisentraut)",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Make recovery fail if a two-phase transaction status file is corrupt",
      "description": "Make recovery fail if a two-phase transaction status file is corrupt (Michaël Paquier)\n            Previously, a warning was logged and recovery continued, allowing the transaction to be lost.",
      "sinceVersion": "12.0",
      "contributor": "Michaël Paquier"
    },
    {
      "title": "Add REINDEX `CONCURRENTLY` option to allow reindexing without locking out writes",
      "description": "Add REINDEX `CONCURRENTLY` option to allow reindexing without locking out writes (Michaël Paquier, Andreas Karlsson, Peter Eisentraut)\n            This is also controlled by the reindexdb application's --concurrently option.",
      "sinceVersion": "12.0",
      "contributor": "Michaël Paquier, Andreas Karlsson, Peter Eisentraut"
    },
    {
      "title": "Add support for generated columns",
      "description": "Add support for generated columns (Peter Eisentraut)\n            The content of generated columns are computed from expressions (including references to other columns in the same table) rather than being specified by INSERT or UPDATE commands.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add a `WHERE` clause to COPY FROM to control which rows are accepted",
      "description": "Add a `WHERE` clause to COPY FROM to control which rows are accepted (Surafel Temesgen)\n            This provides a simple way to filter incoming data.",
      "sinceVersion": "12.0",
      "contributor": "Surafel Temesgen"
    },
    {
      "title": "Add commands to end a transaction and start a new one",
      "description": "Add commands to end a transaction and start a new one (Peter Eisentraut)\n            The commands are COMMIT AND CHAIN and ROLLBACK AND CHAIN.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add VACUUM and CREATE TABLE options to prevent VACUUM from truncating trailing empty pages",
      "description": "Add VACUUM and CREATE TABLE options to prevent VACUUM from truncating trailing empty pages (Takayuki Tsunakawa)\n            These options are vacuum_truncate and toast.vacuum_truncate. Use of these options reduces VACUUM's locking requirements, but prevents returning disk space to the operating system.",
      "sinceVersion": "12.0",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "Allow VACUUM to skip index cleanup",
      "description": "Allow VACUUM to skip index cleanup (Masahiko Sawada)\n            This change adds a VACUUM command option `INDEX_CLEANUP` as well as a table storage option `vacuum_index_cleanup`. Use of this option reduces the ability to reclaim space and can lead to index bloat, but it is helpful when the main goal is to freeze old tuples.",
      "sinceVersion": "12.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Add the ability to skip VACUUM and ANALYZE operations on tables that cannot be locked immediately",
      "description": "Add the ability to skip VACUUM and ANALYZE operations on tables that cannot be locked immediately (Nathan Bossart)\n            This option is called `SKIP_LOCKED`.",
      "sinceVersion": "12.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Allow VACUUM and ANALYZE to take optional Boolean argument specifications",
      "description": "Allow VACUUM and ANALYZE to take optional Boolean argument specifications (Masahiko Sawada)",
      "sinceVersion": "12.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Prevent TRUNCATE, VACUUM and ANALYZE from requesting a lock on tables for which the user lacks permission",
      "description": "Prevent TRUNCATE, VACUUM and ANALYZE from requesting a lock on tables for which the user lacks permission (Michaël Paquier)\n            This prevents unauthorized locking, which could interfere with user queries.",
      "sinceVersion": "12.0",
      "contributor": "Michaël Paquier"
    },
    {
      "title": "Add EXPLAIN option `SETTINGS` to output non-default optimizer settings",
      "description": "Add EXPLAIN option `SETTINGS` to output non-default optimizer settings (Tomas Vondra)\n            This output can also be obtained when using auto_explain by setting auto_explain.log_settings.",
      "sinceVersion": "12.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Add `OR REPLACE` option to CREATE AGGREGATE",
      "description": "Add `OR REPLACE` option to CREATE AGGREGATE (Andrew Gierth)",
      "sinceVersion": "12.0",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Allow modifications of system catalogs' options using ALTER TABLE",
      "description": "Allow modifications of system catalogs' options using ALTER TABLE (Peter Eisentraut)\n            Modifications of catalogs' `reloptions` and autovacuum settings are now supported. (Setting allow_system_table_mods is still required.)",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Use all key columns' names when selecting default constraint names for foreign keys",
      "description": "Use all key columns' names when selecting default constraint names for foreign keys (Peter Eisentraut)\n            Previously, only the first column name was included in the constraint name, resulting in ambiguity for multi-column foreign keys.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Update assorted knowledge about Unicode to match Unicode 12.1.0",
      "description": "Update assorted knowledge about Unicode to match Unicode 12.1.0 (Peter Eisentraut)\n            This fixes, for example, cases where psql would misformat output involving combining characters.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Update Snowball stemmer dictionaries with support for new languages",
      "description": "Update Snowball stemmer dictionaries with support for new languages (Arthur Zakirov)\n            This adds word stemming support for Arabic, Indonesian, Irish, Lithuanian, Nepali, and Tamil to full text search.",
      "sinceVersion": "12.0",
      "contributor": "Arthur Zakirov"
    },
    {
      "title": "Allow creation of collations that report string equality for strings that are not bit-wise equal",
      "description": "Allow creation of collations that report string equality for strings that are not bit-wise equal (Peter Eisentraut)\n            This feature supports “nondeterministic” collations that can define case- and accent-agnostic equality comparisons. Thus, for example, a case-insensitive uniqueness constraint on a text column can be made more easily than before. This is only supported for ICU collations.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add support for ICU collation attributes on older ICU versions",
      "description": "Add support for ICU collation attributes on older ICU versions (Peter Eisentraut)\n            This allows customization of the collation rules in a consistent way across all ICU versions.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow data type name to more seamlessly be compared to other text types",
      "description": "Allow data type name to more seamlessly be compared to other text types (Tom Lane)\n            Type name now behaves much like a domain over type text that has default collation “C”. This allows cross-type comparisons to be processed more efficiently.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add support for the SQL/JSON path language",
      "description": "Add support for the SQL/JSON path language (Nikita Glukhov, Teodor Sigaev, Alexander Korotkov, Oleg Bartunov, Liudmila Mantrova)\n            This allows execution of complex queries on JSON values using an SQL-standard language.",
      "sinceVersion": "12.0",
      "contributor": "Nikita Glukhov, Teodor Sigaev, Alexander Korotkov, Oleg Bartunov, Liudmila Mantrova"
    },
    {
      "title": "Add support for hyperbolic functions",
      "description": "Add support for hyperbolic functions (Lætitia Avrot)\n            Also add `log10()()` as an alias for `log()()`, for standards compliance.",
      "sinceVersion": "12.0",
      "contributor": "Lætitia Avrot"
    },
    {
      "title": "Improve the accuracy of statistical aggregates like `variance",
      "description": "Improve the accuracy of statistical aggregates like `variance()()` by using more precise algorithms (Dean Rasheed)",
      "sinceVersion": "12.0",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Adjust `to_timestamp",
      "description": "Adjust `to_timestamp()()`/`to_date()()` functions to be more forgiving of template mismatches (Artur Zakirov, Alexander Korotkov, Liudmila Mantrova)\n            This new behavior more closely matches the Oracle functions of the same name.",
      "sinceVersion": "12.0",
      "contributor": "Artur Zakirov, Alexander Korotkov, Liudmila Mantrova"
    },
    {
      "title": "Fix assorted bugs in XML functions",
      "description": "Fix assorted bugs in XML functions (Pavel Stehule, Markus Winand, Chapman Flack)\n            Specifically, in `XMLTABLE`, `xpath()()`, and `xmlexists()()`, fix some cases where nothing was output for a node, or an unexpected error was thrown, or necessary escaping of XML special characters was omitted.",
      "sinceVersion": "12.0",
      "contributor": "Pavel Stehule, Markus Winand, Chapman Flack"
    },
    {
      "title": "Allow the `BY VALUE` clause in `XMLEXISTS",
      "description": "Allow the `BY VALUE` clause in `XMLEXISTS()` and `XMLTABLE()` (Chapman Flack)\n            This SQL-standard clause has no effect in PostgreSQL's implementation, but it was unnecessarily being rejected.",
      "sinceVersion": "12.0",
      "contributor": "Chapman Flack"
    },
    {
      "title": "Prevent `current_schema",
      "description": "Prevent `current_schema()()` and `current_schemas()()` from being run by parallel workers, as they are not parallel-safe (Michaël Paquier)",
      "sinceVersion": "12.0",
      "contributor": "Michaël Paquier"
    },
    {
      "title": "Allow RECORD and RECORD[] to be used as column types in a query's column definition list for a table function that is declared to return RECORD",
      "description": "Allow RECORD and RECORD[] to be used as column types in a query's column definition list for a table function that is declared to return RECORD (Elvis Pranskevichus)",
      "sinceVersion": "12.0",
      "contributor": "Elvis Pranskevichus"
    },
    {
      "title": "Allow SQL commands and variables with the same names as those commands to be used in the same PL/pgSQL function",
      "description": "Allow SQL commands and variables with the same names as those commands to be used in the same PL/pgSQL function (Tom Lane)\n            For example, allow a variable called comment to exist in a function that calls the COMMENT SQL command. Previously this combination caused a parse error.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add new optional warning and error checks to PL/pgSQL",
      "description": "Add new optional warning and error checks to PL/pgSQL (Pavel Stehule)\n            The new checks allow for run-time validation of `INTO` column counts and single-row results.",
      "sinceVersion": "12.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Add connection parameter tcp_user_timeout to control libpq's TCP timeout",
      "description": "Add connection parameter tcp_user_timeout to control libpq's TCP timeout (Ryohei Nagaura)",
      "sinceVersion": "12.0",
      "contributor": "Ryohei Nagaura"
    },
    {
      "title": "Allow libpq",
      "description": "Allow libpq (and thus psql) to report only the `SQLSTATE` value in error messages (Didier Gautheron)",
      "sinceVersion": "12.0",
      "contributor": "Didier Gautheron"
    },
    {
      "title": "Add libpq function `PQresultMemorySize",
      "description": "Add libpq function `PQresultMemorySize()()` to report the memory used by a query result (Lars Kanis, Tom Lane)",
      "sinceVersion": "12.0",
      "contributor": "Lars Kanis, Tom Lane"
    },
    {
      "title": "Remove the no-display/debug flag from libpq's `options` connection parameter",
      "description": "Remove the no-display/debug flag from libpq's `options` connection parameter (Peter Eisentraut)\n            This allows this parameter to be set by postgres_fdw.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow ecpg to create variables of data type bytea",
      "description": "Allow ecpg to create variables of data type bytea (Ryo Matsumura)\n            This allows ECPG clients to interact with bytea data directly, rather than using an encoded form.",
      "sinceVersion": "12.0",
      "contributor": "Ryo Matsumura"
    },
    {
      "title": "Add PREPARE AS support to ECPG",
      "description": "Add PREPARE AS support to ECPG (Ryo Matsumura)",
      "sinceVersion": "12.0",
      "contributor": "Ryo Matsumura"
    },
    {
      "title": "Allow vacuumdb to select tables for vacuum based on their wraparound horizon",
      "description": "Allow vacuumdb to select tables for vacuum based on their wraparound horizon (Nathan Bossart)\n            The options are --min-xid-age and --min-mxid-age.",
      "sinceVersion": "12.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Allow vacuumdb to disable waiting for locks or skipping all-visible pages",
      "description": "Allow vacuumdb to disable waiting for locks or skipping all-visible pages (Nathan Bossart)\n            The options are --skip-locked and --disable-page-skipping.",
      "sinceVersion": "12.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add colorization to the output of command-line utilities",
      "description": "Add colorization to the output of command-line utilities (Peter Eisentraut)\n            This is enabled by setting the environment variable PG_COLOR to `always` or `auto`. The specific colors used can be adjusted by setting the environment variable PG_COLORS, using ANSI escape codes for colors. For example, the default behavior is equivalent to `PG_COLORS=\"error=01;31:warning=01;35:locus=01\"`.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add CSV table output mode in psql",
      "description": "Add CSV table output mode in psql (Daniel Vérité)\n              This is controlled by \\pset format csv or the command-line --csv option.",
      "sinceVersion": "12.0",
      "contributor": "Daniel Vérité"
    },
    {
      "title": "Show the manual page URL in psql's \\help output for a SQL command",
      "description": "Show the manual page URL in psql's \\help output for a SQL command (Peter Eisentraut)",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Display the IP address in psql's \\conninfo",
      "description": "Display the IP address in psql's \\conninfo (Fabien Coelho)",
      "sinceVersion": "12.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Improve tab completion of CREATE TABLE, CREATE TRIGGER, CREATE EVENT TRIGGER, ANALYZE, EXPLAIN, VACUUM, ALTER TABLE, ALTER INDEX, ALTER DATABASE, and ALTER INDEX ALTER COLUMN",
      "description": "Improve tab completion of CREATE TABLE, CREATE TRIGGER, CREATE EVENT TRIGGER, ANALYZE, EXPLAIN, VACUUM, ALTER TABLE, ALTER INDEX, ALTER DATABASE, and ALTER INDEX ALTER COLUMN (Dagfinn Ilmari Mannsåker, Tatsuro Yamada, Michaël Paquier, Tom Lane, Justin Pryzby)",
      "sinceVersion": "12.0",
      "contributor": "Dagfinn Ilmari Mannsåker, Tatsuro Yamada, Michaël Paquier, Tom Lane, Justin Pryzby"
    },
    {
      "title": "Allow values produced by queries to be assigned to pgbench variables",
      "description": "Allow values produced by queries to be assigned to pgbench variables (Fabien Coelho, Álvaro Herrera)\n              The command for this is \\gset.",
      "sinceVersion": "12.0",
      "contributor": "Fabien Coelho, Álvaro Herrera"
    },
    {
      "title": "Improve precision of pgbench's --rate option",
      "description": "Improve precision of pgbench's --rate option (Tom Lane)",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve pgbench's error reporting with clearer messages and return codes",
      "description": "Improve pgbench's error reporting with clearer messages and return codes (Peter Eisentraut)",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow control of log file rotation via pg_ctl",
      "description": "Allow control of log file rotation via pg_ctl (Kyotaro Horiguchi, Alexander Kuzmenkov, Alexander Korotkov)\n            Previously, this was only possible via an SQL function or a process signal.",
      "sinceVersion": "12.0",
      "contributor": "Kyotaro Horiguchi, Alexander Kuzmenkov, Alexander Korotkov"
    },
    {
      "title": "Properly detach the new server process during `pg_ctl start`",
      "description": "Properly detach the new server process during `pg_ctl start` (Paul Guo)\n            This prevents the server from being shut down if the shell script that invoked pg_ctl is interrupted later.",
      "sinceVersion": "12.0",
      "contributor": "Paul Guo"
    },
    {
      "title": "Allow pg_upgrade to use the file system's cloning feature, if there is one",
      "description": "Allow pg_upgrade to use the file system's cloning feature, if there is one (Peter Eisentraut)\n            The --clone option has the advantages of --link, while preventing the old cluster from being changed after the new cluster has started.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow specification of the socket directory to use in pg_upgrade",
      "description": "Allow specification of the socket directory to use in pg_upgrade (Daniel Gustafsson)\n            This is controlled by --socketdir; the default is the current directory.",
      "sinceVersion": "12.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Allow pg_checksums to disable fsync operations",
      "description": "Allow pg_checksums to disable fsync operations (Michaël Paquier)\n            This is controlled by the --no-sync option.",
      "sinceVersion": "12.0",
      "contributor": "Michaël Paquier"
    },
    {
      "title": "Allow pg_rewind to disable fsync operations",
      "description": "Allow pg_rewind to disable fsync operations (Michaël Paquier)",
      "sinceVersion": "12.0",
      "contributor": "Michaël Paquier"
    },
    {
      "title": "Fix pg_test_fsync to report accurate `open_datasync` durations on Windows",
      "description": "Fix pg_test_fsync to report accurate `open_datasync` durations on Windows (Laurenz Albe)",
      "sinceVersion": "12.0",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "When pg_dump emits data with INSERT commands rather than COPY, allow more than one data row to be included in each INSERT",
      "description": "When pg_dump emits data with INSERT commands rather than COPY, allow more than one data row to be included in each INSERT (Surafel Temesgen, David Rowley)\n              The option controlling this is --rows-per-insert.",
      "sinceVersion": "12.0",
      "contributor": "Surafel Temesgen, David Rowley"
    },
    {
      "title": "Allow pg_dump to emit INSERT ... ON CONFLICT DO NOTHING",
      "description": "Allow pg_dump to emit INSERT ... ON CONFLICT DO NOTHING (Surafel Temesgen)\n              This avoids conflict failures during restore. The option is --on-conflict-do-nothing.",
      "sinceVersion": "12.0",
      "contributor": "Surafel Temesgen"
    },
    {
      "title": "Decouple the order of operations in a parallel pg_dump from the order used by a subsequent parallel pg_restore",
      "description": "Decouple the order of operations in a parallel pg_dump from the order used by a subsequent parallel pg_restore (Tom Lane)\n              This allows pg_restore to perform more-fully-parallelized parallel restores, especially in cases where the original dump was not done in parallel. Scheduling of a parallel pg_dump is also somewhat improved.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow the extra_float_digits setting to be specified for pg_dump and pg_dumpall",
      "description": "Allow the extra_float_digits setting to be specified for pg_dump and pg_dumpall (Andrew Dunstan)\n              This is primarily useful for making dumps that are exactly comparable across different source server versions. It is not recommended for normal use, as it may result in loss of precision when the dump is restored.",
      "sinceVersion": "12.0",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Add --exclude-database option to pg_dumpall",
      "description": "Add --exclude-database option to pg_dumpall (Andrew Dunstan)",
      "sinceVersion": "12.0",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Add CREATE ACCESS METHOD command to create new table types",
      "description": "Add CREATE ACCESS METHOD command to create new table types (Andres Freund, Haribabu Kommi, Álvaro Herrera, Alexander Korotkov, Dmitry Dolgov)\n            This enables the development of new table access methods, which can optimize storage for different use cases. The existing `heap` access method remains the default.",
      "sinceVersion": "12.0",
      "contributor": "Andres Freund, Haribabu Kommi, Álvaro Herrera, Alexander Korotkov, Dmitry Dolgov"
    },
    {
      "title": "Simplify renumbering manually-assigned OIDs, and establish a new project policy for management of such OIDs",
      "description": "Simplify renumbering manually-assigned OIDs, and establish a new project policy for management of such OIDs (John Naylor, Tom Lane)\n            Patches that manually assign OIDs for new built-in objects (such as new functions) should now randomly choose OIDs in the range 8000—9999. At the end of a development cycle, the OIDs used by committed patches will be renumbered down to lower numbers, currently somewhere in the 4`xxx` range, using the new renumber_oids.pl script. This approach should greatly reduce the odds of OID collisions between different in-process patches.\n            While there is no specific policy reserving any OIDs for external use, it is recommended that forks and other projects needing private manually-assigned OIDs use numbers in the high 7`xxx` range. This will avoid conflicts with recently-merged patches, and it should be a long time before the core project reaches that range.",
      "sinceVersion": "12.0",
      "contributor": "John Naylor, Tom Lane"
    },
    {
      "title": "Build Cygwin binaries using dynamic instead of static libraries",
      "description": "Build Cygwin binaries using dynamic instead of static libraries (Marco Atzeri)",
      "sinceVersion": "12.0",
      "contributor": "Marco Atzeri"
    },
    {
      "title": "Remove configure switch --disable-strong-random",
      "description": "Remove configure switch --disable-strong-random (Michaël Paquier)\n            A strong random-number source is now required.",
      "sinceVersion": "12.0",
      "contributor": "Michaël Paquier"
    },
    {
      "title": "`printf",
      "description": "`printf()`-family functions, as well as `strerror()` and `strerror_r()`, now behave uniformly across platforms within Postgres code (Tom Lane)\n            Notably, `printf()` understands `%m` everywhere; on Windows, `strerror()` copes with Winsock error codes (it used to do so in backend but not frontend code); and `strerror_r()` always follows the GNU return convention.",
      "sinceVersion": "12.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Require a C99-compliant compiler, and MSVC 2013 or later on Windows",
      "description": "Require a C99-compliant compiler, and MSVC 2013 or later on Windows (Andres Freund)",
      "sinceVersion": "12.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Use pandoc, not lynx, for generating plain-text documentation output files",
      "description": "Use pandoc, not lynx, for generating plain-text documentation output files (Peter Eisentraut)\n            This affects only the INSTALL file generated during `make dist` and the seldom-used plain-text postgres.txt output file. Pandoc produces better output than lynx and avoids some locale/encoding issues. Pandoc version 1.13 or later is required.",
      "sinceVersion": "12.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Support use of images in the PostgreSQL documentation",
      "description": "Support use of images in the PostgreSQL documentation (Jürgen Purtz)",
      "sinceVersion": "12.0",
      "contributor": "Jürgen Purtz"
    },
    {
      "title": "Allow `ORDER BY` sorts and `LIMIT` clauses to be pushed to postgres_fdw foreign servers in more cases",
      "description": "Allow `ORDER BY` sorts and `LIMIT` clauses to be pushed to postgres_fdw foreign servers in more cases (Etsuro Fujita)",
      "sinceVersion": "12.0",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Improve optimizer cost accounting for postgres_fdw queries",
      "description": "Improve optimizer cost accounting for postgres_fdw queries (Etsuro Fujita)",
      "sinceVersion": "12.0",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Properly honor `WITH CHECK OPTION` on views that reference postgres_fdw tables",
      "description": "Properly honor `WITH CHECK OPTION` on views that reference postgres_fdw tables (Etsuro Fujita)\n            While `CHECK OPTION`s on postgres_fdw tables are ignored (because the reference is foreign), views on such tables are considered local, so this change enforces `CHECK OPTION`s on them. Previously, only INSERTs and UPDATEs with `RETURNING` clauses that returned `CHECK OPTION` values were validated.",
      "sinceVersion": "12.0",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Allow `pg_stat_statements_reset",
      "description": "Allow `pg_stat_statements_reset()()` to be more granular (Haribabu Kommi, Amit Kapila)\n            The function now allows reset of statistics for specific databases, users, and queries.",
      "sinceVersion": "12.0",
      "contributor": "Haribabu Kommi, Amit Kapila"
    },
    {
      "title": "Allow control of the auto_explain log level",
      "description": "Allow control of the auto_explain log level (Tom Dunstan, Andrew Dunstan)\n            The default is `LOG`.",
      "sinceVersion": "12.0",
      "contributor": "Tom Dunstan, Andrew Dunstan"
    },
    {
      "title": "Update unaccent rules with new punctuation and symbols",
      "description": "Update unaccent rules with new punctuation and symbols (Hugh Ranalli, Michaël Paquier)",
      "sinceVersion": "12.0",
      "contributor": "Hugh Ranalli, Michaël Paquier"
    },
    {
      "title": "Allow unaccent to handle some accents encoded as combining characters",
      "description": "Allow unaccent to handle some accents encoded as combining characters (Hugh Ranalli)",
      "sinceVersion": "12.0",
      "contributor": "Hugh Ranalli"
    },
    {
      "title": "Allow unaccent to remove accents from Greek characters",
      "description": "Allow unaccent to remove accents from Greek characters (Tasos Maschalidis)",
      "sinceVersion": "12.0",
      "contributor": "Tasos Maschalidis"
    },
    {
      "title": "Add a parameter to amcheck's `bt_index_parent_check",
      "description": "Add a parameter to amcheck's `bt_index_parent_check()()` function to check each index tuple from the root of the tree (Peter Geoghegan)",
      "sinceVersion": "12.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Improve oid2name and vacuumlo option handling to match other commands",
      "description": "Improve oid2name and vacuumlo option handling to match other commands (Tatsuro Yamada)",
      "sinceVersion": "12.0",
      "contributor": "Tatsuro Yamada"
    },
    {
      "title": "Fix crash when ALTER TABLE adds a column without a default value along with making other changes that require a table rewrite",
      "description": "Fix crash when ALTER TABLE adds a column without a default value along with making other changes that require a table rewrite (Andres Freund)",
      "sinceVersion": "12.1",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix lock handling in REINDEX CONCURRENTLY",
      "description": "Fix lock handling in REINDEX CONCURRENTLY (Michael Paquier)\n          REINDEX CONCURRENTLY neglected to take a session-level lock on the new index version, potentially allowing other sessions to manipulate it too soon. Also, a query-cancel or session-termination interrupt arriving at the wrong time could result in failure to release the session-level locks that REINDEX CONCURRENTLY does hold.",
      "sinceVersion": "12.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid crash due to race condition when reporting the progress of a CREATE INDEX CONCURRENTLY or REINDEX CONCURRENTLY command",
      "description": "Avoid crash due to race condition when reporting the progress of a CREATE INDEX CONCURRENTLY or REINDEX CONCURRENTLY command (Álvaro Herrera)",
      "sinceVersion": "12.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid creating duplicate dependency entries during REINDEX CONCURRENTLY",
      "description": "Avoid creating duplicate dependency entries during REINDEX CONCURRENTLY (Michael Paquier)\n          This bug resulted in bloat in pg_depend, but no worse consequences than that.",
      "sinceVersion": "12.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Prevent VACUUM from trying to freeze an old multixact ID involving a still-running transaction",
      "description": "Prevent VACUUM from trying to freeze an old multixact ID involving a still-running transaction (Nathan Bossart, Jeremy Schneider)\n          This case would lead to VACUUM failing until the old transaction terminates.",
      "sinceVersion": "12.1",
      "contributor": "Nathan Bossart, Jeremy Schneider"
    },
    {
      "title": "Fix “wrong type of slot” error when trying to CLUSTER on an expression index",
      "description": "Fix “wrong type of slot” error when trying to CLUSTER on an expression index (Andres Freund)",
      "sinceVersion": "12.1",
      "contributor": "Andres Freund"
    },
    {
      "title": "SET CONSTRAINTS ... DEFERRED failed on partitioned tables, incorrectly complaining about lack of triggers",
      "description": "SET CONSTRAINTS ... DEFERRED failed on partitioned tables, incorrectly complaining about lack of triggers (Álvaro Herrera)",
      "sinceVersion": "12.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix failure when creating indexes for a partition, if the parent partitioned table contains any dropped columns",
      "description": "Fix failure when creating indexes for a partition, if the parent partitioned table contains any dropped columns (Michael Paquier)",
      "sinceVersion": "12.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix dropping of indexed columns in partitioned tables",
      "description": "Fix dropping of indexed columns in partitioned tables (Amit Langote, Michael Paquier)\n          Previously this might fail with an error message complaining about the dependencies of the indexes. It should automatically drop the indexes, instead.",
      "sinceVersion": "12.1",
      "contributor": "Amit Langote, Michael Paquier"
    },
    {
      "title": "Ensure that a partition index can be dropped after a failure to reindex it concurrently",
      "description": "Ensure that a partition index can be dropped after a failure to reindex it concurrently (Michael Paquier)\n          The index's pg_class.relispartition flag was left in the wrong state in such a case, causing DROP INDEX to fail.",
      "sinceVersion": "12.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix handling of equivalence class members for partition-wise joins",
      "description": "Fix handling of equivalence class members for partition-wise joins (Amit Langote)\n          This oversight could lead either to failure to use a feasible partition-wise join plan, or to a “could not find pathkey item to sort” planner failure.",
      "sinceVersion": "12.1",
      "contributor": "Amit Langote"
    },
    {
      "title": "Ensure that offset expressions in `WINDOW` clauses are processed when a query's expressions are manipulated",
      "description": "Ensure that offset expressions in `WINDOW` clauses are processed when a query's expressions are manipulated (Andrew Gierth)\n          This oversight could result in assorted failures when the offsets are nontrivial expressions. One example is that a function parameter reference in such an expression would fail if the function was inlined.",
      "sinceVersion": "12.1",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Avoid postmaster failure if a parallel query requests a background worker when no postmaster child process array slots remain free",
      "description": "Avoid postmaster failure if a parallel query requests a background worker when no postmaster child process array slots remain free (Tom Lane)",
      "sinceVersion": "12.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash triggered by an EvalPlanQual recheck on a table with a `BEFORE UPDATE` trigger",
      "description": "Fix crash triggered by an EvalPlanQual recheck on a table with a `BEFORE UPDATE` trigger (Andres Freund)",
      "sinceVersion": "12.1",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix “unexpected relkind” error when a query tries to access a TOAST table",
      "description": "Fix “unexpected relkind” error when a query tries to access a TOAST table (John Hsu, Michael Paquier, Tom Lane)\n          The error should say that permission is denied, but this case got broken during code refactoring.",
      "sinceVersion": "12.1",
      "contributor": "John Hsu, Michael Paquier, Tom Lane"
    },
    {
      "title": "Provide a relevant error context line when an error occurs while setting GUC parameters during parallel worker startup",
      "description": "Provide a relevant error context line when an error occurs while setting GUC parameters during parallel worker startup (Thomas Munro)",
      "sinceVersion": "12.1",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Ensure that `fsync",
      "description": "Ensure that `fsync()()` is applied only to files that are opened read/write (Andres Freund, Michael Paquier)\n          Some code paths tried to do this after opening a file read-only, but on some platforms that causes “bad file descriptor” or similar errors.",
      "sinceVersion": "12.1",
      "contributor": "Andres Freund, Michael Paquier"
    },
    {
      "title": "Allow encoding conversion to succeed on longer strings than before",
      "description": "Allow encoding conversion to succeed on longer strings than before (Álvaro Herrera, Tom Lane)\n          Previously, there was a hard limit of 0.25GB on the input string, but now it will work as long as the converted output is not over 1GB.",
      "sinceVersion": "12.1",
      "contributor": "Álvaro Herrera, Tom Lane"
    },
    {
      "title": "Avoid creating unnecessarily-bulky tuple stores for window functions",
      "description": "Avoid creating unnecessarily-bulky tuple stores for window functions (Andrew Gierth)\n          In some cases the tuple storage would include all columns of the source table(s), not just the ones that are needed by the query.",
      "sinceVersion": "12.1",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Allow `repalloc",
      "description": "Allow `repalloc()()` to give back space when a large chunk is reduced in size (Tom Lane)",
      "sinceVersion": "12.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that temporary WAL and history files are removed at the end of archive recovery",
      "description": "Ensure that temporary WAL and history files are removed at the end of archive recovery (Sawada Masahiko)",
      "sinceVersion": "12.1",
      "contributor": "Sawada Masahiko"
    },
    {
      "title": "Avoid failure in archive recovery if recovery_min_apply_delay is enabled",
      "description": "Avoid failure in archive recovery if recovery_min_apply_delay is enabled (Fujii Masao)\n          recovery_min_apply_delay is not typically used in this configuration, but it should work.",
      "sinceVersion": "12.1",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Ignore restore_command, recovery_end_command, and recovery_min_apply_delay settings during crash recovery",
      "description": "Ignore restore_command, recovery_end_command, and recovery_min_apply_delay settings during crash recovery (Fujii Masao)\n          Now that these settings can be specified in postgresql.conf, they could be turned on during crash recovery, but honoring them then is undesirable. Ignore these settings until crash recovery is complete.",
      "sinceVersion": "12.1",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix logical replication failure when publisher and subscriber have different ideas about a table's replica identity columns",
      "description": "Fix logical replication failure when publisher and subscriber have different ideas about a table's replica identity columns (Jehan-Guillaume de Rorthais, Peter Eisentraut)\n          Declaring a column as part of the replica identity on the subscriber, when it does not exist at all on the publisher, led to “negative bitmapset member not allowed” errors.",
      "sinceVersion": "12.1",
      "contributor": "Jehan-Guillaume de Rorthais, Peter Eisentraut"
    },
    {
      "title": "Avoid unwanted delay during shutdown of a logical replication walsender",
      "description": "Avoid unwanted delay during shutdown of a logical replication walsender (Craig Ringer, Álvaro Herrera)",
      "sinceVersion": "12.1",
      "contributor": "Craig Ringer, Álvaro Herrera"
    },
    {
      "title": "Fix timeout handling in logical replication walreceiver processes",
      "description": "Fix timeout handling in logical replication walreceiver processes (Julien Rouhaud)\n          Erroneous logic prevented wal_receiver_timeout from working in logical replication deployments.",
      "sinceVersion": "12.1",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Correctly time-stamp replication messages for logical decoding",
      "description": "Correctly time-stamp replication messages for logical decoding (Jeff Janes)\n          This oversight resulted, for example, in pg_stat_subscription.last_msg_send_time usually reading as NULL.",
      "sinceVersion": "12.1",
      "contributor": "Jeff Janes"
    },
    {
      "title": "Fix race condition during backend exit, when the backend process has previously waited for synchronous replication to occur",
      "description": "Fix race condition during backend exit, when the backend process has previously waited for synchronous replication to occur (Dongming Liu)",
      "sinceVersion": "12.1",
      "contributor": "Dongming Liu"
    },
    {
      "title": "Avoid logging complaints about abandoned connections when using PAM authentication",
      "description": "Avoid logging complaints about abandoned connections when using PAM authentication (Tom Lane)\n          libpq-based clients will typically make two connection attempts when a password is required, since they don't prompt their user for a password until their first connection attempt fails. Therefore the server is coded not to generate useless log spam when a client closes the connection upon being asked for a password. However, the PAM authentication code hadn't gotten that memo, and would generate several messages about a phantom authentication failure.",
      "sinceVersion": "12.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior of `bitshiftright",
      "description": "Fix misbehavior of `bitshiftright()()` (Tom Lane)\n          The bitstring right shift operator failed to zero out padding space that exists in the last byte of the result when the bitstring length is not a multiple of 8. While invisible to most operations, any nonzero bits there would result in unexpected comparison behavior, since bitstring comparisons don't bother to ignore the extra bits, expecting them to always be zero.\n          If you have inconsistent data as a result of saving the output of `bitshiftright()()` in a table, it's possible to fix it with something like\n          UPDATE mytab SET bitcol = ~(~bitcol) WHERE bitcol != ~(~bitcol);\n",
      "sinceVersion": "12.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix result of text `position",
      "description": "Fix result of text `position()()` function (also known as `strpos()()`) for an empty search string (Tom Lane)\n          Historically, and per the SQL standard, the result should be one in such cases, but 12.0 returned zero.",
      "sinceVersion": "12.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix detection of edge-case integer overflow in interval multiplication",
      "description": "Fix detection of edge-case integer overflow in interval multiplication (Yuya Watari)",
      "sinceVersion": "12.1",
      "contributor": "Yuya Watari"
    },
    {
      "title": "Avoid crashes if `ispell` text search dictionaries contain wrong affix data",
      "description": "Avoid crashes if `ispell` text search dictionaries contain wrong affix data (Arthur Zakirov)",
      "sinceVersion": "12.1",
      "contributor": "Arthur Zakirov"
    },
    {
      "title": "Avoid memory leak while vacuuming a GiST index",
      "description": "Avoid memory leak while vacuuming a GiST index (Dilip Kumar)",
      "sinceVersion": "12.1",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "On Windows, recognize additional spellings of the “Norwegian",
      "description": "On Windows, recognize additional spellings of the “Norwegian (Bokmål)” locale name (Tom Lane)",
      "sinceVersion": "12.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix libpq to allow trailing whitespace in the string values of integer parameters",
      "description": "Fix libpq to allow trailing whitespace in the string values of integer parameters (Michael Paquier)\n          Version 12 tightened libpq's validation of integer parameters, but disallowing trailing whitespace seems undesirable.",
      "sinceVersion": "12.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In libpq, correctly report `CONNECTION_BAD` connection status after a failure caused by a syntactically invalid connect_timeout parameter value",
      "description": "In libpq, correctly report `CONNECTION_BAD` connection status after a failure caused by a syntactically invalid connect_timeout parameter value (Lars Kanis)",
      "sinceVersion": "12.1",
      "contributor": "Lars Kanis"
    },
    {
      "title": "Avoid compile failure if an ECPG client includes ecpglib.h while having `ENABLE_NLS` defined",
      "description": "Avoid compile failure if an ECPG client includes ecpglib.h while having `ENABLE_NLS` defined (Tom Lane)\n          This risk was created by a misplaced declaration: `ecpg_gettext()()` should not be visible to client code.",
      "sinceVersion": "12.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix scheduling of parallel restore of a foreign key constraint on a partitioned table",
      "description": "Fix scheduling of parallel restore of a foreign key constraint on a partitioned table (Álvaro Herrera)\n          pg_dump failed to emit full dependency information for partitioned tables' foreign keys. This could allow parallel pg_restore to try to recreate a foreign key constraint too soon.",
      "sinceVersion": "12.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "In pg_upgrade, reject tables with columns of type sql_identifier, as that has changed representation in version 12",
      "description": "In pg_upgrade, reject tables with columns of type sql_identifier, as that has changed representation in version 12 (Tomas Vondra)",
      "sinceVersion": "12.1",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Improve pg_upgrade's checks for the use of a data type that has changed representation, such as line",
      "description": "Improve pg_upgrade's checks for the use of a data type that has changed representation, such as line (Tomas Vondra)\n          The previous coding could be fooled by cases where the data type of interest underlies a stored column of a domain or composite type.",
      "sinceVersion": "12.1",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "In pg_rewind with the --dry-run option, avoid updating pg_control",
      "description": "In pg_rewind with the --dry-run option, avoid updating pg_control (Alexey Kondratov)\n          This could lead to failures in subsequent pg_rewind attempts.",
      "sinceVersion": "12.1",
      "contributor": "Alexey Kondratov"
    },
    {
      "title": "Fix failure in pg_waldump with the -s option, when a continuation WAL record ends exactly at a page boundary",
      "description": "Fix failure in pg_waldump with the -s option, when a continuation WAL record ends exactly at a page boundary (Andrey Lepikhov)",
      "sinceVersion": "12.1",
      "contributor": "Andrey Lepikhov"
    },
    {
      "title": "In pg_waldump with the --bkp-details option, avoid emitting extra newlines for WAL records involving full-page writes",
      "description": "In pg_waldump with the --bkp-details option, avoid emitting extra newlines for WAL records involving full-page writes (Andres Freund)",
      "sinceVersion": "12.1",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix small memory leak in pg_waldump",
      "description": "Fix small memory leak in pg_waldump (Andres Freund)",
      "sinceVersion": "12.1",
      "contributor": "Andres Freund"
    },
    {
      "title": "Put back `pqsignal",
      "description": "Put back `pqsignal()()` as an exported libpq symbol (Tom Lane)\n          This function was removed on the grounds that no clients should be using it, but that turns out to break usage of current libpq with very old versions of psql, and perhaps other applications.",
      "sinceVersion": "12.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix configure's test for presence of libperl so that it works on recent Red Hat releases",
      "description": "Fix configure's test for presence of libperl so that it works on recent Red Hat releases (Tom Lane)\n          Previously, it could fail if the user sets `CFLAGS` to `-O0`.",
      "sinceVersion": "12.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure correct code generation for spinlocks on PowerPC",
      "description": "Ensure correct code generation for spinlocks on PowerPC (Noah Misch)\n          The previous spinlock coding allowed the compiler to select register zero for use with an assembly instruction that does not accept that register, causing a build failure. We have seen only one long-ago report that matches this bug, but it could cause problems for people trying to build modified PostgreSQL code or use atypical compiler options.",
      "sinceVersion": "12.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "On AIX, don't use the compiler option -qsrcmsg",
      "description": "On AIX, don't use the compiler option -qsrcmsg (Noah Misch)\n          This avoids an internal compiler error with xlc v16.1.0, with little consequence other than changing the format of compiler error messages.",
      "sinceVersion": "12.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix MSVC build process to cope with spaces in the file path of OpenSSL",
      "description": "Fix MSVC build process to cope with spaces in the file path of OpenSSL (Andrew Dunstan)",
      "sinceVersion": "12.1",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Enforce standard locking protocol for TOAST table updates, to prevent problems with REINDEX CONCURRENTLY",
      "description": "Enforce standard locking protocol for TOAST table updates, to prevent problems with REINDEX CONCURRENTLY (Michael Paquier)\n          If applied to a TOAST table or TOAST table's index, REINDEX CONCURRENTLY tended to produce a corrupted index. This happened because sessions updating TOAST entries released their `ROW EXCLUSIVE` locks immediately, rather than holding them until transaction commit as all other updates do. The fix is to make TOAST updates hold the table lock according to the normal rule. Any existing corrupted indexes can be repaired by reindexing again.",
      "sinceVersion": "12.10",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix incorrect plan creation for parallel single-child Append nodes",
      "description": "Fix incorrect plan creation for parallel single-child Append nodes (David Rowley)\n          In some cases the Append would be simplified away when it should not be, leading to wrong query results (duplicated rows).",
      "sinceVersion": "12.10",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "Fix index-only scan plans for cases where not all index columns can be returned (Tom Lane)\n          If an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call (Tom Lane)\n          While the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary",
      "description": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary (Álvaro Herrera)",
      "sinceVersion": "12.10",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "Fix startup of a physical replica to tolerate transaction ID wraparound (Abhijit Menon-Sen, Tomas Vondra)\n          If a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "sinceVersion": "12.10",
      "contributor": "Abhijit Menon-Sen, Tomas Vondra"
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "Remove lexical limitations for SQL commands issued on a logical replication connection (Tom Lane)\n          The walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction",
      "description": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction (Alex Kingsborough, Kyotaro Horiguchi)",
      "sinceVersion": "12.10",
      "contributor": "Alex Kingsborough, Kyotaro Horiguchi"
    },
    {
      "title": "Be sure to `fsync",
      "description": "Be sure to `fsync()` the pg_logical/mappings subdirectory during checkpoints (Nathan Bossart)\n          On some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "sinceVersion": "12.10",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "Build extended statistics for partitioned tables (Justin Pryzby)\n          A previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows ANALYZE to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual ANALYZE on the partitioned table if you want to maintain such statistics.)",
      "sinceVersion": "12.10",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Ignore extended statistics for inheritance trees (Justin Pryzby)\n          Currently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "sinceVersion": "12.10",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere (Tom Lane)\n          This restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index (Haiying Tang, Hou Zhijie)\n          The same prohibition already existed for primary key indexes.",
      "sinceVersion": "12.10",
      "contributor": "Haiying Tang, Hou Zhijie"
    },
    {
      "title": "Correctly update cached table state during ALTER TABLE ADD PRIMARY KEY USING INDEX",
      "description": "Correctly update cached table state during ALTER TABLE ADD PRIMARY KEY USING INDEX (Hou Zhijie)\n          Concurrent sessions failed to update their opinion of whether the table has a primary key, possibly causing incorrect logical replication behavior.",
      "sinceVersion": "12.10",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Correctly update cached table state when switching `REPLICA IDENTITY` index (Tang Haiying, Hou Zhijie)\n          Concurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "sinceVersion": "12.10",
      "contributor": "Tang Haiying, Hou Zhijie"
    },
    {
      "title": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects",
      "description": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects (Justin Pryzby)",
      "sinceVersion": "12.10",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix display of `cert` authentication method's options in pg_hba_file_rules view",
      "description": "Fix display of `cert` authentication method's options in pg_hba_file_rules view (Magnus Hagander)\n          The `cert` authentication method implies `clientcert=verify-full`, but the pg_hba_file_rules view incorrectly reported `clientcert=verify-ca`.",
      "sinceVersion": "12.10",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules (Tom Lane)\n          A whole-row variable would be printed as “var.*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "Fix or remove some incorrect assertions (Simon Riggs, Michael Paquier, Alexander Lakhin)\n          These errors should affect only debug builds, not production.",
      "sinceVersion": "12.10",
      "contributor": "Simon Riggs, Michael Paquier, Alexander Lakhin"
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib",
      "description": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib (Tom Lane)",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid calling `strerror",
      "description": "Avoid calling `strerror()` from libpq's `PQcancel()` function (Tom Lane)\n          `PQcancel()` is supposed to be safe to call from a signal handler, but `strerror()` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name (Tom Lane)\n          This agrees with the documented behavior, and avoids probable permissions failure if SET ROLE or SET SESSION AUTHORIZATION has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext",
      "description": "In psql and some other client programs, avoid trying to invoke `gettext()()` from a control-C signal handler (Tom Lane)\n          While no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical",
      "description": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical (Tom Lane, Nathan Bossart)\n          Previously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane, Nathan Bossart"
    },
    {
      "title": "Fix pg_dump's dump ordering for user-defined casts",
      "description": "Fix pg_dump's dump ordering for user-defined casts (Tom Lane)\n          In rare cases, the output script might refer to a user-defined cast before it had been created.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump's --inserts and --column-inserts modes to handle tables containing both generated columns and dropped columns",
      "description": "Fix pg_dump's --inserts and --column-inserts modes to handle tables containing both generated columns and dropped columns (Tom Lane)",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup",
      "description": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup (Tom Lane)\n          The previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix results of index-only scans on contrib/btree_gist indexes on char",
      "description": "Fix results of index-only scans on contrib/btree_gist indexes on char(`N`) columns (Tom Lane)\n          Index-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store char(`N`) values with the expected amount of space padding. The behavior of such an index will not change immediately unless you REINDEX it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "sinceVersion": "12.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python (Peter Eisentraut, Tom Lane, Andres Freund)\n          With Python 3.10, this avoids configure-time warnings about distutils being deprecated and scheduled for removal in Python 3.12. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "sinceVersion": "12.10",
      "contributor": "Peter Eisentraut, Tom Lane, Andres Freund"
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later",
      "description": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later (Victor Wagner)",
      "sinceVersion": "12.10",
      "contributor": "Victor Wagner"
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later",
      "description": "Fix PL/Python compile failure with Python 3.11 and later (Peter Eisentraut)",
      "sinceVersion": "12.10",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add support for building with Visual Studio 2022",
      "description": "Add support for building with Visual Studio 2022 (Hans Buschmann)",
      "sinceVersion": "12.10",
      "contributor": "Hans Buschmann"
    },
    {
      "title": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory",
      "description": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory (Anton Voloshin, Andrew Dunstan)",
      "sinceVersion": "12.10",
      "contributor": "Anton Voloshin, Andrew Dunstan"
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns (Tom Lane)\n          The previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables (Tom Lane)\n          The column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\n          In cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type record to begin with and there's no issue.",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema",
      "description": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema()()` and allied functions (Renan Soares Lopes)\n          The xmlschema output for these types included a malformed regular expression.",
      "sinceVersion": "12.11",
      "contributor": "Renan Soares Lopes"
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns",
      "description": "Avoid core dump in parser for a `VALUES` clause with zero columns (Tom Lane)",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner errors for `GROUPING",
      "description": "Fix planner errors for `GROUPING()()` constructs that reference outer query levels (Richard Guo, Tom Lane)",
      "sinceVersion": "12.11",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid accessing a no-longer-pinned shared buffer while attempting to lock an outdated tuple during EvalPlanQual",
      "description": "Avoid accessing a no-longer-pinned shared buffer while attempting to lock an outdated tuple during EvalPlanQual (Tom Lane)\n          The code would touch the buffer a couple more times after releasing its pin. In theory another process could recycle the buffer (or more likely, try to defragment its free space) as soon as the pin is gone, probably leading to failure to find the newer version of the tuple.",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering",
      "description": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering (Aliaksandr Kalenik)",
      "sinceVersion": "12.11",
      "contributor": "Aliaksandr Kalenik"
    },
    {
      "title": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command",
      "description": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command (Tom Lane)\n          The parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bogus errors from attempts to alter system columns of tables",
      "description": "Fix bogus errors from attempts to alter system columns of tables (Tom Lane)\n          The system should just tell you that you can't do it, but sometimes it would report “no owned sequence found” instead.",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression",
      "description": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression (Peter Geoghegan, Thomas Munro)\n          The table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "sinceVersion": "12.11",
      "contributor": "Peter Geoghegan, Thomas Munro"
    },
    {
      "title": "Fix risk of deadlock failures while dropping a partitioned index",
      "description": "Fix risk of deadlock failures while dropping a partitioned index (Jimmy Yih, Gaurab Dey, Tom Lane)\n          Ensure that the required table and index locks are taken in the standard order (parents before children, tables before indexes). The previous coding for DROP INDEX did it differently, and so could deadlock against concurrent queries taking these locks in the standard order.",
      "sinceVersion": "12.11",
      "contributor": "Jimmy Yih, Gaurab Dey, Tom Lane"
    },
    {
      "title": "Fix race condition between DROP TABLESPACE and checkpointing",
      "description": "Fix race condition between DROP TABLESPACE and checkpointing (Nathan Bossart)\n          The checkpoint forced by DROP TABLESPACE could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "sinceVersion": "12.11",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint",
      "description": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint (Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas)\n          TRUNCATE must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "sinceVersion": "12.11",
      "contributor": "Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas"
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Fix unsafe toast-data accesses during temporary object cleanup (Andres Freund)\n          Temporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "sinceVersion": "12.11",
      "contributor": "Andres Freund"
    },
    {
      "title": "Improve wait logic in RegisterSyncRequest",
      "description": "Improve wait logic in RegisterSyncRequest (Thomas Munro)\n          If we run out of space in the checkpointer sync request queue (which is hopefully rare on real systems, but is common when testing with a very small buffer pool), we wait for it to drain. While waiting, we should report that as a wait event so that users know what is going on, and also watch for postmaster death, since otherwise the loop might never terminate if the checkpointer has already exited.",
      "sinceVersion": "12.11",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record",
      "description": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record (Sami Imseih)",
      "sinceVersion": "12.11",
      "contributor": "Sami Imseih"
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "Fix possibility of self-deadlock in hot standby conflict handling (Andres Freund)\n          With unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "sinceVersion": "12.11",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit",
      "description": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit (Amit Kapila)\n          Faulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "sinceVersion": "12.11",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line (Dilip Kumar, Amit Kapila)\n          Otherwise subscribers cannot see the values and will fail to replicate the update.",
      "sinceVersion": "12.11",
      "contributor": "Dilip Kumar, Amit Kapila"
    },
    {
      "title": "Improve logical replication subscriber's error message for an unsupported relation kind",
      "description": "Improve logical replication subscriber's error message for an unsupported relation kind (Tom Lane)\n          v13 and later servers support publishing partitioned tables. Older server versions cannot handle subscribing to such a table, and they gave a very misleading error message: “table XYZ not found on publisher”. Arrange to deliver a more on-point message.",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "Make libpq accept root-owned SSL private key files (David Steele)\n          This change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "sinceVersion": "12.11",
      "contributor": "David Steele"
    },
    {
      "title": "Fix behavior of libpq's `PQisBusy",
      "description": "Fix behavior of libpq's `PQisBusy()()` function after a connection failure (Tom Lane)\n          If we'd detected a write failure, `PQisBusy()()` would always return true, which is the wrong thing: we want input processing to carry on normally until we've read whatever is available from the server. The practical effect of this error is that applications using libpq's async-query API would typically detect connection loss only when `PQconsumeInput()()` returns a hard failure. With this fix, a connection loss will normally be reported via an error PGresult object, which is a much cleaner behavior for most applications.",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions (Tom Lane)\n          pg_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error handling in pg_waldump",
      "description": "Fix error handling in pg_waldump (Kyotaro Horiguchi, Andres Freund)\n          While trying to read a WAL file to determine the WAL segment size, pg_waldump would report an incorrect error for the case of a too-short file. In addition, the file name reported in this and related error messages could be garbage.",
      "sinceVersion": "12.11",
      "contributor": "Kyotaro Horiguchi, Andres Freund"
    },
    {
      "title": "Ensure that contrib/pageinspect functions cope with all-zero pages",
      "description": "Ensure that contrib/pageinspect functions cope with all-zero pages (Michael Paquier)\n          This is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "sinceVersion": "12.11",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type (Michael Paquier, Justin Pryzby, Julien Rouhaud)\n          These changes make it less likely that the module will crash on bad data.",
      "sinceVersion": "12.11",
      "contributor": "Michael Paquier, Justin Pryzby, Julien Rouhaud"
    },
    {
      "title": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary (Ronan Dunklau)\n          This fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "sinceVersion": "12.11",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Update JIT code to work with LLVM 14",
      "description": "Update JIT code to work with LLVM 14 (Thomas Munro)",
      "sinceVersion": "12.11",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Clean up assorted failures under clang's `-fsanitize=undefined` checks (Tom Lane, Andres Freund, Zhihong Yu)\n          Most of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane, Andres Freund, Zhihong Yu"
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions",
      "description": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions (Tom Lane)",
      "sinceVersion": "12.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build",
      "description": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build (Andres Freund)",
      "sinceVersion": "12.11",
      "contributor": "Andres Freund"
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "In Windows builds, use gendef instead of pexports to build DEF files (Andrew Dunstan)\n          This adapts the build process to work on recent MSys tool chains.",
      "sinceVersion": "12.11",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW (Andrew Dunstan)\n          For some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "sinceVersion": "12.11",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine.",
      "sinceVersion": "12.11",
      "contributor": null
    },
    {
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "Do not let extension scripts replace objects not already belonging to the extension (Tom Lane)\n          This change prevents extension scripts from doing CREATE OR REPLACE if there is an existing object that does not belong to the extension. It also prevents CREATE IF NOT EXISTS in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\n          The PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix replay of CREATE DATABASE WAL records on standby servers",
      "description": "Fix replay of CREATE DATABASE WAL records on standby servers (Kyotaro Horiguchi, Asim R Praveen, Paul Guo)\n          Standby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "sinceVersion": "12.12",
      "contributor": "Kyotaro Horiguchi, Asim R Praveen, Paul Guo"
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Support “in place” tablespaces (Thomas Munro, Michael Paquier, Álvaro Herrera)\n          Normally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the CREATE DATABASE replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "sinceVersion": "12.12",
      "contributor": "Thomas Munro, Michael Paquier, Álvaro Herrera"
    },
    {
      "title": "Fix permissions checks in CREATE INDEX",
      "description": "Fix permissions checks in CREATE INDEX (Nathan Bossart, Noah Misch)\n          The fix for CVE-2022-1552 caused CREATE INDEX to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg_dump issues CREATE INDEX before re-granting permissions.",
      "sinceVersion": "12.12",
      "contributor": "Nathan Bossart, Noah Misch"
    },
    {
      "title": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block",
      "description": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block (Tom Lane)\n          If the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "Fix race condition when checking transaction visibility (Simon Riggs)\n          `TransactionIdIsInProgress()` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "sinceVersion": "12.12",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type",
      "description": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type (Tom Lane)",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function",
      "description": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function (Richard Guo)",
      "sinceVersion": "12.12",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables",
      "description": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables (Álvaro Herrera, Amit Langote)\n          In certain cases, a “trigger does not exist” failure would occur because the command would try to adjust the trigger on a child partition that doesn't have it.",
      "sinceVersion": "12.12",
      "contributor": "Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Improve syntax error messages for type jsonpath",
      "description": "Improve syntax error messages for type jsonpath (Andrew Dunstan)",
      "sinceVersion": "12.12",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Prevent `pg_stat_get_subscription",
      "description": "Prevent `pg_stat_get_subscription()()` from possibly returning an extra row containing garbage values (Kuntal Ghosh)",
      "sinceVersion": "12.12",
      "contributor": "Kuntal Ghosh"
    },
    {
      "title": "Ensure that `pg_stop_backup",
      "description": "Ensure that `pg_stop_backup()()` cleans up session state properly (Fujii Masao)\n          This omission could lead to assertion failures or crashes later in the session.",
      "sinceVersion": "12.12",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses (Dean Rasheed)\n          In corner cases, a misleading error could be reported.",
      "sinceVersion": "12.12",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct",
      "description": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct (Álvaro Herrera)",
      "sinceVersion": "12.12",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Reject `ROW",
      "description": "Reject `ROW()` expressions and functions in `FROM` that have too many columns (Tom Lane)\n          Cases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere (Tom Lane)\n          Previously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column",
      "description": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made (Tom Lane)\n          This oversight could lead to dump/reload or pg_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "Report implicitly-created operator families to event triggers (Masahiko Sawada)\n          If CREATE OPERATOR CLASS results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "sinceVersion": "12.12",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Fix control file updates made when a restartpoint is running during promotion of a standby server (Kyotaro Horiguchi)\n          Previously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "sinceVersion": "12.12",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions",
      "description": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions (Wang Wei, Amit Kapila)\n          If a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "sinceVersion": "12.12",
      "contributor": "Wang Wei, Amit Kapila"
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders",
      "description": "Disallow nested backup operations in logical replication walsenders (Fujii Masao)",
      "sinceVersion": "12.12",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix memory leak in logical replication subscribers",
      "description": "Fix memory leak in logical replication subscribers (Hou Zhijie)",
      "sinceVersion": "12.12",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Prevent open-file leak when reading an invalid timezone abbreviation file (Kyotaro Horiguchi)\n          Such cases could result in harmless warning messages.",
      "sinceVersion": "12.12",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Allow custom server parameters to have short descriptions that are NULL (Steve Chavez)\n          Previously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "sinceVersion": "12.12",
      "contributor": "Steve Chavez"
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags",
      "description": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags (Haiyang Wang)",
      "sinceVersion": "12.12",
      "contributor": "Haiyang Wang"
    },
    {
      "title": "Fix erroneous assertion checks in shared hashtable management",
      "description": "Fix erroneous assertion checks in shared hashtable management (Thomas Munro)",
      "sinceVersion": "12.12",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Arrange to clean up after commit-time errors within `SPI_commit",
      "description": "Arrange to clean up after commit-time errors within `SPI_commit()()`, rather than expecting callers to do that (Peter Eisentraut, Tom Lane)\n          Proper cleanup is complicated and requires use of low-level facilities, so it's not surprising that no known caller got it right. This led to misbehaviors when a PL procedure issued COMMIT but a failure occurred (such as a deferred constraint check). To improve matters, redefine `SPI_commit()()` as starting a new transaction, so that it becomes equivalent to `SPI_commit_and_chain()()` except that you get default transaction characteristics instead of preserving the prior transaction's characteristics. To make this somewhat transparent API-wise, redefine `SPI_start_transaction()()` as a no-op. All known callers of `SPI_commit()()` immediately call `SPI_start_transaction()()`, so they will not notice any change. Similar remarks apply to `SPI_rollback()()`.\n          Also fix PL/Python, which omitted any handling of such errors at all, resulting in jumping out of the Python interpreter. This is reported to crash Python 3.11. Older Python releases leak some memory but seem okay with it otherwise.",
      "sinceVersion": "12.12",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "Remove misguided SSL key file ownership check in libpq (Tom Lane)\n          In the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Ensure ecpg reports server connection loss sanely (Tom Lane)\n          Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Avoid core dump in ecpglib with unexpected orders of operations (Tom Lane)\n          Certain operations such as EXEC SQL PREPARE would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql's \\watch command, echo a newline after cancellation with control-C",
      "description": "In psql's \\watch command, echo a newline after cancellation with control-C (Pavel Stehule)\n          This prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "sinceVersion": "12.12",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Fix possible report of wrong error condition after `clone",
      "description": "Fix possible report of wrong error condition after `clone()()` failure in pg_upgrade with --clone option (Justin Pryzby)",
      "sinceVersion": "12.12",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms",
      "description": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms (Tom Lane)",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification",
      "description": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification (Tom Lane)",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "Block signals while allocating dynamic shared memory on Linux (Thomas Munro)\n          This avoids problems when a signal interrupts `posix_fallocate()()`.",
      "sinceVersion": "12.12",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open",
      "description": "Detect unexpected `EEXIST` error from `shm_open()()` (Thomas Munro)\n          This avoids a possible crash on Solaris.",
      "sinceVersion": "12.12",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36",
      "description": "Adjust PL/Perl test case so it will work under Perl 5.36 (Dagfinn Ilmari Mannsåker)",
      "sinceVersion": "12.12",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL",
      "description": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL (Tom Lane)",
      "sinceVersion": "12.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix construction of per-partition foreign key constraints while doing ALTER TABLE ATTACH PARTITION",
      "description": "Fix construction of per-partition foreign key constraints while doing ALTER TABLE ATTACH PARTITION (Jehan-Guillaume de Rorthais, Álvaro Herrera)\n          Previously, incorrect or duplicate constraints could be constructed for the newly-added partition.",
      "sinceVersion": "12.13",
      "contributor": "Jehan-Guillaume de Rorthais, Álvaro Herrera"
    },
    {
      "title": "Avoid rare PANIC during updates occurring concurrently with VACUUM",
      "description": "Avoid rare PANIC during updates occurring concurrently with VACUUM (Tom Lane, Jeff Davis)\n          If a concurrent VACUUM sets the all-visible flag bit in a page that UPDATE or DELETE is in process of modifying, the updating command needs to clear that bit again; but some code paths failed to do so, ending in a PANIC exit and database restart.\n          This is known to be possible in versions 14 and 15. It may be only latent in previous branches.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane, Jeff Davis"
    },
    {
      "title": "Fix VACUUM to press on if an attempted page deletion in a btree index fails to find the page's parent downlink",
      "description": "Fix VACUUM to press on if an attempted page deletion in a btree index fails to find the page's parent downlink (Peter Geoghegan)\n          Rather than throwing an error, just log the issue and continue without deleting the empty page. Previously, a buggy operator class or corrupted index could indefinitely prevent completion of vacuuming of the index, eventually leading to transaction wraparound problems.",
      "sinceVersion": "12.13",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view",
      "description": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view (Tom Lane)\n          This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "Disallow rules named `_RETURN` that are not `ON SELECT` (Tom Lane)\n          This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix resource management bug in saving tuples for `AFTER` triggers",
      "description": "Fix resource management bug in saving tuples for `AFTER` triggers (Tom Lane)\n          Given the right circumstances, this manifested as a “tupdesc reference `NNNN` is not owned by resource owner” error followed by a PANIC exit.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Repair rare failure of MULTIEXPR_SUBLINK subplans in inherited updates",
      "description": "Repair rare failure of MULTIEXPR_SUBLINK subplans in inherited updates (Tom Lane)\n          Use of the syntax `UPDATE tab SET (c1, ...) = (SELECT ...)` with an inherited or partitioned target table could result in failure if the child tables are sufficiently dissimilar. This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix generation of constraint names for per-partition foreign key constraints",
      "description": "Fix generation of constraint names for per-partition foreign key constraints (Jehan-Guillaume de Rorthais)\n          If the initially-given name is already in use for some constraint of the partition, a new one is selected; but it wasn't being spelled as intended.",
      "sinceVersion": "12.13",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix incorrect matching of index expressions and predicates when creating a partitioned index",
      "description": "Fix incorrect matching of index expressions and predicates when creating a partitioned index (Richard Guo, Tom Lane)\n          While creating a partitioned index, we try to identify any existing indexes on the partitions that match the partitioned index, so that we can absorb those as child indexes instead of building new ones. Matching of expressions was not done right, so that a usable child index might be ignored, leading to creation of a duplicative index.",
      "sinceVersion": "12.13",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "Prevent WAL corruption after a standby promotion (Dilip Kumar, Robert Haas)\n          When a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "sinceVersion": "12.13",
      "contributor": "Dilip Kumar, Robert Haas"
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes (Matthias van de Meent, Zhang Mingli)\n          This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "sinceVersion": "12.13",
      "contributor": "Matthias van de Meent, Zhang Mingli"
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction (Masahiko Sawada, Kuroda Hayato)\n          These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "sinceVersion": "12.13",
      "contributor": "Masahiko Sawada, Kuroda Hayato"
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "Prevent examining system catalogs with the wrong snapshot during logical decoding (Masahiko Sawada)\n          If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "sinceVersion": "12.13",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "Accept interrupts in more places during logical decoding (Amit Kapila, Masahiko Sawada)\n          This ameliorates problems with slow shutdown of replication workers.",
      "sinceVersion": "12.13",
      "contributor": "Amit Kapila, Masahiko Sawada"
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "Avoid crash after function syntax error in replication workers (Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane)\n          If a syntax error occurred in a SQL-language or PL/pgSQL-language CREATE FUNCTION or DO command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "sinceVersion": "12.13",
      "contributor": "Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "Fix handling of read-write expanded datums that are passed to SQL functions (Tom Lane)\n          If a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix type circle's equality comparator to handle NaNs properly",
      "description": "Fix type circle's equality comparator to handle NaNs properly (Ranier Vilela)\n          If the left-hand circle had a floating-point NaN for its radius, it would be considered equal to a circle with the same center and any radius.",
      "sinceVersion": "12.13",
      "contributor": "Ranier Vilela"
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Fix use-after-free hazard in string comparisons (Tom Lane)\n          Improper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add plan-time check for attempted access to a table that has no table access method",
      "description": "Add plan-time check for attempted access to a table that has no table access method (Tom Lane)\n          This prevents a crash in some catalog-corruption scenarios, for example use of a view whose `ON SELECT` rule is missing.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "Prevent postmaster crash when shared-memory state is corrupted (Tom Lane)\n          The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add some more defenses against recursion till stack overrun",
      "description": "Add some more defenses against recursion till stack overrun (Richard Guo, Tom Lane)",
      "sinceVersion": "12.13",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "Avoid long-term memory leakage in the autovacuum launcher process (Reid Thompson)\n          The lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "sinceVersion": "12.13",
      "contributor": "Reid Thompson"
    },
    {
      "title": "Improve PL/pgSQL's ability to handle parameters declared as RECORD",
      "description": "Improve PL/pgSQL's ability to handle parameters declared as RECORD (Tom Lane)\n          Build a separate function cache entry for each concrete type passed to the RECORD parameter during a session, much as we do for polymorphic parameters. This allows some usages to work that previously failed with errors such as “type of parameter does not match that when preparing the plan”.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "Add missing guards for `NULL` connection pointer in libpq (Daniele Varrazzo, Tom Lane)\n          There's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()()` and `PQisnonblocking()()` didn't get that memo, so fix them.",
      "sinceVersion": "12.13",
      "contributor": "Daniele Varrazzo, Tom Lane"
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration",
      "description": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration (Andrey Sokolov)\n          For example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only str1 was marked `static`.",
      "sinceVersion": "12.13",
      "contributor": "Andrey Sokolov"
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg_basebackup",
      "description": "Allow cross-platform tablespace relocation in pg_basebackup (Robert Haas)\n          Allow the remote path in --tablespace-mapping to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "sinceVersion": "12.13",
      "contributor": "Robert Haas"
    },
    {
      "title": "In pg_stat_statements, fix access to already-freed memory",
      "description": "In pg_stat_statements, fix access to already-freed memory (zhaoqigui)\n          This occurred if pg_stat_statements tracked a ROLLBACK command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "sinceVersion": "12.13",
      "contributor": "zhaoqigui"
    },
    {
      "title": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns (Richard Guo, Etsuro Fujita)\n          This avoids “variable not found in subplan target list” errors in rare cases.",
      "sinceVersion": "12.13",
      "contributor": "Richard Guo, Etsuro Fujita"
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create",
      "description": "Reject unwanted output from the platform's `uuid_create()()` function (Nazir Bilal Yavuz)\n          The uuid-ossp module expects libc's `uuid_create()()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()()`.)",
      "sinceVersion": "12.13",
      "contributor": "Nazir Bilal Yavuz"
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Include new Perl test modules in standard installations (Álvaro Herrera)\n          Add PostgreSQL/Test/Cluster.pm and PostgreSQL/Test/Utils.pm to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "sinceVersion": "12.13",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "On NetBSD, force dynamic symbol resolution at postmaster start (Andres Freund, Tom Lane)\n          This avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "sinceVersion": "12.13",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix incompatibilities with LLVM 15",
      "description": "Fix incompatibilities with LLVM 15 (Thomas Munro, Andres Freund)",
      "sinceVersion": "12.13",
      "contributor": "Thomas Munro, Andres Freund"
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set",
      "description": "Allow use of `__sync_lock_test_and_set()()` for spinlocks on any machine (Tom Lane)\n          This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS",
      "description": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane)",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid using `sprintf",
      "description": "Avoid using `sprintf()`, to avoid compile-time deprecation warnings (Tom Lane)",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later",
      "description": "Silence assorted compiler warnings from clang 15 and later (Tom Lane)",
      "sinceVersion": "12.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis.",
      "description": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy_River, America/Thunder_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n          These zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of timestamptz display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n          It is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "sinceVersion": "12.13",
      "contributor": null
    },
    {
      "title": "libpq can leak memory contents after GSSAPI transport encryption initiation fails",
      "description": "libpq can leak memory contents after GSSAPI transport encryption initiation fails (Jacob Champion)\n          A modified server, or an unauthenticated man-in-the-middle, can send a not-zero-terminated error message during setup of GSSAPI (Kerberos) transport encryption. libpq will then copy that string, as well as following bytes in application memory up to the next zero byte, to its error report. Depending on what the calling application does with the error report, this could result in disclosure of application memory contents. There is also a small probability of a crash due to reading beyond the end of memory. Fix by properly zero-terminating the server message. (CVE-2022-41862)",
      "sinceVersion": "12.14",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not",
      "description": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid (Tom Lane)\n          When pg_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list",
      "description": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list (Dean Rasheed)\n          In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "sinceVersion": "12.14",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Reject uses of undefined variables in jsonpath existence checks",
      "description": "Reject uses of undefined variables in jsonpath existence checks (Alexander Korotkov, David G. Johnston)\n          While jsonpath match operators threw an error for an undefined variable in the path pattern, the existence operators silently treated it as a match.",
      "sinceVersion": "12.14",
      "contributor": "Alexander Korotkov, David G. Johnston"
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "Fix edge-case data corruption in parallel hash joins (Dmitry Astapov)\n          If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "sinceVersion": "12.14",
      "contributor": "Dmitry Astapov"
    },
    {
      "title": "Log the correct ending timestamp in recovery_target_xid mode",
      "description": "Log the correct ending timestamp in recovery_target_xid mode (Tom Lane)\n          When ending recovery based on the recovery_target_xid setting with recovery_target_inclusive = `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent “wrong tuple length” failure at the end of VACUUM",
      "description": "Prevent “wrong tuple length” failure at the end of VACUUM (Ashwin Agrawal, Junfeng Yang)\n          This occurred if VACUUM needed to update the current database's datfrozenxid value and the database has so many granted privileges that its datacl value has been pushed out-of-line.",
      "sinceVersion": "12.14",
      "contributor": "Ashwin Agrawal, Junfeng Yang"
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline",
      "description": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline (Tom Lane)\n          If there's not been an explicit BEGIN TRANSACTION, ANALYZE would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "Reject cancel request packets having the wrong length (Andrey Borodin)\n          The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "sinceVersion": "12.14",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "Add recursion and looping defenses in subquery pullup (Tom Lane)\n          A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition (Tom Lane)\n          This could result in “could not devise a query plan for the given query” errors.",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches",
      "description": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches (Tom Lane)",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak in hashing strings with nondeterministic collations",
      "description": "Fix memory leak in hashing strings with nondeterministic collations (Jeff Davis)",
      "sinceVersion": "12.14",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "Clean up the libpq connection object after a failed replication connection attempt (Andres Freund)\n          The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as CREATE SUBSCRIPTION, such a failure resulted in a small session-lifespan memory leak.",
      "sinceVersion": "12.14",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "Fix uninitialized-memory usage in logical decoding (Masahiko Sawada)\n          In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "sinceVersion": "12.14",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations",
      "description": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations (Robert Haas)",
      "sinceVersion": "12.14",
      "contributor": "Robert Haas"
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Advance a heap page's LSN when setting its all-visible bit during WAL replay (Jeff Davis)\n          Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "sinceVersion": "12.14",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Prevent unsafe usage of a relation cache entry's rd_smgr pointer",
      "description": "Prevent unsafe usage of a relation cache entry's rd_smgr pointer (Amul Sul)\n          Remove various assumptions that rd_smgr would stay valid over a series of operations, by wrapping all uses of it in a function that will recompute it if needed. This prevents bugs occurring when an unexpected cache flush occurs partway through such a series.",
      "sinceVersion": "12.14",
      "contributor": "Amul Sul"
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "Fix latent buffer-overrun problem in `WaitEventSet` logic (Thomas Munro)\n          The `epoll()`-based and `kqueue()`-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "sinceVersion": "12.14",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds (Andres Freund)\n          clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "sinceVersion": "12.14",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks (Justin Pryzby)\n          In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "sinceVersion": "12.14",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "In pg_dump, avoid calling unsafe server functions before we have locks on the tables to be examined",
      "description": "In pg_dump, avoid calling unsafe server functions before we have locks on the tables to be examined (Tom Lane, Gilles Darold)\n          pg_dump uses certain server functions that can fail if examining a table that gets dropped concurrently. Avoid this type of failure by ensuring that we obtain access share lock before inquiring too deeply into a table's properties, and that we don't apply such functions to tables we don't intend to dump at all.",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane, Gilles Darold"
    },
    {
      "title": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA",
      "description": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA (Dean Rasheed)",
      "sinceVersion": "12.14",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix faulty assertion in contrib/postgres_fdw",
      "description": "Fix faulty assertion in contrib/postgres_fdw (Etsuro Fujita)",
      "sinceVersion": "12.14",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits",
      "description": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits (Tom Lane)",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/sepgsql, avoid deprecation warnings with recent libselinux",
      "description": "In contrib/sepgsql, avoid deprecation warnings with recent libselinux (Michael Paquier)",
      "sinceVersion": "12.14",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix build on Microsoft Visual Studio 2013",
      "description": "Fix build on Microsoft Visual Studio 2013 (Tom Lane)\n          A previous patch supposed that all platforms of interest have `snprintf()()`, but MSVC 2013 isn't quite there yet. Revert to using `sprintf()()` on that platform.",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl",
      "description": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl (Andrew Dunstan)",
      "sinceVersion": "12.14",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc (Andrew Dunstan)\n          Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "sinceVersion": "12.14",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Suppress compiler warnings from Perl's header files (Andres Freund)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "12.14",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions",
      "description": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions (Tom Lane)",
      "sinceVersion": "12.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.\n          Notably, a new timezone America/Ciudad_Juarez has been split off from America/Ojinaga.",
      "sinceVersion": "12.14",
      "contributor": null
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view",
      "description": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane)",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash when the new schema name is omitted in CREATE SCHEMA",
      "description": "Avoid crash when the new schema name is omitted in CREATE SCHEMA (Michael Paquier)\n          The SQL standard allows writing `CREATE SCHEMA AUTHORIZATION `owner_name``, with the schema name defaulting to `owner_name`. However some code paths expected the schema name to be present and would fail.",
      "sinceVersion": "12.15",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "Disallow altering composite types that are stored in indexes (Tom Lane)\n          ALTER TYPE disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow system columns as elements of foreign keys",
      "description": "Disallow system columns as elements of foreign keys (Tom Lane)\n          Since the removal of OID as a system column, there is no plausible use-case for this, and various bits of code no longer support it. Disallow it rather than trying to fix all the cases.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possible crash when `array_position",
      "description": "Avoid possible crash when `array_position()()` or `array_positions()()` is passed an empty array (Tom Lane)",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char",
      "description": "Fix possible out-of-bounds fetch in `to_char()()` (Tom Lane)\n          With bad luck this could have resulted in a server crash.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid buffer overread in `translate",
      "description": "Avoid buffer overread in `translate()()` function (Daniil Anisimov)\n          When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "sinceVersion": "12.15",
      "contributor": "Daniil Anisimov"
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Fix error cursor setting for parse errors in JSON string literals (Tom Lane)\n          Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data corruption due to vacuum_defer_cleanup_age being larger than the current 64-bit xid",
      "description": "Fix data corruption due to vacuum_defer_cleanup_age being larger than the current 64-bit xid (Andres Freund)\n          In v14 and later with non-default settings of vacuum_defer_cleanup_age, it was possible to compute a very large vacuum cleanup horizon xid, leading to vacuum removing rows that are still live. v12 and v13 have a lesser form of the same problem affecting only GiST indexes, which could lead to index pages getting recycled too early.",
      "sinceVersion": "12.15",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "Fix parser's failure to detect some cases of improperly-nested aggregates (Tom Lane)\n          This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options (David Rowley)\n          This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "sinceVersion": "12.15",
      "contributor": "David Rowley"
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another (Tom Lane)\n          This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Fix oversights in execution of nested `ARRAY[]` constructs (Alexander Lakhin, Tom Lane)\n          Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "sinceVersion": "12.15",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Prevent crash when updating a field within an array-of-domain-over-composite-type column",
      "description": "Prevent crash when updating a field within an array-of-domain-over-composite-type column (Dmitry Dolgov)",
      "sinceVersion": "12.15",
      "contributor": "Dmitry Dolgov"
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Fix partition pruning logic for partitioning on boolean columns (David Rowley)\n          Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "sinceVersion": "12.15",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "Fix race condition in per-batch cleanup during parallel hash join (Thomas Munro, Melanie Plageman)\n          A crash was possible given unlucky timing and parallel_leader_participation = `off` (which is not the default).",
      "sinceVersion": "12.15",
      "contributor": "Thomas Munro, Melanie Plageman"
    },
    {
      "title": "Recalculate `GENERATED` columns after an EvalPlanQual check",
      "description": "Recalculate `GENERATED` columns after an EvalPlanQual check (Tom Lane)\n          In `READ COMMITTED` isolation mode, the effects of a row update might need to get reapplied to a newer version of the row than the query found originally. If so, we need to recompute any `GENERATED` columns, in case they depend on columns that were changed by the concurrent update.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero",
      "description": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero (Masahiko Sawada)\n          Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation vacuum_cost_delay setting, but this was done only for positive settings, not zero.",
      "sinceVersion": "12.15",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates",
      "description": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates (Andres Freund, Tom Lane)\n          Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "sinceVersion": "12.15",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule (Dean Rasheed)\n          Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "sinceVersion": "12.15",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Support references to `OLD` and `NEW` within subqueries in rule actions (Dean Rasheed, Tom Lane)\n          Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "sinceVersion": "12.15",
      "contributor": "Dean Rasheed, Tom Lane"
    },
    {
      "title": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table",
      "description": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table (Tom Lane)",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin (Shi Yu)\n          Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache_callback_list slots” error.",
      "sinceVersion": "12.15",
      "contributor": "Shi Yu"
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "Fix dereference of dangling pointer during buffering build of a GiST index (Alexander Lakhin)\n          This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "sinceVersion": "12.15",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Ignore dropped columns and generated columns during logical replication of an update or delete action",
      "description": "Ignore dropped columns and generated columns during logical replication of an update or delete action (Onder Kalaci, Shi Yu)\n          Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "sinceVersion": "12.15",
      "contributor": "Onder Kalaci, Shi Yu"
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding (Jacob Champion, Heikki Linnakangas)\n          This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "sinceVersion": "12.15",
      "contributor": "Jacob Champion, Heikki Linnakangas"
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "Avoid race condition with process ID tracking on Windows (Thomas Munro)\n          The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "sinceVersion": "12.15",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add missing cases to `SPI_result_code_string",
      "description": "Add missing cases to `SPI_result_code_string()()` (Dean Rasheed)",
      "sinceVersion": "12.15",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc",
      "description": "Fix erroneous Valgrind markings in `AllocSetRealloc()()` (Karina Litskevich)\n          In the unusual case where the size of a large (&gt;8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "sinceVersion": "12.15",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message",
      "description": "Avoid assertion failure when decoding a transactional logical replication message (Tomas Vondra)",
      "sinceVersion": "12.15",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "Avoid locale sensitivity when processing regular expression escapes (Jeff Davis)\n          A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "sinceVersion": "12.15",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range",
      "description": "Avoid trying to write an empty WAL record in `log_newpage_range()()` when the last few pages in the specified range are empty (Matthias van de Meent)\n          It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "sinceVersion": "12.15",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions",
      "description": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions (Ajit Awekar, Tom Lane)",
      "sinceVersion": "12.15",
      "contributor": "Ajit Awekar, Tom Lane"
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays (Tom Lane)\n          plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays (Tom Lane)\n          plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Fix unwinding of exception stack in plpython (Xing Guo)\n          Some rare failure cases could return without cleaning up the PG_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "sinceVersion": "12.15",
      "contributor": "Xing Guo"
    },
    {
      "title": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll",
      "description": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll()()` (Michael Paquier)\n          With gssencmode set to `require`, the connection was not marked dead after a GSS initialization failure. Make it fail immediately, as the equivalent case for TLS encryption has long done.",
      "sinceVersion": "12.15",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the -C ORACLE option",
      "description": "Fix possible data corruption in ecpg programs built with the -C ORACLE option (Kyotaro Horiguchi)\n          When `ecpg_get_data()()` is called with varcharsize set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "sinceVersion": "12.15",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully (Tom Lane)\n          Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the --load-via-partition-root option; but since there is very little chance of success without that, teach pg_dump to apply it automatically to such tables.\n          Also, fix pg_restore to not try to TRUNCATE target tables before restoring into them when --load-via-partition-root mode is used. This avoids a hazard of deadlocks and lost data.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping (Dmitry Dolgov, Tom Lane)\n          This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "sinceVersion": "12.15",
      "contributor": "Dmitry Dolgov, Tom Lane"
    },
    {
      "title": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression",
      "description": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression (Tom Lane)\n          A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip",
      "description": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip (Tom Lane)\n          Previously, `make install-strip` used the -x option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "sinceVersion": "12.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it (Aleksander Alekseev, Peter Eisentraut, Tom Lane)\n          It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's --nonet option to the build recipes.",
      "sinceVersion": "12.15",
      "contributor": "Aleksander Alekseev, Peter Eisentraut, Tom Lane"
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory",
      "description": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory (Peter Eisentraut)\n          Place it under tmp_check in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "sinceVersion": "12.15",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.\n          When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "sinceVersion": "12.15",
      "contributor": null
    },
    {
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign (Noah Misch)\n          This restriction guards against SQL-injection hazards for trusted extensions.\n          The PostgreSQL Project thanks Micah Gates, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "sinceVersion": "12.16",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix confusion between empty",
      "description": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries (Tomas Vondra)\n          Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n          This fix will not in itself correct faulty BRIN entries. It's recommended to REINDEX any BRIN indexes that may be used to search for nulls.",
      "sinceVersion": "12.16",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted",
      "description": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted (Andres Freund)\n          If DROP DATABASE was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its pg_database row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another DROP DATABASE.",
      "sinceVersion": "12.16",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "Ensure that partitioned indexes are correctly marked as valid or not at creation (Michael Paquier)\n          If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "sinceVersion": "12.16",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION",
      "description": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION (Michael Paquier)\n          Such an index will now be ignored, and a new child index created instead.",
      "sinceVersion": "12.16",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached (Michael Paquier)\n          The update of the index's pg_index entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "sinceVersion": "12.16",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema",
      "description": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema (Michael Paquier, Heikki Linnakangas)\n          Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "sinceVersion": "12.16",
      "contributor": "Michael Paquier, Heikki Linnakangas"
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "Don't use partial unique indexes for uniqueness proofs in the planner (David Rowley)\n          This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "sinceVersion": "12.16",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses (Etsuro Fujita)\n          The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "sinceVersion": "12.16",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode (Thomas Munro)\n          Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "sinceVersion": "12.16",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop",
      "description": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop (Tom Lane)\n          When rescanning the join after the values of such Params have changed, we must rebuild the hash table, but neglected to do so. This could result in missing join output rows.",
      "sinceVersion": "12.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "Fix intermittent failures when trying to update a field of a composite column (Tom Lane)\n          If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "sinceVersion": "12.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent query-lifespan memory leaks in some UPDATE queries with triggers",
      "description": "Prevent query-lifespan memory leaks in some UPDATE queries with triggers (Tomas Vondra)",
      "sinceVersion": "12.16",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns",
      "description": "Prevent stack-overflow crashes with very complex text search patterns (Tom Lane)",
      "sinceVersion": "12.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf",
      "description": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf (Tom Lane)\n          The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "sinceVersion": "12.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "Fix mishandling of C++ out-of-memory conditions (Heikki Linnakangas)\n          If JIT is in use, running out of memory in a C++ `new()` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "sinceVersion": "12.16",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space (Dongming Liu)\n          Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "sinceVersion": "12.16",
      "contributor": "Dongming Liu"
    },
    {
      "title": "Allow VACUUM to continue after detecting certain types of b-tree index corruption",
      "description": "Allow VACUUM to continue after detecting certain types of b-tree index corruption (Peter Geoghegan)\n          If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of REINDEX will fix the broken index, but preventing VACUUM from completing until that is done risks making matters far worse.",
      "sinceVersion": "12.16",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid",
      "description": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid (Andres Freund)\n          Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "sinceVersion": "12.16",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "Avoid double replay of prepared transactions during crash recovery (suyu.cmj, Michael Paquier)\n          After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "sinceVersion": "12.16",
      "contributor": "suyu.cmj, Michael Paquier"
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync",
      "description": "Ensure that a newly created, but still empty table is `fsync()`'ed at the next checkpoint (Heikki Linnakangas)\n          Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "sinceVersion": "12.16",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "Ensure that creation of the init fork of an unlogged index is WAL-logged (Heikki Linnakangas)\n          While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "sinceVersion": "12.16",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix missing reinitializations of delay-checkpoint-end flags",
      "description": "Fix missing reinitializations of delay-checkpoint-end flags (suyu.cmj)\n          This could result in unnecessary delays of checkpoints, or in assertion failures in assert-enabled builds.",
      "sinceVersion": "12.16",
      "contributor": "suyu.cmj"
    },
    {
      "title": "Fix overly strict assertion in jsonpath code",
      "description": "Fix overly strict assertion in jsonpath code (David Rowley)\n          This assertion failed if a query applied the `.type()` operator to a `like_regex` result. There was no bug in non-assert builds.",
      "sinceVersion": "12.16",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction",
      "description": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction (Tom Lane)",
      "sinceVersion": "12.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix contrib/fuzzystrmatch's Soundex `difference",
      "description": "Fix contrib/fuzzystrmatch's Soundex `difference()()` function to handle empty input sanely (Alexander Lakhin, Tom Lane)\n          An input string containing no alphabetic characters resulted in unpredictable output.",
      "sinceVersion": "12.16",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Tighten whitespace checks in contrib/hstore input",
      "description": "Tighten whitespace checks in contrib/hstore input (Evan Jones)\n          In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "sinceVersion": "12.16",
      "contributor": "Evan Jones"
    },
    {
      "title": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass",
      "description": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass (Ankit Kumar Pandey, Alexander Lakhin)\n          Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "sinceVersion": "12.16",
      "contributor": "Ankit Kumar Pandey, Alexander Lakhin"
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in contrib/intarray",
      "description": "Avoid useless double decompression of GiST index entries in contrib/intarray (Konstantin Knizhnik, Matthias van de Meent, Tom Lane)",
      "sinceVersion": "12.16",
      "contributor": "Konstantin Knizhnik, Matthias van de Meent, Tom Lane"
    },
    {
      "title": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries",
      "description": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries (Shruthi Gowda)\n          This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "sinceVersion": "12.16",
      "contributor": "Shruthi Gowda"
    },
    {
      "title": "Silence deprecation warnings when compiling with OpenSSL 3.0.0 or later",
      "description": "Silence deprecation warnings when compiling with OpenSSL 3.0.0 or later (Peter Eisentraut)",
      "sinceVersion": "12.16",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions",
      "description": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions (Tom Lane)\n          This error led to a text-type value being interpreted as an unknown-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the text value.\n          The PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix misbehavior during recursive page split in GiST index build (Heikki Linnakangas)\n          Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "sinceVersion": "12.17",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys (David Rowley)\n          Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "sinceVersion": "12.17",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses (Peter Geoghegan)\n          When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "sinceVersion": "12.17",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows",
      "description": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane)",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema",
      "description": "Don't crash if `cursor_to_xmlschema()()` is applied to a non-data-returning Portal (Boyu Yang)",
      "sinceVersion": "12.17",
      "contributor": "Boyu Yang"
    },
    {
      "title": "Throw the intended error if `pgrowlocks",
      "description": "Throw the intended error if `pgrowlocks()()` is applied to a partitioned table (David Rowley)\n          Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "sinceVersion": "12.17",
      "contributor": "David Rowley"
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Handle invalid indexes more cleanly in assorted SQL functions (Noah Misch)\n          Report an error if `pgstatindex()()`, `pgstatginindex()()`, `pgstathashindex()()`, or `pgstattuple()()` is applied to an invalid index. If `brin_desummarize_range()()`, `brin_summarize_new_values()()`, `brin_summarize_range()()`, or `gin_clean_pending_list()()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed CREATE INDEX had left behind.",
      "sinceVersion": "12.17",
      "contributor": "Noah Misch"
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector",
      "description": "Avoid premature memory allocation failure with long inputs to `to_tsvector()()` (Tom Lane)",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix over-allocation of the constructed tsvector in `tsvectorrecv",
      "description": "Fix over-allocation of the constructed tsvector in `tsvectorrecv()()` (Denis Erokhin)\n          If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished tsvector. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "sinceVersion": "12.17",
      "contributor": "Denis Erokhin"
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit",
      "description": "Fix incorrect coding in `gtsvector_picksplit()()` (Alexander Lakhin)\n          This could lead to poor page-split decisions in GiST indexes on tsvector columns.",
      "sinceVersion": "12.17",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix COMMIT AND CHAIN/ROLLBACK AND CHAIN to work properly when there is an unreleased savepoint",
      "description": "Fix COMMIT AND CHAIN/ROLLBACK AND CHAIN to work properly when there is an unreleased savepoint (Liu Xiang, Tom Lane)\n          Instead of propagating the current transaction's properties to the new transaction, they propagated some previous transaction's properties.",
      "sinceVersion": "12.17",
      "contributor": "Liu Xiang, Tom Lane"
    },
    {
      "title": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value",
      "description": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value (Xing Guo, Aleksander Alekseev, Tom Lane)\n          No built-in parameter fits this description, but an extension could define such a parameter.",
      "sinceVersion": "12.17",
      "contributor": "Xing Guo, Aleksander Alekseev, Tom Lane"
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables (Tom Lane)\n          This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system",
      "description": "Avoid improper response to shutdown signals in child processes just forked by `system()()` (Nathan Bossart)\n          This fix avoids a race condition in which a child process that has been forked off by `system()()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "sinceVersion": "12.17",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Cope with torn reads of pg_control in frontend programs",
      "description": "Cope with torn reads of pg_control in frontend programs (Thomas Munro)\n          On some file systems, reading pg_control may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "sinceVersion": "12.17",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid torn reads of pg_control in relevant SQL functions",
      "description": "Avoid torn reads of pg_control in relevant SQL functions (Thomas Munro)\n          Acquire the appropriate lock before reading pg_control, to ensure we get a consistent view of that file.",
      "sinceVersion": "12.17",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "Avoid integer overflow when computing size of backend activity string array (Jakub Wartak)\n          On 64-bit machines we will allow values of track_activity_query_size large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "sinceVersion": "12.17",
      "contributor": "Jakub Wartak"
    },
    {
      "title": "Track the dependencies of cached CALL statements, and re-plan them when needed",
      "description": "Track the dependencies of cached CALL statements, and re-plan them when needed (Tom Lane)\n          DDL commands, such as replacement of a function that has been inlined into a CALL argument, can create the need to re-plan a CALL that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels",
      "description": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels (Richard Guo)\n          This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "sinceVersion": "12.17",
      "contributor": "Richard Guo"
    },
    {
      "title": "Avoid “record type has not been registered” failure when deparsing a view that contains references to fields of composite constants",
      "description": "Avoid “record type has not been registered” failure when deparsing a view that contains references to fields of composite constants (Tom Lane)",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow extracting fields from a RECORD-type `ROW",
      "description": "Allow extracting fields from a RECORD-type `ROW()` expression (Tom Lane)\n          SQL code that knows that we name such fields `f1`, `f2`, etc can use those names to extract fields from the expression. This change was originally made in version 13, and is now being back-patched into older branches to support tests for a related bug.",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error-handling bug in RECORD type cache management",
      "description": "Fix error-handling bug in RECORD type cache management (Thomas Munro)\n          An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "sinceVersion": "12.17",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error",
      "description": "Fix assertion failure when logical decoding is retried in the same session after an error (Hou Zhijie)",
      "sinceVersion": "12.17",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Treat out-of-memory failures as fatal while reading WAL (Michael Paquier)\n          Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "sinceVersion": "12.17",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field",
      "description": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier)",
      "sinceVersion": "12.17",
      "contributor": "Thomas Munro, Michael Paquier"
    },
    {
      "title": "Ensure that standby-mode WAL recovery reports an error when an invalid page header is found",
      "description": "Ensure that standby-mode WAL recovery reports an error when an invalid page header is found (Yugo Nagata, Kyotaro Horiguchi)",
      "sinceVersion": "12.17",
      "contributor": "Yugo Nagata, Kyotaro Horiguchi"
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis (Tom Lane)\n          Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as SET TRANSACTION ISOLATION LEVEL.",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Keep by-reference attmissingval values in a long-lived context while they are being used",
      "description": "Keep by-reference attmissingval values in a long-lived context while they are being used (Andrew Dunstan)\n          This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "sinceVersion": "12.17",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Recalculate the effective value of search_path after ALTER ROLE",
      "description": "Recalculate the effective value of search_path after ALTER ROLE (Jeff Davis)\n          This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "sinceVersion": "12.17",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish",
      "description": "Fix order of operations in `GenericXLogFinish()` (Jeff Davis)\n          This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (contrib/bloom does, for example).",
      "sinceVersion": "12.17",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling",
      "description": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin)",
      "sinceVersion": "12.17",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables (Euler Taveira, Tom Lane)\n          Formerly, only the table-level ACL would get restored if both types were present.",
      "sinceVersion": "12.17",
      "contributor": "Euler Taveira, Tom Lane"
    },
    {
      "title": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types",
      "description": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types (Álvaro Herrera)\n          These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "sinceVersion": "12.17",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg_basebackup",
      "description": "Avoid generating invalid temporary slot names in pg_basebackup (Jelte Fennema)\n          This has only been seen to occur when the server connection runs through pgbouncer.",
      "sinceVersion": "12.17",
      "contributor": "Jelte Fennema"
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows",
      "description": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch)",
      "sinceVersion": "12.17",
      "contributor": "Noah Misch"
    },
    {
      "title": "In contrib/amcheck, do not report interrupted page deletion as corruption",
      "description": "In contrib/amcheck, do not report interrupted page deletion as corruption (Noah Misch)\n          This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before VACUUM had cleaned things up.",
      "sinceVersion": "12.17",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed",
      "description": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Dean Rasheed)\n          Such an indexscan failed to return all the entries it should.",
      "sinceVersion": "12.17",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Add support for LLVM 16 and 17",
      "description": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "12.17",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Suppress assorted build-time warnings on recent macOS (Tom Lane)\n          Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the -multiply_defined suppress linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove `PHOT`",
      "description": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list (Tom Lane)\n          Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "sinceVersion": "12.17",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "Fix memory leak when performing JIT inlining (Andres Freund, Daniel Gustafsson)\n          There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "sinceVersion": "12.18",
      "contributor": "Andres Freund, Daniel Gustafsson"
    },
    {
      "title": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes",
      "description": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes (Andres Freund)\n          This fixes O(N^2) behavior when the list of waiters is long. In some use-cases this results in substantial throughput improvements.",
      "sinceVersion": "12.18",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Avoid generating incorrect partitioned-join plans (Richard Guo)\n          Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "sinceVersion": "12.18",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars (Tom Lane)\n          This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "Avoid requesting an oversize shared-memory area in parallel hash join (Thomas Munro, Andrei Lepikhov, Alexander Korotkov)\n          The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "sinceVersion": "12.18",
      "contributor": "Thomas Munro, Andrei Lepikhov, Alexander Korotkov"
    },
    {
      "title": "Avoid assertion failures in `heap_update",
      "description": "Avoid assertion failures in `heap_update()()` and `heap_delete()()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck (Alexander Lakhin)\n          This error had no impact in non-assert builds.",
      "sinceVersion": "12.18",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree",
      "description": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree (Tender Wang)\n          If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "sinceVersion": "12.18",
      "contributor": "Tender Wang"
    },
    {
      "title": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands",
      "description": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands (Tender Wang, Michael Paquier)",
      "sinceVersion": "12.18",
      "contributor": "Tender Wang, Michael Paquier"
    },
    {
      "title": "Properly lock the associated table during DROP STATISTICS",
      "description": "Properly lock the associated table during DROP STATISTICS (Tomas Vondra)\n          Failure to acquire the lock could result in “tuple concurrently deleted” errors if the DROP executes concurrently with ANALYZE.",
      "sinceVersion": "12.18",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "Detect that a new catalog cache entry became stale while detoasting its fields (Tom Lane)\n          We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Fix edge-case integer overflow detection bug on some platforms (Dean Rasheed)\n          Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "sinceVersion": "12.18",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp (Tom Lane)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add more checks for overflow in `interval_mul",
      "description": "Add more checks for overflow in `interval_mul()()` and `interval_div()()` (Dean Rasheed)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "12.18",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context (Tom Lane)\n          Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Match collation too when matching an existing index to a new partitioned index (Peter Eisentraut)\n          Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "sinceVersion": "12.18",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page (Fei Changhong, Heikki Linnakangas)\n          The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "sinceVersion": "12.18",
      "contributor": "Fei Changhong, Heikki Linnakangas"
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "Avoid premature release of buffer pin in GIN index insertion (Tom Lane)\n          If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Avoid failure with partitioned SP-GiST indexes (Tom Lane)\n          Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "Fix ownership change reporting for large objects (Tom Lane)\n          A no-op ALTER LARGE OBJECT OWNER command (that is, one selecting the existing owner) passed the wrong class ID to the PostAlterHook, probably confusing any extension using that hook.",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions (Fei Changhong)\n          The startedInRecovery flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "sinceVersion": "12.18",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription (Shlok Kyal)\n          One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "sinceVersion": "12.18",
      "contributor": "Shlok Kyal"
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "Return the correct status code when a new client disconnects without responding to the server's password challenge (Liu Lang, Tom Lane)\n          In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use ClientAuthentication_hook.",
      "sinceVersion": "12.18",
      "contributor": "Liu Lang, Tom Lane"
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Fix incompatibility with OpenSSL 3.2 (Tristan Partin, Bo Andreson)\n          Use the BIO “app_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "sinceVersion": "12.18",
      "contributor": "Tristan Partin, Bo Andreson"
    },
    {
      "title": "Be more wary about OpenSSL not setting errno on error",
      "description": "Be more wary about OpenSSL not setting errno on error (Tom Lane)\n          If errno isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR`",
      "description": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov)",
      "sinceVersion": "12.18",
      "contributor": "Alexander Kuzmenkov"
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads",
      "description": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier)",
      "sinceVersion": "12.18",
      "contributor": "Willi Mann, Michael Paquier"
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "Fix timing-dependent failure in GSSAPI data transmission (Tom Lane)\n          When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped (Rian McGuire, Tom Lane)\n          This conforms to the behavior for other dependent objects such as indexes.",
      "sinceVersion": "12.18",
      "contributor": "Rian McGuire, Tom Lane"
    },
    {
      "title": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index",
      "description": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane)",
      "sinceVersion": "12.18",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Report a better error when contrib/pageinspect's `hash_bitmap_info",
      "description": "Report a better error when contrib/pageinspect's `hash_bitmap_info()()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier)",
      "sinceVersion": "12.18",
      "contributor": "Alexander Lakhin, Michael Paquier"
    },
    {
      "title": "Report a better error when contrib/pgstattuple's `pgstathashindex",
      "description": "Report a better error when contrib/pgstattuple's `pgstathashindex()()` function is applied to a partitioned hash index (Alexander Lakhin)",
      "sinceVersion": "12.18",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress",
      "description": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress (Kyotaro Horiguchi)\n          When launching a child process via cmd.exe, pass the /D flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "sinceVersion": "12.18",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later",
      "description": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane)",
      "sinceVersion": "12.18",
      "contributor": "Tom Lane"
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Suppress compiler warnings from Python's header files (Peter Eisentraut, Tom Lane)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "12.18",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18",
      "description": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro)",
      "sinceVersion": "12.18",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon.",
      "sinceVersion": "12.18",
      "contributor": null
    },
    {
      "title": "Ensure that index-only scans on name columns return a fully-padded value",
      "description": "Ensure that index-only scans on name columns return a fully-padded value (David Rowley)\n          The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "sinceVersion": "12.19",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type",
      "description": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type (Tom Lane)\n          Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause (David Rowley)\n          A NULL value satisfies a clause such as ``boolcol` IS NOT FALSE`, so pruning away a partition containing NULLs yielded incorrect answers.",
      "sinceVersion": "12.19",
      "contributor": "David Rowley"
    },
    {
      "title": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema",
      "description": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema (Tom Lane)\n          Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan",
      "description": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan (Melanie Plageman)\n          Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "sinceVersion": "12.19",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "Avoid deadlock during removal of orphaned temporary tables (Mikhail Zhilin)\n          If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "sinceVersion": "12.19",
      "contributor": "Mikhail Zhilin"
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "Avoid race condition while examining per-relation frozen-XID values (Noah Misch)\n          VACUUM's computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another VACUUM.",
      "sinceVersion": "12.19",
      "contributor": "Noah Misch"
    },
    {
      "title": "Disallow converting a table to a view within an outer SQL command that is using that table",
      "description": "Disallow converting a table to a view within an outer SQL command that is using that table (Tom Lane)\n          This avoids possible crashes.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level (Tom Lane)\n          In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to UNION ALL trees that have constant outputs for the join column in some SELECT arms.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "Avoid use of already-freed data while planning partition-wise joins under GEQO (Tom Lane)\n          This would typically end in a crash or unexpected error message.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages",
      "description": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages (David Rowley)",
      "sinceVersion": "12.19",
      "contributor": "David Rowley"
    },
    {
      "title": "Be more careful with RECORD-returning functions in `FROM`",
      "description": "Be more careful with RECORD-returning functions in `FROM` (Tom Lane)\n          The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "Fix confusion about the return rowtype of SQL-language procedures (Tom Lane)\n          A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add protective stack depth checks to some recursive functions",
      "description": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin)",
      "sinceVersion": "12.19",
      "contributor": "Egor Chindyaskin"
    },
    {
      "title": "Detect integer overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect integer overflow when adding or subtracting an interval to/from a timestamp (Joseph Koshakow)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "12.19",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Avoid race condition in `pg_get_expr",
      "description": "Avoid race condition in `pg_get_expr()()` (Tom Lane)\n          If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Fix detection of old transaction IDs in XID status functions (Karina Litskevich)\n          Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()()` or `txid_status()()`.",
      "sinceVersion": "12.19",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait",
      "description": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait()` (Etsuro Fujita)",
      "sinceVersion": "12.19",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Throw an error if an index is accessed while it is being reindexed (Tom Lane)\n          Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB",
      "description": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas)",
      "sinceVersion": "12.19",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "Disconnect if a new server session's client socket cannot be put into non-blocking mode (Heikki Linnakangas)\n          It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "sinceVersion": "12.19",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "Fix inadequate error reporting with OpenSSL 3.0.0 and later (Heikki Linnakangas, Tom Lane)\n          System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "sinceVersion": "12.19",
      "contributor": "Heikki Linnakangas, Tom Lane"
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain",
      "description": "Avoid concurrent calls to `bindtextdomain()()` in libpq and ecpglib (Tom Lane)\n          Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line",
      "description": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane)",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings",
      "description": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane)",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc",
      "description": "Ensure that the string result of ecpg's `intoasc()()` function is correctly zero-terminated (Oleg Tselebrovskiy)",
      "sinceVersion": "12.19",
      "contributor": "Oleg Tselebrovskiy"
    },
    {
      "title": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords",
      "description": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords (Daniel Gustafsson, Álvaro Herrera)",
      "sinceVersion": "12.19",
      "contributor": "Daniel Gustafsson, Álvaro Herrera"
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments",
      "description": "Fix PL/pgSQL's parsing of single-line comments (`--`-style comments) following expressions (Erik Wienhold, Tom Lane)\n          This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL CASE statement.",
      "sinceVersion": "12.19",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "In contrib/amcheck, don't report false match failures due to short- versus long-header values",
      "description": "In contrib/amcheck, don't report false match failures due to short- versus long-header values (Andrey Borodin, Michael Zhilin)\n          A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "sinceVersion": "12.19",
      "contributor": "Andrey Borodin, Michael Zhilin"
    },
    {
      "title": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant",
      "description": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant (David Rowley)\n          This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position `N` is not in select list” errors.",
      "sinceVersion": "12.19",
      "contributor": "David Rowley"
    },
    {
      "title": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC`",
      "description": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC` (Tom Lane)\n          This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "sinceVersion": "12.19",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2",
      "description": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval)",
      "sinceVersion": "12.19",
      "contributor": "Dmitry Koval"
    },
    {
      "title": "Fix incompatibility with LLVM 18",
      "description": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "12.19",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Allow `make check` to work with the musl C library",
      "description": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane)",
      "sinceVersion": "12.19",
      "contributor": "Thomas Munro, Bruce Momjian, Tom Lane"
    },
    {
      "title": "Fix failure in ALTER TABLE when a column referenced in a `GENERATED` expression has been added or changed in type earlier in the same ALTER command",
      "description": "Fix failure in ALTER TABLE when a column referenced in a `GENERATED` expression has been added or changed in type earlier in the same ALTER command (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to insert default values for “missing” attributes during tuple conversion",
      "description": "Fix failure to insert default values for “missing” attributes during tuple conversion (Vik Fearing, Andrew Gierth)\n          This could result in values incorrectly reading as NULL, when they come from columns that had been added by `ALTER TABLE ADD COLUMN` with a constant default.",
      "sinceVersion": "12.2",
      "contributor": "Vik Fearing, Andrew Gierth"
    },
    {
      "title": "Add missing permissions checks for ALTER ... DEPENDS ON EXTENSION",
      "description": "Add missing permissions checks for ALTER ... DEPENDS ON EXTENSION (Álvaro Herrera)\n          Marking an object as dependent on an extension did not have any privilege check whatsoever. This oversight allowed any user to mark routines, triggers, materialized views, or indexes as droppable by anyone able to drop an extension. Require that the calling user own the specified object (and hence have privilege to drop it). (CVE-2020-1720)",
      "sinceVersion": "12.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix TRUNCATE ... CASCADE to ensure all relevant partitions are truncated",
      "description": "Fix TRUNCATE ... CASCADE to ensure all relevant partitions are truncated (Jehan-Guillaume de Rorthais)\n          If a partition of a partitioned table is truncated with the `CASCADE` option, and the partitioned table has a foreign-key reference from another table, that table must also be truncated. The need to check this was missed if the referencing table was itself partitioned, possibly allowing rows to survive that violate the foreign-key constraint.\n          Hence, if you have foreign key constraints between partitioned tables, and you have done any partition-level TRUNCATE on the referenced table, you should check to see if any foreign key violations exist. The simplest way is to add a new instance of the foreign key constraint (and, once that succeeds, drop it or the original constraint). That may be prohibitive from a locking standpoint, however, in which case you might prefer to manually query for unmatched rows.",
      "sinceVersion": "12.2",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix failure to attach foreign key constraints to sub-partitions",
      "description": "Fix failure to attach foreign key constraints to sub-partitions (Jehan-Guillaume de Rorthais)\n          When adding a partition to a level below the first level of a multi-level partitioned table, foreign key constraints referencing the top partitioned table were not cloned to the new partition, leading to possible constraint violations later. Detaching and re-attaching the new partition is the cheapest way to fix this. However, if there are many partitions to be fixed, adding a new instance of the foreign key constraint might be preferable.",
      "sinceVersion": "12.2",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix possible crash during concurrent update on a partitioned table or inheritance tree",
      "description": "Fix possible crash during concurrent update on a partitioned table or inheritance tree (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that row triggers on partitioned tables are correctly cloned to sub-partitions when appropriate",
      "description": "Ensure that row triggers on partitioned tables are correctly cloned to sub-partitions when appropriate (Álvaro Herrera)\n          User-defined triggers (but not triggers for foreign key or deferred unique constraints) might be missed when creating or attaching a partition.",
      "sinceVersion": "12.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix logical replication subscriber code to execute per-column `UPDATE` triggers when appropriate",
      "description": "Fix logical replication subscriber code to execute per-column `UPDATE` triggers when appropriate (Peter Eisentraut)",
      "sinceVersion": "12.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid failure in logical decoding when a large transaction must be spilled into many separate temporary files",
      "description": "Avoid failure in logical decoding when a large transaction must be spilled into many separate temporary files (Amit Khandekar)",
      "sinceVersion": "12.2",
      "contributor": "Amit Khandekar"
    },
    {
      "title": "Fix possible crash or data corruption when a logical replication subscriber processes a row update",
      "description": "Fix possible crash or data corruption when a logical replication subscriber processes a row update (Tom Lane, Tomas Vondra)\n          This bug caused visible problems only if the subscriber's table contained columns that were not being copied from the publisher and had pass-by-reference data types.",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane, Tomas Vondra"
    },
    {
      "title": "Fix crash in logical replication subscriber after DDL changes on a subscribed relation",
      "description": "Fix crash in logical replication subscriber after DDL changes on a subscribed relation (Jehan-Guillaume de Rorthais, Vignesh C)",
      "sinceVersion": "12.2",
      "contributor": "Jehan-Guillaume de Rorthais, Vignesh C"
    },
    {
      "title": "Fix failure in logical replication publisher after a database crash and restart",
      "description": "Fix failure in logical replication publisher after a database crash and restart (Vignesh C)",
      "sinceVersion": "12.2",
      "contributor": "Vignesh C"
    },
    {
      "title": "Ensure that the effect of `pg_replication_slot_advance",
      "description": "Ensure that the effect of `pg_replication_slot_advance()()` on a physical replication slot will persist across restarts (Alexey Kondratov, Michael Paquier)",
      "sinceVersion": "12.2",
      "contributor": "Alexey Kondratov, Michael Paquier"
    },
    {
      "title": "Improve efficiency of logical replication with `REPLICA IDENTITY FULL`",
      "description": "Improve efficiency of logical replication with `REPLICA IDENTITY FULL` (Konstantin Knizhnik)\n          When searching for an existing tuple during an update or delete operation, return the first matching tuple not the last one.",
      "sinceVersion": "12.2",
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Fix base backup to handle database OIDs larger than `INT32_MAX`",
      "description": "Fix base backup to handle database OIDs larger than `INT32_MAX` (Peter Eisentraut)",
      "sinceVersion": "12.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Ensure parallel plans are always shut down at the correct time",
      "description": "Ensure parallel plans are always shut down at the correct time (Kyotaro Horiguchi)\n          This oversight is known to result in “temporary file leak” warnings from multi-batch parallel hash joins.",
      "sinceVersion": "12.2",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Prevent premature shutdown of a Gather or GatherMerge plan node that is underneath a Limit node",
      "description": "Prevent premature shutdown of a Gather or GatherMerge plan node that is underneath a Limit node (Amit Kapila)\n          This avoids failure if such a plan node needs to be scanned more than once, as for instance if it is on the inside of a nestloop.",
      "sinceVersion": "12.2",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Improve efficiency of parallel hash join on CPUs with many cores",
      "description": "Improve efficiency of parallel hash join on CPUs with many cores (Gang Deng, Thomas Munro)",
      "sinceVersion": "12.2",
      "contributor": "Gang Deng, Thomas Munro"
    },
    {
      "title": "Avoid crash in parallel CREATE INDEX when there are no free dynamic shared memory slots",
      "description": "Avoid crash in parallel CREATE INDEX when there are no free dynamic shared memory slots (Thomas Munro)\n          Fall back to a non-parallel index build, instead.",
      "sinceVersion": "12.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid memory leak when there are no free dynamic shared memory slots",
      "description": "Avoid memory leak when there are no free dynamic shared memory slots (Thomas Munro)",
      "sinceVersion": "12.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Ignore the `CONCURRENTLY` option when performing an index creation, drop, or rebuild on a temporary table",
      "description": "Ignore the `CONCURRENTLY` option when performing an index creation, drop, or rebuild on a temporary table (Michael Paquier, Heikki Linnakangas, Andres Freund)\n          This avoids strange failures if the temporary table has an `ON COMMIT` action. There is no benefit in using `CONCURRENTLY` for a temporary table anyway, since other sessions cannot access the table, making the extra processing pointless.",
      "sinceVersion": "12.2",
      "contributor": "Michael Paquier, Heikki Linnakangas, Andres Freund"
    },
    {
      "title": "Fix possible failure when resetting expression indexes on temporary tables that are marked `ON COMMIT DELETE ROWS`",
      "description": "Fix possible failure when resetting expression indexes on temporary tables that are marked `ON COMMIT DELETE ROWS` (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible crash in BRIN index operations with box, range and inet data types",
      "description": "Fix possible crash in BRIN index operations with box, range and inet data types (Heikki Linnakangas)",
      "sinceVersion": "12.2",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix crash during recursive page split in GiST index build",
      "description": "Fix crash during recursive page split in GiST index build (Heikki Linnakangas)",
      "sinceVersion": "12.2",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix handling of deleted pages in GIN indexes",
      "description": "Fix handling of deleted pages in GIN indexes (Alexander Korotkov)\n          Avoid possible deadlocks, incorrect updates of a deleted page's state, and failure to traverse through a recently-deleted page.",
      "sinceVersion": "12.2",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix possible crash with a SubPlan",
      "description": "Fix possible crash with a SubPlan (sub-`SELECT`) within a multi-row `VALUES` list (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unlikely panic in the checkpointer process, caused by opening relation segments that might already have been removed",
      "description": "Fix unlikely panic in the checkpointer process, caused by opening relation segments that might already have been removed (Thomas Munro)",
      "sinceVersion": "12.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix crash after FileClose",
      "description": "Fix crash after FileClose() failure (Noah Misch)\n          This issue could only be observed with data_sync_retry enabled, since otherwise FileClose() failure would be reported as a PANIC.",
      "sinceVersion": "12.2",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix handling of multiple `AFTER ROW` triggers on a foreign table",
      "description": "Fix handling of multiple `AFTER ROW` triggers on a foreign table (Etsuro Fujita)",
      "sinceVersion": "12.2",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix unlikely crash with pass-by-reference aggregate transition states",
      "description": "Fix unlikely crash with pass-by-reference aggregate transition states (Andres Freund, Teodor Sigaev)",
      "sinceVersion": "12.2",
      "contributor": "Andres Freund, Teodor Sigaev"
    },
    {
      "title": "Improve error reporting in `to_date",
      "description": "Improve error reporting in `to_date()()` and `to_timestamp()()` (Tom Lane, Álvaro Herrera)\n          Reports about incorrect month or day names in input strings could truncate the input in the middle of a multi-byte character, leading to an improperly encoded error message that could cause follow-on failures. Truncate at the next whitespace instead.",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Fix off-by-one result for `EXTRACT",
      "description": "Fix off-by-one result for `EXTRACT(ISOYEAR FROM `timestamp`)` for BC dates (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the `&lt;&gt;` operator for type char reports indeterminate-collation errors as such, rather than as “cache lookup failed for collation 0”",
      "description": "Ensure that the `&lt;&gt;` operator for type char reports indeterminate-collation errors as such, rather than as “cache lookup failed for collation 0” (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid treating TID scans as sequential scans",
      "description": "Avoid treating TID scans as sequential scans (Tatsuhito Kasahara)\n          A refactoring oversight caused TID scans (selection by CTID) to be counted as sequential scans in the statistics views, and to take whole-table predicate locks as sequential scans do. The latter behavior could cause unnecessary serialization errors in serializable transaction mode.",
      "sinceVersion": "12.2",
      "contributor": "Tatsuhito Kasahara"
    },
    {
      "title": "Avoid stack overflow in `information_schema` views when a self-referential view exists in the system catalogs",
      "description": "Avoid stack overflow in `information_schema` views when a self-referential view exists in the system catalogs (Tom Lane)\n          A self-referential view can't work; it will always result in infinite recursion. We handled that situation correctly when trying to execute the view, but not when inquiring whether it is automatically updatable.",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that walsender processes always show NULL for transaction start time in pg_stat_activity",
      "description": "Ensure that walsender processes always show NULL for transaction start time in pg_stat_activity (Álvaro Herrera)\n          Previously, the xact_start column would sometimes show the process start time.",
      "sinceVersion": "12.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Reduce spinlock contention when there are many active walsender processes",
      "description": "Reduce spinlock contention when there are many active walsender processes (Pierre Ducroquet)",
      "sinceVersion": "12.2",
      "contributor": "Pierre Ducroquet"
    },
    {
      "title": "Fix placement of “Subplans Removed” field in EXPLAIN output",
      "description": "Fix placement of “Subplans Removed” field in EXPLAIN output (Daniel Gustafsson, Tom Lane)\n          In non-text output formats, this field was emitted inside the “Plans” sub-group, resulting in syntactically invalid output. Attach it to the parent Append or MergeAppend plan node as intended. This causes the field to change position in text output format too: if there are any InitPlans attached to the same plan node, “Subplans Removed” will now appear before those.",
      "sinceVersion": "12.2",
      "contributor": "Daniel Gustafsson, Tom Lane"
    },
    {
      "title": "Fix EXPLAIN's `SETTINGS` option to print as empty in non-text output formats",
      "description": "Fix EXPLAIN's `SETTINGS` option to print as empty in non-text output formats (Tom Lane)\n          In the non-text output formats, fields are supposed to appear when requested, even if they have empty or zero values.",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner errors induced by overly-aggressive collapsing of joins to single-row subqueries",
      "description": "Fix planner errors induced by overly-aggressive collapsing of joins to single-row subqueries (Tom Lane)\n          This mistake led to errors such as “failed to construct the join relation”.",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “no = operator for opfamily `NNNN`” planner error when trying to match a `LIKE` or regex pattern-match operator to a binary-compatible index opclass",
      "description": "Fix “no = operator for opfamily `NNNN`” planner error when trying to match a `LIKE` or regex pattern-match operator to a binary-compatible index opclass (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge-case crashes and misestimations in selectivity calculations for the `&lt;@` and `@&gt;` range operators",
      "description": "Fix edge-case crashes and misestimations in selectivity calculations for the `&lt;@` and `@&gt;` range operators (Michael Paquier, Andrey Borodin, Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Michael Paquier, Andrey Borodin, Tom Lane"
    },
    {
      "title": "Fix incorrect estimation for `OR` clauses when using most-common-value extended statistics",
      "description": "Fix incorrect estimation for `OR` clauses when using most-common-value extended statistics (Tomas Vondra)",
      "sinceVersion": "12.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Ignore system columns when applying most-common-value extended statistics",
      "description": "Ignore system columns when applying most-common-value extended statistics (Tomas Vondra)\n          This prevents “negative bitmapset member not allowed” planner errors for affected queries.",
      "sinceVersion": "12.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix BRIN index logic to support hypothetical BRIN indexes",
      "description": "Fix BRIN index logic to support hypothetical BRIN indexes (Julien Rouhaud, Heikki Linnakangas)\n          Previously, if an “index adviser” extension tried to get the planner to produce a plan involving a hypothetical BRIN index, that would fail, because the BRIN cost estimation code would always try to physically access the index's metapage. Now it checks to see if the index is only hypothetical, and uses default assumptions about the index parameters if so.",
      "sinceVersion": "12.2",
      "contributor": "Julien Rouhaud, Heikki Linnakangas"
    },
    {
      "title": "Improve error reporting for attempts to use automatic updating of views with conditional `INSTEAD` rules",
      "description": "Improve error reporting for attempts to use automatic updating of views with conditional `INSTEAD` rules (Dean Rasheed)\n          This has never been supported, but previously the error was thrown only at execution time, so that it could be masked by planner errors.",
      "sinceVersion": "12.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent a composite type from being included in itself indirectly via a range type",
      "description": "Prevent a composite type from being included in itself indirectly via a range type (Tom Lane, Julien Rouhaud)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane, Julien Rouhaud"
    },
    {
      "title": "Disallow partition key expressions that return pseudo-types, such as record",
      "description": "Disallow partition key expressions that return pseudo-types, such as record (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error reporting for index expressions of prohibited types",
      "description": "Fix error reporting for index expressions of prohibited types (Amit Langote)",
      "sinceVersion": "12.2",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix dumping of views that contain only a `VALUES` list to handle cases where a view output column has been renamed",
      "description": "Fix dumping of views that contain only a `VALUES` list to handle cases where a view output column has been renamed (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that data types and collations used in `XMLTABLE` constructs are accounted for when computing dependencies of a view or rule",
      "description": "Ensure that data types and collations used in `XMLTABLE` constructs are accounted for when computing dependencies of a view or rule (Tom Lane)\n          Previously it was possible to break a view using `XMLTABLE` by dropping a type, if the type was not otherwise referenced in the view. This fix does not correct the dependencies already recorded for existing views, only for newly-created ones.",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent unwanted downcasing and truncation of RADIUS authentication parameters",
      "description": "Prevent unwanted downcasing and truncation of RADIUS authentication parameters (Marcos David)\n          The pg_hba.conf parser mistakenly treated these fields as SQL identifiers, which in general they aren't.",
      "sinceVersion": "12.2",
      "contributor": "Marcos David"
    },
    {
      "title": "Transmit incoming NOTIFY messages to the client before sending `ReadyForQuery`, rather than after",
      "description": "Transmit incoming NOTIFY messages to the client before sending `ReadyForQuery`, rather than after (Tom Lane)\n          This change ensures that, with libpq and other client libraries that act similarly to it, any notifications received during a transaction will be available by the time the client thinks the transaction is complete. This probably makes no difference in practical applications (which would need to cope with asynchronous notifications in any case); but it makes it easier to build test cases with reproducible behavior.",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bugs in handling of non-blocking I/O when using GSSAPI encryption",
      "description": "Fix bugs in handling of non-blocking I/O when using GSSAPI encryption (Tom Lane)\n          These errors could result in dropping data (usually leading to subsequent wire-protocol-violation errors) or in a “livelock” situation where a sending process goes to sleep although not all its data has been sent. Moreover, libpq failed to keep separate encryption state for each connection, creating the possibility for failures in applications using multiple encrypted database connections.",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow libpq to parse all GSS-related connection parameters even when the GSSAPI code hasn't been compiled in",
      "description": "Allow libpq to parse all GSS-related connection parameters even when the GSSAPI code hasn't been compiled in (Tom Lane)\n          This makes the behavior similar to our SSL support, where it was long ago deemed to be a good idea to always accept all the related parameters, even if some are ignored or restricted due to lack of the feature in a particular build.",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect handling of `%b` and `%B` format codes in ecpg's `PGTYPEStimestamp_fmt_asc",
      "description": "Fix incorrect handling of `%b` and `%B` format codes in ecpg's `PGTYPEStimestamp_fmt_asc()()` function (Tomas Vondra)\n          Due to an off-by-one error, these codes would print the wrong month name, or possibly crash.",
      "sinceVersion": "12.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid crash after an out-of-memory failure in ecpglib",
      "description": "Avoid crash after an out-of-memory failure in ecpglib (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix parallel pg_dump/pg_restore to more gracefully handle failure to create worker processes",
      "description": "Fix parallel pg_dump/pg_restore to more gracefully handle failure to create worker processes (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent possible crash or lockup when attempting to terminate a parallel pg_dump/pg_restore run via a signal",
      "description": "Prevent possible crash or lockup when attempting to terminate a parallel pg_dump/pg_restore run via a signal (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_upgrade, look inside arrays and ranges while searching for non-upgradable data types in tables",
      "description": "In pg_upgrade, look inside arrays and ranges while searching for non-upgradable data types in tables (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Apply more thorough syntax checking to createuser's --connection-limit option",
      "description": "Apply more thorough syntax checking to createuser's --connection-limit option (Álvaro Herrera)",
      "sinceVersion": "12.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Cope with changes of the specific type referenced by a PL/pgSQL composite-type variable in more cases",
      "description": "Cope with changes of the specific type referenced by a PL/pgSQL composite-type variable in more cases (Ashutosh Sharma, Tom Lane)\n          Dropping and re-creating the composite type referenced by a PL/pgSQL variable could lead to “could not open relation with OID `NNNN`” errors.",
      "sinceVersion": "12.2",
      "contributor": "Ashutosh Sharma, Tom Lane"
    },
    {
      "title": "Avoid crash in postgres_fdw when trying to send a command like `UPDATE remote_tab SET",
      "description": "Avoid crash in postgres_fdw when trying to send a command like `UPDATE remote_tab SET (x,y) = (SELECT ...)` to the remote server (Tom Lane)",
      "sinceVersion": "12.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/dict_int, reject maxlen settings less than one",
      "description": "In contrib/dict_int, reject maxlen settings less than one (Tomas Vondra)\n          This prevents a possible crash with silly settings for that parameter.",
      "sinceVersion": "12.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Disallow NULL category values in contrib/tablefunc's `crosstab",
      "description": "Disallow NULL category values in contrib/tablefunc's `crosstab()()` function (Joe Conway)\n          This case never worked usefully, and it would crash on some platforms.",
      "sinceVersion": "12.2",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix configure's probe for OpenSSL's `SSL_clear_options",
      "description": "Fix configure's probe for OpenSSL's `SSL_clear_options()()` function so that it works with OpenSSL versions before 1.1.0 (Michael Paquier, Daniel Gustafsson)\n          This problem could lead to failure to set the SSL compression option as desired, when PostgreSQL is built against an old version of OpenSSL.",
      "sinceVersion": "12.2",
      "contributor": "Michael Paquier, Daniel Gustafsson"
    },
    {
      "title": "Mark some timeout and statistics-tracking GUC variables as `PGDLLIMPORT`, to allow extensions to access them on Windows",
      "description": "Mark some timeout and statistics-tracking GUC variables as `PGDLLIMPORT`, to allow extensions to access them on Windows (Pascal Legrand)\n          This applies to `idle_in_transaction_session_timeout`, `lock_timeout`, `statement_timeout`, `track_activities`, `track_counts`, and `track_functions`.",
      "sinceVersion": "12.2",
      "contributor": "Pascal Legrand"
    },
    {
      "title": "Avoid memory leak in sanity checks for “slab” memory contexts",
      "description": "Avoid memory leak in sanity checks for “slab” memory contexts (Tomas Vondra)\n          This isn't an issue for production builds, since they wouldn't ordinarily have memory context checking enabled; but the leak could be quite severe in a debug build.",
      "sinceVersion": "12.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix multiple statistics entries reported by the LWLock statistics mechanism",
      "description": "Fix multiple statistics entries reported by the LWLock statistics mechanism (Fujii Masao)\n          The LWLock statistics code (which is not built by default; it requires compiling with -DLWLOCK_STATS) could report multiple entries for the same LWLock and backend process, as a result of faulty hashtable key creation.",
      "sinceVersion": "12.2",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix race condition that led to delayed delivery of interprocess signals on Windows",
      "description": "Fix race condition that led to delayed delivery of interprocess signals on Windows (Amit Kapila)\n          This caused visible timing oddities in NOTIFY, and perhaps other misbehavior.",
      "sinceVersion": "12.2",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Fix handling of a corner-case error result from Windows' `ReadFile",
      "description": "Fix handling of a corner-case error result from Windows' `ReadFile()()` function (Thomas Munro, Juan José Santamaría Flecha)\n          So far as is known, this oversight just resulted in noisy log messages, not any actual query misbehavior.",
      "sinceVersion": "12.2",
      "contributor": "Thomas Munro, Juan José Santamaría Flecha"
    },
    {
      "title": "On Windows, retry a few times after an `ERROR_ACCESS_DENIED` file access failure",
      "description": "On Windows, retry a few times after an `ERROR_ACCESS_DENIED` file access failure (Alexander Lakhin, Tom Lane)\n          This helps cope with cases where a file open attempt fails because the targeted file is flagged for deletion but not yet actually gone. pg_ctl, for example, frequently failed with such an error when probing to see if the postmaster had shut down yet.",
      "sinceVersion": "12.2",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "On Windows, work around sharing violations for the postmaster's log file when pg_ctl is used to start the postmaster very shortly after it's been stopped, for example by `pg_ctl restart`",
      "description": "On Windows, work around sharing violations for the postmaster's log file when pg_ctl is used to start the postmaster very shortly after it's been stopped, for example by `pg_ctl restart` (Alexander Lakhin)",
      "sinceVersion": "12.2",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Prevent unauthorized code execution during pg_dump",
      "description": "Prevent unauthorized code execution during pg_dump (Masahiko Sawada)\n          An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg_dump session with the privileges of the role running pg_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter restrict_nonsystem_relation_kind that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg_dump to set it when available. Note that the attack is prevented only if both pg_dump and the server it is dumping from are new enough to have this fix.\n          The PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "sinceVersion": "12.20",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children",
      "description": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera)",
      "sinceVersion": "12.20",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints",
      "description": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints (Álvaro Herrera, Tender Wang)\n          When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect coninhcount value. This would cause trouble during any further manipulations of that constraint.",
      "sinceVersion": "12.20",
      "contributor": "Álvaro Herrera, Tender Wang"
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "Fix handling of polymorphic output arguments for procedures (Tom Lane)\n          The SQL CALL statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But CALL in PL/pgSQL worked correctly.)",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix behavior of stable functions called from a CALL statement's argument list",
      "description": "Fix behavior of stable functions called from a CALL statement's argument list (Tom Lane)\n          If the CALL is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect integer overflow in money calculations",
      "description": "Detect integer overflow in money calculations (Joseph Koshakow)\n          None of the arithmetic functions for the money type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "sinceVersion": "12.20",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round",
      "description": "Fix over-aggressive clamping of the scale argument in `round(numeric)()` and `trunc(numeric)()` (Dean Rasheed)\n          These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type numeric.",
      "sinceVersion": "12.20",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent `pg_sequence_last_value",
      "description": "Prevent `pg_sequence_last_value()()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions (Nathan Bossart)\n          Make it return NULL in these cases instead of throwing an error.",
      "sinceVersion": "12.20",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery",
      "description": "Fix parsing of ignored operators in `websearch_to_tsquery()()` (Tom Lane)\n          Per the manual, punctuation in the input of `websearch_to_tsquery()()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Detect another integer overflow case while computing new array dimensions (Joseph Koshakow)\n          Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "sinceVersion": "12.20",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields (Noah Misch)\n          An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the pg_database catalog, so the effects are narrow, but misbehavior is possible.",
      "sinceVersion": "12.20",
      "contributor": "Noah Misch"
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT` (Tom Lane)\n          If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number `N` not found in view targetlist”.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Avoid reporting an unhelpful internal error for incorrect recursive queries (Tom Lane)\n          Rearrange the order of error checks so that we throw an on-point error when a WITH RECURSIVE query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "Don't throw an error if a queued `AFTER` trigger no longer exists (Tom Lane)\n          It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger `NNNN`”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped",
      "description": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped (Tom Lane)\n          If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg_dump dumps for that relation.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates (Tom Lane)\n          If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Refuse to modify a temporary table of another session with `ALTER TABLE` (Tom Lane)\n          Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN",
      "description": "Fix failure to recalculate sub-queries generated from `MIN()()` or `MAX()()` aggregates (Tom Lane)\n          In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "Avoid crashing when a JIT-inlined backend function throws an error (Tom Lane)\n          The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Cope with behavioral changes in libxml2 version 2.13.x (Erik Wienhold, Tom Lane)\n          Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "sinceVersion": "12.20",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "Fix handling of subtransactions of prepared transactions when starting a hot standby server (Heikki Linnakangas)\n          When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "sinceVersion": "12.20",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "Prevent incorrect initialization of logical replication slots (Masahiko Sawada)\n          In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "sinceVersion": "12.20",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "Avoid memory leakage after servicing a notify or sinval interrupt (Tom Lane)\n          The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Avoid possibly missing end-of-input events on Windows sockets (Thomas Munro)\n          Windows reports an FD_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "sinceVersion": "12.20",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "Disable creation of stateful TLS session tickets by OpenSSL (Daniel Gustafsson)\n          This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "sinceVersion": "12.20",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "When replanning a PL/pgSQL “simple expression”, check it's still simple (Tom Lane)\n          Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incompatibility between PL/Perl and Perl 5.40",
      "description": "Fix incompatibility between PL/Perl and Perl 5.40 (Andrew Dunstan)",
      "sinceVersion": "12.20",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix recursive RECORD-returning PL/Python functions",
      "description": "Fix recursive RECORD-returning PL/Python functions (Tom Lane)\n          If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call (Tom Lane)\n          If a PL/Python-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple (Erik Wienhold, Tom Lane)\n          Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "sinceVersion": "12.20",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror",
      "description": "Avoid non-thread-safe usage of `strerror()()` in libpq (Peter Eisentraut)\n          Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "sinceVersion": "12.20",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Ensure that `pg_restore` -l reports dependent TOC entries correctly",
      "description": "Ensure that `pg_restore` -l reports dependent TOC entries correctly (Tom Lane)\n          If -l was specified together with selective-restore options such as -n or -N, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid clashing with system-provided &lt;regex.h&gt; headers",
      "description": "Avoid clashing with system-provided &lt;regex.h&gt; headers (Thomas Munro)\n          This fixes a compilation failure on macOS version 15 and up.",
      "sinceVersion": "12.20",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index",
      "description": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane)",
      "sinceVersion": "12.20",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add pg_dump support for ALTER ... DEPENDS ON EXTENSION",
      "description": "Add pg_dump support for ALTER ... DEPENDS ON EXTENSION (Álvaro Herrera)\n          pg_dump previously ignored dependencies added this way, causing them to be forgotten during dump/restore or pg_upgrade.",
      "sinceVersion": "12.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure that pg_basebackup generates valid tar files",
      "description": "Ensure that pg_basebackup generates valid tar files (Robert Haas)\n          In some cases a partial block of zeroes would be added to the end of the file. While this seems to be harmless with common versions of tar, it's not OK per the POSIX file format spec.",
      "sinceVersion": "12.3",
      "contributor": "Robert Haas"
    },
    {
      "title": "Fix possible failure with `GENERATED` columns",
      "description": "Fix possible failure with `GENERATED` columns (David Rowley)\n          If a `GENERATED` column's value is an exact copy of another column of the table (and it is a pass-by-reference data type), it was possible to crash or insert corrupted data into the table. While it would be rather pointless for a `GENERATED` expression to just duplicate another column, an expression using a function that sometimes returns its input unchanged could create the situation.",
      "sinceVersion": "12.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Handle inheritance of generated columns better",
      "description": "Handle inheritance of generated columns better (Peter Eisentraut)\n          When a table column is inherited during CREATE TABLE ... INHERITS, disallow changing any generation properties when the parent column is already marked `GENERATED`; but allow a child column to be marked `GENERATED` when its parent is not.",
      "sinceVersion": "12.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix cross-column references in CREATE TABLE LIKE INCLUDING GENERATED",
      "description": "Fix cross-column references in CREATE TABLE LIKE INCLUDING GENERATED (Peter Eisentraut)\n          CREATE TABLE ... LIKE failed when trying to copy a `GENERATED` expression that references a physically-later column.",
      "sinceVersion": "12.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Propagate ALTER TABLE ... SET STORAGE to indexes",
      "description": "Propagate ALTER TABLE ... SET STORAGE to indexes (Peter Eisentraut)\n          Non-expression index columns have always copied the attstorage property of their table column at creation. Update them when ALTER TABLE ... SET STORAGE is done, to maintain consistency.",
      "sinceVersion": "12.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Preserve the indisclustered setting of indexes rewritten by ALTER TABLE",
      "description": "Preserve the indisclustered setting of indexes rewritten by ALTER TABLE (Amit Langote, Justin Pryzby)\n          Previously, ALTER TABLE lost track of which index had been used for CLUSTER.",
      "sinceVersion": "12.3",
      "contributor": "Amit Langote, Justin Pryzby"
    },
    {
      "title": "Preserve the replica identity properties of indexes rewritten by ALTER TABLE",
      "description": "Preserve the replica identity properties of indexes rewritten by ALTER TABLE (Quan Zongliang, Peter Eisentraut)",
      "sinceVersion": "12.3",
      "contributor": "Quan Zongliang, Peter Eisentraut"
    },
    {
      "title": "Preserve the indisclustered setting of indexes rebuilt by REINDEX CONCURRENTLY",
      "description": "Preserve the indisclustered setting of indexes rebuilt by REINDEX CONCURRENTLY (Justin Pryzby)",
      "sinceVersion": "12.3",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Lock objects sooner during DROP OWNED BY",
      "description": "Lock objects sooner during DROP OWNED BY (Álvaro Herrera)\n          This avoids failures in race-condition cases where another session is deleting some of the same objects.",
      "sinceVersion": "12.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix error-case processing for CREATE ROLE ... IN ROLE",
      "description": "Fix error-case processing for CREATE ROLE ... IN ROLE (Andrew Gierth)\n          Some error cases would be reported as “unexpected node type” or the like, instead of the intended message.",
      "sinceVersion": "12.3",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Ensure that when a partition is detached, any triggers cloned from its formerly-parent table are removed",
      "description": "Ensure that when a partition is detached, any triggers cloned from its formerly-parent table are removed (Justin Pryzby)",
      "sinceVersion": "12.3",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix crash when `COLLATE` is applied to a non-collatable type in a partition bound expression",
      "description": "Fix crash when `COLLATE` is applied to a non-collatable type in a partition bound expression (Dmitry Dolgov)",
      "sinceVersion": "12.3",
      "contributor": "Dmitry Dolgov"
    },
    {
      "title": "Ensure that unique indexes over partitioned tables match the equality semantics of the partitioning key",
      "description": "Ensure that unique indexes over partitioned tables match the equality semantics of the partitioning key (Guancheng Luo)\n          This would only be an issue with index opclasses that have unusual notions of equality, but it's wrong in theory, so check.",
      "sinceVersion": "12.3",
      "contributor": "Guancheng Luo"
    },
    {
      "title": "Ensure that members of the `pg_read_all_stats` role can read all statistics views, as expected",
      "description": "Ensure that members of the `pg_read_all_stats` role can read all statistics views, as expected (Magnus Hagander)\n          The functions underlying the pg_stat_progress_* views had not gotten this memo.",
      "sinceVersion": "12.3",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Fix full text search to handle NOT above a phrase search correctly",
      "description": "Fix full text search to handle NOT above a phrase search correctly (Tom Lane)\n          Queries such as `!(foo&lt;-&gt;bar)` failed to find matching rows when implemented as a GiST or GIN index search.",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix full text search for cases where a phrase search includes an item with both prefix matching and a weight restriction",
      "description": "Fix full text search for cases where a phrase search includes an item with both prefix matching and a weight restriction (Tom Lane)",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix `ts_headline",
      "description": "Fix `ts_headline()()` to make better headline selections when working with phrase queries (Tom Lane)",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bugs in gin_fuzzy_search_limit processing",
      "description": "Fix bugs in gin_fuzzy_search_limit processing (Adé Heyward, Tom Lane)\n          A small value of gin_fuzzy_search_limit could result in unexpected slowness due to unintentionally rescanning the same index page many times. Another code path failed to apply the intended filtering at all, possibly returning too many values.",
      "sinceVersion": "12.3",
      "contributor": "Adé Heyward, Tom Lane"
    },
    {
      "title": "Allow input of type circle to accept the format “`",
      "description": "Allow input of type circle to accept the format “`(`x`,y`),`r`” as the documentation says it does (David Zhang)",
      "sinceVersion": "12.3",
      "contributor": "David Zhang"
    },
    {
      "title": "Make the `get_bit",
      "description": "Make the `get_bit()()` and `set_bit()()` functions cope with bytea strings longer than 256MB (Movead Li)\n          Since the bit number argument is only int4, it's impossible to use these functions to access bits beyond the first 256MB of a long bytea. We'll widen the argument to int8 in v13, but in the meantime, allow these functions to work on the initial substring of a long bytea.",
      "sinceVersion": "12.3",
      "contributor": "Movead Li"
    },
    {
      "title": "Ignore file-not-found errors in `pg_ls_waldir",
      "description": "Ignore file-not-found errors in `pg_ls_waldir()()` and allied functions (Tom Lane)\n          This prevents a race condition failure if a file is removed between when we see its directory entry and when we attempt to `stat()()` it.",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possibly leaking an open-file descriptor for a directory in `pg_ls_dir",
      "description": "Avoid possibly leaking an open-file descriptor for a directory in `pg_ls_dir()()`, `pg_timezone_names()()`, `pg_tablespace_databases()()`, and allied functions (Justin Pryzby)",
      "sinceVersion": "12.3",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix polymorphic-function type resolution to correctly infer the actual type of an anyarray output when given only an anyrange input",
      "description": "Fix polymorphic-function type resolution to correctly infer the actual type of an anyarray output when given only an anyrange input (Tom Lane)",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix server's connection-startup logic for case where a GSSAPI connection is rejected because support is not compiled in, and the client then tries SSL instead",
      "description": "Fix server's connection-startup logic for case where a GSSAPI connection is rejected because support is not compiled in, and the client then tries SSL instead (Andrew Gierth)\n          This led to a bogus “unsupported frontend protocol” failure.",
      "sinceVersion": "12.3",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix memory leakage during GSSAPI encryption",
      "description": "Fix memory leakage during GSSAPI encryption (Tom Lane)\n          Both the backend and libpq would leak memory equivalent to the total amount of data sent during the session, if GSSAPI encryption is in use.",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix query-lifespan memory leak for a set-returning function used in a query's `FROM` clause",
      "description": "Fix query-lifespan memory leak for a set-returning function used in a query's `FROM` clause (Andres Freund)",
      "sinceVersion": "12.3",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid leakage of a hashed subplan's hash tables across multiple executions",
      "description": "Avoid leakage of a hashed subplan's hash tables across multiple executions (Andreas Karlsson, Tom Lane)\n          This mistake could result in severe memory bloat if a query re-executed a hashed subplan enough times.",
      "sinceVersion": "12.3",
      "contributor": "Andreas Karlsson, Tom Lane"
    },
    {
      "title": "Improve planner's handling of no-op domain coercions",
      "description": "Improve planner's handling of no-op domain coercions (Tom Lane)\n          Fix some cases where a domain coercion that does nothing was not completely removed from expressions.",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid unlikely crash when REINDEX is terminated by a session-shutdown signal",
      "description": "Avoid unlikely crash when REINDEX is terminated by a session-shutdown signal (Tom Lane)",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent printout of possibly-incorrect hash join table statistics in EXPLAIN",
      "description": "Prevent printout of possibly-incorrect hash join table statistics in EXPLAIN (Konstantin Knizhnik, Tom Lane, Thomas Munro)",
      "sinceVersion": "12.3",
      "contributor": "Konstantin Knizhnik, Tom Lane, Thomas Munro"
    },
    {
      "title": "Fix reporting of elapsed time for heap truncation steps in VACUUM VERBOSE",
      "description": "Fix reporting of elapsed time for heap truncation steps in VACUUM VERBOSE (Tatsuhito Kasahara)",
      "sinceVersion": "12.3",
      "contributor": "Tatsuhito Kasahara"
    },
    {
      "title": "Fix possible undercounting of deleted B-tree index pages in VACUUM VERBOSE output",
      "description": "Fix possible undercounting of deleted B-tree index pages in VACUUM VERBOSE output (Peter Geoghegan)",
      "sinceVersion": "12.3",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix wrong bookkeeping for oldest deleted page in a B-tree index",
      "description": "Fix wrong bookkeeping for oldest deleted page in a B-tree index (Peter Geoghegan)\n          This could cause subtly wrong decisions about when VACUUM can skip an index cleanup scan; although it appears there may be no significant user-visible effects from that.",
      "sinceVersion": "12.3",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that TimelineHistoryRead and TimelineHistoryWrite wait states are reported in all code paths that read or write timeline history files",
      "description": "Ensure that TimelineHistoryRead and TimelineHistoryWrite wait states are reported in all code paths that read or write timeline history files (Masahiro Ikeda)",
      "sinceVersion": "12.3",
      "contributor": "Masahiro Ikeda"
    },
    {
      "title": "Avoid possibly showing “waiting” twice in a process's PS status",
      "description": "Avoid possibly showing “waiting” twice in a process's PS status (Masahiko Sawada)",
      "sinceVersion": "12.3",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid race condition when ANALYZE replaces the catalog tuple for extended statistics data",
      "description": "Avoid race condition when ANALYZE replaces the catalog tuple for extended statistics data (Dean Rasheed)",
      "sinceVersion": "12.3",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Remove ill-considered skip of “redundant” anti-wraparound vacuums",
      "description": "Remove ill-considered skip of “redundant” anti-wraparound vacuums (Michael Paquier)\n          This avoids a corner case where autovacuum could get into a loop of repeatedly trying and then skipping the same vacuum job.",
      "sinceVersion": "12.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure INCLUDE'd columns are always removed from B-tree pivot tuples",
      "description": "Ensure INCLUDE'd columns are always removed from B-tree pivot tuples (Peter Geoghegan)\n          This mistake wasted space in some rare cases, but was otherwise harmless.",
      "sinceVersion": "12.3",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Cope with invalid TOAST indexes that could be left over after a failed REINDEX CONCURRENTLY",
      "description": "Cope with invalid TOAST indexes that could be left over after a failed REINDEX CONCURRENTLY (Julien Rouhaud)",
      "sinceVersion": "12.3",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Ensure that valid index dependencies are left behind after a failed REINDEX CONCURRENTLY",
      "description": "Ensure that valid index dependencies are left behind after a failed REINDEX CONCURRENTLY (Michael Paquier)\n          Previously the old index could be left with no pg_depend links at all, so that for example it would not get dropped if the parent table is dropped.",
      "sinceVersion": "12.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid failure if autovacuum tries to access a just-dropped temporary schema",
      "description": "Avoid failure if autovacuum tries to access a just-dropped temporary schema (Tom Lane)\n          This hazard only arises if a superuser manually drops a temporary schema; which isn't normal practice, but should work.",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid premature recycling of WAL segments during crash recovery",
      "description": "Avoid premature recycling of WAL segments during crash recovery (Jehan-Guillaume de Rorthais)\n          WAL segments that become ready to be archived during crash recovery were potentially recycled without being archived.",
      "sinceVersion": "12.3",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Avoid scanning irrelevant timelines during archive recovery",
      "description": "Avoid scanning irrelevant timelines during archive recovery (Kyotaro Horiguchi)\n          This can eliminate many attempts to fetch non-existent WAL files from archive storage, which is helpful if archive access is slow.",
      "sinceVersion": "12.3",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Remove bogus “subtransaction logged without previous top-level txn record” error check in logical decoding",
      "description": "Remove bogus “subtransaction logged without previous top-level txn record” error check in logical decoding (Arseny Sher, Amit Kapila)\n          This condition is legitimately reachable in various scenarios, so remove the check.",
      "sinceVersion": "12.3",
      "contributor": "Arseny Sher, Amit Kapila"
    },
    {
      "title": "Avoid possible failure after a replication slot copy, due to premature removal of WAL data",
      "description": "Avoid possible failure after a replication slot copy, due to premature removal of WAL data (Masahiko Sawada, Arseny Sher)",
      "sinceVersion": "12.3",
      "contributor": "Masahiko Sawada, Arseny Sher"
    },
    {
      "title": "Ensure that a replication slot's `io_in_progress_lock` is released in failure code paths",
      "description": "Ensure that a replication slot's `io_in_progress_lock` is released in failure code paths (Pavan Deolasee)\n          This could result in a walsender later becoming stuck waiting for the lock.",
      "sinceVersion": "12.3",
      "contributor": "Pavan Deolasee"
    },
    {
      "title": "Ensure that generated columns are correctly handled during updates issued by logical replication",
      "description": "Ensure that generated columns are correctly handled during updates issued by logical replication (Peter Eisentraut)",
      "sinceVersion": "12.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix race conditions in synchronous standby management",
      "description": "Fix race conditions in synchronous standby management (Tom Lane)\n          During a change in the synchronous_standby_names setting, there was a window in which wrong decisions could be made about whether it is OK to release transactions that are waiting for synchronous commit. Another hazard for similarly wrong decisions existed if a walsender process exited and was immediately replaced by another.",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add missing SQLSTATE values to a few error reports",
      "description": "Add missing SQLSTATE values to a few error reports (Sawada Masahiko)",
      "sinceVersion": "12.3",
      "contributor": "Sawada Masahiko"
    },
    {
      "title": "Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function",
      "description": "Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function (Tom Lane)",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak in libpq when using `sslmode=verify-full`",
      "description": "Fix memory leak in libpq when using `sslmode=verify-full` (Roman Peshkurov)\n          Certificate verification during connection startup could leak some memory. This would become an issue if a client process opened many database connections during its lifetime.",
      "sinceVersion": "12.3",
      "contributor": "Roman Peshkurov"
    },
    {
      "title": "Fix ecpg to treat an argument of just “`-`” as meaning “read from stdin” on all platforms",
      "description": "Fix ecpg to treat an argument of just “`-`” as meaning “read from stdin” on all platforms (Tom Lane)",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in psql when attempting to re-establish a failed connection",
      "description": "Fix crash in psql when attempting to re-establish a failed connection (Michael Paquier)",
      "sinceVersion": "12.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Allow tab-completion of the filename argument to psql's \\gx command",
      "description": "Allow tab-completion of the filename argument to psql's \\gx command (Vik Fearing)",
      "sinceVersion": "12.3",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Fix pg_dump to dump comments on RLS policy objects",
      "description": "Fix pg_dump to dump comments on RLS policy objects (Tom Lane)",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_dump, postpone restore of event triggers till the end",
      "description": "In pg_dump, postpone restore of event triggers till the end (Fabrízio de Royes Mello, Hamid Akhtar, Tom Lane)\n          This minimizes the risk that an event trigger could interfere with the restoration of other objects.",
      "sinceVersion": "12.3",
      "contributor": "Fabrízio de Royes Mello, Hamid Akhtar, Tom Lane"
    },
    {
      "title": "Make pg_checksums skip tablespace subdirectories that belong to a different PostgreSQL major version",
      "description": "Make pg_checksums skip tablespace subdirectories that belong to a different PostgreSQL major version (Michael Banck, Bernd Helmle)\n          Such subdirectories don't really belong to our database cluster, and so must not be processed.",
      "sinceVersion": "12.3",
      "contributor": "Michael Banck, Bernd Helmle"
    },
    {
      "title": "Ignore temporary copies of pg_internal.init in pg_checksums and related programs",
      "description": "Ignore temporary copies of pg_internal.init in pg_checksums and related programs (Michael Paquier)",
      "sinceVersion": "12.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix quoting of --encoding, --lc-ctype and --lc-collate values in createdb utility",
      "description": "Fix quoting of --encoding, --lc-ctype and --lc-collate values in createdb utility (Michael Paquier)",
      "sinceVersion": "12.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "contrib/lo's `lo_manage",
      "description": "contrib/lo's `lo_manage()()` function crashed if called directly rather than as a trigger (Tom Lane)",
      "sinceVersion": "12.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/ltree, protect against overflow of ltree and lquery length fields",
      "description": "In contrib/ltree, protect against overflow of ltree and lquery length fields (Nikita Glukhov)",
      "sinceVersion": "12.3",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Work around failure in contrib/pageinspect's `bt_metap",
      "description": "Work around failure in contrib/pageinspect's `bt_metap()()` function when an oldest_xact value exceeds 2^31-1 (Peter Geoghegan)\n          Such XIDs will now be reported as negative integers, which isn't great but it beats throwing an error. v13 will widen the output argument to int8 to provide saner reporting.",
      "sinceVersion": "12.3",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix cache reference leak in contrib/sepgsql",
      "description": "Fix cache reference leak in contrib/sepgsql (Michael Luo)",
      "sinceVersion": "12.3",
      "contributor": "Michael Luo"
    },
    {
      "title": "On Windows, avoid premature creation of postmaster's log file during `pg_ctl start`",
      "description": "On Windows, avoid premature creation of postmaster's log file during `pg_ctl start` (Alexander Lakhin)\n          The previous coding could allow the file to be created with permissions that wouldn't allow the postmaster to write on it.",
      "sinceVersion": "12.3",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Avoid failures when dealing with Unix-style locale names on Windows",
      "description": "Avoid failures when dealing with Unix-style locale names on Windows (Juan José Santamaría Flecha)",
      "sinceVersion": "12.3",
      "contributor": "Juan José Santamaría Flecha"
    },
    {
      "title": "On Windows, set console VT100 compatibility mode in programs that support PG_COLOR colorization",
      "description": "On Windows, set console VT100 compatibility mode in programs that support PG_COLOR colorization (Juan José Santamaría Flecha)\n          Without this, the colorization option doesn't actually work.",
      "sinceVersion": "12.3",
      "contributor": "Juan José Santamaría Flecha"
    },
    {
      "title": "Stop requiring extra parentheses in `ereport",
      "description": "Stop requiring extra parentheses in `ereport()()` calls (Andres Freund, Tom Lane)",
      "sinceVersion": "12.3",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Use pkg-config, if available, to locate libxml2 during configure",
      "description": "Use pkg-config, if available, to locate libxml2 during configure (Hugh McMaster, Tom Lane, Peter Eisentraut)\n          If pkg-config is not present or lacks knowledge of libxml2, we still query xml2-config as before.\n          This change could break build processes that try to make PostgreSQL use a non-default version of libxml2 by putting that version's xml2-config into the PATH. Instead, set XML2_CONFIG to point to the non-default xml2-config. That method will work with either older or newer PostgreSQL releases.",
      "sinceVersion": "12.3",
      "contributor": "Hugh McMaster, Tom Lane, Peter Eisentraut"
    },
    {
      "title": "Fix Makefile dependencies for libpq and ecpg",
      "description": "Fix Makefile dependencies for libpq and ecpg (Dagfinn Ilmari Mannsåker)",
      "sinceVersion": "12.3",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "In MSVC builds, cope with spaces in the path name for Python",
      "description": "In MSVC builds, cope with spaces in the path name for Python (Victor Wagner)",
      "sinceVersion": "12.3",
      "contributor": "Victor Wagner"
    },
    {
      "title": "In MSVC builds, fix detection of Visual Studio version to work with more language settings",
      "description": "In MSVC builds, fix detection of Visual Studio version to work with more language settings (Andrew Dunstan)",
      "sinceVersion": "12.3",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "In MSVC builds, use `-Wno-deprecated` with bison versions newer than 3.0, as non-Windows builds already do",
      "description": "In MSVC builds, use `-Wno-deprecated` with bison versions newer than 3.0, as non-Windows builds already do (Andrew Dunstan)",
      "sinceVersion": "12.3",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2020a for DST law changes in Morocco and the Canadian Yukon, plus historical corrections for Shanghai.\n          The America/Godthab zone has been renamed to America/Nuuk to reflect current English usage; however, the old name remains available as a compatibility link.\n          Also, update initdb's list of known Windows time zone names to include recent additions, improving the odds that it will correctly translate the system time zone setting on that platform.",
      "sinceVersion": "12.3",
      "contributor": null
    },
    {
      "title": "Fix incorrect plan execution when a partitioned table is subject to both static and run-time partition pruning in the same query, and a new partition is added concurrently with the query",
      "description": "Fix incorrect plan execution when a partitioned table is subject to both static and run-time partition pruning in the same query, and a new partition is added concurrently with the query (Amit Langote, Tom Lane)",
      "sinceVersion": "12.4",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Fix slow execution of `ts_headline",
      "description": "Fix slow execution of `ts_headline()()` (Tom Lane)\n          The phrase-search fix added in our previous set of minor releases could cause `ts_headline()()` to take unreasonable amounts of time for long documents; to make matters worse, the query was not cancellable within the troublesome loop.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Handle single `Inf` or `NaN` inputs correctly in floating-point aggregates",
      "description": "Handle single `Inf` or `NaN` inputs correctly in floating-point aggregates (Tom Lane)\n          The affected aggregates are `corr()()`, `covar_pop()()`, `regr_intercept()()`, `regr_r2()()`, `regr_slope()()`, `regr_sxx()()`, `regr_sxy()()`, `regr_syy()()`, `stddev_pop()()`, and `var_pop()()`. The correct answer in such cases is `NaN`, but an algorithmic change introduced in PostgreSQL v12 had caused these aggregates to produce zero instead.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Set a secure search_path in logical replication walsenders and apply workers",
      "description": "Set a secure search_path in logical replication walsenders and apply workers (Noah Misch)\n          A malicious user of either the publisher or subscriber database could potentially cause execution of arbitrary SQL code by the role running replication, which is often a superuser. Some of the risks here are equivalent to those described in CVE-2018-1058, and are mitigated in this patch by ensuring that the replication sender and receiver execute with empty search_path settings. (As with CVE-2018-1058, that change might cause problems for under-qualified names used in replicated tables' DDL.) Other risks are inherent in replicating objects that belong to untrusted roles; the most we can do is document that there is a hazard to consider. (CVE-2020-14349)",
      "sinceVersion": "12.4",
      "contributor": "Noah Misch"
    },
    {
      "title": "Make contrib modules' installation scripts more secure",
      "description": "Make contrib modules' installation scripts more secure (Tom Lane)\n          Attacks similar to those described in CVE-2018-1058 could be carried out against an extension installation script, if the attacker can create objects in either the extension's target schema or the schema of some prerequisite extension. Since extensions often require superuser privilege to install, this can open a path to obtaining superuser privilege. To mitigate this risk, be more careful about the search_path used to run an installation script; disable check_function_bodies within the script; and fix catalog-adjustment queries used in some contrib modules to ensure they are secure. Also provide documentation to help third-party extension authors make their installation scripts secure. This is not a complete solution; extensions that depend on other extensions can still be at risk if installed carelessly. (CVE-2020-14350)",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge cases in partition pruning",
      "description": "Fix edge cases in partition pruning (Etsuro Fujita, Dmitry Dolgov)\n          When there are multiple partition key columns, generation of pruning tests could misbehave if some columns had no constraining `WHERE` clauses or multiple constraining clauses. This could lead to server crashes, incorrect query results, or assertion failures.",
      "sinceVersion": "12.4",
      "contributor": "Etsuro Fujita, Dmitry Dolgov"
    },
    {
      "title": "Fix construction of parameterized BitmapAnd and BitmapOr index scans on the inside of partition-wise nestloop joins",
      "description": "Fix construction of parameterized BitmapAnd and BitmapOr index scans on the inside of partition-wise nestloop joins (Tom Lane)\n          A plan in which such a scan needed to use a value from the outside of the join would usually crash at execution.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix firing of column-specific `UPDATE` triggers in logical replication subscribers",
      "description": "Fix firing of column-specific `UPDATE` triggers in logical replication subscribers (Tom Lane)\n          The code neglected to account for the possibility of column numbers being different between the publisher and subscriber tables, so that if those were indeed different, wrong decisions might be made about which triggers to fire.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update oldest xmin and LSN values during `pg_replication_slot_advance",
      "description": "Update oldest xmin and LSN values during `pg_replication_slot_advance()()` (Michael Paquier)\n          This function previously failed to do that, possibly preventing resource cleanup (such as removal of no-longer-needed WAL segments) after manual advancement of a replication slot.",
      "sinceVersion": "12.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure the `repeat",
      "description": "Ensure the `repeat()()` function can be interrupted by query cancel (Joe Conway)",
      "sinceVersion": "12.4",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix `pg_current_logfile",
      "description": "Fix `pg_current_logfile()()` to not include a carriage return (`\\r`) in its result on Windows (Tom Lane)",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that `pg_read_file",
      "description": "Ensure that `pg_read_file()()` and related functions read until EOF is reached (Joe Conway)\n          Previously, if not given a specific data length to read, these functions would stop at whatever file length was reported by `stat()()`. That's unhelpful for pipes and other sorts of virtual files.",
      "sinceVersion": "12.4",
      "contributor": "Joe Conway"
    },
    {
      "title": "Forbid numeric `NaN` values in jsonpath computations",
      "description": "Forbid numeric `NaN` values in jsonpath computations (Alexander Korotkov)\n          Neither SQL nor JSON have the concept of `NaN` (not-a-number), but the jsonpath code attempted to allow such values anyway. This necessarily leads to nonstandard behavior, so it seems better to reject such values at the outset.",
      "sinceVersion": "12.4",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix mis-handling of `NaN` inputs during parallel aggregation on numeric-type columns",
      "description": "Fix mis-handling of `NaN` inputs during parallel aggregation on numeric-type columns (Tom Lane)\n          If some partial aggregation workers found only `NaN`s while others found only non-`NaN`s, the results were combined incorrectly, possibly leading to the wrong overall result (i.e., not `NaN` when it should be).",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject time-of-day values greater than 24 hours",
      "description": "Reject time-of-day values greater than 24 hours (Tom Lane)\n          The intention of the datetime input code is to allow “24:00:00” or equivalently “23:59:60”, but no larger value. However, the range check was miscoded so that it would accept “23:59:60.`nnn`” with nonzero fractional-second `nnn`. In timestamp values this would result in wrapping into the first second of the next day. In time and timetz values, the stored value would actually be more than 24 hours, causing dump/reload failures and possibly other misbehavior.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Undo double-quoting of index names in EXPLAIN's non-text output formats",
      "description": "Undo double-quoting of index names in EXPLAIN's non-text output formats (Tom Lane, Euler Taveira)",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane, Euler Taveira"
    },
    {
      "title": "Fix EXPLAIN's accounting for resource usage, particularly buffer accesses, in parallel workers in a plan using `Gather Merge` nodes",
      "description": "Fix EXPLAIN's accounting for resource usage, particularly buffer accesses, in parallel workers in a plan using `Gather Merge` nodes (Jehan-Guillaume de Rorthais)",
      "sinceVersion": "12.4",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix timing of constraint revalidation in ALTER TABLE",
      "description": "Fix timing of constraint revalidation in ALTER TABLE (David Rowley)\n          If ALTER TABLE needs to fully rewrite the table's contents (for example, due to change of a column's data type) and also needs to scan the table to re-validate foreign keys or `CHECK` constraints, it sometimes did things in the wrong order, leading to odd errors such as “could not read block 0 in file \"base/nnnnn/nnnnn\": read only 0 of 8192 bytes”.",
      "sinceVersion": "12.4",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix REINDEX CONCURRENTLY to preserve the index's replication identity flag",
      "description": "Fix REINDEX CONCURRENTLY to preserve the index's replication identity flag (Michael Paquier)\n          Previously, reindexing a table's replica identity index caused the setting to be lost, preventing old tuple values from being included in future logical-decoding output.",
      "sinceVersion": "12.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Work around incorrect not-null markings for pg_subscription.subslotname and pg_subscription_rel.srsublsn",
      "description": "Work around incorrect not-null markings for pg_subscription.subslotname and pg_subscription_rel.srsublsn (Tom Lane)\n          The bootstrap catalog data incorrectly marks these two catalog columns as always non-null. There's no easy way to correct that mistake in existing installations (though v13 and later will have the correct markings). The main place that depends on that marking being correct is JIT-enabled tuple deconstruction, so teach it to explicitly ignore the marking for these two columns. Also adjust some C code that accessed srsublsn without checking to see if it's null; a crash from that is improbable but perhaps not impossible.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope with `LATERAL` references in restriction clauses attached to an un-flattened sub-`SELECT` in the `FROM` clause",
      "description": "Cope with `LATERAL` references in restriction clauses attached to an un-flattened sub-`SELECT` in the `FROM` clause (Tom Lane)\n          This oversight could result in assertion failures or crashes at query execution.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Use the query-specified collation for operators invoked during selectivity estimation",
      "description": "Use the query-specified collation for operators invoked during selectivity estimation (Tom Lane)\n          Previously, the collation of the underlying database column was used. But using the query's collation is arguably more correct. More importantly, now that we have nondeterministic collations, there are cases where an operator will fail outright if given a nondeterministic collation. We don't want planning to fail in cases where the query itself would work, so this means that we must use the query's collation when invoking operators for estimation purposes.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid believing that a never-analyzed foreign table has zero tuples",
      "description": "Avoid believing that a never-analyzed foreign table has zero tuples (Tom Lane)\n          This primarily affected the planner's estimate of the number of groups that would be obtained by `GROUP BY`.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove bogus warning about “leftover placeholder tuple” in BRIN index de-summarization",
      "description": "Remove bogus warning about “leftover placeholder tuple” in BRIN index de-summarization (Álvaro Herrera)\n          The case can occur legitimately after a cancelled vacuum, so warning about it is overly noisy.",
      "sinceVersion": "12.4",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix selection of tablespaces for “shared fileset” temporary files",
      "description": "Fix selection of tablespaces for “shared fileset” temporary files (Magnus Hagander, Tom Lane)\n          If temp_tablespaces is empty or explicitly names the database's primary tablespace, such files got placed into the `pg_default` tablespace rather than the database's primary tablespace as expected.",
      "sinceVersion": "12.4",
      "contributor": "Magnus Hagander, Tom Lane"
    },
    {
      "title": "Fix corner-case error in masking of SP-GiST index pages during WAL consistency checking",
      "description": "Fix corner-case error in masking of SP-GiST index pages during WAL consistency checking (Alexander Korotkov)\n          This could cause false failure reports when wal_consistency_checking is enabled.",
      "sinceVersion": "12.4",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Improve error handling in the server's buffile module",
      "description": "Improve error handling in the server's buffile module (Thomas Munro)\n          Fix some cases where I/O errors were indistinguishable from reaching EOF, or were not reported at all. Also add details such as block numbers and byte counts where appropriate.",
      "sinceVersion": "12.4",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix conflict-checking anomalies in `SERIALIZABLE` isolation mode",
      "description": "Fix conflict-checking anomalies in `SERIALIZABLE` isolation mode (Peter Geoghegan)\n          If a concurrently-inserted tuple was updated by a different concurrent transaction, and neither tuple version was visible to the current transaction's snapshot, serialization conflict checking could draw the wrong conclusions about whether the tuple was relevant to the results of the current transaction. This could allow a serializable transaction to commit when it should have failed with a serialization error.",
      "sinceVersion": "12.4",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Avoid repeated marking of dead btree index entries as dead",
      "description": "Avoid repeated marking of dead btree index entries as dead (Masahiko Sawada)\n          While functionally harmless, this led to useless WAL traffic when checksums are enabled or wal_log_hints is on.",
      "sinceVersion": "12.4",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix checkpointer process to discard file sync requests when fsync is off",
      "description": "Fix checkpointer process to discard file sync requests when fsync is off (Heikki Linnakangas)\n          Such requests are treated as no-ops if fsync is off, but we forgot to remove them from the checkpointer's table of pending actions. This would lead to bloat of that table, as well as possible assertion failures if fsync is later re-enabled.",
      "sinceVersion": "12.4",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid trouble during cleanup of a non-exclusive backup when JIT compilation has been activated during the backup",
      "description": "Avoid trouble during cleanup of a non-exclusive backup when JIT compilation has been activated during the backup (Robert Haas)",
      "sinceVersion": "12.4",
      "contributor": "Robert Haas"
    },
    {
      "title": "Fix failure of some code paths to acquire the correct lock before modifying pg_control",
      "description": "Fix failure of some code paths to acquire the correct lock before modifying pg_control (Nathan Bossart, Fujii Masao)\n          This oversight could allow pg_control to be written out with an inconsistent checksum, possibly causing trouble later, including inability to restart the database if it crashed before the next pg_control update.",
      "sinceVersion": "12.4",
      "contributor": "Nathan Bossart, Fujii Masao"
    },
    {
      "title": "Fix errors in `currtid",
      "description": "Fix errors in `currtid()()` and `currtid2()()` (Michael Paquier)\n          These functions (which are undocumented and used only by ancient versions of the ODBC driver) contained coding errors that could result in crashes, or in confusing error messages such as “could not open file” when applied to a relation having no storage.",
      "sinceVersion": "12.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid calling `elog",
      "description": "Avoid calling `elog()()` or `palloc()()` while holding a spinlock (Michael Paquier, Tom Lane)\n          Logic associated with replication slots had several violations of this coding rule. While the odds of trouble are quite low, an error in the called function would lead to a stuck spinlock.",
      "sinceVersion": "12.4",
      "contributor": "Michael Paquier, Tom Lane"
    },
    {
      "title": "Fix assertion in logical replication subscriber to allow use of `REPLICA IDENTITY FULL`",
      "description": "Fix assertion in logical replication subscriber to allow use of `REPLICA IDENTITY FULL` (Euler Taveira)\n          This was just an incorrect assertion, so it has no impact on standard production builds.",
      "sinceVersion": "12.4",
      "contributor": "Euler Taveira"
    },
    {
      "title": "Ensure that libpq continues to try to read from the database connection socket after a write failure",
      "description": "Ensure that libpq continues to try to read from the database connection socket after a write failure (Tom Lane)\n          This is important not only to ensure that we collect any final error message from a dying server process, but because we do not consider the connection lost until we see a read failure. This oversight allowed libpq to continue trying to send COPY data indefinitely after a mid-transfer loss of connection, rather than reporting failure to the application.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bugs in libpq's management of GSS encryption state",
      "description": "Fix bugs in libpq's management of GSS encryption state (Tom Lane)\n          A connection using GSS encryption could freeze up when attempting to reset it after a server restart, or when moving on to the next one of a list of candidate servers.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ecpg crash with bytea and cursor variables",
      "description": "Fix ecpg crash with bytea and cursor variables (Jehan-Guillaume de Rorthais)",
      "sinceVersion": "12.4",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Report out-of-disk-space errors properly in pg_dump and pg_basebackup",
      "description": "Report out-of-disk-space errors properly in pg_dump and pg_basebackup (Justin Pryzby, Tom Lane, Álvaro Herrera)\n          Some code paths could produce silly reports like “could not write file: Success”.",
      "sinceVersion": "12.4",
      "contributor": "Justin Pryzby, Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Make pg_restore cope with data-offset-less custom-format archive files when it needs to restore data items out of order",
      "description": "Make pg_restore cope with data-offset-less custom-format archive files when it needs to restore data items out of order (David Gilman, Tom Lane)\n          pg_dump will produce such files if it cannot seek its output (for example, if the output is piped to something). This fix primarily improves the ability to do a parallel restore from such a file.",
      "sinceVersion": "12.4",
      "contributor": "David Gilman, Tom Lane"
    },
    {
      "title": "Fix parallel restore of tables having both table-level privileges and per-column privileges",
      "description": "Fix parallel restore of tables having both table-level privileges and per-column privileges (Tom Lane)\n          The table-level privilege grants have to be applied first, but a parallel restore did not reliably order them that way; this could lead to “tuple concurrently updated” errors, or to disappearance of some per-column privilege grants. The fix for this is to include dependency links between such entries in the archive file, meaning that a new dump has to be taken with a corrected pg_dump to ensure that the problem will not recur.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that pg_upgrade runs with vacuum_defer_cleanup_age set to zero in the target cluster",
      "description": "Ensure that pg_upgrade runs with vacuum_defer_cleanup_age set to zero in the target cluster (Bruce Momjian)\n          If the target cluster's configuration has been modified to set vacuum_defer_cleanup_age to a nonzero value, that prevented freezing of the system catalogs from working properly, which caused the upgrade to fail in confusing ways. Ensure that any such setting is overridden for the duration of the upgrade.",
      "sinceVersion": "12.4",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Fix pg_recvlogical to drain pending messages before exiting",
      "description": "Fix pg_recvlogical to drain pending messages before exiting (Noah Misch)\n          Without this, the replication sender might detect a send failure and exit without making the expected final update to the replication slot's LSN position. That led to re-transmitting data after the next connection. It was also possible to miss error messages sent after the last data that pg_recvlogical wants to consume.",
      "sinceVersion": "12.4",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix pg_rewind's handling of just-deleted files in the source data directory",
      "description": "Fix pg_rewind's handling of just-deleted files in the source data directory (Justin Pryzby, Michael Paquier)\n          When working with an on-line source database, concurrent file deletions are possible, but pg_rewind would get confused if deletion happened between seeing a file's directory entry and examining it with `stat()()`.",
      "sinceVersion": "12.4",
      "contributor": "Justin Pryzby, Michael Paquier"
    },
    {
      "title": "Make pg_test_fsync use binary I/O mode on Windows",
      "description": "Make pg_test_fsync use binary I/O mode on Windows (Michael Paquier)\n          Previously it wrote the test file in text mode, which is not an accurate reflection of PostgreSQL's actual usage.",
      "sinceVersion": "12.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix contrib/amcheck to not complain about deleted index pages that are empty",
      "description": "Fix contrib/amcheck to not complain about deleted index pages that are empty (Alexander Korotkov)\n          This state of affairs is normal during WAL replay.",
      "sinceVersion": "12.4",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix failure to initialize local state correctly in contrib/dblink",
      "description": "Fix failure to initialize local state correctly in contrib/dblink (Joe Conway)\n          With the right combination of circumstances, this could lead to `dblink_close()()` issuing an unexpected remote COMMIT.",
      "sinceVersion": "12.4",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix contrib/pgcrypto's misuse of `deflate",
      "description": "Fix contrib/pgcrypto's misuse of `deflate()()` (Tom Lane)\n          The `pgp_sym_encrypt()` functions could produce incorrect compressed data due to mishandling of zlib's API requirements. We have no reports of this error manifesting with stock zlib, but it can be seen when using IBM's zlibNX implementation.",
      "sinceVersion": "12.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner case in decompression logic in contrib/pgcrypto's `pgp_sym_decrypt",
      "description": "Fix corner case in decompression logic in contrib/pgcrypto's `pgp_sym_decrypt()` functions (Kyotaro Horiguchi, Michael Paquier)\n          A compressed stream can validly end with an empty packet, but the decompressor failed to handle this and would complain about corrupt data.",
      "sinceVersion": "12.4",
      "contributor": "Kyotaro Horiguchi, Michael Paquier"
    },
    {
      "title": "Support building our NLS code with Microsoft Visual Studio 2015 or later",
      "description": "Support building our NLS code with Microsoft Visual Studio 2015 or later (Juan José Santamaría Flecha, Davinder Singh, Amit Kapila)",
      "sinceVersion": "12.4",
      "contributor": "Juan José Santamaría Flecha, Davinder Singh, Amit Kapila"
    },
    {
      "title": "Avoid possible failure of our MSVC install script when there is a file named configure several levels above the source code tree",
      "description": "Avoid possible failure of our MSVC install script when there is a file named configure several levels above the source code tree (Arnold Müller)\n          This could confuse some logic that looked for configure to identify the top level of the source tree.",
      "sinceVersion": "12.4",
      "contributor": "Arnold Müller"
    },
    {
      "title": "Recheck default partition constraints while routing an inserted or updated tuple to the correct partition",
      "description": "Recheck default partition constraints while routing an inserted or updated tuple to the correct partition (Amit Langote, Álvaro Herrera)\n          This fixes race conditions when partitions are added concurrently with the insertion.",
      "sinceVersion": "12.5",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Avoid failures when a `BEFORE ROW UPDATE` trigger returns the “old” row of a table having dropped or “missing” columns",
      "description": "Avoid failures when a `BEFORE ROW UPDATE` trigger returns the “old” row of a table having dropped or “missing” columns (Amit Langote, Tom Lane)\n          This method of suppressing an update could result in crashes, unexpected `CHECK` constraint failures, or incorrect `RETURNING` output, because “missing” columns would read as NULLs for those purposes. (A column is “missing” for this purpose if it was added by ALTER TABLE ADD COLUMN with a non-NULL, but constant, default value.) Dropped columns could cause trouble as well.",
      "sinceVersion": "12.5",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Fix recently-added timetz test case so it works when the USA is not observing daylight savings time",
      "description": "Fix recently-added timetz test case so it works when the USA is not observing daylight savings time (Tom Lane)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix usage of complex connection-string parameters in pg_dump, pg_restore, clusterdb, reindexdb, and vacuumdb",
      "description": "Fix usage of complex connection-string parameters in pg_dump, pg_restore, clusterdb, reindexdb, and vacuumdb (Tom Lane)\n          The -d parameter of pg_dump and pg_restore, or the --maintenance-db parameter of the other programs mentioned, can be a “connection string” containing multiple connection parameters rather than just a database name. In cases where these programs need to initiate additional connections, such as parallel processing or processing of multiple databases, the connection string was forgotten and just the basic connection parameters (database name, host, port, and username) were used for the additional connections. This could lead to connection failures if the connection string included any other essential information, such as non-default SSL or GSS parameters. Worse, the connection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. (CVE-2020-25694)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "When psql's \\connect command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used",
      "description": "When psql's \\connect command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used (Tom Lane)\n          This avoids cases where reconnection might fail due to omission of relevant parameters, such as non-default SSL or GSS options. Worse, the reconnection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. This is largely the same problem as just cited for pg_dump et al, although psql's behavior is more complex since the user may intentionally override some connection parameters. (CVE-2020-25694)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent psql's \\gset command from modifying specially-treated variables",
      "description": "Prevent psql's \\gset command from modifying specially-treated variables (Noah Misch)\n          \\gset without a prefix would overwrite whatever variables the server told it to. Thus, a compromised server could set specially-treated variables such as PROMPT1, giving the ability to execute arbitrary shell code in the user's session.\n          The PostgreSQL Project thanks Nick Cleaton for reporting this problem. (CVE-2020-25696)",
      "sinceVersion": "12.5",
      "contributor": "Noah Misch"
    },
    {
      "title": "Prevent possible data loss from concurrent truncations of SLRU logs",
      "description": "Prevent possible data loss from concurrent truncations of SLRU logs (Noah Misch)\n          This rare problem would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "sinceVersion": "12.5",
      "contributor": "Noah Misch"
    },
    {
      "title": "Ensure that SLRU directories are properly fsync'd during checkpoints",
      "description": "Ensure that SLRU directories are properly fsync'd during checkpoints (Thomas Munro)\n          This prevents possible data loss in a subsequent operating system crash.",
      "sinceVersion": "12.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix ALTER ROLE for users with the `BYPASSRLS` attribute",
      "description": "Fix ALTER ROLE for users with the `BYPASSRLS` attribute (Tom Lane, Stephen Frost)\n          The `BYPASSRLS` attribute is only allowed to be changed by superusers, but other ALTER ROLE operations, such as password changes, should be allowed with only ordinary permission checks. The previous coding erroneously restricted all changes on such a role to superusers.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane, Stephen Frost"
    },
    {
      "title": "Ensure that ALTER TABLE ONLY ... ENABLE/DISABLE TRIGGER does not recurse to child tables",
      "description": "Ensure that ALTER TABLE ONLY ... ENABLE/DISABLE TRIGGER does not recurse to child tables (Álvaro Herrera)\n          Previously the `ONLY` flag was ignored.",
      "sinceVersion": "12.5",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid unnecessary recursion to partitions in ALTER TABLE SET NOT NULL, when the target column is already marked `NOT NULL`",
      "description": "Avoid unnecessary recursion to partitions in ALTER TABLE SET NOT NULL, when the target column is already marked `NOT NULL` (Tom Lane)\n          This avoids a potential deadlock in parallel pg_restore.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of expressions in CREATE TABLE LIKE with inheritance",
      "description": "Fix handling of expressions in CREATE TABLE LIKE with inheritance (Tom Lane)\n          If a CREATE TABLE command uses both `LIKE` and traditional inheritance, column references in `CHECK` constraints and expression indexes that came from a `LIKE` parent table tended to get mis-numbered, resulting in wrong answers and/or bizarre error messages. The same could happen in `GENERATED` expressions, in branches that have that feature.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow DROP INDEX CONCURRENTLY on a partitioned table",
      "description": "Disallow DROP INDEX CONCURRENTLY on a partitioned table (Álvaro Herrera, Michael Paquier)\n          This case failed anyway, but with a confusing error message.",
      "sinceVersion": "12.5",
      "contributor": "Álvaro Herrera, Michael Paquier"
    },
    {
      "title": "Allow LOCK TABLE to succeed on a self-referential view",
      "description": "Allow LOCK TABLE to succeed on a self-referential view (Tom Lane)\n          It previously threw an error complaining about infinite recursion, but there seems no need to disallow the case.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Retain statistics about an index across REINDEX CONCURRENTLY",
      "description": "Retain statistics about an index across REINDEX CONCURRENTLY (Michael Paquier, Fabrízio de Royes Mello)\n          Non-concurrent reindexing has always preserved such statistics.",
      "sinceVersion": "12.5",
      "contributor": "Michael Paquier, Fabrízio de Royes Mello"
    },
    {
      "title": "Fix incorrect progress reporting from REINDEX CONCURRENTLY",
      "description": "Fix incorrect progress reporting from REINDEX CONCURRENTLY (Matthias van de Meent, Michael Paquier)",
      "sinceVersion": "12.5",
      "contributor": "Matthias van de Meent, Michael Paquier"
    },
    {
      "title": "Ensure that `GENERATED` columns are updated when the column",
      "description": "Ensure that `GENERATED` columns are updated when the column(s) they depend on are updated via a rule or an updatable view (Tom Lane)\n          This fix also takes care of possible failure to fire a column-specific trigger in such cases.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failures with collation-dependent partition bound expressions",
      "description": "Fix failures with collation-dependent partition bound expressions (Tom Lane)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Support hashing of text arrays",
      "description": "Support hashing of text arrays (Peter Eisentraut)\n          Array hashing failed if the array element type is collatable. Notably, this prevented using hash partitioning with a text array column as partition key.",
      "sinceVersion": "12.5",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix off-by-one conversion of negative years to BC dates in `to_date",
      "description": "Fix off-by-one conversion of negative years to BC dates in `to_date()()` and `to_timestamp()()` (Dar Alathar-Yemen, Tom Lane)\n          Also, arrange for the combination of a negative year and an explicit “BC” marker to cancel out and produce AD.",
      "sinceVersion": "12.5",
      "contributor": "Dar Alathar-Yemen, Tom Lane"
    },
    {
      "title": "Ensure that standby servers will archive WAL timeline history files when archive_mode is set to `always`",
      "description": "Ensure that standby servers will archive WAL timeline history files when archive_mode is set to `always` (Grigory Smolkin, Fujii Masao)\n          This oversight could lead to failure of subsequent PITR recovery attempts.",
      "sinceVersion": "12.5",
      "contributor": "Grigory Smolkin, Fujii Masao"
    },
    {
      "title": "Fix “cache lookup failed for relation 0” failures in logical replication workers",
      "description": "Fix “cache lookup failed for relation 0” failures in logical replication workers (Tom Lane)\n          The real-world impact is small, since the failure is unlikely, and if it does happen the worker would just exit and be restarted.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent logical replication workers from sending redundant ping requests",
      "description": "Prevent logical replication workers from sending redundant ping requests (Tom Lane)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "During “smart” shutdown, don't terminate background processes until all client",
      "description": "During “smart” shutdown, don't terminate background processes until all client (foreground) sessions are done (Tom Lane)\n          The previous behavior broke parallel query processing, since the postmaster would terminate parallel workers and refuse to launch any new ones. It also caused autovacuum to cease functioning, which could have dire long-term effects if the surviving client sessions make a lot of data changes.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid recursive consumption of stack space while processing signals in the postmaster",
      "description": "Avoid recursive consumption of stack space while processing signals in the postmaster (Tom Lane)\n          Heavy use of parallel processing has been observed to cause postmaster crashes due to too many concurrent signals requesting creation of a parallel worker process.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid running atexit handlers when exiting due to SIGQUIT",
      "description": "Avoid running atexit handlers when exiting due to SIGQUIT (Kyotaro Horiguchi, Tom Lane)\n          Most server processes followed this practice already, but the archiver process was overlooked. Backends that were still waiting for a client startup packet got it wrong, too.",
      "sinceVersion": "12.5",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "Fix possible crash when considering partition-wise joins during GEQO planning",
      "description": "Fix possible crash when considering partition-wise joins during GEQO planning (Tom Lane)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure when SQL function inlining changes the shape of a potentially-hashable subplan comparison expression",
      "description": "Avoid failure when SQL function inlining changes the shape of a potentially-hashable subplan comparison expression (Tom Lane)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "While building or re-building an index, tolerate the appearance of new HOT chains due to concurrent updates",
      "description": "While building or re-building an index, tolerate the appearance of new HOT chains due to concurrent updates (Anastasia Lubennikova, Álvaro Herrera)\n          This oversight could lead to “failed to find parent tuple for heap-only tuple” errors.",
      "sinceVersion": "12.5",
      "contributor": "Anastasia Lubennikova, Álvaro Herrera"
    },
    {
      "title": "Fix failure of parallel B-tree index scans when the index condition is unsatisfiable",
      "description": "Fix failure of parallel B-tree index scans when the index condition is unsatisfiable (James Hunter)",
      "sinceVersion": "12.5",
      "contributor": "James Hunter"
    },
    {
      "title": "Ensure that data is detoasted before being inserted into a BRIN index",
      "description": "Ensure that data is detoasted before being inserted into a BRIN index (Tomas Vondra)\n          Index entries are not supposed to contain out-of-line TOAST pointers, but BRIN didn't get that memo. This could lead to errors like “missing chunk number 0 for toast value NNN”. (If you are faced with such an error from an existing index, REINDEX should be enough to fix it.)",
      "sinceVersion": "12.5",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Handle concurrent desummarization correctly during BRIN index scans",
      "description": "Handle concurrent desummarization correctly during BRIN index scans (Alexander Lakhin, Álvaro Herrera)\n          Previously, if a page range was desummarized at just the wrong time, an index scan might falsely raise an error indicating index corruption.",
      "sinceVersion": "12.5",
      "contributor": "Alexander Lakhin, Álvaro Herrera"
    },
    {
      "title": "Fix rare “lost saved point in index” errors in scans of multicolumn GIN indexes",
      "description": "Fix rare “lost saved point in index” errors in scans of multicolumn GIN indexes (Tom Lane)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix buffered GiST index builds to work when the index has included columns",
      "description": "Fix buffered GiST index builds to work when the index has included columns (Pavel Borisov)",
      "sinceVersion": "12.5",
      "contributor": "Pavel Borisov"
    },
    {
      "title": "Fix unportable use of `getnameinfo",
      "description": "Fix unportable use of `getnameinfo()()` in pg_hba_file_rules view (Tom Lane)\n          On FreeBSD 11, and possibly other platforms, the view's address and netmask columns were always null due to this error.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash if debug_query_string is NULL when starting a parallel worker",
      "description": "Avoid crash if debug_query_string is NULL when starting a parallel worker (Noah Misch)",
      "sinceVersion": "12.5",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix use-after-free hazard when an event trigger monitors an ALTER TABLE operation",
      "description": "Fix use-after-free hazard when an event trigger monitors an ALTER TABLE operation (Jehan-Guillaume de Rorthais)",
      "sinceVersion": "12.5",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix incorrect error message about inconsistent moving-aggregate data types",
      "description": "Fix incorrect error message about inconsistent moving-aggregate data types (Jeff Janes)",
      "sinceVersion": "12.5",
      "contributor": "Jeff Janes"
    },
    {
      "title": "Avoid lockup when a parallel worker reports a very long error message",
      "description": "Avoid lockup when a parallel worker reports a very long error message (Vignesh C)",
      "sinceVersion": "12.5",
      "contributor": "Vignesh C"
    },
    {
      "title": "Avoid unnecessary failure when transferring very large payloads through shared memory queues",
      "description": "Avoid unnecessary failure when transferring very large payloads through shared memory queues (Markus Wanner)",
      "sinceVersion": "12.5",
      "contributor": "Markus Wanner"
    },
    {
      "title": "Fix incorrect handling of template function attributes in JIT code generation",
      "description": "Fix incorrect handling of template function attributes in JIT code generation (Andres Freund)\n          This has been shown to cause crashes on `s390x`, and very possibly there are other cases on other platforms.",
      "sinceVersion": "12.5",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix relation cache memory leaks with RLS policies",
      "description": "Fix relation cache memory leaks with RLS policies (Tom Lane)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge-case memory leak in `index_get_partition",
      "description": "Fix edge-case memory leak in `index_get_partition()()` (Justin Pryzby)",
      "sinceVersion": "12.5",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart",
      "description": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart (Tom Lane)",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leaks in PL/pgsql's CALL processing",
      "description": "Fix memory leaks in PL/pgsql's CALL processing (Pavel Stehule, Tom Lane)",
      "sinceVersion": "12.5",
      "contributor": "Pavel Stehule, Tom Lane"
    },
    {
      "title": "Fix ecpg library's per-thread initialization logic for Windows",
      "description": "Fix ecpg library's per-thread initialization logic for Windows (Tom Lane, Alexander Lakhin)\n          Multi-threaded ecpg applications could suffer rare misbehavior due to incorrect locking.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane, Alexander Lakhin"
    },
    {
      "title": "On Windows, make psql read the output of a backtick command in text mode, not binary mode",
      "description": "On Windows, make psql read the output of a backtick command in text mode, not binary mode (Tom Lane)\n          This ensures proper handling of newlines.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that pg_dump collects per-column information about extension configuration tables",
      "description": "Ensure that pg_dump collects per-column information about extension configuration tables (Fabrízio de Royes Mello, Tom Lane)\n          Failure to do this led to crashes when specifying --inserts, or underspecified (though usually correct) COPY commands when using COPY to reload the tables' data.",
      "sinceVersion": "12.5",
      "contributor": "Fabrízio de Royes Mello, Tom Lane"
    },
    {
      "title": "Ensure that parallel pg_restore processes foreign keys referencing partitioned tables in the correct order",
      "description": "Ensure that parallel pg_restore processes foreign keys referencing partitioned tables in the correct order (Álvaro Herrera)\n          Previously, it might try to restore a foreign key constraint before the required indexes were all in place, leading to an error.",
      "sinceVersion": "12.5",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Make pg_upgrade check for pre-existence of tablespace directories in the target cluster",
      "description": "Make pg_upgrade check for pre-existence of tablespace directories in the target cluster (Bruce Momjian)",
      "sinceVersion": "12.5",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Fix potential memory leak in contrib/pgcrypto",
      "description": "Fix potential memory leak in contrib/pgcrypto (Michael Paquier)",
      "sinceVersion": "12.5",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add check for an unlikely failure case in contrib/pgcrypto",
      "description": "Add check for an unlikely failure case in contrib/pgcrypto (Daniel Gustafsson)",
      "sinceVersion": "12.5",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station",
      "description": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station (Antarctica); plus historical corrections for France, Hungary, Monaco, and Palestine.",
      "sinceVersion": "12.5",
      "contributor": null
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2020d",
      "description": "Sync our copy of the timezone library with IANA tzcode release 2020d (Tom Lane)\n          This absorbs upstream's change of zic's default output option from “fat” to “slim”. That's just cosmetic for our purposes, as we continue to select the “fat” mode in pre-v13 branches. This change also ensures that `strftime()()` does not change errno unless it fails.",
      "sinceVersion": "12.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix recently-introduced race conditions in LISTEN/NOTIFY queue handling",
      "description": "Fix recently-introduced race conditions in LISTEN/NOTIFY queue handling (Tom Lane)\n          A newly-listening backend could attempt to read SLRU pages that were in process of being truncated, possibly causing an error.\n          The queue tail pointer could become set to a value that's not equal to the queue position of any backend, resulting in effective disabling of the queue truncation logic. Continued use of NOTIFY then led to queue-fill warnings, and eventually to inability to send any more notifies until the server is restarted.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix integer-overflow cases in `substring",
      "description": "Fix integer-overflow cases in `substring()()` functions (Tom Lane, Pavel Stehule)\n          If the specified starting index and length overflow an integer when added together, `substring()()` misbehaved, either throwing a bogus “negative substring length” error for a case that should succeed, or failing to complain that a negative length is negative (and instead returning the whole string, in most cases).",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane, Pavel Stehule"
    },
    {
      "title": "Fix information leakage in constraint-violation error messages",
      "description": "Fix information leakage in constraint-violation error messages (Heikki Linnakangas)\n          If an UPDATE command attempts to move a row to a different partition but finds that it violates some constraint on the new partition, and the columns in that partition are in different physical positions than in the parent table, the error message could reveal the contents of columns that the user does not have `SELECT` privilege on. (CVE-2021-3393)",
      "sinceVersion": "12.6",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix incorrect detection of concurrent page splits while inserting into a GiST index",
      "description": "Fix incorrect detection of concurrent page splits while inserting into a GiST index (Heikki Linnakangas)\n          Concurrent insertions could lead to a corrupt index with entries placed in the wrong pages. It's recommended to reindex any GiST index that's been subject to concurrent insertions.",
      "sinceVersion": "12.6",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix CREATE INDEX CONCURRENTLY to wait for concurrent prepared transactions",
      "description": "Fix CREATE INDEX CONCURRENTLY to wait for concurrent prepared transactions (Andrey Borodin)\n          At the point where CREATE INDEX CONCURRENTLY waits for all concurrent transactions to complete so that it can see rows they inserted, it must also wait for all prepared transactions to complete, for the same reason. Its failure to do so meant that rows inserted by prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. In installations that have enabled prepared transactions (max_prepared_transactions &gt; 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "sinceVersion": "12.6",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Avoid crash when a `CALL` or `DO` statement that performs a transaction rollback is executed via extended query protocol",
      "description": "Avoid crash when a `CALL` or `DO` statement that performs a transaction rollback is executed via extended query protocol (Thomas Munro, Tom Lane)\n          In PostgreSQL 13, this case reliably caused a null-pointer dereference. In earlier versions the bug seems to have no visible symptoms, but it's not quite clear that it could never cause a problem.",
      "sinceVersion": "12.6",
      "contributor": "Thomas Munro, Tom Lane"
    },
    {
      "title": "Fix partition pruning logic to handle asymmetric hash partition sets",
      "description": "Fix partition pruning logic to handle asymmetric hash partition sets (Tom Lane)\n          If a hash-partitioned table has unequally-sized partitions (that is, varying modulus values), or it lacks partitions for some remainder values, then the planner's pruning logic could mistakenly conclude that some partitions don't need to be scanned, leading to failure to find rows that the query should find.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node",
      "description": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node (Tom Lane)\n          This case is unsupported (in general, a cursor using `ORDER BY` is not guaranteed to be simply updatable); but the code previously did not reject it, and could silently give false matches.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node",
      "description": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node (David Geier)",
      "sinceVersion": "12.6",
      "contributor": "David Geier"
    },
    {
      "title": "Fix planner's mishandling of placeholders whose evaluation should be delayed by an outer join",
      "description": "Fix planner's mishandling of placeholders whose evaluation should be delayed by an outer join (Tom Lane)\n          This occurs in particular with trivial subqueries containing lateral references to outer-join outputs. The mistake could result in a malformed plan. The known cases trigger a “failed to assign all NestLoopParams to plan nodes” error, but other symptoms may be possible.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner's handling of placeholders during removal of useless RESULT RTEs",
      "description": "Fix planner's handling of placeholders during removal of useless RESULT RTEs (Tom Lane)\n          This oversight could lead to “no relation entry for relid `N`” planner errors.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level",
      "description": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level (Tom Lane)\n          This oversight could lead to “failed to build any `N`-way joins” planner errors.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Be more careful about whether index AMs support mark/restore",
      "description": "Be more careful about whether index AMs support mark/restore (Andrew Gierth)\n          This prevents errors about missing support functions in rare edge cases.",
      "sinceVersion": "12.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Adjust settings to make it more difficult to run out of DSM slots during heavy usage of parallel queries",
      "description": "Adjust settings to make it more difficult to run out of DSM slots during heavy usage of parallel queries (Thomas Munro)",
      "sinceVersion": "12.6",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix overestimate of the amount of shared memory needed for parallel queries",
      "description": "Fix overestimate of the amount of shared memory needed for parallel queries (Takayuki Tsunakawa)",
      "sinceVersion": "12.6",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "Fix ALTER DEFAULT PRIVILEGES to handle duplicated arguments safely",
      "description": "Fix ALTER DEFAULT PRIVILEGES to handle duplicated arguments safely (Michael Paquier)\n          Duplicate role or schema names within the same command could lead to “tuple already updated by self” errors or unique-constraint violations.",
      "sinceVersion": "12.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Flush ACL-related caches when pg_authid changes",
      "description": "Flush ACL-related caches when pg_authid changes (Noah Misch)\n          This change ensures that permissions-related decisions will promptly reflect the results of ALTER ROLE ... [NO] INHERIT.",
      "sinceVersion": "12.6",
      "contributor": "Noah Misch"
    },
    {
      "title": "Prevent misprocessing of ambiguous CREATE TABLE LIKE clauses",
      "description": "Prevent misprocessing of ambiguous CREATE TABLE LIKE clauses (Tom Lane)\n          A `LIKE` clause is re-examined after initial creation of the new table, to handle importation of indexes and such. It was possible for this re-examination to find a different table of the same name, causing unexpected behavior; one example is where the new table is a temporary table of the same name as the `LIKE` target.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rearrange order of operations in CREATE TABLE LIKE so that indexes are cloned before building foreign key constraints",
      "description": "Rearrange order of operations in CREATE TABLE LIKE so that indexes are cloned before building foreign key constraints (Tom Lane)\n          This fixes the case where a self-referential foreign key constraint declared in the outer CREATE TABLE depends on an index that's coming from the `LIKE` clause.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow CREATE STATISTICS on system catalogs",
      "description": "Disallow CREATE STATISTICS on system catalogs (Tomas Vondra)",
      "sinceVersion": "12.6",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Disallow converting an inheritance child table to a view",
      "description": "Disallow converting an inheritance child table to a view (Tom Lane)",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that disk space allocated for a dropped relation is released promptly at commit",
      "description": "Ensure that disk space allocated for a dropped relation is released promptly at commit (Thomas Munro)\n          Previously, if the dropped relation spanned multiple 1GB segments, only the first segment was truncated immediately. Other segments were simply unlinked, which doesn't authorize the kernel to release the storage so long as any other backends still have the files open.",
      "sinceVersion": "12.6",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Prevent dropping a tablespace that is referenced by a partitioned relation, but is not used for any actual storage",
      "description": "Prevent dropping a tablespace that is referenced by a partitioned relation, but is not used for any actual storage (Álvaro Herrera)\n          Previously this was allowed, but subsequent operations on the partitioned relation would fail.",
      "sinceVersion": "12.6",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix progress reporting for CLUSTER",
      "description": "Fix progress reporting for CLUSTER (Matthias van de Meent)",
      "sinceVersion": "12.6",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Fix handling of backslash-escaped multibyte characters in COPY FROM",
      "description": "Fix handling of backslash-escaped multibyte characters in COPY FROM (Heikki Linnakangas)\n          A backslash followed by a multibyte character was not handled correctly. In some client character encodings, this could lead to misinterpreting part of a multibyte character as a field separator or end-of-copy-data marker.",
      "sinceVersion": "12.6",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid preallocating executor hash tables in EXPLAIN without `ANALYZE`",
      "description": "Avoid preallocating executor hash tables in EXPLAIN without `ANALYZE` (Alexey Bashtanov)",
      "sinceVersion": "12.6",
      "contributor": "Alexey Bashtanov"
    },
    {
      "title": "Allow the jsonb concatenation operator to handle all combinations of JSON data types",
      "description": "Allow the jsonb concatenation operator to handle all combinations of JSON data types (Tom Lane)\n          We can concatenate two JSON objects or two JSON arrays. Handle other cases by wrapping non-array inputs in one-element arrays, then performing an array concatenation. Previously, some combinations of inputs followed this rule but others arbitrarily threw an error.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression",
      "description": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression (Tom Lane)\n          This error could cause the quantifier to act non-greedy, that is behave like a `*?` quantifier would do in full regular expressions.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix numeric `power",
      "description": "Fix numeric `power()()` for the case where the exponent is exactly `INT_MIN` (-2147483648) (Dean Rasheed)\n          Previously, a result with no significant digits was produced.",
      "sinceVersion": "12.6",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log",
      "description": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log (Noah Misch)\n          The wraparound point typically falls in the middle of a page, which must be rounded off to a page boundary, and that was not done correctly. No issue could arise unless an installation had gotten to within one page of SLRU overflow, which is unlikely in a properly-functioning system. If this did happen, it would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "sinceVersion": "12.6",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix memory leak in walsender processes while sending new snapshots for logical decoding",
      "description": "Fix memory leak in walsender processes while sending new snapshots for logical decoding (Amit Kapila)",
      "sinceVersion": "12.6",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Fix walsender to accept additional commands after terminating replication",
      "description": "Fix walsender to accept additional commands after terminating replication (Jeff Davis)",
      "sinceVersion": "12.6",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Ensure detection of deadlocks between hot standby backends and the startup",
      "description": "Ensure detection of deadlocks between hot standby backends and the startup (WAL-application) process (Fujii Masao)\n          The startup process did not run the deadlock detection code, so that in situations where the startup process is last to join a circular wait situation, the deadlock might never be recognized.",
      "sinceVersion": "12.6",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix possible failure to detect recovery conflicts while deleting an index entry that references a HOT chain",
      "description": "Fix possible failure to detect recovery conflicts while deleting an index entry that references a HOT chain (Peter Geoghegan)\n          The code failed to traverse the HOT chain and might thus compute a too-old XID horizon, which could lead to incorrect conflict processing in hot standby. The practical impact of this bug is limited; in most cases the correct XID horizon would be found anyway from nearby operations.",
      "sinceVersion": "12.6",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that a nonempty value of krb_server_keyfile always overrides any setting of KRB5_KTNAME in the server's environment",
      "description": "Ensure that a nonempty value of krb_server_keyfile always overrides any setting of KRB5_KTNAME in the server's environment (Tom Lane)\n          Previously, which setting took precedence depended on whether the client requests GSS encryption.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In server log messages about failing to match connections to pg_hba.conf entries, include details about whether GSS encryption has been activated",
      "description": "In server log messages about failing to match connections to pg_hba.conf entries, include details about whether GSS encryption has been activated (Kyotaro Horiguchi, Tom Lane)\n          This is relevant data if `hostgssenc` or `hostnogssenc` entries exist.",
      "sinceVersion": "12.6",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "Fix assorted issues in server's support for GSS encryption",
      "description": "Fix assorted issues in server's support for GSS encryption (Tom Lane)\n          Remove pointless restriction that only GSS authentication can be used on a GSS-encrypted connection. Add GSS encryption information to connection-authorized log messages. Include GSS-related space when computing the required size of shared memory (this omission could have caused problems with very high max_connections settings). Avoid possible infinite recursion when reporting an unrecoverable GSS encryption error.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence",
      "description": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence (Tom Lane)\n          Previously, there was a race condition whereby a child process that had requested a background worker just before shutdown could wait indefinitely, preventing shutdown from completing.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix portability problem in parsing of recovery_target_xid values",
      "description": "Fix portability problem in parsing of recovery_target_xid values (Michael Paquier)\n          The target XID is potentially 64 bits wide, but it was parsed with `strtoul()()`, causing misbehavior on platforms where long is 32 bits (such as Windows).",
      "sinceVersion": "12.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid trying to use parallel index build in a standalone backend",
      "description": "Avoid trying to use parallel index build in a standalone backend (Yulin Pei)",
      "sinceVersion": "12.6",
      "contributor": "Yulin Pei"
    },
    {
      "title": "Allow index AMs to support included columns without necessarily supporting multiple key columns",
      "description": "Allow index AMs to support included columns without necessarily supporting multiple key columns (Tom Lane)",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid assertion failure during parallel aggregation of an aggregate with a non-strict deserialization function",
      "description": "Avoid assertion failure during parallel aggregation of an aggregate with a non-strict deserialization function (Andrew Gierth)\n          No such aggregate functions exist in core PostgreSQL, but some extensions such as PostGIS provide some. The mistake is harmless anyway in a non-assert build.",
      "sinceVersion": "12.6",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Avoid assertion failure in `pg_get_functiondef",
      "description": "Avoid assertion failure in `pg_get_functiondef()()` when examining a function with a `TRANSFORM` option (Tom Lane)",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data structure misallocation in PL/pgSQL's CALL statement",
      "description": "Fix data structure misallocation in PL/pgSQL's CALL statement (Tom Lane)\n          A CALL in a PL/pgSQL procedure, to another procedure that has OUT parameters, would fail if the called procedure did a COMMIT or ROLLBACK.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In libpq, do not skip trying SSL after GSS encryption",
      "description": "In libpq, do not skip trying SSL after GSS encryption (Tom Lane)\n          If we successfully made a GSS-encrypted connection, but then failed during authentication, we would fall back to an unencrypted connection rather than next trying an SSL-encrypted connection. This could lead to unexpected connection failure, or to silently getting an unencrypted connection where an encrypted one is expected. Fortunately, GSS encryption could only succeed if both client and server hold valid tickets in the same Kerberos infrastructure. It seems unlikely for that to be true in an environment that requires SSL encryption instead.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql, re-allow including a password in a `connection_string` argument of a \\connect command",
      "description": "In psql, re-allow including a password in a `connection_string` argument of a \\connect command (Tom Lane)\n          This used to work, but a recent bug fix caused the password to be ignored (resulting in prompting for a password).",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql's \\d commands, don't truncate the display of column default values",
      "description": "In psql's \\d commands, don't truncate the display of column default values (Tom Lane)\n          Formerly, they were arbitrarily truncated at 128 characters.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix assorted bugs in psql's \\help command",
      "description": "Fix assorted bugs in psql's \\help command (Kyotaro Horiguchi, Tom Lane)\n          \\help with two argument words failed to find a command description using only the first word, for example `\\help reset all` should show the help for RESET but did not. Also, \\help often failed to invoke the pager when it should. It also leaked memory.",
      "sinceVersion": "12.6",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "Fix pg_dump's dumping of inherited generated columns",
      "description": "Fix pg_dump's dumping of inherited generated columns (Peter Eisentraut)\n          The previous behavior resulted in (harmless) errors during restore.",
      "sinceVersion": "12.6",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "In pg_dump, ensure that the restore script runs ALTER PUBLICATION ADD TABLE commands as the owner of the publication, and similarly runs ALTER INDEX ATTACH PARTITION commands as the owner of the partitioned index",
      "description": "In pg_dump, ensure that the restore script runs ALTER PUBLICATION ADD TABLE commands as the owner of the publication, and similarly runs ALTER INDEX ATTACH PARTITION commands as the owner of the partitioned index (Tom Lane)\n          Previously, these commands would be run by the role that started the restore script; which will usually work, but in corner cases that role might not have adequate permissions.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump to handle `WITH GRANT OPTION` in an extension's initial privileges",
      "description": "Fix pg_dump to handle `WITH GRANT OPTION` in an extension's initial privileges (Noah Misch)\n          If an extension's script creates an object and grants privileges on it with grant option, then later the user revokes such privileges, pg_dump would generate incorrect SQL for reproducing the situation. (Few if any extensions do this today.)",
      "sinceVersion": "12.6",
      "contributor": "Noah Misch"
    },
    {
      "title": "In pg_rewind, ensure that all WAL is accounted for when rewinding a standby server",
      "description": "In pg_rewind, ensure that all WAL is accounted for when rewinding a standby server (Ian Barwick, Heikki Linnakangas)",
      "sinceVersion": "12.6",
      "contributor": "Ian Barwick, Heikki Linnakangas"
    },
    {
      "title": "In pgbench, disallow a digit as the first character of a variable name",
      "description": "In pgbench, disallow a digit as the first character of a variable name (Fabien Coelho)\n          This prevents trying to substitute variables into timestamp literal values, which may contain strings like `12:34`.",
      "sinceVersion": "12.6",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Report the correct database name in connection failure error messages from some client programs",
      "description": "Report the correct database name in connection failure error messages from some client programs (Álvaro Herrera)\n          If the database name was defaulted rather than given on the command line, pg_dumpall, pgbench, oid2name, and vacuumlo would produce misleading error messages after a connection failure.",
      "sinceVersion": "12.6",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix memory leak in contrib/auto_explain",
      "description": "Fix memory leak in contrib/auto_explain (Japin Li)\n          Memory consumed while producing the `EXPLAIN` output was not freed until the end of the current transaction (for a top-level statement) or the end of the surrounding statement (for a nested statement). This was particularly a problem with log_nested_statements enabled.",
      "sinceVersion": "12.6",
      "contributor": "Japin Li"
    },
    {
      "title": "In contrib/postgres_fdw, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped",
      "description": "In contrib/postgres_fdw, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped (Bharath Rupireddy)\n          Open connections that depend on a dropped user mapping or foreign server can no longer be referenced, but formerly they were kept around anyway for the duration of the local session.",
      "sinceVersion": "12.6",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "In contrib/pgcrypto, check for error returns from OpenSSL's EVP functions",
      "description": "In contrib/pgcrypto, check for error returns from OpenSSL's EVP functions (Michael Paquier)\n          We do not really expect errors here, but this change silences warnings from static analysis tools.",
      "sinceVersion": "12.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Make contrib/pg_prewarm more robust when the cluster is shut down before prewarming is complete",
      "description": "Make contrib/pg_prewarm more robust when the cluster is shut down before prewarming is complete (Tom Lane)\n          Previously, autoprewarm would rewrite its status file with only the block numbers that it had managed to load so far, thus perhaps largely disabling the prewarm functionality in the next startup. Instead, suppress status file updates until the initial loading pass is complete.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/pg_trgm's GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items",
      "description": "In contrib/pg_trgm's GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items (Andrew Gierth, Alexander Korotkov)",
      "sinceVersion": "12.6",
      "contributor": "Andrew Gierth, Alexander Korotkov"
    },
    {
      "title": "Fix miscalculation of timeouts in contrib/pg_prewarm and contrib/postgres_fdw",
      "description": "Fix miscalculation of timeouts in contrib/pg_prewarm and contrib/postgres_fdw (Alexey Kondratov, Tom Lane)\n          The main loop in contrib/pg_prewarm's autoprewarm parent process underestimated its desired sleep time by a factor of 1000, causing it to consume much more CPU than intended. When waiting for a result from a remote server, contrib/postgres_fdw overestimated the desired timeout by a factor of 1000 (though this error had been mitigated by imposing a clamp to 60 seconds).\n          Both of these errors stemmed from incorrectly converting seconds-and-microseconds to milliseconds. Introduce a new API `TimestampDifferenceMilliseconds()()` to make it easier to get this right in the future.",
      "sinceVersion": "12.6",
      "contributor": "Alexey Kondratov, Tom Lane"
    },
    {
      "title": "Improve configure's heuristics for selecting PG_SYSROOT on macOS",
      "description": "Improve configure's heuristics for selecting PG_SYSROOT on macOS (Tom Lane)\n          The new method is more likely to produce desirable results when Xcode is newer than the underlying operating system. Choosing a sysroot that does not match the OS version may result in nonfunctional executables.",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "While building on macOS, specify -isysroot in link steps as well as compile steps",
      "description": "While building on macOS, specify -isysroot in link steps as well as compile steps (James Hilliard)\n          This likewise improves the results when Xcode is out of sync with the operating system.",
      "sinceVersion": "12.6",
      "contributor": "James Hilliard"
    },
    {
      "title": "Fix JIT compilation to be compatible with LLVM 11 and LLVM 12",
      "description": "Fix JIT compilation to be compatible with LLVM 11 and LLVM 12 (Andres Freund)",
      "sinceVersion": "12.6",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix potential mishandling of references to boolean variables in JIT expression compilation",
      "description": "Fix potential mishandling of references to boolean variables in JIT expression compilation (Andres Freund)\n          No field reports attributable to this have been seen, but it seems likely that it could cause problems on some architectures.",
      "sinceVersion": "12.6",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix compile failure with ICU 68 and later",
      "description": "Fix compile failure with ICU 68 and later (Tom Lane)",
      "sinceVersion": "12.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2021a for DST law changes in Russia",
      "description": "Update time zone data files to tzdata release 2021a for DST law changes in Russia (Volgograd zone) and South Sudan, plus historical corrections for Australia, Bahamas, Belize, Bermuda, Ghana, Israel, Kenya, Nigeria, Palestine, Seychelles, and Vanuatu.\n          Notably, the Australia/Currie zone has been corrected to the point where it is identical to Australia/Hobart.",
      "sinceVersion": "12.6",
      "contributor": null
    },
    {
      "title": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists",
      "description": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists (Tom Lane)\n          If the `UPDATE` list contains any multi-column sub-selects (which give rise to junk columns in addition to the results proper), the `UPDATE` path would end up storing tuples that include the values of the extra junk columns. That's fairly harmless in the short run, but if new columns are added to the table then the values would become accessible, possibly leading to malfunctions if they don't match the datatypes of the added columns.\n          In addition, in versions supporting cross-partition updates, a cross-partition update triggered by such a case had the reverse problem: the junk columns were removed from the target list, typically causing an immediate crash due to malfunction of the multi-column sub-select mechanism. (CVE-2021-32028)",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump's dumping of generated columns in partitioned tables",
      "description": "Fix pg_dump's dumping of generated columns in partitioned tables (Peter Eisentraut)\n          A fix introduced in the previous minor release should not be applied to partitioned tables, only traditionally-inherited tables.",
      "sinceVersion": "12.7",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Prevent integer overflows in array subscripting calculations",
      "description": "Prevent integer overflows in array subscripting calculations (Tom Lane)\n          The array code previously did not complain about cases where an array's lower bound plus length overflows an integer. This resulted in later entries in the array becoming inaccessible (since their subscripts could not be written as integers), but more importantly it confused subsequent assignment operations. This could lead to memory overwrites, with ensuing crashes or unwanted data modifications. (CVE-2021-32027)",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possibly-incorrect computation of UPDATE ... RETURNING outputs for joined cross-partition updates",
      "description": "Fix possibly-incorrect computation of UPDATE ... RETURNING outputs for joined cross-partition updates (Amit Langote, Etsuro Fujita)\n          If an UPDATE for a partitioned table caused a row to be moved to another partition with a physically different row type (for example, one with a different set of dropped columns), computation of `RETURNING` results for that row could produce errors or wrong answers. No error is observed unless the UPDATE involves other tables being joined to the target table. (CVE-2021-32029)",
      "sinceVersion": "12.7",
      "contributor": "Amit Langote, Etsuro Fujita"
    },
    {
      "title": "Fix adjustment of constraint deferrability properties in partitioned tables",
      "description": "Fix adjustment of constraint deferrability properties in partitioned tables (Álvaro Herrera)\n          When applied to a foreign-key constraint of a partitioned table, ALTER TABLE ... ALTER CONSTRAINT failed to adjust the `DEFERRABLE` and/or `INITIALLY DEFERRED` markings of the constraints and triggers of leaf partitions. This led to unexpected behavior of such constraints. After updating to this version, any misbehaving partitioned tables can be fixed by executing a new ALTER command to set the desired properties.\n          This change also disallows applying such an ALTER directly to the constraints of leaf partitions. The only supported case is for the whole partitioning hierarchy to have identical constraint properties, so such ALTERs must be applied at the partition root.",
      "sinceVersion": "12.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "When attaching a child table with ALTER TABLE ... INHERIT, insist that any generated columns in the parent be generated the same way in the child",
      "description": "When attaching a child table with ALTER TABLE ... INHERIT, insist that any generated columns in the parent be generated the same way in the child (Peter Eisentraut)",
      "sinceVersion": "12.7",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Forbid marking an identity column as nullable",
      "description": "Forbid marking an identity column as nullable (Vik Fearing)\n          `GENERATED ... AS IDENTITY` implies `NOT NULL`, so don't allow it to be combined with an explicit `NULL` specification.",
      "sinceVersion": "12.7",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Allow `ALTER ROLE/DATABASE ... SET` to set the role, session_authorization, and temp_buffers parameters",
      "description": "Allow `ALTER ROLE/DATABASE ... SET` to set the role, session_authorization, and temp_buffers parameters (Tom Lane)\n          Previously, over-eager validity checks might reject these commands, even if the values would have worked when used later. This created a command ordering hazard for dump/reload and upgrade scenarios.",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that REINDEX CONCURRENTLY preserves any statistics target that's been set for the index",
      "description": "Ensure that REINDEX CONCURRENTLY preserves any statistics target that's been set for the index (Michael Paquier)",
      "sinceVersion": "12.7",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix COMMIT AND CHAIN to work correctly when the current transaction has live savepoints",
      "description": "Fix COMMIT AND CHAIN to work correctly when the current transaction has live savepoints (Fujii Masao)",
      "sinceVersion": "12.7",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type",
      "description": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type (Tom Lane)\n          This led to a parse tree in which the `COLLATE` appears to be applied to a non-collatable value. While that normally has no real impact (since `COLLATE` has no effect at runtime), it was possible to construct views that would be rejected during dump/reload.",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use-after-free bug in saving tuples for `AFTER` triggers",
      "description": "Fix use-after-free bug in saving tuples for `AFTER` triggers (Amit Langote)\n          This could cause crashes in some situations.",
      "sinceVersion": "12.7",
      "contributor": "Amit Langote"
    },
    {
      "title": "Disallow calling window functions and procedures via the “fast path” wire protocol message",
      "description": "Disallow calling window functions and procedures via the “fast path” wire protocol message (Tom Lane)\n          Only plain functions are supported here. While trying to call an aggregate function failed already, calling a window function would crash, and calling a procedure would work only if the procedure did no transaction control.",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Extend `pg_identify_object_as_address",
      "description": "Extend `pg_identify_object_as_address()()` to support event triggers (Joel Jacobson)",
      "sinceVersion": "12.7",
      "contributor": "Joel Jacobson"
    },
    {
      "title": "Fix `to_char",
      "description": "Fix `to_char()()`'s handling of Roman-numeral month format codes with negative intervals (Julien Rouhaud)\n          Previously, such cases would usually cause a crash.",
      "sinceVersion": "12.7",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Check that the argument of `pg_import_system_collations",
      "description": "Check that the argument of `pg_import_system_collations()()` is a valid schema OID (Tom Lane)",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use of uninitialized value while parsing an `\\{`m`,n`\\} quantifier in a BRE-mode regular expression",
      "description": "Fix use of uninitialized value while parsing an `\\{`m`,n`\\} quantifier in a BRE-mode regular expression (Tom Lane)\n          This error could cause the quantifier to act non-greedy, that is behave like an `{`m`,n`}? quantifier would do in full regular expressions.",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't ignore system columns when estimating the number of groups using extended statistics",
      "description": "Don't ignore system columns when estimating the number of groups using extended statistics (Tomas Vondra)\n          This led to strange estimates for queries such as `SELECT ... GROUP BY a, b, ctid`.",
      "sinceVersion": "12.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix",
      "description": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix (Tom Lane)\n          This typically led to a `NaN` selectivity value, causing assertion failures or strange planner behavior.",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans",
      "description": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans (Tomas Vondra)\n          If the page range size used by a BRIN index isn't a power of two, there were corner cases in which a bitmap scan could try to fetch pages past the actual end of the table, leading to “could not open file” errors.",
      "sinceVersion": "12.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL",
      "description": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL (Soumyadeep Chakraborty, Jimmy Yih, Kevin Yeap)\n          This error could lead to subsequent WAL records being written under the wrong timeline ID, leading to consistency problems, or even complete failure to be able to restart the server, later on.",
      "sinceVersion": "12.7",
      "contributor": "Soumyadeep Chakraborty, Jimmy Yih, Kevin Yeap"
    },
    {
      "title": "Ensure that locks are released while shutting down a standby server's startup process",
      "description": "Ensure that locks are released while shutting down a standby server's startup process (Fujii Masao)\n          When a standby server is shut down while still in recovery, some locks might be left held. This causes assertion failures in debug builds; it's unclear whether any serious consequence could occur in production builds.",
      "sinceVersion": "12.7",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix crash when a logical replication worker does ALTER SUBSCRIPTION REFRESH",
      "description": "Fix crash when a logical replication worker does ALTER SUBSCRIPTION REFRESH (Peter Smith)\n          The core code won't do this, but a replica trigger could.",
      "sinceVersion": "12.7",
      "contributor": "Peter Smith"
    },
    {
      "title": "Ensure we default to wal_sync_method = `fdatasync` on recent FreeBSD",
      "description": "Ensure we default to wal_sync_method = `fdatasync` on recent FreeBSD (Thomas Munro)\n          FreeBSD 13 supports `open_datasync`, which would normally become the default choice. However, it's unclear whether that is actually an improvement for Postgres, so preserve the existing default for now.",
      "sinceVersion": "12.7",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Pass the correct trigger OID to object post-alter hooks during ALTER CONSTRAINT",
      "description": "Pass the correct trigger OID to object post-alter hooks during ALTER CONSTRAINT (Álvaro Herrera)\n          When updating trigger properties during ALTER CONSTRAINT, the post-alter hook was told that we are updating a trigger, but the constraint's OID was passed instead of the trigger's.",
      "sinceVersion": "12.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure we finish cleaning up when interrupted while detaching a DSM segment",
      "description": "Ensure we finish cleaning up when interrupted while detaching a DSM segment (Thomas Munro)\n          This error could result in temporary files not being cleaned up promptly after a parallel query.",
      "sinceVersion": "12.7",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix memory leak while initializing server's SSL parameters",
      "description": "Fix memory leak while initializing server's SSL parameters (Michael Paquier)\n          This is ordinarily insignificant, but if the postmaster is repeatedly sent SIGHUP signals, the leak can build up over time.",
      "sinceVersion": "12.7",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix assorted minor memory leaks in the server",
      "description": "Fix assorted minor memory leaks in the server (Tom Lane, Andres Freund)",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane, Andres Freund"
    },
    {
      "title": "Fix failure when a PL/pgSQL DO block makes use of both composite-type variables and transaction control",
      "description": "Fix failure when a PL/pgSQL DO block makes use of both composite-type variables and transaction control (Tom Lane)\n          Previously, such cases led to errors about leaked tuple descriptors.",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received",
      "description": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received (Tom Lane)",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "When initdb prints instructions about how to start the server, make the path shown for pg_ctl use backslash separators on Windows",
      "description": "When initdb prints instructions about how to start the server, make the path shown for pg_ctl use backslash separators on Windows (Nitin Jadhav)",
      "sinceVersion": "12.7",
      "contributor": "Nitin Jadhav"
    },
    {
      "title": "Fix psql to restore the previous behavior of `\\connect service=`something``",
      "description": "Fix psql to restore the previous behavior of `\\connect service=`something`` (Tom Lane)\n          A previous bug fix caused environment variables (such as PGPORT) to override entries in the service file in this context. Restore the previous behavior, in which the priority is the other way around.",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix psql's `ON_ERROR_ROLLBACK` feature to handle `COMMIT AND CHAIN` commands correctly",
      "description": "Fix psql's `ON_ERROR_ROLLBACK` feature to handle `COMMIT AND CHAIN` commands correctly (Arthur Nascimento)\n          Previously, this case failed with “savepoint \"pg_psql_temporary_savepoint\" does not exist”.",
      "sinceVersion": "12.7",
      "contributor": "Arthur Nascimento"
    },
    {
      "title": "Fix race condition in detection of file modification by psql's `\\e` and related commands",
      "description": "Fix race condition in detection of file modification by psql's `\\e` and related commands (Laurenz Albe)\n          A very fast typist could fool the code's file-timestamp-based detection of whether the temporary edit file was changed.",
      "sinceVersion": "12.7",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Fix missed file version check in pg_restore",
      "description": "Fix missed file version check in pg_restore (Tom Lane)\n          When reading a custom-format archive from a non-seekable source, pg_restore neglected to check the archive version. If it was fed a newer archive version than it can support, it would fail messily later on.",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add some more checks to pg_upgrade for user tables containing non-upgradable data types",
      "description": "Add some more checks to pg_upgrade for user tables containing non-upgradable data types (Tom Lane)\n          Fix detection of some cases where a non-upgradable data type is embedded within a container type (such as an array or range). Also disallow upgrading when user tables contain columns of system-defined composite types, since those types' OIDs are not stable across versions.",
      "sinceVersion": "12.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect progress-reporting calculation in pg_checksums",
      "description": "Fix incorrect progress-reporting calculation in pg_checksums (Shinya Kato)",
      "sinceVersion": "12.7",
      "contributor": "Shinya Kato"
    },
    {
      "title": "Fix pg_waldump to count `XACT` records correctly when generating per-record statistics",
      "description": "Fix pg_waldump to count `XACT` records correctly when generating per-record statistics (Kyotaro Horiguchi)",
      "sinceVersion": "12.7",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix contrib/amcheck to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set",
      "description": "Fix contrib/amcheck to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set (Julien Rouhaud)\n          This is a valid state after `SELECT FOR UPDATE`.",
      "sinceVersion": "12.7",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions",
      "description": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions (Noah Misch)",
      "sinceVersion": "12.7",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix testing of PL/Python for Python 3 on Solaris",
      "description": "Fix testing of PL/Python for Python 3 on Solaris (Noah Misch)",
      "sinceVersion": "12.7",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix mis-planning of repeated application of a projection step",
      "description": "Fix mis-planning of repeated application of a projection step (Tom Lane)\n          The planner could create an incorrect plan in cases where two ProjectionPaths were stacked on top of each other. The only known way to trigger that situation involves parallel sort operations, but there may be other instances. The result would be crashes or incorrect query results. Disclosure of server memory contents is also possible. (CVE-2021-3677)",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow SSL renegotiation more completely",
      "description": "Disallow SSL renegotiation more completely (Michael Paquier)\n          SSL renegotiation has been disabled for some time, but the server would still cooperate with a client-initiated renegotiation request. A maliciously crafted renegotiation request could result in a server crash (see OpenSSL issue CVE-2021-3449). Disable the feature altogether on OpenSSL versions that permit doing so, which are 1.1.0h and newer.",
      "sinceVersion": "12.8",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Restore the Portal-level snapshot after COMMIT or ROLLBACK within a procedure",
      "description": "Restore the Portal-level snapshot after COMMIT or ROLLBACK within a procedure (Tom Lane)\n          This change fixes cases where an attempt to fetch a toasted value immediately after COMMIT/ROLLBACK would fail with errors like “no known snapshots” or “missing chunk number 0 for toast value”.\n          Some extensions may attempt to execute SQL code outside of any Portal. They are responsible for ensuring that an outer snapshot exists before doing so. Previously, not providing a snapshot might work or it might not; now it will consistently fail with “cannot execute SQL without an outer snapshot or portal”.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid misbehavior when persisting the output of a cursor that's reading a non-stable query",
      "description": "Avoid misbehavior when persisting the output of a cursor that's reading a non-stable query (Tom Lane)\n          Previously, we'd always rewind and re-read the whole query result, possibly getting results different from the earlier execution, causing great confusion later. For a NO SCROLL cursor, we can fix this by only storing the not-yet-read portion of the query output, which is sufficient since a NO SCROLL cursor can't be backed up. Cursors with the SCROLL option remain at hazard, but that was already documented to be an unsafe option to use with a non-stable query. Make those documentation warnings stronger.\n          Also force NO SCROLL mode for the implicit cursor used by a PL/pgSQL FOR-over-query loop, to avoid this type of problem when persisting such a cursor during an intra-procedure commit.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject `SELECT ... GROUP BY GROUPING SETS",
      "description": "Reject `SELECT ... GROUP BY GROUPING SETS (()) FOR UPDATE` (Tom Lane)\n          This should be disallowed, just as `FOR UPDATE` with a plain `GROUP BY` is disallowed, but the test for that failed to handle empty grouping sets correctly. The end result would be a null-pointer dereference in the executor.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject cases where a query in `WITH` rewrites to just NOTIFY",
      "description": "Reject cases where a query in `WITH` rewrites to just NOTIFY (Tom Lane)\n          Such cases previously crashed.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "In numeric multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point",
      "description": "In numeric multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point (Dean Rasheed)",
      "sinceVersion": "12.8",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix corner-case errors and loss of precision when raising numeric values to very large powers",
      "description": "Fix corner-case errors and loss of precision when raising numeric values to very large powers (Dean Rasheed)",
      "sinceVersion": "12.8",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix division-by-zero failure in `to_char",
      "description": "Fix division-by-zero failure in `to_char()()` with `EEEE` format and a numeric input value less than 10^(-1001) (Dean Rasheed)",
      "sinceVersion": "12.8",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix `pg_size_pretty",
      "description": "Fix `pg_size_pretty(bigint)()` to round negative values consistently with the way it rounds positive ones (and consistently with the numeric version) (Dean Rasheed, David Rowley)",
      "sinceVersion": "12.8",
      "contributor": "Dean Rasheed, David Rowley"
    },
    {
      "title": "Make `pg_filenode_relation",
      "description": "Make `pg_filenode_relation(0, 0)` return NULL rather than failing (Justin Pryzby)",
      "sinceVersion": "12.8",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Make ALTER EXTENSION lock the extension when adding or removing a member object",
      "description": "Make ALTER EXTENSION lock the extension when adding or removing a member object (Tom Lane)\n          The previous coding allowed ALTER EXTENSION ADD/DROP to occur concurrently with DROP EXTENSION, leading to a crash or corrupt catalog entries.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ALTER SUBSCRIPTION to reject an empty slot name",
      "description": "Fix ALTER SUBSCRIPTION to reject an empty slot name (Japin Li)",
      "sinceVersion": "12.8",
      "contributor": "Japin Li"
    },
    {
      "title": "When cloning a partitioned table's triggers to a new partition, ensure that their enabled status is copied",
      "description": "When cloning a partitioned table's triggers to a new partition, ensure that their enabled status is copied (Álvaro Herrera)",
      "sinceVersion": "12.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid alias conflicts in queries generated for REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Avoid alias conflicts in queries generated for REFRESH MATERIALIZED VIEW CONCURRENTLY (Tom Lane, Bharath Rupireddy)\n          This command failed on materialized views containing columns with certain names, notably mv and newdata.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane, Bharath Rupireddy"
    },
    {
      "title": "Fix PREPARE TRANSACTION to check correctly for conflicting session-lifespan and transaction-lifespan locks",
      "description": "Fix PREPARE TRANSACTION to check correctly for conflicting session-lifespan and transaction-lifespan locks (Tom Lane)\n          A transaction cannot be prepared if it has both session-lifespan and transaction-lifespan locks on the same advisory-lock ID value. This restriction was not fully checked, which could lead to a PANIC during PREPARE TRANSACTION.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior of DROP OWNED BY when the target role is listed more than once in an RLS policy",
      "description": "Fix misbehavior of DROP OWNED BY when the target role is listed more than once in an RLS policy (Tom Lane)",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Skip unnecessary error tests when removing a role from an RLS policy during DROP OWNED BY",
      "description": "Skip unnecessary error tests when removing a role from an RLS policy during DROP OWNED BY (Tom Lane)\n          Notably, this fixes some cases where it was necessary to be a superuser to use DROP OWNED BY.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow whole-row variables in `GENERATED` expressions",
      "description": "Disallow whole-row variables in `GENERATED` expressions (Tom Lane)\n          Use of a whole-row variable clearly violates the rule that a generated column cannot depend on itself, so such cases have no well-defined behavior. The actual behavior frequently included a crash.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix usage of tableoid in `GENERATED` expressions",
      "description": "Fix usage of tableoid in `GENERATED` expressions (Tom Lane)\n          Some code paths failed to provide a valid value for this system column while evaluating a `GENERATED` expression.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't store a “fast default” when adding a column to a foreign table",
      "description": "Don't store a “fast default” when adding a column to a foreign table (Andrew Dunstan)\n          The fast default is useless since no local heap storage exists for such a table, but it confused subsequent operations. In addition to suppressing creation of such catalog entries in ALTER TABLE commands, adjust the downstream code to cope when one is incorrectly present.",
      "sinceVersion": "12.8",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Allow index state flags to be updated transactionally",
      "description": "Allow index state flags to be updated transactionally (Michael Paquier, Andrey Lepikhov)\n          This avoids failures when dealing with index predicates that aren't really immutable. While that's not considered a supported case, the original reason for using a non-transactional update here is long gone, so we may as well change it.",
      "sinceVersion": "12.8",
      "contributor": "Michael Paquier, Andrey Lepikhov"
    },
    {
      "title": "Avoid corrupting the plan cache entry when CREATE DOMAIN or ALTER DOMAIN appears in a cached plan",
      "description": "Avoid corrupting the plan cache entry when CREATE DOMAIN or ALTER DOMAIN appears in a cached plan (Tom Lane)",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make walsenders show their latest replication commands in pg_stat_activity",
      "description": "Make walsenders show their latest replication commands in pg_stat_activity (Tom Lane)\n          Previously, a walsender would show its latest SQL command, which was confusing if it's now doing some replication operation instead. Now we show replication-protocol commands on the same footing as SQL commands.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make pg_settings.pending_restart show as true when the pertinent entry in postgresql.conf has been removed",
      "description": "Make pg_settings.pending_restart show as true when the pertinent entry in postgresql.conf has been removed (Álvaro Herrera)\n          pending_restart correctly showed the case where an entry that cannot be changed without a postmaster restart has been modified, but not where the entry had been removed altogether.",
      "sinceVersion": "12.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix mis-planning of queries involving regular tables that are inheritance children of foreign tables",
      "description": "Fix mis-planning of queries involving regular tables that are inheritance children of foreign tables (Amit Langote)\n          SELECT FOR UPDATE and related commands would fail with assertion failures or “could not find junk column” errors in such cases.",
      "sinceVersion": "12.8",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix corner-case failure of a new standby to follow a new primary",
      "description": "Fix corner-case failure of a new standby to follow a new primary (Dilip Kumar, Robert Haas)\n          Under a narrow combination of conditions, the standby could wind up trying to follow the wrong WAL timeline.",
      "sinceVersion": "12.8",
      "contributor": "Dilip Kumar, Robert Haas"
    },
    {
      "title": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation",
      "description": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation (Fujii Masao)\n          File truncation is irreversible, so it's no longer safe to stop recovery at a point earlier than that record. The corresponding case for transaction commit was fixed years ago, but this one was overlooked.",
      "sinceVersion": "12.8",
      "contributor": "Fujii Masao"
    },
    {
      "title": "In walreceivers, avoid attempting catalog lookups after an error",
      "description": "In walreceivers, avoid attempting catalog lookups after an error (Masahiko Sawada, Bharath Rupireddy)",
      "sinceVersion": "12.8",
      "contributor": "Masahiko Sawada, Bharath Rupireddy"
    },
    {
      "title": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive",
      "description": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive (Fujii Masao, Soumyadeep Chakraborty)",
      "sinceVersion": "12.8",
      "contributor": "Fujii Masao, Soumyadeep Chakraborty"
    },
    {
      "title": "Correctly clear shared state after failing to become a member of a transaction commit group",
      "description": "Correctly clear shared state after failing to become a member of a transaction commit group (Amit Kapila)\n          Given the right timing, this could cause an assertion failure when some later session re-uses the same PGPROC object.",
      "sinceVersion": "12.8",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process",
      "description": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process (Heikki Linnakangas)",
      "sinceVersion": "12.8",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Improve progress reporting for the sort phase of a parallel btree index build",
      "description": "Improve progress reporting for the sort phase of a parallel btree index build (Matthias van de Meent)",
      "sinceVersion": "12.8",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Improve checks for violations of replication protocol",
      "description": "Improve checks for violations of replication protocol (Tom Lane)\n          Logical replication workers frequently used Asserts to check for cases that could be triggered by invalid or out-of-order replication commands. This seems unwise, so promote these tests to regular error checks.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix deadlock when multiple logical replication workers try to truncate the same table",
      "description": "Fix deadlock when multiple logical replication workers try to truncate the same table (Peter Smith, Haiying Tang)",
      "sinceVersion": "12.8",
      "contributor": "Peter Smith, Haiying Tang"
    },
    {
      "title": "Fix error cases and memory leaks in logical decoding of speculative insertions",
      "description": "Fix error cases and memory leaks in logical decoding of speculative insertions (Dilip Kumar)",
      "sinceVersion": "12.8",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Avoid leaving an invalid record-type hash table entry behind after an error",
      "description": "Avoid leaving an invalid record-type hash table entry behind after an error (Sait Talha Nisanci)\n          This could lead to later crashes or memory leakage.",
      "sinceVersion": "12.8",
      "contributor": "Sait Talha Nisanci"
    },
    {
      "title": "Fix plan cache reference leaks in some error cases in CREATE TABLE ... AS EXECUTE",
      "description": "Fix plan cache reference leaks in some error cases in CREATE TABLE ... AS EXECUTE (Tom Lane)",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition in code for sharing tuple descriptors across parallel workers",
      "description": "Fix race condition in code for sharing tuple descriptors across parallel workers (Thomas Munro)\n          Given the right timing, a crash could result.",
      "sinceVersion": "12.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix possible race condition when releasing BackgroundWorkerSlots",
      "description": "Fix possible race condition when releasing BackgroundWorkerSlots (Tom Lane)\n          It's likely that this doesn't fix any observable bug on Intel hardware, but machines with weaker memory ordering rules could have problems.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix latent crash in sorting code",
      "description": "Fix latent crash in sorting code (Ronan Dunklau)\n          One code path could attempt to free a null pointer. The case appears unreachable in the core server's use of sorting, but perhaps it could be triggered by extensions.",
      "sinceVersion": "12.8",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Prevent infinite loops in SP-GiST index insertion",
      "description": "Prevent infinite loops in SP-GiST index insertion (Tom Lane)\n          In the event that INCLUDE columns take up enough space to prevent a leaf index tuple from ever fitting on a page, the text_ops operator class would get into an infinite loop vainly trying to make the tuple fit. While pre-v11 versions don't have INCLUDE columns, back-patch this anti-looping fix to them anyway, as it seems like a good defense against bugs in operator classes.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that SP-GiST index insertion can be terminated by a query cancel request",
      "description": "Ensure that SP-GiST index insertion can be terminated by a query cancel request (Tom Lane, Álvaro Herrera)",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't",
      "description": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't (Tom Lane)",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't abort the process for an out-of-memory failure in libpq's printing functions",
      "description": "Don't abort the process for an out-of-memory failure in libpq's printing functions (Tom Lane)",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpg, allow the numeric value INT_MIN",
      "description": "In ecpg, allow the numeric value INT_MIN (usually -2147483648) to be converted to integer (John Naylor)",
      "sinceVersion": "12.8",
      "contributor": "John Naylor"
    },
    {
      "title": "Fix pg_dump to correctly handle triggers on partitioned tables whose enabled status is different from their parent triggers' status",
      "description": "Fix pg_dump to correctly handle triggers on partitioned tables whose enabled status is different from their parent triggers' status (Justin Pryzby, Álvaro Herrera)",
      "sinceVersion": "12.8",
      "contributor": "Justin Pryzby, Álvaro Herrera"
    },
    {
      "title": "Avoid “invalid creation date in header” warnings observed when running pg_restore on an archive file created in a different time zone",
      "description": "Avoid “invalid creation date in header” warnings observed when running pg_restore on an archive file created in a different time zone (Tom Lane)",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Extend pg_upgrade to detect and warn about extensions that should be upgraded",
      "description": "Extend pg_upgrade to detect and warn about extensions that should be upgraded (Bruce Momjian)\n          A script file is now produced containing the ALTER EXTENSION UPDATE commands needed to bring extensions up to the versions that are considered default in the new installation.",
      "sinceVersion": "12.8",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Avoid problems when switching pg_receivewal between compressed and non-compressed WAL storage",
      "description": "Avoid problems when switching pg_receivewal between compressed and non-compressed WAL storage (Michael Paquier)",
      "sinceVersion": "12.8",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix contrib/postgres_fdw to work usefully with generated columns",
      "description": "Fix contrib/postgres_fdw to work usefully with generated columns (Etsuro Fujita)\n          postgres_fdw will now behave reasonably with generated columns, so long as a generated column in a foreign table represents a generated column in the remote table. IMPORT FOREIGN SCHEMA will now import generated columns that way by default.",
      "sinceVersion": "12.8",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "In contrib/postgres_fdw, avoid attempting catalog lookups after an error",
      "description": "In contrib/postgres_fdw, avoid attempting catalog lookups after an error (Tom Lane)\n          While this usually worked, it's not very safe since the error might have been one that made catalog access nonfunctional. A side effect of the fix is that messages about data conversion errors will now mention the query's table and column aliases (if used) rather than the true underlying name of a foreign table or column.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve the isolation-test infrastructure",
      "description": "Improve the isolation-test infrastructure (Tom Lane, Michael Paquier)\n          Allow isolation test steps to be annotated to show the expected completion order. This allows getting stable results from otherwise-racy test cases, without the long delays that we previously used (not entirely successfully) to fend off race conditions. Allow non-quoted identifiers as isolation test session/step names (formerly, all such names had to be double-quoted). Detect and warn about unused steps in isolation tests. Improve display of query results in isolation tests. Remove isolationtester's “dry-run” mode. Remove memory leaks in isolationtester itself.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane, Michael Paquier"
    },
    {
      "title": "Reduce overhead of cache-clobber testing",
      "description": "Reduce overhead of cache-clobber testing (Tom Lane)",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Python's regression tests to pass with Python 3.10",
      "description": "Fix PL/Python's regression tests to pass with Python 3.10 (Honza Horak)",
      "sinceVersion": "12.8",
      "contributor": "Honza Horak"
    },
    {
      "title": "Make `printf",
      "description": "Make `printf(\"%s\", NULL)` print `(null)` instead of crashing (Tom Lane)\n          This should improve server robustness in corner cases, and it syncs our `printf()` implementation with common libraries.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect log message when point-in-time recovery stops at a ROLLBACK PREPARED record",
      "description": "Fix incorrect log message when point-in-time recovery stops at a ROLLBACK PREPARED record (Simon Riggs)",
      "sinceVersion": "12.8",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Improve ALTER TABLE's messages for wrong-relation-kind errors",
      "description": "Improve ALTER TABLE's messages for wrong-relation-kind errors (Kyotaro Horiguchi)",
      "sinceVersion": "12.8",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Clarify error messages referring to “non-negative” values",
      "description": "Clarify error messages referring to “non-negative” values (Bharath Rupireddy)",
      "sinceVersion": "12.8",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate libldap_r library",
      "description": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate libldap_r library (Adrian Ho, Tom Lane)\n          If there is no libldap_r library, we now silently assume that libldap is thread-safe.",
      "sinceVersion": "12.8",
      "contributor": "Adrian Ho, Tom Lane"
    },
    {
      "title": "Add new make targets `world-bin` and `install-world-bin`",
      "description": "Add new make targets `world-bin` and `install-world-bin` (Andrew Dunstan)\n          These are the same as `world` and `install-world` respectively, except that they do not build or install the documentation.",
      "sinceVersion": "12.8",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix make rule for TAP tests",
      "description": "Fix make rule for TAP tests (`prove_installcheck`) to work in PGXS usage (Andrew Dunstan)",
      "sinceVersion": "12.8",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Adjust JIT code to prepare for forthcoming LLVM API change",
      "description": "Adjust JIT code to prepare for forthcoming LLVM API change (Thomas Munro, Andres Freund)\n          LLVM 13 has made an incompatible API change that will cause crashing of our previous JIT compiler.",
      "sinceVersion": "12.8",
      "contributor": "Thomas Munro, Andres Freund"
    },
    {
      "title": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated",
      "description": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated (Tom Lane)\n          The GSSAPI spec provides for a string pointer and length. It seems that in practice the next byte after the string is usually zero, so that our previous coding didn't actually fail; but we do have a report of AddressSanitizer complaints.",
      "sinceVersion": "12.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Enable building with GSSAPI on MSVC",
      "description": "Enable building with GSSAPI on MSVC (Michael Paquier)\n          Fix various incompatibilities with modern Kerberos builds.",
      "sinceVersion": "12.8",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In MSVC builds, include --with-pgport in the set of configure options reported by pg_config, if it had been specified",
      "description": "In MSVC builds, include --with-pgport in the set of configure options reported by pg_config, if it had been specified (Andrew Dunstan)",
      "sinceVersion": "12.8",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "Use the CLDR project's data to map Windows time zone names to IANA time zones (Tom Lane)\n          When running on Windows, initdb attempts to set the new cluster's timezone parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make the server reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\n          A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\n          The PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make libpq reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\n          A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\n          The PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record (Álvaro Herrera)\n          If the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\n          When applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "sinceVersion": "12.9",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions",
      "description": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions (Andrey Borodin)\n          Rows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for PREPARE TRANSACTION commands that were still in progress when CREATE INDEX CONCURRENTLY checked for them. As before, in installations that have enabled prepared transactions (max_prepared_transactions &gt; 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "sinceVersion": "12.9",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently (Noah Misch, Andrey Borodin)\n          While it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "sinceVersion": "12.9",
      "contributor": "Noah Misch, Andrey Borodin"
    },
    {
      "title": "Fix float4 and float8 hash functions to produce uniform results for NaNs",
      "description": "Fix float4 and float8 hash functions to produce uniform results for NaNs (Tom Lane)\n          Since PostgreSQL's floating-point types deem all NaNs to be equal, it's important for the hash functions to produce the same hash code for all bit-patterns that are NaNs according to the IEEE 754 standard. This failed to happen before, meaning that hash indexes and hash-based query plans might produce incorrect results for non-canonical NaN values. (`'-NaN'::float8` is one way to produce such a value on most machines.) It is advisable to reindex hash indexes on floating-point columns, if there is any possibility that they might contain such values.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table (Amit Langote, Álvaro Herrera)\n          This oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "sinceVersion": "12.9",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication",
      "description": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication (Hou Zhijie, Vignesh C)\n          This oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "sinceVersion": "12.9",
      "contributor": "Hou Zhijie, Vignesh C"
    },
    {
      "title": "Don't discard a cast to the same type with unspecified type modifier",
      "description": "Don't discard a cast to the same type with unspecified type modifier (Tom Lane)\n          For example, if column `f1` is of type `numeric(18,3)`, the parser used to simply discard a cast like `f1::numeric`, on the grounds that it would have no run-time effect. That's true, but the exposed type of the expression should still be considered to be plain `numeric`, not `numeric(18,3)`. This is important for correctly resolving the type of larger constructs, such as recursive `UNION`s.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix updates of element fields in arrays of domain over composite",
      "description": "Fix updates of element fields in arrays of domain over composite (Tom Lane)\n          A command such as `UPDATE tab SET fld[1].subfld = val` failed if the array's elements were domains rather than plain composites.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow creating an ICU collation if the current database's encoding won't support it",
      "description": "Disallow creating an ICU collation if the current database's encoding won't support it (Tom Lane)\n          Previously this was allowed, but then the collation could not be referenced because of the way collation lookup works; you could not use the collation, nor even drop it.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power",
      "description": "Fix corner-case loss of precision in numeric `power()()` (Dean Rasheed)\n          The result could be inaccurate when the first argument is very close to 1.",
      "sinceVersion": "12.9",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid regular expression errors with capturing parentheses inside `{0}`",
      "description": "Avoid regular expression errors with capturing parentheses inside `{0}` (Tom Lane)\n          Regular expressions like `(.){0}...\\1` drew “invalid backreference number”. Other regexp engines such as Perl don't complain, though, and for that matter ours doesn't either in some closely related cases. Worse, it could throw an assertion failure instead. Fix it so that no error is thrown and instead the back-reference is silently deemed to never match.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent regular expression back-references from sometimes matching when they shouldn't",
      "description": "Prevent regular expression back-references from sometimes matching when they shouldn't (Tom Lane)\n          The regexp engine was careless about clearing match data for capturing parentheses after rejecting a partial match. This could allow a later back-reference to match in places where it should fail for lack of a defined referent.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect results from `AT TIME ZONE` applied to a time with time zone value",
      "description": "Fix incorrect results from `AT TIME ZONE` applied to a time with time zone value (Tom Lane)\n          The results were incorrect if the target time zone was specified by a dynamic timezone abbreviation (that is, one that is defined as equivalent to a full time zone name, rather than a fixed UTC offset).",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mistranslation of PlaceHolderVars to inheritance child relations",
      "description": "Fix mistranslation of PlaceHolderVars to inheritance child relations (Tom Lane)\n          This error could result in assertion failures, or in mis-planning of queries having partitioned or inherited tables on the nullable side of an outer join.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "Avoid using MCV-only statistics to estimate the range of a column (Tom Lane)\n          There are corner cases in which ANALYZE will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix restoration of a Portal's snapshot inside a subtransaction",
      "description": "Fix restoration of a Portal's snapshot inside a subtransaction (Bertrand Drouvot)\n          If a procedure commits or rolls back a transaction, and then its next significant action is inside a new subtransaction, snapshot management went wrong, leading to a dangling pointer and probable crash. A typical example in PL/pgSQL is a `COMMIT` immediately followed by a `BEGIN ... EXCEPTION` block that performs a query.",
      "sinceVersion": "12.9",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "Clean up correctly if a transaction fails after exporting its snapshot (Dilip Kumar)\n          This oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "sinceVersion": "12.9",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "Ensure that prepared transactions are properly accounted for during promotion of a standby server (Michael Paquier, Andres Freund)\n          There was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "sinceVersion": "12.9",
      "contributor": "Michael Paquier, Andres Freund"
    },
    {
      "title": "Refuse to rewind a cursor marked `NO SCROLL` if it has been held over from a previous transaction due to the `WITH HOLD` option",
      "description": "Refuse to rewind a cursor marked `NO SCROLL` if it has been held over from a previous transaction due to the `WITH HOLD` option (Tom Lane)\n          We have long forbidden fetching backwards from a `NO SCROLL` cursor, but for historical reasons the prohibition didn't extend to cases in which we rewind the query altogether and then re-fetch forwards. That exception leads to inconsistencies, particularly for held-over cursors which may not have stored all the data necessary to rewind. Disallow rewinding for non-scrollable held-over cursors to block the worst inconsistencies. (v15 will remove the exception altogether.)",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible failure while saving a `WITH HOLD` cursor at transaction end, if it had already been read to completion",
      "description": "Fix possible failure while saving a `WITH HOLD` cursor at transaction end, if it had already been read to completion (Tom Lane)",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix detection of a relation that has grown to the maximum allowed length",
      "description": "Fix detection of a relation that has grown to the maximum allowed length (Tom Lane)\n          An attempt to extend a table or index past the limit of 2^32-1 blocks was rejected, but not soon enough to prevent inconsistent internal state from being created.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule",
      "description": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule (Greg Nancarrow, Tom Lane)\n          The previous failure to do this could lead to problems such as unsafely choosing a parallel plan.",
      "sinceVersion": "12.9",
      "contributor": "Greg Nancarrow, Tom Lane"
    },
    {
      "title": "Fix incorrect reporting of permissions failures on extended statistics objects",
      "description": "Fix incorrect reporting of permissions failures on extended statistics objects (Tomas Vondra)\n          The code typically produced “cache lookup error” rather than the intended message.",
      "sinceVersion": "12.9",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix incorrect snapshot handling in parallel workers",
      "description": "Fix incorrect snapshot handling in parallel workers (Greg Nancarrow)\n          This oversight could lead to misbehavior in parallel queries if the transaction isolation level is less than `REPEATABLE READ`.",
      "sinceVersion": "12.9",
      "contributor": "Greg Nancarrow"
    },
    {
      "title": "Fix logical decoding to correctly ignore toast-table changes for transient tables",
      "description": "Fix logical decoding to correctly ignore toast-table changes for transient tables (Bertrand Drouvot)\n          Logical decoding normally ignores changes in transient tables such as those created during an ALTER TABLE heap rewrite. But that filtering wasn't applied to the associated toast table if any, leading to possible errors when rewriting a table that's being published.",
      "sinceVersion": "12.9",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Ensure that walreceiver processes create all required archive notification files before exiting",
      "description": "Ensure that walreceiver processes create all required archive notification files before exiting (Fujii Masao)\n          If a walreceiver exited exactly at a WAL segment boundary, it failed to make a notification file for the last-received segment, thus delaying archiving of that segment on the standby.",
      "sinceVersion": "12.9",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE`",
      "description": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE` (Masahiko Sawada, Tom Lane)",
      "sinceVersion": "12.9",
      "contributor": "Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Fix parser's processing of aggregate `FILTER` clauses",
      "description": "Fix parser's processing of aggregate `FILTER` clauses (Tom Lane)\n          If the `FILTER` expression is a plain boolean column, the semantic level of the aggregate could be mis-determined, leading to not-per-spec behavior. If the `FILTER` expression is itself a boolean-returning aggregate, an error should be thrown but was not, likely resulting in a crash at execution.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the correct lock level is used when renaming a table",
      "description": "Ensure that the correct lock level is used when renaming a table (Nathan Bossart, Álvaro Herrera)\n          For historical reasons, ALTER INDEX ... RENAME can be applied to any sort of relation. The lock level required to rename an index is lower than that required to rename a table or other kind of relation, but the code got this wrong and would use the weaker lock level whenever the command is spelled ALTER INDEX.",
      "sinceVersion": "12.9",
      "contributor": "Nathan Bossart, Álvaro Herrera"
    },
    {
      "title": "Avoid trying to clean up LLVM state after an error within LLVM",
      "description": "Avoid trying to clean up LLVM state after an error within LLVM (Andres Freund, Justin Pryzby)\n          This prevents a likely crash during backend exit after a fatal LLVM error.",
      "sinceVersion": "12.9",
      "contributor": "Andres Freund, Justin Pryzby"
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently",
      "description": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently (Álvaro Herrera)",
      "sinceVersion": "12.9",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export",
      "description": "Prevent “snapshot reference leak” warning when `lo_export()()` or a related function fails (Heikki Linnakangas)",
      "sinceVersion": "12.9",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Ensure that scans of SP-GiST indexes are counted in the statistics views",
      "description": "Ensure that scans of SP-GiST indexes are counted in the statistics views (Tom Lane)\n          Incrementing the number-of-index-scans counter was overlooked in the SP-GiST code, although per-tuple counters were advanced correctly.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Recalculate relevant wait intervals if recovery_min_apply_delay is changed during recovery",
      "description": "Recalculate relevant wait intervals if recovery_min_apply_delay is changed during recovery (Soumyadeep Chakraborty, Ashwin Agrawal)",
      "sinceVersion": "12.9",
      "contributor": "Soumyadeep Chakraborty, Ashwin Agrawal"
    },
    {
      "title": "Fix infinite loop if a simplehash.h hash table reaches 2^32 elements",
      "description": "Fix infinite loop if a simplehash.h hash table reaches 2^32 elements (Yura Sokolov)\n          It seems unlikely that this bug has been hit in practice, as it would require work_mem settings of hundreds of gigabytes for existing uses of simplehash.h.",
      "sinceVersion": "12.9",
      "contributor": "Yura Sokolov"
    },
    {
      "title": "Reduce memory consumption during calculation of extended statistics",
      "description": "Reduce memory consumption during calculation of extended statistics (Justin Pryzby, Tomas Vondra)",
      "sinceVersion": "12.9",
      "contributor": "Justin Pryzby, Tomas Vondra"
    },
    {
      "title": "Disallow setting huge_pages to `on` when shared_memory_type is `sysv`",
      "description": "Disallow setting huge_pages to `on` when shared_memory_type is `sysv` (Thomas Munro)\n          Previously, this setting was accepted, but it did nothing for lack of any implementation.",
      "sinceVersion": "12.9",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix ecpg to recover correctly after `malloc",
      "description": "Fix ecpg to recover correctly after `malloc()()` failure while establishing a connection (Michael Paquier)",
      "sinceVersion": "12.9",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix misevaluation of stable functions called in the arguments of a PL/pgSQL CALL statement",
      "description": "Fix misevaluation of stable functions called in the arguments of a PL/pgSQL CALL statement (Tom Lane)\n          They were being called with an out-of-date snapshot, so that they would not see any database changes made since the start of the session's top-level command.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine",
      "description": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine (Tom Lane)\n          If the routine does not require an explicit `RETURN`, this usage should be valid, but it was rejected.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove pg_ctl's hard-coded limits on the total length of generated commands",
      "description": "Remove pg_ctl's hard-coded limits on the total length of generated commands (Phil Krylov)\n          For example, this removes a restriction on how many command-line options can be passed through to the postmaster. Individual path names that pg_ctl deals with, such as the postmaster executable's name or the data directory name, are still limited to `MAXPGPATH` bytes in most cases.",
      "sinceVersion": "12.9",
      "contributor": "Phil Krylov"
    },
    {
      "title": "Fix pg_dump to dump non-global default privileges correctly",
      "description": "Fix pg_dump to dump non-global default privileges correctly (Neil Chen, Masahiko Sawada)\n          If a global (unrestricted) ALTER DEFAULT PRIVILEGES command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted ALTER DEFAULT PRIVILEGES command granted that privilege again for a selected role or schema, pg_dump failed to dump the restricted privilege grant correctly.",
      "sinceVersion": "12.9",
      "contributor": "Neil Chen, Masahiko Sawada"
    },
    {
      "title": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped (Tom Lane)\n          This oversight was usually pretty harmless, since once pg_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in pg_dump when attempting to dump trigger definitions from a pre-8.3 server",
      "description": "Fix crash in pg_dump when attempting to dump trigger definitions from a pre-8.3 server (Tom Lane)",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file",
      "description": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file (Daniel Gustafsson)",
      "sinceVersion": "12.9",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Ensure that pgbench exits with non-zero status after a socket-level failure",
      "description": "Ensure that pgbench exits with non-zero status after a socket-level failure (Yugo Nagata, Fabien Coelho)\n          The desired behavior is to finish out the run but then exit with status 2. Also, fix the reporting of such errors.",
      "sinceVersion": "12.9",
      "contributor": "Yugo Nagata, Fabien Coelho"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on \"char\"",
      "description": "Fix failure of contrib/btree_gin indexes on \"char\" (not char(`n`)) columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Tom Lane)\n          Such an indexscan failed to return all the entries it should.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB",
      "description": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB (Tom Lane)\n          Such large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error",
      "description": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error (Tom Lane)",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Support OpenSSL 3.0.0",
      "description": "Support OpenSSL 3.0.0 (Peter Eisentraut, Daniel Gustafsson, Michael Paquier)",
      "sinceVersion": "12.9",
      "contributor": "Peter Eisentraut, Daniel Gustafsson, Michael Paquier"
    },
    {
      "title": "Set correct type identifier on OpenSSL BIO",
      "description": "Set correct type identifier on OpenSSL BIO (I/O abstraction) objects created by PostgreSQL (Itamar Gafni)\n          This oversight probably only matters for code that is doing tasks like auditing the OpenSSL installation. But it's nominally a violation of the OpenSSL API, so fix it.",
      "sinceVersion": "12.9",
      "contributor": "Itamar Gafni"
    },
    {
      "title": "Fix our pkg-config files to again support static linking of libpq",
      "description": "Fix our pkg-config files to again support static linking of libpq (Peter Eisentraut)",
      "sinceVersion": "12.9",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Make `pg_regexec",
      "description": "Make `pg_regexec()()` robust against an out-of-range `search_start` parameter (Tom Lane)\n          Return `REG_NOMATCH`, instead of possibly crashing, when `search_start` is past the end of the string. This case is probably unreachable within core PostgreSQL, but extensions might be more careless about the parameter value.",
      "sinceVersion": "12.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.\n          Also, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port_of_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "sinceVersion": "12.9",
      "contributor": null
    },
    {
      "title": "Allow partitioned tables to be logically replicated via publications",
      "description": "Allow partitioned tables to be logically replicated via publications (Amit Langote)\n              Previously, partitions had to be replicated individually. Now a partitioned table can be published explicitly, causing all its partitions to be published automatically. Addition/removal of a partition causes it to be likewise added to or removed from the publication. The CREATE PUBLICATION option `publish_via_partition_root` controls whether changes to partitions are published as their own changes or their parent's.",
      "sinceVersion": "13.0",
      "contributor": "Amit Langote"
    },
    {
      "title": "Prevent indexes that use non-default collations from being added as a table's unique or primary key constraint",
      "description": "Prevent indexes that use non-default collations from being added as a table's unique or primary key constraint (Tom Lane)\n              The index's collation must match that of the underlying column, but ALTER TABLE previously failed to check this.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Better query planning when using extended statistics",
      "sinceVersion": "13.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Parallelized vacuuming of indexes",
      "sinceVersion": "13.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Incremental sorting",
      "sinceVersion": "13.0",
      "contributor": null
    },
    {
      "title": "Change SIMILAR TO ... ESCAPE NULL to return `NULL`",
      "description": "Change SIMILAR TO ... ESCAPE NULL to return `NULL` (Tom Lane)\n          This new behavior matches the SQL specification. Previously a null `ESCAPE` value was taken to mean using the default escape string (a backslash character). This also applies to `substring(`text` FROM pattern` ESCAPE `text`). The previous behavior has been retained in old views by keeping the original function unchanged.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make `json[b]_to_tsvector",
      "description": "Make `json[b]_to_tsvector()()` fully check the spelling of its `string` option (Dominik Czarnota)",
      "sinceVersion": "13.0",
      "contributor": "Dominik Czarnota"
    },
    {
      "title": "Change the way non-default effective_io_concurrency values affect concurrency",
      "description": "Change the way non-default effective_io_concurrency values affect concurrency (Thomas Munro)\n          Previously, this value was adjusted before setting the number of concurrent requests. The value is now used directly. Conversion of old values to new ones can be done using:\n          SELECT round(sum(`OLDVALUE` / n::float)) AS newvalue FROM generate_series(1, `OLDVALUE`) s(n);\n",
      "sinceVersion": "13.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Prevent display of auxiliary processes in pg_stat_ssl and pg_stat_gssapi system views",
      "description": "Prevent display of auxiliary processes in pg_stat_ssl and pg_stat_gssapi system views (Euler Taveira)\n          Queries that join these views to pg_stat_activity and wish to see auxiliary processes will need to use left joins.",
      "sinceVersion": "13.0",
      "contributor": "Euler Taveira"
    },
    {
      "title": "Rename various wait events to improve consistency",
      "description": "Rename various wait events to improve consistency (Fujii Masao, Tom Lane)",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao, Tom Lane"
    },
    {
      "title": "Fix ALTER FOREIGN TABLE ... RENAME COLUMN to return a more appropriate command tag",
      "description": "Fix ALTER FOREIGN TABLE ... RENAME COLUMN to return a more appropriate command tag (Fujii Masao)\n          Previously it returned ALTER TABLE; now it returns ALTER FOREIGN TABLE.",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix ALTER MATERIALIZED VIEW ... RENAME COLUMN to return a more appropriate command tag",
      "description": "Fix ALTER MATERIALIZED VIEW ... RENAME COLUMN to return a more appropriate command tag (Fujii Masao)\n          Previously it returned ALTER TABLE; now it returns ALTER MATERIALIZED VIEW.",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Rename configuration parameter wal_keep_segments to wal_keep_size",
      "description": "Rename configuration parameter wal_keep_segments to wal_keep_size (Fujii Masao)\n          This determines how much WAL to retain for standby servers. It is specified in megabytes, rather than number of files as with the old parameter. If you previously used wal_keep_segments, the following formula will give you an approximately equivalent setting:\n          wal_keep_size = wal_keep_segments * wal_segment_size (typically 16MB)\n",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Remove support for defining operator classes using pre-PostgreSQL 8.0 syntax",
      "description": "Remove support for defining operator classes using pre-PostgreSQL 8.0 syntax (Daniel Gustafsson)",
      "sinceVersion": "13.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Remove support for defining foreign key constraints using pre-PostgreSQL 7.3 syntax",
      "description": "Remove support for defining foreign key constraints using pre-PostgreSQL 7.3 syntax (Daniel Gustafsson)",
      "sinceVersion": "13.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Remove support for \"opaque\" pseudo-types used by pre-PostgreSQL 7.3 servers",
      "description": "Remove support for \"opaque\" pseudo-types used by pre-PostgreSQL 7.3 servers (Daniel Gustafsson)",
      "sinceVersion": "13.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Remove support for upgrading unpackaged",
      "description": "Remove support for upgrading unpackaged (pre-9.1) extensions (Tom Lane)\n          The `FROM` option of CREATE EXTENSION is no longer supported. Any installations still using unpackaged extensions should upgrade them to a packaged version before updating to PostgreSQL 13.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove support for posixrules files in the timezone database",
      "description": "Remove support for posixrules files in the timezone database (Tom Lane)\n          IANA's timezone group has deprecated this feature, meaning that it will gradually disappear from systems' timezone databases over the next few years. Rather than have a behavioral change appear unexpectedly with a timezone data update, we have removed PostgreSQL's support for this feature as of version 13. This affects only the behavior of POSIX-style time zone specifications that lack an explicit daylight savings transition rule; formerly the transition rule could be determined by installing a custom posixrules file, but now it is hard-wired. The recommended fix for any affected installations is to start using a geographical time zone name.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ltree, when an lquery pattern contains adjacent asterisks with braces, e.g., `*{2}.*{3}`, properly interpret that as `*{5}`",
      "description": "In ltree, when an lquery pattern contains adjacent asterisks with braces, e.g., `*{2}.*{3}`, properly interpret that as `*{5}` (Nikita Glukhov)",
      "sinceVersion": "13.0",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Fix pageinspect's `bt_metap",
      "description": "Fix pageinspect's `bt_metap()()` to return more appropriate data types that are less likely to overflow (Peter Geoghegan)",
      "sinceVersion": "13.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Allow pruning of partitions to happen in more cases",
      "description": "Allow pruning of partitions to happen in more cases (Yuzuko Hosoya, Amit Langote, Álvaro Herrera)",
      "sinceVersion": "13.0",
      "contributor": "Yuzuko Hosoya, Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Allow partitionwise joins to happen in more cases",
      "description": "Allow partitionwise joins to happen in more cases (Ashutosh Bapat, Etsuro Fujita, Amit Langote, Tom Lane)\n              For example, partitionwise joins can now happen between partitioned tables even when their partition bounds do not match exactly.",
      "sinceVersion": "13.0",
      "contributor": "Ashutosh Bapat, Etsuro Fujita, Amit Langote, Tom Lane"
    },
    {
      "title": "Support row-level `BEFORE` triggers on partitioned tables",
      "description": "Support row-level `BEFORE` triggers on partitioned tables (Álvaro Herrera)\n              However, such a trigger is not allowed to change which partition is the destination.",
      "sinceVersion": "13.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Allow logical replication into partitioned tables on subscribers",
      "description": "Allow logical replication into partitioned tables on subscribers (Amit Langote)\n              Previously, subscribers could only receive rows into non-partitioned tables.",
      "sinceVersion": "13.0",
      "contributor": "Amit Langote"
    },
    {
      "title": "Allow whole-row variables",
      "description": "Allow whole-row variables (that is, `table``.*`) to be used in partitioning expressions (Amit Langote)",
      "sinceVersion": "13.0",
      "contributor": "Amit Langote"
    },
    {
      "title": "More efficiently store duplicates in B-tree indexes",
      "description": "More efficiently store duplicates in B-tree indexes (Anastasia Lubennikova, Peter Geoghegan)\n              This allows efficient B-tree indexing of low-cardinality columns by storing duplicate keys only once. Users upgrading with pg_upgrade will need to use REINDEX to make an existing index use this feature.",
      "sinceVersion": "13.0",
      "contributor": "Anastasia Lubennikova, Peter Geoghegan"
    },
    {
      "title": "Allow GiST and SP-GiST indexes on box columns to support `ORDER BY `box` &lt;-&gt; point` queries",
      "description": "Allow GiST and SP-GiST indexes on box columns to support `ORDER BY `box` &lt;-&gt; point` queries (Nikita Glukhov)",
      "sinceVersion": "13.0",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Allow GIN indexes to more efficiently handle `!`",
      "description": "Allow GIN indexes to more efficiently handle `!` (NOT) clauses in tsquery searches (Nikita Glukhov, Alexander Korotkov, Tom Lane, Julien Rouhaud)",
      "sinceVersion": "13.0",
      "contributor": "Nikita Glukhov, Alexander Korotkov, Tom Lane, Julien Rouhaud"
    },
    {
      "title": "Allow index operator classes to take parameters",
      "description": "Allow index operator classes to take parameters (Nikita Glukhov)",
      "sinceVersion": "13.0",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Allow CREATE INDEX to specify the GiST signature length and maximum number of integer ranges",
      "description": "Allow CREATE INDEX to specify the GiST signature length and maximum number of integer ranges (Nikita Glukhov)\n              Indexes created on four and eight-byte integer array, tsvector, pg_trgm, ltree, and hstore columns can now control these GiST index parameters, rather than using the defaults.",
      "sinceVersion": "13.0",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Improve the optimizer's selectivity estimation for containment/match operators",
      "description": "Improve the optimizer's selectivity estimation for containment/match operators (Tom Lane)",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow setting the statistics target for extended statistics",
      "description": "Allow setting the statistics target for extended statistics (Tomas Vondra)\n              This is controlled with the new command option ALTER STATISTICS ... SET STATISTICS. Previously this was computed based on more general statistics target settings.",
      "sinceVersion": "13.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Allow use of multiple extended statistics objects in a single query",
      "description": "Allow use of multiple extended statistics objects in a single query (Tomas Vondra)",
      "sinceVersion": "13.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Allow use of extended statistics objects for OR clauses and IN/`ANY` constant lists",
      "description": "Allow use of extended statistics objects for OR clauses and IN/`ANY` constant lists (Pierre Ducroquet, Tomas Vondra)",
      "sinceVersion": "13.0",
      "contributor": "Pierre Ducroquet, Tomas Vondra"
    },
    {
      "title": "Allow functions in `FROM` clauses to be pulled up",
      "description": "Allow functions in `FROM` clauses to be pulled up (inlined) if they evaluate to constants (Alexander Kuzmenkov, Aleksandr Parfenov)",
      "sinceVersion": "13.0",
      "contributor": "Alexander Kuzmenkov, Aleksandr Parfenov"
    },
    {
      "title": "Implement incremental sorting",
      "description": "Implement incremental sorting (James Coleman, Alexander Korotkov, Tomas Vondra)\n              If an intermediate query result is known to be sorted by one or more leading keys of a required sort ordering, the additional sorting can be done considering only the remaining keys, if the rows are sorted in batches that have equal leading keys.\n              If necessary, this can be controlled using enable_incremental_sort.",
      "sinceVersion": "13.0",
      "contributor": "James Coleman, Alexander Korotkov, Tomas Vondra"
    },
    {
      "title": "Allow hash aggregation to use disk storage for large aggregation result sets",
      "description": "Allow hash aggregation to use disk storage for large aggregation result sets (Jeff Davis)\n              Previously, hash aggregation was avoided if it was expected to use more than work_mem memory. Now, a hash aggregation plan can be chosen despite that. The hash table will be spilled to disk if it exceeds work_mem times hash_mem_multiplier.\n              This behavior is normally preferable to the old behavior, in which once hash aggregation had been chosen, the hash table would be kept in memory no matter how large it got — which could be very large if the planner had misestimated. If necessary, behavior similar to that can be obtained by increasing hash_mem_multiplier.",
      "sinceVersion": "13.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Allow inserts, not only updates and deletes, to trigger vacuuming activity in autovacuum",
      "description": "Allow inserts, not only updates and deletes, to trigger vacuuming activity in autovacuum (Laurenz Albe, Darafei Praliaskouski)\n              Previously, insert-only activity would trigger auto-analyze but not auto-vacuum, on the grounds that there could not be any dead tuples to remove. However, a vacuum scan has other useful side-effects such as setting page-all-visible bits, which improves the efficiency of index-only scans. Also, allowing an insert-only table to receive periodic vacuuming helps to spread out the work of “freezing” old tuples, so that there is not suddenly a large amount of freezing work to do when the entire table reaches the anti-wraparound threshold all at once.\n              If necessary, this behavior can be adjusted with the new parameters autovacuum_vacuum_insert_threshold and autovacuum_vacuum_insert_scale_factor, or the equivalent table storage options.",
      "sinceVersion": "13.0",
      "contributor": "Laurenz Albe, Darafei Praliaskouski"
    },
    {
      "title": "Add maintenance_io_concurrency parameter to control I/O concurrency for maintenance operations",
      "description": "Add maintenance_io_concurrency parameter to control I/O concurrency for maintenance operations (Thomas Munro)",
      "sinceVersion": "13.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow WAL writes to be skipped during a transaction that creates or rewrites a relation, if wal_level is `minimal`",
      "description": "Allow WAL writes to be skipped during a transaction that creates or rewrites a relation, if wal_level is `minimal` (Kyotaro Horiguchi)\n              Relations larger than wal_skip_threshold will have their files fsync'ed rather than generating WAL. Previously this was done only for COPY operations, but the implementation had a bug that could cause data loss during crash recovery.",
      "sinceVersion": "13.0",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Improve retrieval of the leading bytes of TOAST'ed values",
      "description": "Improve retrieval of the leading bytes of TOAST'ed values (Binguo Bao, Andrey Borodin)\n              Previously, compressed out-of-line TOAST values were fully fetched even when it's known that only some leading bytes are needed. Now, only enough data to produce the result is fetched.",
      "sinceVersion": "13.0",
      "contributor": "Binguo Bao, Andrey Borodin"
    },
    {
      "title": "Reduce memory usage for query strings and extension scripts that contain many SQL statements",
      "description": "Reduce memory usage for query strings and extension scripts that contain many SQL statements (Amit Langote)",
      "sinceVersion": "13.0",
      "contributor": "Amit Langote"
    },
    {
      "title": "Allow EXPLAIN, auto_explain, autovacuum, and pg_stat_statements to track WAL usage statistics",
      "description": "Allow EXPLAIN, auto_explain, autovacuum, and pg_stat_statements to track WAL usage statistics (Kirill Bychik, Julien Rouhaud)",
      "sinceVersion": "13.0",
      "contributor": "Kirill Bychik, Julien Rouhaud"
    },
    {
      "title": "Allow a sample of SQL statements, rather than all statements, to be logged",
      "description": "Allow a sample of SQL statements, rather than all statements, to be logged (Adrien Nayrat)\n              A log_statement_sample_rate fraction of those statements taking more than log_min_duration_sample duration will be logged.",
      "sinceVersion": "13.0",
      "contributor": "Adrien Nayrat"
    },
    {
      "title": "Add the backend type to csvlog and optionally log_line_prefix log output",
      "description": "Add the backend type to csvlog and optionally log_line_prefix log output (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Improve control of prepared statement parameter logging",
      "description": "Improve control of prepared statement parameter logging (Alexey Bashtanov, Álvaro Herrera)\n              The GUC setting log_parameter_max_length controls the maximum length of parameter values output during logging of non-error statements, while log_parameter_max_length_on_error does the same for logging of statements with errors. Previously, prepared statement parameters were never logged during errors.",
      "sinceVersion": "13.0",
      "contributor": "Alexey Bashtanov, Álvaro Herrera"
    },
    {
      "title": "Allow function call backtraces to be logged after errors",
      "description": "Allow function call backtraces to be logged after errors (Peter Eisentraut, Álvaro Herrera)\n              The new parameter backtrace_functions specifies which C functions should generate backtraces on error.",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut, Álvaro Herrera"
    },
    {
      "title": "Make vacuum buffer counters 64-bits wide to avoid overflow",
      "description": "Make vacuum buffer counters 64-bits wide to avoid overflow (Álvaro Herrera)",
      "sinceVersion": "13.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Add leader_pid to pg_stat_activity to report a parallel worker's leader process",
      "description": "Add leader_pid to pg_stat_activity to report a parallel worker's leader process (Julien Rouhaud)",
      "sinceVersion": "13.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Add system view pg_stat_progress_basebackup to report the progress of streaming base backups",
      "description": "Add system view pg_stat_progress_basebackup to report the progress of streaming base backups (Fujii Masao)",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Add system view pg_stat_progress_analyze to report ANALYZE progress",
      "description": "Add system view pg_stat_progress_analyze to report ANALYZE progress (Álvaro Herrera, Tatsuro Yamada, Vinayak Pokale)",
      "sinceVersion": "13.0",
      "contributor": "Álvaro Herrera, Tatsuro Yamada, Vinayak Pokale"
    },
    {
      "title": "Add system view pg_shmem_allocations to display shared memory usage",
      "description": "Add system view pg_shmem_allocations to display shared memory usage (Andres Freund, Robert Haas)",
      "sinceVersion": "13.0",
      "contributor": "Andres Freund, Robert Haas"
    },
    {
      "title": "Add system view pg_stat_slru to monitor internal SLRU caches",
      "description": "Add system view pg_stat_slru to monitor internal SLRU caches (Tomas Vondra)",
      "sinceVersion": "13.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Allow track_activity_query_size to be set as high as 1MB",
      "description": "Allow track_activity_query_size to be set as high as 1MB (Vyacheslav Makarov)\n              The previous maximum was 100kB.",
      "sinceVersion": "13.0",
      "contributor": "Vyacheslav Makarov"
    },
    {
      "title": "Report a wait event while creating a DSM segment with `posix_fallocate",
      "description": "Report a wait event while creating a DSM segment with `posix_fallocate()()` (Thomas Munro)",
      "sinceVersion": "13.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add wait event VacuumDelay to report on cost-based vacuum delay",
      "description": "Add wait event VacuumDelay to report on cost-based vacuum delay (Justin Pryzby)",
      "sinceVersion": "13.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Add wait events for WAL archive and recovery pause",
      "description": "Add wait events for WAL archive and recovery pause (Fujii Masao)\n              The new events are BackupWaitWalArchive and RecoveryPause.",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Add wait events RecoveryConflictSnapshot and RecoveryConflictTablespace to monitor recovery conflicts",
      "description": "Add wait events RecoveryConflictSnapshot and RecoveryConflictTablespace to monitor recovery conflicts (Masahiko Sawada)",
      "sinceVersion": "13.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Change the server's default minimum TLS version for encrypted connections from 1.0 to 1.2",
      "description": "Change the server's default minimum TLS version for encrypted connections from 1.0 to 1.2 (Peter Eisentraut)\n              This choice can be controlled by ssl_min_protocol_version.",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Tighten rules on which utility commands are allowed in read-only transaction mode",
      "description": "Tighten rules on which utility commands are allowed in read-only transaction mode (Robert Haas)\n              This change also increases the number of utility commands that can run in parallel queries.",
      "sinceVersion": "13.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow allow_system_table_mods to be changed after server start",
      "description": "Allow allow_system_table_mods to be changed after server start (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Disallow non-superusers from modifying system tables when allow_system_table_mods is set",
      "description": "Disallow non-superusers from modifying system tables when allow_system_table_mods is set (Peter Eisentraut)\n              Previously, if allow_system_table_mods was set at server start, non-superusers could issue INSERT/UPDATE/DELETE commands on system tables.",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Enable support for Unix-domain sockets on Windows",
      "description": "Enable support for Unix-domain sockets on Windows (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow streaming replication configuration settings to be changed by reload",
      "description": "Allow streaming replication configuration settings to be changed by reload (Sergei Kornilov)\n            Previously, a server restart was required to change primary_conninfo and primary_slot_name.",
      "sinceVersion": "13.0",
      "contributor": "Sergei Kornilov"
    },
    {
      "title": "Allow WAL receivers to use a temporary replication slot when a permanent one is not specified",
      "description": "Allow WAL receivers to use a temporary replication slot when a permanent one is not specified (Peter Eisentraut, Sergei Kornilov)\n            This behavior can be enabled using wal_receiver_create_temp_slot.",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut, Sergei Kornilov"
    },
    {
      "title": "Allow WAL storage for replication slots to be limited by max_slot_wal_keep_size",
      "description": "Allow WAL storage for replication slots to be limited by max_slot_wal_keep_size (Kyotaro Horiguchi)\n            Replication slots that would require exceeding this value are marked invalid.",
      "sinceVersion": "13.0",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Allow standby promotion to cancel any requested pause",
      "description": "Allow standby promotion to cancel any requested pause (Fujii Masao)\n            Previously, promotion could not happen while the standby was in paused state.",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Generate an error if recovery does not reach the specified recovery target",
      "description": "Generate an error if recovery does not reach the specified recovery target (Leif Gunnar Erlandsen, Peter Eisentraut)\n            Previously, a standby would promote itself upon reaching the end of WAL, even if the target was not reached.",
      "sinceVersion": "13.0",
      "contributor": "Leif Gunnar Erlandsen, Peter Eisentraut"
    },
    {
      "title": "Allow control over how much memory is used by logical decoding before it is spilled to disk",
      "description": "Allow control over how much memory is used by logical decoding before it is spilled to disk (Tomas Vondra, Dilip Kumar, Amit Kapila)\n            This is controlled by logical_decoding_work_mem.",
      "sinceVersion": "13.0",
      "contributor": "Tomas Vondra, Dilip Kumar, Amit Kapila"
    },
    {
      "title": "Allow recovery to continue even if invalid pages are referenced by WAL",
      "description": "Allow recovery to continue even if invalid pages are referenced by WAL (Fujii Masao)\n            This is enabled using ignore_invalid_pages.",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Allow VACUUM to process a table's indexes in parallel",
      "description": "Allow VACUUM to process a table's indexes in parallel (Masahiko Sawada, Amit Kapila)\n            The new `PARALLEL` option controls this.",
      "sinceVersion": "13.0",
      "contributor": "Masahiko Sawada, Amit Kapila"
    },
    {
      "title": "Allow FETCH FIRST to use `WITH TIES` to return any additional rows that match the last result row",
      "description": "Allow FETCH FIRST to use `WITH TIES` to return any additional rows that match the last result row (Surafel Temesgen)",
      "sinceVersion": "13.0",
      "contributor": "Surafel Temesgen"
    },
    {
      "title": "Report planning-time buffer usage in EXPLAIN's `BUFFER` output",
      "description": "Report planning-time buffer usage in EXPLAIN's `BUFFER` output (Julien Rouhaud)",
      "sinceVersion": "13.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Make CREATE TABLE LIKE propagate a `CHECK` constraint's `NO INHERIT` property to the created table",
      "description": "Make CREATE TABLE LIKE propagate a `CHECK` constraint's `NO INHERIT` property to the created table (Ildar Musin, Chris Travers)",
      "sinceVersion": "13.0",
      "contributor": "Ildar Musin, Chris Travers"
    },
    {
      "title": "When using LOCK TABLE on a partitioned table, do not check permissions on the child tables",
      "description": "When using LOCK TABLE on a partitioned table, do not check permissions on the child tables (Amit Langote)",
      "sinceVersion": "13.0",
      "contributor": "Amit Langote"
    },
    {
      "title": "Allow `OVERRIDING USER VALUE` on inserts into identity columns",
      "description": "Allow `OVERRIDING USER VALUE` on inserts into identity columns (Dean Rasheed)",
      "sinceVersion": "13.0",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Add ALTER TABLE ... DROP EXPRESSION to allow removing the `GENERATED` property from a column",
      "description": "Add ALTER TABLE ... DROP EXPRESSION to allow removing the `GENERATED` property from a column (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix bugs in multi-step ALTER TABLE commands",
      "description": "Fix bugs in multi-step ALTER TABLE commands (Tom Lane)\n            `IF NOT EXISTS` clauses now work as expected, in that derived actions (such as index creation) do not execute if the column already exists. Also, certain cases of combining related actions into one ALTER TABLE now work when they did not before.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add ALTER VIEW syntax to rename view columns",
      "description": "Add ALTER VIEW syntax to rename view columns (Fujii Masao)\n            Renaming view columns was already possible, but one had to write ALTER TABLE RENAME COLUMN, which is confusing.",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Add ALTER TYPE options to modify a base type's TOAST properties and support functions",
      "description": "Add ALTER TYPE options to modify a base type's TOAST properties and support functions (Tomas Vondra, Tom Lane)",
      "sinceVersion": "13.0",
      "contributor": "Tomas Vondra, Tom Lane"
    },
    {
      "title": "Add CREATE DATABASE `LOCALE` option",
      "description": "Add CREATE DATABASE `LOCALE` option (Peter Eisentraut)\n            This combines the existing options `LC_COLLATE` and `LC_CTYPE` into a single option.",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow DROP DATABASE to disconnect sessions using the target database, allowing the drop to succeed",
      "description": "Allow DROP DATABASE to disconnect sessions using the target database, allowing the drop to succeed (Pavel Stehule, Amit Kapila)\n            This is enabled by the `FORCE` option.",
      "sinceVersion": "13.0",
      "contributor": "Pavel Stehule, Amit Kapila"
    },
    {
      "title": "Add structure member tg_updatedcols to allow C-language update triggers to know which column",
      "description": "Add structure member tg_updatedcols to allow C-language update triggers to know which column(s) were updated (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add polymorphic data types for use by functions requiring compatible arguments",
      "description": "Add polymorphic data types for use by functions requiring compatible arguments (Pavel Stehule)\n            The new data types are anycompatible, anycompatiblearray, anycompatiblenonarray, and anycompatiblerange.",
      "sinceVersion": "13.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Add SQL data type xid8 to expose FullTransactionId",
      "description": "Add SQL data type xid8 to expose FullTransactionId (Thomas Munro)\n            The existing xid data type is only four bytes so it does not provide the transaction epoch.",
      "sinceVersion": "13.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add data type regcollation and associated functions, to represent OIDs of collation objects",
      "description": "Add data type regcollation and associated functions, to represent OIDs of collation objects (Julien Rouhaud)",
      "sinceVersion": "13.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Use the glibc version in some cases as a collation version identifier",
      "description": "Use the glibc version in some cases as a collation version identifier (Thomas Munro)\n            If the glibc version changes, a warning will be issued about possible corruption of collation-dependent indexes.",
      "sinceVersion": "13.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add support for collation versions on Windows",
      "description": "Add support for collation versions on Windows (Thomas Munro)",
      "sinceVersion": "13.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow `ROW` expressions to have their members extracted with suffix notation",
      "description": "Allow `ROW` expressions to have their members extracted with suffix notation (Tom Lane)\n            For example, `(ROW(4, 5.0)).f1` now returns 4.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add alternate version of `jsonb_set",
      "description": "Add alternate version of `jsonb_set()()` with improved `NULL` handling (Andrew Dunstan)\n            The new function, `jsonb_set_lax()()`, handles a `NULL` new value by either setting the specified key to a JSON null, deleting the key, raising an exception, or returning the jsonb value unmodified, as requested.",
      "sinceVersion": "13.0",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Add jsonpath .`datetime",
      "description": "Add jsonpath .`datetime()()` method (Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov)\n            This function allows JSON values to be converted to timestamps, which can then be processed in jsonpath expressions. This change also adds jsonpath functions that support time-zone-aware output.",
      "sinceVersion": "13.0",
      "contributor": "Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov"
    },
    {
      "title": "Add SQL functions `NORMALIZE`",
      "description": "Add SQL functions `NORMALIZE`() to normalize Unicode strings, and `IS NORMALIZED` to check for normalization (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add `min",
      "description": "Add `min()()` and `max()()` aggregates for pg_lsn (Fabrízio de Royes Mello)\n            These are particularly useful in monitoring queries.",
      "sinceVersion": "13.0",
      "contributor": "Fabrízio de Royes Mello"
    },
    {
      "title": "Allow Unicode escapes, e.g., `E'\\u`nnnn`'` or `U&amp;'\\`nnnn`'`, to specify any character available in the database encoding, even when the database encoding is not UTF-8",
      "description": "Allow Unicode escapes, e.g., `E'\\u`nnnn`'` or `U&amp;'\\`nnnn`'`, to specify any character available in the database encoding, even when the database encoding is not UTF-8 (Tom Lane)",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow `to_date",
      "description": "Allow `to_date()()` and `to_timestamp()()` to recognize non-English month/day names (Juan José Santamaría Flecha, Tom Lane)\n            The names recognized are the same as those output by `to_char()()` with the same format patterns.",
      "sinceVersion": "13.0",
      "contributor": "Juan José Santamaría Flecha, Tom Lane"
    },
    {
      "title": "Add datetime format patterns `FF1` – `FF6` to specify input or output of 1 to 6 fractional-second digits",
      "description": "Add datetime format patterns `FF1` – `FF6` to specify input or output of 1 to 6 fractional-second digits (Alexander Korotkov, Nikita Glukhov, Teodor Sigaev, Oleg Bartunov)\n            These patterns can be used by `to_char()()`, `to_timestamp()()`, and jsonpath's .`datetime()()`.",
      "sinceVersion": "13.0",
      "contributor": "Alexander Korotkov, Nikita Glukhov, Teodor Sigaev, Oleg Bartunov"
    },
    {
      "title": "Add `SSSSS` datetime format pattern as an SQL-standard alias for `SSSS`",
      "description": "Add `SSSSS` datetime format pattern as an SQL-standard alias for `SSSS` (Nikita Glukhov, Alexander Korotkov)",
      "sinceVersion": "13.0",
      "contributor": "Nikita Glukhov, Alexander Korotkov"
    },
    {
      "title": "Add function `gen_random_uuid",
      "description": "Add function `gen_random_uuid()()` to generate version-4 UUIDs (Peter Eisentraut)\n            Previously UUID generation functions were only available in the external modules uuid-ossp and pgcrypto.",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add greatest-common-denominator",
      "description": "Add greatest-common-denominator (`gcd()`) and least-common-multiple (`lcm()`) functions (Vik Fearing)",
      "sinceVersion": "13.0",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Add function `min_scale",
      "description": "Add function `min_scale()()` that returns the number of digits to the right of the decimal point that are required to represent a numeric value with full accuracy (Pavel Stehule)",
      "sinceVersion": "13.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Add function `trim_scale",
      "description": "Add function `trim_scale()()` to reduce the scale of a numeric value by removing trailing zeros (Pavel Stehule)",
      "sinceVersion": "13.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Add commutators of distance operators",
      "description": "Add commutators of distance operators (Nikita Glukhov)\n            For example, previously only point `&lt;-&gt;` line was supported, now line `&lt;-&gt;` point works too.",
      "sinceVersion": "13.0",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Create xid8 versions of all transaction ID functions",
      "description": "Create xid8 versions of all transaction ID functions (Thomas Munro)\n            The old xid-based functions still exist, for backward compatibility.",
      "sinceVersion": "13.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow `get_bit",
      "description": "Allow `get_bit()()` and `set_bit()()` to set bits beyond the first 256MB of a bytea value (Movead Li)",
      "sinceVersion": "13.0",
      "contributor": "Movead Li"
    },
    {
      "title": "Allow advisory-lock functions to be used in some parallel operations",
      "description": "Allow advisory-lock functions to be used in some parallel operations (Tom Lane)",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add the ability to remove an object's dependency on an extension",
      "description": "Add the ability to remove an object's dependency on an extension (Álvaro Herrera)\n            The object can be a function, materialized view, index, or trigger. The syntax is ALTER .. NO DEPENDS ON.",
      "sinceVersion": "13.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Allow libpq clients to require channel binding for encrypted connections",
      "description": "Allow libpq clients to require channel binding for encrypted connections (Jeff Davis)\n            Using the libpq connection parameter `channel_binding` forces the other end of the TLS connection to prove it knows the user's password. This prevents man-in-the-middle attacks.",
      "sinceVersion": "13.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Add libpq connection parameters to control the minimum and maximum TLS version allowed for an encrypted connection",
      "description": "Add libpq connection parameters to control the minimum and maximum TLS version allowed for an encrypted connection (Daniel Gustafsson)\n            The settings are ssl_min_protocol_version and ssl_max_protocol_version. By default, the minimum TLS version is 1.2 (this represents a behavioral change from previous releases).",
      "sinceVersion": "13.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Allow use of passwords to unlock client certificates",
      "description": "Allow use of passwords to unlock client certificates (Craig Ringer, Andrew Dunstan)\n            This is enabled by libpq's sslpassword connection parameter.",
      "sinceVersion": "13.0",
      "contributor": "Craig Ringer, Andrew Dunstan"
    },
    {
      "title": "Allow libpq to use DER-encoded client certificates",
      "description": "Allow libpq to use DER-encoded client certificates (Craig Ringer, Andrew Dunstan)",
      "sinceVersion": "13.0",
      "contributor": "Craig Ringer, Andrew Dunstan"
    },
    {
      "title": "Fix ecpg's `EXEC SQL elif` directive to work correctly",
      "description": "Fix ecpg's `EXEC SQL elif` directive to work correctly (Tom Lane)\n            Previously it behaved the same as `endif` followed by `ifdef`, so that a successful previous branch of the same `if` construct did not prevent expansion of the `elif` branch or following branches.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add transaction status",
      "description": "Add transaction status (`%x`) to psql's default prompts (Vik Fearing)",
      "sinceVersion": "13.0",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Allow the secondary psql prompt to be blank but the same width as the primary prompt",
      "description": "Allow the secondary psql prompt to be blank but the same width as the primary prompt (Thomas Munro)\n              This is accomplished by setting `PROMPT2` to `%w`.",
      "sinceVersion": "13.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow psql's `\\g` and `\\gx` commands to change \\pset output options for the duration of that single command",
      "description": "Allow psql's `\\g` and `\\gx` commands to change \\pset output options for the duration of that single command (Tom Lane)\n              This feature allows syntax like `\\g (expand=on)`, which is equivalent to `\\gx`.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add psql commands to display operator classes and operator families",
      "description": "Add psql commands to display operator classes and operator families (Sergey Cherkashin, Nikita Glukhov, Alexander Korotkov)\n              The new commands are `\\dAc`, `\\dAf`, `\\dAo`, and `\\dAp`.",
      "sinceVersion": "13.0",
      "contributor": "Sergey Cherkashin, Nikita Glukhov, Alexander Korotkov"
    },
    {
      "title": "Show table persistence in psql's `\\dt+` and related commands",
      "description": "Show table persistence in psql's `\\dt+` and related commands (David Fetter)\n              In verbose mode, the table/index/view shows if the object is permanent, temporary, or unlogged.",
      "sinceVersion": "13.0",
      "contributor": "David Fetter"
    },
    {
      "title": "Improve output of psql's `\\d` for TOAST tables",
      "description": "Improve output of psql's `\\d` for TOAST tables (Justin Pryzby)",
      "sinceVersion": "13.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix redisplay after psql's `\\e` command",
      "description": "Fix redisplay after psql's `\\e` command (Tom Lane)\n              When exiting the editor, if the query doesn't end with a semicolon or `\\g`, the query buffer contents will now be displayed.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add `\\warn` command to psql",
      "description": "Add `\\warn` command to psql (David Fetter)\n              This is like `\\echo` except that the text is sent to stderr instead of stdout.",
      "sinceVersion": "13.0",
      "contributor": "David Fetter"
    },
    {
      "title": "Add the PostgreSQL home page to command-line --help output",
      "description": "Add the PostgreSQL home page to command-line --help output (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add pgbench command `\\aset`, which behaves like `\\gset`, but for multiple queries",
      "description": "Add pgbench command `\\aset`, which behaves like `\\gset`, but for multiple queries (Fabien Coelho)",
      "sinceVersion": "13.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Allow pgbench to generate its initial data server-side, rather than client-side",
      "description": "Allow pgbench to generate its initial data server-side, rather than client-side (Fabien Coelho)",
      "sinceVersion": "13.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Allow pgbench to show script contents using option --show-script",
      "description": "Allow pgbench to show script contents using option --show-script (Fabien Coelho)",
      "sinceVersion": "13.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Generate backup manifests for base backups, and verify them",
      "description": "Generate backup manifests for base backups, and verify them (Robert Haas)\n            A new tool pg_verifybackup can verify backups.",
      "sinceVersion": "13.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Have pg_basebackup estimate the total backup size by default",
      "description": "Have pg_basebackup estimate the total backup size by default (Fujii Masao)\n            This computation allows pg_stat_progress_basebackup to show progress. If that is not needed, it can be disabled by using the --no-estimate-size option. Previously, this computation happened only if the --progress option was used.",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Add an option to pg_rewind to configure standbys",
      "description": "Add an option to pg_rewind to configure standbys (Paul Guo, Jimmy Yih, Ashwin Agrawal)\n            This matches pg_basebackup's --write-recovery-conf option.",
      "sinceVersion": "13.0",
      "contributor": "Paul Guo, Jimmy Yih, Ashwin Agrawal"
    },
    {
      "title": "Allow pg_rewind to use the target cluster's restore_command to retrieve needed WAL",
      "description": "Allow pg_rewind to use the target cluster's restore_command to retrieve needed WAL (Alexey Kondratov)\n            This is enabled using the -c/--restore-target-wal option.",
      "sinceVersion": "13.0",
      "contributor": "Alexey Kondratov"
    },
    {
      "title": "Have pg_rewind automatically run crash recovery before rewinding",
      "description": "Have pg_rewind automatically run crash recovery before rewinding (Paul Guo, Jimmy Yih, Ashwin Agrawal)\n            This can be disabled by using --no-ensure-shutdown.",
      "sinceVersion": "13.0",
      "contributor": "Paul Guo, Jimmy Yih, Ashwin Agrawal"
    },
    {
      "title": "Increase the PREPARE TRANSACTION-related information reported by pg_waldump",
      "description": "Increase the PREPARE TRANSACTION-related information reported by pg_waldump (Fujii Masao)",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Add pg_waldump option --quiet to suppress non-error output",
      "description": "Add pg_waldump option --quiet to suppress non-error output (Andres Freund, Robert Haas)",
      "sinceVersion": "13.0",
      "contributor": "Andres Freund, Robert Haas"
    },
    {
      "title": "Add pg_dump option --include-foreign-data to dump data from foreign servers",
      "description": "Add pg_dump option --include-foreign-data to dump data from foreign servers (Luis Carril)",
      "sinceVersion": "13.0",
      "contributor": "Luis Carril"
    },
    {
      "title": "Allow vacuum commands run by vacuumdb to operate in parallel mode",
      "description": "Allow vacuum commands run by vacuumdb to operate in parallel mode (Masahiko Sawada)\n            This is enabled with the new --parallel option.",
      "sinceVersion": "13.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Allow reindexdb to operate in parallel",
      "description": "Allow reindexdb to operate in parallel (Julien Rouhaud)\n            Parallel mode is enabled with the new --jobs option.",
      "sinceVersion": "13.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Allow dropdb to disconnect sessions using the target database, allowing the drop to succeed",
      "description": "Allow dropdb to disconnect sessions using the target database, allowing the drop to succeed (Pavel Stehule)\n            This is enabled with the -f option.",
      "sinceVersion": "13.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Remove --adduser and --no-adduser from createuser",
      "description": "Remove --adduser and --no-adduser from createuser (Alexander Lakhin)\n            The long-supported preferred options for this are called --superuser and --no-superuser.",
      "sinceVersion": "13.0",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Use the directory of the pg_upgrade program as the default --new-bindir setting when running pg_upgrade",
      "description": "Use the directory of the pg_upgrade program as the default --new-bindir setting when running pg_upgrade (Daniel Gustafsson)",
      "sinceVersion": "13.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Add a glossary to the documentation",
      "description": "Add a glossary to the documentation (Corey Huinker, Jürgen Purtz, Roger Harkavy, Álvaro Herrera)",
      "sinceVersion": "13.0",
      "contributor": "Corey Huinker, Jürgen Purtz, Roger Harkavy, Álvaro Herrera"
    },
    {
      "title": "Reformat tables containing function and operator information for better clarity",
      "description": "Reformat tables containing function and operator information for better clarity (Tom Lane)",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Upgrade to use DocBook 4.5",
      "description": "Upgrade to use DocBook 4.5 (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add support for building on Visual Studio 2019",
      "description": "Add support for building on Visual Studio 2019 (Haribabu Kommi)",
      "sinceVersion": "13.0",
      "contributor": "Haribabu Kommi"
    },
    {
      "title": "Add build support for MSYS2",
      "description": "Add build support for MSYS2 (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add compare_exchange and fetch_add assembly language code for Power PC compilers",
      "description": "Add compare_exchange and fetch_add assembly language code for Power PC compilers (Noah Misch)",
      "sinceVersion": "13.0",
      "contributor": "Noah Misch"
    },
    {
      "title": "Update Snowball stemmer dictionaries used by full text search",
      "description": "Update Snowball stemmer dictionaries used by full text search (Panagiotis Mavrogiorgos)\n            This adds Greek stemming and improves Danish and French stemming.",
      "sinceVersion": "13.0",
      "contributor": "Panagiotis Mavrogiorgos"
    },
    {
      "title": "Remove support for Windows 2000",
      "description": "Remove support for Windows 2000 (Michael Paquier)",
      "sinceVersion": "13.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Remove support for non-ELF BSD systems",
      "description": "Remove support for non-ELF BSD systems (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Remove support for Python versions 2.5.X and earlier",
      "description": "Remove support for Python versions 2.5.X and earlier (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Remove support for OpenSSL 0.9.8 and 1.0.0",
      "description": "Remove support for OpenSSL 0.9.8 and 1.0.0 (Michael Paquier)",
      "sinceVersion": "13.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Remove configure options --disable-float8-byval and --disable-float4-byval",
      "description": "Remove configure options --disable-float8-byval and --disable-float4-byval (Peter Eisentraut)\n            These were needed for compatibility with some version-zero C functions, but those are no longer supported.",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Pass the query string to planner hook functions",
      "description": "Pass the query string to planner hook functions (Pascal Legrand, Julien Rouhaud)",
      "sinceVersion": "13.0",
      "contributor": "Pascal Legrand, Julien Rouhaud"
    },
    {
      "title": "Add TRUNCATE command hook",
      "description": "Add TRUNCATE command hook (Yuli Khodorkovskiy)",
      "sinceVersion": "13.0",
      "contributor": "Yuli Khodorkovskiy"
    },
    {
      "title": "Add TLS init hook",
      "description": "Add TLS init hook (Andrew Dunstan)",
      "sinceVersion": "13.0",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Allow building with no predefined Unix-domain socket directory",
      "description": "Allow building with no predefined Unix-domain socket directory (Peter Eisentraut)",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Reduce the probability of SysV resource key collision on Unix platforms",
      "description": "Reduce the probability of SysV resource key collision on Unix platforms (Tom Lane)",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Use operating system functions to reliably erase memory that contains sensitive information",
      "description": "Use operating system functions to reliably erase memory that contains sensitive information (Peter Eisentraut)\n            For example, this is used for clearing passwords stored in memory.",
      "sinceVersion": "13.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add headerscheck script to test C header-file compatibility",
      "description": "Add headerscheck script to test C header-file compatibility (Tom Lane)",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change the API for `TS_execute",
      "description": "Change the API for `TS_execute()()` (Tom Lane, Pavel Borisov)\n            `TS_execute()` callbacks must now provide ternary (yes/no/maybe) logic. Calculating NOT queries accurately is now the default.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane, Pavel Borisov"
    },
    {
      "title": "Allow extensions to be specified as trusted",
      "description": "Allow extensions to be specified as trusted (Tom Lane)\n            Such extensions can be installed in a database by users with database-level `CREATE` privileges, even if they are not superusers. This change also removes the pg_pltemplate system catalog.",
      "sinceVersion": "13.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow non-superusers to connect to postgres_fdw foreign servers without using a password",
      "description": "Allow non-superusers to connect to postgres_fdw foreign servers without using a password (Craig Ringer)\n            Specifically, allow a superuser to set `password_required` to false for a user mapping. Care must still be taken to prevent non-superusers from using superuser credentials to connect to the foreign server.",
      "sinceVersion": "13.0",
      "contributor": "Craig Ringer"
    },
    {
      "title": "Allow postgres_fdw to use certificate authentication",
      "description": "Allow postgres_fdw to use certificate authentication (Craig Ringer)\n            Different users can use different certificates.",
      "sinceVersion": "13.0",
      "contributor": "Craig Ringer"
    },
    {
      "title": "Allow sepgsql to control access to the TRUNCATE command",
      "description": "Allow sepgsql to control access to the TRUNCATE command (Yuli Khodorkovskiy)",
      "sinceVersion": "13.0",
      "contributor": "Yuli Khodorkovskiy"
    },
    {
      "title": "Add extension bool_plperl which transforms SQL booleans to/from PL/Perl booleans",
      "description": "Add extension bool_plperl which transforms SQL booleans to/from PL/Perl booleans (Ivan Panchenko)",
      "sinceVersion": "13.0",
      "contributor": "Ivan Panchenko"
    },
    {
      "title": "Have pg_stat_statements treat SELECT ... FOR UPDATE commands as distinct from those without FOR UPDATE",
      "description": "Have pg_stat_statements treat SELECT ... FOR UPDATE commands as distinct from those without FOR UPDATE (Andrew Gierth, Vik Fearing)",
      "sinceVersion": "13.0",
      "contributor": "Andrew Gierth, Vik Fearing"
    },
    {
      "title": "Allow pg_stat_statements to optionally track the planning time of statements",
      "description": "Allow pg_stat_statements to optionally track the planning time of statements (Julien Rouhaud, Pascal Legrand, Thomas Munro, Fujii Masao)\n            Previously only execution time was tracked.",
      "sinceVersion": "13.0",
      "contributor": "Julien Rouhaud, Pascal Legrand, Thomas Munro, Fujii Masao"
    },
    {
      "title": "Overhaul ltree's lquery syntax to treat `NOT`",
      "description": "Overhaul ltree's lquery syntax to treat `NOT` (!) more logically (Filip Rembialkowski, Tom Lane, Nikita Glukhov)\n            Also allow non-* queries to use a numeric range ({}) of matches.",
      "sinceVersion": "13.0",
      "contributor": "Filip Rembialkowski, Tom Lane, Nikita Glukhov"
    },
    {
      "title": "Add support for binary I/O of ltree, lquery, and ltxtquery types",
      "description": "Add support for binary I/O of ltree, lquery, and ltxtquery types (Nino Floris)",
      "sinceVersion": "13.0",
      "contributor": "Nino Floris"
    },
    {
      "title": "Add an option to dict_int to ignore the sign of integers",
      "description": "Add an option to dict_int to ignore the sign of integers (Jeff Janes)",
      "sinceVersion": "13.0",
      "contributor": "Jeff Janes"
    },
    {
      "title": "Add adminpack function `pg_file_sync",
      "description": "Add adminpack function `pg_file_sync()()` to allow fsync'ing a file (Fujii Masao)",
      "sinceVersion": "13.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Add pageinspect functions to output t_infomask/t_infomask2 values in human-readable format",
      "description": "Add pageinspect functions to output t_infomask/t_infomask2 values in human-readable format (Craig Ringer, Sawada Masahiko, Michael Paquier)",
      "sinceVersion": "13.0",
      "contributor": "Craig Ringer, Sawada Masahiko, Michael Paquier"
    },
    {
      "title": "Add B-tree index de-duplication processing columns to pageinspect output",
      "description": "Add B-tree index de-duplication processing columns to pageinspect output (Peter Geoghegan)",
      "sinceVersion": "13.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Avoid failures when a `BEFORE ROW UPDATE` trigger returns the “old” row of a table having dropped or “missing” columns",
      "description": "Avoid failures when a `BEFORE ROW UPDATE` trigger returns the “old” row of a table having dropped or “missing” columns (Amit Langote, Tom Lane)\n          This method of suppressing an update could result in crashes, unexpected `CHECK` constraint failures, or incorrect `RETURNING` output, because “missing” columns would read as NULLs for those purposes. (A column is “missing” for this purpose if it was added by ALTER TABLE ADD COLUMN with a non-NULL, but constant, default value.) Dropped columns could cause trouble as well.",
      "sinceVersion": "13.1",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Fix recently-added timetz test case so it works when the USA is not observing daylight savings time",
      "description": "Fix recently-added timetz test case so it works when the USA is not observing daylight savings time (Tom Lane)",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix usage of complex connection-string parameters in pg_dump, pg_restore, clusterdb, reindexdb, and vacuumdb",
      "description": "Fix usage of complex connection-string parameters in pg_dump, pg_restore, clusterdb, reindexdb, and vacuumdb (Tom Lane)\n          The -d parameter of pg_dump and pg_restore, or the --maintenance-db parameter of the other programs mentioned, can be a “connection string” containing multiple connection parameters rather than just a database name. In cases where these programs need to initiate additional connections, such as parallel processing or processing of multiple databases, the connection string was forgotten and just the basic connection parameters (database name, host, port, and username) were used for the additional connections. This could lead to connection failures if the connection string included any other essential information, such as non-default SSL or GSS parameters. Worse, the connection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. (CVE-2020-25694)",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "When psql's \\connect command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used",
      "description": "When psql's \\connect command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used (Tom Lane)\n          This avoids cases where reconnection might fail due to omission of relevant parameters, such as non-default SSL or GSS options. Worse, the reconnection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. This is largely the same problem as just cited for pg_dump et al, although psql's behavior is more complex since the user may intentionally override some connection parameters. (CVE-2020-25694)",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent psql's \\gset command from modifying specially-treated variables",
      "description": "Prevent psql's \\gset command from modifying specially-treated variables (Noah Misch)\n          \\gset without a prefix would overwrite whatever variables the server told it to. Thus, a compromised server could set specially-treated variables such as PROMPT1, giving the ability to execute arbitrary shell code in the user's session.\n          The PostgreSQL Project thanks Nick Cleaton for reporting this problem. (CVE-2020-25696)",
      "sinceVersion": "13.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix unintended breakage of the replication protocol",
      "description": "Fix unintended breakage of the replication protocol (Álvaro Herrera)\n          A walsender reports two command-completion events for `START_REPLICATION`. This was undocumented and apparently unintentional; so we failed to notice that a late 13.0 change removed the duplicate event. However it turns out that walreceivers require the extra event in some code paths. The most practical fix is to decree that the extra event is part of the protocol and resume generating it.",
      "sinceVersion": "13.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure that SLRU directories are properly fsync'd during checkpoints",
      "description": "Ensure that SLRU directories are properly fsync'd during checkpoints (Thomas Munro)\n          This prevents possible data loss in a subsequent operating system crash.",
      "sinceVersion": "13.1",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix ALTER ROLE for users with the `BYPASSRLS` attribute",
      "description": "Fix ALTER ROLE for users with the `BYPASSRLS` attribute (Tom Lane, Stephen Frost)\n          The `BYPASSRLS` attribute is only allowed to be changed by superusers, but other ALTER ROLE operations, such as password changes, should be allowed with only ordinary permission checks. The previous coding erroneously restricted all changes on such a role to superusers.",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane, Stephen Frost"
    },
    {
      "title": "Disallow ALTER TABLE ONLY ... DROP EXPRESSION when there are child tables",
      "description": "Disallow ALTER TABLE ONLY ... DROP EXPRESSION when there are child tables (Peter Eisentraut)\n          The current implementation cannot handle this case correctly, so just forbid it for now.",
      "sinceVersion": "13.1",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Ensure that ALTER TABLE ONLY ... ENABLE/DISABLE TRIGGER does not recurse to child tables",
      "description": "Ensure that ALTER TABLE ONLY ... ENABLE/DISABLE TRIGGER does not recurse to child tables (Álvaro Herrera)\n          Previously the `ONLY` flag was ignored.",
      "sinceVersion": "13.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Allow LOCK TABLE to succeed on a self-referential view",
      "description": "Allow LOCK TABLE to succeed on a self-referential view (Tom Lane)\n          It previously threw an error complaining about infinite recursion, but there seems no need to disallow the case.",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Retain statistics about an index across REINDEX CONCURRENTLY",
      "description": "Retain statistics about an index across REINDEX CONCURRENTLY (Michael Paquier, Fabrízio de Royes Mello)\n          Non-concurrent reindexing has always preserved such statistics.",
      "sinceVersion": "13.1",
      "contributor": "Michael Paquier, Fabrízio de Royes Mello"
    },
    {
      "title": "Fix incorrect progress reporting from REINDEX CONCURRENTLY",
      "description": "Fix incorrect progress reporting from REINDEX CONCURRENTLY (Matthias van de Meent, Michael Paquier)",
      "sinceVersion": "13.1",
      "contributor": "Matthias van de Meent, Michael Paquier"
    },
    {
      "title": "Ensure that `GENERATED` columns are updated when the column",
      "description": "Ensure that `GENERATED` columns are updated when the column(s) they depend on are updated via a rule or an updatable view (Tom Lane)\n          This fix also takes care of possible failure to fire a column-specific trigger in such cases.",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failures with collation-dependent partition bound expressions",
      "description": "Fix failures with collation-dependent partition bound expressions (Tom Lane)",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Support hashing of text arrays",
      "description": "Support hashing of text arrays (Peter Eisentraut)\n          Array hashing failed if the array element type is collatable. Notably, this prevented using hash partitioning with a text array column as partition key.",
      "sinceVersion": "13.1",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Prevent internal overflows in cross-type datetime comparisons",
      "description": "Prevent internal overflows in cross-type datetime comparisons (Nikita Glukhov, Alexander Korotkov, Tom Lane)\n          Previously, comparing a date to a timestamp would fail if the date is past the valid range for timestamps. There were also corner cases involving overflow of close-to-the-limit timestamp values during timezone rotation.",
      "sinceVersion": "13.1",
      "contributor": "Nikita Glukhov, Alexander Korotkov, Tom Lane"
    },
    {
      "title": "Fix off-by-one conversion of negative years to BC dates in `to_date",
      "description": "Fix off-by-one conversion of negative years to BC dates in `to_date()()` and `to_timestamp()()` (Dar Alathar-Yemen, Tom Lane)\n          Also, arrange for the combination of a negative year and an explicit “BC” marker to cancel out and produce AD.",
      "sinceVersion": "13.1",
      "contributor": "Dar Alathar-Yemen, Tom Lane"
    },
    {
      "title": "Allow the jsonpath `.datetime",
      "description": "Allow the jsonpath `.datetime()()` method to accept ISO 8601-format timestamps (Nikita Glukhov)\n          This is not required by SQL, but it seems appropriate since our `to_json()()` functions generate that timestamp format for Javascript compatibility.",
      "sinceVersion": "13.1",
      "contributor": "Nikita Glukhov"
    },
    {
      "title": "Ensure that standby servers will archive WAL timeline history files when archive_mode is set to `always`",
      "description": "Ensure that standby servers will archive WAL timeline history files when archive_mode is set to `always` (Grigory Smolkin, Fujii Masao)\n          This oversight could lead to failure of subsequent PITR recovery attempts.",
      "sinceVersion": "13.1",
      "contributor": "Grigory Smolkin, Fujii Masao"
    },
    {
      "title": "Fix edge cases in detecting premature death of the postmaster on platforms that use `kqueue",
      "description": "Fix edge cases in detecting premature death of the postmaster on platforms that use `kqueue()()` (Thomas Munro)",
      "sinceVersion": "13.1",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid generating an incorrect incremental-sort plan when the sort key is a volatile expression",
      "description": "Avoid generating an incorrect incremental-sort plan when the sort key is a volatile expression (James Coleman)",
      "sinceVersion": "13.1",
      "contributor": "James Coleman"
    },
    {
      "title": "Fix possible crash when considering partition-wise joins during GEQO planning",
      "description": "Fix possible crash when considering partition-wise joins during GEQO planning (Tom Lane)",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible infinite loop or corrupted output data in TOAST decompression",
      "description": "Fix possible infinite loop or corrupted output data in TOAST decompression (Tom Lane)",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix counting of the number of entries in B-tree indexes during cleanup-only VACUUMs",
      "description": "Fix counting of the number of entries in B-tree indexes during cleanup-only VACUUMs (Peter Geoghegan)",
      "sinceVersion": "13.1",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that data is detoasted before being inserted into a BRIN index",
      "description": "Ensure that data is detoasted before being inserted into a BRIN index (Tomas Vondra)\n          Index entries are not supposed to contain out-of-line TOAST pointers, but BRIN didn't get that memo. This could lead to errors like “missing chunk number 0 for toast value NNN”. (If you are faced with such an error from an existing index, REINDEX should be enough to fix it.)",
      "sinceVersion": "13.1",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix buffered GiST index builds to work when the index has included columns",
      "description": "Fix buffered GiST index builds to work when the index has included columns (Pavel Borisov)",
      "sinceVersion": "13.1",
      "contributor": "Pavel Borisov"
    },
    {
      "title": "Fix unportable use of `getnameinfo",
      "description": "Fix unportable use of `getnameinfo()()` in pg_hba_file_rules view (Tom Lane)\n          On FreeBSD 11, and possibly other platforms, the view's address and netmask columns were always null due to this error.",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash if debug_query_string is NULL when starting a parallel worker",
      "description": "Avoid crash if debug_query_string is NULL when starting a parallel worker (Noah Misch)",
      "sinceVersion": "13.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix EXPLAIN's output for incremental sort plans to have correct tag nesting in XML output mode",
      "description": "Fix EXPLAIN's output for incremental sort plans to have correct tag nesting in XML output mode (Daniel Gustafsson)",
      "sinceVersion": "13.1",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Avoid unnecessary failure when transferring very large payloads through shared memory queues",
      "description": "Avoid unnecessary failure when transferring very large payloads through shared memory queues (Markus Wanner)",
      "sinceVersion": "13.1",
      "contributor": "Markus Wanner"
    },
    {
      "title": "Fix omission of result data type coercion in some cases in SQL-language functions",
      "description": "Fix omission of result data type coercion in some cases in SQL-language functions (Tom Lane)\n          This could lead to wrong results or crashes, depending on the data types involved.",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect handling of template function attributes in JIT code generation",
      "description": "Fix incorrect handling of template function attributes in JIT code generation (Andres Freund)\n          This has been shown to cause crashes on `s390x`, and very possibly there are other cases on other platforms.",
      "sinceVersion": "13.1",
      "contributor": "Andres Freund"
    },
    {
      "title": "Improve code generated for compare_exchange and fetch_add operations on PPC",
      "description": "Improve code generated for compare_exchange and fetch_add operations on PPC (Noah Misch)",
      "sinceVersion": "13.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix relation cache memory leaks with RLS policies",
      "description": "Fix relation cache memory leaks with RLS policies (Tom Lane)",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge-case memory leak in `index_get_partition",
      "description": "Fix edge-case memory leak in `index_get_partition()()` (Justin Pryzby)",
      "sinceVersion": "13.1",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart",
      "description": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart (Tom Lane)",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leaks in PL/pgsql's CALL processing",
      "description": "Fix memory leaks in PL/pgsql's CALL processing (Pavel Stehule, Tom Lane)",
      "sinceVersion": "13.1",
      "contributor": "Pavel Stehule, Tom Lane"
    },
    {
      "title": "Fix ecpg library's per-thread initialization logic for Windows",
      "description": "Fix ecpg library's per-thread initialization logic for Windows (Tom Lane, Alexander Lakhin)\n          Multi-threaded ecpg applications could suffer rare misbehavior due to incorrect locking.",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane, Alexander Lakhin"
    },
    {
      "title": "Fix ecpg's mis-processing of `B'...'` and `X'...'` literals",
      "description": "Fix ecpg's mis-processing of `B'...'` and `X'...'` literals (Shenhao Wang)",
      "sinceVersion": "13.1",
      "contributor": "Shenhao Wang"
    },
    {
      "title": "On Windows, make psql read the output of a backtick command in text mode, not binary mode",
      "description": "On Windows, make psql read the output of a backtick command in text mode, not binary mode (Tom Lane)\n          This ensures proper handling of newlines.",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that pg_dump collects per-column information about extension configuration tables",
      "description": "Ensure that pg_dump collects per-column information about extension configuration tables (Fabrízio de Royes Mello, Tom Lane)\n          Failure to do this led to crashes when specifying --inserts, or underspecified (though usually correct) COPY commands when using COPY to reload the tables' data.",
      "sinceVersion": "13.1",
      "contributor": "Fabrízio de Royes Mello, Tom Lane"
    },
    {
      "title": "Make pg_upgrade check for pre-existence of tablespace directories in the target cluster",
      "description": "Make pg_upgrade check for pre-existence of tablespace directories in the target cluster (Bruce Momjian)",
      "sinceVersion": "13.1",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Fix potential memory leak in contrib/pgcrypto",
      "description": "Fix potential memory leak in contrib/pgcrypto (Michael Paquier)",
      "sinceVersion": "13.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add check for an unlikely failure case in contrib/pgcrypto",
      "description": "Add check for an unlikely failure case in contrib/pgcrypto (Daniel Gustafsson)",
      "sinceVersion": "13.1",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station",
      "description": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station (Antarctica); plus historical corrections for France, Hungary, Monaco, and Palestine.",
      "sinceVersion": "13.1",
      "contributor": null
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2020d",
      "description": "Sync our copy of the timezone library with IANA tzcode release 2020d (Tom Lane)\n          This absorbs upstream's change of zic's default output option from “fat” to “slim”. That's just cosmetic for our purposes, as we continue to select the “fat” mode in pre-v13 branches. This change also ensures that `strftime()()` does not change errno unless it fails.",
      "sinceVersion": "13.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "libpq can leak memory contents after GSSAPI transport encryption initiation fails",
      "description": "libpq can leak memory contents after GSSAPI transport encryption initiation fails (Jacob Champion)\n          A modified server, or an unauthenticated man-in-the-middle, can send a not-zero-terminated error message during setup of GSSAPI (Kerberos) transport encryption. libpq will then copy that string, as well as following bytes in application memory up to the next zero byte, to its error report. Depending on what the calling application does with the error report, this could result in disclosure of application memory contents. There is also a small probability of a crash due to reading beyond the end of memory. Fix by properly zero-terminating the server message. (CVE-2022-41862)",
      "sinceVersion": "13.10",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Fix calculation of which `GENERATED` columns need to be updated in child tables during an UPDATE on a partitioned table or inheritance tree",
      "description": "Fix calculation of which `GENERATED` columns need to be updated in child tables during an UPDATE on a partitioned table or inheritance tree (Amit Langote, Tom Lane)\n          This fixes failure to update `GENERATED` columns that do not exist in the parent table, or that have different dependencies than are in the parent column's generation expression.",
      "sinceVersion": "13.10",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not",
      "description": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid (Tom Lane)\n          When pg_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list",
      "description": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list (Dean Rasheed)\n          In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "sinceVersion": "13.10",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Reject uses of undefined variables in jsonpath existence checks",
      "description": "Reject uses of undefined variables in jsonpath existence checks (Alexander Korotkov, David G. Johnston)\n          While jsonpath match operators threw an error for an undefined variable in the path pattern, the existence operators silently treated it as a match.",
      "sinceVersion": "13.10",
      "contributor": "Alexander Korotkov, David G. Johnston"
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "Fix edge-case data corruption in parallel hash joins (Dmitry Astapov)\n          If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "sinceVersion": "13.10",
      "contributor": "Dmitry Astapov"
    },
    {
      "title": "Log the correct ending timestamp in recovery_target_xid mode",
      "description": "Log the correct ending timestamp in recovery_target_xid mode (Tom Lane)\n          When ending recovery based on the recovery_target_xid setting with recovery_target_inclusive = `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve error reporting for some buffered file read failures",
      "description": "Improve error reporting for some buffered file read failures (Peter Eisentraut)\n          Correctly report a short read, giving the numbers of bytes desired and actually read, instead of reporting an irrelevant error code. Most places got this right already, but some recently-written replication logic did not.",
      "sinceVersion": "13.10",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Prevent “wrong tuple length” failure at the end of VACUUM",
      "description": "Prevent “wrong tuple length” failure at the end of VACUUM (Ashwin Agrawal, Junfeng Yang)\n          This occurred if VACUUM needed to update the current database's datfrozenxid value and the database has so many granted privileges that its datacl value has been pushed out-of-line.",
      "sinceVersion": "13.10",
      "contributor": "Ashwin Agrawal, Junfeng Yang"
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline",
      "description": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline (Tom Lane)\n          If there's not been an explicit BEGIN TRANSACTION, ANALYZE would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "Reject cancel request packets having the wrong length (Andrey Borodin)\n          The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "sinceVersion": "13.10",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "Add recursion and looping defenses in subquery pullup (Tom Lane)\n          A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition (Tom Lane)\n          This could result in “could not devise a query plan for the given query” errors.",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches",
      "description": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches (Tom Lane)",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak in hashing strings with nondeterministic collations",
      "description": "Fix memory leak in hashing strings with nondeterministic collations (Jeff Davis)",
      "sinceVersion": "13.10",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "Clean up the libpq connection object after a failed replication connection attempt (Andres Freund)\n          The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as CREATE SUBSCRIPTION, such a failure resulted in a small session-lifespan memory leak.",
      "sinceVersion": "13.10",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ignore invalidated logical-replication slots while determining oldest catalog xmin",
      "description": "Ignore invalidated logical-replication slots while determining oldest catalog xmin (Sirisha Chamarthi)\n          A replication slot could prevent cleanup of dead tuples in the system catalogs even after it becomes invalidated due to exceeding max_slot_wal_keep_size. Thus, failure of a replication consumer could lead to indefinitely-large catalog bloat.",
      "sinceVersion": "13.10",
      "contributor": "Sirisha Chamarthi"
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "Fix uninitialized-memory usage in logical decoding (Masahiko Sawada)\n          In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "sinceVersion": "13.10",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations",
      "description": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations (Robert Haas)",
      "sinceVersion": "13.10",
      "contributor": "Robert Haas"
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Advance a heap page's LSN when setting its all-visible bit during WAL replay (Jeff Davis)\n          Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "sinceVersion": "13.10",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Prevent unsafe usage of a relation cache entry's rd_smgr pointer",
      "description": "Prevent unsafe usage of a relation cache entry's rd_smgr pointer (Amul Sul)\n          Remove various assumptions that rd_smgr would stay valid over a series of operations, by wrapping all uses of it in a function that will recompute it if needed. This prevents bugs occurring when an unexpected cache flush occurs partway through such a series.",
      "sinceVersion": "13.10",
      "contributor": "Amul Sul"
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "Fix latent buffer-overrun problem in `WaitEventSet` logic (Thomas Munro)\n          The `epoll()`-based and `kqueue()`-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "sinceVersion": "13.10",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds (Andres Freund)\n          clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "sinceVersion": "13.10",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks (Justin Pryzby)\n          In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "sinceVersion": "13.10",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "In pg_dump, avoid calling unsafe server functions before we have locks on the tables to be examined",
      "description": "In pg_dump, avoid calling unsafe server functions before we have locks on the tables to be examined (Tom Lane, Gilles Darold)\n          pg_dump uses certain server functions that can fail if examining a table that gets dropped concurrently. Avoid this type of failure by ensuring that we obtain access share lock before inquiring too deeply into a table's properties, and that we don't apply such functions to tables we don't intend to dump at all.",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane, Gilles Darold"
    },
    {
      "title": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA",
      "description": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA (Dean Rasheed)",
      "sinceVersion": "13.10",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits",
      "description": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits (Tom Lane)",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/sepgsql, avoid deprecation warnings with recent libselinux",
      "description": "In contrib/sepgsql, avoid deprecation warnings with recent libselinux (Michael Paquier)",
      "sinceVersion": "13.10",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix build on Microsoft Visual Studio 2013",
      "description": "Fix build on Microsoft Visual Studio 2013 (Tom Lane)\n          A previous patch supposed that all platforms of interest have `snprintf()()`, but MSVC 2013 isn't quite there yet. Revert to using `sprintf()()` on that platform.",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl",
      "description": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl (Andrew Dunstan)",
      "sinceVersion": "13.10",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc (Andrew Dunstan)\n          Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "sinceVersion": "13.10",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Suppress compiler warnings from Perl's header files (Andres Freund)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "13.10",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions",
      "description": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions (Tom Lane)",
      "sinceVersion": "13.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.\n          Notably, a new timezone America/Ciudad_Juarez has been split off from America/Ojinaga.",
      "sinceVersion": "13.10",
      "contributor": null
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view",
      "description": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane)",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash when the new schema name is omitted in CREATE SCHEMA",
      "description": "Avoid crash when the new schema name is omitted in CREATE SCHEMA (Michael Paquier)\n          The SQL standard allows writing `CREATE SCHEMA AUTHORIZATION `owner_name``, with the schema name defaulting to `owner_name`. However some code paths expected the schema name to be present and would fail.",
      "sinceVersion": "13.11",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix enabling/disabling of cloned triggers in partitioned tables",
      "description": "Fix enabling/disabling of cloned triggers in partitioned tables (Tom Lane)\n          ALTER TABLE ... ENABLE/DISABLE TRIGGER USER skipped cloned triggers, mistaking them for system triggers. Other variants of `ENABLE/DISABLE TRIGGER` would process them, but only after improperly enforcing a superuserness check.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "Disallow altering composite types that are stored in indexes (Tom Lane)\n          ALTER TYPE disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow system columns as elements of foreign keys",
      "description": "Disallow system columns as elements of foreign keys (Tom Lane)\n          Since the removal of OID as a system column, there is no plausible use-case for this, and various bits of code no longer support it. Disallow it rather than trying to fix all the cases.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possible crash when `array_position",
      "description": "Avoid possible crash when `array_position()()` or `array_positions()()` is passed an empty array (Tom Lane)",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char",
      "description": "Fix possible out-of-bounds fetch in `to_char()()` (Tom Lane)\n          With bad luck this could have resulted in a server crash.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid buffer overread in `translate",
      "description": "Avoid buffer overread in `translate()()` function (Daniil Anisimov)\n          When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "sinceVersion": "13.11",
      "contributor": "Daniil Anisimov"
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Fix error cursor setting for parse errors in JSON string literals (Tom Lane)\n          Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data corruption due to vacuum_defer_cleanup_age being larger than the current 64-bit xid",
      "description": "Fix data corruption due to vacuum_defer_cleanup_age being larger than the current 64-bit xid (Andres Freund)\n          In v14 and later with non-default settings of vacuum_defer_cleanup_age, it was possible to compute a very large vacuum cleanup horizon xid, leading to vacuum removing rows that are still live. v12 and v13 have a lesser form of the same problem affecting only GiST indexes, which could lead to index pages getting recycled too early.",
      "sinceVersion": "13.11",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "Fix parser's failure to detect some cases of improperly-nested aggregates (Tom Lane)\n          This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options (David Rowley)\n          This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "sinceVersion": "13.11",
      "contributor": "David Rowley"
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another (Tom Lane)\n          This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Fix oversights in execution of nested `ARRAY[]` constructs (Alexander Lakhin, Tom Lane)\n          Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "sinceVersion": "13.11",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Prevent crash when updating a field within an array-of-domain-over-composite-type column",
      "description": "Prevent crash when updating a field within an array-of-domain-over-composite-type column (Dmitry Dolgov)",
      "sinceVersion": "13.11",
      "contributor": "Dmitry Dolgov"
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Fix partition pruning logic for partitioning on boolean columns (David Rowley)\n          Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "sinceVersion": "13.11",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "Fix race condition in per-batch cleanup during parallel hash join (Thomas Munro, Melanie Plageman)\n          A crash was possible given unlucky timing and parallel_leader_participation = `off` (which is not the default).",
      "sinceVersion": "13.11",
      "contributor": "Thomas Munro, Melanie Plageman"
    },
    {
      "title": "Recalculate `GENERATED` columns after an EvalPlanQual check",
      "description": "Recalculate `GENERATED` columns after an EvalPlanQual check (Tom Lane)\n          In `READ COMMITTED` isolation mode, the effects of a row update might need to get reapplied to a newer version of the row than the query found originally. If so, we need to recompute any `GENERATED` columns, in case they depend on columns that were changed by the concurrent update.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero",
      "description": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero (Masahiko Sawada)\n          Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation vacuum_cost_delay setting, but this was done only for positive settings, not zero.",
      "sinceVersion": "13.11",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates",
      "description": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates (Andres Freund, Tom Lane)\n          Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "sinceVersion": "13.11",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule (Dean Rasheed)\n          Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "sinceVersion": "13.11",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Support references to `OLD` and `NEW` within subqueries in rule actions (Dean Rasheed, Tom Lane)\n          Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "sinceVersion": "13.11",
      "contributor": "Dean Rasheed, Tom Lane"
    },
    {
      "title": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table",
      "description": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table (Tom Lane)",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin (Shi Yu)\n          Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache_callback_list slots” error.",
      "sinceVersion": "13.11",
      "contributor": "Shi Yu"
    },
    {
      "title": "Avoid unnecessary calls to custom validators for index operator class options",
      "description": "Avoid unnecessary calls to custom validators for index operator class options (Alexander Korotkov)\n          This change fixes some cases where an unexpected error was thrown.",
      "sinceVersion": "13.11",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "Fix dereference of dangling pointer during buffering build of a GiST index (Alexander Lakhin)\n          This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "sinceVersion": "13.11",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Ignore dropped columns and generated columns during logical replication of an update or delete action",
      "description": "Ignore dropped columns and generated columns during logical replication of an update or delete action (Onder Kalaci, Shi Yu)\n          Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "sinceVersion": "13.11",
      "contributor": "Onder Kalaci, Shi Yu"
    },
    {
      "title": "Correct the name of the wait event for SLRU buffer I/O for commit timestamps",
      "description": "Correct the name of the wait event for SLRU buffer I/O for commit timestamps (Alexander Lakhin)\n          This wait event is named `CommitTsBuffer` according to the documentation, but the code had it as `CommitTSBuffer`. Change the code to match the documentation, as that way is more consistent with the naming of related wait events.",
      "sinceVersion": "13.11",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Avoid possible underflow when calculating how many WAL segments to keep",
      "description": "Avoid possible underflow when calculating how many WAL segments to keep (Kyotaro Horiguchi)\n          This could result in not honoring wal_keep_size accurately.",
      "sinceVersion": "13.11",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding (Jacob Champion, Heikki Linnakangas)\n          This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "sinceVersion": "13.11",
      "contributor": "Jacob Champion, Heikki Linnakangas"
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "Avoid race condition with process ID tracking on Windows (Thomas Munro)\n          The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "sinceVersion": "13.11",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add missing cases to `SPI_result_code_string",
      "description": "Add missing cases to `SPI_result_code_string()()` (Dean Rasheed)",
      "sinceVersion": "13.11",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc",
      "description": "Fix erroneous Valgrind markings in `AllocSetRealloc()()` (Karina Litskevich)\n          In the unusual case where the size of a large (&gt;8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "sinceVersion": "13.11",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message",
      "description": "Avoid assertion failure when decoding a transactional logical replication message (Tomas Vondra)",
      "sinceVersion": "13.11",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "Avoid locale sensitivity when processing regular expression escapes (Jeff Davis)\n          A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "sinceVersion": "13.11",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range",
      "description": "Avoid trying to write an empty WAL record in `log_newpage_range()()` when the last few pages in the specified range are empty (Matthias van de Meent)\n          It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "sinceVersion": "13.11",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions",
      "description": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions (Ajit Awekar, Tom Lane)",
      "sinceVersion": "13.11",
      "contributor": "Ajit Awekar, Tom Lane"
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays (Tom Lane)\n          plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays (Tom Lane)\n          plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Fix unwinding of exception stack in plpython (Xing Guo)\n          Some rare failure cases could return without cleaning up the PG_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "sinceVersion": "13.11",
      "contributor": "Xing Guo"
    },
    {
      "title": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll",
      "description": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll()()` (Michael Paquier)\n          With gssencmode set to `require`, the connection was not marked dead after a GSS initialization failure. Make it fail immediately, as the equivalent case for TLS encryption has long done.",
      "sinceVersion": "13.11",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the -C ORACLE option",
      "description": "Fix possible data corruption in ecpg programs built with the -C ORACLE option (Kyotaro Horiguchi)\n          When `ecpg_get_data()()` is called with varcharsize set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "sinceVersion": "13.11",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully (Tom Lane)\n          Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the --load-via-partition-root option; but since there is very little chance of success without that, teach pg_dump to apply it automatically to such tables.\n          Also, fix pg_restore to not try to TRUNCATE target tables before restoring into them when --load-via-partition-root mode is used. This avoids a hazard of deadlocks and lost data.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping (Dmitry Dolgov, Tom Lane)\n          This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "sinceVersion": "13.11",
      "contributor": "Dmitry Dolgov, Tom Lane"
    },
    {
      "title": "Require the `siglen` option of a GiST index on an ltree column, if specified, to be a multiple of 4",
      "description": "Require the `siglen` option of a GiST index on an ltree column, if specified, to be a multiple of 4 (Alexander Korotkov)\n          Other values result in misaligned accesses to index content, which is harmless on Intel-compatible hardware but can cause a crash on some other architectures.",
      "sinceVersion": "13.11",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression",
      "description": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression (Tom Lane)\n          A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip",
      "description": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip (Tom Lane)\n          Previously, `make install-strip` used the -x option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "sinceVersion": "13.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it (Aleksander Alekseev, Peter Eisentraut, Tom Lane)\n          It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's --nonet option to the build recipes.",
      "sinceVersion": "13.11",
      "contributor": "Aleksander Alekseev, Peter Eisentraut, Tom Lane"
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory",
      "description": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory (Peter Eisentraut)\n          Place it under tmp_check in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "sinceVersion": "13.11",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.\n          When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "sinceVersion": "13.11",
      "contributor": null
    },
    {
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign (Noah Misch)\n          This restriction guards against SQL-injection hazards for trusted extensions.\n          The PostgreSQL Project thanks Micah Gates, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "sinceVersion": "13.12",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix confusion between empty",
      "description": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries (Tomas Vondra)\n          Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n          This fix will not in itself correct faulty BRIN entries. It's recommended to REINDEX any BRIN indexes that may be used to search for nulls.",
      "sinceVersion": "13.12",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted",
      "description": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted (Andres Freund)\n          If DROP DATABASE was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its pg_database row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another DROP DATABASE.",
      "sinceVersion": "13.12",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "Ensure that partitioned indexes are correctly marked as valid or not at creation (Michael Paquier)\n          If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "sinceVersion": "13.12",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION",
      "description": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION (Michael Paquier)\n          Such an index will now be ignored, and a new child index created instead.",
      "sinceVersion": "13.12",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached (Michael Paquier)\n          The update of the index's pg_index entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "sinceVersion": "13.12",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema",
      "description": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema (Michael Paquier, Heikki Linnakangas)\n          Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "sinceVersion": "13.12",
      "contributor": "Michael Paquier, Heikki Linnakangas"
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "Don't use partial unique indexes for uniqueness proofs in the planner (David Rowley)\n          This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "sinceVersion": "13.12",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses (Etsuro Fujita)\n          The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "sinceVersion": "13.12",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode (Thomas Munro)\n          Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "sinceVersion": "13.12",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop",
      "description": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop (Tom Lane)\n          When rescanning the join after the values of such Params have changed, we must rebuild the hash table, but neglected to do so. This could result in missing join output rows.",
      "sinceVersion": "13.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "Fix intermittent failures when trying to update a field of a composite column (Tom Lane)\n          If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "sinceVersion": "13.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent query-lifespan memory leaks in some UPDATE queries with triggers",
      "description": "Prevent query-lifespan memory leaks in some UPDATE queries with triggers (Tomas Vondra)",
      "sinceVersion": "13.12",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Prevent query-lifespan memory leaks when an Incremental Sort plan node is rescanned",
      "description": "Prevent query-lifespan memory leaks when an Incremental Sort plan node is rescanned (James Coleman, Laurenz Albe, Tom Lane)",
      "sinceVersion": "13.12",
      "contributor": "James Coleman, Laurenz Albe, Tom Lane"
    },
    {
      "title": "Accept fractional seconds in the input to jsonpath's `datetime",
      "description": "Accept fractional seconds in the input to jsonpath's `datetime()()` method (Tom Lane)",
      "sinceVersion": "13.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns",
      "description": "Prevent stack-overflow crashes with very complex text search patterns (Tom Lane)",
      "sinceVersion": "13.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf",
      "description": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf (Tom Lane)\n          The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "sinceVersion": "13.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "Fix mishandling of C++ out-of-memory conditions (Heikki Linnakangas)\n          If JIT is in use, running out of memory in a C++ `new()` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "sinceVersion": "13.12",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix rare null-pointer crash in plancache.c",
      "description": "Fix rare null-pointer crash in plancache.c (Tom Lane)",
      "sinceVersion": "13.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space (Dongming Liu)\n          Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "sinceVersion": "13.12",
      "contributor": "Dongming Liu"
    },
    {
      "title": "Allow VACUUM to continue after detecting certain types of b-tree index corruption",
      "description": "Allow VACUUM to continue after detecting certain types of b-tree index corruption (Peter Geoghegan)\n          If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of REINDEX will fix the broken index, but preventing VACUUM from completing until that is done risks making matters far worse.",
      "sinceVersion": "13.12",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid",
      "description": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid (Andres Freund)\n          Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "sinceVersion": "13.12",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "Avoid double replay of prepared transactions during crash recovery (suyu.cmj, Michael Paquier)\n          After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "sinceVersion": "13.12",
      "contributor": "suyu.cmj, Michael Paquier"
    },
    {
      "title": "Fix possible failure while promoting a standby server, if archiving is enabled and two-phase transactions need to be recovered",
      "description": "Fix possible failure while promoting a standby server, if archiving is enabled and two-phase transactions need to be recovered (Julian Markwort)\n          If any required two-phase transactions were logged in the most recent (partial) log segment, promotion would fail with an incorrect complaint about “requested WAL segment has already been removed”.",
      "sinceVersion": "13.12",
      "contributor": "Julian Markwort"
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync",
      "description": "Ensure that a newly created, but still empty table is `fsync()`'ed at the next checkpoint (Heikki Linnakangas)\n          Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "sinceVersion": "13.12",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "Ensure that creation of the init fork of an unlogged index is WAL-logged (Heikki Linnakangas)\n          While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "sinceVersion": "13.12",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix missing reinitializations of delay-checkpoint-end flags",
      "description": "Fix missing reinitializations of delay-checkpoint-end flags (suyu.cmj)\n          This could result in unnecessary delays of checkpoints, or in assertion failures in assert-enabled builds.",
      "sinceVersion": "13.12",
      "contributor": "suyu.cmj"
    },
    {
      "title": "Fix overly strict assertion in jsonpath code",
      "description": "Fix overly strict assertion in jsonpath code (David Rowley)\n          This assertion failed if a query applied the `.type()` operator to a `like_regex` result. There was no bug in non-assert builds.",
      "sinceVersion": "13.12",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction",
      "description": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction (Tom Lane)",
      "sinceVersion": "13.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix contrib/fuzzystrmatch's Soundex `difference",
      "description": "Fix contrib/fuzzystrmatch's Soundex `difference()()` function to handle empty input sanely (Alexander Lakhin, Tom Lane)\n          An input string containing no alphabetic characters resulted in unpredictable output.",
      "sinceVersion": "13.12",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Tighten whitespace checks in contrib/hstore input",
      "description": "Tighten whitespace checks in contrib/hstore input (Evan Jones)\n          In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "sinceVersion": "13.12",
      "contributor": "Evan Jones"
    },
    {
      "title": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass",
      "description": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass (Ankit Kumar Pandey, Alexander Lakhin)\n          Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "sinceVersion": "13.12",
      "contributor": "Ankit Kumar Pandey, Alexander Lakhin"
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in contrib/intarray",
      "description": "Avoid useless double decompression of GiST index entries in contrib/intarray (Konstantin Knizhnik, Matthias van de Meent, Tom Lane)",
      "sinceVersion": "13.12",
      "contributor": "Konstantin Knizhnik, Matthias van de Meent, Tom Lane"
    },
    {
      "title": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries",
      "description": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries (Shruthi Gowda)\n          This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "sinceVersion": "13.12",
      "contributor": "Shruthi Gowda"
    },
    {
      "title": "Silence deprecation warnings when compiling with OpenSSL 3.0.0 or later",
      "description": "Silence deprecation warnings when compiling with OpenSSL 3.0.0 or later (Peter Eisentraut)",
      "sinceVersion": "13.12",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions",
      "description": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions (Tom Lane)\n          This error led to a text-type value being interpreted as an unknown-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the text value.\n          The PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "sinceVersion": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix misbehavior during recursive page split in GiST index build (Heikki Linnakangas)\n          Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "sinceVersion": "13.13",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Prevent de-duplication of btree index entries for interval columns",
      "description": "Prevent de-duplication of btree index entries for interval columns (Noah Misch)\n          There are interval values that are distinguishable but compare equal, for example `24:00:00` and `1 day`. This breaks assumptions made by btree de-duplication, so interval columns need to be excluded from de-duplication. This oversight can cause incorrect results from index-only scans. Moreover, after updating amcheck will report an error for almost all such indexes. Users should reindex any btree indexes on interval columns.",
      "sinceVersion": "13.13",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys (David Rowley)\n          Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "sinceVersion": "13.13",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses (Peter Geoghegan)\n          When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "sinceVersion": "13.13",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows",
      "description": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane)",
      "sinceVersion": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema",
      "description": "Don't crash if `cursor_to_xmlschema()()` is applied to a non-data-returning Portal (Boyu Yang)",
      "sinceVersion": "13.13",
      "contributor": "Boyu Yang"
    },
    {
      "title": "Throw the intended error if `pgrowlocks",
      "description": "Throw the intended error if `pgrowlocks()()` is applied to a partitioned table (David Rowley)\n          Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "sinceVersion": "13.13",
      "contributor": "David Rowley"
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Handle invalid indexes more cleanly in assorted SQL functions (Noah Misch)\n          Report an error if `pgstatindex()()`, `pgstatginindex()()`, `pgstathashindex()()`, or `pgstattuple()()` is applied to an invalid index. If `brin_desummarize_range()()`, `brin_summarize_new_values()()`, `brin_summarize_range()()`, or `gin_clean_pending_list()()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed CREATE INDEX had left behind.",
      "sinceVersion": "13.13",
      "contributor": "Noah Misch"
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector",
      "description": "Avoid premature memory allocation failure with long inputs to `to_tsvector()()` (Tom Lane)",
      "sinceVersion": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix over-allocation of the constructed tsvector in `tsvectorrecv",
      "description": "Fix over-allocation of the constructed tsvector in `tsvectorrecv()()` (Denis Erokhin)\n          If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished tsvector. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "sinceVersion": "13.13",
      "contributor": "Denis Erokhin"
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit",
      "description": "Fix incorrect coding in `gtsvector_picksplit()()` (Alexander Lakhin)\n          This could lead to poor page-split decisions in GiST indexes on tsvector columns.",
      "sinceVersion": "13.13",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Improve checks for corrupt PGLZ compressed data",
      "description": "Improve checks for corrupt PGLZ compressed data (Flavien Guedez)",
      "sinceVersion": "13.13",
      "contributor": "Flavien Guedez"
    },
    {
      "title": "Fix COMMIT AND CHAIN/ROLLBACK AND CHAIN to work properly when there is an unreleased savepoint",
      "description": "Fix COMMIT AND CHAIN/ROLLBACK AND CHAIN to work properly when there is an unreleased savepoint (Liu Xiang, Tom Lane)\n          Instead of propagating the current transaction's properties to the new transaction, they propagated some previous transaction's properties.",
      "sinceVersion": "13.13",
      "contributor": "Liu Xiang, Tom Lane"
    },
    {
      "title": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value",
      "description": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value (Xing Guo, Aleksander Alekseev, Tom Lane)\n          No built-in parameter fits this description, but an extension could define such a parameter.",
      "sinceVersion": "13.13",
      "contributor": "Xing Guo, Aleksander Alekseev, Tom Lane"
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables (Tom Lane)\n          This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "sinceVersion": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system",
      "description": "Avoid improper response to shutdown signals in child processes just forked by `system()()` (Nathan Bossart)\n          This fix avoids a race condition in which a child process that has been forked off by `system()()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "sinceVersion": "13.13",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Cope with torn reads of pg_control in frontend programs",
      "description": "Cope with torn reads of pg_control in frontend programs (Thomas Munro)\n          On some file systems, reading pg_control may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "sinceVersion": "13.13",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid torn reads of pg_control in relevant SQL functions",
      "description": "Avoid torn reads of pg_control in relevant SQL functions (Thomas Munro)\n          Acquire the appropriate lock before reading pg_control, to ensure we get a consistent view of that file.",
      "sinceVersion": "13.13",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "Avoid integer overflow when computing size of backend activity string array (Jakub Wartak)\n          On 64-bit machines we will allow values of track_activity_query_size large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "sinceVersion": "13.13",
      "contributor": "Jakub Wartak"
    },
    {
      "title": "Fix briefly showing inconsistent progress statistics for ANALYZE on inherited tables",
      "description": "Fix briefly showing inconsistent progress statistics for ANALYZE on inherited tables (Heikki Linnakangas)\n          The block-level counters should be reset to zero at the same time we update the current-relation field.",
      "sinceVersion": "13.13",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Track the dependencies of cached CALL statements, and re-plan them when needed",
      "description": "Track the dependencies of cached CALL statements, and re-plan them when needed (Tom Lane)\n          DDL commands, such as replacement of a function that has been inlined into a CALL argument, can create the need to re-plan a CALL that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "sinceVersion": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels",
      "description": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels (Richard Guo)\n          This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "sinceVersion": "13.13",
      "contributor": "Richard Guo"
    },
    {
      "title": "Avoid “record type has not been registered” failure when deparsing a view that contains references to fields of composite constants",
      "description": "Avoid “record type has not been registered” failure when deparsing a view that contains references to fields of composite constants (Tom Lane)",
      "sinceVersion": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error-handling bug in RECORD type cache management",
      "description": "Fix error-handling bug in RECORD type cache management (Thomas Munro)\n          An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "sinceVersion": "13.13",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error",
      "description": "Fix assertion failure when logical decoding is retried in the same session after an error (Hou Zhijie)",
      "sinceVersion": "13.13",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Treat out-of-memory failures as fatal while reading WAL (Michael Paquier)\n          Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "sinceVersion": "13.13",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field",
      "description": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier)",
      "sinceVersion": "13.13",
      "contributor": "Thomas Munro, Michael Paquier"
    },
    {
      "title": "Ensure that standby-mode WAL recovery reports an error when an invalid page header is found",
      "description": "Ensure that standby-mode WAL recovery reports an error when an invalid page header is found (Yugo Nagata, Kyotaro Horiguchi)",
      "sinceVersion": "13.13",
      "contributor": "Yugo Nagata, Kyotaro Horiguchi"
    },
    {
      "title": "Fix datatype size confusion in logical tape management",
      "description": "Fix datatype size confusion in logical tape management (Ranier Vilela)\n          Integer overflow was possible on platforms where long is wider than int, although it would take a multiple-terabyte temporary file to cause a problem.",
      "sinceVersion": "13.13",
      "contributor": "Ranier Vilela"
    },
    {
      "title": "Avoid unintended close of syslogger process's stdin",
      "description": "Avoid unintended close of syslogger process's stdin (Heikki Linnakangas)",
      "sinceVersion": "13.13",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis (Tom Lane)\n          Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as SET TRANSACTION ISOLATION LEVEL.",
      "sinceVersion": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Keep by-reference attmissingval values in a long-lived context while they are being used",
      "description": "Keep by-reference attmissingval values in a long-lived context while they are being used (Andrew Dunstan)\n          This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "sinceVersion": "13.13",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Recalculate the effective value of search_path after ALTER ROLE",
      "description": "Recalculate the effective value of search_path after ALTER ROLE (Jeff Davis)\n          This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "sinceVersion": "13.13",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish",
      "description": "Fix order of operations in `GenericXLogFinish()` (Jeff Davis)\n          This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (contrib/bloom does, for example).",
      "sinceVersion": "13.13",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling",
      "description": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin)",
      "sinceVersion": "13.13",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables (Euler Taveira, Tom Lane)\n          Formerly, only the table-level ACL would get restored if both types were present.",
      "sinceVersion": "13.13",
      "contributor": "Euler Taveira, Tom Lane"
    },
    {
      "title": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types",
      "description": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types (Álvaro Herrera)\n          These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "sinceVersion": "13.13",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg_basebackup",
      "description": "Avoid generating invalid temporary slot names in pg_basebackup (Jelte Fennema)\n          This has only been seen to occur when the server connection runs through pgbouncer.",
      "sinceVersion": "13.13",
      "contributor": "Jelte Fennema"
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows",
      "description": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch)",
      "sinceVersion": "13.13",
      "contributor": "Noah Misch"
    },
    {
      "title": "In contrib/amcheck, do not report interrupted page deletion as corruption",
      "description": "In contrib/amcheck, do not report interrupted page deletion as corruption (Noah Misch)\n          This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before VACUUM had cleaned things up.",
      "sinceVersion": "13.13",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed",
      "description": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Dean Rasheed)\n          Such an indexscan failed to return all the entries it should.",
      "sinceVersion": "13.13",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Add support for LLVM 16 and 17",
      "description": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "13.13",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Suppress assorted build-time warnings on recent macOS (Tom Lane)\n          Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the -multiply_defined suppress linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "sinceVersion": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "When building contrib/unaccent's rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set",
      "description": "When building contrib/unaccent's rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set (Japin Li)",
      "sinceVersion": "13.13",
      "contributor": "Japin Li"
    },
    {
      "title": "Remove `PHOT`",
      "description": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list (Tom Lane)\n          Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "sinceVersion": "13.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "Fix memory leak when performing JIT inlining (Andres Freund, Daniel Gustafsson)\n          There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "sinceVersion": "13.14",
      "contributor": "Andres Freund, Daniel Gustafsson"
    },
    {
      "title": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes",
      "description": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes (Andres Freund)\n          This fixes O(N^2) behavior when the list of waiters is long. In some use-cases this results in substantial throughput improvements.",
      "sinceVersion": "13.14",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Avoid generating incorrect partitioned-join plans (Richard Guo)\n          Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "sinceVersion": "13.14",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars (Tom Lane)\n          This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "Avoid requesting an oversize shared-memory area in parallel hash join (Thomas Munro, Andrei Lepikhov, Alexander Korotkov)\n          The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "sinceVersion": "13.14",
      "contributor": "Thomas Munro, Andrei Lepikhov, Alexander Korotkov"
    },
    {
      "title": "Avoid assertion failures in `heap_update",
      "description": "Avoid assertion failures in `heap_update()()` and `heap_delete()()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck (Alexander Lakhin)\n          This error had no impact in non-assert builds.",
      "sinceVersion": "13.14",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree",
      "description": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree (Tender Wang)\n          If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "sinceVersion": "13.14",
      "contributor": "Tender Wang"
    },
    {
      "title": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands",
      "description": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands (Tender Wang, Michael Paquier)",
      "sinceVersion": "13.14",
      "contributor": "Tender Wang, Michael Paquier"
    },
    {
      "title": "Properly lock the associated table during DROP STATISTICS",
      "description": "Properly lock the associated table during DROP STATISTICS (Tomas Vondra)\n          Failure to acquire the lock could result in “tuple concurrently deleted” errors if the DROP executes concurrently with ANALYZE.",
      "sinceVersion": "13.14",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "Detect that a new catalog cache entry became stale while detoasting its fields (Tom Lane)\n          We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Fix edge-case integer overflow detection bug on some platforms (Dean Rasheed)\n          Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "sinceVersion": "13.14",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp (Tom Lane)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add more checks for overflow in `interval_mul",
      "description": "Add more checks for overflow in `interval_mul()()` and `interval_div()()` (Dean Rasheed)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "13.14",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context (Tom Lane)\n          Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Match collation too when matching an existing index to a new partitioned index (Peter Eisentraut)\n          Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "sinceVersion": "13.14",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page (Fei Changhong, Heikki Linnakangas)\n          The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "sinceVersion": "13.14",
      "contributor": "Fei Changhong, Heikki Linnakangas"
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "Avoid premature release of buffer pin in GIN index insertion (Tom Lane)\n          If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Avoid failure with partitioned SP-GiST indexes (Tom Lane)\n          Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "Fix ownership change reporting for large objects (Tom Lane)\n          A no-op ALTER LARGE OBJECT OWNER command (that is, one selecting the existing owner) passed the wrong class ID to the PostAlterHook, probably confusing any extension using that hook.",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions (Fei Changhong)\n          The startedInRecovery flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "sinceVersion": "13.14",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription (Shlok Kyal)\n          One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "sinceVersion": "13.14",
      "contributor": "Shlok Kyal"
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "Return the correct status code when a new client disconnects without responding to the server's password challenge (Liu Lang, Tom Lane)\n          In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use ClientAuthentication_hook.",
      "sinceVersion": "13.14",
      "contributor": "Liu Lang, Tom Lane"
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Fix incompatibility with OpenSSL 3.2 (Tristan Partin, Bo Andreson)\n          Use the BIO “app_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "sinceVersion": "13.14",
      "contributor": "Tristan Partin, Bo Andreson"
    },
    {
      "title": "Be more wary about OpenSSL not setting errno on error",
      "description": "Be more wary about OpenSSL not setting errno on error (Tom Lane)\n          If errno isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR`",
      "description": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov)",
      "sinceVersion": "13.14",
      "contributor": "Alexander Kuzmenkov"
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads",
      "description": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier)",
      "sinceVersion": "13.14",
      "contributor": "Willi Mann, Michael Paquier"
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "Fix timing-dependent failure in GSSAPI data transmission (Tom Lane)\n          When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped (Rian McGuire, Tom Lane)\n          This conforms to the behavior for other dependent objects such as indexes.",
      "sinceVersion": "13.14",
      "contributor": "Rian McGuire, Tom Lane"
    },
    {
      "title": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index",
      "description": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane)",
      "sinceVersion": "13.14",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Report a better error when contrib/pageinspect's `hash_bitmap_info",
      "description": "Report a better error when contrib/pageinspect's `hash_bitmap_info()()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier)",
      "sinceVersion": "13.14",
      "contributor": "Alexander Lakhin, Michael Paquier"
    },
    {
      "title": "Report a better error when contrib/pgstattuple's `pgstathashindex",
      "description": "Report a better error when contrib/pgstattuple's `pgstathashindex()()` function is applied to a partitioned hash index (Alexander Lakhin)",
      "sinceVersion": "13.14",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress",
      "description": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress (Kyotaro Horiguchi)\n          When launching a child process via cmd.exe, pass the /D flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "sinceVersion": "13.14",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later",
      "description": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane)",
      "sinceVersion": "13.14",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix compilation failure of `WAL_DEBUG` code on Windows",
      "description": "Fix compilation failure of `WAL_DEBUG` code on Windows (Bharath Rupireddy)",
      "sinceVersion": "13.14",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Suppress compiler warnings from Python's header files (Peter Eisentraut, Tom Lane)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "13.14",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18",
      "description": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro)",
      "sinceVersion": "13.14",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon.",
      "sinceVersion": "13.14",
      "contributor": null
    },
    {
      "title": "Ensure that index-only scans on name columns return a fully-padded value",
      "description": "Ensure that index-only scans on name columns return a fully-padded value (David Rowley)\n          The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "sinceVersion": "13.15",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type",
      "description": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type (Tom Lane)\n          Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause (David Rowley)\n          A NULL value satisfies a clause such as ``boolcol` IS NOT FALSE`, so pruning away a partition containing NULLs yielded incorrect answers.",
      "sinceVersion": "13.15",
      "contributor": "David Rowley"
    },
    {
      "title": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema",
      "description": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema (Tom Lane)\n          Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan",
      "description": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan (Melanie Plageman)\n          Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "sinceVersion": "13.15",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "Avoid deadlock during removal of orphaned temporary tables (Mikhail Zhilin)\n          If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "sinceVersion": "13.15",
      "contributor": "Mikhail Zhilin"
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "Avoid race condition while examining per-relation frozen-XID values (Noah Misch)\n          VACUUM's computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another VACUUM.",
      "sinceVersion": "13.15",
      "contributor": "Noah Misch"
    },
    {
      "title": "Disallow converting a table to a view within an outer SQL command that is using that table",
      "description": "Disallow converting a table to a view within an outer SQL command that is using that table (Tom Lane)\n          This avoids possible crashes.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level (Tom Lane)\n          In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to UNION ALL trees that have constant outputs for the join column in some SELECT arms.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "Avoid use of already-freed data while planning partition-wise joins under GEQO (Tom Lane)\n          This would typically end in a crash or unexpected error message.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages",
      "description": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages (David Rowley)",
      "sinceVersion": "13.15",
      "contributor": "David Rowley"
    },
    {
      "title": "Be more careful with RECORD-returning functions in `FROM`",
      "description": "Be more careful with RECORD-returning functions in `FROM` (Tom Lane)\n          The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "Fix confusion about the return rowtype of SQL-language procedures (Tom Lane)\n          A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add protective stack depth checks to some recursive functions",
      "description": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin)",
      "sinceVersion": "13.15",
      "contributor": "Egor Chindyaskin"
    },
    {
      "title": "Detect integer overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect integer overflow when adding or subtracting an interval to/from a timestamp (Joseph Koshakow)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "13.15",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Avoid race condition in `pg_get_expr",
      "description": "Avoid race condition in `pg_get_expr()()` (Tom Lane)\n          If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Fix detection of old transaction IDs in XID status functions (Karina Litskevich)\n          Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()()` or `txid_status()()`.",
      "sinceVersion": "13.15",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait",
      "description": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait()` (Etsuro Fujita)",
      "sinceVersion": "13.15",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Throw an error if an index is accessed while it is being reindexed (Tom Lane)\n          Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB",
      "description": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas)",
      "sinceVersion": "13.15",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "Disconnect if a new server session's client socket cannot be put into non-blocking mode (Heikki Linnakangas)\n          It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "sinceVersion": "13.15",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "Fix inadequate error reporting with OpenSSL 3.0.0 and later (Heikki Linnakangas, Tom Lane)\n          System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "sinceVersion": "13.15",
      "contributor": "Heikki Linnakangas, Tom Lane"
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain",
      "description": "Avoid concurrent calls to `bindtextdomain()()` in libpq and ecpglib (Tom Lane)\n          Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line",
      "description": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane)",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings",
      "description": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane)",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc",
      "description": "Ensure that the string result of ecpg's `intoasc()()` function is correctly zero-terminated (Oleg Tselebrovskiy)",
      "sinceVersion": "13.15",
      "contributor": "Oleg Tselebrovskiy"
    },
    {
      "title": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords",
      "description": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords (Daniel Gustafsson, Álvaro Herrera)",
      "sinceVersion": "13.15",
      "contributor": "Daniel Gustafsson, Álvaro Herrera"
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments",
      "description": "Fix PL/pgSQL's parsing of single-line comments (`--`-style comments) following expressions (Erik Wienhold, Tom Lane)\n          This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL CASE statement.",
      "sinceVersion": "13.15",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "In contrib/amcheck, don't report false match failures due to short- versus long-header values",
      "description": "In contrib/amcheck, don't report false match failures due to short- versus long-header values (Andrey Borodin, Michael Zhilin)\n          A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "sinceVersion": "13.15",
      "contributor": "Andrey Borodin, Michael Zhilin"
    },
    {
      "title": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant",
      "description": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant (David Rowley)\n          This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position `N` is not in select list” errors.",
      "sinceVersion": "13.15",
      "contributor": "David Rowley"
    },
    {
      "title": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC`",
      "description": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC` (Tom Lane)\n          This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "sinceVersion": "13.15",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2",
      "description": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval)",
      "sinceVersion": "13.15",
      "contributor": "Dmitry Koval"
    },
    {
      "title": "Fix incompatibility with LLVM 18",
      "description": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "13.15",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Allow `make check` to work with the musl C library",
      "description": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane)",
      "sinceVersion": "13.15",
      "contributor": "Thomas Munro, Bruce Momjian, Tom Lane"
    },
    {
      "title": "Prevent unauthorized code execution during pg_dump",
      "description": "Prevent unauthorized code execution during pg_dump (Masahiko Sawada)\n          An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg_dump session with the privileges of the role running pg_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter restrict_nonsystem_relation_kind that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg_dump to set it when available. Note that the attack is prevented only if both pg_dump and the server it is dumping from are new enough to have this fix.\n          The PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "sinceVersion": "13.16",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children",
      "description": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera)",
      "sinceVersion": "13.16",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints",
      "description": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints (Álvaro Herrera, Tender Wang)\n          When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect coninhcount value. This would cause trouble during any further manipulations of that constraint.",
      "sinceVersion": "13.16",
      "contributor": "Álvaro Herrera, Tender Wang"
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "Fix handling of polymorphic output arguments for procedures (Tom Lane)\n          The SQL CALL statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But CALL in PL/pgSQL worked correctly.)",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix behavior of stable functions called from a CALL statement's argument list",
      "description": "Fix behavior of stable functions called from a CALL statement's argument list (Tom Lane)\n          If the CALL is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect integer overflow in money calculations",
      "description": "Detect integer overflow in money calculations (Joseph Koshakow)\n          None of the arithmetic functions for the money type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "sinceVersion": "13.16",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round",
      "description": "Fix over-aggressive clamping of the scale argument in `round(numeric)()` and `trunc(numeric)()` (Dean Rasheed)\n          These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type numeric.",
      "sinceVersion": "13.16",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent `pg_sequence_last_value",
      "description": "Prevent `pg_sequence_last_value()()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions (Nathan Bossart)\n          Make it return NULL in these cases instead of throwing an error.",
      "sinceVersion": "13.16",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery",
      "description": "Fix parsing of ignored operators in `websearch_to_tsquery()()` (Tom Lane)\n          Per the manual, punctuation in the input of `websearch_to_tsquery()()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Detect another integer overflow case while computing new array dimensions (Joseph Koshakow)\n          Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "sinceVersion": "13.16",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields (Noah Misch)\n          An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the pg_database catalog, so the effects are narrow, but misbehavior is possible.",
      "sinceVersion": "13.16",
      "contributor": "Noah Misch"
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT` (Tom Lane)\n          If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number `N` not found in view targetlist”.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Avoid reporting an unhelpful internal error for incorrect recursive queries (Tom Lane)\n          Rearrange the order of error checks so that we throw an on-point error when a WITH RECURSIVE query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "Don't throw an error if a queued `AFTER` trigger no longer exists (Tom Lane)\n          It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger `NNNN`”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped",
      "description": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped (Tom Lane)\n          If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg_dump dumps for that relation.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates (Tom Lane)\n          If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Refuse to modify a temporary table of another session with `ALTER TABLE` (Tom Lane)\n          Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN",
      "description": "Fix failure to recalculate sub-queries generated from `MIN()()` or `MAX()()` aggregates (Tom Lane)\n          In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "Avoid crashing when a JIT-inlined backend function throws an error (Tom Lane)\n          The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Cope with behavioral changes in libxml2 version 2.13.x (Erik Wienhold, Tom Lane)\n          Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "sinceVersion": "13.16",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "Fix handling of subtransactions of prepared transactions when starting a hot standby server (Heikki Linnakangas)\n          When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "sinceVersion": "13.16",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "Prevent incorrect initialization of logical replication slots (Masahiko Sawada)\n          In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "sinceVersion": "13.16",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "Avoid memory leakage after servicing a notify or sinval interrupt (Tom Lane)\n          The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Avoid possibly missing end-of-input events on Windows sockets (Thomas Munro)\n          Windows reports an FD_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "sinceVersion": "13.16",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix buffer overread in JSON parse error reports for incomplete byte sequences",
      "description": "Fix buffer overread in JSON parse error reports for incomplete byte sequences (Jacob Champion)\n          It was possible to walk off the end of the input buffer by a few bytes when the last bytes comprise an incomplete multi-byte character. While usually harmless, in principle this could cause a crash.",
      "sinceVersion": "13.16",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "Disable creation of stateful TLS session tickets by OpenSSL (Daniel Gustafsson)\n          This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "sinceVersion": "13.16",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "When replanning a PL/pgSQL “simple expression”, check it's still simple (Tom Lane)\n          Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incompatibility between PL/Perl and Perl 5.40",
      "description": "Fix incompatibility between PL/Perl and Perl 5.40 (Andrew Dunstan)",
      "sinceVersion": "13.16",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix recursive RECORD-returning PL/Python functions",
      "description": "Fix recursive RECORD-returning PL/Python functions (Tom Lane)\n          If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call (Tom Lane)\n          If a PL/Python-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple (Erik Wienhold, Tom Lane)\n          Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "sinceVersion": "13.16",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror",
      "description": "Avoid non-thread-safe usage of `strerror()()` in libpq (Peter Eisentraut)\n          Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "sinceVersion": "13.16",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Ensure that `pg_restore` -l reports dependent TOC entries correctly",
      "description": "Ensure that `pg_restore` -l reports dependent TOC entries correctly (Tom Lane)\n          If -l was specified together with selective-restore options such as -n or -N, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/postgres_fdw, do not send `FETCH FIRST WITH TIES` clauses to the remote server",
      "description": "In contrib/postgres_fdw, do not send `FETCH FIRST WITH TIES` clauses to the remote server (Japin Li)\n          The remote server might not implement this clause, or might interpret it differently than we would locally, so don't risk attempting remote execution.",
      "sinceVersion": "13.16",
      "contributor": "Japin Li"
    },
    {
      "title": "Avoid clashing with system-provided &lt;regex.h&gt; headers",
      "description": "Avoid clashing with system-provided &lt;regex.h&gt; headers (Thomas Munro)\n          This fixes a compilation failure on macOS version 15 and up.",
      "sinceVersion": "13.16",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index",
      "description": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane)",
      "sinceVersion": "13.16",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix recently-introduced race condition in LISTEN/NOTIFY queue handling",
      "description": "Fix recently-introduced race condition in LISTEN/NOTIFY queue handling (Tom Lane)\n          A newly-listening backend could attempt to read SLRU pages that were in process of being truncated, possibly causing an error.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix integer-overflow cases in `substring",
      "description": "Fix integer-overflow cases in `substring()()` functions (Tom Lane, Pavel Stehule)\n          If the specified starting index and length overflow an integer when added together, `substring()()` misbehaved, either throwing a bogus “negative substring length” error for a case that should succeed, or failing to complain that a negative length is negative (and instead returning the whole string, in most cases).",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane, Pavel Stehule"
    },
    {
      "title": "Fix information leakage in constraint-violation error messages",
      "description": "Fix information leakage in constraint-violation error messages (Heikki Linnakangas)\n          If an UPDATE command attempts to move a row to a different partition but finds that it violates some constraint on the new partition, and the columns in that partition are in different physical positions than in the parent table, the error message could reveal the contents of columns that the user does not have `SELECT` privilege on. (CVE-2021-3393)",
      "sinceVersion": "13.2",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix incorrect detection of concurrent page splits while inserting into a GiST index",
      "description": "Fix incorrect detection of concurrent page splits while inserting into a GiST index (Heikki Linnakangas)\n          Concurrent insertions could lead to a corrupt index with entries placed in the wrong pages. It's recommended to reindex any GiST index that's been subject to concurrent insertions.",
      "sinceVersion": "13.2",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix CREATE INDEX CONCURRENTLY to wait for concurrent prepared transactions",
      "description": "Fix CREATE INDEX CONCURRENTLY to wait for concurrent prepared transactions (Andrey Borodin)\n          At the point where CREATE INDEX CONCURRENTLY waits for all concurrent transactions to complete so that it can see rows they inserted, it must also wait for all prepared transactions to complete, for the same reason. Its failure to do so meant that rows inserted by prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. In installations that have enabled prepared transactions (max_prepared_transactions &gt; 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "sinceVersion": "13.2",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Avoid crash when trying to rescan an aggregation plan node that has both hashed and sorted grouping sets",
      "description": "Avoid crash when trying to rescan an aggregation plan node that has both hashed and sorted grouping sets (Jeff Davis)",
      "sinceVersion": "13.2",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Fix possible incorrect query results when a hash aggregation node spills some tuples to disk",
      "description": "Fix possible incorrect query results when a hash aggregation node spills some tuples to disk (Tom Lane)\n          It was possible for aggregation grouping values to be replaced by nulls when the tuples are read back in, leading to wrong answers.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge case in incremental sort",
      "description": "Fix edge case in incremental sort (Neil Chen)\n          If the last tuple of a sort batch chanced to be the first tuple of the next group of already-sorted tuples, the code did the wrong thing. This could lead to “retrieved too many tuples in a bounded sort” error messages, or to silently-wrong sorting results.",
      "sinceVersion": "13.2",
      "contributor": "Neil Chen"
    },
    {
      "title": "Avoid crash when a `CALL` or `DO` statement that performs a transaction rollback is executed via extended query protocol",
      "description": "Avoid crash when a `CALL` or `DO` statement that performs a transaction rollback is executed via extended query protocol (Thomas Munro, Tom Lane)\n          In PostgreSQL 13, this case reliably caused a null-pointer dereference. In earlier versions the bug seems to have no visible symptoms, but it's not quite clear that it could never cause a problem.",
      "sinceVersion": "13.2",
      "contributor": "Thomas Munro, Tom Lane"
    },
    {
      "title": "Avoid unnecessary errors with `BEFORE UPDATE` triggers on partitioned tables",
      "description": "Avoid unnecessary errors with `BEFORE UPDATE` triggers on partitioned tables (Álvaro Herrera)\n          A `BEFORE UPDATE FOR EACH ROW` trigger that modified the row in any way prevented UPDATE from moving the row to another partition when needed; but there is no longer any reason for this restriction.",
      "sinceVersion": "13.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix partition pruning logic to handle asymmetric hash partition sets",
      "description": "Fix partition pruning logic to handle asymmetric hash partition sets (Tom Lane)\n          If a hash-partitioned table has unequally-sized partitions (that is, varying modulus values), or it lacks partitions for some remainder values, then the planner's pruning logic could mistakenly conclude that some partitions don't need to be scanned, leading to failure to find rows that the query should find.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node",
      "description": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node (Tom Lane)\n          This case is unsupported (in general, a cursor using `ORDER BY` is not guaranteed to be simply updatable); but the code previously did not reject it, and could silently give false matches.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node",
      "description": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node (David Geier)",
      "sinceVersion": "13.2",
      "contributor": "David Geier"
    },
    {
      "title": "Fix planner's mishandling of placeholders whose evaluation should be delayed by an outer join",
      "description": "Fix planner's mishandling of placeholders whose evaluation should be delayed by an outer join (Tom Lane)\n          This occurs in particular with trivial subqueries containing lateral references to outer-join outputs. The mistake could result in a malformed plan. The known cases trigger a “failed to assign all NestLoopParams to plan nodes” error, but other symptoms may be possible.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner's handling of placeholders during removal of useless RESULT RTEs",
      "description": "Fix planner's handling of placeholders during removal of useless RESULT RTEs (Tom Lane)\n          This oversight could lead to “no relation entry for relid `N`” planner errors.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level",
      "description": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level (Tom Lane)\n          This oversight could lead to “failed to build any `N`-way joins” planner errors.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Consider unsorted subpaths when planning a Gather Merge operation",
      "description": "Consider unsorted subpaths when planning a Gather Merge operation (James Coleman)\n          It's possible to use such a path by adding an explicit Sort node, and in some cases that gives rise to a superior plan.",
      "sinceVersion": "13.2",
      "contributor": "James Coleman"
    },
    {
      "title": "Do not consider `ORDER BY` expressions involving parallel-restricted functions or set-returning functions when trying to parallelize sorts",
      "description": "Do not consider `ORDER BY` expressions involving parallel-restricted functions or set-returning functions when trying to parallelize sorts (James Coleman)\n          Such cases cannot safely be pushed into worker processes, but the incremental sort feature accidentally made us consider them.",
      "sinceVersion": "13.2",
      "contributor": "James Coleman"
    },
    {
      "title": "Be more careful about whether index AMs support mark/restore",
      "description": "Be more careful about whether index AMs support mark/restore (Andrew Gierth)\n          This prevents errors about missing support functions in rare edge cases.",
      "sinceVersion": "13.2",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Fix overestimate of the amount of shared memory needed for parallel queries",
      "description": "Fix overestimate of the amount of shared memory needed for parallel queries (Takayuki Tsunakawa)",
      "sinceVersion": "13.2",
      "contributor": "Takayuki Tsunakawa"
    },
    {
      "title": "Fix ALTER DEFAULT PRIVILEGES to handle duplicated arguments safely",
      "description": "Fix ALTER DEFAULT PRIVILEGES to handle duplicated arguments safely (Michael Paquier)\n          Duplicate role or schema names within the same command could lead to “tuple already updated by self” errors or unique-constraint violations.",
      "sinceVersion": "13.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Flush ACL-related caches when pg_authid changes",
      "description": "Flush ACL-related caches when pg_authid changes (Noah Misch)\n          This change ensures that permissions-related decisions will promptly reflect the results of ALTER ROLE ... [NO] INHERIT.",
      "sinceVersion": "13.2",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix failure to detect “snapshot too old” conditions in tables rewritten in the current transaction",
      "description": "Fix failure to detect “snapshot too old” conditions in tables rewritten in the current transaction (Kyotaro Horiguchi, Noah Misch)\n          This is only a hazard when wal_level is set to `minimal` and the rewrite is performed by ALTER TABLE SET TABLESPACE.",
      "sinceVersion": "13.2",
      "contributor": "Kyotaro Horiguchi, Noah Misch"
    },
    {
      "title": "Fix spurious failure of CREATE PUBLICATION when applied to a table created or rewritten in the current transaction",
      "description": "Fix spurious failure of CREATE PUBLICATION when applied to a table created or rewritten in the current transaction (Kyotaro Horiguchi)\n          This is only a hazard when wal_level is set to `minimal`.",
      "sinceVersion": "13.2",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Prevent misprocessing of ambiguous CREATE TABLE LIKE clauses",
      "description": "Prevent misprocessing of ambiguous CREATE TABLE LIKE clauses (Tom Lane)\n          A `LIKE` clause is re-examined after initial creation of the new table, to handle importation of indexes and such. It was possible for this re-examination to find a different table of the same name, causing unexpected behavior; one example is where the new table is a temporary table of the same name as the `LIKE` target.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rearrange order of operations in CREATE TABLE LIKE so that indexes are cloned before building foreign key constraints",
      "description": "Rearrange order of operations in CREATE TABLE LIKE so that indexes are cloned before building foreign key constraints (Tom Lane)\n          This fixes the case where a self-referential foreign key constraint declared in the outer CREATE TABLE depends on an index that's coming from the `LIKE` clause.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow CREATE STATISTICS on system catalogs",
      "description": "Disallow CREATE STATISTICS on system catalogs (Tomas Vondra)",
      "sinceVersion": "13.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Disallow converting an inheritance child table to a view",
      "description": "Disallow converting an inheritance child table to a view (Tom Lane)",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that disk space allocated for a dropped relation is released promptly at commit",
      "description": "Ensure that disk space allocated for a dropped relation is released promptly at commit (Thomas Munro)\n          Previously, if the dropped relation spanned multiple 1GB segments, only the first segment was truncated immediately. Other segments were simply unlinked, which doesn't authorize the kernel to release the storage so long as any other backends still have the files open.",
      "sinceVersion": "13.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Prevent dropping a tablespace that is referenced by a partitioned relation, but is not used for any actual storage",
      "description": "Prevent dropping a tablespace that is referenced by a partitioned relation, but is not used for any actual storage (Álvaro Herrera)\n          Previously this was allowed, but subsequent operations on the partitioned relation would fail.",
      "sinceVersion": "13.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix progress reporting for CLUSTER",
      "description": "Fix progress reporting for CLUSTER (Matthias van de Meent)",
      "sinceVersion": "13.2",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Fix handling of backslash-escaped multibyte characters in COPY FROM",
      "description": "Fix handling of backslash-escaped multibyte characters in COPY FROM (Heikki Linnakangas)\n          A backslash followed by a multibyte character was not handled correctly. In some client character encodings, this could lead to misinterpreting part of a multibyte character as a field separator or end-of-copy-data marker.",
      "sinceVersion": "13.2",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid preallocating executor hash tables in EXPLAIN without `ANALYZE`",
      "description": "Avoid preallocating executor hash tables in EXPLAIN without `ANALYZE` (Alexey Bashtanov)",
      "sinceVersion": "13.2",
      "contributor": "Alexey Bashtanov"
    },
    {
      "title": "Allow the jsonb concatenation operator to handle all combinations of JSON data types",
      "description": "Allow the jsonb concatenation operator to handle all combinations of JSON data types (Tom Lane)\n          We can concatenate two JSON objects or two JSON arrays. Handle other cases by wrapping non-array inputs in one-element arrays, then performing an array concatenation. Previously, some combinations of inputs followed this rule but others arbitrarily threw an error.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression",
      "description": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression (Tom Lane)\n          This error could cause the quantifier to act non-greedy, that is behave like a `*?` quantifier would do in full regular expressions.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix numeric `power",
      "description": "Fix numeric `power()()` for the case where the exponent is exactly `INT_MIN` (-2147483648) (Dean Rasheed)\n          Previously, a result with no significant digits was produced.",
      "sinceVersion": "13.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log",
      "description": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log (Noah Misch)\n          The wraparound point typically falls in the middle of a page, which must be rounded off to a page boundary, and that was not done correctly. No issue could arise unless an installation had gotten to within one page of SLRU overflow, which is unlikely in a properly-functioning system. If this did happen, it would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "sinceVersion": "13.2",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix WAL-reading logic to handle timeline switches correctly",
      "description": "Fix WAL-reading logic to handle timeline switches correctly (Kyotaro Horiguchi, Fujii Masao)\n          Previously, if WAL archiving is enabled, a standby could fail to follow a primary running on a newer timeline, with errors like “requested WAL segment has already been removed”.",
      "sinceVersion": "13.2",
      "contributor": "Kyotaro Horiguchi, Fujii Masao"
    },
    {
      "title": "Fix memory leak in walsender processes while sending new snapshots for logical decoding",
      "description": "Fix memory leak in walsender processes while sending new snapshots for logical decoding (Amit Kapila)",
      "sinceVersion": "13.2",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Fix relation cache leak in walsender processes while sending row changes via the root of a partitioned relation during logical replication",
      "description": "Fix relation cache leak in walsender processes while sending row changes via the root of a partitioned relation during logical replication (Amit Langote, Mark Zhao)",
      "sinceVersion": "13.2",
      "contributor": "Amit Langote, Mark Zhao"
    },
    {
      "title": "Fix walsender to accept additional commands after terminating replication",
      "description": "Fix walsender to accept additional commands after terminating replication (Jeff Davis)",
      "sinceVersion": "13.2",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Ensure detection of deadlocks between hot standby backends and the startup",
      "description": "Ensure detection of deadlocks between hot standby backends and the startup (WAL-application) process (Fujii Masao)\n          The startup process did not run the deadlock detection code, so that in situations where the startup process is last to join a circular wait situation, the deadlock might never be recognized.",
      "sinceVersion": "13.2",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix possible failure to detect recovery conflicts while deleting an index entry that references a HOT chain",
      "description": "Fix possible failure to detect recovery conflicts while deleting an index entry that references a HOT chain (Peter Geoghegan)\n          The code failed to traverse the HOT chain and might thus compute a too-old XID horizon, which could lead to incorrect conflict processing in hot standby. The practical impact of this bug is limited; in most cases the correct XID horizon would be found anyway from nearby operations.",
      "sinceVersion": "13.2",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that a nonempty value of krb_server_keyfile always overrides any setting of KRB5_KTNAME in the server's environment",
      "description": "Ensure that a nonempty value of krb_server_keyfile always overrides any setting of KRB5_KTNAME in the server's environment (Tom Lane)\n          Previously, which setting took precedence depended on whether the client requests GSS encryption.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "In server log messages about failing to match connections to pg_hba.conf entries, include details about whether GSS encryption has been activated",
      "description": "In server log messages about failing to match connections to pg_hba.conf entries, include details about whether GSS encryption has been activated (Kyotaro Horiguchi, Tom Lane)\n          This is relevant data if `hostgssenc` or `hostnogssenc` entries exist.",
      "sinceVersion": "13.2",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "Fix assorted issues in server's support for GSS encryption",
      "description": "Fix assorted issues in server's support for GSS encryption (Tom Lane)\n          Remove pointless restriction that only GSS authentication can be used on a GSS-encrypted connection. Add GSS encryption information to connection-authorized log messages. Include GSS-related space when computing the required size of shared memory (this omission could have caused problems with very high max_connections settings). Avoid possible infinite recursion when reporting an unrecoverable GSS encryption error.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence",
      "description": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence (Tom Lane)\n          Previously, there was a race condition whereby a child process that had requested a background worker just before shutdown could wait indefinitely, preventing shutdown from completing.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix portability problem in parsing of recovery_target_xid values",
      "description": "Fix portability problem in parsing of recovery_target_xid values (Michael Paquier)\n          The target XID is potentially 64 bits wide, but it was parsed with `strtoul()()`, causing misbehavior on platforms where long is 32 bits (such as Windows).",
      "sinceVersion": "13.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid trying to use parallel index build in a standalone backend",
      "description": "Avoid trying to use parallel index build in a standalone backend (Yulin Pei)",
      "sinceVersion": "13.2",
      "contributor": "Yulin Pei"
    },
    {
      "title": "Allow index AMs to support included columns without necessarily supporting multiple key columns",
      "description": "Allow index AMs to support included columns without necessarily supporting multiple key columns (Tom Lane)",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "While taking a base backup, avoid executing any SHA256 code if a backup manifest is not needed",
      "description": "While taking a base backup, avoid executing any SHA256 code if a backup manifest is not needed (Michael Paquier)\n          When using OpenSSL operating in FIPS mode, SHA256 hashing is rejected, leading to an error. This change makes it possible to take a base backup on such a platform, so long as --no-manifest is specified.",
      "sinceVersion": "13.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid assertion failure during parallel aggregation of an aggregate with a non-strict deserialization function",
      "description": "Avoid assertion failure during parallel aggregation of an aggregate with a non-strict deserialization function (Andrew Gierth)\n          No such aggregate functions exist in core PostgreSQL, but some extensions such as PostGIS provide some. The mistake is harmless anyway in a non-assert build.",
      "sinceVersion": "13.2",
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Avoid assertion failure in `pg_get_functiondef",
      "description": "Avoid assertion failure in `pg_get_functiondef()()` when examining a function with a `TRANSFORM` option (Tom Lane)",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data structure misallocation in PL/pgSQL's CALL statement",
      "description": "Fix data structure misallocation in PL/pgSQL's CALL statement (Tom Lane)\n          A CALL in a PL/pgSQL procedure, to another procedure that has OUT parameters, would fail if the called procedure did a COMMIT or ROLLBACK.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "In libpq, do not skip trying SSL after GSS encryption",
      "description": "In libpq, do not skip trying SSL after GSS encryption (Tom Lane)\n          If we successfully made a GSS-encrypted connection, but then failed during authentication, we would fall back to an unencrypted connection rather than next trying an SSL-encrypted connection. This could lead to unexpected connection failure, or to silently getting an unencrypted connection where an encrypted one is expected. Fortunately, GSS encryption could only succeed if both client and server hold valid tickets in the same Kerberos infrastructure. It seems unlikely for that to be true in an environment that requires SSL encryption instead.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq's `PQconndefaults",
      "description": "Make libpq's `PQconndefaults()()` function report the correct default value for channel_binding (Daniele Varrazzo)",
      "sinceVersion": "13.2",
      "contributor": "Daniele Varrazzo"
    },
    {
      "title": "In psql, re-allow including a password in a `connection_string` argument of a \\connect command",
      "description": "In psql, re-allow including a password in a `connection_string` argument of a \\connect command (Tom Lane)\n          This used to work, but a recent bug fix caused the password to be ignored (resulting in prompting for a password).",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql's \\d commands, don't truncate the display of column default values",
      "description": "In psql's \\d commands, don't truncate the display of column default values (Tom Lane)\n          Formerly, they were arbitrarily truncated at 128 characters.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix assorted bugs in psql's \\help command",
      "description": "Fix assorted bugs in psql's \\help command (Kyotaro Horiguchi, Tom Lane)\n          \\help with two argument words failed to find a command description using only the first word, for example `\\help reset all` should show the help for RESET but did not. Also, \\help often failed to invoke the pager when it should. It also leaked memory.",
      "sinceVersion": "13.2",
      "contributor": "Kyotaro Horiguchi, Tom Lane"
    },
    {
      "title": "Fix pg_dump's dumping of inherited generated columns",
      "description": "Fix pg_dump's dumping of inherited generated columns (Peter Eisentraut)\n          The previous behavior resulted in (harmless) errors during restore.",
      "sinceVersion": "13.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "In pg_dump, ensure that the restore script runs ALTER PUBLICATION ADD TABLE commands as the owner of the publication, and similarly runs ALTER INDEX ATTACH PARTITION commands as the owner of the partitioned index",
      "description": "In pg_dump, ensure that the restore script runs ALTER PUBLICATION ADD TABLE commands as the owner of the publication, and similarly runs ALTER INDEX ATTACH PARTITION commands as the owner of the partitioned index (Tom Lane)\n          Previously, these commands would be run by the role that started the restore script; which will usually work, but in corner cases that role might not have adequate permissions.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump to handle `WITH GRANT OPTION` in an extension's initial privileges",
      "description": "Fix pg_dump to handle `WITH GRANT OPTION` in an extension's initial privileges (Noah Misch)\n          If an extension's script creates an object and grants privileges on it with grant option, then later the user revokes such privileges, pg_dump would generate incorrect SQL for reproducing the situation. (Few if any extensions do this today.)",
      "sinceVersion": "13.2",
      "contributor": "Noah Misch"
    },
    {
      "title": "In pg_rewind, ensure that all WAL is accounted for when rewinding a standby server",
      "description": "In pg_rewind, ensure that all WAL is accounted for when rewinding a standby server (Ian Barwick, Heikki Linnakangas)",
      "sinceVersion": "13.2",
      "contributor": "Ian Barwick, Heikki Linnakangas"
    },
    {
      "title": "In pgbench, disallow a digit as the first character of a variable name",
      "description": "In pgbench, disallow a digit as the first character of a variable name (Fabien Coelho)\n          This prevents trying to substitute variables into timestamp literal values, which may contain strings like `12:34`.",
      "sinceVersion": "13.2",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Report the correct database name in connection failure error messages from some client programs",
      "description": "Report the correct database name in connection failure error messages from some client programs (Álvaro Herrera)\n          If the database name was defaulted rather than given on the command line, pg_dumpall, pgbench, oid2name, and vacuumlo would produce misleading error messages after a connection failure.",
      "sinceVersion": "13.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix memory leak in contrib/auto_explain",
      "description": "Fix memory leak in contrib/auto_explain (Japin Li)\n          Memory consumed while producing the `EXPLAIN` output was not freed until the end of the current transaction (for a top-level statement) or the end of the surrounding statement (for a nested statement). This was particularly a problem with log_nested_statements enabled.",
      "sinceVersion": "13.2",
      "contributor": "Japin Li"
    },
    {
      "title": "In contrib/postgres_fdw, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped",
      "description": "In contrib/postgres_fdw, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped (Bharath Rupireddy)\n          Open connections that depend on a dropped user mapping or foreign server can no longer be referenced, but formerly they were kept around anyway for the duration of the local session.",
      "sinceVersion": "13.2",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Fix faulty assertion in contrib/postgres_fdw",
      "description": "Fix faulty assertion in contrib/postgres_fdw (Etsuro Fujita)",
      "sinceVersion": "13.2",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "In contrib/pgcrypto, check for error returns from OpenSSL's EVP functions",
      "description": "In contrib/pgcrypto, check for error returns from OpenSSL's EVP functions (Michael Paquier)\n          We do not really expect errors here, but this change silences warnings from static analysis tools.",
      "sinceVersion": "13.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Make contrib/pg_prewarm more robust when the cluster is shut down before prewarming is complete",
      "description": "Make contrib/pg_prewarm more robust when the cluster is shut down before prewarming is complete (Tom Lane)\n          Previously, autoprewarm would rewrite its status file with only the block numbers that it had managed to load so far, thus perhaps largely disabling the prewarm functionality in the next startup. Instead, suppress status file updates until the initial loading pass is complete.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/pg_trgm's GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items",
      "description": "In contrib/pg_trgm's GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items (Andrew Gierth, Alexander Korotkov)",
      "sinceVersion": "13.2",
      "contributor": "Andrew Gierth, Alexander Korotkov"
    },
    {
      "title": "Fix miscalculation of timeouts in contrib/pg_prewarm and contrib/postgres_fdw",
      "description": "Fix miscalculation of timeouts in contrib/pg_prewarm and contrib/postgres_fdw (Alexey Kondratov, Tom Lane)\n          The main loop in contrib/pg_prewarm's autoprewarm parent process underestimated its desired sleep time by a factor of 1000, causing it to consume much more CPU than intended. When waiting for a result from a remote server, contrib/postgres_fdw overestimated the desired timeout by a factor of 1000 (though this error had been mitigated by imposing a clamp to 60 seconds).\n          Both of these errors stemmed from incorrectly converting seconds-and-microseconds to milliseconds. Introduce a new API `TimestampDifferenceMilliseconds()()` to make it easier to get this right in the future.",
      "sinceVersion": "13.2",
      "contributor": "Alexey Kondratov, Tom Lane"
    },
    {
      "title": "Improve configure's heuristics for selecting PG_SYSROOT on macOS",
      "description": "Improve configure's heuristics for selecting PG_SYSROOT on macOS (Tom Lane)\n          The new method is more likely to produce desirable results when Xcode is newer than the underlying operating system. Choosing a sysroot that does not match the OS version may result in nonfunctional executables.",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "While building on macOS, specify -isysroot in link steps as well as compile steps",
      "description": "While building on macOS, specify -isysroot in link steps as well as compile steps (James Hilliard)\n          This likewise improves the results when Xcode is out of sync with the operating system.",
      "sinceVersion": "13.2",
      "contributor": "James Hilliard"
    },
    {
      "title": "Fix JIT compilation to be compatible with LLVM 11 and LLVM 12",
      "description": "Fix JIT compilation to be compatible with LLVM 11 and LLVM 12 (Andres Freund)",
      "sinceVersion": "13.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix potential mishandling of references to boolean variables in JIT expression compilation",
      "description": "Fix potential mishandling of references to boolean variables in JIT expression compilation (Andres Freund)\n          No field reports attributable to this have been seen, but it seems likely that it could cause problems on some architectures.",
      "sinceVersion": "13.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix compile failure with ICU 68 and later",
      "description": "Fix compile failure with ICU 68 and later (Tom Lane)",
      "sinceVersion": "13.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2021a for DST law changes in Russia",
      "description": "Update time zone data files to tzdata release 2021a for DST law changes in Russia (Volgograd zone) and South Sudan, plus historical corrections for Australia, Bahamas, Belize, Bermuda, Ghana, Israel, Kenya, Nigeria, Palestine, Seychelles, and Vanuatu.\n          Notably, the Australia/Currie zone has been corrected to the point where it is identical to Australia/Hobart.",
      "sinceVersion": "13.2",
      "contributor": null
    },
    {
      "title": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists",
      "description": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists (Tom Lane)\n          If the `UPDATE` list contains any multi-column sub-selects (which give rise to junk columns in addition to the results proper), the `UPDATE` path would end up storing tuples that include the values of the extra junk columns. That's fairly harmless in the short run, but if new columns are added to the table then the values would become accessible, possibly leading to malfunctions if they don't match the datatypes of the added columns.\n          In addition, in versions supporting cross-partition updates, a cross-partition update triggered by such a case had the reverse problem: the junk columns were removed from the target list, typically causing an immediate crash due to malfunction of the multi-column sub-select mechanism. (CVE-2021-32028)",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump's dumping of generated columns in partitioned tables",
      "description": "Fix pg_dump's dumping of generated columns in partitioned tables (Peter Eisentraut)\n          A fix introduced in the previous minor release should not be applied to partitioned tables, only traditionally-inherited tables.",
      "sinceVersion": "13.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Prevent integer overflows in array subscripting calculations",
      "description": "Prevent integer overflows in array subscripting calculations (Tom Lane)\n          The array code previously did not complain about cases where an array's lower bound plus length overflows an integer. This resulted in later entries in the array becoming inaccessible (since their subscripts could not be written as integers), but more importantly it confused subsequent assignment operations. This could lead to memory overwrites, with ensuing crashes or unwanted data modifications. (CVE-2021-32027)",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possibly-incorrect computation of UPDATE ... RETURNING outputs for joined cross-partition updates",
      "description": "Fix possibly-incorrect computation of UPDATE ... RETURNING outputs for joined cross-partition updates (Amit Langote, Etsuro Fujita)\n          If an UPDATE for a partitioned table caused a row to be moved to another partition with a physically different row type (for example, one with a different set of dropped columns), computation of `RETURNING` results for that row could produce errors or wrong answers. No error is observed unless the UPDATE involves other tables being joined to the target table. (CVE-2021-32029)",
      "sinceVersion": "13.3",
      "contributor": "Amit Langote, Etsuro Fujita"
    },
    {
      "title": "Fix adjustment of constraint deferrability properties in partitioned tables",
      "description": "Fix adjustment of constraint deferrability properties in partitioned tables (Álvaro Herrera)\n          When applied to a foreign-key constraint of a partitioned table, ALTER TABLE ... ALTER CONSTRAINT failed to adjust the `DEFERRABLE` and/or `INITIALLY DEFERRED` markings of the constraints and triggers of leaf partitions. This led to unexpected behavior of such constraints. After updating to this version, any misbehaving partitioned tables can be fixed by executing a new ALTER command to set the desired properties.\n          This change also disallows applying such an ALTER directly to the constraints of leaf partitions. The only supported case is for the whole partitioning hierarchy to have identical constraint properties, so such ALTERs must be applied at the partition root.",
      "sinceVersion": "13.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "When attaching a child table with ALTER TABLE ... INHERIT, insist that any generated columns in the parent be generated the same way in the child",
      "description": "When attaching a child table with ALTER TABLE ... INHERIT, insist that any generated columns in the parent be generated the same way in the child (Peter Eisentraut)",
      "sinceVersion": "13.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Forbid marking an identity column as nullable",
      "description": "Forbid marking an identity column as nullable (Vik Fearing)\n          `GENERATED ... AS IDENTITY` implies `NOT NULL`, so don't allow it to be combined with an explicit `NULL` specification.",
      "sinceVersion": "13.3",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Allow `ALTER ROLE/DATABASE ... SET` to set the role, session_authorization, and temp_buffers parameters",
      "description": "Allow `ALTER ROLE/DATABASE ... SET` to set the role, session_authorization, and temp_buffers parameters (Tom Lane)\n          Previously, over-eager validity checks might reject these commands, even if the values would have worked when used later. This created a command ordering hazard for dump/reload and upgrade scenarios.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that REINDEX CONCURRENTLY preserves any statistics target that's been set for the index",
      "description": "Ensure that REINDEX CONCURRENTLY preserves any statistics target that's been set for the index (Michael Paquier)",
      "sinceVersion": "13.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix COMMIT AND CHAIN to work correctly when the current transaction has live savepoints",
      "description": "Fix COMMIT AND CHAIN to work correctly when the current transaction has live savepoints (Fujii Masao)",
      "sinceVersion": "13.3",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix list-manipulation bug in `WITH RECURSIVE` processing",
      "description": "Fix list-manipulation bug in `WITH RECURSIVE` processing (Michael Paquier, Tom Lane)\n          Sufficiently deep nesting of `WITH` constructs (at least seven levels) triggered core dumps or incorrect complaints of faulty `WITH` nesting.",
      "sinceVersion": "13.3",
      "contributor": "Michael Paquier, Tom Lane"
    },
    {
      "title": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type",
      "description": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type (Tom Lane)\n          This led to a parse tree in which the `COLLATE` appears to be applied to a non-collatable value. While that normally has no real impact (since `COLLATE` has no effect at runtime), it was possible to construct views that would be rejected during dump/reload.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use-after-free bug in saving tuples for `AFTER` triggers",
      "description": "Fix use-after-free bug in saving tuples for `AFTER` triggers (Amit Langote)\n          This could cause crashes in some situations.",
      "sinceVersion": "13.3",
      "contributor": "Amit Langote"
    },
    {
      "title": "Disallow calling window functions and procedures via the “fast path” wire protocol message",
      "description": "Disallow calling window functions and procedures via the “fast path” wire protocol message (Tom Lane)\n          Only plain functions are supported here. While trying to call an aggregate function failed already, calling a window function would crash, and calling a procedure would work only if the procedure did no transaction control.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Extend `pg_identify_object_as_address",
      "description": "Extend `pg_identify_object_as_address()()` to support event triggers (Joel Jacobson)",
      "sinceVersion": "13.3",
      "contributor": "Joel Jacobson"
    },
    {
      "title": "Fix `to_char",
      "description": "Fix `to_char()()`'s handling of Roman-numeral month format codes with negative intervals (Julien Rouhaud)\n          Previously, such cases would usually cause a crash.",
      "sinceVersion": "13.3",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Check that the argument of `pg_import_system_collations",
      "description": "Check that the argument of `pg_import_system_collations()()` is a valid schema OID (Tom Lane)",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix use of uninitialized value while parsing an `\\{`m`,n`\\} quantifier in a BRE-mode regular expression",
      "description": "Fix use of uninitialized value while parsing an `\\{`m`,n`\\} quantifier in a BRE-mode regular expression (Tom Lane)\n          This error could cause the quantifier to act non-greedy, that is behave like an `{`m`,n`}? quantifier would do in full regular expressions.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “could not find pathkey item to sort” planner errors in some situations where the sort key involves an aggregate or window function",
      "description": "Fix “could not find pathkey item to sort” planner errors in some situations where the sort key involves an aggregate or window function (James Coleman, Tom Lane)",
      "sinceVersion": "13.3",
      "contributor": "James Coleman, Tom Lane"
    },
    {
      "title": "Don't ignore system columns when estimating the number of groups using extended statistics",
      "description": "Don't ignore system columns when estimating the number of groups using extended statistics (Tomas Vondra)\n          This led to strange estimates for queries such as `SELECT ... GROUP BY a, b, ctid`.",
      "sinceVersion": "13.3",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix",
      "description": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix (Tom Lane)\n          This typically led to a `NaN` selectivity value, causing assertion failures or strange planner behavior.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans",
      "description": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans (Tomas Vondra)\n          If the page range size used by a BRIN index isn't a power of two, there were corner cases in which a bitmap scan could try to fetch pages past the actual end of the table, leading to “could not open file” errors.",
      "sinceVersion": "13.3",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix potentially wrong answers from GIN tsvector index searches, when there are many matching tuples",
      "description": "Fix potentially wrong answers from GIN tsvector index searches, when there are many matching tuples (Tom Lane)\n          If the number of index matches became large enough to make the bitmap holding them become lossy (a threshold that depends on work_mem), the code could get confused about whether rechecks are required, allowing rows to be returned that don't actually match the query.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix concurrency issues with WAL segment recycling on Windows",
      "description": "Fix concurrency issues with WAL segment recycling on Windows (Michael Paquier)\n          This reverts a change that caused intermittent “could not rename file ...: Permission denied” log messages. While there were not serious consequences, the log spam was annoying.",
      "sinceVersion": "13.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL",
      "description": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL (Soumyadeep Chakraborty, Jimmy Yih, Kevin Yeap)\n          This error could lead to subsequent WAL records being written under the wrong timeline ID, leading to consistency problems, or even complete failure to be able to restart the server, later on.",
      "sinceVersion": "13.3",
      "contributor": "Soumyadeep Chakraborty, Jimmy Yih, Kevin Yeap"
    },
    {
      "title": "Ensure that locks are released while shutting down a standby server's startup process",
      "description": "Ensure that locks are released while shutting down a standby server's startup process (Fujii Masao)\n          When a standby server is shut down while still in recovery, some locks might be left held. This causes assertion failures in debug builds; it's unclear whether any serious consequence could occur in production builds.",
      "sinceVersion": "13.3",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix crash when a logical replication worker does ALTER SUBSCRIPTION REFRESH",
      "description": "Fix crash when a logical replication worker does ALTER SUBSCRIPTION REFRESH (Peter Smith)\n          The core code won't do this, but a replica trigger could.",
      "sinceVersion": "13.3",
      "contributor": "Peter Smith"
    },
    {
      "title": "Ensure we default to wal_sync_method = `fdatasync` on recent FreeBSD",
      "description": "Ensure we default to wal_sync_method = `fdatasync` on recent FreeBSD (Thomas Munro)\n          FreeBSD 13 supports `open_datasync`, which would normally become the default choice. However, it's unclear whether that is actually an improvement for Postgres, so preserve the existing default for now.",
      "sinceVersion": "13.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Pass the correct trigger OID to object post-alter hooks during ALTER CONSTRAINT",
      "description": "Pass the correct trigger OID to object post-alter hooks during ALTER CONSTRAINT (Álvaro Herrera)\n          When updating trigger properties during ALTER CONSTRAINT, the post-alter hook was told that we are updating a trigger, but the constraint's OID was passed instead of the trigger's.",
      "sinceVersion": "13.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure we finish cleaning up when interrupted while detaching a DSM segment",
      "description": "Ensure we finish cleaning up when interrupted while detaching a DSM segment (Thomas Munro)\n          This error could result in temporary files not being cleaned up promptly after a parallel query.",
      "sinceVersion": "13.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix assorted minor memory leaks in the server",
      "description": "Fix assorted minor memory leaks in the server (Tom Lane, Andres Freund)",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane, Andres Freund"
    },
    {
      "title": "Fix uninitialized variable in walreceiver's statistics in shared memory",
      "description": "Fix uninitialized variable in walreceiver's statistics in shared memory (Fujii Masao)\n          This error was harmless on most platforms, but could cause issues on platforms lacking atomic variables and/or spinlock support.",
      "sinceVersion": "13.3",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Reduce the overhead of dtrace probes for LWLock operations, when dtrace support is compiled in but not active",
      "description": "Reduce the overhead of dtrace probes for LWLock operations, when dtrace support is compiled in but not active (Peter Eisentraut)",
      "sinceVersion": "13.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix failure when a PL/pgSQL DO block makes use of both composite-type variables and transaction control",
      "description": "Fix failure when a PL/pgSQL DO block makes use of both composite-type variables and transaction control (Tom Lane)\n          Previously, such cases led to errors about leaked tuple descriptors.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received",
      "description": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received (Tom Lane)",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "When initdb prints instructions about how to start the server, make the path shown for pg_ctl use backslash separators on Windows",
      "description": "When initdb prints instructions about how to start the server, make the path shown for pg_ctl use backslash separators on Windows (Nitin Jadhav)",
      "sinceVersion": "13.3",
      "contributor": "Nitin Jadhav"
    },
    {
      "title": "Fix psql to restore the previous behavior of `\\connect service=`something``",
      "description": "Fix psql to restore the previous behavior of `\\connect service=`something`` (Tom Lane)\n          A previous bug fix caused environment variables (such as PGPORT) to override entries in the service file in this context. Restore the previous behavior, in which the priority is the other way around.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix psql's `ON_ERROR_ROLLBACK` feature to handle `COMMIT AND CHAIN` commands correctly",
      "description": "Fix psql's `ON_ERROR_ROLLBACK` feature to handle `COMMIT AND CHAIN` commands correctly (Arthur Nascimento)\n          Previously, this case failed with “savepoint \"pg_psql_temporary_savepoint\" does not exist”.",
      "sinceVersion": "13.3",
      "contributor": "Arthur Nascimento"
    },
    {
      "title": "In psql, avoid repeated “could not print result table” failures after the first such error",
      "description": "In psql, avoid repeated “could not print result table” failures after the first such error (Álvaro Herrera)",
      "sinceVersion": "13.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix race condition in detection of file modification by psql's `\\e` and related commands",
      "description": "Fix race condition in detection of file modification by psql's `\\e` and related commands (Laurenz Albe)\n          A very fast typist could fool the code's file-timestamp-based detection of whether the temporary edit file was changed.",
      "sinceVersion": "13.3",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Fix missed file version check in pg_restore",
      "description": "Fix missed file version check in pg_restore (Tom Lane)\n          When reading a custom-format archive from a non-seekable source, pg_restore neglected to check the archive version. If it was fed a newer archive version than it can support, it would fail messily later on.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add some more checks to pg_upgrade for user tables containing non-upgradable data types",
      "description": "Add some more checks to pg_upgrade for user tables containing non-upgradable data types (Tom Lane)\n          Fix detection of some cases where a non-upgradable data type is embedded within a container type (such as an array or range). Also disallow upgrading when user tables contain columns of system-defined composite types, since those types' OIDs are not stable across versions.",
      "sinceVersion": "13.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect progress-reporting calculation in pg_checksums",
      "description": "Fix incorrect progress-reporting calculation in pg_checksums (Shinya Kato)",
      "sinceVersion": "13.3",
      "contributor": "Shinya Kato"
    },
    {
      "title": "Fix pg_waldump to count `XACT` records correctly when generating per-record statistics",
      "description": "Fix pg_waldump to count `XACT` records correctly when generating per-record statistics (Kyotaro Horiguchi)",
      "sinceVersion": "13.3",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix contrib/amcheck to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set",
      "description": "Fix contrib/amcheck to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set (Julien Rouhaud)\n          This is a valid state after `SELECT FOR UPDATE`.",
      "sinceVersion": "13.3",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions",
      "description": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions (Noah Misch)",
      "sinceVersion": "13.3",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix testing of PL/Python for Python 3 on Solaris",
      "description": "Fix testing of PL/Python for Python 3 on Solaris (Noah Misch)",
      "sinceVersion": "13.3",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix mis-planning of repeated application of a projection step",
      "description": "Fix mis-planning of repeated application of a projection step (Tom Lane)\n          The planner could create an incorrect plan in cases where two ProjectionPaths were stacked on top of each other. The only known way to trigger that situation involves parallel sort operations, but there may be other instances. The result would be crashes or incorrect query results. Disclosure of server memory contents is also possible. (CVE-2021-3677)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow SSL renegotiation more completely",
      "description": "Disallow SSL renegotiation more completely (Michael Paquier)\n          SSL renegotiation has been disabled for some time, but the server would still cooperate with a client-initiated renegotiation request. A maliciously crafted renegotiation request could result in a server crash (see OpenSSL issue CVE-2021-3449). Disable the feature altogether on OpenSSL versions that permit doing so, which are 1.1.0h and newer.",
      "sinceVersion": "13.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Restore the Portal-level snapshot after COMMIT or ROLLBACK within a procedure",
      "description": "Restore the Portal-level snapshot after COMMIT or ROLLBACK within a procedure (Tom Lane)\n          This change fixes cases where an attempt to fetch a toasted value immediately after COMMIT/ROLLBACK would fail with errors like “no known snapshots” or “missing chunk number 0 for toast value”.\n          Some extensions may attempt to execute SQL code outside of any Portal. They are responsible for ensuring that an outer snapshot exists before doing so. Previously, not providing a snapshot might work or it might not; now it will consistently fail with “cannot execute SQL without an outer snapshot or portal”.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid misbehavior when persisting the output of a cursor that's reading a non-stable query",
      "description": "Avoid misbehavior when persisting the output of a cursor that's reading a non-stable query (Tom Lane)\n          Previously, we'd always rewind and re-read the whole query result, possibly getting results different from the earlier execution, causing great confusion later. For a NO SCROLL cursor, we can fix this by only storing the not-yet-read portion of the query output, which is sufficient since a NO SCROLL cursor can't be backed up. Cursors with the SCROLL option remain at hazard, but that was already documented to be an unsafe option to use with a non-stable query. Make those documentation warnings stronger.\n          Also force NO SCROLL mode for the implicit cursor used by a PL/pgSQL FOR-over-query loop, to avoid this type of problem when persisting such a cursor during an intra-procedure commit.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject `SELECT ... GROUP BY GROUPING SETS",
      "description": "Reject `SELECT ... GROUP BY GROUPING SETS (()) FOR UPDATE` (Tom Lane)\n          This should be disallowed, just as `FOR UPDATE` with a plain `GROUP BY` is disallowed, but the test for that failed to handle empty grouping sets correctly. The end result would be a null-pointer dereference in the executor.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject cases where a query in `WITH` rewrites to just NOTIFY",
      "description": "Reject cases where a query in `WITH` rewrites to just NOTIFY (Tom Lane)\n          Such cases previously crashed.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "In numeric multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point",
      "description": "In numeric multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point (Dean Rasheed)",
      "sinceVersion": "13.4",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix corner-case errors and loss of precision when raising numeric values to very large powers",
      "description": "Fix corner-case errors and loss of precision when raising numeric values to very large powers (Dean Rasheed)",
      "sinceVersion": "13.4",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix division-by-zero failure in `to_char",
      "description": "Fix division-by-zero failure in `to_char()()` with `EEEE` format and a numeric input value less than 10^(-1001) (Dean Rasheed)",
      "sinceVersion": "13.4",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix `pg_size_pretty",
      "description": "Fix `pg_size_pretty(bigint)()` to round negative values consistently with the way it rounds positive ones (and consistently with the numeric version) (Dean Rasheed, David Rowley)",
      "sinceVersion": "13.4",
      "contributor": "Dean Rasheed, David Rowley"
    },
    {
      "title": "Make `pg_filenode_relation",
      "description": "Make `pg_filenode_relation(0, 0)` return NULL rather than failing (Justin Pryzby)",
      "sinceVersion": "13.4",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Make ALTER EXTENSION lock the extension when adding or removing a member object",
      "description": "Make ALTER EXTENSION lock the extension when adding or removing a member object (Tom Lane)\n          The previous coding allowed ALTER EXTENSION ADD/DROP to occur concurrently with DROP EXTENSION, leading to a crash or corrupt catalog entries.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ALTER SUBSCRIPTION to reject an empty slot name",
      "description": "Fix ALTER SUBSCRIPTION to reject an empty slot name (Japin Li)",
      "sinceVersion": "13.4",
      "contributor": "Japin Li"
    },
    {
      "title": "When cloning a partitioned table's triggers to a new partition, ensure that their enabled status is copied",
      "description": "When cloning a partitioned table's triggers to a new partition, ensure that their enabled status is copied (Álvaro Herrera)",
      "sinceVersion": "13.4",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid alias conflicts in queries generated for REFRESH MATERIALIZED VIEW CONCURRENTLY",
      "description": "Avoid alias conflicts in queries generated for REFRESH MATERIALIZED VIEW CONCURRENTLY (Tom Lane, Bharath Rupireddy)\n          This command failed on materialized views containing columns with certain names, notably mv and newdata.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane, Bharath Rupireddy"
    },
    {
      "title": "Fix PREPARE TRANSACTION to check correctly for conflicting session-lifespan and transaction-lifespan locks",
      "description": "Fix PREPARE TRANSACTION to check correctly for conflicting session-lifespan and transaction-lifespan locks (Tom Lane)\n          A transaction cannot be prepared if it has both session-lifespan and transaction-lifespan locks on the same advisory-lock ID value. This restriction was not fully checked, which could lead to a PANIC during PREPARE TRANSACTION.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior of DROP OWNED BY when the target role is listed more than once in an RLS policy",
      "description": "Fix misbehavior of DROP OWNED BY when the target role is listed more than once in an RLS policy (Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Skip unnecessary error tests when removing a role from an RLS policy during DROP OWNED BY",
      "description": "Skip unnecessary error tests when removing a role from an RLS policy during DROP OWNED BY (Tom Lane)\n          Notably, this fixes some cases where it was necessary to be a superuser to use DROP OWNED BY.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Re-allow old-style Windows locale names in CREATE COLLATION commands",
      "description": "Re-allow old-style Windows locale names in CREATE COLLATION commands (Thomas Munro)\n          Previously we were failing because the operating system can't provide version information for such locales. At some point we may decide to require version information, but no such policy exists yet, so re-allow the case for now.",
      "sinceVersion": "13.4",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Disallow whole-row variables in `GENERATED` expressions",
      "description": "Disallow whole-row variables in `GENERATED` expressions (Tom Lane)\n          Use of a whole-row variable clearly violates the rule that a generated column cannot depend on itself, so such cases have no well-defined behavior. The actual behavior frequently included a crash.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix usage of tableoid in `GENERATED` expressions",
      "description": "Fix usage of tableoid in `GENERATED` expressions (Tom Lane)\n          Some code paths failed to provide a valid value for this system column while evaluating a `GENERATED` expression.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't store a “fast default” when adding a column to a foreign table",
      "description": "Don't store a “fast default” when adding a column to a foreign table (Andrew Dunstan)\n          The fast default is useless since no local heap storage exists for such a table, but it confused subsequent operations. In addition to suppressing creation of such catalog entries in ALTER TABLE commands, adjust the downstream code to cope when one is incorrectly present.",
      "sinceVersion": "13.4",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Allow index state flags to be updated transactionally",
      "description": "Allow index state flags to be updated transactionally (Michael Paquier, Andrey Lepikhov)\n          This avoids failures when dealing with index predicates that aren't really immutable. While that's not considered a supported case, the original reason for using a non-transactional update here is long gone, so we may as well change it.",
      "sinceVersion": "13.4",
      "contributor": "Michael Paquier, Andrey Lepikhov"
    },
    {
      "title": "Avoid corrupting the plan cache entry when CREATE DOMAIN or ALTER DOMAIN appears in a cached plan",
      "description": "Avoid corrupting the plan cache entry when CREATE DOMAIN or ALTER DOMAIN appears in a cached plan (Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make walsenders show their latest replication commands in pg_stat_activity",
      "description": "Make walsenders show their latest replication commands in pg_stat_activity (Tom Lane)\n          Previously, a walsender would show its latest SQL command, which was confusing if it's now doing some replication operation instead. Now we show replication-protocol commands on the same footing as SQL commands.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make pg_settings.pending_restart show as true when the pertinent entry in postgresql.conf has been removed",
      "description": "Make pg_settings.pending_restart show as true when the pertinent entry in postgresql.conf has been removed (Álvaro Herrera)\n          pending_restart correctly showed the case where an entry that cannot be changed without a postmaster restart has been modified, but not where the entry had been removed altogether.",
      "sinceVersion": "13.4",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "On 64-bit Windows, allow the effective value of work_mem times hash_mem_multiplier to exceed 2GB",
      "description": "On 64-bit Windows, allow the effective value of work_mem times hash_mem_multiplier to exceed 2GB (Tom Lane)\n          This allows hash_mem_multiplier to be used for its intended purpose of preventing large hash aggregations from spilling to disk, even when “large” means multiple gigabytes.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mis-planning of queries involving regular tables that are inheritance children of foreign tables",
      "description": "Fix mis-planning of queries involving regular tables that are inheritance children of foreign tables (Amit Langote)\n          SELECT FOR UPDATE and related commands would fail with assertion failures or “could not find junk column” errors in such cases.",
      "sinceVersion": "13.4",
      "contributor": "Amit Langote"
    },
    {
      "title": "Fix pullup of constant function-in-FROM results when the FROM item is marked `LATERAL`",
      "description": "Fix pullup of constant function-in-FROM results when the FROM item is marked `LATERAL` (Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix corner-case failure of a new standby to follow a new primary",
      "description": "Fix corner-case failure of a new standby to follow a new primary (Dilip Kumar, Robert Haas)\n          Under a narrow combination of conditions, the standby could wind up trying to follow the wrong WAL timeline.",
      "sinceVersion": "13.4",
      "contributor": "Dilip Kumar, Robert Haas"
    },
    {
      "title": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation",
      "description": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation (Fujii Masao)\n          File truncation is irreversible, so it's no longer safe to stop recovery at a point earlier than that record. The corresponding case for transaction commit was fixed years ago, but this one was overlooked.",
      "sinceVersion": "13.4",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Advance oldest-required-WAL-segment horizon properly after a replication slot is invalidated",
      "description": "Advance oldest-required-WAL-segment horizon properly after a replication slot is invalidated (Kyotaro Horiguchi)\n          If all slots were invalidated, the horizon would not move again, eventually allowing the server's WAL storage to run out of space.",
      "sinceVersion": "13.4",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "In walreceivers, avoid attempting catalog lookups after an error",
      "description": "In walreceivers, avoid attempting catalog lookups after an error (Masahiko Sawada, Bharath Rupireddy)",
      "sinceVersion": "13.4",
      "contributor": "Masahiko Sawada, Bharath Rupireddy"
    },
    {
      "title": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive",
      "description": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive (Fujii Masao, Soumyadeep Chakraborty)",
      "sinceVersion": "13.4",
      "contributor": "Fujii Masao, Soumyadeep Chakraborty"
    },
    {
      "title": "Correctly clear shared state after failing to become a member of a transaction commit group",
      "description": "Correctly clear shared state after failing to become a member of a transaction commit group (Amit Kapila)\n          Given the right timing, this could cause an assertion failure when some later session re-uses the same PGPROC object.",
      "sinceVersion": "13.4",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process",
      "description": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process (Heikki Linnakangas)",
      "sinceVersion": "13.4",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Improve progress reporting for the sort phase of a parallel btree index build",
      "description": "Improve progress reporting for the sort phase of a parallel btree index build (Matthias van de Meent)",
      "sinceVersion": "13.4",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Improve checks for violations of replication protocol",
      "description": "Improve checks for violations of replication protocol (Tom Lane)\n          Logical replication workers frequently used Asserts to check for cases that could be triggered by invalid or out-of-order replication commands. This seems unwise, so promote these tests to regular error checks.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix assorted crash cases in logical replication of partitioned-table updates",
      "description": "Fix assorted crash cases in logical replication of partitioned-table updates (Amit Langote, Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Fix potential crash when firing AFTER triggers of partitioned tables in logical replication workers",
      "description": "Fix potential crash when firing AFTER triggers of partitioned tables in logical replication workers (Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix deadlock when multiple logical replication workers try to truncate the same table",
      "description": "Fix deadlock when multiple logical replication workers try to truncate the same table (Peter Smith, Haiying Tang)",
      "sinceVersion": "13.4",
      "contributor": "Peter Smith, Haiying Tang"
    },
    {
      "title": "Fix error cases and memory leaks in logical decoding of speculative insertions",
      "description": "Fix error cases and memory leaks in logical decoding of speculative insertions (Dilip Kumar)",
      "sinceVersion": "13.4",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Fix memory leak in logical replication output",
      "description": "Fix memory leak in logical replication output (Amit Langote)",
      "sinceVersion": "13.4",
      "contributor": "Amit Langote"
    },
    {
      "title": "Avoid leaving an invalid record-type hash table entry behind after an error",
      "description": "Avoid leaving an invalid record-type hash table entry behind after an error (Sait Talha Nisanci)\n          This could lead to later crashes or memory leakage.",
      "sinceVersion": "13.4",
      "contributor": "Sait Talha Nisanci"
    },
    {
      "title": "Fix plan cache reference leaks in some error cases in CREATE TABLE ... AS EXECUTE",
      "description": "Fix plan cache reference leaks in some error cases in CREATE TABLE ... AS EXECUTE (Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition in code for sharing tuple descriptors across parallel workers",
      "description": "Fix race condition in code for sharing tuple descriptors across parallel workers (Thomas Munro)\n          Given the right timing, a crash could result.",
      "sinceVersion": "13.4",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix race condition when invalidating an obsolete replication slot concurrently with an attempt to drop or update it",
      "description": "Fix race condition when invalidating an obsolete replication slot concurrently with an attempt to drop or update it (Andres Freund, Álvaro Herrera)",
      "sinceVersion": "13.4",
      "contributor": "Andres Freund, Álvaro Herrera"
    },
    {
      "title": "Fix possible race condition when releasing BackgroundWorkerSlots",
      "description": "Fix possible race condition when releasing BackgroundWorkerSlots (Tom Lane)\n          It's likely that this doesn't fix any observable bug on Intel hardware, but machines with weaker memory ordering rules could have problems.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix latent crash in sorting code",
      "description": "Fix latent crash in sorting code (Ronan Dunklau)\n          One code path could attempt to free a null pointer. The case appears unreachable in the core server's use of sorting, but perhaps it could be triggered by extensions.",
      "sinceVersion": "13.4",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Harden B-tree posting list split code against corrupt data",
      "description": "Harden B-tree posting list split code against corrupt data (Peter Geoghegan)\n          Throw an error, rather than crashing, for an attempt to insert an item with a TID identical to an existing entry. While that shouldn't ever happen, it has been reported to happen when the index is inconsistent with its table.",
      "sinceVersion": "13.4",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Prevent infinite loops in SP-GiST index insertion",
      "description": "Prevent infinite loops in SP-GiST index insertion (Tom Lane)\n          In the event that INCLUDE columns take up enough space to prevent a leaf index tuple from ever fitting on a page, the text_ops operator class would get into an infinite loop vainly trying to make the tuple fit. While pre-v11 versions don't have INCLUDE columns, back-patch this anti-looping fix to them anyway, as it seems like a good defense against bugs in operator classes.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that SP-GiST index insertion can be terminated by a query cancel request",
      "description": "Ensure that SP-GiST index insertion can be terminated by a query cancel request (Tom Lane, Álvaro Herrera)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't",
      "description": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't (Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't abort the process for an out-of-memory failure in libpq's printing functions",
      "description": "Don't abort the process for an out-of-memory failure in libpq's printing functions (Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpg, allow the numeric value INT_MIN",
      "description": "In ecpg, allow the numeric value INT_MIN (usually -2147483648) to be converted to integer (John Naylor)",
      "sinceVersion": "13.4",
      "contributor": "John Naylor"
    },
    {
      "title": "Fix pg_dump to correctly handle triggers on partitioned tables whose enabled status is different from their parent triggers' status",
      "description": "Fix pg_dump to correctly handle triggers on partitioned tables whose enabled status is different from their parent triggers' status (Justin Pryzby, Álvaro Herrera)",
      "sinceVersion": "13.4",
      "contributor": "Justin Pryzby, Álvaro Herrera"
    },
    {
      "title": "Avoid “invalid creation date in header” warnings observed when running pg_restore on an archive file created in a different time zone",
      "description": "Avoid “invalid creation date in header” warnings observed when running pg_restore on an archive file created in a different time zone (Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Extend pg_upgrade to detect and warn about extensions that should be upgraded",
      "description": "Extend pg_upgrade to detect and warn about extensions that should be upgraded (Bruce Momjian)\n          A script file is now produced containing the ALTER EXTENSION UPDATE commands needed to bring extensions up to the versions that are considered default in the new installation.",
      "sinceVersion": "13.4",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Avoid problems when switching pg_receivewal between compressed and non-compressed WAL storage",
      "description": "Avoid problems when switching pg_receivewal between compressed and non-compressed WAL storage (Michael Paquier)",
      "sinceVersion": "13.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix contrib/postgres_fdw to work usefully with generated columns",
      "description": "Fix contrib/postgres_fdw to work usefully with generated columns (Etsuro Fujita)\n          postgres_fdw will now behave reasonably with generated columns, so long as a generated column in a foreign table represents a generated column in the remote table. IMPORT FOREIGN SCHEMA will now import generated columns that way by default.",
      "sinceVersion": "13.4",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "In contrib/postgres_fdw, avoid attempting catalog lookups after an error",
      "description": "In contrib/postgres_fdw, avoid attempting catalog lookups after an error (Tom Lane)\n          While this usually worked, it's not very safe since the error might have been one that made catalog access nonfunctional. A side effect of the fix is that messages about data conversion errors will now mention the query's table and column aliases (if used) rather than the true underlying name of a foreign table or column.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve the isolation-test infrastructure",
      "description": "Improve the isolation-test infrastructure (Tom Lane, Michael Paquier)\n          Allow isolation test steps to be annotated to show the expected completion order. This allows getting stable results from otherwise-racy test cases, without the long delays that we previously used (not entirely successfully) to fend off race conditions. Allow non-quoted identifiers as isolation test session/step names (formerly, all such names had to be double-quoted). Detect and warn about unused steps in isolation tests. Improve display of query results in isolation tests. Remove isolationtester's “dry-run” mode. Remove memory leaks in isolationtester itself.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane, Michael Paquier"
    },
    {
      "title": "Reduce overhead of cache-clobber testing",
      "description": "Reduce overhead of cache-clobber testing (Tom Lane)",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Python's regression tests to pass with Python 3.10",
      "description": "Fix PL/Python's regression tests to pass with Python 3.10 (Honza Horak)",
      "sinceVersion": "13.4",
      "contributor": "Honza Horak"
    },
    {
      "title": "Make `printf",
      "description": "Make `printf(\"%s\", NULL)` print `(null)` instead of crashing (Tom Lane)\n          This should improve server robustness in corner cases, and it syncs our `printf()` implementation with common libraries.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect log message when point-in-time recovery stops at a ROLLBACK PREPARED record",
      "description": "Fix incorrect log message when point-in-time recovery stops at a ROLLBACK PREPARED record (Simon Riggs)",
      "sinceVersion": "13.4",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Improve ALTER TABLE's messages for wrong-relation-kind errors",
      "description": "Improve ALTER TABLE's messages for wrong-relation-kind errors (Kyotaro Horiguchi)",
      "sinceVersion": "13.4",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Clarify error messages referring to “non-negative” values",
      "description": "Clarify error messages referring to “non-negative” values (Bharath Rupireddy)",
      "sinceVersion": "13.4",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate libldap_r library",
      "description": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate libldap_r library (Adrian Ho, Tom Lane)\n          If there is no libldap_r library, we now silently assume that libldap is thread-safe.",
      "sinceVersion": "13.4",
      "contributor": "Adrian Ho, Tom Lane"
    },
    {
      "title": "Add new make targets `world-bin` and `install-world-bin`",
      "description": "Add new make targets `world-bin` and `install-world-bin` (Andrew Dunstan)\n          These are the same as `world` and `install-world` respectively, except that they do not build or install the documentation.",
      "sinceVersion": "13.4",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix make rule for TAP tests",
      "description": "Fix make rule for TAP tests (`prove_installcheck`) to work in PGXS usage (Andrew Dunstan)",
      "sinceVersion": "13.4",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Adjust JIT code to prepare for forthcoming LLVM API change",
      "description": "Adjust JIT code to prepare for forthcoming LLVM API change (Thomas Munro, Andres Freund)\n          LLVM 13 has made an incompatible API change that will cause crashing of our previous JIT compiler.",
      "sinceVersion": "13.4",
      "contributor": "Thomas Munro, Andres Freund"
    },
    {
      "title": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated",
      "description": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated (Tom Lane)\n          The GSSAPI spec provides for a string pointer and length. It seems that in practice the next byte after the string is usually zero, so that our previous coding didn't actually fail; but we do have a report of AddressSanitizer complaints.",
      "sinceVersion": "13.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Enable building with GSSAPI on MSVC",
      "description": "Enable building with GSSAPI on MSVC (Michael Paquier)\n          Fix various incompatibilities with modern Kerberos builds.",
      "sinceVersion": "13.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In MSVC builds, include --with-pgport in the set of configure options reported by pg_config, if it had been specified",
      "description": "In MSVC builds, include --with-pgport in the set of configure options reported by pg_config, if it had been specified (Andrew Dunstan)",
      "sinceVersion": "13.4",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Ensure that the relation cache is invalidated for all partitions of a partitioned table that is being added to or removed from a publication",
      "description": "Ensure that the relation cache is invalidated for all partitions of a partitioned table that is being added to or removed from a publication (Hou Zhijie, Vignesh C)\n          This oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "sinceVersion": "13.5",
      "contributor": "Hou Zhijie, Vignesh C"
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "Use the CLDR project's data to map Windows time zone names to IANA time zones (Tom Lane)\n          When running on Windows, initdb attempts to set the new cluster's timezone parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make the server reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\n          A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\n          The PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make libpq reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\n          A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\n          The PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record (Álvaro Herrera)\n          If the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\n          When applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "sinceVersion": "13.5",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions",
      "description": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions (Andrey Borodin)\n          Rows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for PREPARE TRANSACTION commands that were still in progress when CREATE INDEX CONCURRENTLY checked for them. As before, in installations that have enabled prepared transactions (max_prepared_transactions &gt; 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "sinceVersion": "13.5",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently (Noah Misch, Andrey Borodin)\n          While it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "sinceVersion": "13.5",
      "contributor": "Noah Misch, Andrey Borodin"
    },
    {
      "title": "Fix float4 and float8 hash functions to produce uniform results for NaNs",
      "description": "Fix float4 and float8 hash functions to produce uniform results for NaNs (Tom Lane)\n          Since PostgreSQL's floating-point types deem all NaNs to be equal, it's important for the hash functions to produce the same hash code for all bit-patterns that are NaNs according to the IEEE 754 standard. This failed to happen before, meaning that hash indexes and hash-based query plans might produce incorrect results for non-canonical NaN values. (`'-NaN'::float8` is one way to produce such a value on most machines.) It is advisable to reindex hash indexes on floating-point columns, if there is any possibility that they might contain such values.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix REINDEX CONCURRENTLY to preserve operator class parameters that were attached to the target index",
      "description": "Fix REINDEX CONCURRENTLY to preserve operator class parameters that were attached to the target index (Michael Paquier)",
      "sinceVersion": "13.5",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table (Amit Langote, Álvaro Herrera)\n          This oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "sinceVersion": "13.5",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication",
      "description": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication (Hou Zhijie, Vignesh C)\n          This oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "sinceVersion": "13.5",
      "contributor": "Hou Zhijie, Vignesh C"
    },
    {
      "title": "Don't discard a cast to the same type with unspecified type modifier",
      "description": "Don't discard a cast to the same type with unspecified type modifier (Tom Lane)\n          For example, if column `f1` is of type `numeric(18,3)`, the parser used to simply discard a cast like `f1::numeric`, on the grounds that it would have no run-time effect. That's true, but the exposed type of the expression should still be considered to be plain `numeric`, not `numeric(18,3)`. This is important for correctly resolving the type of larger constructs, such as recursive `UNION`s.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix updates of element fields in arrays of domain over composite",
      "description": "Fix updates of element fields in arrays of domain over composite (Tom Lane)\n          A command such as `UPDATE tab SET fld[1].subfld = val` failed if the array's elements were domains rather than plain composites.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow the combination of `FETCH FIRST WITH TIES` and `FOR UPDATE SKIP LOCKED`",
      "description": "Disallow the combination of `FETCH FIRST WITH TIES` and `FOR UPDATE SKIP LOCKED` (David Christensen)\n          `FETCH FIRST WITH TIES` necessarily fetches one more row than requested, since it cannot stop until it finds a row that is not a tie. In our current implementation, if `FOR UPDATE` is used then that row will also get locked even though it is not returned. That results in undesirable behavior if the `SKIP LOCKED` option is specified. It's difficult to change this without introducing a different set of undesirable behaviors, so for now, forbid the combination.",
      "sinceVersion": "13.5",
      "contributor": "David Christensen"
    },
    {
      "title": "Disallow creating an ICU collation if the current database's encoding won't support it",
      "description": "Disallow creating an ICU collation if the current database's encoding won't support it (Tom Lane)\n          Previously this was allowed, but then the collation could not be referenced because of the way collation lookup works; you could not use the collation, nor even drop it.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow `ALTER INDEX index ALTER COLUMN col SET",
      "description": "Disallow `ALTER INDEX index ALTER COLUMN col SET (options)` (Nathan Bossart, Michael Paquier)\n          While the parser accepted this, it's undocumented and doesn't actually work.",
      "sinceVersion": "13.5",
      "contributor": "Nathan Bossart, Michael Paquier"
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power",
      "description": "Fix corner-case loss of precision in numeric `power()()` (Dean Rasheed)\n          The result could be inaccurate when the first argument is very close to 1.",
      "sinceVersion": "13.5",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid regular expression errors with capturing parentheses inside `{0}`",
      "description": "Avoid regular expression errors with capturing parentheses inside `{0}` (Tom Lane)\n          Regular expressions like `(.){0}...\\1` drew “invalid backreference number”. Other regexp engines such as Perl don't complain, though, and for that matter ours doesn't either in some closely related cases. Worse, it could throw an assertion failure instead. Fix it so that no error is thrown and instead the back-reference is silently deemed to never match.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent regular expression back-references from sometimes matching when they shouldn't",
      "description": "Prevent regular expression back-references from sometimes matching when they shouldn't (Tom Lane)\n          The regexp engine was careless about clearing match data for capturing parentheses after rejecting a partial match. This could allow a later back-reference to match in places where it should fail for lack of a defined referent.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect results from `AT TIME ZONE` applied to a time with time zone value",
      "description": "Fix incorrect results from `AT TIME ZONE` applied to a time with time zone value (Tom Lane)\n          The results were incorrect if the target time zone was specified by a dynamic timezone abbreviation (that is, one that is defined as equivalent to a full time zone name, rather than a fixed UTC offset).",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner error with pulling up subquery expressions into function rangetable entries",
      "description": "Fix planner error with pulling up subquery expressions into function rangetable entries (Tom Lane)\n          If a function in `FROM` laterally references the output of some sub-`SELECT` earlier in the `FROM` clause, and we are able to flatten that sub-`SELECT` into the outer query, the expression(s) copied into the function expression were not fully processed. This could lead to crashes at execution.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mistranslation of PlaceHolderVars to inheritance child relations",
      "description": "Fix mistranslation of PlaceHolderVars to inheritance child relations (Tom Lane)\n          This error could result in assertion failures, or in mis-planning of queries having partitioned or inherited tables on the nullable side of an outer join.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "Avoid using MCV-only statistics to estimate the range of a column (Tom Lane)\n          There are corner cases in which ANALYZE will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix restoration of a Portal's snapshot inside a subtransaction",
      "description": "Fix restoration of a Portal's snapshot inside a subtransaction (Bertrand Drouvot)\n          If a procedure commits or rolls back a transaction, and then its next significant action is inside a new subtransaction, snapshot management went wrong, leading to a dangling pointer and probable crash. A typical example in PL/pgSQL is a `COMMIT` immediately followed by a `BEGIN ... EXCEPTION` block that performs a query.",
      "sinceVersion": "13.5",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "Clean up correctly if a transaction fails after exporting its snapshot (Dilip Kumar)\n          This oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "sinceVersion": "13.5",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "Ensure that prepared transactions are properly accounted for during promotion of a standby server (Michael Paquier, Andres Freund)\n          There was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "sinceVersion": "13.5",
      "contributor": "Michael Paquier, Andres Freund"
    },
    {
      "title": "Disallow `LISTEN` in background workers",
      "description": "Disallow `LISTEN` in background workers (Tom Lane)\n          There's no infrastructure to support this, so if someone did it, it would only result in preventing cleanup of the `NOTIFY` queue.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Send `NOTIFY` signals to other backends during transaction commit, not in the server's idle loop",
      "description": "Send `NOTIFY` signals to other backends during transaction commit, not in the server's idle loop (Artur Zakirov, Tom Lane)\n          This change allows notifications to be delivered immediately after an intra-procedure `COMMIT`. It also allows logical replication workers to send notifications.",
      "sinceVersion": "13.5",
      "contributor": "Artur Zakirov, Tom Lane"
    },
    {
      "title": "Refuse to rewind a cursor marked `NO SCROLL` if it has been held over from a previous transaction due to the `WITH HOLD` option",
      "description": "Refuse to rewind a cursor marked `NO SCROLL` if it has been held over from a previous transaction due to the `WITH HOLD` option (Tom Lane)\n          We have long forbidden fetching backwards from a `NO SCROLL` cursor, but for historical reasons the prohibition didn't extend to cases in which we rewind the query altogether and then re-fetch forwards. That exception leads to inconsistencies, particularly for held-over cursors which may not have stored all the data necessary to rewind. Disallow rewinding for non-scrollable held-over cursors to block the worst inconsistencies. (v15 will remove the exception altogether.)",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible failure while saving a `WITH HOLD` cursor at transaction end, if it had already been read to completion",
      "description": "Fix possible failure while saving a `WITH HOLD` cursor at transaction end, if it had already been read to completion (Tom Lane)",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix detection of a relation that has grown to the maximum allowed length",
      "description": "Fix detection of a relation that has grown to the maximum allowed length (Tom Lane)\n          An attempt to extend a table or index past the limit of 2^32-1 blocks was rejected, but not soon enough to prevent inconsistent internal state from being created.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule",
      "description": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule (Greg Nancarrow, Tom Lane)\n          The previous failure to do this could lead to problems such as unsafely choosing a parallel plan.",
      "sinceVersion": "13.5",
      "contributor": "Greg Nancarrow, Tom Lane"
    },
    {
      "title": "Fix incorrect reporting of permissions failures on extended statistics objects",
      "description": "Fix incorrect reporting of permissions failures on extended statistics objects (Tomas Vondra)\n          The code typically produced “cache lookup error” rather than the intended message.",
      "sinceVersion": "13.5",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix incorrect snapshot handling in parallel workers",
      "description": "Fix incorrect snapshot handling in parallel workers (Greg Nancarrow)\n          This oversight could lead to misbehavior in parallel queries if the transaction isolation level is less than `REPEATABLE READ`.",
      "sinceVersion": "13.5",
      "contributor": "Greg Nancarrow"
    },
    {
      "title": "Fix logical decoding to correctly ignore toast-table changes for transient tables",
      "description": "Fix logical decoding to correctly ignore toast-table changes for transient tables (Bertrand Drouvot)\n          Logical decoding normally ignores changes in transient tables such as those created during an ALTER TABLE heap rewrite. But that filtering wasn't applied to the associated toast table if any, leading to possible errors when rewriting a table that's being published.",
      "sinceVersion": "13.5",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Fix logical decoding's memory usage accounting to handle TOAST data correctly",
      "description": "Fix logical decoding's memory usage accounting to handle TOAST data correctly (Bertrand Drouvot)",
      "sinceVersion": "13.5",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Ensure that walreceiver processes create all required archive notification files before exiting",
      "description": "Ensure that walreceiver processes create all required archive notification files before exiting (Fujii Masao)\n          If a walreceiver exited exactly at a WAL segment boundary, it failed to make a notification file for the last-received segment, thus delaying archiving of that segment on the standby.",
      "sinceVersion": "13.5",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix computation of the WAL range to include in a backup manifest when a timeline change is involved",
      "description": "Fix computation of the WAL range to include in a backup manifest when a timeline change is involved (Kyotaro Horiguchi)",
      "sinceVersion": "13.5",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE`",
      "description": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE` (Masahiko Sawada, Tom Lane)",
      "sinceVersion": "13.5",
      "contributor": "Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Fix parser's processing of aggregate `FILTER` clauses",
      "description": "Fix parser's processing of aggregate `FILTER` clauses (Tom Lane)\n          If the `FILTER` expression is a plain boolean column, the semantic level of the aggregate could be mis-determined, leading to not-per-spec behavior. If the `FILTER` expression is itself a boolean-returning aggregate, an error should be thrown but was not, likely resulting in a crash at execution.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the correct lock level is used when renaming a table",
      "description": "Ensure that the correct lock level is used when renaming a table (Nathan Bossart, Álvaro Herrera)\n          For historical reasons, ALTER INDEX ... RENAME can be applied to any sort of relation. The lock level required to rename an index is lower than that required to rename a table or other kind of relation, but the code got this wrong and would use the weaker lock level whenever the command is spelled ALTER INDEX.",
      "sinceVersion": "13.5",
      "contributor": "Nathan Bossart, Álvaro Herrera"
    },
    {
      "title": "Prevent `ALTER TYPE/DOMAIN/OPERATOR ... SET` from changing extension membership",
      "description": "Prevent `ALTER TYPE/DOMAIN/OPERATOR ... SET` from changing extension membership (Tom Lane)\n          `ALTER ... SET` executed by an extension script would cause the target object to become a member of the extension if it was not already. In itself this isn't too troubling, since there's little reason for an extension script to touch an object not belonging to the extension. But `ALTER TYPE SET` will recurse to dependent domains, thus causing them to also become extension members. This causes unwanted side-effects from extension upgrade scripts that use that command to adjust the properties of a base type belonging to the extension. Fix by redefining these `ALTER` cases to never change extension membership.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid trying to clean up LLVM state after an error within LLVM",
      "description": "Avoid trying to clean up LLVM state after an error within LLVM (Andres Freund, Justin Pryzby)\n          This prevents a likely crash during backend exit after a fatal LLVM error.",
      "sinceVersion": "13.5",
      "contributor": "Andres Freund, Justin Pryzby"
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently",
      "description": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently (Álvaro Herrera)",
      "sinceVersion": "13.5",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export",
      "description": "Prevent “snapshot reference leak” warning when `lo_export()()` or a related function fails (Heikki Linnakangas)",
      "sinceVersion": "13.5",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Ensure that scans of SP-GiST indexes are counted in the statistics views",
      "description": "Ensure that scans of SP-GiST indexes are counted in the statistics views (Tom Lane)\n          Incrementing the number-of-index-scans counter was overlooked in the SP-GiST code, although per-tuple counters were advanced correctly.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix inefficient code generation for CoerceToDomain expression nodes",
      "description": "Fix inefficient code generation for CoerceToDomain expression nodes (Ranier Vilela)",
      "sinceVersion": "13.5",
      "contributor": "Ranier Vilela"
    },
    {
      "title": "Recalculate relevant wait intervals if recovery_min_apply_delay is changed during recovery",
      "description": "Recalculate relevant wait intervals if recovery_min_apply_delay is changed during recovery (Soumyadeep Chakraborty, Ashwin Agrawal)",
      "sinceVersion": "13.5",
      "contributor": "Soumyadeep Chakraborty, Ashwin Agrawal"
    },
    {
      "title": "Fix infinite loop if a simplehash.h hash table reaches 2^32 elements",
      "description": "Fix infinite loop if a simplehash.h hash table reaches 2^32 elements (Yura Sokolov)\n          It seems unlikely that this bug has been hit in practice, as it would require work_mem settings of hundreds of gigabytes for existing uses of simplehash.h.",
      "sinceVersion": "13.5",
      "contributor": "Yura Sokolov"
    },
    {
      "title": "Avoid O",
      "description": "Avoid O(N^2) behavior in some list-manipulation operations (Nathan Bossart, Tom Lane)\n          These changes fix slow processing in several scenarios, including: when a standby replays a transaction that held many exclusive locks on the primary; when many files are due to be unlinked after a checkpoint; when hash aggregation involves many batches; and when pg_trgm extracts indexable conditions from a complex regular expression. Only the first of these scenarios has actually been reported from the field, but they all seem like plausible consequences of inefficient list deletions.",
      "sinceVersion": "13.5",
      "contributor": "Nathan Bossart, Tom Lane"
    },
    {
      "title": "Reduce memory consumption during calculation of extended statistics",
      "description": "Reduce memory consumption during calculation of extended statistics (Justin Pryzby, Tomas Vondra)",
      "sinceVersion": "13.5",
      "contributor": "Justin Pryzby, Tomas Vondra"
    },
    {
      "title": "Add more defensive checks around B-tree posting list splits",
      "description": "Add more defensive checks around B-tree posting list splits (Peter Geoghegan)\n          This change should help detect index corruption involving duplicate table TIDs.",
      "sinceVersion": "13.5",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Disallow setting huge_pages to `on` when shared_memory_type is `sysv`",
      "description": "Disallow setting huge_pages to `on` when shared_memory_type is `sysv` (Thomas Munro)\n          Previously, this setting was accepted, but it did nothing for lack of any implementation.",
      "sinceVersion": "13.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix missing libpq functions on AIX",
      "description": "Fix missing libpq functions on AIX (Tony Reix)\n          Code reorganization led to the following documented functions not being exported from libpq on AIX: `pg_encoding_to_char()()`, `pg_utf_mblen()()`, `pg_char_to_encoding()()`, `pg_valid_server_encoding()()`, and `pg_valid_server_encoding_id()()`. Restore them to visibility.",
      "sinceVersion": "13.5",
      "contributor": "Tony Reix"
    },
    {
      "title": "Fix ecpg to recover correctly after `malloc",
      "description": "Fix ecpg to recover correctly after `malloc()()` failure while establishing a connection (Michael Paquier)",
      "sinceVersion": "13.5",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix misevaluation of stable functions called in the arguments of a PL/pgSQL CALL statement",
      "description": "Fix misevaluation of stable functions called in the arguments of a PL/pgSQL CALL statement (Tom Lane)\n          They were being called with an out-of-date snapshot, so that they would not see any database changes made since the start of the session's top-level command.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine",
      "description": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine (Tom Lane)\n          If the routine does not require an explicit `RETURN`, this usage should be valid, but it was rejected.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove pg_ctl's hard-coded limits on the total length of generated commands",
      "description": "Remove pg_ctl's hard-coded limits on the total length of generated commands (Phil Krylov)\n          For example, this removes a restriction on how many command-line options can be passed through to the postmaster. Individual path names that pg_ctl deals with, such as the postmaster executable's name or the data directory name, are still limited to `MAXPGPATH` bytes in most cases.",
      "sinceVersion": "13.5",
      "contributor": "Phil Krylov"
    },
    {
      "title": "Fix pg_dump to dump non-global default privileges correctly",
      "description": "Fix pg_dump to dump non-global default privileges correctly (Neil Chen, Masahiko Sawada)\n          If a global (unrestricted) ALTER DEFAULT PRIVILEGES command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted ALTER DEFAULT PRIVILEGES command granted that privilege again for a selected role or schema, pg_dump failed to dump the restricted privilege grant correctly.",
      "sinceVersion": "13.5",
      "contributor": "Neil Chen, Masahiko Sawada"
    },
    {
      "title": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped (Tom Lane)\n          This oversight was usually pretty harmless, since once pg_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in pg_dump when attempting to dump trigger definitions from a pre-8.3 server",
      "description": "Fix crash in pg_dump when attempting to dump trigger definitions from a pre-8.3 server (Tom Lane)",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file",
      "description": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file (Daniel Gustafsson)",
      "sinceVersion": "13.5",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Ensure that pgbench exits with non-zero status after a socket-level failure",
      "description": "Ensure that pgbench exits with non-zero status after a socket-level failure (Yugo Nagata, Fabien Coelho)\n          The desired behavior is to finish out the run but then exit with status 2. Also, fix the reporting of such errors.",
      "sinceVersion": "13.5",
      "contributor": "Yugo Nagata, Fabien Coelho"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on \"char\"",
      "description": "Fix failure of contrib/btree_gin indexes on \"char\" (not char(`n`)) columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Tom Lane)\n          Such an indexscan failed to return all the entries it should.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB",
      "description": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB (Tom Lane)\n          Such large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error",
      "description": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error (Tom Lane)",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Support OpenSSL 3.0.0",
      "description": "Support OpenSSL 3.0.0 (Peter Eisentraut, Daniel Gustafsson, Michael Paquier)",
      "sinceVersion": "13.5",
      "contributor": "Peter Eisentraut, Daniel Gustafsson, Michael Paquier"
    },
    {
      "title": "Set correct type identifier on OpenSSL BIO",
      "description": "Set correct type identifier on OpenSSL BIO (I/O abstraction) objects created by PostgreSQL (Itamar Gafni)\n          This oversight probably only matters for code that is doing tasks like auditing the OpenSSL installation. But it's nominally a violation of the OpenSSL API, so fix it.",
      "sinceVersion": "13.5",
      "contributor": "Itamar Gafni"
    },
    {
      "title": "Fix our pkg-config files to again support static linking of libpq",
      "description": "Fix our pkg-config files to again support static linking of libpq (Peter Eisentraut)",
      "sinceVersion": "13.5",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Make `pg_regexec",
      "description": "Make `pg_regexec()()` robust against an out-of-range `search_start` parameter (Tom Lane)\n          Return `REG_NOMATCH`, instead of possibly crashing, when `search_start` is past the end of the string. This case is probably unreachable within core PostgreSQL, but extensions might be more careless about the parameter value.",
      "sinceVersion": "13.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.\n          Also, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port_of_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "sinceVersion": "13.5",
      "contributor": null
    },
    {
      "title": "Enforce standard locking protocol for TOAST table updates, to prevent problems with REINDEX CONCURRENTLY",
      "description": "Enforce standard locking protocol for TOAST table updates, to prevent problems with REINDEX CONCURRENTLY (Michael Paquier)\n          If applied to a TOAST table or TOAST table's index, REINDEX CONCURRENTLY tended to produce a corrupted index. This happened because sessions updating TOAST entries released their `ROW EXCLUSIVE` locks immediately, rather than holding them until transaction commit as all other updates do. The fix is to make TOAST updates hold the table lock according to the normal rule. Any existing corrupted indexes can be repaired by reindexing again.",
      "sinceVersion": "13.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid null-pointer crash in ALTER STATISTICS when the statistics object is dropped concurrently",
      "description": "Avoid null-pointer crash in ALTER STATISTICS when the statistics object is dropped concurrently (Tomas Vondra)",
      "sinceVersion": "13.6",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix incorrect plan creation for parallel single-child Append nodes",
      "description": "Fix incorrect plan creation for parallel single-child Append nodes (David Rowley)\n          In some cases the Append would be simplified away when it should not be, leading to wrong query results (duplicated rows).",
      "sinceVersion": "13.6",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "Fix index-only scan plans for cases where not all index columns can be returned (Tom Lane)\n          If an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call (Tom Lane)\n          While the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix checking of anycompatible-family data type matches",
      "description": "Fix checking of anycompatible-family data type matches (Tom Lane)\n          In some cases the parser would think that a function or operator with anycompatible-family polymorphic parameters matches a set of arguments that it really shouldn't match. In reported cases, that led to matching more than one operator to a call, leading to ambiguous-operator errors; but a failure later on is also possible.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary",
      "description": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary (Álvaro Herrera)",
      "sinceVersion": "13.6",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "Fix startup of a physical replica to tolerate transaction ID wraparound (Abhijit Menon-Sen, Tomas Vondra)\n          If a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "sinceVersion": "13.6",
      "contributor": "Abhijit Menon-Sen, Tomas Vondra"
    },
    {
      "title": "In logical replication, avoid double transmission of a child table's data",
      "description": "In logical replication, avoid double transmission of a child table's data (Hou Zhijie)\n          If a publication includes both child and parent tables, and has the `publish_via_partition_root` option set, subscribers uselessly initiated synchronization on both child and parent tables. Ensure that only the parent table is synchronized in such cases.",
      "sinceVersion": "13.6",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "Remove lexical limitations for SQL commands issued on a logical replication connection (Tom Lane)\n          The walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction",
      "description": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction (Alex Kingsborough, Kyotaro Horiguchi)",
      "sinceVersion": "13.6",
      "contributor": "Alex Kingsborough, Kyotaro Horiguchi"
    },
    {
      "title": "Be sure to `fsync",
      "description": "Be sure to `fsync()` the pg_logical/mappings subdirectory during checkpoints (Nathan Bossart)\n          On some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "sinceVersion": "13.6",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "Build extended statistics for partitioned tables (Justin Pryzby)\n          A previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows ANALYZE to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual ANALYZE on the partitioned table if you want to maintain such statistics.)",
      "sinceVersion": "13.6",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Ignore extended statistics for inheritance trees (Justin Pryzby)\n          Currently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "sinceVersion": "13.6",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere (Tom Lane)\n          This restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index (Haiying Tang, Hou Zhijie)\n          The same prohibition already existed for primary key indexes.",
      "sinceVersion": "13.6",
      "contributor": "Haiying Tang, Hou Zhijie"
    },
    {
      "title": "Correctly update cached table state during ALTER TABLE ADD PRIMARY KEY USING INDEX",
      "description": "Correctly update cached table state during ALTER TABLE ADD PRIMARY KEY USING INDEX (Hou Zhijie)\n          Concurrent sessions failed to update their opinion of whether the table has a primary key, possibly causing incorrect logical replication behavior.",
      "sinceVersion": "13.6",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Correctly update cached table state when switching `REPLICA IDENTITY` index (Tang Haiying, Hou Zhijie)\n          Concurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "sinceVersion": "13.6",
      "contributor": "Tang Haiying, Hou Zhijie"
    },
    {
      "title": "Allow parallel vacuuming and concurrent index building to be ignored while computing oldest xmin",
      "description": "Allow parallel vacuuming and concurrent index building to be ignored while computing oldest xmin (Masahiko Sawada)\n          Non-parallelized instances of these operations were already ignored, but the logic did not work for parallelized cases. Holding back the xmin horizon has undesirable effects such as delaying vacuum cleanup.",
      "sinceVersion": "13.6",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects",
      "description": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects (Justin Pryzby)",
      "sinceVersion": "13.6",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix display of `cert` authentication method's options in pg_hba_file_rules view",
      "description": "Fix display of `cert` authentication method's options in pg_hba_file_rules view (Magnus Hagander)\n          The `cert` authentication method implies `clientcert=verify-full`, but the pg_hba_file_rules view incorrectly reported `clientcert=verify-ca`.",
      "sinceVersion": "13.6",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules (Tom Lane)\n          A whole-row variable would be printed as “var.*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix one-byte buffer overrun when applying Unicode string normalization to an empty string",
      "description": "Fix one-byte buffer overrun when applying Unicode string normalization to an empty string (Michael Paquier)\n          The practical impact of this is limited thanks to alignment considerations; but in debug builds, a warning was raised.",
      "sinceVersion": "13.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "Fix or remove some incorrect assertions (Simon Riggs, Michael Paquier, Alexander Lakhin)\n          These errors should affect only debug builds, not production.",
      "sinceVersion": "13.6",
      "contributor": "Simon Riggs, Michael Paquier, Alexander Lakhin"
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib",
      "description": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib (Tom Lane)",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid calling `strerror",
      "description": "Avoid calling `strerror()` from libpq's `PQcancel()` function (Tom Lane)\n          `PQcancel()` is supposed to be safe to call from a signal handler, but `strerror()` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name (Tom Lane)\n          This agrees with the documented behavior, and avoids probable permissions failure if SET ROLE or SET SESSION AUTHORIZATION has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix psql `\\d` command's query for identifying parent triggers",
      "description": "Fix psql `\\d` command's query for identifying parent triggers (Justin Pryzby)\n          The previous coding failed with “more than one row returned by a subquery used as an expression” if a partition had triggers and there were unrelated statement-level triggers of the same name on some parent partitioned table.",
      "sinceVersion": "13.6",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix psql's tab-completion of label values for enum types",
      "description": "Fix psql's tab-completion of label values for enum types (Tom Lane)",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext",
      "description": "In psql and some other client programs, avoid trying to invoke `gettext()()` from a control-C signal handler (Tom Lane)\n          While no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical",
      "description": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical (Tom Lane, Nathan Bossart)\n          Previously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane, Nathan Bossart"
    },
    {
      "title": "Fix pg_dump's dump ordering for user-defined casts",
      "description": "Fix pg_dump's dump ordering for user-defined casts (Tom Lane)\n          In rare cases, the output script might refer to a user-defined cast before it had been created.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump's --inserts and --column-inserts modes to handle tables containing both generated columns and dropped columns",
      "description": "Fix pg_dump's --inserts and --column-inserts modes to handle tables containing both generated columns and dropped columns (Tom Lane)",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup",
      "description": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup (Tom Lane)\n          The previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix results of index-only scans on contrib/btree_gist indexes on char",
      "description": "Fix results of index-only scans on contrib/btree_gist indexes on char(`N`) columns (Tom Lane)\n          Index-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store char(`N`) values with the expected amount of space padding. The behavior of such an index will not change immediately unless you REINDEX it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "sinceVersion": "13.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python (Peter Eisentraut, Tom Lane, Andres Freund)\n          With Python 3.10, this avoids configure-time warnings about distutils being deprecated and scheduled for removal in Python 3.12. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "sinceVersion": "13.6",
      "contributor": "Peter Eisentraut, Tom Lane, Andres Freund"
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later",
      "description": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later (Victor Wagner)",
      "sinceVersion": "13.6",
      "contributor": "Victor Wagner"
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later",
      "description": "Fix PL/Python compile failure with Python 3.11 and later (Peter Eisentraut)",
      "sinceVersion": "13.6",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add support for building with Visual Studio 2022",
      "description": "Add support for building with Visual Studio 2022 (Hans Buschmann)",
      "sinceVersion": "13.6",
      "contributor": "Hans Buschmann"
    },
    {
      "title": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory",
      "description": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory (Anton Voloshin, Andrew Dunstan)",
      "sinceVersion": "13.6",
      "contributor": "Anton Voloshin, Andrew Dunstan"
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns (Tom Lane)\n          The previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope correctly with platforms that have no support for altering the server process's display in ps",
      "description": "Cope correctly with platforms that have no support for altering the server process's display in ps(1) (Andrew Dunstan)\n          Few platforms are like this (the only supported one is Cygwin), so we'd managed not to notice that refactoring introduced a potential memory clobber.",
      "sinceVersion": "13.7",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix default signature length for `gist_ltree_ops` indexes",
      "description": "Fix default signature length for `gist_ltree_ops` indexes (Tomas Vondra, Alexander Korotkov)\n          The default signature length (hash size) for GiST indexes on ltree columns was accidentally changed while upgrading that operator class to support operator class parameters. If any operations had been done on such an index without first upgrading the `ltree` extension to version 1.2, they were done assuming that the signature length was 28 bytes rather than the intended 8. This means it is very likely that such indexes are now corrupt. For safety we recommend re-indexing all GiST indexes on ltree columns after installing this update. (Note that GiST indexes on ltree[] columns, that is arrays of ltree, are not affected.)",
      "sinceVersion": "13.7",
      "contributor": "Tomas Vondra, Alexander Korotkov"
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables (Tom Lane)\n          The column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\n          In cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type record to begin with and there's no issue.",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema",
      "description": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema()()` and allied functions (Renan Soares Lopes)\n          The xmlschema output for these types included a malformed regular expression.",
      "sinceVersion": "13.7",
      "contributor": "Renan Soares Lopes"
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns",
      "description": "Avoid core dump in parser for a `VALUES` clause with zero columns (Tom Lane)",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner errors for `GROUPING",
      "description": "Fix planner errors for `GROUPING()()` constructs that reference outer query levels (Richard Guo, Tom Lane)",
      "sinceVersion": "13.7",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid accessing a no-longer-pinned shared buffer while attempting to lock an outdated tuple during EvalPlanQual",
      "description": "Avoid accessing a no-longer-pinned shared buffer while attempting to lock an outdated tuple during EvalPlanQual (Tom Lane)\n          The code would touch the buffer a couple more times after releasing its pin. In theory another process could recycle the buffer (or more likely, try to defragment its free space) as soon as the pin is gone, probably leading to failure to find the newer version of the tuple.",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering",
      "description": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering (Aliaksandr Kalenik)",
      "sinceVersion": "13.7",
      "contributor": "Aliaksandr Kalenik"
    },
    {
      "title": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command",
      "description": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command (Tom Lane)\n          The parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix bogus errors from attempts to alter system columns of tables",
      "description": "Fix bogus errors from attempts to alter system columns of tables (Tom Lane)\n          The system should just tell you that you can't do it, but sometimes it would report “no owned sequence found” instead.",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression",
      "description": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression (Peter Geoghegan, Thomas Munro)\n          The table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "sinceVersion": "13.7",
      "contributor": "Peter Geoghegan, Thomas Munro"
    },
    {
      "title": "Fix risk of deadlock failures while dropping a partitioned index",
      "description": "Fix risk of deadlock failures while dropping a partitioned index (Jimmy Yih, Gaurab Dey, Tom Lane)\n          Ensure that the required table and index locks are taken in the standard order (parents before children, tables before indexes). The previous coding for DROP INDEX did it differently, and so could deadlock against concurrent queries taking these locks in the standard order.",
      "sinceVersion": "13.7",
      "contributor": "Jimmy Yih, Gaurab Dey, Tom Lane"
    },
    {
      "title": "Fix race condition between DROP TABLESPACE and checkpointing",
      "description": "Fix race condition between DROP TABLESPACE and checkpointing (Nathan Bossart)\n          The checkpoint forced by DROP TABLESPACE could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "sinceVersion": "13.7",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint",
      "description": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint (Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas)\n          TRUNCATE must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "sinceVersion": "13.7",
      "contributor": "Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas"
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Fix unsafe toast-data accesses during temporary object cleanup (Andres Freund)\n          Temporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "sinceVersion": "13.7",
      "contributor": "Andres Freund"
    },
    {
      "title": "Improve wait logic in RegisterSyncRequest",
      "description": "Improve wait logic in RegisterSyncRequest (Thomas Munro)\n          If we run out of space in the checkpointer sync request queue (which is hopefully rare on real systems, but is common when testing with a very small buffer pool), we wait for it to drain. While waiting, we should report that as a wait event so that users know what is going on, and also watch for postmaster death, since otherwise the loop might never terminate if the checkpointer has already exited.",
      "sinceVersion": "13.7",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record",
      "description": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record (Sami Imseih)",
      "sinceVersion": "13.7",
      "contributor": "Sami Imseih"
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "Fix possibility of self-deadlock in hot standby conflict handling (Andres Freund)\n          With unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "sinceVersion": "13.7",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix possible mis-identification of the correct ancestor relation to publish logical replication changes through",
      "description": "Fix possible mis-identification of the correct ancestor relation to publish logical replication changes through (Tomas Vondra, Hou zj, Amit Kapila)\n          If publish_via_partition_root is enabled, and there are multiple publications naming different ancestors of the currently-modified relation, the wrong ancestor might be chosen for reporting the change.",
      "sinceVersion": "13.7",
      "contributor": "Tomas Vondra, Hou zj, Amit Kapila"
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit",
      "description": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit (Amit Kapila)\n          Faulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "sinceVersion": "13.7",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line (Dilip Kumar, Amit Kapila)\n          Otherwise subscribers cannot see the values and will fail to replicate the update.",
      "sinceVersion": "13.7",
      "contributor": "Dilip Kumar, Amit Kapila"
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "Make libpq accept root-owned SSL private key files (David Steele)\n          This change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "sinceVersion": "13.7",
      "contributor": "David Steele"
    },
    {
      "title": "Fix behavior of libpq's `PQisBusy",
      "description": "Fix behavior of libpq's `PQisBusy()()` function after a connection failure (Tom Lane)\n          If we'd detected a write failure, `PQisBusy()()` would always return true, which is the wrong thing: we want input processing to carry on normally until we've read whatever is available from the server. The practical effect of this error is that applications using libpq's async-query API would typically detect connection loss only when `PQconsumeInput()()` returns a hard failure. With this fix, a connection loss will normally be reported via an error PGresult object, which is a much cleaner behavior for most applications.",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions (Tom Lane)\n          pg_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error handling in pg_waldump",
      "description": "Fix error handling in pg_waldump (Kyotaro Horiguchi, Andres Freund)\n          While trying to read a WAL file to determine the WAL segment size, pg_waldump would report an incorrect error for the case of a too-short file. In addition, the file name reported in this and related error messages could be garbage.",
      "sinceVersion": "13.7",
      "contributor": "Kyotaro Horiguchi, Andres Freund"
    },
    {
      "title": "Ensure that contrib/pageinspect functions cope with all-zero pages",
      "description": "Ensure that contrib/pageinspect functions cope with all-zero pages (Michael Paquier)\n          This is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "sinceVersion": "13.7",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type (Michael Paquier, Justin Pryzby, Julien Rouhaud)\n          These changes make it less likely that the module will crash on bad data.",
      "sinceVersion": "13.7",
      "contributor": "Michael Paquier, Justin Pryzby, Julien Rouhaud"
    },
    {
      "title": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary (Ronan Dunklau)\n          This fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "sinceVersion": "13.7",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Update JIT code to work with LLVM 14",
      "description": "Update JIT code to work with LLVM 14 (Thomas Munro)",
      "sinceVersion": "13.7",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Clean up assorted failures under clang's `-fsanitize=undefined` checks (Tom Lane, Andres Freund, Zhihong Yu)\n          Most of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane, Andres Freund, Zhihong Yu"
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions",
      "description": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions (Tom Lane)",
      "sinceVersion": "13.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build",
      "description": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build (Andres Freund)",
      "sinceVersion": "13.7",
      "contributor": "Andres Freund"
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "In Windows builds, use gendef instead of pexports to build DEF files (Andrew Dunstan)\n          This adapts the build process to work on recent MSys tool chains.",
      "sinceVersion": "13.7",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW (Andrew Dunstan)\n          For some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "sinceVersion": "13.7",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine.",
      "sinceVersion": "13.7",
      "contributor": null
    },
    {
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "Do not let extension scripts replace objects not already belonging to the extension (Tom Lane)\n          This change prevents extension scripts from doing CREATE OR REPLACE if there is an existing object that does not belong to the extension. It also prevents CREATE IF NOT EXISTS in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\n          The PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix replay of CREATE DATABASE WAL records on standby servers",
      "description": "Fix replay of CREATE DATABASE WAL records on standby servers (Kyotaro Horiguchi, Asim R Praveen, Paul Guo)\n          Standby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "sinceVersion": "13.8",
      "contributor": "Kyotaro Horiguchi, Asim R Praveen, Paul Guo"
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Support “in place” tablespaces (Thomas Munro, Michael Paquier, Álvaro Herrera)\n          Normally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the CREATE DATABASE replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "sinceVersion": "13.8",
      "contributor": "Thomas Munro, Michael Paquier, Álvaro Herrera"
    },
    {
      "title": "Fix permissions checks in CREATE INDEX",
      "description": "Fix permissions checks in CREATE INDEX (Nathan Bossart, Noah Misch)\n          The fix for CVE-2022-1552 caused CREATE INDEX to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg_dump issues CREATE INDEX before re-granting permissions.",
      "sinceVersion": "13.8",
      "contributor": "Nathan Bossart, Noah Misch"
    },
    {
      "title": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block",
      "description": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block (Tom Lane)\n          If the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "Fix race condition when checking transaction visibility (Simon Riggs)\n          `TransactionIdIsInProgress()` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "sinceVersion": "13.8",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type",
      "description": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type (Tom Lane)",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function",
      "description": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function (Richard Guo)",
      "sinceVersion": "13.8",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix incorrect plans when sorting by an expression that contains a non-top-level set-returning function",
      "description": "Fix incorrect plans when sorting by an expression that contains a non-top-level set-returning function (Richard Guo, Tom Lane)",
      "sinceVersion": "13.8",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid planner core dump with ``constant` = ANY",
      "description": "Avoid planner core dump with ``constant` = ANY(array`) clauses when there are MCV-type extended statistics on the `array` variable (Tom Lane)",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables",
      "description": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables (Álvaro Herrera, Amit Langote)\n          In certain cases, a “trigger does not exist” failure would occur because the command would try to adjust the trigger on a child partition that doesn't have it.",
      "sinceVersion": "13.8",
      "contributor": "Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Improve syntax error messages for type jsonpath",
      "description": "Improve syntax error messages for type jsonpath (Andrew Dunstan)",
      "sinceVersion": "13.8",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Prevent `pg_stat_get_subscription",
      "description": "Prevent `pg_stat_get_subscription()()` from possibly returning an extra row containing garbage values (Kuntal Ghosh)",
      "sinceVersion": "13.8",
      "contributor": "Kuntal Ghosh"
    },
    {
      "title": "Ensure that `pg_stop_backup",
      "description": "Ensure that `pg_stop_backup()()` cleans up session state properly (Fujii Masao)\n          This omission could lead to assertion failures or crashes later in the session.",
      "sinceVersion": "13.8",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses (Dean Rasheed)\n          In corner cases, a misleading error could be reported.",
      "sinceVersion": "13.8",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct",
      "description": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct (Álvaro Herrera)",
      "sinceVersion": "13.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Reject `ROW",
      "description": "Reject `ROW()` expressions and functions in `FROM` that have too many columns (Tom Lane)\n          Cases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere (Tom Lane)\n          Previously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column",
      "description": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made (Tom Lane)\n          This oversight could lead to dump/reload or pg_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "Report implicitly-created operator families to event triggers (Masahiko Sawada)\n          If CREATE OPERATOR CLASS results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "sinceVersion": "13.8",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Fix control file updates made when a restartpoint is running during promotion of a standby server (Kyotaro Horiguchi)\n          Previously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "sinceVersion": "13.8",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions",
      "description": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions (Wang Wei, Amit Kapila)\n          If a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "sinceVersion": "13.8",
      "contributor": "Wang Wei, Amit Kapila"
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders",
      "description": "Disallow nested backup operations in logical replication walsenders (Fujii Masao)",
      "sinceVersion": "13.8",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix memory leak in logical replication subscribers",
      "description": "Fix memory leak in logical replication subscribers (Hou Zhijie)",
      "sinceVersion": "13.8",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Fix logical replication's checking of replica identity when the target table is partitioned",
      "description": "Fix logical replication's checking of replica identity when the target table is partitioned (Shi Yu, Hou Zhijie)\n          The replica identity columns have to be re-identified for the child partition.",
      "sinceVersion": "13.8",
      "contributor": "Shi Yu, Hou Zhijie"
    },
    {
      "title": "Fix failures to update cached schema data in a logical replication subscriber after a schema change on the publisher",
      "description": "Fix failures to update cached schema data in a logical replication subscriber after a schema change on the publisher (Shi Yu, Hou Zhijie)",
      "sinceVersion": "13.8",
      "contributor": "Shi Yu, Hou Zhijie"
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Prevent open-file leak when reading an invalid timezone abbreviation file (Kyotaro Horiguchi)\n          Such cases could result in harmless warning messages.",
      "sinceVersion": "13.8",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Allow custom server parameters to have short descriptions that are NULL (Steve Chavez)\n          Previously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "sinceVersion": "13.8",
      "contributor": "Steve Chavez"
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags",
      "description": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags (Haiyang Wang)",
      "sinceVersion": "13.8",
      "contributor": "Haiyang Wang"
    },
    {
      "title": "Fix erroneous assertion checks in shared hashtable management",
      "description": "Fix erroneous assertion checks in shared hashtable management (Thomas Munro)",
      "sinceVersion": "13.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Arrange to clean up after commit-time errors within `SPI_commit",
      "description": "Arrange to clean up after commit-time errors within `SPI_commit()()`, rather than expecting callers to do that (Peter Eisentraut, Tom Lane)\n          Proper cleanup is complicated and requires use of low-level facilities, so it's not surprising that no known caller got it right. This led to misbehaviors when a PL procedure issued COMMIT but a failure occurred (such as a deferred constraint check). To improve matters, redefine `SPI_commit()()` as starting a new transaction, so that it becomes equivalent to `SPI_commit_and_chain()()` except that you get default transaction characteristics instead of preserving the prior transaction's characteristics. To make this somewhat transparent API-wise, redefine `SPI_start_transaction()()` as a no-op. All known callers of `SPI_commit()()` immediately call `SPI_start_transaction()()`, so they will not notice any change. Similar remarks apply to `SPI_rollback()()`.\n          Also fix PL/Python, which omitted any handling of such errors at all, resulting in jumping out of the Python interpreter. This is reported to crash Python 3.11. Older Python releases leak some memory but seem okay with it otherwise.",
      "sinceVersion": "13.8",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "Remove misguided SSL key file ownership check in libpq (Tom Lane)\n          In the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Ensure ecpg reports server connection loss sanely (Tom Lane)\n          Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Avoid core dump in ecpglib with unexpected orders of operations (Tom Lane)\n          Certain operations such as EXEC SQL PREPARE would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql's \\watch command, echo a newline after cancellation with control-C",
      "description": "In psql's \\watch command, echo a newline after cancellation with control-C (Pavel Stehule)\n          This prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "sinceVersion": "13.8",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Fix possible report of wrong error condition after `clone",
      "description": "Fix possible report of wrong error condition after `clone()()` failure in pg_upgrade with --clone option (Justin Pryzby)",
      "sinceVersion": "13.8",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms",
      "description": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms (Tom Lane)",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification",
      "description": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification (Tom Lane)",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "Block signals while allocating dynamic shared memory on Linux (Thomas Munro)\n          This avoids problems when a signal interrupts `posix_fallocate()()`.",
      "sinceVersion": "13.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open",
      "description": "Detect unexpected `EEXIST` error from `shm_open()()` (Thomas Munro)\n          This avoids a possible crash on Solaris.",
      "sinceVersion": "13.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36",
      "description": "Adjust PL/Perl test case so it will work under Perl 5.36 (Dagfinn Ilmari Mannsåker)",
      "sinceVersion": "13.8",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL",
      "description": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL (Tom Lane)",
      "sinceVersion": "13.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix construction of per-partition foreign key constraints while doing ALTER TABLE ATTACH PARTITION",
      "description": "Fix construction of per-partition foreign key constraints while doing ALTER TABLE ATTACH PARTITION (Jehan-Guillaume de Rorthais, Álvaro Herrera)\n          Previously, incorrect or duplicate constraints could be constructed for the newly-added partition.",
      "sinceVersion": "13.9",
      "contributor": "Jehan-Guillaume de Rorthais, Álvaro Herrera"
    },
    {
      "title": "Avoid rare PANIC during updates occurring concurrently with VACUUM",
      "description": "Avoid rare PANIC during updates occurring concurrently with VACUUM (Tom Lane, Jeff Davis)\n          If a concurrent VACUUM sets the all-visible flag bit in a page that UPDATE or DELETE is in process of modifying, the updating command needs to clear that bit again; but some code paths failed to do so, ending in a PANIC exit and database restart.\n          This is known to be possible in versions 14 and 15. It may be only latent in previous branches.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane, Jeff Davis"
    },
    {
      "title": "Fix VACUUM to press on if an attempted page deletion in a btree index fails to find the page's parent downlink",
      "description": "Fix VACUUM to press on if an attempted page deletion in a btree index fails to find the page's parent downlink (Peter Geoghegan)\n          Rather than throwing an error, just log the issue and continue without deleting the empty page. Previously, a buggy operator class or corrupted index could indefinitely prevent completion of vacuuming of the index, eventually leading to transaction wraparound problems.",
      "sinceVersion": "13.9",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view",
      "description": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view (Tom Lane)\n          This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "Disallow rules named `_RETURN` that are not `ON SELECT` (Tom Lane)\n          This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix resource management bug in saving tuples for `AFTER` triggers",
      "description": "Fix resource management bug in saving tuples for `AFTER` triggers (Tom Lane)\n          Given the right circumstances, this manifested as a “tupdesc reference `NNNN` is not owned by resource owner” error followed by a PANIC exit.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Repair rare failure of MULTIEXPR_SUBLINK subplans in inherited updates",
      "description": "Repair rare failure of MULTIEXPR_SUBLINK subplans in inherited updates (Tom Lane)\n          Use of the syntax `UPDATE tab SET (c1, ...) = (SELECT ...)` with an inherited or partitioned target table could result in failure if the child tables are sufficiently dissimilar. This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix generation of constraint names for per-partition foreign key constraints",
      "description": "Fix generation of constraint names for per-partition foreign key constraints (Jehan-Guillaume de Rorthais)\n          If the initially-given name is already in use for some constraint of the partition, a new one is selected; but it wasn't being spelled as intended.",
      "sinceVersion": "13.9",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix incorrect matching of index expressions and predicates when creating a partitioned index",
      "description": "Fix incorrect matching of index expressions and predicates when creating a partitioned index (Richard Guo, Tom Lane)\n          While creating a partitioned index, we try to identify any existing indexes on the partitions that match the partitioned index, so that we can absorb those as child indexes instead of building new ones. Matching of expressions was not done right, so that a usable child index might be ignored, leading to creation of a duplicative index.",
      "sinceVersion": "13.9",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "Prevent WAL corruption after a standby promotion (Dilip Kumar, Robert Haas)\n          When a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "sinceVersion": "13.9",
      "contributor": "Dilip Kumar, Robert Haas"
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes (Matthias van de Meent, Zhang Mingli)\n          This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "sinceVersion": "13.9",
      "contributor": "Matthias van de Meent, Zhang Mingli"
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction (Masahiko Sawada, Kuroda Hayato)\n          These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "sinceVersion": "13.9",
      "contributor": "Masahiko Sawada, Kuroda Hayato"
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "Prevent examining system catalogs with the wrong snapshot during logical decoding (Masahiko Sawada)\n          If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "sinceVersion": "13.9",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "Accept interrupts in more places during logical decoding (Amit Kapila, Masahiko Sawada)\n          This ameliorates problems with slow shutdown of replication workers.",
      "sinceVersion": "13.9",
      "contributor": "Amit Kapila, Masahiko Sawada"
    },
    {
      "title": "Prevent attempts to replicate into a foreign-table partition in replication workers",
      "description": "Prevent attempts to replicate into a foreign-table partition in replication workers (Shi Yu, Tom Lane)\n          Although partitioned tables can have foreign tables as partitions, replicating into such a partition isn't currently supported. The logical replication worker process would crash if it was attempted. Now, an error is thrown.",
      "sinceVersion": "13.9",
      "contributor": "Shi Yu, Tom Lane"
    },
    {
      "title": "Remove pointless check on replica identity setting of partitioned tables",
      "description": "Remove pointless check on replica identity setting of partitioned tables (Hou Zhijie)\n          What matters is the replica identity setting of the leaf partitions, so there's no need to throw error if it's not set on the parent.",
      "sinceVersion": "13.9",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "Avoid crash after function syntax error in replication workers (Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane)\n          If a syntax error occurred in a SQL-language or PL/pgSQL-language CREATE FUNCTION or DO command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "sinceVersion": "13.9",
      "contributor": "Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "Fix handling of read-write expanded datums that are passed to SQL functions (Tom Lane)\n          If a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix type circle's equality comparator to handle NaNs properly",
      "description": "Fix type circle's equality comparator to handle NaNs properly (Ranier Vilela)\n          If the left-hand circle had a floating-point NaN for its radius, it would be considered equal to a circle with the same center and any radius.",
      "sinceVersion": "13.9",
      "contributor": "Ranier Vilela"
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Fix use-after-free hazard in string comparisons (Tom Lane)\n          Improper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add plan-time check for attempted access to a table that has no table access method",
      "description": "Add plan-time check for attempted access to a table that has no table access method (Tom Lane)\n          This prevents a crash in some catalog-corruption scenarios, for example use of a view whose `ON SELECT` rule is missing.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "Prevent postmaster crash when shared-memory state is corrupted (Tom Lane)\n          The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add some more defenses against recursion till stack overrun",
      "description": "Add some more defenses against recursion till stack overrun (Richard Guo, Tom Lane)",
      "sinceVersion": "13.9",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid misbehavior when choosing hash table size with very small work_mem and large tuples",
      "description": "Avoid misbehavior when choosing hash table size with very small work_mem and large tuples (Zhang Mingli)",
      "sinceVersion": "13.9",
      "contributor": "Zhang Mingli"
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "Avoid long-term memory leakage in the autovacuum launcher process (Reid Thompson)\n          The lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "sinceVersion": "13.9",
      "contributor": "Reid Thompson"
    },
    {
      "title": "Improve PL/pgSQL's ability to handle parameters declared as RECORD",
      "description": "Improve PL/pgSQL's ability to handle parameters declared as RECORD (Tom Lane)\n          Build a separate function cache entry for each concrete type passed to the RECORD parameter during a session, much as we do for polymorphic parameters. This allows some usages to work that previously failed with errors such as “type of parameter does not match that when preparing the plan”.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "Add missing guards for `NULL` connection pointer in libpq (Daniele Varrazzo, Tom Lane)\n          There's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()()` and `PQisnonblocking()()` didn't get that memo, so fix them.",
      "sinceVersion": "13.9",
      "contributor": "Daniele Varrazzo, Tom Lane"
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration",
      "description": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration (Andrey Sokolov)\n          For example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only str1 was marked `static`.",
      "sinceVersion": "13.9",
      "contributor": "Andrey Sokolov"
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg_basebackup",
      "description": "Allow cross-platform tablespace relocation in pg_basebackup (Robert Haas)\n          Allow the remote path in --tablespace-mapping to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "sinceVersion": "13.9",
      "contributor": "Robert Haas"
    },
    {
      "title": "In pg_stat_statements, fix access to already-freed memory",
      "description": "In pg_stat_statements, fix access to already-freed memory (zhaoqigui)\n          This occurred if pg_stat_statements tracked a ROLLBACK command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "sinceVersion": "13.9",
      "contributor": "zhaoqigui"
    },
    {
      "title": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns (Richard Guo, Etsuro Fujita)\n          This avoids “variable not found in subplan target list” errors in rare cases.",
      "sinceVersion": "13.9",
      "contributor": "Richard Guo, Etsuro Fujita"
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create",
      "description": "Reject unwanted output from the platform's `uuid_create()()` function (Nazir Bilal Yavuz)\n          The uuid-ossp module expects libc's `uuid_create()()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()()`.)",
      "sinceVersion": "13.9",
      "contributor": "Nazir Bilal Yavuz"
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Include new Perl test modules in standard installations (Álvaro Herrera)\n          Add PostgreSQL/Test/Cluster.pm and PostgreSQL/Test/Utils.pm to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "sinceVersion": "13.9",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "On NetBSD, force dynamic symbol resolution at postmaster start (Andres Freund, Tom Lane)\n          This avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "sinceVersion": "13.9",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix incompatibilities with LLVM 15",
      "description": "Fix incompatibilities with LLVM 15 (Thomas Munro, Andres Freund)",
      "sinceVersion": "13.9",
      "contributor": "Thomas Munro, Andres Freund"
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set",
      "description": "Allow use of `__sync_lock_test_and_set()()` for spinlocks on any machine (Tom Lane)\n          This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS",
      "description": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane)",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid using `sprintf",
      "description": "Avoid using `sprintf()`, to avoid compile-time deprecation warnings (Tom Lane)",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later",
      "description": "Silence assorted compiler warnings from clang 15 and later (Tom Lane)",
      "sinceVersion": "13.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis.",
      "description": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy_River, America/Thunder_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n          These zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of timestamptz display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n          It is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "sinceVersion": "13.9",
      "contributor": null
    },
    {
      "title": "Allow wide tuples to be always added to almost-empty heap pages",
      "description": "Allow wide tuples to be always added to almost-empty heap pages (John Naylor, Floris van Nee)\n            Previously tuples whose insertion would have exceeded the page's fill factor were instead added to new pages.",
      "sinceVersion": "14.0",
      "contributor": "John Naylor, Floris van Nee"
    },
    {
      "title": "Allow `DISTINCT` to be added to `GROUP BY` to remove duplicate `GROUPING SET` combinations",
      "description": "Allow `DISTINCT` to be added to `GROUP BY` to remove duplicate `GROUPING SET` combinations (Vik Fearing)\n            For example, `GROUP BY CUBE (a,b), CUBE (b,c)` will generate duplicate grouping combinations without `DISTINCT`.",
      "sinceVersion": "14.0",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Allow REINDEX to change the tablespace of the new index",
      "description": "Allow REINDEX to change the tablespace of the new index (Alexey Kondratov, Michael Paquier, Justin Pryzby)\n            This is done by specifying a `TABLESPACE` clause. A --tablespace option was also added to reindexdb to control this.",
      "sinceVersion": "14.0",
      "contributor": "Alexey Kondratov, Michael Paquier, Justin Pryzby"
    },
    {
      "title": "Allow TRUNCATE to operate on foreign tables",
      "description": "Allow TRUNCATE to operate on foreign tables (Kazutaka Onishi, Kohei KaiGai)\n            The postgres_fdw module also now supports this.",
      "sinceVersion": "14.0",
      "contributor": "Kazutaka Onishi, Kohei KaiGai"
    },
    {
      "title": "Allow publications to be more easily added to and removed from a subscription",
      "description": "Allow publications to be more easily added to and removed from a subscription (Japin Li)\n            The new syntax is ALTER SUBSCRIPTION ... ADD/DROP PUBLICATION. This avoids having to specify all publications to add/remove entries.",
      "sinceVersion": "14.0",
      "contributor": "Japin Li"
    },
    {
      "title": "Provide feature-test macros in libpq-fe.h for recently-added libpq features",
      "description": "Provide feature-test macros in libpq-fe.h for recently-added libpq features (Tom Lane, Álvaro Herrera)\n            Historically, applications have usually used compile-time checks of `PG_VERSION_NUM` to test whether a feature is available. But that's normally the server version, which might not be a good guide to libpq's version. libpq-fe.h now offers `#define` symbols denoting application-visible features added in v14; the intent is to keep adding symbols for such features in future versions.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Untitled feature",
      "description": "Stored procedures can now return data via `OUT` parameters.",
      "sinceVersion": "14.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "The SQL-standard `SEARCH` and `CYCLE` options for common table expressions have been implemented.",
      "sinceVersion": "14.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Subscripting can now be applied to any data type for which it is a useful notation, not only arrays. In this release, the jsonb and hstore types have gained subscripting operators.",
      "sinceVersion": "14.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Range types have been extended by adding multiranges, allowing representation of noncontiguous data ranges.",
      "sinceVersion": "14.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "B-tree index updates are managed more efficiently, reducing index bloat.",
      "sinceVersion": "14.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "VACUUM automatically becomes more aggressive, and skips inessential cleanup, if the database starts to approach a transaction ID wraparound condition.",
      "sinceVersion": "14.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Extended statistics can now be collected on expressions, allowing better planning results for complex queries.",
      "sinceVersion": "14.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "libpq now has the ability to pipeline multiple queries, which can boost throughput over high-latency connections.",
      "sinceVersion": "14.0",
      "contributor": null
    },
    {
      "title": "User-defined objects that reference certain built-in array functions along with their argument types must be recreated",
      "description": "User-defined objects that reference certain built-in array functions along with their argument types must be recreated (Tom Lane)\n          Specifically, `array_append()()`, `array_prepend()()`, `array_cat()()`, `array_position()()`, `array_positions()()`, `array_remove()()`, `array_replace()()`, and `width_bucket()()` used to take anyarray arguments but now take anycompatiblearray. Therefore, user-defined objects like aggregates and operators that reference those array function signatures must be dropped before upgrading, and recreated once the upgrade completes.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove deprecated containment operators `@` and `~` for built-in geometric data types and contrib modules cube, hstore, intarray, and seg",
      "description": "Remove deprecated containment operators `@` and `~` for built-in geometric data types and contrib modules cube, hstore, intarray, and seg (Justin Pryzby)\n          The more consistently named `&lt;@` and `@&gt;` have been recommended for many years.",
      "sinceVersion": "14.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix `to_tsquery",
      "description": "Fix `to_tsquery()()` and `websearch_to_tsquery()()` to properly parse query text containing discarded tokens (Alexander Korotkov)\n          Certain discarded tokens, like underscore, caused the output of these functions to produce incorrect tsquery output, e.g., both `websearch_to_tsquery('\"pg_class pg\"')` and `to_tsquery('pg_class &lt;-&gt; pg')` used to output `( 'pg' &amp; 'class' ) &lt;-&gt; 'pg'`, but now both output `'pg' &lt;-&gt; 'class' &lt;-&gt; 'pg'`.",
      "sinceVersion": "14.0",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix `websearch_to_tsquery",
      "description": "Fix `websearch_to_tsquery()()` to properly parse multiple adjacent discarded tokens in quotes (Alexander Korotkov)\n          Previously, quoted text that contained multiple adjacent discarded tokens was treated as multiple tokens, causing incorrect tsquery output, e.g., `websearch_to_tsquery('\"aaa: bbb\"')` used to output `'aaa' &lt;2&gt; 'bbb'`, but now outputs `'aaa' &lt;-&gt; 'bbb'`.",
      "sinceVersion": "14.0",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Change `EXTRACT",
      "description": "Change `EXTRACT()()` to return type numeric instead of float8 (Peter Eisentraut)\n          This avoids loss-of-precision issues in some usages. The old behavior can still be obtained by using the old underlying function `date_part()()`.\n          Also, `EXTRACT(date)()` now throws an error for units that are not part of the date data type.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Change `var_samp",
      "description": "Change `var_samp()()` and `stddev_samp()()` with numeric parameters to return NULL when the input is a single NaN value (Tom Lane)\n          Previously `NaN` was returned.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Return false for `has_column_privilege",
      "description": "Return false for `has_column_privilege()()` checks on non-existent or dropped columns when using attribute numbers (Joe Conway)\n          Previously such attribute numbers returned an invalid-column error.",
      "sinceVersion": "14.0",
      "contributor": "Joe Conway"
    },
    {
      "title": "Fix handling of infinite window function ranges",
      "description": "Fix handling of infinite window function ranges (Tom Lane)\n          Previously window frame clauses like `'inf' PRECEDING AND 'inf' FOLLOWING` returned incorrect results.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove factorial operators `!` and `!!`, as well as function `numeric_fac",
      "description": "Remove factorial operators `!` and `!!`, as well as function `numeric_fac()()` (Mark Dilger)\n          The `factorial()()` function is still supported.",
      "sinceVersion": "14.0",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Disallow `factorial",
      "description": "Disallow `factorial()()` of negative numbers (Peter Eisentraut)\n          Previously such cases returned 1.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Remove support for postfix",
      "description": "Remove support for postfix (right-unary) operators (Mark Dilger)\n          pg_dump and pg_upgrade will warn if postfix operators are being dumped.",
      "sinceVersion": "14.0",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Allow `\\D` and `\\W` shorthands to match newlines in regular expression newline-sensitive mode",
      "description": "Allow `\\D` and `\\W` shorthands to match newlines in regular expression newline-sensitive mode (Tom Lane)\n          Previously they did not match newlines in this mode, but that disagrees with the behavior of other common regular expression engines. `[^[:digit:]]` or `[^[:word:]]` can be used to get the old behavior.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disregard constraints when matching regular expression back-references",
      "description": "Disregard constraints when matching regular expression back-references (Tom Lane)\n          For example, in `(^\\d+).*\\1`, the `^` constraint should be applied at the start of the string, but not when matching `\\1`.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow `\\w` as a range start or end in regular expression character classes",
      "description": "Disallow `\\w` as a range start or end in regular expression character classes (Tom Lane)\n          This previously was allowed but produced unexpected results.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Require custom server parameter names to use only characters that are valid in unquoted SQL identifiers",
      "description": "Require custom server parameter names to use only characters that are valid in unquoted SQL identifiers (Tom Lane)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change the default of the password_encryption server parameter to `scram-sha-256`",
      "description": "Change the default of the password_encryption server parameter to `scram-sha-256` (Peter Eisentraut)\n          Previously it was `md5`. All new passwords will be stored as SHA256 unless this server setting is changed or the password is specified in MD5 format. Also, the legacy (and undocumented) Boolean-like values which were previously synonyms for `md5` are no longer accepted.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Remove server parameter vacuum_cleanup_index_scale_factor",
      "description": "Remove server parameter vacuum_cleanup_index_scale_factor (Peter Geoghegan)\n          This setting was ignored starting in PostgreSQL version 13.3.",
      "sinceVersion": "14.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Remove server parameter operator_precedence_warning",
      "description": "Remove server parameter operator_precedence_warning (Tom Lane)\n          This setting was used for warning applications about PostgreSQL 9.5 changes.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Overhaul the specification of `clientcert` in pg_hba.conf",
      "description": "Overhaul the specification of `clientcert` in pg_hba.conf (Kyotaro Horiguchi)\n          Values `1`/`0`/`no-verify` are no longer supported; only the strings `verify-ca` and `verify-full` can be used. Also, disallow `verify-ca` if cert authentication is enabled since cert requires `verify-full` checking.",
      "sinceVersion": "14.0",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Remove support for SSL compression",
      "description": "Remove support for SSL compression (Daniel Gustafsson, Michael Paquier)\n          This was already disabled by default in previous PostgreSQL releases, and most modern OpenSSL and TLS versions no longer support it.",
      "sinceVersion": "14.0",
      "contributor": "Daniel Gustafsson, Michael Paquier"
    },
    {
      "title": "Remove server and libpq support for the version 2 wire protocol",
      "description": "Remove server and libpq support for the version 2 wire protocol (Heikki Linnakangas)\n          This was last used as the default in PostgreSQL 7.3 (released in 2002).",
      "sinceVersion": "14.0",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Disallow single-quoting of the language name in the CREATE/DROP LANGUAGE command",
      "description": "Disallow single-quoting of the language name in the CREATE/DROP LANGUAGE command (Peter Eisentraut)",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Remove the composite types that were formerly created for sequences and toast tables",
      "description": "Remove the composite types that were formerly created for sequences and toast tables (Tom Lane)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Process doubled quote marks in ecpg SQL command strings correctly",
      "description": "Process doubled quote marks in ecpg SQL command strings correctly (Tom Lane)\n          Previously `'abc''def'` was passed to the server as `'abc'def'`, and `\"abc\"\"def\"` was passed as `\"abc\"def\"`, causing syntax errors.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove contrib program pg_standby",
      "description": "Remove contrib program pg_standby (Justin Pryzby)",
      "sinceVersion": "14.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Prevent tablefunc's function `normal_rand",
      "description": "Prevent tablefunc's function `normal_rand()()` from accepting negative values (Ashutosh Bapat)\n          Negative values produced undesirable results.",
      "sinceVersion": "14.0",
      "contributor": "Ashutosh Bapat"
    },
    {
      "title": "Add predefined roles `pg_read_all_data` and `pg_write_all_data`",
      "description": "Add predefined roles `pg_read_all_data` and `pg_write_all_data` (Stephen Frost)\n            These non-login roles can be used to give read or write permission to all tables, views, and sequences.",
      "sinceVersion": "14.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Add predefined role `pg_database_owner` that contains only the current database's owner",
      "description": "Add predefined role `pg_database_owner` that contains only the current database's owner (Noah Misch)\n            This is especially useful in template databases.",
      "sinceVersion": "14.0",
      "contributor": "Noah Misch"
    },
    {
      "title": "Remove temporary files after backend crashes",
      "description": "Remove temporary files after backend crashes (Euler Taveira)\n            Previously, such files were retained for debugging purposes. If necessary, deletion can be disabled with the new server parameter remove_temp_files_after_crash.",
      "sinceVersion": "14.0",
      "contributor": "Euler Taveira"
    },
    {
      "title": "Allow long-running queries to be canceled if the client disconnects",
      "description": "Allow long-running queries to be canceled if the client disconnects (Sergey Cherkashin, Thomas Munro)\n            The server parameter client_connection_check_interval allows control over whether loss of connection is checked for intra-query. (This is supported on Linux and a few other operating systems.)",
      "sinceVersion": "14.0",
      "contributor": "Sergey Cherkashin, Thomas Munro"
    },
    {
      "title": "Add an optional timeout parameter to `pg_terminate_backend",
      "description": "Add an optional timeout parameter to `pg_terminate_backend()()` (Magnus Hagander)",
      "sinceVersion": "14.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Add Server Name Indication",
      "description": "Add Server Name Indication (SNI) in SSL connection packets (Peter Eisentraut)\n            This can be disabled by turning off client connection option `sslsni`.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow vacuum to more eagerly add deleted btree pages to the free space map",
      "description": "Allow vacuum to more eagerly add deleted btree pages to the free space map (Peter Geoghegan)\n              Previously vacuum could only add pages to the free space map that were marked as deleted by previous vacuums.",
      "sinceVersion": "14.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Allow vacuum to reclaim space used by unused trailing heap line pointers",
      "description": "Allow vacuum to reclaim space used by unused trailing heap line pointers (Matthias van de Meent, Peter Geoghegan)",
      "sinceVersion": "14.0",
      "contributor": "Matthias van de Meent, Peter Geoghegan"
    },
    {
      "title": "Allow vacuum to be more aggressive in removing dead rows during minimal-locking index operations",
      "description": "Allow vacuum to be more aggressive in removing dead rows during minimal-locking index operations (Álvaro Herrera)\n              Specifically, CREATE INDEX CONCURRENTLY and REINDEX CONCURRENTLY no longer limit the dead row removal of other relations.",
      "sinceVersion": "14.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Reduce the default value of vacuum_cost_page_miss to better reflect current hardware capabilities",
      "description": "Reduce the default value of vacuum_cost_page_miss to better reflect current hardware capabilities (Peter Geoghegan)",
      "sinceVersion": "14.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Add ability to skip vacuuming of TOAST tables",
      "description": "Add ability to skip vacuuming of TOAST tables (Nathan Bossart)\n              VACUUM now has a `PROCESS_TOAST` option which can be set to false to disable TOAST processing, and vacuumdb has a --no-process-toast option.",
      "sinceVersion": "14.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Have COPY FREEZE appropriately update page visibility bits",
      "description": "Have COPY FREEZE appropriately update page visibility bits (Anastasia Lubennikova, Pavan Deolasee, Jeff Janes)",
      "sinceVersion": "14.0",
      "contributor": "Anastasia Lubennikova, Pavan Deolasee, Jeff Janes"
    },
    {
      "title": "Cause vacuum operations to be more aggressive if the table is near xid or multixact wraparound",
      "description": "Cause vacuum operations to be more aggressive if the table is near xid or multixact wraparound (Masahiko Sawada, Peter Geoghegan)\n              This is controlled by vacuum_failsafe_age and vacuum_multixact_failsafe_age.",
      "sinceVersion": "14.0",
      "contributor": "Masahiko Sawada, Peter Geoghegan"
    },
    {
      "title": "Increase warning time and hard limit before transaction id and multi-transaction wraparound",
      "description": "Increase warning time and hard limit before transaction id and multi-transaction wraparound (Noah Misch)\n              This should reduce the possibility of failures that occur without having issued warnings about wraparound.",
      "sinceVersion": "14.0",
      "contributor": "Noah Misch"
    },
    {
      "title": "Add per-index information to autovacuum logging output",
      "description": "Add per-index information to autovacuum logging output (Masahiko Sawada)",
      "sinceVersion": "14.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Allow partitions to be detached in a non-blocking manner",
      "description": "Allow partitions to be detached in a non-blocking manner (Álvaro Herrera)\n              The syntax is ALTER TABLE ... DETACH PARTITION ... CONCURRENTLY, and FINALIZE.",
      "sinceVersion": "14.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ignore `COLLATE` clauses in partition boundary values",
      "description": "Ignore `COLLATE` clauses in partition boundary values (Tom Lane)\n              Previously any such clause had to match the collation of the partition key; but it's more consistent to consider that it's automatically coerced to the collation of the partition key.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow btree index additions to remove expired index entries to prevent page splits",
      "description": "Allow btree index additions to remove expired index entries to prevent page splits (Peter Geoghegan)\n              This is particularly helpful for reducing index bloat on tables whose indexed columns are frequently updated.",
      "sinceVersion": "14.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Allow BRIN indexes to record multiple min/max values per range",
      "description": "Allow BRIN indexes to record multiple min/max values per range (Tomas Vondra)\n              This is useful if there are groups of values in each page range.",
      "sinceVersion": "14.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Allow BRIN indexes to use bloom filters",
      "description": "Allow BRIN indexes to use bloom filters (Tomas Vondra)\n              This allows BRIN indexes to be used effectively with data that is not well-localized in the heap.",
      "sinceVersion": "14.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Allow SP-GiST indexes to contain `INCLUDE`'d columns",
      "description": "Allow SP-GiST indexes to contain `INCLUDE`'d columns (Pavel Borisov)",
      "sinceVersion": "14.0",
      "contributor": "Pavel Borisov"
    },
    {
      "title": "Allow hash lookup for `IN` clauses with many constants",
      "description": "Allow hash lookup for `IN` clauses with many constants (James Coleman, David Rowley)\n              Previously the code always sequentially scanned the list of values.",
      "sinceVersion": "14.0",
      "contributor": "James Coleman, David Rowley"
    },
    {
      "title": "Increase the number of places extended statistics can be used for `OR` clause estimation",
      "description": "Increase the number of places extended statistics can be used for `OR` clause estimation (Tomas Vondra, Dean Rasheed)",
      "sinceVersion": "14.0",
      "contributor": "Tomas Vondra, Dean Rasheed"
    },
    {
      "title": "Allow extended statistics on expressions",
      "description": "Allow extended statistics on expressions (Tomas Vondra)\n              This allows statistics on a group of expressions and columns, rather than only columns like previously. System view pg_stats_ext_exprs reports such statistics.",
      "sinceVersion": "14.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Allow efficient heap scanning of a range of TIDs",
      "description": "Allow efficient heap scanning of a range of TIDs (Edmund Horner, David Rowley)\n              Previously a sequential scan was required for non-equality TID specifications.",
      "sinceVersion": "14.0",
      "contributor": "Edmund Horner, David Rowley"
    },
    {
      "title": "Fix EXPLAIN CREATE TABLE AS and EXPLAIN CREATE MATERIALIZED VIEW to honor `IF NOT EXISTS`",
      "description": "Fix EXPLAIN CREATE TABLE AS and EXPLAIN CREATE MATERIALIZED VIEW to honor `IF NOT EXISTS` (Bharath Rupireddy)\n              Previously, if the object already existed, EXPLAIN would fail.",
      "sinceVersion": "14.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Add executor method to memoize results from the inner side of a nested-loop join",
      "description": "Add executor method to memoize results from the inner side of a nested-loop join (David Rowley)\n              This is useful if only a small percentage of rows is checked on the inner side. It can be disabled via server parameter enable_memoize.",
      "sinceVersion": "14.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Allow window functions to perform incremental sorts",
      "description": "Allow window functions to perform incremental sorts (David Rowley)",
      "sinceVersion": "14.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Allow a query referencing multiple foreign tables to perform foreign table scans in parallel",
      "description": "Allow a query referencing multiple foreign tables to perform foreign table scans in parallel (Robert Haas, Kyotaro Horiguchi, Thomas Munro, Etsuro Fujita)\n              postgres_fdw supports this type of scan if `async_capable` is set.",
      "sinceVersion": "14.0",
      "contributor": "Robert Haas, Kyotaro Horiguchi, Thomas Munro, Etsuro Fujita"
    },
    {
      "title": "Allow analyze to do page prefetching",
      "description": "Allow analyze to do page prefetching (Stephen Frost)\n              This is controlled by maintenance_io_concurrency.",
      "sinceVersion": "14.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Add ability to use LZ4 compression on TOAST data",
      "description": "Add ability to use LZ4 compression on TOAST data (Dilip Kumar)\n              This can be set at the column level, or set as a default via server parameter default_toast_compression. The server must be compiled with --with-lz4 to support this feature. The default setting is still pglz.",
      "sinceVersion": "14.0",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "If server parameter compute_query_id is enabled, display the query id in pg_stat_activity, EXPLAIN VERBOSE, csvlog, and optionally in log_line_prefix",
      "description": "If server parameter compute_query_id is enabled, display the query id in pg_stat_activity, EXPLAIN VERBOSE, csvlog, and optionally in log_line_prefix (Julien Rouhaud)\n              A query id computed by an extension will also be displayed.",
      "sinceVersion": "14.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Improve logging of auto-vacuum and auto-analyze",
      "description": "Improve logging of auto-vacuum and auto-analyze (Stephen Frost, Jakub Wartak)\n              This reports I/O timings for auto-vacuum and auto-analyze if track_io_timing is enabled. Also, report buffer read and dirty rates for auto-analyze.",
      "sinceVersion": "14.0",
      "contributor": "Stephen Frost, Jakub Wartak"
    },
    {
      "title": "Add information about the original user name supplied by the client to the output of log_connections",
      "description": "Add information about the original user name supplied by the client to the output of log_connections (Jacob Champion)",
      "sinceVersion": "14.0",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Add system view pg_stat_progress_copy to report COPY progress",
      "description": "Add system view pg_stat_progress_copy to report COPY progress (Josef Šimánek, Matthias van de Meent)",
      "sinceVersion": "14.0",
      "contributor": "Josef Šimánek, Matthias van de Meent"
    },
    {
      "title": "Add system view pg_stat_wal to report WAL activity",
      "description": "Add system view pg_stat_wal to report WAL activity (Masahiro Ikeda)",
      "sinceVersion": "14.0",
      "contributor": "Masahiro Ikeda"
    },
    {
      "title": "Add system view pg_stat_replication_slots to report replication slot activity",
      "description": "Add system view pg_stat_replication_slots to report replication slot activity (Masahiko Sawada, Amit Kapila, Vignesh C)\n              The function `pg_stat_reset_replication_slot()()` resets slot statistics.",
      "sinceVersion": "14.0",
      "contributor": "Masahiko Sawada, Amit Kapila, Vignesh C"
    },
    {
      "title": "Add system view pg_backend_memory_contexts to report session memory usage",
      "description": "Add system view pg_backend_memory_contexts to report session memory usage (Atsushi Torikoshi, Fujii Masao)",
      "sinceVersion": "14.0",
      "contributor": "Atsushi Torikoshi, Fujii Masao"
    },
    {
      "title": "Add function `pg_log_backend_memory_contexts",
      "description": "Add function `pg_log_backend_memory_contexts()()` to output the memory contexts of arbitrary backends (Atsushi Torikoshi)",
      "sinceVersion": "14.0",
      "contributor": "Atsushi Torikoshi"
    },
    {
      "title": "Add session statistics to the pg_stat_database system view",
      "description": "Add session statistics to the pg_stat_database system view (Laurenz Albe)",
      "sinceVersion": "14.0",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Add columns to pg_prepared_statements to report generic and custom plan counts",
      "description": "Add columns to pg_prepared_statements to report generic and custom plan counts (Atsushi Torikoshi, Kyotaro Horiguchi)",
      "sinceVersion": "14.0",
      "contributor": "Atsushi Torikoshi, Kyotaro Horiguchi"
    },
    {
      "title": "Add lock wait start time to pg_locks",
      "description": "Add lock wait start time to pg_locks (Atsushi Torikoshi)",
      "sinceVersion": "14.0",
      "contributor": "Atsushi Torikoshi"
    },
    {
      "title": "Make the archiver process visible in pg_stat_activity",
      "description": "Make the archiver process visible in pg_stat_activity (Kyotaro Horiguchi)",
      "sinceVersion": "14.0",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Add wait event `WalReceiverExit` to report WAL receiver exit wait time",
      "description": "Add wait event `WalReceiverExit` to report WAL receiver exit wait time (Fujii Masao)",
      "sinceVersion": "14.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Implement information schema view routine_column_usage to track columns referenced by function and procedure default expressions",
      "description": "Implement information schema view routine_column_usage to track columns referenced by function and procedure default expressions (Peter Eisentraut)",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow an SSL certificate's distinguished name",
      "description": "Allow an SSL certificate's distinguished name (DN) to be matched for client certificate authentication (Andrew Dunstan)\n              The new pg_hba.conf option `clientname=DN` allows comparison with certificate attributes beyond the `CN` and can be combined with ident maps.",
      "sinceVersion": "14.0",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Allow pg_hba.conf and pg_ident.conf records to span multiple lines",
      "description": "Allow pg_hba.conf and pg_ident.conf records to span multiple lines (Fabien Coelho)\n              A backslash at the end of a line allows record contents to be continued on the next line.",
      "sinceVersion": "14.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Allow the specification of a certificate revocation list",
      "description": "Allow the specification of a certificate revocation list (CRL) directory (Kyotaro Horiguchi)\n              This is controlled by server parameter ssl_crl_dir and libpq connection option sslcrldir. Previously only single CRL files could be specified.",
      "sinceVersion": "14.0",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Allow passwords of an arbitrary length",
      "description": "Allow passwords of an arbitrary length (Tom Lane, Nathan Bossart)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane, Nathan Bossart"
    },
    {
      "title": "Add server parameter idle_session_timeout to close idle sessions",
      "description": "Add server parameter idle_session_timeout to close idle sessions (Li Japin)\n              This is similar to idle_in_transaction_session_timeout.",
      "sinceVersion": "14.0",
      "contributor": "Li Japin"
    },
    {
      "title": "Change checkpoint_completion_target default to 0.9",
      "description": "Change checkpoint_completion_target default to 0.9 (Stephen Frost)\n              The previous default was 0.5.",
      "sinceVersion": "14.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Allow `%P` in log_line_prefix to report the parallel group leader's PID for a parallel worker",
      "description": "Allow `%P` in log_line_prefix to report the parallel group leader's PID for a parallel worker (Justin Pryzby)",
      "sinceVersion": "14.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Allow unix_socket_directories to specify paths as individual, comma-separated quoted strings",
      "description": "Allow unix_socket_directories to specify paths as individual, comma-separated quoted strings (Ian Lawrence Barwick)\n              Previously all the paths had to be in a single quoted string.",
      "sinceVersion": "14.0",
      "contributor": "Ian Lawrence Barwick"
    },
    {
      "title": "Allow startup allocation of dynamic shared memory",
      "description": "Allow startup allocation of dynamic shared memory (Thomas Munro)\n              This is controlled by min_dynamic_shared_memory. This allows more use of huge pages.",
      "sinceVersion": "14.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add server parameter huge_page_size to control the size of huge pages used on Linux",
      "description": "Add server parameter huge_page_size to control the size of huge pages used on Linux (Odin Ugedal)",
      "sinceVersion": "14.0",
      "contributor": "Odin Ugedal"
    },
    {
      "title": "Allow standby servers to be rewound via pg_rewind",
      "description": "Allow standby servers to be rewound via pg_rewind (Heikki Linnakangas)",
      "sinceVersion": "14.0",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Allow the restore_command setting to be changed during a server reload",
      "description": "Allow the restore_command setting to be changed during a server reload (Sergei Kornilov)\n            You can also set restore_command to an empty string and reload to force recovery to only read from the pg_wal directory.",
      "sinceVersion": "14.0",
      "contributor": "Sergei Kornilov"
    },
    {
      "title": "Add server parameter log_recovery_conflict_waits to report long recovery conflict wait times",
      "description": "Add server parameter log_recovery_conflict_waits to report long recovery conflict wait times (Bertrand Drouvot, Masahiko Sawada)",
      "sinceVersion": "14.0",
      "contributor": "Bertrand Drouvot, Masahiko Sawada"
    },
    {
      "title": "Pause recovery on a hot standby server if the primary changes its parameters in a way that prevents replay on the standby",
      "description": "Pause recovery on a hot standby server if the primary changes its parameters in a way that prevents replay on the standby (Peter Eisentraut)\n            Previously the standby would shut down immediately.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add function `pg_get_wal_replay_pause_state",
      "description": "Add function `pg_get_wal_replay_pause_state()()` to report the recovery state (Dilip Kumar)\n            It gives more detailed information than `pg_is_wal_replay_paused()()`, which still exists.",
      "sinceVersion": "14.0",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Add new read-only server parameter in_hot_standby",
      "description": "Add new read-only server parameter in_hot_standby (Haribabu Kommi, Greg Nancarrow, Tom Lane)\n            This allows clients to easily detect whether they are connected to a hot standby server.",
      "sinceVersion": "14.0",
      "contributor": "Haribabu Kommi, Greg Nancarrow, Tom Lane"
    },
    {
      "title": "Add function `pg_xact_commit_timestamp_origin",
      "description": "Add function `pg_xact_commit_timestamp_origin()()` to return the commit timestamp and replication origin of the specified transaction (Movead Li)",
      "sinceVersion": "14.0",
      "contributor": "Movead Li"
    },
    {
      "title": "Add the replication origin to the record returned by `pg_last_committed_xact",
      "description": "Add the replication origin to the record returned by `pg_last_committed_xact()()` (Movead Li)",
      "sinceVersion": "14.0",
      "contributor": "Movead Li"
    },
    {
      "title": "Allow replication origin functions to be controlled using standard function permission controls",
      "description": "Allow replication origin functions to be controlled using standard function permission controls (Martín Marqués)\n            Previously these functions could only be executed by superusers, and this is still the default.",
      "sinceVersion": "14.0",
      "contributor": "Martín Marqués"
    },
    {
      "title": "Allow logical replication to stream long in-progress transactions to subscribers",
      "description": "Allow logical replication to stream long in-progress transactions to subscribers (Dilip Kumar, Amit Kapila, Ajin Cherian, Tomas Vondra, Nikhil Sontakke, Stas Kelvich)\n              Previously transactions that exceeded logical_decoding_work_mem were written to disk until the transaction completed.",
      "sinceVersion": "14.0",
      "contributor": "Dilip Kumar, Amit Kapila, Ajin Cherian, Tomas Vondra, Nikhil Sontakke, Stas Kelvich"
    },
    {
      "title": "Enhance the logical replication API to allow streaming large in-progress transactions",
      "description": "Enhance the logical replication API to allow streaming large in-progress transactions (Tomas Vondra, Dilip Kumar, Amit Kapila)\n              The output functions begin with `stream`. test_decoding also supports these.",
      "sinceVersion": "14.0",
      "contributor": "Tomas Vondra, Dilip Kumar, Amit Kapila"
    },
    {
      "title": "Allow multiple transactions during table sync in logical replication",
      "description": "Allow multiple transactions during table sync in logical replication (Peter Smith, Amit Kapila, Takamichi Osumi)",
      "sinceVersion": "14.0",
      "contributor": "Peter Smith, Amit Kapila, Takamichi Osumi"
    },
    {
      "title": "Immediately WAL-log subtransaction and top-level XID association",
      "description": "Immediately WAL-log subtransaction and top-level XID association (Tomas Vondra, Dilip Kumar, Amit Kapila)\n              This is useful for logical decoding.",
      "sinceVersion": "14.0",
      "contributor": "Tomas Vondra, Dilip Kumar, Amit Kapila"
    },
    {
      "title": "Enhance logical decoding APIs to handle two-phase commits",
      "description": "Enhance logical decoding APIs to handle two-phase commits (Ajin Cherian, Amit Kapila, Nikhil Sontakke, Stas Kelvich)\n              This is controlled via `pg_create_logical_replication_slot()()`.",
      "sinceVersion": "14.0",
      "contributor": "Ajin Cherian, Amit Kapila, Nikhil Sontakke, Stas Kelvich"
    },
    {
      "title": "Add cache invalidation messages to the WAL during command completion when using logical replication",
      "description": "Add cache invalidation messages to the WAL during command completion when using logical replication (Dilip Kumar, Tomas Vondra, Amit Kapila)\n              This allows logical streaming of in-progress transactions. When logical replication is disabled, invalidation messages are generated only at transaction completion.",
      "sinceVersion": "14.0",
      "contributor": "Dilip Kumar, Tomas Vondra, Amit Kapila"
    },
    {
      "title": "Allow logical decoding to more efficiently process cache invalidation messages",
      "description": "Allow logical decoding to more efficiently process cache invalidation messages (Dilip Kumar)\n              This allows logical decoding to work efficiently in presence of a large amount of DDL.",
      "sinceVersion": "14.0",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Allow control over whether logical decoding messages are sent to the replication stream",
      "description": "Allow control over whether logical decoding messages are sent to the replication stream (David Pirotte, Euler Taveira)",
      "sinceVersion": "14.0",
      "contributor": "David Pirotte, Euler Taveira"
    },
    {
      "title": "Allow logical decoding to be filtered by xid",
      "description": "Allow logical decoding to be filtered by xid (Markus Wanner)",
      "sinceVersion": "14.0",
      "contributor": "Markus Wanner"
    },
    {
      "title": "Reduce the number of keywords that can't be used as column labels without `AS`",
      "description": "Reduce the number of keywords that can't be used as column labels without `AS` (Mark Dilger)\n            There are now 90% fewer restricted keywords.",
      "sinceVersion": "14.0",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Allow an alias to be specified for `JOIN`'s `USING` clause",
      "description": "Allow an alias to be specified for `JOIN`'s `USING` clause (Peter Eisentraut)\n            The alias is created by writing `AS` after the `USING` clause. It can be used as a table qualification for the merged `USING` columns.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Properly handle `DEFAULT` entries in multi-row `VALUES` lists in INSERT",
      "description": "Properly handle `DEFAULT` entries in multi-row `VALUES` lists in INSERT (Dean Rasheed)\n            Such cases used to throw an error.",
      "sinceVersion": "14.0",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Add SQL-standard `SEARCH` and `CYCLE` clauses for common table expressions",
      "description": "Add SQL-standard `SEARCH` and `CYCLE` clauses for common table expressions (Peter Eisentraut)\n            The same results could be accomplished using existing syntax, but much less conveniently.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow column names in the `WHERE` clause of `ON CONFLICT` to be table-qualified",
      "description": "Allow column names in the `WHERE` clause of `ON CONFLICT` to be table-qualified (Tom Lane)\n            Only the target table can be referenced, however.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow REFRESH MATERIALIZED VIEW to use parallelism",
      "description": "Allow REFRESH MATERIALIZED VIEW to use parallelism (Bharath Rupireddy)",
      "sinceVersion": "14.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Allow REINDEX to process all child tables or indexes of a partitioned relation",
      "description": "Allow REINDEX to process all child tables or indexes of a partitioned relation (Justin Pryzby, Michael Paquier)",
      "sinceVersion": "14.0",
      "contributor": "Justin Pryzby, Michael Paquier"
    },
    {
      "title": "Allow index commands using CONCURRENTLY to avoid waiting for the completion of other operations using CONCURRENTLY",
      "description": "Allow index commands using CONCURRENTLY to avoid waiting for the completion of other operations using CONCURRENTLY (Álvaro Herrera)",
      "sinceVersion": "14.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Preserve SQL standard syntax for SQL-defined functions in view definitions",
      "description": "Preserve SQL standard syntax for SQL-defined functions in view definitions (Tom Lane)\n            Previously, calls to SQL-standard functions such as `EXTRACT()()` were shown in plain function-call syntax. The original syntax is now preserved when displaying a view or rule.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add the SQL-standard clause `GRANTED BY` to GRANT and REVOKE",
      "description": "Add the SQL-standard clause `GRANTED BY` to GRANT and REVOKE (Peter Eisentraut)",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add `OR REPLACE` option for CREATE TRIGGER",
      "description": "Add `OR REPLACE` option for CREATE TRIGGER (Takamichi Osumi)\n            This allows pre-existing triggers to be conditionally replaced.",
      "sinceVersion": "14.0",
      "contributor": "Takamichi Osumi"
    },
    {
      "title": "Add primary keys, unique constraints, and foreign keys to system catalogs",
      "description": "Add primary keys, unique constraints, and foreign keys to system catalogs (Peter Eisentraut)\n            These changes help GUI tools analyze the system catalogs. The existing unique indexes of catalogs now have associated `UNIQUE` or `PRIMARY KEY` constraints. Foreign key relationships are not actually stored or implemented as constraints, but can be obtained for display from the function pg_get_catalog_foreign_keys().",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow `CURRENT_ROLE` every place `CURRENT_USER` is accepted",
      "description": "Allow `CURRENT_ROLE` every place `CURRENT_USER` is accepted (Peter Eisentraut)",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow extensions and built-in data types to implement subscripting",
      "description": "Allow extensions and built-in data types to implement subscripting (Dmitry Dolgov)\n            Previously subscript handling was hard-coded into the server, so that subscripting could only be applied to array types. This change allows subscript notation to be used to extract or assign portions of a value of any type for which the concept makes sense.",
      "sinceVersion": "14.0",
      "contributor": "Dmitry Dolgov"
    },
    {
      "title": "Allow subscripting of JSONB",
      "description": "Allow subscripting of JSONB (Dmitry Dolgov)\n            JSONB subscripting can be used to extract and assign to portions of JSONB documents.",
      "sinceVersion": "14.0",
      "contributor": "Dmitry Dolgov"
    },
    {
      "title": "Add support for multirange data types",
      "description": "Add support for multirange data types (Paul Jungwirth, Alexander Korotkov)\n            These are like range data types, but they allow the specification of multiple, ordered, non-overlapping ranges. An associated multirange type is automatically created for every range type.",
      "sinceVersion": "14.0",
      "contributor": "Paul Jungwirth, Alexander Korotkov"
    },
    {
      "title": "Add support for the stemming of languages Armenian, Basque, Catalan, Hindi, Serbian, and Yiddish",
      "description": "Add support for the stemming of languages Armenian, Basque, Catalan, Hindi, Serbian, and Yiddish (Peter Eisentraut)",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow tsearch data files to have unlimited line lengths",
      "description": "Allow tsearch data files to have unlimited line lengths (Tom Lane)\n            The previous limit was 4K bytes. Also remove function `t_readline()()`.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add support for `Infinity` and `-Infinity` values in the numeric data type",
      "description": "Add support for `Infinity` and `-Infinity` values in the numeric data type (Tom Lane)\n            Floating-point data types already supported these.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add point operators `&lt;&lt;|` and `|&gt;&gt;` representing strictly above/below tests",
      "description": "Add point operators `&lt;&lt;|` and `|&gt;&gt;` representing strictly above/below tests (Emre Hasegeli)\n            Previously these were called `&gt;^` and `&lt;^`, but that naming is inconsistent with other geometric data types. The old names remain available, but may someday be removed.",
      "sinceVersion": "14.0",
      "contributor": "Emre Hasegeli"
    },
    {
      "title": "Add operators to add and subtract LSN and numeric",
      "description": "Add operators to add and subtract LSN and numeric (byte) values (Fujii Masao)",
      "sinceVersion": "14.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Allow binary data transfer to be more forgiving of array and record OID mismatches",
      "description": "Allow binary data transfer to be more forgiving of array and record OID mismatches (Tom Lane)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Create composite array types for system catalogs",
      "description": "Create composite array types for system catalogs (Wenjing Zeng)\n            User-defined relations have long had composite types associated with them, and also array types over those composite types. System catalogs now do as well. This change also fixes an inconsistency that creating a user-defined table in single-user mode would fail to create a composite array type.",
      "sinceVersion": "14.0",
      "contributor": "Wenjing Zeng"
    },
    {
      "title": "Allow procedures to have `OUT` parameters",
      "description": "Allow procedures to have `OUT` parameters (Peter Eisentraut)",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow some array functions to operate on a mix of compatible data types",
      "description": "Allow some array functions to operate on a mix of compatible data types (Tom Lane)\n            The functions `array_append()()`, `array_prepend()()`, `array_cat()()`, `array_position()()`, `array_positions()()`, `array_remove()()`, `array_replace()()`, and `width_bucket()()` now take anycompatiblearray instead of anyarray arguments. This makes them less fussy about exact matches of argument types.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add SQL-standard `trim_array",
      "description": "Add SQL-standard `trim_array()()` function (Vik Fearing)\n            This could already be done with array slices, but less easily.",
      "sinceVersion": "14.0",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Add bytea equivalents of `ltrim",
      "description": "Add bytea equivalents of `ltrim()()` and `rtrim()()` (Joel Jacobson)",
      "sinceVersion": "14.0",
      "contributor": "Joel Jacobson"
    },
    {
      "title": "Support negative indexes in `split_part",
      "description": "Support negative indexes in `split_part()()` (Nikhil Benesch)\n            Negative values start from the last field and count backward.",
      "sinceVersion": "14.0",
      "contributor": "Nikhil Benesch"
    },
    {
      "title": "Add `string_to_table",
      "description": "Add `string_to_table()()` function to split a string on delimiters (Pavel Stehule)\n            This is similar to the `regexp_split_to_table()()` function.",
      "sinceVersion": "14.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Add `unistr",
      "description": "Add `unistr()()` function to allow Unicode characters to be specified as backslash-hex escapes in strings (Pavel Stehule)\n            This is similar to how Unicode can be specified in literal strings.",
      "sinceVersion": "14.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Add `bit_xor",
      "description": "Add `bit_xor()()` XOR aggregate function (Alexey Bashtanov)",
      "sinceVersion": "14.0",
      "contributor": "Alexey Bashtanov"
    },
    {
      "title": "Add function `bit_count",
      "description": "Add function `bit_count()()` to return the number of bits set in a bit or byte string (David Fetter)",
      "sinceVersion": "14.0",
      "contributor": "David Fetter"
    },
    {
      "title": "Add `date_bin",
      "description": "Add `date_bin()()` function (John Naylor)\n            This function “bins” input timestamps, grouping them into intervals of a uniform length aligned with a specified origin.",
      "sinceVersion": "14.0",
      "contributor": "John Naylor"
    },
    {
      "title": "Allow `make_timestamp",
      "description": "Allow `make_timestamp()()`/`make_timestamptz()()` to accept negative years (Peter Eisentraut)\n            Negative values are interpreted as `BC` years.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add newer regular expression `substring",
      "description": "Add newer regular expression `substring()()` syntax (Peter Eisentraut)\n            The new SQL-standard syntax is `SUBSTRING(text SIMILAR pattern ESCAPE escapechar)`. The previous standard syntax was `SUBSTRING(text FROM pattern FOR escapechar)`, which is still accepted by PostgreSQL.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow complemented character class escapes \\D, `\\S`, and `\\W` within regular expression brackets",
      "description": "Allow complemented character class escapes \\D, `\\S`, and `\\W` within regular expression brackets (Tom Lane)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add `[[:word:]]` as a regular expression character class, equivalent to `\\w`",
      "description": "Add `[[:word:]]` as a regular expression character class, equivalent to `\\w` (Tom Lane)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow more flexible data types for default values of `lead",
      "description": "Allow more flexible data types for default values of `lead()()` and `lag()()` window functions (Vik Fearing)",
      "sinceVersion": "14.0",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Make non-zero floating-point values divided by infinity return zero",
      "description": "Make non-zero floating-point values divided by infinity return zero (Kyotaro Horiguchi)\n            Previously such operations produced underflow errors.",
      "sinceVersion": "14.0",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Make floating-point division of NaN by zero return NaN",
      "description": "Make floating-point division of NaN by zero return NaN (Tom Lane)\n            Previously this returned an error.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cause `exp",
      "description": "Cause `exp()()` and `power()()` for negative-infinity exponents to return zero (Tom Lane)\n            Previously they often returned underflow errors.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve the accuracy of geometric computations involving infinity",
      "description": "Improve the accuracy of geometric computations involving infinity (Tom Lane)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change `pg_describe_object",
      "description": "Change `pg_describe_object()()`, `pg_identify_object()()`, and `pg_identify_object_as_address()()` to always report helpful error messages for non-existent objects (Michael Paquier)",
      "sinceVersion": "14.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Improve PL/pgSQL's expression and assignment parsing",
      "description": "Improve PL/pgSQL's expression and assignment parsing (Tom Lane)\n            This change allows assignment to array slices and nested record fields.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow plpgsql's `RETURN QUERY` to execute its query using parallelism",
      "description": "Allow plpgsql's `RETURN QUERY` to execute its query using parallelism (Tom Lane)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add pipeline mode to libpq",
      "description": "Add pipeline mode to libpq (Craig Ringer, Matthieu Garrigues, Álvaro Herrera)\n            This allows multiple queries to be sent, only waiting for completion when a specific synchronization message is sent.",
      "sinceVersion": "14.0",
      "contributor": "Craig Ringer, Matthieu Garrigues, Álvaro Herrera"
    },
    {
      "title": "Enhance libpq's target_session_attrs parameter options",
      "description": "Enhance libpq's target_session_attrs parameter options (Haribabu Kommi, Greg Nancarrow, Vignesh C, Tom Lane)\n            The new options are `read-only`, `primary`, `standby`, and `prefer-standby`.",
      "sinceVersion": "14.0",
      "contributor": "Haribabu Kommi, Greg Nancarrow, Vignesh C, Tom Lane"
    },
    {
      "title": "Improve the output format of libpq's `PQtrace",
      "description": "Improve the output format of libpq's `PQtrace()()` (Aya Iwata, Álvaro Herrera)",
      "sinceVersion": "14.0",
      "contributor": "Aya Iwata, Álvaro Herrera"
    },
    {
      "title": "Allow an ECPG SQL identifier to be linked to a specific connection",
      "description": "Allow an ECPG SQL identifier to be linked to a specific connection (Hayato Kuroda)\n            This is done via `DECLARE ... STATEMENT`.",
      "sinceVersion": "14.0",
      "contributor": "Hayato Kuroda"
    },
    {
      "title": "Allow vacuumdb to skip index cleanup and truncation",
      "description": "Allow vacuumdb to skip index cleanup and truncation (Nathan Bossart)\n            The options are --no-index-cleanup and --no-truncate.",
      "sinceVersion": "14.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Allow pg_dump to dump only certain extensions",
      "description": "Allow pg_dump to dump only certain extensions (Guillaume Lelarge)\n            This is controlled by option --extension.",
      "sinceVersion": "14.0",
      "contributor": "Guillaume Lelarge"
    },
    {
      "title": "Add pgbench `permute",
      "description": "Add pgbench `permute()()` function to randomly shuffle values (Fabien Coelho, Hironobu Suzuki, Dean Rasheed)",
      "sinceVersion": "14.0",
      "contributor": "Fabien Coelho, Hironobu Suzuki, Dean Rasheed"
    },
    {
      "title": "Include disconnection times in the reconnection overhead measured by pgbench with -C",
      "description": "Include disconnection times in the reconnection overhead measured by pgbench with -C (Yugo Nagata)",
      "sinceVersion": "14.0",
      "contributor": "Yugo Nagata"
    },
    {
      "title": "Allow multiple verbose option specifications",
      "description": "Allow multiple verbose option specifications (-v) to increase the logging verbosity (Tom Lane)\n            This behavior is supported by pg_dump, pg_dumpall, and pg_restore.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow psql's `\\df` and `\\do` commands to specify function and operator argument types",
      "description": "Allow psql's `\\df` and `\\do` commands to specify function and operator argument types (Greg Sabino Mullane, Tom Lane)\n              This helps reduce the number of matches printed for overloaded names.",
      "sinceVersion": "14.0",
      "contributor": "Greg Sabino Mullane, Tom Lane"
    },
    {
      "title": "Add an access method column to psql's `\\d[i|m|t]+` output",
      "description": "Add an access method column to psql's `\\d[i|m|t]+` output (Georgios Kokolatos)",
      "sinceVersion": "14.0",
      "contributor": "Georgios Kokolatos"
    },
    {
      "title": "Allow psql's `\\dt` and `\\di` to show TOAST tables and their indexes",
      "description": "Allow psql's `\\dt` and `\\di` to show TOAST tables and their indexes (Justin Pryzby)",
      "sinceVersion": "14.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Add psql command `\\dX` to list extended statistics objects",
      "description": "Add psql command `\\dX` to list extended statistics objects (Tatsuro Yamada)",
      "sinceVersion": "14.0",
      "contributor": "Tatsuro Yamada"
    },
    {
      "title": "Fix psql's `\\dT` to understand array syntax and backend grammar aliases, like `int` for `integer`",
      "description": "Fix psql's `\\dT` to understand array syntax and backend grammar aliases, like `int` for `integer` (Greg Sabino Mullane, Tom Lane)",
      "sinceVersion": "14.0",
      "contributor": "Greg Sabino Mullane, Tom Lane"
    },
    {
      "title": "When editing the previous query or a file with psql's `\\e`, or using `\\ef` and `\\ev`, ignore the results if the editor exits without saving",
      "description": "When editing the previous query or a file with psql's `\\e`, or using `\\ef` and `\\ev`, ignore the results if the editor exits without saving (Laurenz Albe)\n              Previously, such edits would load the previous query into the query buffer, and typically execute it immediately. This was deemed to be probably not what the user wants.",
      "sinceVersion": "14.0",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Improve tab completion",
      "description": "Improve tab completion (Vignesh C, Michael Paquier, Justin Pryzby, Georgios Kokolatos, Julien Rouhaud)",
      "sinceVersion": "14.0",
      "contributor": "Vignesh C, Michael Paquier, Justin Pryzby, Georgios Kokolatos, Julien Rouhaud"
    },
    {
      "title": "Add command-line utility pg_amcheck to simplify running contrib/amcheck tests on many relations",
      "description": "Add command-line utility pg_amcheck to simplify running contrib/amcheck tests on many relations (Mark Dilger)",
      "sinceVersion": "14.0",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Add --no-instructions option to initdb",
      "description": "Add --no-instructions option to initdb (Magnus Hagander)\n            This suppresses the server startup instructions that are normally printed.",
      "sinceVersion": "14.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Stop pg_upgrade from creating analyze_new_cluster script",
      "description": "Stop pg_upgrade from creating analyze_new_cluster script (Magnus Hagander)\n            Instead, give comparable vacuumdb instructions.",
      "sinceVersion": "14.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Remove support for the postmaster -o option",
      "description": "Remove support for the postmaster -o option (Magnus Hagander)\n            This option was unnecessary since all passed options could already be specified directly.",
      "sinceVersion": "14.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Rename \"Default Roles\" to \"Predefined Roles\"",
      "description": "Rename \"Default Roles\" to \"Predefined Roles\" (Bruce Momjian, Stephen Frost)",
      "sinceVersion": "14.0",
      "contributor": "Bruce Momjian, Stephen Frost"
    },
    {
      "title": "Add documentation for the `factorial",
      "description": "Add documentation for the `factorial()()` function (Peter Eisentraut)\n            With the removal of the ! operator in this release, `factorial()()` is the only built-in way to compute a factorial.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add configure option `--with-ssl={openssl}` to allow future choice of the SSL library to use",
      "description": "Add configure option `--with-ssl={openssl}` to allow future choice of the SSL library to use (Daniel Gustafsson, Michael Paquier)\n            The spelling --with-openssl is kept for compatibility.",
      "sinceVersion": "14.0",
      "contributor": "Daniel Gustafsson, Michael Paquier"
    },
    {
      "title": "Add support for abstract Unix-domain sockets",
      "description": "Add support for abstract Unix-domain sockets (Peter Eisentraut)\n            This is currently supported on Linux and Windows.",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow Windows to properly handle files larger than four gigabytes",
      "description": "Allow Windows to properly handle files larger than four gigabytes (Juan José Santamaría Flecha)\n            For example this allows COPY, WAL files, and relation segment files to be larger than four gigabytes.",
      "sinceVersion": "14.0",
      "contributor": "Juan José Santamaría Flecha"
    },
    {
      "title": "Add server parameter debug_discard_caches to control cache flushing for test purposes",
      "description": "Add server parameter debug_discard_caches to control cache flushing for test purposes (Craig Ringer)\n            Previously this behavior could only be set at compile time. To invoke it during initdb, use the new option --discard-caches.",
      "sinceVersion": "14.0",
      "contributor": "Craig Ringer"
    },
    {
      "title": "Various improvements in valgrind error detection ability",
      "description": "Various improvements in valgrind error detection ability (Álvaro Herrera, Peter Geoghegan)",
      "sinceVersion": "14.0",
      "contributor": "Álvaro Herrera, Peter Geoghegan"
    },
    {
      "title": "Add a test module for the regular expression package",
      "description": "Add a test module for the regular expression package (Tom Lane)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add support for LLVM version 12",
      "description": "Add support for LLVM version 12 (Andres Freund)",
      "sinceVersion": "14.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Change SHA1, SHA2, and MD5 hash computations to use the OpenSSL EVP API",
      "description": "Change SHA1, SHA2, and MD5 hash computations to use the OpenSSL EVP API (Michael Paquier)\n            This is more modern and supports FIPS mode.",
      "sinceVersion": "14.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Remove separate build-time control over the choice of random number generator",
      "description": "Remove separate build-time control over the choice of random number generator (Daniel Gustafsson)\n            This is now always determined by the choice of SSL library.",
      "sinceVersion": "14.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Add direct conversion routines between EUC_TW and Big5 encodings",
      "description": "Add direct conversion routines between EUC_TW and Big5 encodings (Heikki Linnakangas)",
      "sinceVersion": "14.0",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Add collation version support for FreeBSD",
      "description": "Add collation version support for FreeBSD (Thomas Munro)",
      "sinceVersion": "14.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add amadjustmembers to the index access method API",
      "description": "Add amadjustmembers to the index access method API (Tom Lane)\n            This allows an index access method to provide validity checking during creation of a new operator class or family.",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow subscripting of hstore values",
      "description": "Allow subscripting of hstore values (Tom Lane, Dmitry Dolgov)",
      "sinceVersion": "14.0",
      "contributor": "Tom Lane, Dmitry Dolgov"
    },
    {
      "title": "Allow GiST/GIN pg_trgm indexes to do equality lookups",
      "description": "Allow GiST/GIN pg_trgm indexes to do equality lookups (Julien Rouhaud)\n            This is similar to `LIKE` except no wildcards are honored.",
      "sinceVersion": "14.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Allow the cube data type to be transferred in binary mode",
      "description": "Allow the cube data type to be transferred in binary mode (KaiGai Kohei)",
      "sinceVersion": "14.0",
      "contributor": "KaiGai Kohei"
    },
    {
      "title": "Allow `pgstattuple_approx",
      "description": "Allow `pgstattuple_approx()()` to report on TOAST tables (Peter Eisentraut)",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add contrib module pg_surgery which allows changes to row visibility",
      "description": "Add contrib module pg_surgery which allows changes to row visibility (Ashutosh Sharma)\n            This is useful for correcting database corruption.",
      "sinceVersion": "14.0",
      "contributor": "Ashutosh Sharma"
    },
    {
      "title": "Add contrib module old_snapshot to report the XID/time mapping used by an active old_snapshot_threshold",
      "description": "Add contrib module old_snapshot to report the XID/time mapping used by an active old_snapshot_threshold (Robert Haas)",
      "sinceVersion": "14.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow amcheck to also check heap pages",
      "description": "Allow amcheck to also check heap pages (Mark Dilger)\n            Previously it only checked B-Tree index pages.",
      "sinceVersion": "14.0",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Allow pageinspect to inspect GiST indexes",
      "description": "Allow pageinspect to inspect GiST indexes (Andrey Borodin, Heikki Linnakangas)",
      "sinceVersion": "14.0",
      "contributor": "Andrey Borodin, Heikki Linnakangas"
    },
    {
      "title": "Change pageinspect block numbers to be bigints",
      "description": "Change pageinspect block numbers to be bigints (Peter Eisentraut)",
      "sinceVersion": "14.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Mark btree_gist functions as parallel safe",
      "description": "Mark btree_gist functions as parallel safe (Steven Winfield)",
      "sinceVersion": "14.0",
      "contributor": "Steven Winfield"
    },
    {
      "title": "Move query hash computation from pg_stat_statements to the core server",
      "description": "Move query hash computation from pg_stat_statements to the core server (Julien Rouhaud)\n              The new server parameter compute_query_id's default of `auto` will automatically enable query id computation when this extension is loaded.",
      "sinceVersion": "14.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Cause pg_stat_statements to track top and nested statements separately",
      "description": "Cause pg_stat_statements to track top and nested statements separately (Julien Rohaud)\n              Previously, when tracking all statements, identical top and nested statements were tracked as a single entry; but it seems more useful to separate such usages.",
      "sinceVersion": "14.0",
      "contributor": "Julien Rohaud"
    },
    {
      "title": "Add row counts for utility commands to pg_stat_statements",
      "description": "Add row counts for utility commands to pg_stat_statements (Fujii Masao, Katsuragi Yuta, Seino Yuki)",
      "sinceVersion": "14.0",
      "contributor": "Fujii Masao, Katsuragi Yuta, Seino Yuki"
    },
    {
      "title": "Add pg_stat_statements_info system view to show pg_stat_statements activity",
      "description": "Add pg_stat_statements_info system view to show pg_stat_statements activity (Katsuragi Yuta, Yuki Seino, Naoki Nakamichi)",
      "sinceVersion": "14.0",
      "contributor": "Katsuragi Yuta, Yuki Seino, Naoki Nakamichi"
    },
    {
      "title": "Allow postgres_fdw to INSERT rows in bulk",
      "description": "Allow postgres_fdw to INSERT rows in bulk (Takayuki Tsunakawa, Tomas Vondra, Amit Langote)",
      "sinceVersion": "14.0",
      "contributor": "Takayuki Tsunakawa, Tomas Vondra, Amit Langote"
    },
    {
      "title": "Allow postgres_fdw to import table partitions if specified by IMPORT FOREIGN SCHEMA ... LIMIT TO",
      "description": "Allow postgres_fdw to import table partitions if specified by IMPORT FOREIGN SCHEMA ... LIMIT TO (Matthias van de Meent)\n              By default, only the root of a partitioned table is imported.",
      "sinceVersion": "14.0",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Add postgres_fdw function `postgres_fdw_get_connections",
      "description": "Add postgres_fdw function `postgres_fdw_get_connections()()` to report open foreign server connections (Bharath Rupireddy)",
      "sinceVersion": "14.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Allow control over whether foreign servers keep connections open after transaction completion",
      "description": "Allow control over whether foreign servers keep connections open after transaction completion (Bharath Rupireddy)\n              This is controlled by keep_connections and defaults to on.",
      "sinceVersion": "14.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Allow postgres_fdw to reestablish foreign server connections if necessary",
      "description": "Allow postgres_fdw to reestablish foreign server connections if necessary (Bharath Rupireddy)\n              Previously foreign server restarts could cause foreign table access errors.",
      "sinceVersion": "14.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Add postgres_fdw functions to discard cached connections",
      "description": "Add postgres_fdw functions to discard cached connections (Bharath Rupireddy)",
      "sinceVersion": "14.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Fix incorrect creation of shared dependencies when cloning a database that contains non-builtin objects",
      "description": "Fix incorrect creation of shared dependencies when cloning a database that contains non-builtin objects (Aleksander Alekseev)\n          The effects of this error are probably limited in practice. In principle, it could allow a role to be dropped while it still owns objects; but most installations would never want to drop a role that had been used for objects they'd added to `template1`.",
      "sinceVersion": "14.1",
      "contributor": "Aleksander Alekseev"
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "Use the CLDR project's data to map Windows time zone names to IANA time zones (Tom Lane)\n          When running on Windows, initdb attempts to set the new cluster's timezone parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make the server reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\n          A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\n          The PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "Make libpq reject extraneous data after an SSL or GSS encryption handshake (Tom Lane)\n          A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\n          The PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record (Álvaro Herrera)\n          If the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\n          When applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "sinceVersion": "14.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure that parallel VACUUM doesn't miss any indexes",
      "description": "Ensure that parallel VACUUM doesn't miss any indexes (Peter Geoghegan, Masahiko Sawada)\n          A parallel VACUUM would fail to process indexes that are below the min_parallel_index_scan_size cutoff, if the table also has at least two indexes that are above that size. This could result in those indexes becoming corrupt, since they'd still contain references to any heap entries removed by the VACUUM; subsequent queries using such indexes would be likely to return rows they shouldn't. This problem does not affect autovacuum, since it doesn't use parallel vacuuming. However, it is advisable to reindex any manually-vacuumed tables that have the right mix of index sizes.",
      "sinceVersion": "14.1",
      "contributor": "Peter Geoghegan, Masahiko Sawada"
    },
    {
      "title": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions",
      "description": "Fix CREATE INDEX CONCURRENTLY to wait for the latest prepared transactions (Andrey Borodin)\n          Rows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for PREPARE TRANSACTION commands that were still in progress when CREATE INDEX CONCURRENTLY checked for them. As before, in installations that have enabled prepared transactions (max_prepared_transactions &gt; 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "sinceVersion": "14.1",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently (Noah Misch, Andrey Borodin)\n          While it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "sinceVersion": "14.1",
      "contributor": "Noah Misch, Andrey Borodin"
    },
    {
      "title": "Fix REINDEX CONCURRENTLY to preserve operator class parameters that were attached to the target index",
      "description": "Fix REINDEX CONCURRENTLY to preserve operator class parameters that were attached to the target index (Michael Paquier)",
      "sinceVersion": "14.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table (Amit Langote, Álvaro Herrera)\n          This oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "sinceVersion": "14.1",
      "contributor": "Amit Langote, Álvaro Herrera"
    },
    {
      "title": "Fix corruption of parse tree while creating a range type",
      "description": "Fix corruption of parse tree while creating a range type (Alex Kozhemyakin, Sergey Shinderuk)\n          CREATE TYPE incorrectly freed an element of the parse tree, which could cause problems for a later event trigger, or if the CREATE TYPE command was stored in the plan cache and used again later.",
      "sinceVersion": "14.1",
      "contributor": "Alex Kozhemyakin, Sergey Shinderuk"
    },
    {
      "title": "Fix updates of element fields in arrays of domain over composite",
      "description": "Fix updates of element fields in arrays of domain over composite (Tom Lane)\n          A command such as `UPDATE tab SET fld[1].subfld = val` failed if the array's elements were domains rather than plain composites.",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow the combination of `FETCH FIRST WITH TIES` and `FOR UPDATE SKIP LOCKED`",
      "description": "Disallow the combination of `FETCH FIRST WITH TIES` and `FOR UPDATE SKIP LOCKED` (David Christensen)\n          `FETCH FIRST WITH TIES` necessarily fetches one more row than requested, since it cannot stop until it finds a row that is not a tie. In our current implementation, if `FOR UPDATE` is used then that row will also get locked even though it is not returned. That results in undesirable behavior if the `SKIP LOCKED` option is specified. It's difficult to change this without introducing a different set of undesirable behaviors, so for now, forbid the combination.",
      "sinceVersion": "14.1",
      "contributor": "David Christensen"
    },
    {
      "title": "Disallow `ALTER INDEX index ALTER COLUMN col SET",
      "description": "Disallow `ALTER INDEX index ALTER COLUMN col SET (options)` (Nathan Bossart, Michael Paquier)\n          While the parser accepted this, it's undocumented and doesn't actually work.",
      "sinceVersion": "14.1",
      "contributor": "Nathan Bossart, Michael Paquier"
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power",
      "description": "Fix corner-case loss of precision in numeric `power()()` (Dean Rasheed)\n          The result could be inaccurate when the first argument is very close to 1.",
      "sinceVersion": "14.1",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid choosing the wrong hash equality operator for Memoize plans",
      "description": "Avoid choosing the wrong hash equality operator for Memoize plans (David Rowley)\n          This error could result in crashes or incorrect query results.",
      "sinceVersion": "14.1",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix planner error with pulling up subquery expressions into function rangetable entries",
      "description": "Fix planner error with pulling up subquery expressions into function rangetable entries (Tom Lane)\n          If a function in `FROM` laterally references the output of some sub-`SELECT` earlier in the `FROM` clause, and we are able to flatten that sub-`SELECT` into the outer query, the expression(s) copied into the function expression were not fully processed. This could lead to crashes at execution.",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "Avoid using MCV-only statistics to estimate the range of a column (Tom Lane)\n          There are corner cases in which ANALYZE will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix restoration of a Portal's snapshot inside a subtransaction",
      "description": "Fix restoration of a Portal's snapshot inside a subtransaction (Bertrand Drouvot)\n          If a procedure commits or rolls back a transaction, and then its next significant action is inside a new subtransaction, snapshot management went wrong, leading to a dangling pointer and probable crash. A typical example in PL/pgSQL is a `COMMIT` immediately followed by a `BEGIN ... EXCEPTION` block that performs a query.",
      "sinceVersion": "14.1",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "Clean up correctly if a transaction fails after exporting its snapshot (Dilip Kumar)\n          This oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "sinceVersion": "14.1",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "Ensure that prepared transactions are properly accounted for during promotion of a standby server (Michael Paquier, Andres Freund)\n          There was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "sinceVersion": "14.1",
      "contributor": "Michael Paquier, Andres Freund"
    },
    {
      "title": "Fix “could not find RecursiveUnion” error when EXPLAIN tries to print a filter condition attached to a WorkTableScan node",
      "description": "Fix “could not find RecursiveUnion” error when EXPLAIN tries to print a filter condition attached to a WorkTableScan node (Tom Lane)",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the correct lock level is used when renaming a table",
      "description": "Ensure that the correct lock level is used when renaming a table (Nathan Bossart, Álvaro Herrera)\n          For historical reasons, ALTER INDEX ... RENAME can be applied to any sort of relation. The lock level required to rename an index is lower than that required to rename a table or other kind of relation, but the code got this wrong and would use the weaker lock level whenever the command is spelled ALTER INDEX.",
      "sinceVersion": "14.1",
      "contributor": "Nathan Bossart, Álvaro Herrera"
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently",
      "description": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently (Álvaro Herrera)",
      "sinceVersion": "14.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export",
      "description": "Prevent “snapshot reference leak” warning when `lo_export()()` or a related function fails (Heikki Linnakangas)",
      "sinceVersion": "14.1",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix inefficient code generation for CoerceToDomain expression nodes",
      "description": "Fix inefficient code generation for CoerceToDomain expression nodes (Ranier Vilela)",
      "sinceVersion": "14.1",
      "contributor": "Ranier Vilela"
    },
    {
      "title": "Avoid O",
      "description": "Avoid O(N^2) behavior in some list-manipulation operations (Nathan Bossart, Tom Lane)\n          These changes fix slow processing in several scenarios, including: when a standby replays a transaction that held many exclusive locks on the primary; when many files are due to be unlinked after a checkpoint; when hash aggregation involves many batches; and when pg_trgm extracts indexable conditions from a complex regular expression. Only the first of these scenarios has actually been reported from the field, but they all seem like plausible consequences of inefficient list deletions.",
      "sinceVersion": "14.1",
      "contributor": "Nathan Bossart, Tom Lane"
    },
    {
      "title": "Add more defensive checks around B-tree posting list splits",
      "description": "Add more defensive checks around B-tree posting list splits (Peter Geoghegan)\n          This change should help detect index corruption involving duplicate table TIDs.",
      "sinceVersion": "14.1",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Avoid assertion failure when inserting NaN into a BRIN float8 or float4 minmax_multi_ops index",
      "description": "Avoid assertion failure when inserting NaN into a BRIN float8 or float4 minmax_multi_ops index (Tomas Vondra)\n          In production builds, such cases would result in a somewhat inefficient, but not actually incorrect, index.",
      "sinceVersion": "14.1",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Allow the autovacuum launcher process to respond to `pg_log_backend_memory_contexts",
      "description": "Allow the autovacuum launcher process to respond to `pg_log_backend_memory_contexts()()` requests more quickly (Koyu Tanigawa)",
      "sinceVersion": "14.1",
      "contributor": "Koyu Tanigawa"
    },
    {
      "title": "Fix memory leak in HMAC hash calculations",
      "description": "Fix memory leak in HMAC hash calculations (Sergey Shinderuk)",
      "sinceVersion": "14.1",
      "contributor": "Sergey Shinderuk"
    },
    {
      "title": "Disallow setting huge_pages to `on` when shared_memory_type is `sysv`",
      "description": "Disallow setting huge_pages to `on` when shared_memory_type is `sysv` (Thomas Munro)\n          Previously, this setting was accepted, but it did nothing for lack of any implementation.",
      "sinceVersion": "14.1",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix checking of query type in PL/pgSQL's RETURN QUERY statement",
      "description": "Fix checking of query type in PL/pgSQL's RETURN QUERY statement (Tom Lane)\n          RETURN QUERY should accept any query that can return tuples, e.g. UPDATE RETURNING. v14 accidentally disallowed anything but SELECT; moreover, the RETURN QUERY EXECUTE variant failed to apply any query-type check at all.",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump to dump non-global default privileges correctly",
      "description": "Fix pg_dump to dump non-global default privileges correctly (Neil Chen, Masahiko Sawada)\n          If a global (unrestricted) ALTER DEFAULT PRIVILEGES command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted ALTER DEFAULT PRIVILEGES command granted that privilege again for a selected role or schema, pg_dump failed to dump the restricted privilege grant correctly.",
      "sinceVersion": "14.1",
      "contributor": "Neil Chen, Masahiko Sawada"
    },
    {
      "title": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "Make pg_dump acquire shared lock on partitioned tables that are to be dumped (Tom Lane)\n          This oversight was usually pretty harmless, since once pg_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in pg_dump when attempting to dump trigger definitions from a pre-8.3 server",
      "description": "Fix crash in pg_dump when attempting to dump trigger definitions from a pre-8.3 server (Tom Lane)",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file",
      "description": "Fix incorrect filename in pg_restore's error message about an invalid large object TOC file (Daniel Gustafsson)",
      "sinceVersion": "14.1",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Ensure that pgbench exits with non-zero status after a socket-level failure",
      "description": "Ensure that pgbench exits with non-zero status after a socket-level failure (Yugo Nagata, Fabien Coelho)\n          The desired behavior is to finish out the run but then exit with status 2. Also, fix the reporting of such errors.",
      "sinceVersion": "14.1",
      "contributor": "Yugo Nagata, Fabien Coelho"
    },
    {
      "title": "Prevent pg_amcheck from checking temporary relations, as well as indexes that are invalid or not ready",
      "description": "Prevent pg_amcheck from checking temporary relations, as well as indexes that are invalid or not ready (Mark Dilger)\n          This avoids unhelpful checks of relations that will almost certainly appear inconsistent.",
      "sinceVersion": "14.1",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Make contrib/amcheck skip unlogged tables when running on a standby server",
      "description": "Make contrib/amcheck skip unlogged tables when running on a standby server (Mark Dilger)\n          It's appropriate to do this since such tables will be empty, and unlogged indexes were already handled similarly.",
      "sinceVersion": "14.1",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB",
      "description": "Change contrib/pg_stat_statements to read its “query texts” file in units of at most 1GB (Tom Lane)\n          Such large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error",
      "description": "Fix null-pointer crash when contrib/postgres_fdw tries to report a data conversion error (Tom Lane)",
      "sinceVersion": "14.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "When running a TAP test, include the module's own directory in PATH",
      "description": "When running a TAP test, include the module's own directory in PATH (Andrew Dunstan)\n          This allows tests to find built programs that are not installed, such as custom test drivers.",
      "sinceVersion": "14.1",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.\n          Also, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port_of_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "sinceVersion": "14.1",
      "contributor": null
    },
    {
      "title": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions",
      "description": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions (Tom Lane)\n          This error led to a text-type value being interpreted as an unknown-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the text value.\n          The PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "sinceVersion": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix misbehavior during recursive page split in GiST index build (Heikki Linnakangas)\n          Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "sinceVersion": "14.10",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Prevent de-duplication of btree index entries for interval columns",
      "description": "Prevent de-duplication of btree index entries for interval columns (Noah Misch)\n          There are interval values that are distinguishable but compare equal, for example `24:00:00` and `1 day`. This breaks assumptions made by btree de-duplication, so interval columns need to be excluded from de-duplication. This oversight can cause incorrect results from index-only scans. Moreover, after updating amcheck will report an error for almost all such indexes. Users should reindex any btree indexes on interval columns.",
      "sinceVersion": "14.10",
      "contributor": "Noah Misch"
    },
    {
      "title": "Process date values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "Process date values more sanely in BRIN `datetime_minmax_multi_ops` indexes (Tomas Vondra)\n          The distance calculation for dates was backward, causing poor decisions about which entries to merge. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on date columns is advisable.",
      "sinceVersion": "14.10",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Process large timestamp and timestamptz values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "Process large timestamp and timestamptz values more sanely in BRIN `datetime_minmax_multi_ops` indexes (Tomas Vondra)\n          Infinities were mistakenly treated as having distance zero rather than a large distance from other values, causing poor decisions about which entries to merge. Also, finite-but-very-large values (near the endpoints of the representable timestamp range) could result in internal overflows, again causing poor decisions. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on timestamp and timestamptz columns is advisable if the column contains, or has contained, infinities or large finite values.",
      "sinceVersion": "14.10",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid calculation overflows in BRIN `interval_minmax_multi_ops` indexes with extreme interval values",
      "description": "Avoid calculation overflows in BRIN `interval_minmax_multi_ops` indexes with extreme interval values (Tomas Vondra)\n          This bug might have caused unexpected failures while trying to insert large interval values into such an index.",
      "sinceVersion": "14.10",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys (David Rowley)\n          Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "sinceVersion": "14.10",
      "contributor": "David Rowley"
    },
    {
      "title": "Correctly identify the target table in an inherited UPDATE/DELETE/MERGE even when the parent table is excluded by constraints",
      "description": "Correctly identify the target table in an inherited UPDATE/DELETE/MERGE even when the parent table is excluded by constraints (Amit Langote, Tom Lane)\n          If the initially-named table is excluded by constraints, but not all its inheritance descendants are, the first non-excluded descendant was identified as the primary target table. This would lead to firing statement-level triggers associated with that table, rather than the initially-named table as should happen. In v16, the same oversight could also lead to “invalid perminfoindex 0 in RTE with relid NNNN” errors.",
      "sinceVersion": "14.10",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses (Peter Geoghegan)\n          When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "sinceVersion": "14.10",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix intra-query memory leak in Memoize execution",
      "description": "Fix intra-query memory leak in Memoize execution (Orlov Aleksej, David Rowley)",
      "sinceVersion": "14.10",
      "contributor": "Orlov Aleksej, David Rowley"
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows",
      "description": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane)",
      "sinceVersion": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema",
      "description": "Don't crash if `cursor_to_xmlschema()()` is applied to a non-data-returning Portal (Boyu Yang)",
      "sinceVersion": "14.10",
      "contributor": "Boyu Yang"
    },
    {
      "title": "Throw the intended error if `pgrowlocks",
      "description": "Throw the intended error if `pgrowlocks()()` is applied to a partitioned table (David Rowley)\n          Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "sinceVersion": "14.10",
      "contributor": "David Rowley"
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Handle invalid indexes more cleanly in assorted SQL functions (Noah Misch)\n          Report an error if `pgstatindex()()`, `pgstatginindex()()`, `pgstathashindex()()`, or `pgstattuple()()` is applied to an invalid index. If `brin_desummarize_range()()`, `brin_summarize_new_values()()`, `brin_summarize_range()()`, or `gin_clean_pending_list()()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed CREATE INDEX had left behind.",
      "sinceVersion": "14.10",
      "contributor": "Noah Misch"
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector",
      "description": "Avoid premature memory allocation failure with long inputs to `to_tsvector()()` (Tom Lane)",
      "sinceVersion": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix over-allocation of the constructed tsvector in `tsvectorrecv",
      "description": "Fix over-allocation of the constructed tsvector in `tsvectorrecv()()` (Denis Erokhin)\n          If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished tsvector. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "sinceVersion": "14.10",
      "contributor": "Denis Erokhin"
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit",
      "description": "Fix incorrect coding in `gtsvector_picksplit()()` (Alexander Lakhin)\n          This could lead to poor page-split decisions in GiST indexes on tsvector columns.",
      "sinceVersion": "14.10",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Improve checks for corrupt PGLZ compressed data",
      "description": "Improve checks for corrupt PGLZ compressed data (Flavien Guedez)",
      "sinceVersion": "14.10",
      "contributor": "Flavien Guedez"
    },
    {
      "title": "Fix COMMIT AND CHAIN/ROLLBACK AND CHAIN to work properly when there is an unreleased savepoint",
      "description": "Fix COMMIT AND CHAIN/ROLLBACK AND CHAIN to work properly when there is an unreleased savepoint (Liu Xiang, Tom Lane)\n          Instead of propagating the current transaction's properties to the new transaction, they propagated some previous transaction's properties.",
      "sinceVersion": "14.10",
      "contributor": "Liu Xiang, Tom Lane"
    },
    {
      "title": "In COPY FROM, fail cleanly when an unsupported encoding conversion is needed",
      "description": "In COPY FROM, fail cleanly when an unsupported encoding conversion is needed (Tom Lane)\n          Recent refactoring accidentally removed the intended error check for this, such that it ended in “cache lookup failed for function 0” instead of a useful error message.",
      "sinceVersion": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value",
      "description": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value (Xing Guo, Aleksander Alekseev, Tom Lane)\n          No built-in parameter fits this description, but an extension could define such a parameter.",
      "sinceVersion": "14.10",
      "contributor": "Xing Guo, Aleksander Alekseev, Tom Lane"
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables (Tom Lane)\n          This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "sinceVersion": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system",
      "description": "Avoid improper response to shutdown signals in child processes just forked by `system()()` (Nathan Bossart)\n          This fix avoids a race condition in which a child process that has been forked off by `system()()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "sinceVersion": "14.10",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Cope with torn reads of pg_control in frontend programs",
      "description": "Cope with torn reads of pg_control in frontend programs (Thomas Munro)\n          On some file systems, reading pg_control may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "sinceVersion": "14.10",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid torn reads of pg_control in relevant SQL functions",
      "description": "Avoid torn reads of pg_control in relevant SQL functions (Thomas Munro)\n          Acquire the appropriate lock before reading pg_control, to ensure we get a consistent view of that file.",
      "sinceVersion": "14.10",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "Avoid integer overflow when computing size of backend activity string array (Jakub Wartak)\n          On 64-bit machines we will allow values of track_activity_query_size large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "sinceVersion": "14.10",
      "contributor": "Jakub Wartak"
    },
    {
      "title": "Fix briefly showing inconsistent progress statistics for ANALYZE on inherited tables",
      "description": "Fix briefly showing inconsistent progress statistics for ANALYZE on inherited tables (Heikki Linnakangas)\n          The block-level counters should be reset to zero at the same time we update the current-relation field.",
      "sinceVersion": "14.10",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix the background writer to report any WAL writes it makes to the statistics counters",
      "description": "Fix the background writer to report any WAL writes it makes to the statistics counters (Nazir Bilal Yavuz)",
      "sinceVersion": "14.10",
      "contributor": "Nazir Bilal Yavuz"
    },
    {
      "title": "Track the dependencies of cached CALL statements, and re-plan them when needed",
      "description": "Track the dependencies of cached CALL statements, and re-plan them when needed (Tom Lane)\n          DDL commands, such as replacement of a function that has been inlined into a CALL argument, can create the need to re-plan a CALL that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "sinceVersion": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels",
      "description": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels (Richard Guo)\n          This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "sinceVersion": "14.10",
      "contributor": "Richard Guo"
    },
    {
      "title": "Track hash function and negator function dependencies of ScalarArrayOpExpr plan nodes",
      "description": "Track hash function and negator function dependencies of ScalarArrayOpExpr plan nodes (David Rowley)\n          In most cases this oversight was harmless, since these functions would be unlikely to disappear while the node's original operator remains present.",
      "sinceVersion": "14.10",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix error-handling bug in RECORD type cache management",
      "description": "Fix error-handling bug in RECORD type cache management (Thomas Munro)\n          An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "sinceVersion": "14.10",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error",
      "description": "Fix assertion failure when logical decoding is retried in the same session after an error (Hou Zhijie)",
      "sinceVersion": "14.10",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Treat out-of-memory failures as fatal while reading WAL (Michael Paquier)\n          Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "sinceVersion": "14.10",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field",
      "description": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier)",
      "sinceVersion": "14.10",
      "contributor": "Thomas Munro, Michael Paquier"
    },
    {
      "title": "Ensure that standby-mode WAL recovery reports an error when an invalid page header is found",
      "description": "Ensure that standby-mode WAL recovery reports an error when an invalid page header is found (Yugo Nagata, Kyotaro Horiguchi)",
      "sinceVersion": "14.10",
      "contributor": "Yugo Nagata, Kyotaro Horiguchi"
    },
    {
      "title": "Fix datatype size confusion in logical tape management",
      "description": "Fix datatype size confusion in logical tape management (Ranier Vilela)\n          Integer overflow was possible on platforms where long is wider than int, although it would take a multiple-terabyte temporary file to cause a problem.",
      "sinceVersion": "14.10",
      "contributor": "Ranier Vilela"
    },
    {
      "title": "Avoid unintended close of syslogger process's stdin",
      "description": "Avoid unintended close of syslogger process's stdin (Heikki Linnakangas)",
      "sinceVersion": "14.10",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis (Tom Lane)\n          Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as SET TRANSACTION ISOLATION LEVEL.",
      "sinceVersion": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Keep by-reference attmissingval values in a long-lived context while they are being used",
      "description": "Keep by-reference attmissingval values in a long-lived context while they are being used (Andrew Dunstan)\n          This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "sinceVersion": "14.10",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Recalculate the effective value of search_path after ALTER ROLE",
      "description": "Recalculate the effective value of search_path after ALTER ROLE (Jeff Davis)\n          This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "sinceVersion": "14.10",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Fix “could not duplicate handle” error occurring on Windows when min_dynamic_shared_memory is set above zero",
      "description": "Fix “could not duplicate handle” error occurring on Windows when min_dynamic_shared_memory is set above zero (Thomas Munro)",
      "sinceVersion": "14.10",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish",
      "description": "Fix order of operations in `GenericXLogFinish()` (Jeff Davis)\n          This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (contrib/bloom does, for example).",
      "sinceVersion": "14.10",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling",
      "description": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin)",
      "sinceVersion": "14.10",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables (Euler Taveira, Tom Lane)\n          Formerly, only the table-level ACL would get restored if both types were present.",
      "sinceVersion": "14.10",
      "contributor": "Euler Taveira, Tom Lane"
    },
    {
      "title": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types",
      "description": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types (Álvaro Herrera)\n          These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "sinceVersion": "14.10",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg_basebackup",
      "description": "Avoid generating invalid temporary slot names in pg_basebackup (Jelte Fennema)\n          This has only been seen to occur when the server connection runs through pgbouncer.",
      "sinceVersion": "14.10",
      "contributor": "Jelte Fennema"
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows",
      "description": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch)",
      "sinceVersion": "14.10",
      "contributor": "Noah Misch"
    },
    {
      "title": "In contrib/amcheck, do not report interrupted page deletion as corruption",
      "description": "In contrib/amcheck, do not report interrupted page deletion as corruption (Noah Misch)\n          This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before VACUUM had cleaned things up.",
      "sinceVersion": "14.10",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed",
      "description": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Dean Rasheed)\n          Such an indexscan failed to return all the entries it should.",
      "sinceVersion": "14.10",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Add support for LLVM 16 and 17",
      "description": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "14.10",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Suppress assorted build-time warnings on recent macOS (Tom Lane)\n          Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the -multiply_defined suppress linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "sinceVersion": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "When building contrib/unaccent's rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set",
      "description": "When building contrib/unaccent's rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set (Japin Li)",
      "sinceVersion": "14.10",
      "contributor": "Japin Li"
    },
    {
      "title": "Remove `PHOT`",
      "description": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list (Tom Lane)\n          Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "sinceVersion": "14.10",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "Fix memory leak when performing JIT inlining (Andres Freund, Daniel Gustafsson)\n          There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "sinceVersion": "14.11",
      "contributor": "Andres Freund, Daniel Gustafsson"
    },
    {
      "title": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes",
      "description": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes (Andres Freund)\n          This fixes O(N^2) behavior when the list of waiters is long. In some use-cases this results in substantial throughput improvements.",
      "sinceVersion": "14.11",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Avoid generating incorrect partitioned-join plans (Richard Guo)\n          Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "sinceVersion": "14.11",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars (Tom Lane)\n          This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent access to a no-longer-pinned buffer in `BEFORE ROW UPDATE` triggers",
      "description": "Prevent access to a no-longer-pinned buffer in `BEFORE ROW UPDATE` triggers (Alexander Lakhin, Tom Lane)\n          If the tuple being updated had just been updated and moved to another page by another session, there was a narrow window where we would attempt to fetch data from the new tuple version without any pin on its buffer. In principle this could result in garbage data appearing in non-updated columns of the proposed new tuple. The odds of problems in practice seem rather low, however.",
      "sinceVersion": "14.11",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "Avoid requesting an oversize shared-memory area in parallel hash join (Thomas Munro, Andrei Lepikhov, Alexander Korotkov)\n          The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "sinceVersion": "14.11",
      "contributor": "Thomas Munro, Andrei Lepikhov, Alexander Korotkov"
    },
    {
      "title": "Avoid assertion failures in `heap_update",
      "description": "Avoid assertion failures in `heap_update()()` and `heap_delete()()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck (Alexander Lakhin)\n          This error had no impact in non-assert builds.",
      "sinceVersion": "14.11",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix overly tight assertion about false_positive_rate parameter of BRIN bloom operator classes",
      "description": "Fix overly tight assertion about false_positive_rate parameter of BRIN bloom operator classes (Alexander Lakhin)\n          This error had no impact in non-assert builds, either.",
      "sinceVersion": "14.11",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree",
      "description": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree (Tender Wang)\n          If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "sinceVersion": "14.11",
      "contributor": "Tender Wang"
    },
    {
      "title": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands",
      "description": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands (Tender Wang, Michael Paquier)",
      "sinceVersion": "14.11",
      "contributor": "Tender Wang, Michael Paquier"
    },
    {
      "title": "Properly lock the associated table during DROP STATISTICS",
      "description": "Properly lock the associated table during DROP STATISTICS (Tomas Vondra)\n          Failure to acquire the lock could result in “tuple concurrently deleted” errors if the DROP executes concurrently with ANALYZE.",
      "sinceVersion": "14.11",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "Detect that a new catalog cache entry became stale while detoasting its fields (Tom Lane)\n          We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Fix edge-case integer overflow detection bug on some platforms (Dean Rasheed)\n          Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "sinceVersion": "14.11",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp (Tom Lane)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add more checks for overflow in `interval_mul",
      "description": "Add more checks for overflow in `interval_mul()()` and `interval_div()()` (Dean Rasheed)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "14.11",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context (Tom Lane)\n          Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Match collation too when matching an existing index to a new partitioned index (Peter Eisentraut)\n          Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "sinceVersion": "14.11",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid failure if a child index is dropped concurrently with REINDEX INDEX on a partitioned index",
      "description": "Avoid failure if a child index is dropped concurrently with REINDEX INDEX on a partitioned index (Fei Changhong)",
      "sinceVersion": "14.11",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page (Fei Changhong, Heikki Linnakangas)\n          The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "sinceVersion": "14.11",
      "contributor": "Fei Changhong, Heikki Linnakangas"
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "Avoid premature release of buffer pin in GIN index insertion (Tom Lane)\n          If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Avoid failure with partitioned SP-GiST indexes (Tom Lane)\n          Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "Fix ownership change reporting for large objects (Tom Lane)\n          A no-op ALTER LARGE OBJECT OWNER command (that is, one selecting the existing owner) passed the wrong class ID to the PostAlterHook, probably confusing any extension using that hook.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions (Fei Changhong)\n          The startedInRecovery flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "sinceVersion": "14.11",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription (Shlok Kyal)\n          One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "sinceVersion": "14.11",
      "contributor": "Shlok Kyal"
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "Prevent examining system catalogs with the wrong snapshot during logical decoding (Fei Changhong)\n          If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups. This fix deals with the case that a top-level transaction is already marked as containing catalog changes, but its subtransaction(s) are not.",
      "sinceVersion": "14.11",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "Return the correct status code when a new client disconnects without responding to the server's password challenge (Liu Lang, Tom Lane)\n          In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use ClientAuthentication_hook.",
      "sinceVersion": "14.11",
      "contributor": "Liu Lang, Tom Lane"
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Fix incompatibility with OpenSSL 3.2 (Tristan Partin, Bo Andreson)\n          Use the BIO “app_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "sinceVersion": "14.11",
      "contributor": "Tristan Partin, Bo Andreson"
    },
    {
      "title": "Be more wary about OpenSSL not setting errno on error",
      "description": "Be more wary about OpenSSL not setting errno on error (Tom Lane)\n          If errno isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix file descriptor leakage when a foreign data wrapper's `ForeignAsyncRequest",
      "description": "Fix file descriptor leakage when a foreign data wrapper's `ForeignAsyncRequest()` function fails (Heikki Linnakangas)",
      "sinceVersion": "14.11",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR`",
      "description": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov)",
      "sinceVersion": "14.11",
      "contributor": "Alexander Kuzmenkov"
    },
    {
      "title": "In PL/pgSQL, support SQL commands that are CREATE FUNCTION/CREATE PROCEDURE with SQL-standard bodies",
      "description": "In PL/pgSQL, support SQL commands that are CREATE FUNCTION/CREATE PROCEDURE with SQL-standard bodies (Tom Lane)\n          Previously, such cases failed with parsing errors due to the semicolon(s) appearing in the function body.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix libpq's handling of errors in pipelines",
      "description": "Fix libpq's handling of errors in pipelines (Álvaro Herrera)\n          The pipeline state could get out of sync if an error is returned for reasons other than a query problem (for example, if the connection is lost). Potentially this would lead to a busy-loop in the calling application.",
      "sinceVersion": "14.11",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Make libpq's `PQsendFlushRequest",
      "description": "Make libpq's `PQsendFlushRequest()()` function flush the client output buffer under the same rules as other `PQsend` functions (Jelte Fennema-Nio)\n          In pipeline mode, it may still be necessary to call `PQflush()()` as well; but this change removes some inconsistency.",
      "sinceVersion": "14.11",
      "contributor": "Jelte Fennema-Nio"
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads",
      "description": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier)",
      "sinceVersion": "14.11",
      "contributor": "Willi Mann, Michael Paquier"
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "Fix timing-dependent failure in GSSAPI data transmission (Tom Lane)\n          When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped (Rian McGuire, Tom Lane)\n          This conforms to the behavior for other dependent objects such as indexes.",
      "sinceVersion": "14.11",
      "contributor": "Rian McGuire, Tom Lane"
    },
    {
      "title": "Make it an error for a pgbench script to end with an open pipeline",
      "description": "Make it an error for a pgbench script to end with an open pipeline (Anthonin Bonnefoy)\n          Previously, pgbench would behave oddly if a \\startpipeline command lacked a matching \\endpipeline. This seems like a scripting mistake rather than a case that pgbench needs to handle nicely, so throw an error.",
      "sinceVersion": "14.11",
      "contributor": "Anthonin Bonnefoy"
    },
    {
      "title": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index",
      "description": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane)",
      "sinceVersion": "14.11",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Report a better error when contrib/pageinspect's `hash_bitmap_info",
      "description": "Report a better error when contrib/pageinspect's `hash_bitmap_info()()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier)",
      "sinceVersion": "14.11",
      "contributor": "Alexander Lakhin, Michael Paquier"
    },
    {
      "title": "Report a better error when contrib/pgstattuple's `pgstathashindex",
      "description": "Report a better error when contrib/pgstattuple's `pgstathashindex()()` function is applied to a partitioned hash index (Alexander Lakhin)",
      "sinceVersion": "14.11",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress",
      "description": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress (Kyotaro Horiguchi)\n          When launching a child process via cmd.exe, pass the /D flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "sinceVersion": "14.11",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later",
      "description": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane)",
      "sinceVersion": "14.11",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix compilation failure of `WAL_DEBUG` code on Windows",
      "description": "Fix compilation failure of `WAL_DEBUG` code on Windows (Bharath Rupireddy)",
      "sinceVersion": "14.11",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Suppress compiler warnings from Python's header files (Peter Eisentraut, Tom Lane)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "14.11",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18",
      "description": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro)",
      "sinceVersion": "14.11",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon.",
      "sinceVersion": "14.11",
      "contributor": null
    },
    {
      "title": "Ensure that index-only scans on name columns return a fully-padded value",
      "description": "Ensure that index-only scans on name columns return a fully-padded value (David Rowley)\n          The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "sinceVersion": "14.12",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type",
      "description": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type (Tom Lane)\n          Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause (David Rowley)\n          A NULL value satisfies a clause such as ``boolcol` IS NOT FALSE`, so pruning away a partition containing NULLs yielded incorrect answers.",
      "sinceVersion": "14.12",
      "contributor": "David Rowley"
    },
    {
      "title": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema",
      "description": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema (Tom Lane)\n          Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve ALTER TABLE ... ALTER COLUMN TYPE's error message when there is a dependent function or publication",
      "description": "Improve ALTER TABLE ... ALTER COLUMN TYPE's error message when there is a dependent function or publication (Tom Lane)",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan",
      "description": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan (Melanie Plageman)\n          Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "sinceVersion": "14.12",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "Avoid deadlock during removal of orphaned temporary tables (Mikhail Zhilin)\n          If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "sinceVersion": "14.12",
      "contributor": "Mikhail Zhilin"
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "Avoid race condition while examining per-relation frozen-XID values (Noah Misch)\n          VACUUM's computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another VACUUM.",
      "sinceVersion": "14.12",
      "contributor": "Noah Misch"
    },
    {
      "title": "Disallow converting a table to a view within an outer SQL command that is using that table",
      "description": "Disallow converting a table to a view within an outer SQL command that is using that table (Tom Lane)\n          This avoids possible crashes.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level (Tom Lane)\n          In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to UNION ALL trees that have constant outputs for the join column in some SELECT arms.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "Avoid use of already-freed data while planning partition-wise joins under GEQO (Tom Lane)\n          This would typically end in a crash or unexpected error message.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid freeing still-in-use data in Memoize",
      "description": "Avoid freeing still-in-use data in Memoize (Tender Wang, Andrei Lepikhov)\n          In production builds this error frequently didn't cause any problems, as the freed data would most likely not get overwritten before it was used.",
      "sinceVersion": "14.12",
      "contributor": "Tender Wang, Andrei Lepikhov"
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages",
      "description": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages (David Rowley)",
      "sinceVersion": "14.12",
      "contributor": "David Rowley"
    },
    {
      "title": "Be more careful with RECORD-returning functions in `FROM`",
      "description": "Be more careful with RECORD-returning functions in `FROM` (Tom Lane)\n          The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "Fix confusion about the return rowtype of SQL-language procedures (Tom Lane)\n          A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add protective stack depth checks to some recursive functions",
      "description": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin)",
      "sinceVersion": "14.12",
      "contributor": "Egor Chindyaskin"
    },
    {
      "title": "Fix mis-rounding and overflow hazards in `date_bin",
      "description": "Fix mis-rounding and overflow hazards in `date_bin()()` (Moaaz Assali)\n          In the case where the source timestamp is before the origin timestamp and their difference is already an exact multiple of the stride, the code incorrectly subtracted the stride anyway. Also, detect some integer-overflow cases that would have produced incorrect results.",
      "sinceVersion": "14.12",
      "contributor": "Moaaz Assali"
    },
    {
      "title": "Detect integer overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect integer overflow when adding or subtracting an interval to/from a timestamp (Joseph Koshakow)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "14.12",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Avoid race condition in `pg_get_expr",
      "description": "Avoid race condition in `pg_get_expr()()` (Tom Lane)\n          If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Fix detection of old transaction IDs in XID status functions (Karina Litskevich)\n          Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()()` or `txid_status()()`.",
      "sinceVersion": "14.12",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Ensure that a table's freespace map won't return a page that's past the end of the table",
      "description": "Ensure that a table's freespace map won't return a page that's past the end of the table (Ronan Dunklau)\n          Because the freespace map isn't WAL-logged, this was possible in edge cases involving an OS crash, a replica promote, or a PITR restore. The result would be a “could not read block” error.",
      "sinceVersion": "14.12",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait",
      "description": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait()` (Etsuro Fujita)",
      "sinceVersion": "14.12",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Avoid corrupting exception stack if an FDW implements async append but doesn't configure any wait conditions for the Append plan node to wait for",
      "description": "Avoid corrupting exception stack if an FDW implements async append but doesn't configure any wait conditions for the Append plan node to wait for (Alexander Pyhalov)",
      "sinceVersion": "14.12",
      "contributor": "Alexander Pyhalov"
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Throw an error if an index is accessed while it is being reindexed (Tom Lane)\n          Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB",
      "description": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas)",
      "sinceVersion": "14.12",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "Disconnect if a new server session's client socket cannot be put into non-blocking mode (Heikki Linnakangas)\n          It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "sinceVersion": "14.12",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "Fix inadequate error reporting with OpenSSL 3.0.0 and later (Heikki Linnakangas, Tom Lane)\n          System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "sinceVersion": "14.12",
      "contributor": "Heikki Linnakangas, Tom Lane"
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain",
      "description": "Avoid concurrent calls to `bindtextdomain()()` in libpq and ecpglib (Tom Lane)\n          Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line",
      "description": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane)",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings",
      "description": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane)",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc",
      "description": "Ensure that the string result of ecpg's `intoasc()()` function is correctly zero-terminated (Oleg Tselebrovskiy)",
      "sinceVersion": "14.12",
      "contributor": "Oleg Tselebrovskiy"
    },
    {
      "title": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords",
      "description": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords (Daniel Gustafsson, Álvaro Herrera)",
      "sinceVersion": "14.12",
      "contributor": "Daniel Gustafsson, Álvaro Herrera"
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments",
      "description": "Fix PL/pgSQL's parsing of single-line comments (`--`-style comments) following expressions (Erik Wienhold, Tom Lane)\n          This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL CASE statement.",
      "sinceVersion": "14.12",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "In contrib/amcheck, don't report false match failures due to short- versus long-header values",
      "description": "In contrib/amcheck, don't report false match failures due to short- versus long-header values (Andrey Borodin, Michael Zhilin)\n          A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "sinceVersion": "14.12",
      "contributor": "Andrey Borodin, Michael Zhilin"
    },
    {
      "title": "Fix bugs in BRIN output functions",
      "description": "Fix bugs in BRIN output functions (Tomas Vondra)\n          These output functions are only used for displaying index entries in contrib/pageinspect, so the errors are of limited practical concern.",
      "sinceVersion": "14.12",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant",
      "description": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant (David Rowley)\n          This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position `N` is not in select list” errors.",
      "sinceVersion": "14.12",
      "contributor": "David Rowley"
    },
    {
      "title": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC`",
      "description": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC` (Tom Lane)\n          This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "sinceVersion": "14.12",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2",
      "description": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval)",
      "sinceVersion": "14.12",
      "contributor": "Dmitry Koval"
    },
    {
      "title": "Fix incompatibility with LLVM 18",
      "description": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "14.12",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Allow `make check` to work with the musl C library",
      "description": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane)",
      "sinceVersion": "14.12",
      "contributor": "Thomas Munro, Bruce Momjian, Tom Lane"
    },
    {
      "title": "Prevent unauthorized code execution during pg_dump",
      "description": "Prevent unauthorized code execution during pg_dump (Masahiko Sawada)\n          An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg_dump session with the privileges of the role running pg_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter restrict_nonsystem_relation_kind that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg_dump to set it when available. Note that the attack is prevented only if both pg_dump and the server it is dumping from are new enough to have this fix.\n          The PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "sinceVersion": "14.13",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Prevent infinite loop in VACUUM",
      "description": "Prevent infinite loop in VACUUM (Melanie Plageman)\n          After a disconnected standby server with an old running transaction reconnected to the primary, it was possible for VACUUM on the primary to get confused about which tuples are removable, resulting in an infinite loop.",
      "sinceVersion": "14.13",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children",
      "description": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera)",
      "sinceVersion": "14.13",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints",
      "description": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints (Álvaro Herrera, Tender Wang)\n          When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect coninhcount value. This would cause trouble during any further manipulations of that constraint.",
      "sinceVersion": "14.13",
      "contributor": "Álvaro Herrera, Tender Wang"
    },
    {
      "title": "Fix partition pruning setup during `ALTER TABLE DETACH PARTITION CONCURRENTLY`",
      "description": "Fix partition pruning setup during `ALTER TABLE DETACH PARTITION CONCURRENTLY` (Álvaro Herrera)\n          The executor assumed that no partition could be detached between planning and execution of a query on a partitioned table. This is no longer true since the introduction of `DETACH PARTITION`'s `CONCURRENTLY` option, making it possible for query execution to fail transiently when that is used.",
      "sinceVersion": "14.13",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Correctly update a partitioned table's pg_class.reltuples field to zero after its last child partition is dropped",
      "description": "Correctly update a partitioned table's pg_class.reltuples field to zero after its last child partition is dropped (Noah Misch)\n          The first ANALYZE on such a partitioned table must update relhassubclass as well, and that caused the reltuples update to be lost.",
      "sinceVersion": "14.13",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "Fix handling of polymorphic output arguments for procedures (Tom Lane)\n          The SQL CALL statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But CALL in PL/pgSQL worked correctly.)",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix behavior of stable functions called from a CALL statement's argument list",
      "description": "Fix behavior of stable functions called from a CALL statement's argument list (Tom Lane)\n          If the CALL is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect integer overflow in money calculations",
      "description": "Detect integer overflow in money calculations (Joseph Koshakow)\n          None of the arithmetic functions for the money type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "sinceVersion": "14.13",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round",
      "description": "Fix over-aggressive clamping of the scale argument in `round(numeric)()` and `trunc(numeric)()` (Dean Rasheed)\n          These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type numeric.",
      "sinceVersion": "14.13",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent `pg_sequence_last_value",
      "description": "Prevent `pg_sequence_last_value()()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions (Nathan Bossart)\n          Make it return NULL in these cases instead of throwing an error.",
      "sinceVersion": "14.13",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery",
      "description": "Fix parsing of ignored operators in `websearch_to_tsquery()()` (Tom Lane)\n          Per the manual, punctuation in the input of `websearch_to_tsquery()()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Detect another integer overflow case while computing new array dimensions (Joseph Koshakow)\n          Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "sinceVersion": "14.13",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields (Noah Misch)\n          An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the pg_database catalog, so the effects are narrow, but misbehavior is possible.",
      "sinceVersion": "14.13",
      "contributor": "Noah Misch"
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT` (Tom Lane)\n          If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number `N` not found in view targetlist”.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Avoid reporting an unhelpful internal error for incorrect recursive queries (Tom Lane)\n          Rearrange the order of error checks so that we throw an on-point error when a WITH RECURSIVE query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "Don't throw an error if a queued `AFTER` trigger no longer exists (Tom Lane)\n          It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger `NNNN`”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped",
      "description": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped (Tom Lane)\n          If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg_dump dumps for that relation.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates (Tom Lane)\n          If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Refuse to modify a temporary table of another session with `ALTER TABLE` (Tom Lane)\n          Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of extended statistics on expressions in `CREATE TABLE LIKE STATISTICS`",
      "description": "Fix handling of extended statistics on expressions in `CREATE TABLE LIKE STATISTICS` (Tom Lane)\n          The `CREATE` command failed to adjust column references in statistics expressions to the possibly-different column numbering of the new table. This resulted in invalid statistics objects that would cause problems later. A typical scenario where renumbering columns is needed is when the source table contains some dropped columns.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN",
      "description": "Fix failure to recalculate sub-queries generated from `MIN()()` or `MAX()()` aggregates (Tom Lane)\n          In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "Avoid crashing when a JIT-inlined backend function throws an error (Tom Lane)\n          The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Cope with behavioral changes in libxml2 version 2.13.x (Erik Wienhold, Tom Lane)\n          Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "sinceVersion": "14.13",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "Fix handling of subtransactions of prepared transactions when starting a hot standby server (Heikki Linnakangas)\n          When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "sinceVersion": "14.13",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "Prevent incorrect initialization of logical replication slots (Masahiko Sawada)\n          In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "sinceVersion": "14.13",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "Avoid memory leakage after servicing a notify or sinval interrupt (Tom Lane)\n          The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent deadlocks and assertion failures during truncation of the multixact SLRU log",
      "description": "Prevent deadlocks and assertion failures during truncation of the multixact SLRU log (Heikki Linnakangas)\n          A process trying to delete SLRU segments could deadlock with the checkpointer process.",
      "sinceVersion": "14.13",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Avoid possibly missing end-of-input events on Windows sockets (Thomas Munro)\n          Windows reports an FD_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "sinceVersion": "14.13",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix buffer overread in JSON parse error reports for incomplete byte sequences",
      "description": "Fix buffer overread in JSON parse error reports for incomplete byte sequences (Jacob Champion)\n          It was possible to walk off the end of the input buffer by a few bytes when the last bytes comprise an incomplete multi-byte character. While usually harmless, in principle this could cause a crash.",
      "sinceVersion": "14.13",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "Disable creation of stateful TLS session tickets by OpenSSL (Daniel Gustafsson)\n          This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "sinceVersion": "14.13",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "When replanning a PL/pgSQL “simple expression”, check it's still simple (Tom Lane)\n          Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incompatibility between PL/Perl and Perl 5.40",
      "description": "Fix incompatibility between PL/Perl and Perl 5.40 (Andrew Dunstan)",
      "sinceVersion": "14.13",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix recursive RECORD-returning PL/Python functions",
      "description": "Fix recursive RECORD-returning PL/Python functions (Tom Lane)\n          If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call (Tom Lane)\n          If a PL/Python-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple (Erik Wienhold, Tom Lane)\n          Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "sinceVersion": "14.13",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror",
      "description": "Avoid non-thread-safe usage of `strerror()()` in libpq (Peter Eisentraut)\n          Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "sinceVersion": "14.13",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Ensure that `pg_restore` -l reports dependent TOC entries correctly",
      "description": "Ensure that `pg_restore` -l reports dependent TOC entries correctly (Tom Lane)\n          If -l was specified together with selective-restore options such as -n or -N, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/postgres_fdw, do not send `FETCH FIRST WITH TIES` clauses to the remote server",
      "description": "In contrib/postgres_fdw, do not send `FETCH FIRST WITH TIES` clauses to the remote server (Japin Li)\n          The remote server might not implement this clause, or might interpret it differently than we would locally, so don't risk attempting remote execution.",
      "sinceVersion": "14.13",
      "contributor": "Japin Li"
    },
    {
      "title": "Avoid clashing with system-provided &lt;regex.h&gt; headers",
      "description": "Avoid clashing with system-provided &lt;regex.h&gt; headers (Thomas Munro)\n          This fixes a compilation failure on macOS version 15 and up.",
      "sinceVersion": "14.13",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix otherwise-harmless assertion failure in Memoize cost estimation",
      "description": "Fix otherwise-harmless assertion failure in Memoize cost estimation (David Rowley)",
      "sinceVersion": "14.13",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index",
      "description": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane)",
      "sinceVersion": "14.13",
      "contributor": "Tom Lane"
    },
    {
      "title": "Enforce standard locking protocol for TOAST table updates, to prevent problems with REINDEX CONCURRENTLY",
      "description": "Enforce standard locking protocol for TOAST table updates, to prevent problems with REINDEX CONCURRENTLY (Michael Paquier)\n          If applied to a TOAST table or TOAST table's index, REINDEX CONCURRENTLY tended to produce a corrupted index. This happened because sessions updating TOAST entries released their `ROW EXCLUSIVE` locks immediately, rather than holding them until transaction commit as all other updates do. The fix is to make TOAST updates hold the table lock according to the normal rule. Any existing corrupted indexes can be repaired by reindexing again.",
      "sinceVersion": "14.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix corruption of HOT chains when a RECENTLY_DEAD tuple changes state to fully DEAD during page pruning",
      "description": "Fix corruption of HOT chains when a RECENTLY_DEAD tuple changes state to fully DEAD during page pruning (Andres Freund)\n          It was possible for VACUUM to remove a recently-dead tuple while leaving behind a redirect item that pointed to it. When the tuple's item slot is later re-used by some new tuple, that tuple would be seen as part of the pre-existing HOT chain, creating a form of index corruption. If this has happened, reindexing the table should repair the damage. However, this is an extremely low-probability scenario, so we do not recommend reindexing just on the chance that it might have happened.",
      "sinceVersion": "14.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix crash in EvalPlanQual rechecks for tables with a mix of local and foreign partitions",
      "description": "Fix crash in EvalPlanQual rechecks for tables with a mix of local and foreign partitions (Etsuro Fujita)",
      "sinceVersion": "14.2",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix dangling pointer in COPY TO",
      "description": "Fix dangling pointer in COPY TO (Bharath Rupireddy)\n          This oversight could cause an incorrect error message or a crash after an error in COPY.",
      "sinceVersion": "14.2",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Avoid null-pointer crash in ALTER STATISTICS when the statistics object is dropped concurrently",
      "description": "Avoid null-pointer crash in ALTER STATISTICS when the statistics object is dropped concurrently (Tomas Vondra)",
      "sinceVersion": "14.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Correctly handle alignment padding when extracting a range from a multirange",
      "description": "Correctly handle alignment padding when extracting a range from a multirange (Alexander Korotkov)\n          This error could cause crashes when handling multiranges over variable-length data types.",
      "sinceVersion": "14.2",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Fix over-optimistic use of hashing for anonymous RECORD data types",
      "description": "Fix over-optimistic use of hashing for anonymous RECORD data types (Tom Lane)\n          This prevents some cases of “could not identify a hash function for type record” errors.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect plan creation for parallel single-child Append nodes",
      "description": "Fix incorrect plan creation for parallel single-child Append nodes (David Rowley)\n          In some cases the Append would be simplified away when it should not be, leading to wrong query results (duplicated rows).",
      "sinceVersion": "14.2",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "Fix index-only scan plans for cases where not all index columns can be returned (Tom Lane)\n          If an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix Memoize plan nodes to handle subplans that use parameters coming from above the Memoize",
      "description": "Fix Memoize plan nodes to handle subplans that use parameters coming from above the Memoize (David Rowley)",
      "sinceVersion": "14.2",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix Memoize plan nodes to work correctly with non-hashable join operators",
      "description": "Fix Memoize plan nodes to work correctly with non-hashable join operators (David Rowley)",
      "sinceVersion": "14.2",
      "contributor": "David Rowley"
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call (Tom Lane)\n          While the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix checking of anycompatible-family data type matches",
      "description": "Fix checking of anycompatible-family data type matches (Tom Lane)\n          In some cases the parser would think that a function or operator with anycompatible-family polymorphic parameters matches a set of arguments that it really shouldn't match. In reported cases, that led to matching more than one operator to a call, leading to ambiguous-operator errors; but a failure later on is also possible.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary",
      "description": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary (Álvaro Herrera)",
      "sinceVersion": "14.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "Fix startup of a physical replica to tolerate transaction ID wraparound (Abhijit Menon-Sen, Tomas Vondra)\n          If a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "sinceVersion": "14.2",
      "contributor": "Abhijit Menon-Sen, Tomas Vondra"
    },
    {
      "title": "In logical replication, avoid double transmission of a child table's data",
      "description": "In logical replication, avoid double transmission of a child table's data (Hou Zhijie)\n          If a publication includes both child and parent tables, and has the `publish_via_partition_root` option set, subscribers uselessly initiated synchronization on both child and parent tables. Ensure that only the parent table is synchronized in such cases.",
      "sinceVersion": "14.2",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "Remove lexical limitations for SQL commands issued on a logical replication connection (Tom Lane)\n          The walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that replication origin timestamp is set while replicating a ROLLBACK PREPARED operation",
      "description": "Ensure that replication origin timestamp is set while replicating a ROLLBACK PREPARED operation (Masahiko Sawada)",
      "sinceVersion": "14.2",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction",
      "description": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction (Alex Kingsborough, Kyotaro Horiguchi)",
      "sinceVersion": "14.2",
      "contributor": "Alex Kingsborough, Kyotaro Horiguchi"
    },
    {
      "title": "Be sure to `fsync",
      "description": "Be sure to `fsync()` the pg_logical/mappings subdirectory during checkpoints (Nathan Bossart)\n          On some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "sinceVersion": "14.2",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "Build extended statistics for partitioned tables (Justin Pryzby)\n          A previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows ANALYZE to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual ANALYZE on the partitioned table if you want to maintain such statistics.)",
      "sinceVersion": "14.2",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Ignore extended statistics for inheritance trees (Justin Pryzby)\n          Currently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "sinceVersion": "14.2",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere (Tom Lane)\n          This restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index (Haiying Tang, Hou Zhijie)\n          The same prohibition already existed for primary key indexes.",
      "sinceVersion": "14.2",
      "contributor": "Haiying Tang, Hou Zhijie"
    },
    {
      "title": "Correctly update cached table state during ALTER TABLE ADD PRIMARY KEY USING INDEX",
      "description": "Correctly update cached table state during ALTER TABLE ADD PRIMARY KEY USING INDEX (Hou Zhijie)\n          Concurrent sessions failed to update their opinion of whether the table has a primary key, possibly causing incorrect logical replication behavior.",
      "sinceVersion": "14.2",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Correctly update cached table state when switching `REPLICA IDENTITY` index (Tang Haiying, Hou Zhijie)\n          Concurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "sinceVersion": "14.2",
      "contributor": "Tang Haiying, Hou Zhijie"
    },
    {
      "title": "Fix failure of SP-GiST indexes when the indexed column's data type is binary-compatible with the declared input type of the operator class",
      "description": "Fix failure of SP-GiST indexes when the indexed column's data type is binary-compatible with the declared input type of the operator class (Tom Lane)\n          Such cases should work, but failed with “compress method must be defined when leaf type is different from input type”.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow parallel vacuuming and concurrent index building to be ignored while computing oldest xmin",
      "description": "Allow parallel vacuuming and concurrent index building to be ignored while computing oldest xmin (Masahiko Sawada)\n          Non-parallelized instances of these operations were already ignored, but the logic did not work for parallelized cases. Holding back the xmin horizon has undesirable effects such as delaying vacuum cleanup.",
      "sinceVersion": "14.2",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix memory leak when updating expression indexes",
      "description": "Fix memory leak when updating expression indexes (Peter Geoghegan)\n          An UPDATE affecting many rows could consume significant amounts of memory.",
      "sinceVersion": "14.2",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects",
      "description": "Avoid leaking memory during REASSIGN OWNED BY operations that reassign ownership of many objects (Justin Pryzby)",
      "sinceVersion": "14.2",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix display of `cert` authentication method's options in pg_hba_file_rules view",
      "description": "Fix display of `cert` authentication method's options in pg_hba_file_rules view (Magnus Hagander)\n          The `cert` authentication method implies `clientcert=verify-full`, but the pg_hba_file_rules view incorrectly reported `clientcert=verify-ca`.",
      "sinceVersion": "14.2",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Ensure that the session targeted by `pg_log_backend_memory_contexts",
      "description": "Ensure that the session targeted by `pg_log_backend_memory_contexts()()` sends its results only to the server's log (Fujii Masao)\n          Previously, a sufficiently high setting of client_min_messages could result in the log message also being sent to the connected client. Since that client hadn't requested it, that would be surprising (and possibly a wire protocol violation).",
      "sinceVersion": "14.2",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules (Tom Lane)\n          A whole-row variable would be printed as “var.*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "When reverse-listing a SQL-standard function body, display function parameters appropriately within INSERT ... SELECT",
      "description": "When reverse-listing a SQL-standard function body, display function parameters appropriately within INSERT ... SELECT (Tom Lane)\n          Previously, they'd come out as `$`N`` even when the parameter had a name.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix one-byte buffer overrun when applying Unicode string normalization to an empty string",
      "description": "Fix one-byte buffer overrun when applying Unicode string normalization to an empty string (Michael Paquier)\n          The practical impact of this is limited thanks to alignment considerations; but in debug builds, a warning was raised.",
      "sinceVersion": "14.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "Fix or remove some incorrect assertions (Simon Riggs, Michael Paquier, Alexander Lakhin)\n          These errors should affect only debug builds, not production.",
      "sinceVersion": "14.2",
      "contributor": "Simon Riggs, Michael Paquier, Alexander Lakhin"
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib",
      "description": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib (Tom Lane)",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid calling `strerror",
      "description": "Avoid calling `strerror()` from libpq's `PQcancel()` function (Tom Lane)\n          `PQcancel()` is supposed to be safe to call from a signal handler, but `strerror()` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "Make psql's \\password command default to setting the password for `CURRENT_USER`, not the connection's original user name (Tom Lane)\n          This agrees with the documented behavior, and avoids probable permissions failure if SET ROLE or SET SESSION AUTHORIZATION has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix psql `\\d` command's query for identifying parent triggers",
      "description": "Fix psql `\\d` command's query for identifying parent triggers (Justin Pryzby)\n          The previous coding failed with “more than one row returned by a subquery used as an expression” if a partition had triggers and there were unrelated statement-level triggers of the same name on some parent partitioned table.",
      "sinceVersion": "14.2",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Make psql's `\\d` command sort a table's extended statistics objects by name not OID",
      "description": "Make psql's `\\d` command sort a table's extended statistics objects by name not OID (Justin Pryzby)",
      "sinceVersion": "14.2",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix psql's tab-completion of label values for enum types",
      "description": "Fix psql's tab-completion of label values for enum types (Tom Lane)",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failures on Windows when using the terminal as data source or destination",
      "description": "Fix failures on Windows when using the terminal as data source or destination (Dmitry Koval, Juan José Santamaría Flecha, Michael Paquier)\n          This affects psql's \\copy command, as well as pg_recvlogical with -f -.",
      "sinceVersion": "14.2",
      "contributor": "Dmitry Koval, Juan José Santamaría Flecha, Michael Paquier"
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext",
      "description": "In psql and some other client programs, avoid trying to invoke `gettext()()` from a control-C signal handler (Tom Lane)\n          While no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical",
      "description": "Allow canceling the initial password prompt in pg_receivewal and pg_recvlogical (Tom Lane, Nathan Bossart)\n          Previously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane, Nathan Bossart"
    },
    {
      "title": "Fix pg_dump's dump ordering for user-defined casts",
      "description": "Fix pg_dump's dump ordering for user-defined casts (Tom Lane)\n          In rare cases, the output script might refer to a user-defined cast before it had been created.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump's --inserts and --column-inserts modes to handle tables containing both generated columns and dropped columns",
      "description": "Fix pg_dump's --inserts and --column-inserts modes to handle tables containing both generated columns and dropped columns (Tom Lane)",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup",
      "description": "Fix possible mis-reporting of errors in pg_dump and pg_basebackup (Tom Lane)\n          The previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix results of index-only scans on contrib/btree_gist indexes on char",
      "description": "Fix results of index-only scans on contrib/btree_gist indexes on char(`N`) columns (Tom Lane)\n          Index-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store char(`N`) values with the expected amount of space padding. The behavior of such an index will not change immediately unless you REINDEX it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge cases in postgres_fdw's handling of asynchronous queries",
      "description": "Fix edge cases in postgres_fdw's handling of asynchronous queries (Etsuro Fujita)\n          These errors could lead to crashes or incorrect results when attempting to parallelize scans of foreign tables.",
      "sinceVersion": "14.2",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python (Peter Eisentraut, Tom Lane, Andres Freund)\n          With Python 3.10, this avoids configure-time warnings about distutils being deprecated and scheduled for removal in Python 3.12. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "sinceVersion": "14.2",
      "contributor": "Peter Eisentraut, Tom Lane, Andres Freund"
    },
    {
      "title": "Re-allow cross-compilation without OpenSSL",
      "description": "Re-allow cross-compilation without OpenSSL (Tom Lane)\n          configure should assume that /dev/urandom will be available on the target system, but it failed instead.",
      "sinceVersion": "14.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later",
      "description": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later (Victor Wagner)",
      "sinceVersion": "14.2",
      "contributor": "Victor Wagner"
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later",
      "description": "Fix PL/Python compile failure with Python 3.11 and later (Peter Eisentraut)",
      "sinceVersion": "14.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add support for building with Visual Studio 2022",
      "description": "Add support for building with Visual Studio 2022 (Hans Buschmann)",
      "sinceVersion": "14.2",
      "contributor": "Hans Buschmann"
    },
    {
      "title": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory",
      "description": "Allow the .bat wrapper scripts in our MSVC build system to be called without first changing into their directory (Anton Voloshin, Andrew Dunstan)",
      "sinceVersion": "14.2",
      "contributor": "Anton Voloshin, Andrew Dunstan"
    },
    {
      "title": "Fix planner failure when a Result plan node appears immediately underneath an Append node",
      "description": "Fix planner failure when a Result plan node appears immediately underneath an Append node (Etsuro Fujita)\n          Recently-added code to support asynchronous remote queries failed to handle this case, leading to crashes or errors about unrecognized node types.",
      "sinceVersion": "14.3",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns (Tom Lane)\n          The previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope correctly with platforms that have no support for altering the server process's display in ps",
      "description": "Cope correctly with platforms that have no support for altering the server process's display in ps(1) (Andrew Dunstan)\n          Few platforms are like this (the only supported one is Cygwin), so we'd managed not to notice that refactoring introduced a potential memory clobber.",
      "sinceVersion": "14.3",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix default signature length for `gist_ltree_ops` indexes",
      "description": "Fix default signature length for `gist_ltree_ops` indexes (Tomas Vondra, Alexander Korotkov)\n          The default signature length (hash size) for GiST indexes on ltree columns was accidentally changed while upgrading that operator class to support operator class parameters. If any operations had been done on such an index without first upgrading the `ltree` extension to version 1.2, they were done assuming that the signature length was 28 bytes rather than the intended 8. This means it is very likely that such indexes are now corrupt. For safety we recommend re-indexing all GiST indexes on ltree columns after installing this update. (Note that GiST indexes on ltree[] columns, that is arrays of ltree, are not affected.)",
      "sinceVersion": "14.3",
      "contributor": "Tomas Vondra, Alexander Korotkov"
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables (Tom Lane)\n          The column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\n          In cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type record to begin with and there's no issue.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect roundoff when extracting epoch values from intervals",
      "description": "Fix incorrect roundoff when extracting epoch values from intervals (Peter Eisentraut)\n          The new numeric-based code for `EXTRACT()()` failed to yield results equivalent to the old float-based code, as a result of accidentally truncating the `DAYS_PER_YEAR` value to an integer.",
      "sinceVersion": "14.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Defend against `pg_stat_get_replication_slot",
      "description": "Defend against `pg_stat_get_replication_slot(NULL)` (Andres Freund)\n          This function should be marked strict in the catalog data, but it was not in v14, so add a run-time check instead.",
      "sinceVersion": "14.3",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema",
      "description": "Fix incorrect output for types timestamptz and timetz in `table_to_xmlschema()()` and allied functions (Renan Soares Lopes)\n          The xmlschema output for these types included a malformed regular expression.",
      "sinceVersion": "14.3",
      "contributor": "Renan Soares Lopes"
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns",
      "description": "Avoid core dump in parser for a `VALUES` clause with zero columns (Tom Lane)",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner failure if a query using `SEARCH` or `CYCLE` features contains a duplicate CTE name",
      "description": "Fix planner failure if a query using `SEARCH` or `CYCLE` features contains a duplicate CTE name (Tom Lane, Kyotaro Horiguchi)\n          When the name of the recursive `WITH` query is re-used within itself, the planner could crash or report odd errors such as “could not find attribute 2 in subquery targetlist”.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane, Kyotaro Horiguchi"
    },
    {
      "title": "Fix planner errors for `GROUPING",
      "description": "Fix planner errors for `GROUPING()()` constructs that reference outer query levels (Richard Guo, Tom Lane)",
      "sinceVersion": "14.3",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid accessing a no-longer-pinned shared buffer while attempting to lock an outdated tuple during EvalPlanQual",
      "description": "Avoid accessing a no-longer-pinned shared buffer while attempting to lock an outdated tuple during EvalPlanQual (Tom Lane)\n          The code would touch the buffer a couple more times after releasing its pin. In theory another process could recycle the buffer (or more likely, try to defragment its free space) as soon as the pin is gone, probably leading to failure to find the newer version of the tuple.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering",
      "description": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering (Aliaksandr Kalenik)",
      "sinceVersion": "14.3",
      "contributor": "Aliaksandr Kalenik"
    },
    {
      "title": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command",
      "description": "Fix ALTER FUNCTION to support changing a function's parallelism property and its `SET`-variable list in the same command (Tom Lane)\n          The parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Tighten lookup of the index “owned by” a constraint",
      "description": "Tighten lookup of the index “owned by” a constraint (Tom Lane, Japin Li)\n          Some code paths mistook the index depended on by a foreign key constraint for one owned by a unique or primary key constraint, resulting in odd errors during certain ALTER TABLE operations on tables having foreign key constraints.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane, Japin Li"
    },
    {
      "title": "Fix bogus errors from attempts to alter system columns of tables",
      "description": "Fix bogus errors from attempts to alter system columns of tables (Tom Lane)\n          The system should just tell you that you can't do it, but sometimes it would report “no owned sequence found” instead.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression",
      "description": "Fix mis-sorting of table rows when CLUSTERing using an index whose leading key is an expression (Peter Geoghegan, Thomas Munro)\n          The table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "sinceVersion": "14.3",
      "contributor": "Peter Geoghegan, Thomas Munro"
    },
    {
      "title": "Prevent data loss if a system crash occurs shortly after a sorted GiST index build",
      "description": "Prevent data loss if a system crash occurs shortly after a sorted GiST index build (Heikki Linnakangas)\n          The code path for building GiST indexes using sorting neglected to `fsync()` the file upon completion. This could result in a corrupted index if the operating system crashed shortly later.",
      "sinceVersion": "14.3",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix risk of deadlock failures while dropping a partitioned index",
      "description": "Fix risk of deadlock failures while dropping a partitioned index (Jimmy Yih, Gaurab Dey, Tom Lane)\n          Ensure that the required table and index locks are taken in the standard order (parents before children, tables before indexes). The previous coding for DROP INDEX did it differently, and so could deadlock against concurrent queries taking these locks in the standard order.",
      "sinceVersion": "14.3",
      "contributor": "Jimmy Yih, Gaurab Dey, Tom Lane"
    },
    {
      "title": "Fix race condition between DROP TABLESPACE and checkpointing",
      "description": "Fix race condition between DROP TABLESPACE and checkpointing (Nathan Bossart)\n          The checkpoint forced by DROP TABLESPACE could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "sinceVersion": "14.3",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint",
      "description": "Fix possible trouble in crash recovery after a TRUNCATE command that overlaps a checkpoint (Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas)\n          TRUNCATE must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "sinceVersion": "14.3",
      "contributor": "Kyotaro Horiguchi, Heikki Linnakangas, Robert Haas"
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Fix unsafe toast-data accesses during temporary object cleanup (Andres Freund)\n          Temporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "sinceVersion": "14.3",
      "contributor": "Andres Freund"
    },
    {
      "title": "Re-allow underscore as the first character in a custom parameter name",
      "description": "Re-allow underscore as the first character in a custom parameter name (Japin Li)\n          Such names were unintentionally disallowed in v14.",
      "sinceVersion": "14.3",
      "contributor": "Japin Li"
    },
    {
      "title": "Add `regress` option for the compute_query_id parameter",
      "description": "Add `regress` option for the compute_query_id parameter (Michael Paquier)\n          This is intended to facilitate testing, by allowing query IDs to be computed but not shown in EXPLAIN output.",
      "sinceVersion": "14.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Improve wait logic in RegisterSyncRequest",
      "description": "Improve wait logic in RegisterSyncRequest (Thomas Munro)\n          If we run out of space in the checkpointer sync request queue (which is hopefully rare on real systems, but is common when testing with a very small buffer pool), we wait for it to drain. While waiting, we should report that as a wait event so that users know what is going on, and also watch for postmaster death, since otherwise the loop might never terminate if the checkpointer has already exited.",
      "sinceVersion": "14.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Wake up for latch events when the checkpointer is waiting between writes",
      "description": "Wake up for latch events when the checkpointer is waiting between writes (Thomas Munro)\n          This improves responsiveness to backends sending sync requests. The change also creates a proper wait event class for these waits.",
      "sinceVersion": "14.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record",
      "description": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record (Sami Imseih)",
      "sinceVersion": "14.3",
      "contributor": "Sami Imseih"
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "Fix possibility of self-deadlock in hot standby conflict handling (Andres Freund)\n          With unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "sinceVersion": "14.3",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix possible mis-identification of the correct ancestor relation to publish logical replication changes through",
      "description": "Fix possible mis-identification of the correct ancestor relation to publish logical replication changes through (Tomas Vondra, Hou zj, Amit Kapila)\n          If publish_via_partition_root is enabled, and there are multiple publications naming different ancestors of the currently-modified relation, the wrong ancestor might be chosen for reporting the change.",
      "sinceVersion": "14.3",
      "contributor": "Tomas Vondra, Hou zj, Amit Kapila"
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit",
      "description": "Ensure that logical replication apply workers can be restarted even when we're up against the max_sync_workers_per_subscription limit (Amit Kapila)\n          Faulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "sinceVersion": "14.3",
      "contributor": "Amit Kapila"
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line (Dilip Kumar, Amit Kapila)\n          Otherwise subscribers cannot see the values and will fail to replicate the update.",
      "sinceVersion": "14.3",
      "contributor": "Dilip Kumar, Amit Kapila"
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "Make libpq accept root-owned SSL private key files (David Steele)\n          This change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "sinceVersion": "14.3",
      "contributor": "David Steele"
    },
    {
      "title": "Fix behavior of libpq's `PQisBusy",
      "description": "Fix behavior of libpq's `PQisBusy()()` function after a connection failure (Tom Lane)\n          If we'd detected a write failure, `PQisBusy()()` would always return true, which is the wrong thing: we want input processing to carry on normally until we've read whatever is available from the server. The practical effect of this error is that applications using libpq's async-query API would typically detect connection loss only when `PQconsumeInput()()` returns a hard failure. With this fix, a connection loss will normally be reported via an error PGresult object, which is a much cleaner behavior for most applications.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Re-allow `database`.`schema`.`table` patterns in psql, pg_dump, and pg_amcheck",
      "description": "Re-allow `database`.`schema`.`table` patterns in psql, pg_dump, and pg_amcheck (Mark Dilger)\n          Versions before v14 silently ignored all but the `schema` and `table` fragments of a pattern containing more than one dot. Refactoring in v14 accidentally broke that use-case. Reinstate it, but now complain if the first fragment is not the name of the current database.",
      "sinceVersion": "14.3",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "Make pg_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions (Tom Lane)\n          pg_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error handling in pg_waldump",
      "description": "Fix error handling in pg_waldump (Kyotaro Horiguchi, Andres Freund)\n          While trying to read a WAL file to determine the WAL segment size, pg_waldump would report an incorrect error for the case of a too-short file. In addition, the file name reported in this and related error messages could be garbage.",
      "sinceVersion": "14.3",
      "contributor": "Kyotaro Horiguchi, Andres Freund"
    },
    {
      "title": "Ensure that contrib/pageinspect functions cope with all-zero pages",
      "description": "Ensure that contrib/pageinspect functions cope with all-zero pages (Michael Paquier)\n          This is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "sinceVersion": "14.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "In contrib/pageinspect, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type (Michael Paquier, Justin Pryzby, Julien Rouhaud)\n          These changes make it less likely that the module will crash on bad data.",
      "sinceVersion": "14.3",
      "contributor": "Michael Paquier, Justin Pryzby, Julien Rouhaud"
    },
    {
      "title": "In contrib/postgres_fdw, disable batch insertion when `BEFORE INSERT ... FOR EACH ROW` triggers exist on the foreign table",
      "description": "In contrib/postgres_fdw, disable batch insertion when `BEFORE INSERT ... FOR EACH ROW` triggers exist on the foreign table (Etsuro Fujita)\n          Such a trigger might query the table it's on and expect to see previously-inserted rows. With batch insertion, those rows might not be visible yet, so disable the feature to avoid unexpected behavior.",
      "sinceVersion": "14.3",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "In contrib/postgres_fdw, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary (Ronan Dunklau)\n          This fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "sinceVersion": "14.3",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Fix configure to handle platforms that have sys/epoll.h but not sys/signalfd.h",
      "description": "Fix configure to handle platforms that have sys/epoll.h but not sys/signalfd.h (Tom Lane)",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update JIT code to work with LLVM 14",
      "description": "Update JIT code to work with LLVM 14 (Thomas Munro)",
      "sinceVersion": "14.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Clean up assorted failures under clang's `-fsanitize=undefined` checks (Tom Lane, Andres Freund, Zhihong Yu)\n          Most of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane, Andres Freund, Zhihong Yu"
    },
    {
      "title": "Do not add OpenSSL dependencies to libpq's pkg-config file when building without OpenSSL",
      "description": "Do not add OpenSSL dependencies to libpq's pkg-config file when building without OpenSSL (Fabrice Fontaine)",
      "sinceVersion": "14.3",
      "contributor": "Fabrice Fontaine"
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions",
      "description": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions (Tom Lane)",
      "sinceVersion": "14.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build",
      "description": "Fix possible build failure of pg_dumpall on Windows, when not using MSVC to build (Andres Freund)",
      "sinceVersion": "14.3",
      "contributor": "Andres Freund"
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "In Windows builds, use gendef instead of pexports to build DEF files (Andrew Dunstan)\n          This adapts the build process to work on recent MSys tool chains.",
      "sinceVersion": "14.3",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW (Andrew Dunstan)\n          For some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "sinceVersion": "14.3",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine.",
      "sinceVersion": "14.3",
      "contributor": null
    },
    {
      "title": "Harden Memoize plan node against non-deterministic equality functions",
      "description": "Harden Memoize plan node against non-deterministic equality functions (David Rowley)\n          Memoize could crash if a data type's equality or hash functions gave inconsistent results across different calls. Throw a runtime error instead.",
      "sinceVersion": "14.4",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix incorrect cost estimates for Memoize plans",
      "description": "Fix incorrect cost estimates for Memoize plans (David Rowley)\n          This mistake could lead to Memoize being used when it isn't really the best plan, or to very long executor startup times due to initializing an overly-large hash table for a Memoize node.",
      "sinceVersion": "14.4",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type",
      "description": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type (Tom Lane)",
      "sinceVersion": "14.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function",
      "description": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function (Richard Guo)",
      "sinceVersion": "14.4",
      "contributor": "Richard Guo"
    },
    {
      "title": "Prevent `pg_stat_get_subscription",
      "description": "Prevent `pg_stat_get_subscription()()` from possibly returning an extra row containing garbage values (Kuntal Ghosh)",
      "sinceVersion": "14.4",
      "contributor": "Kuntal Ghosh"
    },
    {
      "title": "Fix COPY FROM's error checking in the case where the database encoding is `SQL_ASCII` while the client's encoding is a multi-byte encoding",
      "description": "Fix COPY FROM's error checking in the case where the database encoding is `SQL_ASCII` while the client's encoding is a multi-byte encoding (Heikki Linnakangas)\n          This mistake could lead to false complaints of invalidly-encoded input data.",
      "sinceVersion": "14.4",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct",
      "description": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct (Álvaro Herrera)",
      "sinceVersion": "14.4",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "When decompiling a view or rule, show a SELECT output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere (Tom Lane)\n          Previously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "sinceVersion": "14.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "Report implicitly-created operator families to event triggers (Masahiko Sawada)\n          If CREATE OPERATOR CLASS results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "sinceVersion": "14.4",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Fix control file updates made when a restartpoint is running during promotion of a standby server (Kyotaro Horiguchi)\n          Previously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "sinceVersion": "14.4",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions",
      "description": "Prevent triggering of standby's wal_receiver_timeout during logical replication of large transactions (Wang Wei, Amit Kapila)\n          If a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "sinceVersion": "14.4",
      "contributor": "Wang Wei, Amit Kapila"
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Prevent open-file leak when reading an invalid timezone abbreviation file (Kyotaro Horiguchi)\n          Such cases could result in harmless warning messages.",
      "sinceVersion": "14.4",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Allow custom server parameters to have short descriptions that are NULL (Steve Chavez)\n          Previously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "sinceVersion": "14.4",
      "contributor": "Steve Chavez"
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "Remove misguided SSL key file ownership check in libpq (Tom Lane)\n          In the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "sinceVersion": "14.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Ensure ecpg reports server connection loss sanely (Tom Lane)\n          Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "sinceVersion": "14.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent crash after server connection loss in pg_amcheck",
      "description": "Prevent crash after server connection loss in pg_amcheck (Tom Lane)\n          Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to a crash.",
      "sinceVersion": "14.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36",
      "description": "Adjust PL/Perl test case so it will work under Perl 5.36 (Dagfinn Ilmari Mannsåker)",
      "sinceVersion": "14.4",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL",
      "description": "Avoid incorrectly using an out-of-date libldap_r library when multiple OpenLDAP installations are present while building PostgreSQL (Tom Lane)",
      "sinceVersion": "14.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "Do not let extension scripts replace objects not already belonging to the extension (Tom Lane)\n          This change prevents extension scripts from doing CREATE OR REPLACE if there is an existing object that does not belong to the extension. It also prevents CREATE IF NOT EXISTS in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\n          The PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix replay of CREATE DATABASE WAL records on standby servers",
      "description": "Fix replay of CREATE DATABASE WAL records on standby servers (Kyotaro Horiguchi, Asim R Praveen, Paul Guo)\n          Standby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "sinceVersion": "14.5",
      "contributor": "Kyotaro Horiguchi, Asim R Praveen, Paul Guo"
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Support “in place” tablespaces (Thomas Munro, Michael Paquier, Álvaro Herrera)\n          Normally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the CREATE DATABASE replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "sinceVersion": "14.5",
      "contributor": "Thomas Munro, Michael Paquier, Álvaro Herrera"
    },
    {
      "title": "Fix permissions checks in CREATE INDEX",
      "description": "Fix permissions checks in CREATE INDEX (Nathan Bossart, Noah Misch)\n          The fix for CVE-2022-1552 caused CREATE INDEX to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg_dump issues CREATE INDEX before re-granting permissions.",
      "sinceVersion": "14.5",
      "contributor": "Nathan Bossart, Noah Misch"
    },
    {
      "title": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block",
      "description": "In extended query protocol, force an immediate commit after CREATE DATABASE and other commands that can't run in a transaction block (Tom Lane)\n          If the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "Fix race condition when checking transaction visibility (Simon Riggs)\n          `TransactionIdIsInProgress()` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "sinceVersion": "14.5",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Fix incorrect plans when sorting by an expression that contains a non-top-level set-returning function",
      "description": "Fix incorrect plans when sorting by an expression that contains a non-top-level set-returning function (Richard Guo, Tom Lane)",
      "sinceVersion": "14.5",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Fix incorrect permissions-checking code for extended statistics",
      "description": "Fix incorrect permissions-checking code for extended statistics (Richard Guo)\n          If there are extended statistics on a table that the user has only partial `SELECT` permissions on, some queries would fail with “unrecognized node type” errors.",
      "sinceVersion": "14.5",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix extended statistics machinery to handle MCV-type statistics on boolean-valued expressions",
      "description": "Fix extended statistics machinery to handle MCV-type statistics on boolean-valued expressions (Tom Lane)\n          Statistics collection worked fine, but a query containing such an expression in `WHERE` would fail with “unknown clause type”.",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid planner core dump with ``constant` = ANY",
      "description": "Avoid planner core dump with ``constant` = ANY(array`) clauses when there are MCV-type extended statistics on the `array` variable (Tom Lane)",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables",
      "description": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables (Álvaro Herrera, Amit Langote)\n          In certain cases, a “trigger does not exist” failure would occur because the command would try to adjust the trigger on a child partition that doesn't have it.",
      "sinceVersion": "14.5",
      "contributor": "Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Allow cancellation of ANALYZE while it is computing extended statistics",
      "description": "Allow cancellation of ANALYZE while it is computing extended statistics (Tom Lane, Justin Pryzby)\n          In some scenarios with high statistics targets, it was possible to spend many seconds in an un-cancellable sort operation.",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane, Justin Pryzby"
    },
    {
      "title": "Improve syntax error messages for type jsonpath",
      "description": "Improve syntax error messages for type jsonpath (Andrew Dunstan)",
      "sinceVersion": "14.5",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Ensure that `pg_stop_backup",
      "description": "Ensure that `pg_stop_backup()()` cleans up session state properly (Fujii Masao)\n          This omission could lead to assertion failures or crashes later in the session.",
      "sinceVersion": "14.5",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix `trim_array",
      "description": "Fix `trim_array()()` to handle a zero-dimensional array argument sanely (Martin Kalcher)",
      "sinceVersion": "14.5",
      "contributor": "Martin Kalcher"
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses (Dean Rasheed)\n          In corner cases, a misleading error could be reported.",
      "sinceVersion": "14.5",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Reject `ROW",
      "description": "Reject `ROW()` expressions and functions in `FROM` that have too many columns (Tom Lane)\n          Cases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column",
      "description": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made (Tom Lane)\n          This oversight could lead to dump/reload or pg_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders",
      "description": "Disallow nested backup operations in logical replication walsenders (Fujii Masao)",
      "sinceVersion": "14.5",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Fix memory leak in logical replication subscribers",
      "description": "Fix memory leak in logical replication subscribers (Hou Zhijie)",
      "sinceVersion": "14.5",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Fix logical replication's checking of replica identity when the target table is partitioned",
      "description": "Fix logical replication's checking of replica identity when the target table is partitioned (Shi Yu, Hou Zhijie)\n          The replica identity columns have to be re-identified for the child partition.",
      "sinceVersion": "14.5",
      "contributor": "Shi Yu, Hou Zhijie"
    },
    {
      "title": "Fix failures to update cached schema data in a logical replication subscriber after a schema change on the publisher",
      "description": "Fix failures to update cached schema data in a logical replication subscriber after a schema change on the publisher (Shi Yu, Hou Zhijie)",
      "sinceVersion": "14.5",
      "contributor": "Shi Yu, Hou Zhijie"
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags",
      "description": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags (Haiyang Wang)",
      "sinceVersion": "14.5",
      "contributor": "Haiyang Wang"
    },
    {
      "title": "Fix erroneous assertion checks in shared hashtable management",
      "description": "Fix erroneous assertion checks in shared hashtable management (Thomas Munro)",
      "sinceVersion": "14.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid assertion failure when min_dynamic_shared_memory is set to a non-default value",
      "description": "Avoid assertion failure when min_dynamic_shared_memory is set to a non-default value (Thomas Munro)",
      "sinceVersion": "14.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Arrange to clean up after commit-time errors within `SPI_commit",
      "description": "Arrange to clean up after commit-time errors within `SPI_commit()()`, rather than expecting callers to do that (Peter Eisentraut, Tom Lane)\n          Proper cleanup is complicated and requires use of low-level facilities, so it's not surprising that no known caller got it right. This led to misbehaviors when a PL procedure issued COMMIT but a failure occurred (such as a deferred constraint check). To improve matters, redefine `SPI_commit()()` as starting a new transaction, so that it becomes equivalent to `SPI_commit_and_chain()()` except that you get default transaction characteristics instead of preserving the prior transaction's characteristics. To make this somewhat transparent API-wise, redefine `SPI_start_transaction()()` as a no-op. All known callers of `SPI_commit()()` immediately call `SPI_start_transaction()()`, so they will not notice any change. Similar remarks apply to `SPI_rollback()()`.\n          Also fix PL/Python, which omitted any handling of such errors at all, resulting in jumping out of the Python interpreter. This is reported to crash Python 3.11. Older Python releases leak some memory but seem okay with it otherwise.",
      "sinceVersion": "14.5",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Improve libpq's handling of idle states in pipeline mode",
      "description": "Improve libpq's handling of idle states in pipeline mode (Álvaro Herrera, Kyotaro Horiguchi)\n          This fixes “message type 0x33 arrived from server while idle” warnings, as well as possible loss of end-of-query NULL results from `PQgetResult()()`.",
      "sinceVersion": "14.5",
      "contributor": "Álvaro Herrera, Kyotaro Horiguchi"
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Avoid core dump in ecpglib with unexpected orders of operations (Tom Lane)\n          Certain operations such as EXEC SQL PREPARE would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql's \\watch command, echo a newline after cancellation with control-C",
      "description": "In psql's \\watch command, echo a newline after cancellation with control-C (Pavel Stehule)\n          This prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "sinceVersion": "14.5",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Fix pg_upgrade to detect non-upgradable usages of functions taking anyarray",
      "description": "Fix pg_upgrade to detect non-upgradable usages of functions taking anyarray (Justin Pryzby)\n          Version 14 changed some built-in functions to take type anycompatiblearray instead of anyarray. While this is mostly transparent, user-defined aggregates and operators built atop these functions have to be declared with exactly matching types. The presence of an object referencing the old signature will cause pg_upgrade to fail, so change it to detect and report such cases before beginning the upgrade.",
      "sinceVersion": "14.5",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix possible report of wrong error condition after `clone",
      "description": "Fix possible report of wrong error condition after `clone()()` failure in pg_upgrade with --clone option (Justin Pryzby)",
      "sinceVersion": "14.5",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms",
      "description": "Fix contrib/pg_stat_statements to avoid problems with very large query-text files on 32-bit platforms (Tom Lane)",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/postgres_fdw, prevent batch insertion when there are `WITH CHECK OPTION` constraints",
      "description": "In contrib/postgres_fdw, prevent batch insertion when there are `WITH CHECK OPTION` constraints (Etsuro Fujita)\n          Such constraints cannot be checked properly if more than one row is inserted at a time.",
      "sinceVersion": "14.5",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix contrib/postgres_fdw to detect failure to send an asynchronous data fetch query",
      "description": "Fix contrib/postgres_fdw to detect failure to send an asynchronous data fetch query (Fujii Masao)",
      "sinceVersion": "14.5",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification",
      "description": "Ensure that contrib/postgres_fdw sends constants of regconfig and other reg* types with proper schema qualification (Tom Lane)",
      "sinceVersion": "14.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "Block signals while allocating dynamic shared memory on Linux (Thomas Munro)\n          This avoids problems when a signal interrupts `posix_fallocate()()`.",
      "sinceVersion": "14.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open",
      "description": "Detect unexpected `EEXIST` error from `shm_open()()` (Thomas Munro)\n          This avoids a possible crash on Solaris.",
      "sinceVersion": "14.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid using `signalfd",
      "description": "Avoid using `signalfd()()` on illumos systems (Thomas Munro)\n          This appears to trigger hangs and kernel panics, so avoid the function until a fix is available.",
      "sinceVersion": "14.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix construction of per-partition foreign key constraints while doing ALTER TABLE ATTACH PARTITION",
      "description": "Fix construction of per-partition foreign key constraints while doing ALTER TABLE ATTACH PARTITION (Jehan-Guillaume de Rorthais, Álvaro Herrera)\n          Previously, incorrect or duplicate constraints could be constructed for the newly-added partition.",
      "sinceVersion": "14.6",
      "contributor": "Jehan-Guillaume de Rorthais, Álvaro Herrera"
    },
    {
      "title": "Avoid rare PANIC during updates occurring concurrently with VACUUM",
      "description": "Avoid rare PANIC during updates occurring concurrently with VACUUM (Tom Lane, Jeff Davis)\n          If a concurrent VACUUM sets the all-visible flag bit in a page that UPDATE or DELETE is in process of modifying, the updating command needs to clear that bit again; but some code paths failed to do so, ending in a PANIC exit and database restart.\n          This is known to be possible in versions 14 and 15. It may be only latent in previous branches.",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane, Jeff Davis"
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view",
      "description": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view (Tom Lane)\n          This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "Disallow rules named `_RETURN` that are not `ON SELECT` (Tom Lane)\n          This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix resource management bug in saving tuples for `AFTER` triggers",
      "description": "Fix resource management bug in saving tuples for `AFTER` triggers (Tom Lane)\n          Given the right circumstances, this manifested as a “tupdesc reference `NNNN` is not owned by resource owner” error followed by a PANIC exit.",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure in EXPLAIN VERBOSE for a query using `SEARCH BREADTH FIRST` with constant initial values",
      "description": "Avoid failure in EXPLAIN VERBOSE for a query using `SEARCH BREADTH FIRST` with constant initial values (Tom Lane)",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix generation of constraint names for per-partition foreign key constraints",
      "description": "Fix generation of constraint names for per-partition foreign key constraints (Jehan-Guillaume de Rorthais)\n          If the initially-given name is already in use for some constraint of the partition, a new one is selected; but it wasn't being spelled as intended.",
      "sinceVersion": "14.6",
      "contributor": "Jehan-Guillaume de Rorthais"
    },
    {
      "title": "Fix incorrect matching of index expressions and predicates when creating a partitioned index",
      "description": "Fix incorrect matching of index expressions and predicates when creating a partitioned index (Richard Guo, Tom Lane)\n          While creating a partitioned index, we try to identify any existing indexes on the partitions that match the partitioned index, so that we can absorb those as child indexes instead of building new ones. Matching of expressions was not done right, so that a usable child index might be ignored, leading to creation of a duplicative index.",
      "sinceVersion": "14.6",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "Prevent WAL corruption after a standby promotion (Dilip Kumar, Robert Haas)\n          When a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "sinceVersion": "14.6",
      "contributor": "Dilip Kumar, Robert Haas"
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes (Matthias van de Meent, Zhang Mingli)\n          This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "sinceVersion": "14.6",
      "contributor": "Matthias van de Meent, Zhang Mingli"
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction (Masahiko Sawada, Kuroda Hayato)\n          These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "sinceVersion": "14.6",
      "contributor": "Masahiko Sawada, Kuroda Hayato"
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "Prevent examining system catalogs with the wrong snapshot during logical decoding (Masahiko Sawada)\n          If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "sinceVersion": "14.6",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "Accept interrupts in more places during logical decoding (Amit Kapila, Masahiko Sawada)\n          This ameliorates problems with slow shutdown of replication workers.",
      "sinceVersion": "14.6",
      "contributor": "Amit Kapila, Masahiko Sawada"
    },
    {
      "title": "Prevent attempts to replicate into a foreign-table partition in replication workers",
      "description": "Prevent attempts to replicate into a foreign-table partition in replication workers (Shi Yu, Tom Lane)\n          Although partitioned tables can have foreign tables as partitions, replicating into such a partition isn't currently supported. The logical replication worker process would crash if it was attempted. Now, an error is thrown.",
      "sinceVersion": "14.6",
      "contributor": "Shi Yu, Tom Lane"
    },
    {
      "title": "Remove pointless check on replica identity setting of partitioned tables",
      "description": "Remove pointless check on replica identity setting of partitioned tables (Hou Zhijie)\n          What matters is the replica identity setting of the leaf partitions, so there's no need to throw error if it's not set on the parent.",
      "sinceVersion": "14.6",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "Avoid crash after function syntax error in replication workers (Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane)\n          If a syntax error occurred in a SQL-language or PL/pgSQL-language CREATE FUNCTION or DO command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "sinceVersion": "14.6",
      "contributor": "Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "Fix handling of read-write expanded datums that are passed to SQL functions (Tom Lane)\n          If a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix type circle's equality comparator to handle NaNs properly",
      "description": "Fix type circle's equality comparator to handle NaNs properly (Ranier Vilela)\n          If the left-hand circle had a floating-point NaN for its radius, it would be considered equal to a circle with the same center and any radius.",
      "sinceVersion": "14.6",
      "contributor": "Ranier Vilela"
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Fix use-after-free hazard in string comparisons (Tom Lane)\n          Improper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add plan-time check for attempted access to a table that has no table access method",
      "description": "Add plan-time check for attempted access to a table that has no table access method (Tom Lane)\n          This prevents a crash in some catalog-corruption scenarios, for example use of a view whose `ON SELECT` rule is missing.",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "Prevent postmaster crash when shared-memory state is corrupted (Tom Lane)\n          The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add some more defenses against recursion till stack overrun",
      "description": "Add some more defenses against recursion till stack overrun (Richard Guo, Tom Lane)",
      "sinceVersion": "14.6",
      "contributor": "Richard Guo, Tom Lane"
    },
    {
      "title": "Avoid misbehavior when choosing hash table size with very small work_mem and large tuples",
      "description": "Avoid misbehavior when choosing hash table size with very small work_mem and large tuples (Zhang Mingli)",
      "sinceVersion": "14.6",
      "contributor": "Zhang Mingli"
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "Avoid long-term memory leakage in the autovacuum launcher process (Reid Thompson)\n          The lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "sinceVersion": "14.6",
      "contributor": "Reid Thompson"
    },
    {
      "title": "Improve PL/pgSQL's ability to handle parameters declared as RECORD",
      "description": "Improve PL/pgSQL's ability to handle parameters declared as RECORD (Tom Lane)\n          Build a separate function cache entry for each concrete type passed to the RECORD parameter during a session, much as we do for polymorphic parameters. This allows some usages to work that previously failed with errors such as “type of parameter does not match that when preparing the plan”.",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In libpq, handle single-row mode correctly when pipelining",
      "description": "In libpq, handle single-row mode correctly when pipelining (Denis Laxalde)\n          The single-row flag was not reset at the correct time if pipeline mode was also active.",
      "sinceVersion": "14.6",
      "contributor": "Denis Laxalde"
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "Add missing guards for `NULL` connection pointer in libpq (Daniele Varrazzo, Tom Lane)\n          There's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()()` and `PQisnonblocking()()` didn't get that memo, so fix them.",
      "sinceVersion": "14.6",
      "contributor": "Daniele Varrazzo, Tom Lane"
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration",
      "description": "In ecpg, fix omission of variable storage classes when multiple varchar or bytea variables are declared in the same declaration (Andrey Sokolov)\n          For example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only str1 was marked `static`.",
      "sinceVersion": "14.6",
      "contributor": "Andrey Sokolov"
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg_basebackup",
      "description": "Allow cross-platform tablespace relocation in pg_basebackup (Robert Haas)\n          Allow the remote path in --tablespace-mapping to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "sinceVersion": "14.6",
      "contributor": "Robert Haas"
    },
    {
      "title": "In pg_stat_statements, fix access to already-freed memory",
      "description": "In pg_stat_statements, fix access to already-freed memory (zhaoqigui)\n          This occurred if pg_stat_statements tracked a ROLLBACK command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "sinceVersion": "14.6",
      "contributor": "zhaoqigui"
    },
    {
      "title": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "In postgres_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns (Richard Guo, Etsuro Fujita)\n          This avoids “variable not found in subplan target list” errors in rare cases.",
      "sinceVersion": "14.6",
      "contributor": "Richard Guo, Etsuro Fujita"
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create",
      "description": "Reject unwanted output from the platform's `uuid_create()()` function (Nazir Bilal Yavuz)\n          The uuid-ossp module expects libc's `uuid_create()()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()()`.)",
      "sinceVersion": "14.6",
      "contributor": "Nazir Bilal Yavuz"
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Include new Perl test modules in standard installations (Álvaro Herrera)\n          Add PostgreSQL/Test/Cluster.pm and PostgreSQL/Test/Utils.pm to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "sinceVersion": "14.6",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "On NetBSD, force dynamic symbol resolution at postmaster start (Andres Freund, Tom Lane)\n          This avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "sinceVersion": "14.6",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix incompatibilities with LLVM 15",
      "description": "Fix incompatibilities with LLVM 15 (Thomas Munro, Andres Freund)",
      "sinceVersion": "14.6",
      "contributor": "Thomas Munro, Andres Freund"
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set",
      "description": "Allow use of `__sync_lock_test_and_set()()` for spinlocks on any machine (Tom Lane)\n          This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS",
      "description": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane)",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid using `sprintf",
      "description": "Avoid using `sprintf()`, to avoid compile-time deprecation warnings (Tom Lane)",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later",
      "description": "Silence assorted compiler warnings from clang 15 and later (Tom Lane)",
      "sinceVersion": "14.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis.",
      "description": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy_River, America/Thunder_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n          These zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of timestamptz display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n          It is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "sinceVersion": "14.6",
      "contributor": null
    },
    {
      "title": "libpq can leak memory contents after GSSAPI transport encryption initiation fails",
      "description": "libpq can leak memory contents after GSSAPI transport encryption initiation fails (Jacob Champion)\n          A modified server, or an unauthenticated man-in-the-middle, can send a not-zero-terminated error message during setup of GSSAPI (Kerberos) transport encryption. libpq will then copy that string, as well as following bytes in application memory up to the next zero byte, to its error report. Depending on what the calling application does with the error report, this could result in disclosure of application memory contents. There is also a small probability of a crash due to reading beyond the end of memory. Fix by properly zero-terminating the server message. (CVE-2022-41862)",
      "sinceVersion": "14.7",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Fix calculation of which `GENERATED` columns need to be updated in child tables during an UPDATE on a partitioned table or inheritance tree",
      "description": "Fix calculation of which `GENERATED` columns need to be updated in child tables during an UPDATE on a partitioned table or inheritance tree (Amit Langote, Tom Lane)\n          This fixes failure to update `GENERATED` columns that do not exist in the parent table, or that have different dependencies than are in the parent column's generation expression.",
      "sinceVersion": "14.7",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Allow a `WITH RECURSIVE ... CYCLE` CTE to access its output column",
      "description": "Allow a `WITH RECURSIVE ... CYCLE` CTE to access its output column (Tom Lane)\n          A reference to the `SET` column from within the CTE would fail with “cache lookup failed for type 0”.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of pending inserts when doing a bulk insertion to a foreign table",
      "description": "Fix handling of pending inserts when doing a bulk insertion to a foreign table (Etsuro Fujita)\n          In some cases pending insertions were not flushed to the FDW soon enough, leading to logical inconsistencies, for example `BEFORE ROW` triggers not seeing rows they should be able to see.",
      "sinceVersion": "14.7",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not",
      "description": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid (Tom Lane)\n          When pg_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list",
      "description": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list (Dean Rasheed)\n          In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "sinceVersion": "14.7",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Reject uses of undefined variables in jsonpath existence checks",
      "description": "Reject uses of undefined variables in jsonpath existence checks (Alexander Korotkov, David G. Johnston)\n          While jsonpath match operators threw an error for an undefined variable in the path pattern, the existence operators silently treated it as a match.",
      "sinceVersion": "14.7",
      "contributor": "Alexander Korotkov, David G. Johnston"
    },
    {
      "title": "Fix jsonb subscripting to cope with toasted subscript values",
      "description": "Fix jsonb subscripting to cope with toasted subscript values (Tom Lane, David G. Johnston)\n          Using a text value fetched directly from a table as a jsonb subscript was likely to fail. Fetches would usually not find any matching element. Assignments could store the value with a garbage key, although keys long enough to cause that problem are probably rare in the field.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane, David G. Johnston"
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "Fix edge-case data corruption in parallel hash joins (Dmitry Astapov)\n          If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "sinceVersion": "14.7",
      "contributor": "Dmitry Astapov"
    },
    {
      "title": "Log the correct ending timestamp in recovery_target_xid mode",
      "description": "Log the correct ending timestamp in recovery_target_xid mode (Tom Lane)\n          When ending recovery based on the recovery_target_xid setting with recovery_target_inclusive = `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve error reporting for some buffered file read failures",
      "description": "Improve error reporting for some buffered file read failures (Peter Eisentraut)\n          Correctly report a short read, giving the numbers of bytes desired and actually read, instead of reporting an irrelevant error code. Most places got this right already, but some recently-written replication logic did not.",
      "sinceVersion": "14.7",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline",
      "description": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline (Tom Lane)\n          If there's not been an explicit BEGIN TRANSACTION, ANALYZE would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "Reject cancel request packets having the wrong length (Andrey Borodin)\n          The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "sinceVersion": "14.7",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "Add recursion and looping defenses in subquery pullup (Tom Lane)\n          A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner issues when combining Memoize nodes with partitionwise joins or parameterized nestloops",
      "description": "Fix planner issues when combining Memoize nodes with partitionwise joins or parameterized nestloops (Richard Guo)\n          These errors could lead to not using Memoize in contexts where it would be useful, or possibly to wrong query plans.",
      "sinceVersion": "14.7",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition (Tom Lane)\n          This could result in “could not devise a query plan for the given query” errors.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix under-parenthesized display of `AT TIME ZONE` constructs",
      "description": "Fix under-parenthesized display of `AT TIME ZONE` constructs (Tom Lane)\n          This could result in dump/restore failures for rules or views in which an argument of `AT TIME ZONE` is itself an expression.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent clobbering of cached parsetrees for utility statements in SQL functions",
      "description": "Prevent clobbering of cached parsetrees for utility statements in SQL functions (Tom Lane, Daniel Gustafsson)\n          If a SQL-language function executes the same utility command more than once within a single calling query, it could crash or report strange errors such as “unrecognized node type”.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane, Daniel Gustafsson"
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches",
      "description": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches (Tom Lane)",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak in hashing strings with nondeterministic collations",
      "description": "Fix memory leak in hashing strings with nondeterministic collations (Jeff Davis)",
      "sinceVersion": "14.7",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Fix deadlock between DROP DATABASE and logical replication worker process",
      "description": "Fix deadlock between DROP DATABASE and logical replication worker process (Hou Zhijie)\n          This was caused by an ill-advised choice to block interrupts while creating a logical replication slot in the worker. In version 15 that could lead to an undetected deadlock. In version 14, no deadlock has been observed, but it's still a bad idea to block interrupts while waiting for network I/O.",
      "sinceVersion": "14.7",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "Clean up the libpq connection object after a failed replication connection attempt (Andres Freund)\n          The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as CREATE SUBSCRIPTION, such a failure resulted in a small session-lifespan memory leak.",
      "sinceVersion": "14.7",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ignore invalidated logical-replication slots while determining oldest catalog xmin",
      "description": "Ignore invalidated logical-replication slots while determining oldest catalog xmin (Sirisha Chamarthi)\n          A replication slot could prevent cleanup of dead tuples in the system catalogs even after it becomes invalidated due to exceeding max_slot_wal_keep_size. Thus, failure of a replication consumer could lead to indefinitely-large catalog bloat.",
      "sinceVersion": "14.7",
      "contributor": "Sirisha Chamarthi"
    },
    {
      "title": "In logical decoding, notify the remote node when a transaction is detected to have crashed",
      "description": "In logical decoding, notify the remote node when a transaction is detected to have crashed (Hou Zhijie)\n          After a server restart, we'll re-stream the changes for transactions occurring shortly before the restart. Some of these transactions probably never completed; when we realize that one didn't we throw away the relevant decoding state locally, but we neglected to tell the subscriber about it. That led to the subscriber keeping useless streaming files until it's next restarted.",
      "sinceVersion": "14.7",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "Fix uninitialized-memory usage in logical decoding (Masahiko Sawada)\n          In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "sinceVersion": "14.7",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations",
      "description": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations (Robert Haas)",
      "sinceVersion": "14.7",
      "contributor": "Robert Haas"
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Advance a heap page's LSN when setting its all-visible bit during WAL replay (Jeff Davis)\n          Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "sinceVersion": "14.7",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Prevent unsafe usage of a relation cache entry's rd_smgr pointer",
      "description": "Prevent unsafe usage of a relation cache entry's rd_smgr pointer (Amul Sul)\n          Remove various assumptions that rd_smgr would stay valid over a series of operations, by wrapping all uses of it in a function that will recompute it if needed. This prevents bugs occurring when an unexpected cache flush occurs partway through such a series.",
      "sinceVersion": "14.7",
      "contributor": "Amul Sul"
    },
    {
      "title": "Fix `int64_div_fast_to_numeric",
      "description": "Fix `int64_div_fast_to_numeric()()` to work for a wider range of inputs (Dean Rasheed)\n          This function misbehaved with some values of its second argument. No such usages exist in core PostgreSQL, but it's clearly a hazard for external modules, so repair.",
      "sinceVersion": "14.7",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "Fix latent buffer-overrun problem in `WaitEventSet` logic (Thomas Munro)\n          The `epoll()`-based and `kqueue()`-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "sinceVersion": "14.7",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds (Andres Freund)\n          clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "sinceVersion": "14.7",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix assertion failure in BRIN minmax-multi opclasses",
      "description": "Fix assertion failure in BRIN minmax-multi opclasses (Tomas Vondra)\n          The assertion was overly strict, so this mistake was harmless in non-assert builds.",
      "sinceVersion": "14.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks (Justin Pryzby)\n          In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "sinceVersion": "14.7",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "In pg_dump, avoid calling unsafe server functions before we have locks on the tables to be examined",
      "description": "In pg_dump, avoid calling unsafe server functions before we have locks on the tables to be examined (Tom Lane, Gilles Darold)\n          pg_dump uses certain server functions that can fail if examining a table that gets dropped concurrently. Avoid this type of failure by ensuring that we obtain access share lock before inquiring too deeply into a table's properties, and that we don't apply such functions to tables we don't intend to dump at all.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane, Gilles Darold"
    },
    {
      "title": "Fix psql's `\\sf` and `\\ef` commands to handle SQL-language functions that have SQL-standard function bodies",
      "description": "Fix psql's `\\sf` and `\\ef` commands to handle SQL-language functions that have SQL-standard function bodies (Tom Lane)\n          These commands misidentified the start of the function body when it used new-style syntax.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA",
      "description": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA (Dean Rasheed)",
      "sinceVersion": "14.7",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits",
      "description": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits (Tom Lane)",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix build on Microsoft Visual Studio 2013",
      "description": "Fix build on Microsoft Visual Studio 2013 (Tom Lane)\n          A previous patch supposed that all platforms of interest have `snprintf()()`, but MSVC 2013 isn't quite there yet. Revert to using `sprintf()()` on that platform.",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl",
      "description": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl (Andrew Dunstan)",
      "sinceVersion": "14.7",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc (Andrew Dunstan)\n          Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "sinceVersion": "14.7",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Suppress compiler warnings from Perl's header files (Andres Freund)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "14.7",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions",
      "description": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions (Tom Lane)",
      "sinceVersion": "14.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.\n          Notably, a new timezone America/Ciudad_Juarez has been split off from America/Ojinaga.",
      "sinceVersion": "14.7",
      "contributor": null
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view",
      "description": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane)",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash when the new schema name is omitted in CREATE SCHEMA",
      "description": "Avoid crash when the new schema name is omitted in CREATE SCHEMA (Michael Paquier)\n          The SQL standard allows writing `CREATE SCHEMA AUTHORIZATION `owner_name``, with the schema name defaulting to `owner_name`. However some code paths expected the schema name to be present and would fail.",
      "sinceVersion": "14.8",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix enabling/disabling of cloned triggers in partitioned tables",
      "description": "Fix enabling/disabling of cloned triggers in partitioned tables (Tom Lane)\n          ALTER TABLE ... ENABLE/DISABLE TRIGGER USER skipped cloned triggers, mistaking them for system triggers. Other variants of `ENABLE/DISABLE TRIGGER` would process them, but only after improperly enforcing a superuserness check.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "Disallow altering composite types that are stored in indexes (Tom Lane)\n          ALTER TYPE disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow system columns as elements of foreign keys",
      "description": "Disallow system columns as elements of foreign keys (Tom Lane)\n          Since the removal of OID as a system column, there is no plausible use-case for this, and various bits of code no longer support it. Disallow it rather than trying to fix all the cases.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possible crash when `array_position",
      "description": "Avoid possible crash when `array_position()()` or `array_positions()()` is passed an empty array (Tom Lane)",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char",
      "description": "Fix possible out-of-bounds fetch in `to_char()()` (Tom Lane)\n          With bad luck this could have resulted in a server crash.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid buffer overread in `translate",
      "description": "Avoid buffer overread in `translate()()` function (Daniil Anisimov)\n          When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "sinceVersion": "14.8",
      "contributor": "Daniil Anisimov"
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Fix error cursor setting for parse errors in JSON string literals (Tom Lane)\n          Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data corruption due to vacuum_defer_cleanup_age being larger than the current 64-bit xid",
      "description": "Fix data corruption due to vacuum_defer_cleanup_age being larger than the current 64-bit xid (Andres Freund)\n          In v14 and later with non-default settings of vacuum_defer_cleanup_age, it was possible to compute a very large vacuum cleanup horizon xid, leading to vacuum removing rows that are still live. v12 and v13 have a lesser form of the same problem affecting only GiST indexes, which could lead to index pages getting recycled too early.",
      "sinceVersion": "14.8",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "Fix parser's failure to detect some cases of improperly-nested aggregates (Tom Lane)\n          This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options (David Rowley)\n          This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "sinceVersion": "14.8",
      "contributor": "David Rowley"
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another (Tom Lane)\n          This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure with PlaceHolderVars in extended-statistics code",
      "description": "Avoid failure with PlaceHolderVars in extended-statistics code (Tom Lane)\n          Use of dependency-type extended statistics could fail with “PlaceHolderVar found where not expected”.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Fix oversights in execution of nested `ARRAY[]` constructs (Alexander Lakhin, Tom Lane)\n          Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "sinceVersion": "14.8",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Prevent crash when updating a field within an array-of-domain-over-composite-type column",
      "description": "Prevent crash when updating a field within an array-of-domain-over-composite-type column (Dmitry Dolgov)",
      "sinceVersion": "14.8",
      "contributor": "Dmitry Dolgov"
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Fix partition pruning logic for partitioning on boolean columns (David Rowley)\n          Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "sinceVersion": "14.8",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "Fix race condition in per-batch cleanup during parallel hash join (Thomas Munro, Melanie Plageman)\n          A crash was possible given unlucky timing and parallel_leader_participation = `off` (which is not the default).",
      "sinceVersion": "14.8",
      "contributor": "Thomas Munro, Melanie Plageman"
    },
    {
      "title": "Recalculate `GENERATED` columns after an EvalPlanQual check",
      "description": "Recalculate `GENERATED` columns after an EvalPlanQual check (Tom Lane)\n          In `READ COMMITTED` isolation mode, the effects of a row update might need to get reapplied to a newer version of the row than the query found originally. If so, we need to recompute any `GENERATED` columns, in case they depend on columns that were changed by the concurrent update.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak in Memoize plan execution",
      "description": "Fix memory leak in Memoize plan execution (David Rowley)",
      "sinceVersion": "14.8",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix buffer refcount leak when using batched inserts for a foreign table included in a partitioned tree",
      "description": "Fix buffer refcount leak when using batched inserts for a foreign table included in a partitioned tree (Alexander Pyhalov)",
      "sinceVersion": "14.8",
      "contributor": "Alexander Pyhalov"
    },
    {
      "title": "Restore support for sub-millisecond vacuum_cost_delay settings",
      "description": "Restore support for sub-millisecond vacuum_cost_delay settings (Thomas Munro)",
      "sinceVersion": "14.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero",
      "description": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero (Masahiko Sawada)\n          Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation vacuum_cost_delay setting, but this was done only for positive settings, not zero.",
      "sinceVersion": "14.8",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates",
      "description": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates (Andres Freund, Tom Lane)\n          Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "sinceVersion": "14.8",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule (Dean Rasheed)\n          Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "sinceVersion": "14.8",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Support references to `OLD` and `NEW` within subqueries in rule actions (Dean Rasheed, Tom Lane)\n          Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "sinceVersion": "14.8",
      "contributor": "Dean Rasheed, Tom Lane"
    },
    {
      "title": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table",
      "description": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table (Tom Lane)",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin (Shi Yu)\n          Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache_callback_list slots” error.",
      "sinceVersion": "14.8",
      "contributor": "Shi Yu"
    },
    {
      "title": "Avoid unnecessary calls to custom validators for index operator class options",
      "description": "Avoid unnecessary calls to custom validators for index operator class options (Alexander Korotkov)\n          This change fixes some cases where an unexpected error was thrown.",
      "sinceVersion": "14.8",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Avoid useless work while scanning a multi-column BRIN index with multiple scan keys",
      "description": "Avoid useless work while scanning a multi-column BRIN index with multiple scan keys (Tomas Vondra)\n          The existing code effectively considered only the last scan key while deciding whether a range matched, thus usually scanning more of the index than it needed to.",
      "sinceVersion": "14.8",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix netmask handling in BRIN inet_minmax_multi_ops opclass",
      "description": "Fix netmask handling in BRIN inet_minmax_multi_ops opclass (Tomas Vondra)\n          This error triggered an assertion failure in assert-enabled builds, but is mostly harmless in production builds.",
      "sinceVersion": "14.8",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "Fix dereference of dangling pointer during buffering build of a GiST index (Alexander Lakhin)\n          This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "sinceVersion": "14.8",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Ignore dropped columns and generated columns during logical replication of an update or delete action",
      "description": "Ignore dropped columns and generated columns during logical replication of an update or delete action (Onder Kalaci, Shi Yu)\n          Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "sinceVersion": "14.8",
      "contributor": "Onder Kalaci, Shi Yu"
    },
    {
      "title": "Correct the name of the wait event for SLRU buffer I/O for commit timestamps",
      "description": "Correct the name of the wait event for SLRU buffer I/O for commit timestamps (Alexander Lakhin)\n          This wait event is named `CommitTsBuffer` according to the documentation, but the code had it as `CommitTSBuffer`. Change the code to match the documentation, as that way is more consistent with the naming of related wait events.",
      "sinceVersion": "14.8",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Re-activate reporting of wait event `SLRUFlushSync`",
      "description": "Re-activate reporting of wait event `SLRUFlushSync` (Thomas Munro)\n          Reporting of this type of wait was accidentally removed in code refactoring.",
      "sinceVersion": "14.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid possible underflow when calculating how many WAL segments to keep",
      "description": "Avoid possible underflow when calculating how many WAL segments to keep (Kyotaro Horiguchi)\n          This could result in not honoring wal_keep_size accurately.",
      "sinceVersion": "14.8",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding (Jacob Champion, Heikki Linnakangas)\n          This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "sinceVersion": "14.8",
      "contributor": "Jacob Champion, Heikki Linnakangas"
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "Avoid race condition with process ID tracking on Windows (Thomas Munro)\n          The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "sinceVersion": "14.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add missing cases to `SPI_result_code_string",
      "description": "Add missing cases to `SPI_result_code_string()()` (Dean Rasheed)",
      "sinceVersion": "14.8",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc",
      "description": "Fix erroneous Valgrind markings in `AllocSetRealloc()()` (Karina Litskevich)\n          In the unusual case where the size of a large (&gt;8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "sinceVersion": "14.8",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message",
      "description": "Avoid assertion failure when decoding a transactional logical replication message (Tomas Vondra)",
      "sinceVersion": "14.8",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "Avoid locale sensitivity when processing regular expression escapes (Jeff Davis)\n          A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "sinceVersion": "14.8",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range",
      "description": "Avoid trying to write an empty WAL record in `log_newpage_range()()` when the last few pages in the specified range are empty (Matthias van de Meent)\n          It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "sinceVersion": "14.8",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions",
      "description": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions (Ajit Awekar, Tom Lane)",
      "sinceVersion": "14.8",
      "contributor": "Ajit Awekar, Tom Lane"
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays (Tom Lane)\n          plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays (Tom Lane)\n          plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Fix unwinding of exception stack in plpython (Xing Guo)\n          Some rare failure cases could return without cleaning up the PG_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "sinceVersion": "14.8",
      "contributor": "Xing Guo"
    },
    {
      "title": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll",
      "description": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll()()` (Michael Paquier)\n          With gssencmode set to `require`, the connection was not marked dead after a GSS initialization failure. Make it fail immediately, as the equivalent case for TLS encryption has long done.",
      "sinceVersion": "14.8",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the -C ORACLE option",
      "description": "Fix possible data corruption in ecpg programs built with the -C ORACLE option (Kyotaro Horiguchi)\n          When `ecpg_get_data()()` is called with varcharsize set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "sinceVersion": "14.8",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully (Tom Lane)\n          Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the --load-via-partition-root option; but since there is very little chance of success without that, teach pg_dump to apply it automatically to such tables.\n          Also, fix pg_restore to not try to TRUNCATE target tables before restoring into them when --load-via-partition-root mode is used. This avoids a hazard of deadlocks and lost data.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Correctly detect non-seekable files on Windows",
      "description": "Correctly detect non-seekable files on Windows (Juan José Santamaría Flecha, Michael Paquier, Daniel Watzinger)\n          This bug led to misbehavior when pg_dump writes to a pipe or pg_restore reads from one.",
      "sinceVersion": "14.8",
      "contributor": "Juan José Santamaría Flecha, Michael Paquier, Daniel Watzinger"
    },
    {
      "title": "In pgbench's “prepared” mode, prepare all the commands in a pipeline before starting the pipeline",
      "description": "In pgbench's “prepared” mode, prepare all the commands in a pipeline before starting the pipeline (Álvaro Herrera)\n          This avoids a failure when a pgbench script tries to start a serializable transaction inside a pipeline.",
      "sinceVersion": "14.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "In contrib/amcheck's heap checking code, deal correctly with tuples having zero xmin or xmax",
      "description": "In contrib/amcheck's heap checking code, deal correctly with tuples having zero xmin or xmax (Robert Haas)",
      "sinceVersion": "14.8",
      "contributor": "Robert Haas"
    },
    {
      "title": "In contrib/amcheck, deal sanely with xids that appear to be before epoch zero",
      "description": "In contrib/amcheck, deal sanely with xids that appear to be before epoch zero (Andres Freund)\n          In cases of corruption we might see a wrapped-around 32-bit xid that appears to be before the first xid epoch. Promoting such a value to 64-bit form produced a value far in the future, resulting in wrong reports. Return FirstNormalFullTransactionId in such cases so that things work reasonably sanely.",
      "sinceVersion": "14.8",
      "contributor": "Andres Freund"
    },
    {
      "title": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping (Dmitry Dolgov, Tom Lane)\n          This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "sinceVersion": "14.8",
      "contributor": "Dmitry Dolgov, Tom Lane"
    },
    {
      "title": "Require the `siglen` option of a GiST index on an ltree column, if specified, to be a multiple of 4",
      "description": "Require the `siglen` option of a GiST index on an ltree column, if specified, to be a multiple of 4 (Alexander Korotkov)\n          Other values result in misaligned accesses to index content, which is harmless on Intel-compatible hardware but can cause a crash on some other architectures.",
      "sinceVersion": "14.8",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "In contrib/pageinspect, add defenses against incorrect input for the `gist_page_items",
      "description": "In contrib/pageinspect, add defenses against incorrect input for the `gist_page_items()()` function (Dmitry Koval)",
      "sinceVersion": "14.8",
      "contributor": "Dmitry Koval"
    },
    {
      "title": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression",
      "description": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression (Tom Lane)\n          A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip",
      "description": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip (Tom Lane)\n          Previously, `make install-strip` used the -x option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "sinceVersion": "14.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it (Aleksander Alekseev, Peter Eisentraut, Tom Lane)\n          It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's --nonet option to the build recipes.",
      "sinceVersion": "14.8",
      "contributor": "Aleksander Alekseev, Peter Eisentraut, Tom Lane"
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory",
      "description": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory (Peter Eisentraut)\n          Place it under tmp_check in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "sinceVersion": "14.8",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.\n          When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "sinceVersion": "14.8",
      "contributor": null
    },
    {
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign (Noah Misch)\n          This restriction guards against SQL-injection hazards for trusted extensions.\n          The PostgreSQL Project thanks Micah Gates, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "sinceVersion": "14.9",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix confusion between empty",
      "description": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries (Tomas Vondra)\n          Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n          This fix will not in itself correct faulty BRIN entries. It's recommended to REINDEX any BRIN indexes that may be used to search for nulls.",
      "sinceVersion": "14.9",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted",
      "description": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted (Andres Freund)\n          If DROP DATABASE was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its pg_database row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another DROP DATABASE.",
      "sinceVersion": "14.9",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "Ensure that partitioned indexes are correctly marked as valid or not at creation (Michael Paquier)\n          If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "sinceVersion": "14.9",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION",
      "description": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION (Michael Paquier)\n          Such an index will now be ignored, and a new child index created instead.",
      "sinceVersion": "14.9",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached (Michael Paquier)\n          The update of the index's pg_index entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "sinceVersion": "14.9",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema",
      "description": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema (Michael Paquier, Heikki Linnakangas)\n          Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "sinceVersion": "14.9",
      "contributor": "Michael Paquier, Heikki Linnakangas"
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "Don't use partial unique indexes for uniqueness proofs in the planner (David Rowley)\n          This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "sinceVersion": "14.9",
      "contributor": "David Rowley"
    },
    {
      "title": "Don't Memoize lateral joins with volatile join conditions",
      "description": "Don't Memoize lateral joins with volatile join conditions (Richard Guo)\n          Applying Memoize to a sub-plan that contains volatile filter conditions is likely to lead to wrong answers. The check to avoid doing this missed some cases that can arise when using `LATERAL`.",
      "sinceVersion": "14.9",
      "contributor": "Richard Guo"
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses (Etsuro Fujita)\n          The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "sinceVersion": "14.9",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode (Thomas Munro)\n          Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "sinceVersion": "14.9",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix misbehavior of EvalPlanQual checks with inherited or partitioned target tables",
      "description": "Fix misbehavior of EvalPlanQual checks with inherited or partitioned target tables (Tom Lane)\n          This oversight could lead to update or delete actions in `READ COMMITTED` isolation mode getting performed when they should have been skipped because of a conflicting concurrent update.",
      "sinceVersion": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop",
      "description": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop (Tom Lane)\n          When rescanning the join after the values of such Params have changed, we must rebuild the hash table, but neglected to do so. This could result in missing join output rows.",
      "sinceVersion": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "Fix intermittent failures when trying to update a field of a composite column (Tom Lane)\n          If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "sinceVersion": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent query-lifespan memory leaks in some UPDATE queries with triggers",
      "description": "Prevent query-lifespan memory leaks in some UPDATE queries with triggers (Tomas Vondra)",
      "sinceVersion": "14.9",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Prevent query-lifespan memory leaks when an Incremental Sort plan node is rescanned",
      "description": "Prevent query-lifespan memory leaks when an Incremental Sort plan node is rescanned (James Coleman, Laurenz Albe, Tom Lane)",
      "sinceVersion": "14.9",
      "contributor": "James Coleman, Laurenz Albe, Tom Lane"
    },
    {
      "title": "Accept fractional seconds in the input to jsonpath's `datetime",
      "description": "Accept fractional seconds in the input to jsonpath's `datetime()()` method (Tom Lane)",
      "sinceVersion": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns",
      "description": "Prevent stack-overflow crashes with very complex text search patterns (Tom Lane)",
      "sinceVersion": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf",
      "description": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf (Tom Lane)\n          The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "sinceVersion": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "Fix mishandling of C++ out-of-memory conditions (Heikki Linnakangas)\n          If JIT is in use, running out of memory in a C++ `new()` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "sinceVersion": "14.9",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix rare null-pointer crash in plancache.c",
      "description": "Fix rare null-pointer crash in plancache.c (Tom Lane)",
      "sinceVersion": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space (Dongming Liu)\n          Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "sinceVersion": "14.9",
      "contributor": "Dongming Liu"
    },
    {
      "title": "Allow VACUUM to continue after detecting certain types of b-tree index corruption",
      "description": "Allow VACUUM to continue after detecting certain types of b-tree index corruption (Peter Geoghegan)\n          If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of REINDEX will fix the broken index, but preventing VACUUM from completing until that is done risks making matters far worse.",
      "sinceVersion": "14.9",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid",
      "description": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid (Andres Freund)\n          Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "sinceVersion": "14.9",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "Avoid double replay of prepared transactions during crash recovery (suyu.cmj, Michael Paquier)\n          After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "sinceVersion": "14.9",
      "contributor": "suyu.cmj, Michael Paquier"
    },
    {
      "title": "Fix possible failure while promoting a standby server, if archiving is enabled and two-phase transactions need to be recovered",
      "description": "Fix possible failure while promoting a standby server, if archiving is enabled and two-phase transactions need to be recovered (Julian Markwort)\n          If any required two-phase transactions were logged in the most recent (partial) log segment, promotion would fail with an incorrect complaint about “requested WAL segment has already been removed”.",
      "sinceVersion": "14.9",
      "contributor": "Julian Markwort"
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync",
      "description": "Ensure that a newly created, but still empty table is `fsync()`'ed at the next checkpoint (Heikki Linnakangas)\n          Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "sinceVersion": "14.9",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "Ensure that creation of the init fork of an unlogged index is WAL-logged (Heikki Linnakangas)\n          While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "sinceVersion": "14.9",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix missing reinitializations of delay-checkpoint-end flags",
      "description": "Fix missing reinitializations of delay-checkpoint-end flags (suyu.cmj)\n          This could result in unnecessary delays of checkpoints, or in assertion failures in assert-enabled builds.",
      "sinceVersion": "14.9",
      "contributor": "suyu.cmj"
    },
    {
      "title": "Fix overly strict assertion in jsonpath code",
      "description": "Fix overly strict assertion in jsonpath code (David Rowley)\n          This assertion failed if a query applied the `.type()` operator to a `like_regex` result. There was no bug in non-assert builds.",
      "sinceVersion": "14.9",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction",
      "description": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction (Tom Lane)",
      "sinceVersion": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix contrib/fuzzystrmatch's Soundex `difference",
      "description": "Fix contrib/fuzzystrmatch's Soundex `difference()()` function to handle empty input sanely (Alexander Lakhin, Tom Lane)\n          An input string containing no alphabetic characters resulted in unpredictable output.",
      "sinceVersion": "14.9",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Tighten whitespace checks in contrib/hstore input",
      "description": "Tighten whitespace checks in contrib/hstore input (Evan Jones)\n          In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "sinceVersion": "14.9",
      "contributor": "Evan Jones"
    },
    {
      "title": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass",
      "description": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass (Ankit Kumar Pandey, Alexander Lakhin)\n          Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "sinceVersion": "14.9",
      "contributor": "Ankit Kumar Pandey, Alexander Lakhin"
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in contrib/intarray",
      "description": "Avoid useless double decompression of GiST index entries in contrib/intarray (Konstantin Knizhnik, Matthias van de Meent, Tom Lane)",
      "sinceVersion": "14.9",
      "contributor": "Konstantin Knizhnik, Matthias van de Meent, Tom Lane"
    },
    {
      "title": "Fix contrib/pageinspect's `gist_page_items",
      "description": "Fix contrib/pageinspect's `gist_page_items()()` function to work when there are included index columns (Alexander Lakhin, Michael Paquier)\n          Previously, if the index has included columns, `gist_page_items()()` would fail to display those values on index leaf pages, or crash outright on non-leaf pages.",
      "sinceVersion": "14.9",
      "contributor": "Alexander Lakhin, Michael Paquier"
    },
    {
      "title": "Fix pg_dump to correctly handle new-style SQL-language functions whose bodies require parse-time dependencies on unique indexes",
      "description": "Fix pg_dump to correctly handle new-style SQL-language functions whose bodies require parse-time dependencies on unique indexes (Tom Lane)\n          Such cases can arise from `GROUP BY` and `ON CONFLICT` clauses, for example. The function must then be postponed until after the unique index in the dump output, but pg_dump did not do that and instead printed a warning about “could not resolve dependency loop”.",
      "sinceVersion": "14.9",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries",
      "description": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries (Shruthi Gowda)\n          This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "sinceVersion": "14.9",
      "contributor": "Shruthi Gowda"
    },
    {
      "title": "Allow publication of all tables in a schema",
      "description": "Allow publication of all tables in a schema (Vignesh C, Hou Zhijie, Amit Kapila)\n              For example, this syntax is now supported: `CREATE PUBLICATION pub1 FOR TABLES IN SCHEMA s1,s2`. ALTER PUBLICATION supports a similar syntax. Tables added later to the listed schemas will also be replicated.",
      "sinceVersion": "15.0",
      "contributor": "Vignesh C, Hou Zhijie, Amit Kapila"
    },
    {
      "title": "Add support for prepared",
      "description": "Add support for prepared (two-phase) transactions to logical replication (Peter Smith, Ajin Cherian, Amit Kapila, Nikhil Sontakke, Stas Kelvich)\n              The new `CREATE_REPLICATION_SLOT` option is called `TWO_PHASE`. pg_recvlogical now supports a new --two-phase option during slot creation.",
      "sinceVersion": "15.0",
      "contributor": "Peter Smith, Ajin Cherian, Amit Kapila, Nikhil Sontakke, Stas Kelvich"
    },
    {
      "title": "Add regular expression functions for compatibility with other relational systems",
      "description": "Add regular expression functions for compatibility with other relational systems (Gilles Darold, Tom Lane)\n            The new functions are `regexp_count()()`, `regexp_instr()()`, `regexp_like()()`, and `regexp_substr()()`. Some new optional arguments were also added to `regexp_replace()()`.",
      "sinceVersion": "15.0",
      "contributor": "Gilles Darold, Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Support for the SQL MERGE command.",
      "sinceVersion": "15.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Selective publication of tables' contents within logical replication publications, through the ability to specify column lists and row filter conditions.",
      "sinceVersion": "15.0",
      "contributor": null
    },
    {
      "title": "More options for compression, including support for Zstandard",
      "description": "More options for compression, including support for Zstandard (zstd) compression. This includes support for performing compression on the server side during pg_basebackup.",
      "sinceVersion": "15.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Support for structured server log output using the JSON format.",
      "sinceVersion": "15.0",
      "contributor": null
    },
    {
      "title": "Change the owner of the `public` schema to be the new `pg_database_owner` role",
      "description": "Change the owner of the `public` schema to be the new `pg_database_owner` role (Noah Misch)\n          This allows each database's owner to have ownership privileges on the `public` schema within their database. Previously it was owned by the bootstrap superuser, so that non-superuser database owners could not do anything with it.\n          This change applies to new database clusters and to newly-created databases in existing clusters. Upgrading a cluster or restoring a database dump will preserve `public`'s existing ownership specification.",
      "sinceVersion": "15.0",
      "contributor": "Noah Misch"
    },
    {
      "title": "Remove long-deprecated exclusive backup mode",
      "description": "Remove long-deprecated exclusive backup mode (David Steele, Nathan Bossart)\n          If the database server stops abruptly while in this mode, the server could fail to start. The non-exclusive backup mode is considered superior for all purposes. Functions `pg_start_backup()()`/`pg_stop_backup()()` have been renamed to `pg_backup_start()()`/`pg_backup_stop()()`, and the functions `pg_backup_start_time()()` and `pg_is_in_backup()()` have been removed.",
      "sinceVersion": "15.0",
      "contributor": "David Steele, Nathan Bossart"
    },
    {
      "title": "Increase hash_mem_multiplier default to 2.0",
      "description": "Increase hash_mem_multiplier default to 2.0 (Peter Geoghegan)\n          This allows query hash operations to use more work_mem memory than other operations.",
      "sinceVersion": "15.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Remove server-side language `plpython2u` and generic Python language `plpythonu`",
      "description": "Remove server-side language `plpython2u` and generic Python language `plpythonu` (Andres Freund)\n          Python 2.x is no longer supported. While the original intent of `plpythonu` was that it could eventually refer to `plpython3u`, changing it now seems more likely to cause problems than solve them, so it's just been removed.",
      "sinceVersion": "15.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Generate an error if `array_to_tsvector",
      "description": "Generate an error if `array_to_tsvector()()` is passed an empty-string array element (Jean-Christophe Arnu)\n          This is prohibited because lexemes should never be empty. Users of previous Postgres releases should verify that no empty lexemes are stored because they can lead to dump/restore failures and inconsistent results.",
      "sinceVersion": "15.0",
      "contributor": "Jean-Christophe Arnu"
    },
    {
      "title": "Generate an error when `chr",
      "description": "Generate an error when `chr()()` is supplied with a negative argument (Peter Eisentraut)",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Prevent CREATE OR REPLACE VIEW from changing the collation of an output column",
      "description": "Prevent CREATE OR REPLACE VIEW from changing the collation of an output column (Tom Lane)",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow zero-length Unicode identifiers, e.g., `U&amp;\"\"`",
      "description": "Disallow zero-length Unicode identifiers, e.g., `U&amp;\"\"` (Peter Eisentraut)\n          Non-Unicode zero-length identifiers were already disallowed.",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Prevent numeric literals from having non-numeric trailing characters",
      "description": "Prevent numeric literals from having non-numeric trailing characters (Peter Eisentraut)\n          Previously, query text like `123abc` would be interpreted as `123` followed by a separate token `abc`.",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Adjust JSON numeric literal processing to match the SQL/JSON-standard",
      "description": "Adjust JSON numeric literal processing to match the SQL/JSON-standard (Peter Eisentraut)\n          This accepts numeric formats like `.1` and `1.`, and disallows trailing junk after numeric literals, like `1.type()`.",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "When interval input provides a fractional value for a unit greater than months, round to the nearest month",
      "description": "When interval input provides a fractional value for a unit greater than months, round to the nearest month (Bruce Momjian)\n          For example, convert `1.99 years` to `2 years`, not `1 year 11 months` as before.",
      "sinceVersion": "15.0",
      "contributor": "Bruce Momjian"
    },
    {
      "title": "Improve consistency of interval parsing with trailing periods",
      "description": "Improve consistency of interval parsing with trailing periods (Tom Lane)\n          Numbers with trailing periods were rejected on some platforms.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Mark the interval output function as stable, not immutable, since it depends on IntervalStyle",
      "description": "Mark the interval output function as stable, not immutable, since it depends on IntervalStyle (Tom Lane)\n          This will, for example, cause creation of indexes relying on the text output of interval values to fail.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect integer overflow in interval justification functions",
      "description": "Detect integer overflow in interval justification functions (Joe Koshakow)\n          The affected functions are `justify_interval()()`, `justify_hours()()`, and `justify_days()()`.",
      "sinceVersion": "15.0",
      "contributor": "Joe Koshakow"
    },
    {
      "title": "Change the I/O format of type \"char\" for non-ASCII characters",
      "description": "Change the I/O format of type \"char\" for non-ASCII characters (Tom Lane)\n          Bytes with the high bit set are now output as a backslash and three octal digits, to avoid encoding issues.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove the default `ADMIN OPTION` privilege a login role has on its own role membership",
      "description": "Remove the default `ADMIN OPTION` privilege a login role has on its own role membership (Robert Haas)\n          Previously, a login role could add/remove members of its own role, even without `ADMIN OPTION` privilege.",
      "sinceVersion": "15.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Prevent UPDATE and DELETE logical replication operations on tables where the subscription owner does not have SELECT permission on the table",
      "description": "Prevent UPDATE and DELETE logical replication operations on tables where the subscription owner does not have SELECT permission on the table (Jeff Davis)\n          UPDATE and DELETE commands typically involve reading the table as well, so require the subscription owner to have table SELECT permission.",
      "sinceVersion": "15.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "When EXPLAIN references the session's temporary object schema, refer to it as `pg_temp`",
      "description": "When EXPLAIN references the session's temporary object schema, refer to it as `pg_temp` (Amul Sul)\n          Previously the actual schema name was reported, leading to inconsistencies across sessions.",
      "sinceVersion": "15.0",
      "contributor": "Amul Sul"
    },
    {
      "title": "Fix pg_statio_all_tables to sum values for the rare case of TOAST tables with multiple indexes",
      "description": "Fix pg_statio_all_tables to sum values for the rare case of TOAST tables with multiple indexes (Andrei Zubkov)\n          Previously such cases would show one row for each index.",
      "sinceVersion": "15.0",
      "contributor": "Andrei Zubkov"
    },
    {
      "title": "Disallow setting custom options that match the name of an installed extension, but are not one of the extension's declared variables",
      "description": "Disallow setting custom options that match the name of an installed extension, but are not one of the extension's declared variables (Florin Irion, Tom Lane)\n          This change causes any such pre-existing variables to be deleted during extension load, and then prevents new ones from being created later in the session. The intent is to prevent confusion about whether a variable is associated with an extension or not.",
      "sinceVersion": "15.0",
      "contributor": "Florin Irion, Tom Lane"
    },
    {
      "title": "Remove obsolete server variable stats_temp_directory",
      "description": "Remove obsolete server variable stats_temp_directory (Andres Freund, Kyotaro Horiguchi)",
      "sinceVersion": "15.0",
      "contributor": "Andres Freund, Kyotaro Horiguchi"
    },
    {
      "title": "Improve the algorithm used to compute `random",
      "description": "Improve the algorithm used to compute `random()()` (Fabien Coelho)\n          This will cause `random()()`'s results to differ from what was emitted by prior versions, even for the same seed value.",
      "sinceVersion": "15.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "libpq's `PQsendQuery",
      "description": "libpq's `PQsendQuery()()` function is no longer supported in pipeline mode (Álvaro Herrera)\n          Applications that are using that combination will need to be modified to use `PQsendQueryParams()()` instead.",
      "sinceVersion": "15.0",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "On non-Windows platforms, consult the HOME environment variable to find the user's home directory",
      "description": "On non-Windows platforms, consult the HOME environment variable to find the user's home directory (Anders Kaseorg)\n          If HOME is empty or unset, fall back to the previous method of checking the `&lt;pwd.h&gt;` database. This change affects libpq (for example, while looking up ~/.pgpass) as well as various client application programs.",
      "sinceVersion": "15.0",
      "contributor": "Anders Kaseorg"
    },
    {
      "title": "Remove pg_dump's --no-synchronized-snapshots option",
      "description": "Remove pg_dump's --no-synchronized-snapshots option (Tom Lane)\n          All still-supported server versions support synchronized snapshots, so there's no longer a need for this option.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "After an error is detected in psql's --single-transaction mode, change the final COMMIT command to ROLLBACK only if ON_ERROR_STOP is set",
      "description": "After an error is detected in psql's --single-transaction mode, change the final COMMIT command to ROLLBACK only if ON_ERROR_STOP is set (Michael Paquier)",
      "sinceVersion": "15.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Avoid unnecessary casting of constants in queries sent by postgres_fdw",
      "description": "Avoid unnecessary casting of constants in queries sent by postgres_fdw (Dian Fay)\n          When column types are intentionally different between local and remote databases, such casts could cause errors.",
      "sinceVersion": "15.0",
      "contributor": "Dian Fay"
    },
    {
      "title": "Remove xml2's `xml_is_well_formed",
      "description": "Remove xml2's `xml_is_well_formed()()` function (Tom Lane)\n          This function has been implemented in the core backend since Postgres 9.1.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow custom scan providers to indicate if they support projections",
      "description": "Allow custom scan providers to indicate if they support projections (Sven Klemm)\n          The default is now that custom scan providers are assumed to not support projections; those that do will need to be updated for this release.",
      "sinceVersion": "15.0",
      "contributor": "Sven Klemm"
    },
    {
      "title": "Record and check the collation version of each database",
      "description": "Record and check the collation version of each database (Peter Eisentraut)\n            This feature is designed to detect collation version changes to avoid index corruption. Function `pg_database_collation_actual_version()()` reports the underlying operating system collation version, and ALTER DATABASE ... REFRESH sets the recorded database collation version to match the operating system collation version.",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow ICU collations to be set as the default for clusters and databases",
      "description": "Allow ICU collations to be set as the default for clusters and databases (Peter Eisentraut)\n            Previously, only libc-based collations could be selected at the cluster and database levels. ICU collations could only be used via explicit `COLLATE` clauses.",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add system view pg_ident_file_mappings to report pg_ident.conf information",
      "description": "Add system view pg_ident_file_mappings to report pg_ident.conf information (Julien Rouhaud)",
      "sinceVersion": "15.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Improve planning time for queries referencing partitioned tables",
      "description": "Improve planning time for queries referencing partitioned tables (David Rowley)\n              This change helps when only a few of many partitions are relevant.",
      "sinceVersion": "15.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Allow ordered scans of partitions to avoid sorting in more cases",
      "description": "Allow ordered scans of partitions to avoid sorting in more cases (David Rowley)\n              Previously, a partitioned table with a `DEFAULT` partition or a `LIST` partition containing multiple values could not be used for ordered partition scans. Now they can be used if such partitions are pruned during planning.",
      "sinceVersion": "15.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Improve foreign key behavior of updates on partitioned tables that move rows between partitions",
      "description": "Improve foreign key behavior of updates on partitioned tables that move rows between partitions (Amit Langote)\n              Previously, such updates ran a delete action on the source partition and an insert action on the target partition. PostgreSQL will now run an update action on the partition root, providing cleaner semantics.",
      "sinceVersion": "15.0",
      "contributor": "Amit Langote"
    },
    {
      "title": "Allow CLUSTER on partitioned tables",
      "description": "Allow CLUSTER on partitioned tables (Justin Pryzby)",
      "sinceVersion": "15.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix ALTER TRIGGER RENAME on partitioned tables to properly rename triggers on all partitions",
      "description": "Fix ALTER TRIGGER RENAME on partitioned tables to properly rename triggers on all partitions (Arne Roland, Álvaro Herrera)\n              Also prohibit cloned triggers from being renamed.",
      "sinceVersion": "15.0",
      "contributor": "Arne Roland, Álvaro Herrera"
    },
    {
      "title": "Allow btree indexes on system and TOAST tables to efficiently store duplicates",
      "description": "Allow btree indexes on system and TOAST tables to efficiently store duplicates (Peter Geoghegan)\n              Previously de-duplication was disabled for these types of indexes.",
      "sinceVersion": "15.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Allow unique constraints and indexes to treat `NULL` values as not distinct",
      "description": "Allow unique constraints and indexes to treat `NULL` values as not distinct (Peter Eisentraut)\n              Previously `NULL` entries were always treated as distinct values, but this can now be changed by creating constraints and indexes using `UNIQUE NULLS NOT DISTINCT`.",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow the `^@` starts-with operator and the `starts_with",
      "description": "Allow the `^@` starts-with operator and the `starts_with()()` function to use btree indexes if using the C collation (Tom Lane)\n              Previously these could only use SP-GiST indexes.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow extended statistics to record statistics for a parent with all its children",
      "description": "Allow extended statistics to record statistics for a parent with all its children (Tomas Vondra, Justin Pryzby)\n              Regular statistics already tracked parent and parent-plus-all-children statistics separately.",
      "sinceVersion": "15.0",
      "contributor": "Tomas Vondra, Justin Pryzby"
    },
    {
      "title": "Add server variable recursive_worktable_factor to allow the user to specify the expected size of the working table of a recursive query",
      "description": "Add server variable recursive_worktable_factor to allow the user to specify the expected size of the working table of a recursive query (Simon Riggs)",
      "sinceVersion": "15.0",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Allow hash lookup for `NOT IN` clauses with many constants",
      "description": "Allow hash lookup for `NOT IN` clauses with many constants (David Rowley, James Coleman)\n              Previously the code always sequentially scanned the list of values.",
      "sinceVersion": "15.0",
      "contributor": "David Rowley, James Coleman"
    },
    {
      "title": "Allow SELECT DISTINCT to be parallelized",
      "description": "Allow SELECT DISTINCT to be parallelized (David Rowley)",
      "sinceVersion": "15.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Allow WAL full page writes to use LZ4 and Zstandard compression",
      "description": "Allow WAL full page writes to use LZ4 and Zstandard compression (Andrey Borodin, Justin Pryzby)\n              This is controlled by the wal_compression server setting.",
      "sinceVersion": "15.0",
      "contributor": "Andrey Borodin, Justin Pryzby"
    },
    {
      "title": "Add support for writing WAL using direct I/O on macOS",
      "description": "Add support for writing WAL using direct I/O on macOS (Thomas Munro)\n              This only works if `max_wal_senders = 0` and `wal_level = minimal`.",
      "sinceVersion": "15.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow vacuum to be more aggressive in setting the oldest frozen and multi transaction id",
      "description": "Allow vacuum to be more aggressive in setting the oldest frozen and multi transaction id (Peter Geoghegan)",
      "sinceVersion": "15.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Allow a query referencing multiple foreign tables to perform parallel foreign table scans in more cases",
      "description": "Allow a query referencing multiple foreign tables to perform parallel foreign table scans in more cases (Andrey Lepikhov, Etsuro Fujita)",
      "sinceVersion": "15.0",
      "contributor": "Andrey Lepikhov, Etsuro Fujita"
    },
    {
      "title": "Enable default logging of checkpoints and slow autovacuum operations",
      "description": "Enable default logging of checkpoints and slow autovacuum operations (Bharath Rupireddy)\n              This changes the default of log_checkpoints to `on` and that of log_autovacuum_min_duration to 10 minutes. This will cause even an idle server to generate some log output, which might cause problems on resource-constrained servers without log file rotation. These defaults should be changed in such cases.",
      "sinceVersion": "15.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Generate progress messages in the server log during slow server starts",
      "description": "Generate progress messages in the server log during slow server starts (Nitin Jadhav, Robert Haas)\n              The messages report the cause of the delay. The time interval for notification is controlled by the new server variable log_startup_progress_interval.",
      "sinceVersion": "15.0",
      "contributor": "Nitin Jadhav, Robert Haas"
    },
    {
      "title": "Store cumulative statistics system data in shared memory",
      "description": "Store cumulative statistics system data in shared memory (Kyotaro Horiguchi, Andres Freund, Melanie Plageman)\n              Previously this data was sent to a statistics collector process via UDP packets, and could only be read by sessions after transferring it via the file system. There is no longer a separate statistics collector process.",
      "sinceVersion": "15.0",
      "contributor": "Kyotaro Horiguchi, Andres Freund, Melanie Plageman"
    },
    {
      "title": "Add additional information to VACUUM VERBOSE and autovacuum logging messages",
      "description": "Add additional information to VACUUM VERBOSE and autovacuum logging messages (Peter Geoghegan)",
      "sinceVersion": "15.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Add EXPLAIN",
      "description": "Add EXPLAIN (BUFFERS) output for temporary file block I/O (Masahiko Sawada)",
      "sinceVersion": "15.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Allow log output in JSON format",
      "description": "Allow log output in JSON format (Sehrope Sarkuni, Michael Paquier)\n              The new setting is `log_destination = jsonlog`.",
      "sinceVersion": "15.0",
      "contributor": "Sehrope Sarkuni, Michael Paquier"
    },
    {
      "title": "Allow `pg_stat_reset_single_table_counters",
      "description": "Allow `pg_stat_reset_single_table_counters()()` to reset the counters of relations shared across all databases (Sadhuprasad Patro)",
      "sinceVersion": "15.0",
      "contributor": "Sadhuprasad Patro"
    },
    {
      "title": "Add wait events for local shell commands",
      "description": "Add wait events for local shell commands (Fujii Masao)\n              The new wait events are used when calling archive_command, archive_cleanup_command, restore_command and recovery_end_command.",
      "sinceVersion": "15.0",
      "contributor": "Fujii Masao"
    },
    {
      "title": "Allow table accesses done by a view to optionally be controlled by privileges of the view's caller",
      "description": "Allow table accesses done by a view to optionally be controlled by privileges of the view's caller (Christoph Heiss)\n              Previously, view accesses were always treated as being done by the view's owner. That's still the default.",
      "sinceVersion": "15.0",
      "contributor": "Christoph Heiss"
    },
    {
      "title": "Allow members of the `pg_write_server_files` predefined role to perform server-side base backups",
      "description": "Allow members of the `pg_write_server_files` predefined role to perform server-side base backups (Dagfinn Ilmari Mannsåker)\n              Previously only superusers could perform such backups.",
      "sinceVersion": "15.0",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Allow GRANT to grant permissions to change individual server variables via SET and ALTER SYSTEM",
      "description": "Allow GRANT to grant permissions to change individual server variables via SET and ALTER SYSTEM (Mark Dilger)\n              The new function `has_parameter_privilege()()` reports on this privilege.",
      "sinceVersion": "15.0",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Add predefined role `pg_checkpoint` that allows members to run CHECKPOINT",
      "description": "Add predefined role `pg_checkpoint` that allows members to run CHECKPOINT (Jeff Davis)\n              Previously checkpoints could only be run by superusers.",
      "sinceVersion": "15.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Allow members of the `pg_read_all_stats` predefined role to access the views pg_backend_memory_contexts and pg_shmem_allocations",
      "description": "Allow members of the `pg_read_all_stats` predefined role to access the views pg_backend_memory_contexts and pg_shmem_allocations (Bharath Rupireddy)\n              Previously these views could only be accessed by superusers.",
      "sinceVersion": "15.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Allow GRANT to grant permissions on `pg_log_backend_memory_contexts",
      "description": "Allow GRANT to grant permissions on `pg_log_backend_memory_contexts()()` (Jeff Davis)\n              Previously this function could only be run by superusers.",
      "sinceVersion": "15.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Add server variable shared_memory_size to report the size of allocated shared memory",
      "description": "Add server variable shared_memory_size to report the size of allocated shared memory (Nathan Bossart)",
      "sinceVersion": "15.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add server variable shared_memory_size_in_huge_pages to report the number of huge memory pages required",
      "description": "Add server variable shared_memory_size_in_huge_pages to report the number of huge memory pages required (Nathan Bossart)\n              This is only supported on Linux.",
      "sinceVersion": "15.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Honor server variable shared_preload_libraries in single-user mode",
      "description": "Honor server variable shared_preload_libraries in single-user mode (Jeff Davis)\n              This change supports use of shared_preload_libraries to load custom access methods and WAL resource managers, which would be essential for database access even in single-user mode.",
      "sinceVersion": "15.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "On Solaris, make the default setting of dynamic_shared_memory_type be `sysv`",
      "description": "On Solaris, make the default setting of dynamic_shared_memory_type be `sysv` (Thomas Munro)\n              The previous default choice, `posix`, can result in spurious failures on this platform.",
      "sinceVersion": "15.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow postgres -C to properly report runtime-computed values",
      "description": "Allow postgres -C to properly report runtime-computed values (Nathan Bossart)\n              Previously runtime-computed values data_checksums, wal_segment_size, and data_directory_mode would report values that would not be accurate on the running server. However, this does not work on a running server.",
      "sinceVersion": "15.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add support for LZ4 and Zstandard compression of server-side base backups",
      "description": "Add support for LZ4 and Zstandard compression of server-side base backups (Jeevan Ladhe, Robert Haas)",
      "sinceVersion": "15.0",
      "contributor": "Jeevan Ladhe, Robert Haas"
    },
    {
      "title": "Allow WAL processing to pre-fetch needed file contents",
      "description": "Allow WAL processing to pre-fetch needed file contents (Thomas Munro)\n            This is controlled by the server variable recovery_prefetch.",
      "sinceVersion": "15.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow archiving via loadable modules",
      "description": "Allow archiving via loadable modules (Nathan Bossart)\n            Previously, archiving was only done by calling shell commands. The new server variable archive_library can be set to specify a library to be called for archiving.",
      "sinceVersion": "15.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "No longer require `IDENTIFY_SYSTEM` to be run before `START_REPLICATION`",
      "description": "No longer require `IDENTIFY_SYSTEM` to be run before `START_REPLICATION` (Jeff Davis)",
      "sinceVersion": "15.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Allow publication content to be filtered using a `WHERE` clause",
      "description": "Allow publication content to be filtered using a `WHERE` clause (Hou Zhijie, Euler Taveira, Peter Smith, Ajin Cherian, Tomas Vondra, Amit Kapila)\n              Rows not satisfying the `WHERE` clause are not published.",
      "sinceVersion": "15.0",
      "contributor": "Hou Zhijie, Euler Taveira, Peter Smith, Ajin Cherian, Tomas Vondra, Amit Kapila"
    },
    {
      "title": "Allow publication content to be restricted to specific columns",
      "description": "Allow publication content to be restricted to specific columns (Tomas Vondra, Álvaro Herrera, Rahila Syed)",
      "sinceVersion": "15.0",
      "contributor": "Tomas Vondra, Álvaro Herrera, Rahila Syed"
    },
    {
      "title": "Allow skipping of transactions on a subscriber using ALTER SUBSCRIPTION ... SKIP",
      "description": "Allow skipping of transactions on a subscriber using ALTER SUBSCRIPTION ... SKIP (Masahiko Sawada)",
      "sinceVersion": "15.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Prevent logical replication of empty transactions",
      "description": "Prevent logical replication of empty transactions (Ajin Cherian, Hou Zhijie, Euler Taveira)\n              Previously, publishers would send empty transactions to subscribers if subscribed tables were not modified.",
      "sinceVersion": "15.0",
      "contributor": "Ajin Cherian, Hou Zhijie, Euler Taveira"
    },
    {
      "title": "Add SQL functions to monitor the directory contents of logical replication slots",
      "description": "Add SQL functions to monitor the directory contents of logical replication slots (Bharath Rupireddy)\n              The new functions are `pg_ls_logicalsnapdir()()`, `pg_ls_logicalmapdir()()`, and `pg_ls_replslotdir()()`. They can be run by members of the predefined `pg_monitor` role.",
      "sinceVersion": "15.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Allow subscribers to stop the application of logical replication changes on error",
      "description": "Allow subscribers to stop the application of logical replication changes on error (Osumi Takamichi, Mark Dilger)\n              This is enabled with the subscriber option `disable_on_error` and avoids possible infinite error loops during stream application.",
      "sinceVersion": "15.0",
      "contributor": "Osumi Takamichi, Mark Dilger"
    },
    {
      "title": "Adjust subscriber server variables to match the publisher so datetime and float8 values are interpreted consistently",
      "description": "Adjust subscriber server variables to match the publisher so datetime and float8 values are interpreted consistently (Japin Li)\n              Some publishers might be relying on inconsistent behavior.",
      "sinceVersion": "15.0",
      "contributor": "Japin Li"
    },
    {
      "title": "Add system view pg_stat_subscription_stats to report on subscriber activity",
      "description": "Add system view pg_stat_subscription_stats to report on subscriber activity (Masahiko Sawada)\n              The new function `pg_stat_reset_subscription_stats()()` allows resetting these statistics counters.",
      "sinceVersion": "15.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Suppress duplicate entries in the pg_publication_tables system view",
      "description": "Suppress duplicate entries in the pg_publication_tables system view (Hou Zhijie)\n              In some cases a partition could appear more than once.",
      "sinceVersion": "15.0",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Add SQL MERGE command to adjust one table to match another",
      "description": "Add SQL MERGE command to adjust one table to match another (Simon Riggs, Pavan Deolasee, Álvaro Herrera, Amit Langote)\n            This is similar to INSERT ... ON CONFLICT but more batch-oriented.",
      "sinceVersion": "15.0",
      "contributor": "Simon Riggs, Pavan Deolasee, Álvaro Herrera, Amit Langote"
    },
    {
      "title": "Add support for `HEADER` option in COPY text format",
      "description": "Add support for `HEADER` option in COPY text format (Rémi Lapeyre)\n            The new option causes the column names to be output, and optionally verified on input.",
      "sinceVersion": "15.0",
      "contributor": "Rémi Lapeyre"
    },
    {
      "title": "Add new WAL-logged method for database creation",
      "description": "Add new WAL-logged method for database creation (Dilip Kumar)\n            This is the new default method for copying the template database, as it avoids the need for checkpoints during database creation. However, it might be slow if the template database is large, so the old method is still available.",
      "sinceVersion": "15.0",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Allow CREATE DATABASE to set the database OID",
      "description": "Allow CREATE DATABASE to set the database OID (Shruthi Gowda, Antonin Houska)",
      "sinceVersion": "15.0",
      "contributor": "Shruthi Gowda, Antonin Houska"
    },
    {
      "title": "Prevent DROP DATABASE, DROP TABLESPACE, and ALTER DATABASE SET TABLESPACE from occasionally failing during concurrent use on Windows",
      "description": "Prevent DROP DATABASE, DROP TABLESPACE, and ALTER DATABASE SET TABLESPACE from occasionally failing during concurrent use on Windows (Thomas Munro)",
      "sinceVersion": "15.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow foreign key `ON DELETE SET` actions to affect only specified columns",
      "description": "Allow foreign key `ON DELETE SET` actions to affect only specified columns (Paul Martinez)\n            Previously, all of the columns in the foreign key were always affected.",
      "sinceVersion": "15.0",
      "contributor": "Paul Martinez"
    },
    {
      "title": "Allow ALTER TABLE to modify a table's `ACCESS METHOD`",
      "description": "Allow ALTER TABLE to modify a table's `ACCESS METHOD` (Justin Pryzby, Jeff Davis)",
      "sinceVersion": "15.0",
      "contributor": "Justin Pryzby, Jeff Davis"
    },
    {
      "title": "Properly call object access hooks when ALTER TABLE causes table rewrites",
      "description": "Properly call object access hooks when ALTER TABLE causes table rewrites (Michael Paquier)",
      "sinceVersion": "15.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Allow creation of unlogged sequences",
      "description": "Allow creation of unlogged sequences (Peter Eisentraut)",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Track dependencies on individual columns in the results of functions returning composite types",
      "description": "Track dependencies on individual columns in the results of functions returning composite types (Tom Lane)\n            Previously, if a view or rule contained a reference to a specific column within the result of a composite-returning function, that was not noted as a dependency; the view or rule was only considered to depend on the composite type as a whole. This meant that dropping the individual column would be allowed, causing problems in later use of the view or rule. The column-level dependency is now also noted, so that dropping such a column will be rejected unless the view is changed or dropped.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow the scale of a numeric value to be negative, or greater than its precision",
      "description": "Allow the scale of a numeric value to be negative, or greater than its precision (Dean Rasheed, Tom Lane)\n            This allows rounding of values to the left of the decimal point, e.g., `'1234'::numeric(4, -2)` returns 1200.",
      "sinceVersion": "15.0",
      "contributor": "Dean Rasheed, Tom Lane"
    },
    {
      "title": "Improve overflow detection when casting values to interval",
      "description": "Improve overflow detection when casting values to interval (Joe Koshakow)",
      "sinceVersion": "15.0",
      "contributor": "Joe Koshakow"
    },
    {
      "title": "Change the I/O format of type \"char\" for non-ASCII characters",
      "description": "Change the I/O format of type \"char\" for non-ASCII characters (Tom Lane)",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update the display width information of modern Unicode characters, like emojis",
      "description": "Update the display width information of modern Unicode characters, like emojis (Jacob Champion)\n            Also update from Unicode 5.0 to 14.0.0. There is now an automated way to keep Postgres updated with Unicode releases.",
      "sinceVersion": "15.0",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Add multirange input to `range_agg",
      "description": "Add multirange input to `range_agg()()` (Paul Jungwirth)",
      "sinceVersion": "15.0",
      "contributor": "Paul Jungwirth"
    },
    {
      "title": "Add `MIN",
      "description": "Add `MIN()()` and `MAX()()` aggregates for the xid8 data type (Ken Kato)",
      "sinceVersion": "15.0",
      "contributor": "Ken Kato"
    },
    {
      "title": "Add the ability to compute the distance between polygons",
      "description": "Add the ability to compute the distance between polygons (Tom Lane)",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add `to_char",
      "description": "Add `to_char()()` format codes `of`, `tzh`, and `tzm` (Nitin Jadhav)\n            The upper-case equivalents of these were already supported.",
      "sinceVersion": "15.0",
      "contributor": "Nitin Jadhav"
    },
    {
      "title": "When applying `AT TIME ZONE` to a time with time zone value, use the transaction start time rather than wall clock time to determine whether DST applies",
      "description": "When applying `AT TIME ZONE` to a time with time zone value, use the transaction start time rather than wall clock time to determine whether DST applies (Aleksander Alekseev, Tom Lane)\n            This allows the conversion to be considered stable rather than volatile, and it saves a kernel call per invocation.",
      "sinceVersion": "15.0",
      "contributor": "Aleksander Alekseev, Tom Lane"
    },
    {
      "title": "Ignore NULL array elements in `ts_delete",
      "description": "Ignore NULL array elements in `ts_delete()()` and `setweight()()` functions with array arguments (Jean-Christophe Arnu)\n            These functions effectively ignore empty-string array elements (since those could never match a valid lexeme). It seems consistent to let them ignore NULL elements too, instead of failing.",
      "sinceVersion": "15.0",
      "contributor": "Jean-Christophe Arnu"
    },
    {
      "title": "Add support for petabyte units to `pg_size_pretty",
      "description": "Add support for petabyte units to `pg_size_pretty()()` and `pg_size_bytes()()` (David Christensen)",
      "sinceVersion": "15.0",
      "contributor": "David Christensen"
    },
    {
      "title": "Change `pg_event_trigger_ddl_commands",
      "description": "Change `pg_event_trigger_ddl_commands()()` to output references to other sessions' temporary schemas using the actual schema name (Tom Lane)\n            Previously this function reported all temporary schemas as `pg_temp`, but it's misleading to use that for any but the current session's temporary schema.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix enforcement of PL/pgSQL variable `CONSTANT` markings",
      "description": "Fix enforcement of PL/pgSQL variable `CONSTANT` markings (Tom Lane)\n            Previously, a variable could be used as a CALL output parameter or refcursor OPEN variable despite being marked `CONSTANT`.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow IP address matching against a server certificate's Subject Alternative Name",
      "description": "Allow IP address matching against a server certificate's Subject Alternative Name (Jacob Champion)",
      "sinceVersion": "15.0",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Allow `PQsslAttribute",
      "description": "Allow `PQsslAttribute()()` to report the SSL library type without requiring a libpq connection (Jacob Champion)",
      "sinceVersion": "15.0",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Change query cancellations sent by the client to use the same TCP settings as normal client connections",
      "description": "Change query cancellations sent by the client to use the same TCP settings as normal client connections (Jelte Fennema)\n            This allows configured TCP timeouts to apply to query cancel connections.",
      "sinceVersion": "15.0",
      "contributor": "Jelte Fennema"
    },
    {
      "title": "Prevent libpq event callback failures from forcing an error result",
      "description": "Prevent libpq event callback failures from forcing an error result (Tom Lane)",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow pgbench to retry after serialization and deadlock failures",
      "description": "Allow pgbench to retry after serialization and deadlock failures (Yugo Nagata, Marina Polyakova)",
      "sinceVersion": "15.0",
      "contributor": "Yugo Nagata, Marina Polyakova"
    },
    {
      "title": "Add \\dconfig command to report server variables",
      "description": "Add \\dconfig command to report server variables (Mark Dilger, Tom Lane)\n              This is similar to the server-side SHOW command, but it can process patterns to show multiple variables conveniently.",
      "sinceVersion": "15.0",
      "contributor": "Mark Dilger, Tom Lane"
    },
    {
      "title": "Add \\getenv command to assign the value of an environment variable to a psql variable",
      "description": "Add \\getenv command to assign the value of an environment variable to a psql variable (Tom Lane)",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add `+` option to the `\\lo_list` and `\\dl` commands to show large-object privileges",
      "description": "Add `+` option to the `\\lo_list` and `\\dl` commands to show large-object privileges (Pavel Luzanov)",
      "sinceVersion": "15.0",
      "contributor": "Pavel Luzanov"
    },
    {
      "title": "Add a pager option for the \\watch command",
      "description": "Add a pager option for the \\watch command (Pavel Stehule, Thomas Munro)\n              This is only supported on Unix and is controlled by the PSQL_WATCH_PAGER environment variable.",
      "sinceVersion": "15.0",
      "contributor": "Pavel Stehule, Thomas Munro"
    },
    {
      "title": "Make psql include intra-query double-hyphen comments in queries sent to the server",
      "description": "Make psql include intra-query double-hyphen comments in queries sent to the server (Tom Lane, Greg Nancarrow)\n              Previously such comments were removed from the query before being sent. Double-hyphen comments that are before any query text are not sent, and are not recorded as separate psql history entries.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane, Greg Nancarrow"
    },
    {
      "title": "Adjust psql so that Readline's meta-`#` command will insert a double-hyphen comment marker",
      "description": "Adjust psql so that Readline's meta-`#` command will insert a double-hyphen comment marker (Tom Lane)\n              Previously a pound marker was inserted, unless the user had taken the trouble to configure a non-default comment marker.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Make psql output all results when multiple queries are passed to the server at once",
      "description": "Make psql output all results when multiple queries are passed to the server at once (Fabien Coelho)\n              Previously, only the last query result was displayed. The old behavior can be restored by setting the `SHOW_ALL_RESULTS` psql variable to `off`.",
      "sinceVersion": "15.0",
      "contributor": "Fabien Coelho"
    },
    {
      "title": "After an error is detected in --single-transaction mode, change the final COMMIT command to ROLLBACK only if ON_ERROR_STOP is set",
      "description": "After an error is detected in --single-transaction mode, change the final COMMIT command to ROLLBACK only if ON_ERROR_STOP is set (Michael Paquier)\n              Previously, detection of an error in a -c command or -f script file would lead to issuing ROLLBACK at the end, regardless of the value of ON_ERROR_STOP.",
      "sinceVersion": "15.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Improve psql's tab completion",
      "description": "Improve psql's tab completion (Shinya Kato, Dagfinn Ilmari Mannsåker, Peter Smith, Koyu Tanigawa, Ken Kato, David Fetter, Haiying Tang, Peter Eisentraut, Álvaro Herrera, Tom Lane, Masahiko Sawada)",
      "sinceVersion": "15.0",
      "contributor": "Shinya Kato, Dagfinn Ilmari Mannsåker, Peter Smith, Koyu Tanigawa, Ken Kato, David Fetter, Haiying Tang, Peter Eisentraut, Álvaro Herrera, Tom Lane, Masahiko Sawada"
    },
    {
      "title": "Limit support of psql's backslash commands to servers running PostgreSQL 9.2 or later",
      "description": "Limit support of psql's backslash commands to servers running PostgreSQL 9.2 or later (Tom Lane)\n              Remove code that was only used when running with an older server. Commands that do not require any version-specific adjustments compared to 9.2 will still work.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add dump/restore option --no-table-access-method to force restore to only use the default table access method",
      "description": "Add dump/restore option --no-table-access-method to force restore to only use the default table access method (Justin Pryzby)",
      "sinceVersion": "15.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Limit support of pg_dump and pg_dumpall to servers running PostgreSQL 9.2 or later",
      "description": "Limit support of pg_dump and pg_dumpall to servers running PostgreSQL 9.2 or later (Tom Lane)",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add new pg_basebackup option --target to control the base backup location",
      "description": "Add new pg_basebackup option --target to control the base backup location (Robert Haas)\n            The new options are `server` to write the backup locally and `blackhole` to discard the backup (for testing).",
      "sinceVersion": "15.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow pg_basebackup to do server-side gzip, LZ4, and Zstandard compression and client-side LZ4 and Zstandard compression of base backup files",
      "description": "Allow pg_basebackup to do server-side gzip, LZ4, and Zstandard compression and client-side LZ4 and Zstandard compression of base backup files (Dipesh Pandit, Jeevan Ladhe)\n            Client-side `gzip` compression was already supported.",
      "sinceVersion": "15.0",
      "contributor": "Dipesh Pandit, Jeevan Ladhe"
    },
    {
      "title": "Allow pg_basebackup to compress on the server side and decompress on the client side before storage",
      "description": "Allow pg_basebackup to compress on the server side and decompress on the client side before storage (Dipesh Pandit)\n            This is accomplished by specifying compression on the server side and plain output format.",
      "sinceVersion": "15.0",
      "contributor": "Dipesh Pandit"
    },
    {
      "title": "Allow pg_basebackup's --compress option to control the compression location",
      "description": "Allow pg_basebackup's --compress option to control the compression location (server or client), compression method, and compression options (Michael Paquier, Robert Haas)",
      "sinceVersion": "15.0",
      "contributor": "Michael Paquier, Robert Haas"
    },
    {
      "title": "Add the LZ4 compression method to pg_receivewal",
      "description": "Add the LZ4 compression method to pg_receivewal (Georgios Kokolatos)\n            This is enabled via `--compress=lz4` and requires binaries to be built using --with-lz4.",
      "sinceVersion": "15.0",
      "contributor": "Georgios Kokolatos"
    },
    {
      "title": "Add additional capabilities to pg_receivewal's --compress option",
      "description": "Add additional capabilities to pg_receivewal's --compress option (Georgios Kokolatos)",
      "sinceVersion": "15.0",
      "contributor": "Georgios Kokolatos"
    },
    {
      "title": "Improve pg_receivewal's ability to restart at the proper WAL location",
      "description": "Improve pg_receivewal's ability to restart at the proper WAL location (Ronan Dunklau)\n            Previously, pg_receivewal would start based on the WAL file stored in the local archive directory, or at the sending server's current WAL flush location. With this change, if the sending server is running Postgres 15 or later, the local archive directory is empty, and a replication slot is specified, the replication slot's restart point will be used.",
      "sinceVersion": "15.0",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Add pg_rewind option --config-file to simplify use when server configuration files are stored outside the data directory",
      "description": "Add pg_rewind option --config-file to simplify use when server configuration files are stored outside the data directory (Gunnar Bluth)",
      "sinceVersion": "15.0",
      "contributor": "Gunnar Bluth"
    },
    {
      "title": "Store pg_upgrade's log and temporary files in a subdirectory of the new cluster called pg_upgrade_output.d",
      "description": "Store pg_upgrade's log and temporary files in a subdirectory of the new cluster called pg_upgrade_output.d (Justin Pryzby)\n              Previously such files were left in the current directory, requiring manual cleanup. Now they are automatically removed on successful completion of pg_upgrade.",
      "sinceVersion": "15.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Disable default status reporting during pg_upgrade operation if the output is not a terminal",
      "description": "Disable default status reporting during pg_upgrade operation if the output is not a terminal (Andres Freund)\n              The status reporting output can be enabled for non-tty usage by using --verbose.",
      "sinceVersion": "15.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Make pg_upgrade report all databases with invalid connection settings",
      "description": "Make pg_upgrade report all databases with invalid connection settings (Jeevan Ladhe)\n              Previously only the first database with an invalid connection setting was reported.",
      "sinceVersion": "15.0",
      "contributor": "Jeevan Ladhe"
    },
    {
      "title": "Make pg_upgrade preserve tablespace and database OIDs, as well as relation relfilenode numbers",
      "description": "Make pg_upgrade preserve tablespace and database OIDs, as well as relation relfilenode numbers (Shruthi Gowda, Antonin Houska)",
      "sinceVersion": "15.0",
      "contributor": "Shruthi Gowda, Antonin Houska"
    },
    {
      "title": "Add a --no-sync option to pg_upgrade",
      "description": "Add a --no-sync option to pg_upgrade (Michael Paquier)\n              This is recommended only for testing.",
      "sinceVersion": "15.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Limit support of pg_upgrade to old servers running PostgreSQL 9.2 or later",
      "description": "Limit support of pg_upgrade to old servers running PostgreSQL 9.2 or later (Tom Lane)",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow pg_waldump output to be filtered by relation file node, block number, fork number, and full page images",
      "description": "Allow pg_waldump output to be filtered by relation file node, block number, fork number, and full page images (David Christensen, Thomas Munro)",
      "sinceVersion": "15.0",
      "contributor": "David Christensen, Thomas Munro"
    },
    {
      "title": "Make pg_waldump report statistics before an interrupted exit",
      "description": "Make pg_waldump report statistics before an interrupted exit (Bharath Rupireddy)\n              For example, issuing a control-C in a terminal running pg_waldump --stats --follow will report the current statistics before exiting. This does not work on Windows.",
      "sinceVersion": "15.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Improve descriptions of some transaction WAL records reported by pg_waldump",
      "description": "Improve descriptions of some transaction WAL records reported by pg_waldump (Masahiko Sawada, Michael Paquier)",
      "sinceVersion": "15.0",
      "contributor": "Masahiko Sawada, Michael Paquier"
    },
    {
      "title": "Allow pg_waldump to dump information about multiple resource managers",
      "description": "Allow pg_waldump to dump information about multiple resource managers (Heikki Linnakangas)\n              This is enabled by specifying the --rmgr option multiple times.",
      "sinceVersion": "15.0",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Add documentation for `pg_encoding_to_char",
      "description": "Add documentation for `pg_encoding_to_char()()` and `pg_char_to_encoding()()` (Ian Lawrence Barwick)",
      "sinceVersion": "15.0",
      "contributor": "Ian Lawrence Barwick"
    },
    {
      "title": "Document the `^@` starts-with operator",
      "description": "Document the `^@` starts-with operator (Tom Lane)",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add support for continuous integration testing using cirrus-ci",
      "description": "Add support for continuous integration testing using cirrus-ci (Andres Freund, Thomas Munro, Melanie Plageman)",
      "sinceVersion": "15.0",
      "contributor": "Andres Freund, Thomas Munro, Melanie Plageman"
    },
    {
      "title": "Add configure option --with-zstd to enable Zstandard builds",
      "description": "Add configure option --with-zstd to enable Zstandard builds (Jeevan Ladhe, Robert Haas, Michael Paquier)",
      "sinceVersion": "15.0",
      "contributor": "Jeevan Ladhe, Robert Haas, Michael Paquier"
    },
    {
      "title": "Add an ABI identifier field to the magic block in loadable libraries, allowing non-community PostgreSQL distributions to identify libraries that are not compatible with other builds",
      "description": "Add an ABI identifier field to the magic block in loadable libraries, allowing non-community PostgreSQL distributions to identify libraries that are not compatible with other builds (Peter Eisentraut)\n            An ABI field mismatch will generate an error at load time.",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Create a new pg_type.typcategory value for \"char\"",
      "description": "Create a new pg_type.typcategory value for \"char\" (Tom Lane)\n            Some other internal-use-only types have also been assigned to this category.",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add new protocol message `TARGET` to specify a new COPY method to be used for base backups",
      "description": "Add new protocol message `TARGET` to specify a new COPY method to be used for base backups (Robert Haas)\n            pg_basebackup now uses this method.",
      "sinceVersion": "15.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Add new protocol message `COMPRESSION` and `COMPRESSION_DETAIL` to specify the compression method and options",
      "description": "Add new protocol message `COMPRESSION` and `COMPRESSION_DETAIL` to specify the compression method and options (Robert Haas)",
      "sinceVersion": "15.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Remove server support for old `BASE_BACKUP` command syntax and base backup protocol",
      "description": "Remove server support for old `BASE_BACKUP` command syntax and base backup protocol (Robert Haas)",
      "sinceVersion": "15.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Add support for extensions to set custom backup targets",
      "description": "Add support for extensions to set custom backup targets (Robert Haas)",
      "sinceVersion": "15.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow extensions to define custom WAL resource managers",
      "description": "Allow extensions to define custom WAL resource managers (Jeff Davis)",
      "sinceVersion": "15.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Add function `pg_settings_get_flags",
      "description": "Add function `pg_settings_get_flags()()` to get the flags of server variables (Justin Pryzby)",
      "sinceVersion": "15.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "On Windows, export all the server's global variables using `PGDLLIMPORT` markers",
      "description": "On Windows, export all the server's global variables using `PGDLLIMPORT` markers (Robert Haas)\n            Previously, only specific variables were accessible to extensions on Windows.",
      "sinceVersion": "15.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Require GNU make version 3.81 or later to build PostgreSQL",
      "description": "Require GNU make version 3.81 or later to build PostgreSQL (Tom Lane)",
      "sinceVersion": "15.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Require OpenSSL to build the pgcrypto extension",
      "description": "Require OpenSSL to build the pgcrypto extension (Peter Eisentraut)",
      "sinceVersion": "15.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Require Perl version 5.8.3 or later",
      "description": "Require Perl version 5.8.3 or later (Dagfinn Ilmari Mannsåker)",
      "sinceVersion": "15.0",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Require Python version 3.2 or later",
      "description": "Require Python version 3.2 or later (Andres Freund)",
      "sinceVersion": "15.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Allow amcheck to check sequences",
      "description": "Allow amcheck to check sequences (Mark Dilger)",
      "sinceVersion": "15.0",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Improve amcheck sanity checks for TOAST tables",
      "description": "Improve amcheck sanity checks for TOAST tables (Mark Dilger)",
      "sinceVersion": "15.0",
      "contributor": "Mark Dilger"
    },
    {
      "title": "Add new module basebackup_to_shell as an example of a custom backup target",
      "description": "Add new module basebackup_to_shell as an example of a custom backup target (Robert Haas)",
      "sinceVersion": "15.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Add new module basic_archive as an example of performing archiving via a library",
      "description": "Add new module basic_archive as an example of performing archiving via a library (Nathan Bossart)",
      "sinceVersion": "15.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Allow btree_gist indexes on boolean columns",
      "description": "Allow btree_gist indexes on boolean columns (Emre Hasegeli)\n            These can be used for exclusion constraints.",
      "sinceVersion": "15.0",
      "contributor": "Emre Hasegeli"
    },
    {
      "title": "Fix pageinspect's `page_header",
      "description": "Fix pageinspect's `page_header()()` to handle 32-kilobyte page sizes (Quan Zongliang)\n            Previously, improper negative values could be returned in certain cases.",
      "sinceVersion": "15.0",
      "contributor": "Quan Zongliang"
    },
    {
      "title": "Add counters for temporary file block I/O to pg_stat_statements",
      "description": "Add counters for temporary file block I/O to pg_stat_statements (Masahiko Sawada)",
      "sinceVersion": "15.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Add JIT counters to pg_stat_statements",
      "description": "Add JIT counters to pg_stat_statements (Magnus Hagander)",
      "sinceVersion": "15.0",
      "contributor": "Magnus Hagander"
    },
    {
      "title": "Add new module pg_walinspect",
      "description": "Add new module pg_walinspect (Bharath Rupireddy)\n            This gives SQL-level output similar to pg_waldump.",
      "sinceVersion": "15.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Indicate the permissive/enforcing state in sepgsql log messages",
      "description": "Indicate the permissive/enforcing state in sepgsql log messages (Dave Page)",
      "sinceVersion": "15.0",
      "contributor": "Dave Page"
    },
    {
      "title": "Allow postgres_fdw to push down `CASE` expressions",
      "description": "Allow postgres_fdw to push down `CASE` expressions (Alexander Pyhalov)",
      "sinceVersion": "15.0",
      "contributor": "Alexander Pyhalov"
    },
    {
      "title": "Add server variable postgres_fdw.application_name to control the application name of postgres_fdw connections",
      "description": "Add server variable postgres_fdw.application_name to control the application name of postgres_fdw connections (Hayato Kuroda)\n              Previously the remote session's application_name could only be set on the remote server or via a postgres_fdw connection specification. postgres_fdw.application_name supports some escape sequences for customization, making it easier to tell such connections apart on the remote server.",
      "sinceVersion": "15.0",
      "contributor": "Hayato Kuroda"
    },
    {
      "title": "Allow parallel commit on postgres_fdw servers",
      "description": "Allow parallel commit on postgres_fdw servers (Etsuro Fujita)\n              This is enabled with the `CREATE SERVER` option `parallel_commit`.",
      "sinceVersion": "15.0",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix construction of per-partition foreign key constraints while doing ALTER TABLE ATTACH PARTITION",
      "description": "Fix construction of per-partition foreign key constraints while doing ALTER TABLE ATTACH PARTITION (Jehan-Guillaume de Rorthais, Álvaro Herrera)\n          Previously, incorrect or duplicate constraints could be constructed for the newly-added partition.",
      "sinceVersion": "15.1",
      "contributor": "Jehan-Guillaume de Rorthais, Álvaro Herrera"
    },
    {
      "title": "Fix failure to remove non-first segments of large tables",
      "description": "Fix failure to remove non-first segments of large tables (Tom Lane)\n          PostgreSQL splits large tables into multiple files (normally with 1GB per file). The logic for dropping a table was broken and would miss removing all but the first such file, in two cases: drops of temporary tables and WAL replay of drops of regular tables. Applications that routinely create multi-gigabyte temporary tables could suffer significant disk space leakage.\n          Orphaned temporary-table files are removed during postmaster start, so the mere act of updating to 15.1 is sufficient to clear any leaked temporary-table storage. However, if you suffered any database crashes while using 15.0, and there might have been large tables dropped just before such crashes, it's advisable to check the database directories for files named according to the pattern ``NNNN`.NN`. If there is no matching file named just ``NNNN`` (without the `.`NN`` suffix), these files should be removed manually.",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view",
      "description": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an INSERT on an updatable view (Tom Lane)\n          This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "Disallow rules named `_RETURN` that are not `ON SELECT` (Tom Lane)\n          This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure in EXPLAIN VERBOSE for a query using `SEARCH BREADTH FIRST` with constant initial values",
      "description": "Avoid failure in EXPLAIN VERBOSE for a query using `SEARCH BREADTH FIRST` with constant initial values (Tom Lane)",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent use of MERGE on a partitioned table with foreign-table partitions",
      "description": "Prevent use of MERGE on a partitioned table with foreign-table partitions (Álvaro Herrera)\n          The case isn't supported, and previously threw an incomprehensible error.",
      "sinceVersion": "15.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix planner failure with extended statistics on partitioned or inherited tables",
      "description": "Fix planner failure with extended statistics on partitioned or inherited tables (Richard Guo, Justin Pryzby)\n          Some cases failed with “cache lookup failed for statistics object”.",
      "sinceVersion": "15.1",
      "contributor": "Richard Guo, Justin Pryzby"
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes (Matthias van de Meent, Zhang Mingli)\n          This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "sinceVersion": "15.1",
      "contributor": "Matthias van de Meent, Zhang Mingli"
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction (Masahiko Sawada, Kuroda Hayato)\n          These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "sinceVersion": "15.1",
      "contributor": "Masahiko Sawada, Kuroda Hayato"
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "Accept interrupts in more places during logical decoding (Amit Kapila, Masahiko Sawada)\n          This ameliorates problems with slow shutdown of replication workers.",
      "sinceVersion": "15.1",
      "contributor": "Amit Kapila, Masahiko Sawada"
    },
    {
      "title": "Prevent attempts to replicate into a foreign-table partition in replication workers",
      "description": "Prevent attempts to replicate into a foreign-table partition in replication workers (Shi Yu, Tom Lane)\n          Although partitioned tables can have foreign tables as partitions, replicating into such a partition isn't currently supported. The logical replication worker process would crash if it was attempted. Now, an error is thrown.",
      "sinceVersion": "15.1",
      "contributor": "Shi Yu, Tom Lane"
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "Avoid crash after function syntax error in replication workers (Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane)\n          If a syntax error occurred in a SQL-language or PL/pgSQL-language CREATE FUNCTION or DO command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "sinceVersion": "15.1",
      "contributor": "Maxim Orlov, Anton Melnikov, Masahiko Sawada, Tom Lane"
    },
    {
      "title": "Avoid double call of the shutdown callback of an archiver module",
      "description": "Avoid double call of the shutdown callback of an archiver module (Nathan Bossart, Bharath Rupireddy)",
      "sinceVersion": "15.1",
      "contributor": "Nathan Bossart, Bharath Rupireddy"
    },
    {
      "title": "Add plan-time check for attempted access to a table that has no table access method",
      "description": "Add plan-time check for attempted access to a table that has no table access method (Tom Lane)\n          This prevents a crash in some catalog-corruption scenarios, for example use of a view whose `ON SELECT` rule is missing.",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "Prevent postmaster crash when shared-memory state is corrupted (Tom Lane)\n          The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "In libpq, handle single-row mode correctly when pipelining",
      "description": "In libpq, handle single-row mode correctly when pipelining (Denis Laxalde)\n          The single-row flag was not reset at the correct time if pipeline mode was also active.",
      "sinceVersion": "15.1",
      "contributor": "Denis Laxalde"
    },
    {
      "title": "Fix psql's exit status when a command-line query is canceled",
      "description": "Fix psql's exit status when a command-line query is canceled (Peter Eisentraut)\n          `psql -c `query`` would exit successfully if the query was canceled. Fix it to exit with nonzero status, as in other error cases.",
      "sinceVersion": "15.1",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg_basebackup",
      "description": "Allow cross-platform tablespace relocation in pg_basebackup (Robert Haas)\n          Allow the remote path in --tablespace-mapping to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "sinceVersion": "15.1",
      "contributor": "Robert Haas"
    },
    {
      "title": "Fix pg_dump's failure to dump comments attached to some `CHECK` constraints",
      "description": "Fix pg_dump's failure to dump comments attached to some `CHECK` constraints (Tom Lane)",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix CREATE DATABASE to allow its `oid` parameter to exceed 231",
      "description": "Fix CREATE DATABASE to allow its `oid` parameter to exceed 231 (Tom Lane)\n          This oversight prevented pg_upgrade from succeeding when the source installation contained databases with OIDs larger than that.",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_stat_statements, fix access to already-freed memory",
      "description": "In pg_stat_statements, fix access to already-freed memory (zhaoqigui)\n          This occurred if pg_stat_statements tracked a ROLLBACK command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "sinceVersion": "15.1",
      "contributor": "zhaoqigui"
    },
    {
      "title": "Fix incompatibilities with LLVM 15",
      "description": "Fix incompatibilities with LLVM 15 (Thomas Munro, Andres Freund)",
      "sinceVersion": "15.1",
      "contributor": "Thomas Munro, Andres Freund"
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set",
      "description": "Allow use of `__sync_lock_test_and_set()()` for spinlocks on any machine (Tom Lane)\n          This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS",
      "description": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane)",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid using `sprintf",
      "description": "Avoid using `sprintf()`, to avoid compile-time deprecation warnings (Tom Lane)",
      "sinceVersion": "15.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis.",
      "description": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.\n          Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy_River, America/Thunder_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n          These zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of timestamptz display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n          It is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "sinceVersion": "15.1",
      "contributor": null
    },
    {
      "title": "libpq can leak memory contents after GSSAPI transport encryption initiation fails",
      "description": "libpq can leak memory contents after GSSAPI transport encryption initiation fails (Jacob Champion)\n          A modified server, or an unauthenticated man-in-the-middle, can send a not-zero-terminated error message during setup of GSSAPI (Kerberos) transport encryption. libpq will then copy that string, as well as following bytes in application memory up to the next zero byte, to its error report. Depending on what the calling application does with the error report, this could result in disclosure of application memory contents. There is also a small probability of a crash due to reading beyond the end of memory. Fix by properly zero-terminating the server message. (CVE-2022-41862)",
      "sinceVersion": "15.2",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Fix calculation of which `GENERATED` columns need to be updated in child tables during an UPDATE on a partitioned table or inheritance tree",
      "description": "Fix calculation of which `GENERATED` columns need to be updated in child tables during an UPDATE on a partitioned table or inheritance tree (Amit Langote, Tom Lane)\n          This fixes failure to update `GENERATED` columns that do not exist in the parent table, or that have different dependencies than are in the parent column's generation expression.",
      "sinceVersion": "15.2",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Fix possible failure of MERGE to compute `GENERATED` columns",
      "description": "Fix possible failure of MERGE to compute `GENERATED` columns (Dean Rasheed)\n          When the first row-level action of the MERGE was an `UPDATE`, any subsequent `INSERT` actions would fail to compute `GENERATED` columns that were deemed unnecessary to compute for the `UPDATE` action (due to not depending on any of the `UPDATE` target columns).",
      "sinceVersion": "15.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix MERGE's check for unreachable `WHEN` clauses",
      "description": "Fix MERGE's check for unreachable `WHEN` clauses (Dean Rasheed)\n          A `WHEN` clause following an unconditional `WHEN` clause should be rejected as unreachable, but this case was not always detected.",
      "sinceVersion": "15.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix MERGE's rule-detection test",
      "description": "Fix MERGE's rule-detection test (Dean Rasheed)\n          MERGE is not supported on tables with rules; but it also failed on tables that once had rules but no longer do.",
      "sinceVersion": "15.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "In MERGE, don't count a `DO NOTHING` action as a processed tuple",
      "description": "In MERGE, don't count a `DO NOTHING` action as a processed tuple (Álvaro Herrera)\n          This makes the code's behavior match the documentation.",
      "sinceVersion": "15.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Allow a `WITH RECURSIVE ... CYCLE` CTE to access its output column",
      "description": "Allow a `WITH RECURSIVE ... CYCLE` CTE to access its output column (Tom Lane)\n          A reference to the `SET` column from within the CTE would fail with “cache lookup failed for type 0”.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of pending inserts when doing a bulk insertion to a foreign table",
      "description": "Fix handling of pending inserts when doing a bulk insertion to a foreign table (Etsuro Fujita)\n          In some cases pending insertions were not flushed to the FDW soon enough, leading to logical inconsistencies, for example `BEFORE ROW` triggers not seeing rows they should be able to see.",
      "sinceVersion": "15.2",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not",
      "description": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid (Tom Lane)\n          When pg_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list",
      "description": "Fix handling of `DEFAULT` markers in rules that perform an INSERT from a multi-row `VALUES` list (Dean Rasheed)\n          In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "sinceVersion": "15.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Reject uses of undefined variables in jsonpath existence checks",
      "description": "Reject uses of undefined variables in jsonpath existence checks (Alexander Korotkov, David G. Johnston)\n          While jsonpath match operators threw an error for an undefined variable in the path pattern, the existence operators silently treated it as a match.",
      "sinceVersion": "15.2",
      "contributor": "Alexander Korotkov, David G. Johnston"
    },
    {
      "title": "Fix jsonb subscripting to cope with toasted subscript values",
      "description": "Fix jsonb subscripting to cope with toasted subscript values (Tom Lane, David G. Johnston)\n          Using a text value fetched directly from a table as a jsonb subscript was likely to fail. Fetches would usually not find any matching element. Assignments could store the value with a garbage key, although keys long enough to cause that problem are probably rare in the field.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane, David G. Johnston"
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "Fix edge-case data corruption in parallel hash joins (Dmitry Astapov)\n          If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "sinceVersion": "15.2",
      "contributor": "Dmitry Astapov"
    },
    {
      "title": "Log the correct ending timestamp in recovery_target_xid mode",
      "description": "Log the correct ending timestamp in recovery_target_xid mode (Tom Lane)\n          When ending recovery based on the recovery_target_xid setting with recovery_target_inclusive = `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve error reporting for some buffered file read failures",
      "description": "Improve error reporting for some buffered file read failures (Peter Eisentraut)\n          Correctly report a short read, giving the numbers of bytes desired and actually read, instead of reporting an irrelevant error code. Most places got this right already, but some recently-written replication logic did not.",
      "sinceVersion": "15.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Remove arbitrary limit on number of elements in int2vector and oidvector",
      "description": "Remove arbitrary limit on number of elements in int2vector and oidvector (Tom Lane)\n          The input functions for these types previously rejected more than 100 elements. With the introduction of the logical replication column list feature, it's necessary to accept int2vectors having up to 1600 columns, otherwise long column lists cause logical-replication failures.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline",
      "description": "In extended query protocol, avoid an immediate commit after ANALYZE if we're running a pipeline (Tom Lane)\n          If there's not been an explicit BEGIN TRANSACTION, ANALYZE would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "Reject cancel request packets having the wrong length (Andrey Borodin)\n          The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "sinceVersion": "15.2",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Fix planner preprocessing oversights for window function run-condition expressions",
      "description": "Fix planner preprocessing oversights for window function run-condition expressions (Richard Guo, David Rowley)\n          This could lead to planner errors such as “WindowFunc not found in subplan target lists”.",
      "sinceVersion": "15.2",
      "contributor": "Richard Guo, David Rowley"
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "Add recursion and looping defenses in subquery pullup (Tom Lane)\n          A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix planner issues when combining Memoize nodes with partitionwise joins or parameterized nestloops",
      "description": "Fix planner issues when combining Memoize nodes with partitionwise joins or parameterized nestloops (Richard Guo)\n          These errors could lead to not using Memoize in contexts where it would be useful, or possibly to wrong query plans.",
      "sinceVersion": "15.2",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition (Tom Lane)\n          This could result in “could not devise a query plan for the given query” errors.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent the statistics machinery from getting confused when a relation's relkind changes",
      "description": "Prevent the statistics machinery from getting confused when a relation's relkind changes (Andres Freund)\n          Converting a table to a view could lead to crashes or assertion failures.",
      "sinceVersion": "15.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix under-parenthesized display of `AT TIME ZONE` constructs",
      "description": "Fix under-parenthesized display of `AT TIME ZONE` constructs (Tom Lane)\n          This could result in dump/restore failures for rules or views in which an argument of `AT TIME ZONE` is itself an expression.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent clobbering of cached parsetrees for utility statements in SQL functions",
      "description": "Prevent clobbering of cached parsetrees for utility statements in SQL functions (Tom Lane, Daniel Gustafsson)\n          If a SQL-language function executes the same utility command more than once within a single calling query, it could crash or report strange errors such as “unrecognized node type”.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane, Daniel Gustafsson"
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches",
      "description": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches (Tom Lane)",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak in hashing strings with nondeterministic collations",
      "description": "Fix memory leak in hashing strings with nondeterministic collations (Jeff Davis)",
      "sinceVersion": "15.2",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Fix deadlock between DROP DATABASE and logical replication worker process",
      "description": "Fix deadlock between DROP DATABASE and logical replication worker process (Hou Zhijie)\n          This was caused by an ill-advised choice to block interrupts while creating a logical replication slot in the worker. In version 15 that could lead to an undetected deadlock. In version 14, no deadlock has been observed, but it's still a bad idea to block interrupts while waiting for network I/O.",
      "sinceVersion": "15.2",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "Clean up the libpq connection object after a failed replication connection attempt (Andres Freund)\n          The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as CREATE SUBSCRIPTION, such a failure resulted in a small session-lifespan memory leak.",
      "sinceVersion": "15.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ignore invalidated logical-replication slots while determining oldest catalog xmin",
      "description": "Ignore invalidated logical-replication slots while determining oldest catalog xmin (Sirisha Chamarthi)\n          A replication slot could prevent cleanup of dead tuples in the system catalogs even after it becomes invalidated due to exceeding max_slot_wal_keep_size. Thus, failure of a replication consumer could lead to indefinitely-large catalog bloat.",
      "sinceVersion": "15.2",
      "contributor": "Sirisha Chamarthi"
    },
    {
      "title": "In logical decoding, notify the remote node when a transaction is detected to have crashed",
      "description": "In logical decoding, notify the remote node when a transaction is detected to have crashed (Hou Zhijie)\n          After a server restart, we'll re-stream the changes for transactions occurring shortly before the restart. Some of these transactions probably never completed; when we realize that one didn't we throw away the relevant decoding state locally, but we neglected to tell the subscriber about it. That led to the subscriber keeping useless streaming files until it's next restarted.",
      "sinceVersion": "15.2",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "Fix uninitialized-memory usage in logical decoding (Masahiko Sawada)\n          In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "sinceVersion": "15.2",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Acquire spinlock while updating shared state during logical decoding context creation",
      "description": "Acquire spinlock while updating shared state during logical decoding context creation (Masahiko Sawada)\n          We neglected to acquire the appropriate lock while updating data about two-phase transactions, potentially allowing other processes to see inconsistent data.",
      "sinceVersion": "15.2",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix pgoutput replication plug-in to not send columns not listed in a table's replication column list",
      "description": "Fix pgoutput replication plug-in to not send columns not listed in a table's replication column list (Hou Zhijie)\n          `UPDATE` and `DELETE` events did not pay attention to the configured column list, thus sending more data than expected. This did not cause a problem when the receiver is our built-in logical replication code, but it might confuse other receivers, and in any case it wasted network bandwidth.",
      "sinceVersion": "15.2",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations",
      "description": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations (Robert Haas)",
      "sinceVersion": "15.2",
      "contributor": "Robert Haas"
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Advance a heap page's LSN when setting its all-visible bit during WAL replay (Jeff Davis)\n          Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "sinceVersion": "15.2",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Fix `int64_div_fast_to_numeric",
      "description": "Fix `int64_div_fast_to_numeric()()` to work for a wider range of inputs (Dean Rasheed)\n          This function misbehaved with some values of its second argument. No such usages exist in core PostgreSQL, but it's clearly a hazard for external modules, so repair.",
      "sinceVersion": "15.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "Fix latent buffer-overrun problem in `WaitEventSet` logic (Thomas Munro)\n          The `epoll()`-based and `kqueue()`-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "sinceVersion": "15.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds (Andres Freund)\n          clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "sinceVersion": "15.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix assertion failure in BRIN minmax-multi opclasses",
      "description": "Fix assertion failure in BRIN minmax-multi opclasses (Tomas Vondra)\n          The assertion was overly strict, so this mistake was harmless in non-assert builds.",
      "sinceVersion": "15.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks (Justin Pryzby)\n          In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "sinceVersion": "15.2",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Fix possible corruption of very large tablespace map files in pg_basebackup",
      "description": "Fix possible corruption of very large tablespace map files in pg_basebackup (Antonin Houska)",
      "sinceVersion": "15.2",
      "contributor": "Antonin Houska"
    },
    {
      "title": "Avoid harmless warning from pg_dump in --if-exists mode",
      "description": "Avoid harmless warning from pg_dump in --if-exists mode (Tom Lane)\n          If the `public` schema has a non-default owner then use of pg_dump's --if-exists option resulted in a warning message “warning: could not find where to insert IF EXISTS in statement \"-- *not* dropping schema, since initdb creates it\"”. The dump output was okay, though.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix psql's `\\sf` and `\\ef` commands to handle SQL-language functions that have SQL-standard function bodies",
      "description": "Fix psql's `\\sf` and `\\ef` commands to handle SQL-language functions that have SQL-standard function bodies (Tom Lane)\n          These commands misidentified the start of the function body when it used new-style syntax.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA",
      "description": "Fix tab completion of ALTER FUNCTION/PROCEDURE/ROUTINE ... SET SCHEMA (Dean Rasheed)",
      "sinceVersion": "15.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Update contrib/pageinspect to mark its disk-accessing functions as `PARALLEL RESTRICTED`",
      "description": "Update contrib/pageinspect to mark its disk-accessing functions as `PARALLEL RESTRICTED` (Tom Lane)\n          This avoids possible failure if one of these functions is used to examine a temporary table, since a session's temporary tables are not accessible from parallel workers.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits",
      "description": "Fix contrib/seg to not crash or print garbage if an input number has more than 127 digits (Tom Lane)",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix build on Microsoft Visual Studio 2013",
      "description": "Fix build on Microsoft Visual Studio 2013 (Tom Lane)\n          A previous patch supposed that all platforms of interest have `snprintf()()`, but MSVC 2013 isn't quite there yet. Revert to using `sprintf()()` on that platform.",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl",
      "description": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl (Andrew Dunstan)",
      "sinceVersion": "15.2",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc (Andrew Dunstan)\n          Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "sinceVersion": "15.2",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Suppress compiler warnings from Perl's header files (Andres Freund)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "15.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions",
      "description": "Fix pg_waldump to build on compilers that don't discard unused static-inline functions (Tom Lane)",
      "sinceVersion": "15.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.\n          Notably, a new timezone America/Ciudad_Juarez has been split off from America/Ojinaga.",
      "sinceVersion": "15.2",
      "contributor": null
    },
    {
      "title": "Add support for decompiling MERGE commands",
      "description": "Add support for decompiling MERGE commands (Álvaro Herrera)\n          This was overlooked when MERGE was added, but it's essential support for MERGE in new-style SQL functions.",
      "sinceVersion": "15.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view",
      "description": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane)",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix potential corruption of the template",
      "description": "Fix potential corruption of the template (source) database after CREATE DATABASE with the `STRATEGY WAL_LOG` option (Nathan Bossart, Ryo Matsumura)\n          Improper buffer handling created a risk that any later modification of the template's pg_class catalog would be lost.",
      "sinceVersion": "15.3",
      "contributor": "Nathan Bossart, Ryo Matsumura"
    },
    {
      "title": "Fix memory leakage and unnecessary disk reads during CREATE DATABASE with the `STRATEGY WAL_LOG` option",
      "description": "Fix memory leakage and unnecessary disk reads during CREATE DATABASE with the `STRATEGY WAL_LOG` option (Andres Freund)",
      "sinceVersion": "15.3",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid crash when the new schema name is omitted in CREATE SCHEMA",
      "description": "Avoid crash when the new schema name is omitted in CREATE SCHEMA (Michael Paquier)\n          The SQL standard allows writing `CREATE SCHEMA AUTHORIZATION `owner_name``, with the schema name defaulting to `owner_name`. However some code paths expected the schema name to be present and would fail.",
      "sinceVersion": "15.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix various planner failures with MERGE commands",
      "description": "Fix various planner failures with MERGE commands (Tom Lane)\n          Planning could fail with errors like “variable not found in subplan target list” or “PlaceHolderVar found where not expected”.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix the row count reported by MERGE for some corner cases",
      "description": "Fix the row count reported by MERGE for some corner cases (Dean Rasheed)\n          The row count reported in the command tag counted rows that actually hadn't been modified due to a `BEFORE ROW` trigger returning NULL. This is inconsistent with what happens in plain UPDATE or DELETE, so change it to not count such rows. Also, avoid counting a row twice when MERGE moves it into a different partition of a partitioned table.",
      "sinceVersion": "15.3",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix MERGE problems with concurrent updates",
      "description": "Fix MERGE problems with concurrent updates (Dean Rasheed, Álvaro Herrera)\n          Some cases misbehaved if a row to be updated or deleted by MERGE had just been updated by a concurrent transaction. This could lead to a crash, or the wrong merge action being executed, or no action at all.",
      "sinceVersion": "15.3",
      "contributor": "Dean Rasheed, Álvaro Herrera"
    },
    {
      "title": "Fix enabling/disabling of foreign-key triggers in partitioned tables",
      "description": "Fix enabling/disabling of foreign-key triggers in partitioned tables (Tom Lane)\n          ALTER TABLE ... ENABLE/DISABLE TRIGGER failed if applied to a partitioned table's foreign-key enforcement triggers, because it tried to locate the clone triggers for the partitions by name, and they do not have the same name. Locate them by parent-trigger OID instead.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "Disallow altering composite types that are stored in indexes (Tom Lane)\n          ALTER TYPE disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow system columns as elements of foreign keys",
      "description": "Disallow system columns as elements of foreign keys (Tom Lane)\n          Since the removal of OID as a system column, there is no plausible use-case for this, and various bits of code no longer support it. Disallow it rather than trying to fix all the cases.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid possible crash when `array_position",
      "description": "Avoid possible crash when `array_position()()` or `array_positions()()` is passed an empty array (Tom Lane)",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char",
      "description": "Fix possible out-of-bounds fetch in `to_char()()` (Tom Lane)\n          With bad luck this could have resulted in a server crash.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid buffer overread in `translate",
      "description": "Avoid buffer overread in `translate()()` function (Daniil Anisimov)\n          When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "sinceVersion": "15.3",
      "contributor": "Daniil Anisimov"
    },
    {
      "title": "Adjust text-search-related character classification logic to correctly detect whether the prevailing locale is `C`",
      "description": "Adjust text-search-related character classification logic to correctly detect whether the prevailing locale is `C` (Jeff Davis)\n          This code got confused if the database's default collation uses ICU.",
      "sinceVersion": "15.3",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Avoid possible crash on empty input for type interval",
      "description": "Avoid possible crash on empty input for type interval (Tom Lane)",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Re-allow exponential notation in ISO-8601 interval fields",
      "description": "Re-allow exponential notation in ISO-8601 interval fields (Tom Lane)\n          Interval input like `P0.1e10D` isn't officially sanctioned by ISO-8601, but we accepted it for a long time before version 15, so re-allow it.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Fix error cursor setting for parse errors in JSON string literals (Tom Lane)\n          Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data corruption due to vacuum_defer_cleanup_age being larger than the current 64-bit xid",
      "description": "Fix data corruption due to vacuum_defer_cleanup_age being larger than the current 64-bit xid (Andres Freund)\n          In v14 and later with non-default settings of vacuum_defer_cleanup_age, it was possible to compute a very large vacuum cleanup horizon xid, leading to vacuum removing rows that are still live. v12 and v13 have a lesser form of the same problem affecting only GiST indexes, which could lead to index pages getting recycled too early.",
      "sinceVersion": "15.3",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "Fix parser's failure to detect some cases of improperly-nested aggregates (Tom Lane)\n          This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options (David Rowley)\n          This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "sinceVersion": "15.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another (Tom Lane)\n          This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure with PlaceHolderVars in extended-statistics code",
      "description": "Avoid failure with PlaceHolderVars in extended-statistics code (Tom Lane)\n          Use of dependency-type extended statistics could fail with “PlaceHolderVar found where not expected”.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incorrect tests for whether a qual clause applied to a subquery can be transformed into a window aggregate “run condition” within the subquery",
      "description": "Fix incorrect tests for whether a qual clause applied to a subquery can be transformed into a window aggregate “run condition” within the subquery (David Rowley)\n          A SubPlan within such a clause would cause assertion failures or incorrect answers, as would some other unusual cases.",
      "sinceVersion": "15.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Fix oversights in execution of nested `ARRAY[]` constructs (Alexander Lakhin, Tom Lane)\n          Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "sinceVersion": "15.3",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Prevent crash when updating a field within an array-of-domain-over-composite-type column",
      "description": "Prevent crash when updating a field within an array-of-domain-over-composite-type column (Dmitry Dolgov)",
      "sinceVersion": "15.3",
      "contributor": "Dmitry Dolgov"
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Fix partition pruning logic for partitioning on boolean columns (David Rowley)\n          Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "sinceVersion": "15.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "Fix race condition in per-batch cleanup during parallel hash join (Thomas Munro, Melanie Plageman)\n          A crash was possible given unlucky timing and parallel_leader_participation = `off` (which is not the default).",
      "sinceVersion": "15.3",
      "contributor": "Thomas Munro, Melanie Plageman"
    },
    {
      "title": "Recalculate `GENERATED` columns after an EvalPlanQual check",
      "description": "Recalculate `GENERATED` columns after an EvalPlanQual check (Tom Lane)\n          In `READ COMMITTED` isolation mode, the effects of a row update might need to get reapplied to a newer version of the row than the query found originally. If so, we need to recompute any `GENERATED` columns, in case they depend on columns that were changed by the concurrent update.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak in Memoize plan execution",
      "description": "Fix memory leak in Memoize plan execution (David Rowley)",
      "sinceVersion": "15.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix buffer refcount leak when using batched inserts for a foreign table included in a partitioned tree",
      "description": "Fix buffer refcount leak when using batched inserts for a foreign table included in a partitioned tree (Alexander Pyhalov)",
      "sinceVersion": "15.3",
      "contributor": "Alexander Pyhalov"
    },
    {
      "title": "Restore support for sub-millisecond vacuum_cost_delay settings",
      "description": "Restore support for sub-millisecond vacuum_cost_delay settings (Thomas Munro)",
      "sinceVersion": "15.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero",
      "description": "Don't balance vacuum cost delay when a table has a per-relation vacuum_cost_delay setting of zero (Masahiko Sawada)\n          Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation vacuum_cost_delay setting, but this was done only for positive settings, not zero.",
      "sinceVersion": "15.3",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates",
      "description": "Repair rare failure of MULTIEXPR_SUBLINK subplans in partitioned updates (Andres Freund, Tom Lane)\n          Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "sinceVersion": "15.3",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule (Dean Rasheed)\n          Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "sinceVersion": "15.3",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Support references to `OLD` and `NEW` within subqueries in rule actions (Dean Rasheed, Tom Lane)\n          Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "sinceVersion": "15.3",
      "contributor": "Dean Rasheed, Tom Lane"
    },
    {
      "title": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table",
      "description": "When decompiling a rule or SQL function body containing INSERT/UPDATE/DELETE within WITH, take care to print the correct alias for the target table (Tom Lane)",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin (Shi Yu)\n          Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache_callback_list slots” error.",
      "sinceVersion": "15.3",
      "contributor": "Shi Yu"
    },
    {
      "title": "Avoid unnecessary calls to custom validators for index operator class options",
      "description": "Avoid unnecessary calls to custom validators for index operator class options (Alexander Korotkov)\n          This change fixes some cases where an unexpected error was thrown.",
      "sinceVersion": "15.3",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Avoid useless work while scanning a multi-column BRIN index with multiple scan keys",
      "description": "Avoid useless work while scanning a multi-column BRIN index with multiple scan keys (Tomas Vondra)\n          The existing code effectively considered only the last scan key while deciding whether a range matched, thus usually scanning more of the index than it needed to.",
      "sinceVersion": "15.3",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix netmask handling in BRIN inet_minmax_multi_ops opclass",
      "description": "Fix netmask handling in BRIN inet_minmax_multi_ops opclass (Tomas Vondra)\n          This error triggered an assertion failure in assert-enabled builds, but is mostly harmless in production builds.",
      "sinceVersion": "15.3",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "Fix dereference of dangling pointer during buffering build of a GiST index (Alexander Lakhin)\n          This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "sinceVersion": "15.3",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Ignore dropped columns and generated columns during logical replication of an update or delete action",
      "description": "Ignore dropped columns and generated columns during logical replication of an update or delete action (Onder Kalaci, Shi Yu)\n          Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "sinceVersion": "15.3",
      "contributor": "Onder Kalaci, Shi Yu"
    },
    {
      "title": "Correct the name of the wait event for SLRU buffer I/O for commit timestamps",
      "description": "Correct the name of the wait event for SLRU buffer I/O for commit timestamps (Alexander Lakhin)\n          This wait event is named `CommitTsBuffer` according to the documentation, but the code had it as `CommitTSBuffer`. Change the code to match the documentation, as that way is more consistent with the naming of related wait events.",
      "sinceVersion": "15.3",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Re-activate reporting of wait event `SLRUFlushSync`",
      "description": "Re-activate reporting of wait event `SLRUFlushSync` (Thomas Munro)\n          Reporting of this type of wait was accidentally removed in code refactoring.",
      "sinceVersion": "15.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid possible underflow when calculating how many WAL segments to keep",
      "description": "Avoid possible underflow when calculating how many WAL segments to keep (Kyotaro Horiguchi)\n          This could result in not honoring wal_keep_size accurately.",
      "sinceVersion": "15.3",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Disable startup progress reporting overhead in standby mode",
      "description": "Disable startup progress reporting overhead in standby mode (Bharath Rupireddy)\n          In standby mode, we don't actually report progress of recovery, but we were doing work to track it anyway.",
      "sinceVersion": "15.3",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding (Jacob Champion, Heikki Linnakangas)\n          This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "sinceVersion": "15.3",
      "contributor": "Jacob Champion, Heikki Linnakangas"
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "Avoid race condition with process ID tracking on Windows (Thomas Munro)\n          The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "sinceVersion": "15.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix `list_copy_head",
      "description": "Fix `list_copy_head()()` to work correctly on an empty List (David Rowley)\n          This case is not known to be reached by any core PostgreSQL code, but extensions might rely on it working.",
      "sinceVersion": "15.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Add missing cases to `SPI_result_code_string",
      "description": "Add missing cases to `SPI_result_code_string()()` (Dean Rasheed)",
      "sinceVersion": "15.3",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc",
      "description": "Fix erroneous Valgrind markings in `AllocSetRealloc()()` (Karina Litskevich)\n          In the unusual case where the size of a large (&gt;8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "sinceVersion": "15.3",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message",
      "description": "Avoid assertion failure when decoding a transactional logical replication message (Tomas Vondra)",
      "sinceVersion": "15.3",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "Avoid locale sensitivity when processing regular expression escapes (Jeff Davis)\n          A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "sinceVersion": "15.3",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range",
      "description": "Avoid trying to write an empty WAL record in `log_newpage_range()()` when the last few pages in the specified range are empty (Matthias van de Meent)\n          It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "sinceVersion": "15.3",
      "contributor": "Matthias van de Meent"
    },
    {
      "title": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions",
      "description": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions (Ajit Awekar, Tom Lane)",
      "sinceVersion": "15.3",
      "contributor": "Ajit Awekar, Tom Lane"
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays (Tom Lane)\n          plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays (Tom Lane)\n          plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Fix unwinding of exception stack in plpython (Xing Guo)\n          Some rare failure cases could return without cleaning up the PG_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "sinceVersion": "15.3",
      "contributor": "Xing Guo"
    },
    {
      "title": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll",
      "description": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll()()` (Michael Paquier)\n          With gssencmode set to `require`, the connection was not marked dead after a GSS initialization failure. Make it fail immediately, as the equivalent case for TLS encryption has long done.",
      "sinceVersion": "15.3",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the -C ORACLE option",
      "description": "Fix possible data corruption in ecpg programs built with the -C ORACLE option (Kyotaro Horiguchi)\n          When `ecpg_get_data()()` is called with varcharsize set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "sinceVersion": "15.3",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Fix pg_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully (Tom Lane)\n          Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the --load-via-partition-root option; but since there is very little chance of success without that, teach pg_dump to apply it automatically to such tables.\n          Also, fix pg_restore to not try to TRUNCATE target tables before restoring into them when --load-via-partition-root mode is used. This avoids a hazard of deadlocks and lost data.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Correctly detect non-seekable files on Windows",
      "description": "Correctly detect non-seekable files on Windows (Juan José Santamaría Flecha, Michael Paquier, Daniel Watzinger)\n          This bug led to misbehavior when pg_dump writes to a pipe or pg_restore reads from one.",
      "sinceVersion": "15.3",
      "contributor": "Juan José Santamaría Flecha, Michael Paquier, Daniel Watzinger"
    },
    {
      "title": "In pgbench's “prepared” mode, prepare all the commands in a pipeline before starting the pipeline",
      "description": "In pgbench's “prepared” mode, prepare all the commands in a pipeline before starting the pipeline (Álvaro Herrera)\n          This avoids a failure when a pgbench script tries to start a serializable transaction inside a pipeline.",
      "sinceVersion": "15.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "In contrib/amcheck's heap checking code, deal correctly with tuples having zero xmin or xmax",
      "description": "In contrib/amcheck's heap checking code, deal correctly with tuples having zero xmin or xmax (Robert Haas)",
      "sinceVersion": "15.3",
      "contributor": "Robert Haas"
    },
    {
      "title": "In contrib/amcheck, deal sanely with xids that appear to be before epoch zero",
      "description": "In contrib/amcheck, deal sanely with xids that appear to be before epoch zero (Andres Freund)\n          In cases of corruption we might see a wrapped-around 32-bit xid that appears to be before the first xid epoch. Promoting such a value to 64-bit form produced a value far in the future, resulting in wrong reports. Return FirstNormalFullTransactionId in such cases so that things work reasonably sanely.",
      "sinceVersion": "15.3",
      "contributor": "Andres Freund"
    },
    {
      "title": "In contrib/basebackup_to_shell, properly detect failure to open a pipe",
      "description": "In contrib/basebackup_to_shell, properly detect failure to open a pipe (Robert Haas)",
      "sinceVersion": "15.3",
      "contributor": "Robert Haas"
    },
    {
      "title": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "In contrib/hstore_plpython, avoid crashing if the Python value to be transformed isn't a mapping (Dmitry Dolgov, Tom Lane)\n          This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "sinceVersion": "15.3",
      "contributor": "Dmitry Dolgov, Tom Lane"
    },
    {
      "title": "Require the `siglen` option of a GiST index on an ltree column, if specified, to be a multiple of 4",
      "description": "Require the `siglen` option of a GiST index on an ltree column, if specified, to be a multiple of 4 (Alexander Korotkov)\n          Other values result in misaligned accesses to index content, which is harmless on Intel-compatible hardware but can cause a crash on some other architectures.",
      "sinceVersion": "15.3",
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "In contrib/pageinspect, add defenses against incorrect input for the `gist_page_items",
      "description": "In contrib/pageinspect, add defenses against incorrect input for the `gist_page_items()()` function (Dmitry Koval)",
      "sinceVersion": "15.3",
      "contributor": "Dmitry Koval"
    },
    {
      "title": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression",
      "description": "Fix misbehavior in contrib/pg_trgm with an unsatisfiable regular expression (Tom Lane)\n          A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of escape sequences in contrib/postgres_fdw's application_name parameter",
      "description": "Fix handling of escape sequences in contrib/postgres_fdw's application_name parameter (Kyotaro Horiguchi, Michael Paquier)\n          The code to expand these could fail if executed in a background process, as for example during auto-analyze of a foreign table.",
      "sinceVersion": "15.3",
      "contributor": "Kyotaro Horiguchi, Michael Paquier"
    },
    {
      "title": "In contrib/pg_walinspect, limit memory usage of `pg_get_wal_records_info",
      "description": "In contrib/pg_walinspect, limit memory usage of `pg_get_wal_records_info()()` (Bharath Rupireddy)",
      "sinceVersion": "15.3",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip",
      "description": "Use the --strip-unneeded option when stripping static libraries with GNU-compatible strip (Tom Lane)\n          Previously, `make install-strip` used the -x option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "sinceVersion": "15.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it (Aleksander Alekseev, Peter Eisentraut, Tom Lane)\n          It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's --nonet option to the build recipes.",
      "sinceVersion": "15.3",
      "contributor": "Aleksander Alekseev, Peter Eisentraut, Tom Lane"
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory",
      "description": "When running TAP tests in PGXS builds, use a saner location for the temporary portlock directory (Peter Eisentraut)\n          Place it under tmp_check in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "sinceVersion": "15.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.\n          When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "sinceVersion": "15.3",
      "contributor": null
    },
    {
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign (Noah Misch)\n          This restriction guards against SQL-injection hazards for trusted extensions.\n          The PostgreSQL Project thanks Micah Gates, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "sinceVersion": "15.4",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix confusion between empty",
      "description": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries (Tomas Vondra)\n          Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n          This fix will not in itself correct faulty BRIN entries. It's recommended to REINDEX any BRIN indexes that may be used to search for nulls.",
      "sinceVersion": "15.4",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted",
      "description": "Avoid leaving a corrupted database behind when DROP DATABASE is interrupted (Andres Freund)\n          If DROP DATABASE was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its pg_database row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another DROP DATABASE.",
      "sinceVersion": "15.4",
      "contributor": "Andres Freund"
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "Ensure that partitioned indexes are correctly marked as valid or not at creation (Michael Paquier)\n          If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "sinceVersion": "15.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION",
      "description": "Ignore invalid child indexes when matching partitioned indexes to child indexes during ALTER TABLE ATTACH PARTITION (Michael Paquier)\n          Such an index will now be ignored, and a new child index created instead.",
      "sinceVersion": "15.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached (Michael Paquier)\n          The update of the index's pg_index entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "sinceVersion": "15.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema",
      "description": "Fix ALTER EXTENSION SET SCHEMA to complain if the extension contains any objects outside the extension's schema (Michael Paquier, Heikki Linnakangas)\n          Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "sinceVersion": "15.4",
      "contributor": "Michael Paquier, Heikki Linnakangas"
    },
    {
      "title": "Fix tracking of tables' access method dependencies",
      "description": "Fix tracking of tables' access method dependencies (Michael Paquier)\n          ALTER TABLE ... SET ACCESS METHOD failed to update relevant pg_depend entries when changing a table's access method. When using non-built-in access methods, this creates a risk that an access method could be dropped even though tables still depend on it. This fix corrects the logic in ALTER TABLE, but it will not adjust any already-missing pg_depend entries.",
      "sinceVersion": "15.4",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "Don't use partial unique indexes for uniqueness proofs in the planner (David Rowley)\n          This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "sinceVersion": "15.4",
      "contributor": "David Rowley"
    },
    {
      "title": "Don't Memoize lateral joins with volatile join conditions",
      "description": "Don't Memoize lateral joins with volatile join conditions (Richard Guo)\n          Applying Memoize to a sub-plan that contains volatile filter conditions is likely to lead to wrong answers. The check to avoid doing this missed some cases that can arise when using `LATERAL`.",
      "sinceVersion": "15.4",
      "contributor": "Richard Guo"
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses (Etsuro Fujita)\n          The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "sinceVersion": "15.4",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode (Thomas Munro)\n          Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "sinceVersion": "15.4",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix misbehavior of EvalPlanQual checks with inherited or partitioned target tables",
      "description": "Fix misbehavior of EvalPlanQual checks with inherited or partitioned target tables (Tom Lane)\n          This oversight could lead to update or delete actions in `READ COMMITTED` isolation mode getting performed when they should have been skipped because of a conflicting concurrent update.",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop",
      "description": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop (Tom Lane)\n          When rescanning the join after the values of such Params have changed, we must rebuild the hash table, but neglected to do so. This could result in missing join output rows.",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "Fix intermittent failures when trying to update a field of a composite column (Tom Lane)\n          If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent query-lifespan memory leaks in some UPDATE queries with triggers",
      "description": "Prevent query-lifespan memory leaks in some UPDATE queries with triggers (Tomas Vondra)",
      "sinceVersion": "15.4",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Prevent query-lifespan memory leaks when an Incremental Sort plan node is rescanned",
      "description": "Prevent query-lifespan memory leaks when an Incremental Sort plan node is rescanned (James Coleman, Laurenz Albe, Tom Lane)",
      "sinceVersion": "15.4",
      "contributor": "James Coleman, Laurenz Albe, Tom Lane"
    },
    {
      "title": "Accept fractional seconds in the input to jsonpath's `datetime",
      "description": "Accept fractional seconds in the input to jsonpath's `datetime()()` method (Tom Lane)",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns",
      "description": "Prevent stack-overflow crashes with very complex text search patterns (Tom Lane)",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf",
      "description": "Allow tokens up to 10240 bytes long in pg_hba.conf and pg_ident.conf (Tom Lane)\n          The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that all existing placeholders are checked for matches when an extension declares its GUC prefix to be reserved",
      "description": "Ensure that all existing placeholders are checked for matches when an extension declares its GUC prefix to be reserved (Karina Litskevich, Ekaterina Sokolova)\n          Faulty loop logic could cause some entries to be skipped.",
      "sinceVersion": "15.4",
      "contributor": "Karina Litskevich, Ekaterina Sokolova"
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "Fix mishandling of C++ out-of-memory conditions (Heikki Linnakangas)\n          If JIT is in use, running out of memory in a C++ `new()` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "sinceVersion": "15.4",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix rare null-pointer crash in plancache.c",
      "description": "Fix rare null-pointer crash in plancache.c (Tom Lane)",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid leaking a stats entry for a subscription when it is dropped",
      "description": "Avoid leaking a stats entry for a subscription when it is dropped (Masahiko Sawada)",
      "sinceVersion": "15.4",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space (Dongming Liu)\n          Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "sinceVersion": "15.4",
      "contributor": "Dongming Liu"
    },
    {
      "title": "Allow VACUUM to continue after detecting certain types of b-tree index corruption",
      "description": "Allow VACUUM to continue after detecting certain types of b-tree index corruption (Peter Geoghegan)\n          If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of REINDEX will fix the broken index, but preventing VACUUM from completing until that is done risks making matters far worse.",
      "sinceVersion": "15.4",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid",
      "description": "Ensure that WrapLimitsVacuumLock is released after VACUUM detects invalid data in pg_database.datfrozenxid or pg_database.datminmxid (Andres Freund)\n          Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "sinceVersion": "15.4",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "Avoid double replay of prepared transactions during crash recovery (suyu.cmj, Michael Paquier)\n          After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "sinceVersion": "15.4",
      "contributor": "suyu.cmj, Michael Paquier"
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync",
      "description": "Ensure that a newly created, but still empty table is `fsync()`'ed at the next checkpoint (Heikki Linnakangas)\n          Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "sinceVersion": "15.4",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "Ensure that creation of the init fork of an unlogged index is WAL-logged (Heikki Linnakangas)\n          While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "sinceVersion": "15.4",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Silence bogus “missing contrecord” errors",
      "description": "Silence bogus “missing contrecord” errors (Thomas Munro)\n          Treat this case as plain end-of-WAL to avoid logging inaccurate complaints from pg_waldump and walsender.",
      "sinceVersion": "15.4",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix overly strict assertion in jsonpath code",
      "description": "Fix overly strict assertion in jsonpath code (David Rowley)\n          This assertion failed if a query applied the `.type()` operator to a `like_regex` result. There was no bug in non-assert builds.",
      "sinceVersion": "15.4",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction",
      "description": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction (Tom Lane)",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid assertion failure when the stats_fetch_consistency setting is changed intra-transaction",
      "description": "Avoid assertion failure when the stats_fetch_consistency setting is changed intra-transaction (Kyotaro Horiguchi)",
      "sinceVersion": "15.4",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Fix contrib/fuzzystrmatch's Soundex `difference",
      "description": "Fix contrib/fuzzystrmatch's Soundex `difference()()` function to handle empty input sanely (Alexander Lakhin, Tom Lane)\n          An input string containing no alphabetic characters resulted in unpredictable output.",
      "sinceVersion": "15.4",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Tighten whitespace checks in contrib/hstore input",
      "description": "Tighten whitespace checks in contrib/hstore input (Evan Jones)\n          In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "sinceVersion": "15.4",
      "contributor": "Evan Jones"
    },
    {
      "title": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass",
      "description": "Disallow oversize input arrays with contrib/intarray's `gist__int_ops` index opclass (Ankit Kumar Pandey, Alexander Lakhin)\n          Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "sinceVersion": "15.4",
      "contributor": "Ankit Kumar Pandey, Alexander Lakhin"
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in contrib/intarray",
      "description": "Avoid useless double decompression of GiST index entries in contrib/intarray (Konstantin Knizhnik, Matthias van de Meent, Tom Lane)",
      "sinceVersion": "15.4",
      "contributor": "Konstantin Knizhnik, Matthias van de Meent, Tom Lane"
    },
    {
      "title": "Fix contrib/pageinspect's `gist_page_items",
      "description": "Fix contrib/pageinspect's `gist_page_items()()` function to work when there are included index columns (Alexander Lakhin, Michael Paquier)\n          Previously, if the index has included columns, `gist_page_items()()` would fail to display those values on index leaf pages, or crash outright on non-leaf pages.",
      "sinceVersion": "15.4",
      "contributor": "Alexander Lakhin, Michael Paquier"
    },
    {
      "title": "In psql, ignore the PSQL_WATCH_PAGER environment variable when stdin/stdout are not a terminal",
      "description": "In psql, ignore the PSQL_WATCH_PAGER environment variable when stdin/stdout are not a terminal (Tom Lane)\n          This corresponds to the treatment of PSQL_PAGER in commands besides \\watch.",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dump to correctly handle new-style SQL-language functions whose bodies require parse-time dependencies on unique indexes",
      "description": "Fix pg_dump to correctly handle new-style SQL-language functions whose bodies require parse-time dependencies on unique indexes (Tom Lane)\n          Such cases can arise from `GROUP BY` and `ON CONFLICT` clauses, for example. The function must then be postponed until after the unique index in the dump output, but pg_dump did not do that and instead printed a warning about “could not resolve dependency loop”.",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve pg_dump's display of details about dependency-loop problems",
      "description": "Improve pg_dump's display of details about dependency-loop problems (Tom Lane)",
      "sinceVersion": "15.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash in pgbench with an empty pipeline and prepared mode",
      "description": "Avoid crash in pgbench with an empty pipeline and prepared mode (Álvaro Herrera)",
      "sinceVersion": "15.4",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries",
      "description": "Ensure that pg_index.indisreplident is kept up-to-date in relation cache entries (Shruthi Gowda)\n          This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "sinceVersion": "15.4",
      "contributor": "Shruthi Gowda"
    },
    {
      "title": "Fix make_etags script to work with non-Exuberant ctags",
      "description": "Fix make_etags script to work with non-Exuberant ctags (Masahiko Sawada)",
      "sinceVersion": "15.4",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions",
      "description": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions (Tom Lane)\n          This error led to a text-type value being interpreted as an unknown-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the text value.\n          The PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "sinceVersion": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix misbehavior during recursive page split in GiST index build (Heikki Linnakangas)\n          Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "sinceVersion": "15.5",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Prevent de-duplication of btree index entries for interval columns",
      "description": "Prevent de-duplication of btree index entries for interval columns (Noah Misch)\n          There are interval values that are distinguishable but compare equal, for example `24:00:00` and `1 day`. This breaks assumptions made by btree de-duplication, so interval columns need to be excluded from de-duplication. This oversight can cause incorrect results from index-only scans. Moreover, after updating amcheck will report an error for almost all such indexes. Users should reindex any btree indexes on interval columns.",
      "sinceVersion": "15.5",
      "contributor": "Noah Misch"
    },
    {
      "title": "Process date values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "Process date values more sanely in BRIN `datetime_minmax_multi_ops` indexes (Tomas Vondra)\n          The distance calculation for dates was backward, causing poor decisions about which entries to merge. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on date columns is advisable.",
      "sinceVersion": "15.5",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Process large timestamp and timestamptz values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "Process large timestamp and timestamptz values more sanely in BRIN `datetime_minmax_multi_ops` indexes (Tomas Vondra)\n          Infinities were mistakenly treated as having distance zero rather than a large distance from other values, causing poor decisions about which entries to merge. Also, finite-but-very-large values (near the endpoints of the representable timestamp range) could result in internal overflows, again causing poor decisions. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on timestamp and timestamptz columns is advisable if the column contains, or has contained, infinities or large finite values.",
      "sinceVersion": "15.5",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid calculation overflows in BRIN `interval_minmax_multi_ops` indexes with extreme interval values",
      "description": "Avoid calculation overflows in BRIN `interval_minmax_multi_ops` indexes with extreme interval values (Tomas Vondra)\n          This bug might have caused unexpected failures while trying to insert large interval values into such an index.",
      "sinceVersion": "15.5",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys (David Rowley)\n          Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "sinceVersion": "15.5",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix inconsistent rechecking of concurrently-updated rows during MERGE",
      "description": "Fix inconsistent rechecking of concurrently-updated rows during MERGE (Dean Rasheed)\n          In `READ COMMITTED` mode, an update that finds that its target row was just updated by a concurrent transaction will recheck the query's `WHERE` conditions on the updated row. MERGE failed to ensure that the proper rows of other joined tables were used during this recheck, possibly resulting in incorrect decisions about whether the newly-updated row should be updated again by MERGE.",
      "sinceVersion": "15.5",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Correctly identify the target table in an inherited UPDATE/DELETE/MERGE even when the parent table is excluded by constraints",
      "description": "Correctly identify the target table in an inherited UPDATE/DELETE/MERGE even when the parent table is excluded by constraints (Amit Langote, Tom Lane)\n          If the initially-named table is excluded by constraints, but not all its inheritance descendants are, the first non-excluded descendant was identified as the primary target table. This would lead to firing statement-level triggers associated with that table, rather than the initially-named table as should happen. In v16, the same oversight could also lead to “invalid perminfoindex 0 in RTE with relid NNNN” errors.",
      "sinceVersion": "15.5",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses (Peter Geoghegan)\n          When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "sinceVersion": "15.5",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix intra-query memory leak in Memoize execution",
      "description": "Fix intra-query memory leak in Memoize execution (Orlov Aleksej, David Rowley)",
      "sinceVersion": "15.5",
      "contributor": "Orlov Aleksej, David Rowley"
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows",
      "description": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane)",
      "sinceVersion": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema",
      "description": "Don't crash if `cursor_to_xmlschema()()` is applied to a non-data-returning Portal (Boyu Yang)",
      "sinceVersion": "15.5",
      "contributor": "Boyu Yang"
    },
    {
      "title": "Throw the intended error if `pgrowlocks",
      "description": "Throw the intended error if `pgrowlocks()()` is applied to a partitioned table (David Rowley)\n          Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "sinceVersion": "15.5",
      "contributor": "David Rowley"
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Handle invalid indexes more cleanly in assorted SQL functions (Noah Misch)\n          Report an error if `pgstatindex()()`, `pgstatginindex()()`, `pgstathashindex()()`, or `pgstattuple()()` is applied to an invalid index. If `brin_desummarize_range()()`, `brin_summarize_new_values()()`, `brin_summarize_range()()`, or `gin_clean_pending_list()()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed CREATE INDEX had left behind.",
      "sinceVersion": "15.5",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix `pg_stat_reset_single_table_counters",
      "description": "Fix `pg_stat_reset_single_table_counters()()` to do the right thing for a shared catalog (Masahiro Ikeda)\n          Previously the reset would be ineffective.",
      "sinceVersion": "15.5",
      "contributor": "Masahiro Ikeda"
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector",
      "description": "Avoid premature memory allocation failure with long inputs to `to_tsvector()()` (Tom Lane)",
      "sinceVersion": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix over-allocation of the constructed tsvector in `tsvectorrecv",
      "description": "Fix over-allocation of the constructed tsvector in `tsvectorrecv()()` (Denis Erokhin)\n          If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished tsvector. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "sinceVersion": "15.5",
      "contributor": "Denis Erokhin"
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit",
      "description": "Fix incorrect coding in `gtsvector_picksplit()()` (Alexander Lakhin)\n          This could lead to poor page-split decisions in GiST indexes on tsvector columns.",
      "sinceVersion": "15.5",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Improve checks for corrupt PGLZ compressed data",
      "description": "Improve checks for corrupt PGLZ compressed data (Flavien Guedez)",
      "sinceVersion": "15.5",
      "contributor": "Flavien Guedez"
    },
    {
      "title": "In COPY FROM, fail cleanly when an unsupported encoding conversion is needed",
      "description": "In COPY FROM, fail cleanly when an unsupported encoding conversion is needed (Tom Lane)\n          Recent refactoring accidentally removed the intended error check for this, such that it ended in “cache lookup failed for function 0” instead of a useful error message.",
      "sinceVersion": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value",
      "description": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value (Xing Guo, Aleksander Alekseev, Tom Lane)\n          No built-in parameter fits this description, but an extension could define such a parameter.",
      "sinceVersion": "15.5",
      "contributor": "Xing Guo, Aleksander Alekseev, Tom Lane"
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables (Tom Lane)\n          This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "sinceVersion": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system",
      "description": "Avoid improper response to shutdown signals in child processes just forked by `system()()` (Nathan Bossart)\n          This fix avoids a race condition in which a child process that has been forked off by `system()()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "sinceVersion": "15.5",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Cope with torn reads of pg_control in frontend programs",
      "description": "Cope with torn reads of pg_control in frontend programs (Thomas Munro)\n          On some file systems, reading pg_control may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "sinceVersion": "15.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid torn reads of pg_control in relevant SQL functions",
      "description": "Avoid torn reads of pg_control in relevant SQL functions (Thomas Munro)\n          Acquire the appropriate lock before reading pg_control, to ensure we get a consistent view of that file.",
      "sinceVersion": "15.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "Avoid integer overflow when computing size of backend activity string array (Jakub Wartak)\n          On 64-bit machines we will allow values of track_activity_query_size large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "sinceVersion": "15.5",
      "contributor": "Jakub Wartak"
    },
    {
      "title": "Fix briefly showing inconsistent progress statistics for ANALYZE on inherited tables",
      "description": "Fix briefly showing inconsistent progress statistics for ANALYZE on inherited tables (Heikki Linnakangas)\n          The block-level counters should be reset to zero at the same time we update the current-relation field.",
      "sinceVersion": "15.5",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix the background writer to report any WAL writes it makes to the statistics counters",
      "description": "Fix the background writer to report any WAL writes it makes to the statistics counters (Nazir Bilal Yavuz)",
      "sinceVersion": "15.5",
      "contributor": "Nazir Bilal Yavuz"
    },
    {
      "title": "Fix confusion about forced-flush behavior in `pgstat_report_wal",
      "description": "Fix confusion about forced-flush behavior in `pgstat_report_wal()()` (Ryoga Yoshida, Michael Paquier)\n          This could result in some statistics about WAL I/O being forgotten in a shutdown.",
      "sinceVersion": "15.5",
      "contributor": "Ryoga Yoshida, Michael Paquier"
    },
    {
      "title": "Track the dependencies of cached CALL statements, and re-plan them when needed",
      "description": "Track the dependencies of cached CALL statements, and re-plan them when needed (Tom Lane)\n          DDL commands, such as replacement of a function that has been inlined into a CALL argument, can create the need to re-plan a CALL that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "sinceVersion": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid a possible pfree-a-NULL-pointer crash after an error in OpenSSL connection setup",
      "description": "Avoid a possible pfree-a-NULL-pointer crash after an error in OpenSSL connection setup (Sergey Shinderuk)",
      "sinceVersion": "15.5",
      "contributor": "Sergey Shinderuk"
    },
    {
      "title": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels",
      "description": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels (Richard Guo)\n          This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "sinceVersion": "15.5",
      "contributor": "Richard Guo"
    },
    {
      "title": "Track hash function and negator function dependencies of ScalarArrayOpExpr plan nodes",
      "description": "Track hash function and negator function dependencies of ScalarArrayOpExpr plan nodes (David Rowley)\n          In most cases this oversight was harmless, since these functions would be unlikely to disappear while the node's original operator remains present.",
      "sinceVersion": "15.5",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix error-handling bug in RECORD type cache management",
      "description": "Fix error-handling bug in RECORD type cache management (Thomas Munro)\n          An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "sinceVersion": "15.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error",
      "description": "Fix assertion failure when logical decoding is retried in the same session after an error (Hou Zhijie)",
      "sinceVersion": "15.5",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Treat out-of-memory failures as fatal while reading WAL (Michael Paquier)\n          Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "sinceVersion": "15.5",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field",
      "description": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier)",
      "sinceVersion": "15.5",
      "contributor": "Thomas Munro, Michael Paquier"
    },
    {
      "title": "Fix race condition in database dropping that could lead to the autovacuum launcher getting stuck",
      "description": "Fix race condition in database dropping that could lead to the autovacuum launcher getting stuck (Andres Freund, Will Mortensen, Jacob Speidel)\n          The race could lead to a statistics entry for the removed database remaining present, confusing the launcher's selection of which database to process.",
      "sinceVersion": "15.5",
      "contributor": "Andres Freund, Will Mortensen, Jacob Speidel"
    },
    {
      "title": "Fix datatype size confusion in logical tape management",
      "description": "Fix datatype size confusion in logical tape management (Ranier Vilela)\n          Integer overflow was possible on platforms where long is wider than int, although it would take a multiple-terabyte temporary file to cause a problem.",
      "sinceVersion": "15.5",
      "contributor": "Ranier Vilela"
    },
    {
      "title": "Avoid unintended close of syslogger process's stdin",
      "description": "Avoid unintended close of syslogger process's stdin (Heikki Linnakangas)",
      "sinceVersion": "15.5",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis (Tom Lane)\n          Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as SET TRANSACTION ISOLATION LEVEL.",
      "sinceVersion": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Keep by-reference attmissingval values in a long-lived context while they are being used",
      "description": "Keep by-reference attmissingval values in a long-lived context while they are being used (Andrew Dunstan)\n          This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "sinceVersion": "15.5",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Recalculate the effective value of search_path after ALTER ROLE",
      "description": "Recalculate the effective value of search_path after ALTER ROLE (Jeff Davis)\n          This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "sinceVersion": "15.5",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Fix “could not duplicate handle” error occurring on Windows when min_dynamic_shared_memory is set above zero",
      "description": "Fix “could not duplicate handle” error occurring on Windows when min_dynamic_shared_memory is set above zero (Thomas Munro)",
      "sinceVersion": "15.5",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish",
      "description": "Fix order of operations in `GenericXLogFinish()` (Jeff Davis)\n          This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (contrib/bloom does, for example).",
      "sinceVersion": "15.5",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling",
      "description": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin)",
      "sinceVersion": "15.5",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix assertion failure in pg_dump when it's asked to dump the `pg_catalog` schema",
      "description": "Fix assertion failure in pg_dump when it's asked to dump the `pg_catalog` schema (Peter Eisentraut)",
      "sinceVersion": "15.5",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables (Euler Taveira, Tom Lane)\n          Formerly, only the table-level ACL would get restored if both types were present.",
      "sinceVersion": "15.5",
      "contributor": "Euler Taveira, Tom Lane"
    },
    {
      "title": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types",
      "description": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types (Álvaro Herrera)\n          These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "sinceVersion": "15.5",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg_basebackup",
      "description": "Avoid generating invalid temporary slot names in pg_basebackup (Jelte Fennema)\n          This has only been seen to occur when the server connection runs through pgbouncer.",
      "sinceVersion": "15.5",
      "contributor": "Jelte Fennema"
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows",
      "description": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch)",
      "sinceVersion": "15.5",
      "contributor": "Noah Misch"
    },
    {
      "title": "In contrib/amcheck, do not report interrupted page deletion as corruption",
      "description": "In contrib/amcheck, do not report interrupted page deletion as corruption (Noah Misch)\n          This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before VACUUM had cleaned things up.",
      "sinceVersion": "15.5",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed",
      "description": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Dean Rasheed)\n          Such an indexscan failed to return all the entries it should.",
      "sinceVersion": "15.5",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Add support for LLVM 16 and 17",
      "description": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "15.5",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Suppress assorted build-time warnings on recent macOS (Tom Lane)\n          Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the -multiply_defined suppress linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "sinceVersion": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "When building contrib/unaccent's rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set",
      "description": "When building contrib/unaccent's rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set (Japin Li)",
      "sinceVersion": "15.5",
      "contributor": "Japin Li"
    },
    {
      "title": "Remove `PHOT`",
      "description": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list (Tom Lane)\n          Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "sinceVersion": "15.5",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "Fix memory leak when performing JIT inlining (Andres Freund, Daniel Gustafsson)\n          There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "sinceVersion": "15.6",
      "contributor": "Andres Freund, Daniel Gustafsson"
    },
    {
      "title": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes",
      "description": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes (Andres Freund)\n          This fixes O(N^2) behavior when the list of waiters is long. In some use-cases this results in substantial throughput improvements.",
      "sinceVersion": "15.6",
      "contributor": "Andres Freund"
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Avoid generating incorrect partitioned-join plans (Richard Guo)\n          Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "sinceVersion": "15.6",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars (Tom Lane)\n          This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misprocessing of window function run conditions",
      "description": "Fix misprocessing of window function run conditions (Richard Guo)\n          This oversight could lead to “WindowFunc not found in subplan target lists” errors.",
      "sinceVersion": "15.6",
      "contributor": "Richard Guo"
    },
    {
      "title": "Skip inappropriate actions when MERGE causes a cross-partition update",
      "description": "Skip inappropriate actions when MERGE causes a cross-partition update (Dean Rasheed)\n          When executing a `MERGE UPDATE` action on a partitioned table, if the `UPDATE` is turned into a `DELETE` and `INSERT` due to changing a partition key column, skip firing `AFTER UPDATE ROW` triggers, as well as other post-update actions such as RLS checks. These actions would typically fail, which is why a regular `UPDATE` doesn't do them in such cases; `MERGE` shouldn't either.",
      "sinceVersion": "15.6",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Cope with `BEFORE ROW DELETE` triggers in cross-partition MERGE updates",
      "description": "Cope with `BEFORE ROW DELETE` triggers in cross-partition MERGE updates (Dean Rasheed)\n          If such a trigger attempted to prevent the update by returning NULL, MERGE would suffer an error or assertion failure.",
      "sinceVersion": "15.6",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent access to a no-longer-pinned buffer in `BEFORE ROW UPDATE` triggers",
      "description": "Prevent access to a no-longer-pinned buffer in `BEFORE ROW UPDATE` triggers (Alexander Lakhin, Tom Lane)\n          If the tuple being updated had just been updated and moved to another page by another session, there was a narrow window where we would attempt to fetch data from the new tuple version without any pin on its buffer. In principle this could result in garbage data appearing in non-updated columns of the proposed new tuple. The odds of problems in practice seem rather low, however.",
      "sinceVersion": "15.6",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "Avoid requesting an oversize shared-memory area in parallel hash join (Thomas Munro, Andrei Lepikhov, Alexander Korotkov)\n          The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "sinceVersion": "15.6",
      "contributor": "Thomas Munro, Andrei Lepikhov, Alexander Korotkov"
    },
    {
      "title": "Avoid assertion failures in `heap_update",
      "description": "Avoid assertion failures in `heap_update()()` and `heap_delete()()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck (Alexander Lakhin)\n          This error had no impact in non-assert builds.",
      "sinceVersion": "15.6",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix overly tight assertion about false_positive_rate parameter of BRIN bloom operator classes",
      "description": "Fix overly tight assertion about false_positive_rate parameter of BRIN bloom operator classes (Alexander Lakhin)\n          This error had no impact in non-assert builds, either.",
      "sinceVersion": "15.6",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree",
      "description": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree (Tender Wang)\n          If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "sinceVersion": "15.6",
      "contributor": "Tender Wang"
    },
    {
      "title": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands",
      "description": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands (Tender Wang, Michael Paquier)",
      "sinceVersion": "15.6",
      "contributor": "Tender Wang, Michael Paquier"
    },
    {
      "title": "Properly lock the associated table during DROP STATISTICS",
      "description": "Properly lock the associated table during DROP STATISTICS (Tomas Vondra)\n          Failure to acquire the lock could result in “tuple concurrently deleted” errors if the DROP executes concurrently with ANALYZE.",
      "sinceVersion": "15.6",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "Detect that a new catalog cache entry became stale while detoasting its fields (Tom Lane)\n          We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Fix edge-case integer overflow detection bug on some platforms (Dean Rasheed)\n          Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "sinceVersion": "15.6",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp (Tom Lane)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add more checks for overflow in `interval_mul",
      "description": "Add more checks for overflow in `interval_mul()()` and `interval_div()()` (Dean Rasheed)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "15.6",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Ensure cached statistics are discarded after a change to stats_fetch_consistency",
      "description": "Ensure cached statistics are discarded after a change to stats_fetch_consistency (Shinya Kato)\n          In some code paths, it was possible for stale statistics to be returned.",
      "sinceVersion": "15.6",
      "contributor": "Shinya Kato"
    },
    {
      "title": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context (Tom Lane)\n          Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Match collation too when matching an existing index to a new partitioned index (Peter Eisentraut)\n          Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "sinceVersion": "15.6",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid failure if a child index is dropped concurrently with REINDEX INDEX on a partitioned index",
      "description": "Avoid failure if a child index is dropped concurrently with REINDEX INDEX on a partitioned index (Fei Changhong)",
      "sinceVersion": "15.6",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page (Fei Changhong, Heikki Linnakangas)\n          The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "sinceVersion": "15.6",
      "contributor": "Fei Changhong, Heikki Linnakangas"
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "Avoid premature release of buffer pin in GIN index insertion (Tom Lane)\n          If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Avoid failure with partitioned SP-GiST indexes (Tom Lane)\n          Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "Fix ownership change reporting for large objects (Tom Lane)\n          A no-op ALTER LARGE OBJECT OWNER command (that is, one selecting the existing owner) passed the wrong class ID to the PostAlterHook, probably confusing any extension using that hook.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix reporting of I/O timing data in `EXPLAIN",
      "description": "Fix reporting of I/O timing data in `EXPLAIN (BUFFERS)` (Michael Paquier)\n          The numbers labeled as “shared/local” actually refer only to shared buffers, so change that label to “shared”.",
      "sinceVersion": "15.6",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure durability of CREATE DATABASE",
      "description": "Ensure durability of CREATE DATABASE (Noah Misch)\n          If an operating system crash occurred during or shortly after CREATE DATABASE, recovery could fail, or subsequent connections to the new database could fail. If a base backup was taken in that window, similar problems could be observed when trying to use the backup. The symptom would be that the database directory, PG_VERSION file, or pg_filenode.map file was missing or empty.",
      "sinceVersion": "15.6",
      "contributor": "Noah Misch"
    },
    {
      "title": "Add more `LOG` messages when starting and ending recovery from a backup",
      "description": "Add more `LOG` messages when starting and ending recovery from a backup (Andres Freund)\n          This change provides additional information in the postmaster log that may be useful for diagnosing recovery problems.",
      "sinceVersion": "15.6",
      "contributor": "Andres Freund"
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions (Fei Changhong)\n          The startedInRecovery flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "sinceVersion": "15.6",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Fix integer overflow hazard in checking whether a record will fit into the WAL decoding buffer",
      "description": "Fix integer overflow hazard in checking whether a record will fit into the WAL decoding buffer (Thomas Munro)\n          This bug appears to be only latent except when running a 32-bit PostgreSQL build on a 64-bit platform.",
      "sinceVersion": "15.6",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription (Shlok Kyal)\n          One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "sinceVersion": "15.6",
      "contributor": "Shlok Kyal"
    },
    {
      "title": "Ensure that column default values are correctly transmitted by the pgoutput logical replication plugin",
      "description": "Ensure that column default values are correctly transmitted by the pgoutput logical replication plugin (Nikhil Benesch)\n          ALTER TABLE ADD COLUMN with a constant default value for the new column avoids rewriting existing tuples, instead expecting that reading code will insert the correct default into a tuple that lacks that column. If replication was subsequently initiated on the table, pgoutput would transmit NULL instead of the correct default for such a column, causing incorrect replication on the subscriber.",
      "sinceVersion": "15.6",
      "contributor": "Nikhil Benesch"
    },
    {
      "title": "Fix failure of logical replication's initial sync for a table with no columns",
      "description": "Fix failure of logical replication's initial sync for a table with no columns (Vignesh C)\n          This case generated an improperly-formatted COPY command.",
      "sinceVersion": "15.6",
      "contributor": "Vignesh C"
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "Prevent examining system catalogs with the wrong snapshot during logical decoding (Fei Changhong)\n          If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups. This fix deals with the case that a top-level transaction is already marked as containing catalog changes, but its subtransaction(s) are not.",
      "sinceVersion": "15.6",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "Return the correct status code when a new client disconnects without responding to the server's password challenge (Liu Lang, Tom Lane)\n          In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use ClientAuthentication_hook.",
      "sinceVersion": "15.6",
      "contributor": "Liu Lang, Tom Lane"
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Fix incompatibility with OpenSSL 3.2 (Tristan Partin, Bo Andreson)\n          Use the BIO “app_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "sinceVersion": "15.6",
      "contributor": "Tristan Partin, Bo Andreson"
    },
    {
      "title": "Be more wary about OpenSSL not setting errno on error",
      "description": "Be more wary about OpenSSL not setting errno on error (Tom Lane)\n          If errno isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix file descriptor leakage when a foreign data wrapper's `ForeignAsyncRequest",
      "description": "Fix file descriptor leakage when a foreign data wrapper's `ForeignAsyncRequest()` function fails (Heikki Linnakangas)",
      "sinceVersion": "15.6",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR`",
      "description": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov)",
      "sinceVersion": "15.6",
      "contributor": "Alexander Kuzmenkov"
    },
    {
      "title": "In PL/pgSQL, support SQL commands that are CREATE FUNCTION/CREATE PROCEDURE with SQL-standard bodies",
      "description": "In PL/pgSQL, support SQL commands that are CREATE FUNCTION/CREATE PROCEDURE with SQL-standard bodies (Tom Lane)\n          Previously, such cases failed with parsing errors due to the semicolon(s) appearing in the function body.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix libpq's handling of errors in pipelines",
      "description": "Fix libpq's handling of errors in pipelines (Álvaro Herrera)\n          The pipeline state could get out of sync if an error is returned for reasons other than a query problem (for example, if the connection is lost). Potentially this would lead to a busy-loop in the calling application.",
      "sinceVersion": "15.6",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Make libpq's `PQsendFlushRequest",
      "description": "Make libpq's `PQsendFlushRequest()()` function flush the client output buffer under the same rules as other `PQsend` functions (Jelte Fennema-Nio)\n          In pipeline mode, it may still be necessary to call `PQflush()()` as well; but this change removes some inconsistency.",
      "sinceVersion": "15.6",
      "contributor": "Jelte Fennema-Nio"
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads",
      "description": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier)",
      "sinceVersion": "15.6",
      "contributor": "Willi Mann, Michael Paquier"
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "Fix timing-dependent failure in GSSAPI data transmission (Tom Lane)\n          When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped (Rian McGuire, Tom Lane)\n          This conforms to the behavior for other dependent objects such as indexes.",
      "sinceVersion": "15.6",
      "contributor": "Rian McGuire, Tom Lane"
    },
    {
      "title": "Make it an error for a pgbench script to end with an open pipeline",
      "description": "Make it an error for a pgbench script to end with an open pipeline (Anthonin Bonnefoy)\n          Previously, pgbench would behave oddly if a \\startpipeline command lacked a matching \\endpipeline. This seems like a scripting mistake rather than a case that pgbench needs to handle nicely, so throw an error.",
      "sinceVersion": "15.6",
      "contributor": "Anthonin Bonnefoy"
    },
    {
      "title": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index",
      "description": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane)",
      "sinceVersion": "15.6",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Report a better error when contrib/pageinspect's `hash_bitmap_info",
      "description": "Report a better error when contrib/pageinspect's `hash_bitmap_info()()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier)",
      "sinceVersion": "15.6",
      "contributor": "Alexander Lakhin, Michael Paquier"
    },
    {
      "title": "Report a better error when contrib/pgstattuple's `pgstathashindex",
      "description": "Report a better error when contrib/pgstattuple's `pgstathashindex()()` function is applied to a partitioned hash index (Alexander Lakhin)",
      "sinceVersion": "15.6",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress",
      "description": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress (Kyotaro Horiguchi)\n          When launching a child process via cmd.exe, pass the /D flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "sinceVersion": "15.6",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Move `is_valid_ascii",
      "description": "Move `is_valid_ascii()()` from mb/pg_wchar.h to utils/ascii.h (Jubilee Young)\n          This change avoids the need to include &lt;simd.h&gt; in pg_wchar.h, which was causing problems for some third-party code.",
      "sinceVersion": "15.6",
      "contributor": "Jubilee Young"
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later",
      "description": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane)",
      "sinceVersion": "15.6",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix compilation failure of `WAL_DEBUG` code on Windows",
      "description": "Fix compilation failure of `WAL_DEBUG` code on Windows (Bharath Rupireddy)",
      "sinceVersion": "15.6",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Suppress compiler warnings from Python's header files (Peter Eisentraut, Tom Lane)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "15.6",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18",
      "description": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro)",
      "sinceVersion": "15.6",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon.",
      "sinceVersion": "15.6",
      "contributor": null
    },
    {
      "title": "Make ALTER TABLE ... ADD COLUMN create identity/serial sequences with the same persistence as their owning tables",
      "description": "Make ALTER TABLE ... ADD COLUMN create identity/serial sequences with the same persistence as their owning tables (Peter Eisentraut)\n          CREATE UNLOGGED TABLE will make any owned sequences be unlogged too. ALTER TABLE missed that consideration, so that an added identity column would have a logged sequence, which seems pointless.",
      "sinceVersion": "15.7",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Ensure that index-only scans on name columns return a fully-padded value",
      "description": "Ensure that index-only scans on name columns return a fully-padded value (David Rowley)\n          The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "sinceVersion": "15.7",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type",
      "description": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type (Tom Lane)\n          Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Require `SELECT` privilege on the target table for MERGE with a `DO NOTHING` clause",
      "description": "Require `SELECT` privilege on the target table for MERGE with a `DO NOTHING` clause (Álvaro Herrera)\n          `SELECT` privilege would be required in all practical cases anyway, but require it even if the query reads no columns of the target table. This avoids an edge case in which MERGE would require no privileges whatever, which seems undesirable even when it's a do-nothing command.",
      "sinceVersion": "15.7",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix handling of self-modified tuples in MERGE",
      "description": "Fix handling of self-modified tuples in MERGE (Dean Rasheed)\n          Throw an error if a target row joins to more than one source row, as required by the SQL standard. (The previous coding could silently ignore this condition if a concurrent update was involved.) Also, throw a non-misleading error if a target row is already updated by a later command in the current transaction, thanks to a `BEFORE` trigger or a volatile function used in the query.",
      "sinceVersion": "15.7",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause (David Rowley)\n          A NULL value satisfies a clause such as ``boolcol` IS NOT FALSE`, so pruning away a partition containing NULLs yielded incorrect answers.",
      "sinceVersion": "15.7",
      "contributor": "David Rowley"
    },
    {
      "title": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema",
      "description": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema (Tom Lane)\n          Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve ALTER TABLE ... ALTER COLUMN TYPE's error message when there is a dependent function or publication",
      "description": "Improve ALTER TABLE ... ALTER COLUMN TYPE's error message when there is a dependent function or publication (Tom Lane)",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "In CREATE DATABASE, recognize strategy keywords case-insensitively for consistency with other options",
      "description": "In CREATE DATABASE, recognize strategy keywords case-insensitively for consistency with other options (Tomas Vondra)",
      "sinceVersion": "15.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan",
      "description": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan (Melanie Plageman)\n          Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "sinceVersion": "15.7",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Fix EXPLAIN's output for subplans in MERGE",
      "description": "Fix EXPLAIN's output for subplans in MERGE (Dean Rasheed)\n          EXPLAIN would sometimes fail to properly display subplan Params referencing variables in other parts of the plan tree.",
      "sinceVersion": "15.7",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "Avoid deadlock during removal of orphaned temporary tables (Mikhail Zhilin)\n          If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "sinceVersion": "15.7",
      "contributor": "Mikhail Zhilin"
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "Avoid race condition while examining per-relation frozen-XID values (Noah Misch)\n          VACUUM's computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another VACUUM.",
      "sinceVersion": "15.7",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix buffer usage reporting for parallel vacuuming",
      "description": "Fix buffer usage reporting for parallel vacuuming (Anthonin Bonnefoy)\n          Buffer accesses performed by parallel workers were not getting counted in the statistics reported in `VERBOSE` mode.",
      "sinceVersion": "15.7",
      "contributor": "Anthonin Bonnefoy"
    },
    {
      "title": "Disallow converting a table to a view within an outer SQL command that is using that table",
      "description": "Disallow converting a table to a view within an outer SQL command that is using that table (Tom Lane)\n          This avoids possible crashes.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level (Tom Lane)\n          In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to UNION ALL trees that have constant outputs for the join column in some SELECT arms.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "Avoid use of already-freed data while planning partition-wise joins under GEQO (Tom Lane)\n          This would typically end in a crash or unexpected error message.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid freeing still-in-use data in Memoize",
      "description": "Avoid freeing still-in-use data in Memoize (Tender Wang, Andrei Lepikhov)\n          In production builds this error frequently didn't cause any problems, as the freed data would most likely not get overwritten before it was used.",
      "sinceVersion": "15.7",
      "contributor": "Tender Wang, Andrei Lepikhov"
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages",
      "description": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages (David Rowley)",
      "sinceVersion": "15.7",
      "contributor": "David Rowley"
    },
    {
      "title": "Be more careful with RECORD-returning functions in `FROM`",
      "description": "Be more careful with RECORD-returning functions in `FROM` (Tom Lane)\n          The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "Fix confusion about the return rowtype of SQL-language procedures (Tom Lane)\n          A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add protective stack depth checks to some recursive functions",
      "description": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin)",
      "sinceVersion": "15.7",
      "contributor": "Egor Chindyaskin"
    },
    {
      "title": "Fix mis-rounding and overflow hazards in `date_bin",
      "description": "Fix mis-rounding and overflow hazards in `date_bin()()` (Moaaz Assali)\n          In the case where the source timestamp is before the origin timestamp and their difference is already an exact multiple of the stride, the code incorrectly subtracted the stride anyway. Also, detect some integer-overflow cases that would have produced incorrect results.",
      "sinceVersion": "15.7",
      "contributor": "Moaaz Assali"
    },
    {
      "title": "Detect integer overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect integer overflow when adding or subtracting an interval to/from a timestamp (Joseph Koshakow)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "15.7",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Avoid race condition in `pg_get_expr",
      "description": "Avoid race condition in `pg_get_expr()()` (Tom Lane)\n          If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Fix detection of old transaction IDs in XID status functions (Karina Litskevich)\n          Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()()` or `txid_status()()`.",
      "sinceVersion": "15.7",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Ensure that a table's freespace map won't return a page that's past the end of the table",
      "description": "Ensure that a table's freespace map won't return a page that's past the end of the table (Ronan Dunklau)\n          Because the freespace map isn't WAL-logged, this was possible in edge cases involving an OS crash, a replica promote, or a PITR restore. The result would be a “could not read block” error.",
      "sinceVersion": "15.7",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait",
      "description": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait()` (Etsuro Fujita)",
      "sinceVersion": "15.7",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Avoid corrupting exception stack if an FDW implements async append but doesn't configure any wait conditions for the Append plan node to wait for",
      "description": "Avoid corrupting exception stack if an FDW implements async append but doesn't configure any wait conditions for the Append plan node to wait for (Alexander Pyhalov)",
      "sinceVersion": "15.7",
      "contributor": "Alexander Pyhalov"
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Throw an error if an index is accessed while it is being reindexed (Tom Lane)\n          Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition in deciding whether a table sync operation is needed in logical replication",
      "description": "Fix race condition in deciding whether a table sync operation is needed in logical replication (Vignesh C)\n          An invalidation event arriving while a subscriber identifies which tables need to be synced would be forgotten about, so that any tables newly in need of syncing might not get processed in a timely fashion.",
      "sinceVersion": "15.7",
      "contributor": "Vignesh C"
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB",
      "description": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas)",
      "sinceVersion": "15.7",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "Disconnect if a new server session's client socket cannot be put into non-blocking mode (Heikki Linnakangas)\n          It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "sinceVersion": "15.7",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "Fix inadequate error reporting with OpenSSL 3.0.0 and later (Heikki Linnakangas, Tom Lane)\n          System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "sinceVersion": "15.7",
      "contributor": "Heikki Linnakangas, Tom Lane"
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain",
      "description": "Avoid concurrent calls to `bindtextdomain()()` in libpq and ecpglib (Tom Lane)\n          Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line",
      "description": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane)",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings",
      "description": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane)",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc",
      "description": "Ensure that the string result of ecpg's `intoasc()()` function is correctly zero-terminated (Oleg Tselebrovskiy)",
      "sinceVersion": "15.7",
      "contributor": "Oleg Tselebrovskiy"
    },
    {
      "title": "In psql, avoid leaking a query result after the query is cancelled",
      "description": "In psql, avoid leaking a query result after the query is cancelled (Tom Lane)\n          This happened only when cancelling a non-last query in a query string made with `\\;` separators.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords",
      "description": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords (Daniel Gustafsson, Álvaro Herrera)",
      "sinceVersion": "15.7",
      "contributor": "Daniel Gustafsson, Álvaro Herrera"
    },
    {
      "title": "Skip files named .DS_Store in pg_basebackup, pg_checksums, and pg_rewind",
      "description": "Skip files named .DS_Store in pg_basebackup, pg_checksums, and pg_rewind (Daniel Gustafsson)\n          This avoids problems on macOS, where the Finder may create such files.",
      "sinceVersion": "15.7",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments",
      "description": "Fix PL/pgSQL's parsing of single-line comments (`--`-style comments) following expressions (Erik Wienhold, Tom Lane)\n          This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL CASE statement.",
      "sinceVersion": "15.7",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "In contrib/amcheck, don't report false match failures due to short- versus long-header values",
      "description": "In contrib/amcheck, don't report false match failures due to short- versus long-header values (Andrey Borodin, Michael Zhilin)\n          A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "sinceVersion": "15.7",
      "contributor": "Andrey Borodin, Michael Zhilin"
    },
    {
      "title": "Fix bugs in BRIN output functions",
      "description": "Fix bugs in BRIN output functions (Tomas Vondra)\n          These output functions are only used for displaying index entries in contrib/pageinspect, so the errors are of limited practical concern.",
      "sinceVersion": "15.7",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant",
      "description": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant (David Rowley)\n          This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position `N` is not in select list” errors.",
      "sinceVersion": "15.7",
      "contributor": "David Rowley"
    },
    {
      "title": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC`",
      "description": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC` (Tom Lane)\n          This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "sinceVersion": "15.7",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2",
      "description": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval)",
      "sinceVersion": "15.7",
      "contributor": "Dmitry Koval"
    },
    {
      "title": "Fix incompatibility with LLVM 18",
      "description": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "15.7",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Allow `make check` to work with the musl C library",
      "description": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane)",
      "sinceVersion": "15.7",
      "contributor": "Thomas Munro, Bruce Momjian, Tom Lane"
    },
    {
      "title": "Prevent unauthorized code execution during pg_dump",
      "description": "Prevent unauthorized code execution during pg_dump (Masahiko Sawada)\n          An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg_dump session with the privileges of the role running pg_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter restrict_nonsystem_relation_kind that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg_dump to set it when available. Note that the attack is prevented only if both pg_dump and the server it is dumping from are new enough to have this fix.\n          The PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "sinceVersion": "15.8",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Prevent infinite loop in VACUUM",
      "description": "Prevent infinite loop in VACUUM (Melanie Plageman)\n          After a disconnected standby server with an old running transaction reconnected to the primary, it was possible for VACUUM on the primary to get confused about which tuples are removable, resulting in an infinite loop.",
      "sinceVersion": "15.8",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children",
      "description": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera)",
      "sinceVersion": "15.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints",
      "description": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints (Álvaro Herrera, Tender Wang)\n          When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect coninhcount value. This would cause trouble during any further manipulations of that constraint.",
      "sinceVersion": "15.8",
      "contributor": "Álvaro Herrera, Tender Wang"
    },
    {
      "title": "Fix partition pruning setup during `ALTER TABLE DETACH PARTITION CONCURRENTLY`",
      "description": "Fix partition pruning setup during `ALTER TABLE DETACH PARTITION CONCURRENTLY` (Álvaro Herrera)\n          The executor assumed that no partition could be detached between planning and execution of a query on a partitioned table. This is no longer true since the introduction of `DETACH PARTITION`'s `CONCURRENTLY` option, making it possible for query execution to fail transiently when that is used.",
      "sinceVersion": "15.8",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Correctly update a partitioned table's pg_class.reltuples field to zero after its last child partition is dropped",
      "description": "Correctly update a partitioned table's pg_class.reltuples field to zero after its last child partition is dropped (Noah Misch)\n          The first ANALYZE on such a partitioned table must update relhassubclass as well, and that caused the reltuples update to be lost.",
      "sinceVersion": "15.8",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "Fix handling of polymorphic output arguments for procedures (Tom Lane)\n          The SQL CALL statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But CALL in PL/pgSQL worked correctly.)",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix behavior of stable functions called from a CALL statement's argument list",
      "description": "Fix behavior of stable functions called from a CALL statement's argument list (Tom Lane)\n          If the CALL is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect integer overflow in money calculations",
      "description": "Detect integer overflow in money calculations (Joseph Koshakow)\n          None of the arithmetic functions for the money type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "sinceVersion": "15.8",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round",
      "description": "Fix over-aggressive clamping of the scale argument in `round(numeric)()` and `trunc(numeric)()` (Dean Rasheed)\n          These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type numeric.",
      "sinceVersion": "15.8",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix result for `pg_size_pretty",
      "description": "Fix result for `pg_size_pretty()()` when applied to the smallest possible bigint value (Joseph Koshakow)",
      "sinceVersion": "15.8",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Prevent `pg_sequence_last_value",
      "description": "Prevent `pg_sequence_last_value()()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions (Nathan Bossart)\n          Make it return NULL in these cases instead of throwing an error.",
      "sinceVersion": "15.8",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery",
      "description": "Fix parsing of ignored operators in `websearch_to_tsquery()()` (Tom Lane)\n          Per the manual, punctuation in the input of `websearch_to_tsquery()()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Detect another integer overflow case while computing new array dimensions (Joseph Koshakow)\n          Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "sinceVersion": "15.8",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields (Noah Misch)\n          An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the pg_database catalog, so the effects are narrow, but misbehavior is possible.",
      "sinceVersion": "15.8",
      "contributor": "Noah Misch"
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT` (Tom Lane)\n          If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number `N` not found in view targetlist”.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Avoid reporting an unhelpful internal error for incorrect recursive queries (Tom Lane)\n          Rearrange the order of error checks so that we throw an on-point error when a WITH RECURSIVE query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Lock owned sequences during `ALTER TABLE SET LOGGED|UNLOGGED`",
      "description": "Lock owned sequences during `ALTER TABLE SET LOGGED|UNLOGGED` (Noah Misch)\n          These commands change the persistence of a table's owned sequences along with the table, but they failed to acquire lock on the sequences while doing so. This could result in losing the effects of concurrent `nextval()()` calls.",
      "sinceVersion": "15.8",
      "contributor": "Noah Misch"
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "Don't throw an error if a queued `AFTER` trigger no longer exists (Tom Lane)\n          It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger `NNNN`”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped",
      "description": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped (Tom Lane)\n          If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg_dump dumps for that relation.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates (Tom Lane)\n          If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Refuse to modify a temporary table of another session with `ALTER TABLE` (Tom Lane)\n          Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of extended statistics on expressions in `CREATE TABLE LIKE STATISTICS`",
      "description": "Fix handling of extended statistics on expressions in `CREATE TABLE LIKE STATISTICS` (Tom Lane)\n          The `CREATE` command failed to adjust column references in statistics expressions to the possibly-different column numbering of the new table. This resulted in invalid statistics objects that would cause problems later. A typical scenario where renumbering columns is needed is when the source table contains some dropped columns.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN",
      "description": "Fix failure to recalculate sub-queries generated from `MIN()()` or `MAX()()` aggregates (Tom Lane)\n          In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "Avoid crashing when a JIT-inlined backend function throws an error (Tom Lane)\n          The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Cope with behavioral changes in libxml2 version 2.13.x (Erik Wienhold, Tom Lane)\n          Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "sinceVersion": "15.8",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "Fix handling of subtransactions of prepared transactions when starting a hot standby server (Heikki Linnakangas)\n          When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "sinceVersion": "15.8",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "Prevent incorrect initialization of logical replication slots (Masahiko Sawada)\n          In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "sinceVersion": "15.8",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid “can only drop stats once” error during replication slot creation and drop",
      "description": "Avoid “can only drop stats once” error during replication slot creation and drop (Floris Van Nee)",
      "sinceVersion": "15.8",
      "contributor": "Floris Van Nee"
    },
    {
      "title": "Fix resource leakage in logical replication WAL sender",
      "description": "Fix resource leakage in logical replication WAL sender (Hou Zhijie)\n          The walsender process leaked memory when publishing changes to a partitioned table whose partitions have row types physically different from the partitioned table's.",
      "sinceVersion": "15.8",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "Avoid memory leakage after servicing a notify or sinval interrupt (Tom Lane)\n          The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent leakage of reference counts for the shared memory block used for statistics",
      "description": "Prevent leakage of reference counts for the shared memory block used for statistics (Anthonin Bonnefoy)\n          A new backend process attaching to the statistics shared memory incremented its reference count, but failed to decrement the count when exiting. After 232 sessions had been created, the reference count would overflow to zero, causing failures in all subsequent backend process starts.",
      "sinceVersion": "15.8",
      "contributor": "Anthonin Bonnefoy"
    },
    {
      "title": "Prevent deadlocks and assertion failures during truncation of the multixact SLRU log",
      "description": "Prevent deadlocks and assertion failures during truncation of the multixact SLRU log (Heikki Linnakangas)\n          A process trying to delete SLRU segments could deadlock with the checkpointer process.",
      "sinceVersion": "15.8",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Avoid possibly missing end-of-input events on Windows sockets (Thomas Munro)\n          Windows reports an FD_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "sinceVersion": "15.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix buffer overread in JSON parse error reports for incomplete byte sequences",
      "description": "Fix buffer overread in JSON parse error reports for incomplete byte sequences (Jacob Champion)\n          It was possible to walk off the end of the input buffer by a few bytes when the last bytes comprise an incomplete multi-byte character. While usually harmless, in principle this could cause a crash.",
      "sinceVersion": "15.8",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "Disable creation of stateful TLS session tickets by OpenSSL (Daniel Gustafsson)\n          This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "sinceVersion": "15.8",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "When replanning a PL/pgSQL “simple expression”, check it's still simple (Tom Lane)\n          Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix incompatibility between PL/Perl and Perl 5.40",
      "description": "Fix incompatibility between PL/Perl and Perl 5.40 (Andrew Dunstan)",
      "sinceVersion": "15.8",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Fix recursive RECORD-returning PL/Python functions",
      "description": "Fix recursive RECORD-returning PL/Python functions (Tom Lane)\n          If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call (Tom Lane)\n          If a PL/Python-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple (Erik Wienhold, Tom Lane)\n          Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "sinceVersion": "15.8",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror",
      "description": "Avoid non-thread-safe usage of `strerror()()` in libpq (Peter Eisentraut)\n          Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "sinceVersion": "15.8",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid memory leak within pg_dump during a binary upgrade",
      "description": "Avoid memory leak within pg_dump during a binary upgrade (Daniel Gustafsson)",
      "sinceVersion": "15.8",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Ensure that `pg_restore` -l reports dependent TOC entries correctly",
      "description": "Ensure that `pg_restore` -l reports dependent TOC entries correctly (Tom Lane)\n          If -l was specified together with selective-restore options such as -n or -N, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid “cursor can only scan forward” error in contrib/postgres_fdw",
      "description": "Avoid “cursor can only scan forward” error in contrib/postgres_fdw (Etsuro Fujita)\n          This error could occur if the remote server is v15 or later and a foreign table is mapped to a non-trivial remote view.",
      "sinceVersion": "15.8",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "In contrib/postgres_fdw, do not send `FETCH FIRST WITH TIES` clauses to the remote server",
      "description": "In contrib/postgres_fdw, do not send `FETCH FIRST WITH TIES` clauses to the remote server (Japin Li)\n          The remote server might not implement this clause, or might interpret it differently than we would locally, so don't risk attempting remote execution.",
      "sinceVersion": "15.8",
      "contributor": "Japin Li"
    },
    {
      "title": "Avoid clashing with system-provided &lt;regex.h&gt; headers",
      "description": "Avoid clashing with system-provided &lt;regex.h&gt; headers (Thomas Munro)\n          This fixes a compilation failure on macOS version 15 and up.",
      "sinceVersion": "15.8",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix otherwise-harmless assertion failure in Memoize cost estimation",
      "description": "Fix otherwise-harmless assertion failure in Memoize cost estimation (David Rowley)",
      "sinceVersion": "15.8",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index",
      "description": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane)",
      "sinceVersion": "15.8",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove the server variable vacuum_defer_cleanup_age",
      "description": "Remove the server variable vacuum_defer_cleanup_age (Andres Freund)\n          This has been unnecessary since hot_standby_feedback and replication slots were added.",
      "sinceVersion": "16.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Role inheritance now controls the default inheritance status of member roles added during GRANT",
      "description": "Role inheritance now controls the default inheritance status of member roles added during GRANT (Robert Haas)\n          The role's default inheritance behavior can be overridden with the new GRANT ... WITH INHERIT clause. This allows inheritance of some roles and not others because the members' inheritance status is set at GRANT time. Previously the inheritance status of member roles was controlled only by the role's inheritance status, and changes to a role's inheritance status affected all previous and future member roles.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow parallel application of logical replication",
      "description": "Allow parallel application of logical replication (Hou Zhijie, Wang Wei, Amit Kapila)\n            The CREATE SUBSCRIPTION STREAMING option now supports `parallel` to enable application of large transactions by parallel workers. The number of parallel workers is controlled by the new server variable max_parallel_apply_workers_per_subscription. Wait events `LogicalParallelApplyMain`, `LogicalParallelApplyStateChange`, and `LogicalApplySendData` were also added. Column leader_pid was added to system view pg_stat_subscription to track parallel activity.",
      "sinceVersion": "16.0",
      "contributor": "Hou Zhijie, Wang Wei, Amit Kapila"
    },
    {
      "title": "Deprecate createuser option --role",
      "description": "Deprecate createuser option --role (Nathan Bossart)\n            This option could be easily confused with new createuser role membership options, so option --member-of has been added with the same functionality. The --role option can still be used.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Untitled feature",
      "description": "Allow parallelization of `FULL` and internal right `OUTER` hash joins",
      "sinceVersion": "16.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Allow logical replication from standby servers",
      "sinceVersion": "16.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Allow logical replication subscribers to apply large transactions in parallel",
      "sinceVersion": "16.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Allow monitoring of I/O statistics using the new pg_stat_io view",
      "sinceVersion": "16.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Add SQL/JSON constructors and identity functions",
      "sinceVersion": "16.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Add support for regular expression matching of user and database names in pg_hba.conf, and user names in pg_ident.conf",
      "sinceVersion": "16.0",
      "contributor": null
    },
    {
      "title": "Change assignment rules for PL/pgSQL bound cursor variables",
      "description": "Change assignment rules for PL/pgSQL bound cursor variables (Tom Lane)\n          Previously, the string value of such variables was set to match the variable name during cursor assignment; now it will be assigned during OPEN, and will not match the variable name. To restore the previous behavior, assign the desired portal name to the cursor variable before OPEN.",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Disallow `NULLS NOT DISTINCT` indexes for primary keys",
      "description": "Disallow `NULLS NOT DISTINCT` indexes for primary keys (Daniel Gustafsson)",
      "sinceVersion": "16.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Change REINDEX DATABASE and reindexdb to not process indexes on system catalogs",
      "description": "Change REINDEX DATABASE and reindexdb to not process indexes on system catalogs (Simon Riggs)\n          Processing such indexes is still possible using REINDEX SYSTEM and reindexdb --system.",
      "sinceVersion": "16.0",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Tighten `GENERATED` expression restrictions on inherited and partitioned tables",
      "description": "Tighten `GENERATED` expression restrictions on inherited and partitioned tables (Amit Langote, Tom Lane)\n          Columns of parent/partitioned and child/partition tables must all have the same generation status, though now the actual generation expressions can be different.",
      "sinceVersion": "16.0",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Remove pg_walinspect functions `pg_get_wal_records_info_till_end_of_wal",
      "description": "Remove pg_walinspect functions `pg_get_wal_records_info_till_end_of_wal()()` and `pg_get_wal_stats_till_end_of_wal()()` (Bharath Rupireddy)",
      "sinceVersion": "16.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Rename server variable force_parallel_mode to debug_parallel_query",
      "description": "Rename server variable force_parallel_mode to debug_parallel_query (David Rowley)",
      "sinceVersion": "16.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Remove the ability to create views manually with `ON SELECT` rules",
      "description": "Remove the ability to create views manually with `ON SELECT` rules (Tom Lane)",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove server variable promote_trigger_file",
      "description": "Remove server variable promote_trigger_file (Simon Riggs)\n          This was used to promote a standby to primary, but is now more easily accomplished with `pg_ctl promote` or `pg_promote()()`.",
      "sinceVersion": "16.0",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Remove read-only server variables lc_collate and lc_ctype",
      "description": "Remove read-only server variables lc_collate and lc_ctype (Peter Eisentraut)\n          Collations and locales can vary between databases so having them as read-only server variables was unhelpful.",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Restrict the privileges of `CREATEROLE` and its ability to modify other roles",
      "description": "Restrict the privileges of `CREATEROLE` and its ability to modify other roles (Robert Haas)\n          Previously roles with `CREATEROLE` privileges could change many aspects of any non-superuser role. Such changes, including adding members, now require the role requesting the change to have `ADMIN OPTION` permission. For example, they can now change the `CREATEDB`, `REPLICATION`, and `BYPASSRLS` properties only if they also have those permissions.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Remove symbolic links for the postmaster binary",
      "description": "Remove symbolic links for the postmaster binary (Peter Eisentraut)",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow incremental sorts in more cases, including `DISTINCT`",
      "description": "Allow incremental sorts in more cases, including `DISTINCT` (David Rowley)",
      "sinceVersion": "16.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Add the ability for aggregates having `ORDER BY` or `DISTINCT` to use pre-sorted data",
      "description": "Add the ability for aggregates having `ORDER BY` or `DISTINCT` to use pre-sorted data (David Rowley)\n              The new server variable enable_presorted_aggregate can be used to disable this.",
      "sinceVersion": "16.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Allow memoize atop a `UNION ALL`",
      "description": "Allow memoize atop a `UNION ALL` (Richard Guo)",
      "sinceVersion": "16.0",
      "contributor": "Richard Guo"
    },
    {
      "title": "Allow anti-joins to be performed with the non-nullable input as the inner relation",
      "description": "Allow anti-joins to be performed with the non-nullable input as the inner relation (Richard Guo)",
      "sinceVersion": "16.0",
      "contributor": "Richard Guo"
    },
    {
      "title": "Allow parallelization of `FULL` and internal right `OUTER` hash joins",
      "description": "Allow parallelization of `FULL` and internal right `OUTER` hash joins (Melanie Plageman, Thomas Munro)",
      "sinceVersion": "16.0",
      "contributor": "Melanie Plageman, Thomas Munro"
    },
    {
      "title": "Improve the accuracy of `GIN` index access optimizer costs",
      "description": "Improve the accuracy of `GIN` index access optimizer costs (Ronan Dunklau)",
      "sinceVersion": "16.0",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Allow more efficient addition of heap and index pages",
      "description": "Allow more efficient addition of heap and index pages (Andres Freund)",
      "sinceVersion": "16.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "During non-freeze operations, perform page freezing where appropriate",
      "description": "During non-freeze operations, perform page freezing where appropriate (Peter Geoghegan)\n              This makes full-table freeze vacuums less necessary.",
      "sinceVersion": "16.0",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Allow aggregate functions `string_agg",
      "description": "Allow aggregate functions `string_agg()()` and `array_agg()()` to be parallelized (David Rowley)",
      "sinceVersion": "16.0",
      "contributor": "David Rowley"
    },
    {
      "title": "Allow control of the shared buffer usage by vacuum and analyze",
      "description": "Allow control of the shared buffer usage by vacuum and analyze (Melanie Plageman)\n              The VACUUM/ANALYZE option is `BUFFER_USAGE_LIMIT`, and the vacuumdb option is --buffer-usage-limit. The default value is set by server variable vacuum_buffer_usage_limit, which also controls autovacuum.",
      "sinceVersion": "16.0",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Support `wal_sync_method=fdatasync` on Windows",
      "description": "Support `wal_sync_method=fdatasync` on Windows (Thomas Munro)",
      "sinceVersion": "16.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow HOT updates if only `BRIN`-indexed columns are updated",
      "description": "Allow HOT updates if only `BRIN`-indexed columns are updated (Matthias van de Meent, Josef Simanek, Tomas Vondra)",
      "sinceVersion": "16.0",
      "contributor": "Matthias van de Meent, Josef Simanek, Tomas Vondra"
    },
    {
      "title": "Allow xid/subxid searches and ASCII string detection to use vector operations",
      "description": "Allow xid/subxid searches and ASCII string detection to use vector operations (Nathan Bossart, John Naylor)\n              ASCII detection is particularly useful for COPY FROM. Vector operations are also used for some C array searches.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart, John Naylor"
    },
    {
      "title": "Reduce overhead of memory allocations",
      "description": "Reduce overhead of memory allocations (Andres Freund, David Rowley)",
      "sinceVersion": "16.0",
      "contributor": "Andres Freund, David Rowley"
    },
    {
      "title": "Add system view pg_stat_io view to track I/O statistics",
      "description": "Add system view pg_stat_io view to track I/O statistics (Melanie Plageman)",
      "sinceVersion": "16.0",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Record statistics on the last sequential and index scans on tables",
      "description": "Record statistics on the last sequential and index scans on tables (Dave Page)\n              This information appears in pg_stat_*_tables and pg_stat_*_indexes.",
      "sinceVersion": "16.0",
      "contributor": "Dave Page"
    },
    {
      "title": "Record statistics on the occurrence of updated rows moving to new pages",
      "description": "Record statistics on the occurrence of updated rows moving to new pages (Corey Huinker)\n              The `pg_stat_*_tables` column is n_tup_newpage_upd.",
      "sinceVersion": "16.0",
      "contributor": "Corey Huinker"
    },
    {
      "title": "Add speculative lock information to the pg_locks system view",
      "description": "Add speculative lock information to the pg_locks system view (Masahiko Sawada, Noriyoshi Shinoda)\n              The transaction id is displayed in the transactionid column and the speculative insertion token is displayed in the objid column.",
      "sinceVersion": "16.0",
      "contributor": "Masahiko Sawada, Noriyoshi Shinoda"
    },
    {
      "title": "Add the display of prepared statement result types to the pg_prepared_statements view",
      "description": "Add the display of prepared statement result types to the pg_prepared_statements view (Dagfinn Ilmari Mannsåker)",
      "sinceVersion": "16.0",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Create subscription statistics entries at subscription creation time so stats_reset is accurate",
      "description": "Create subscription statistics entries at subscription creation time so stats_reset is accurate (Andres Freund)\n              Previously entries were created only when the first statistics were reported.",
      "sinceVersion": "16.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Correct the I/O accounting for temp relation writes shown in pg_stat_database",
      "description": "Correct the I/O accounting for temp relation writes shown in pg_stat_database (Melanie Plageman)",
      "sinceVersion": "16.0",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Add function `pg_stat_get_backend_subxact",
      "description": "Add function `pg_stat_get_backend_subxact()()` to report on a session's subtransaction cache (Dilip Kumar)",
      "sinceVersion": "16.0",
      "contributor": "Dilip Kumar"
    },
    {
      "title": "Have `pg_stat_get_backend_idset",
      "description": "Have `pg_stat_get_backend_idset()()`, `pg_stat_get_backend_activity()()`, and related functions use the unchanging backend id (Nathan Bossart)\n              Previously the index values might change during the lifetime of the session.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Report stand-alone backends with a special backend type",
      "description": "Report stand-alone backends with a special backend type (Melanie Plageman)",
      "sinceVersion": "16.0",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Add wait event `SpinDelay` to report spinlock sleep delays",
      "description": "Add wait event `SpinDelay` to report spinlock sleep delays (Andres Freund)",
      "sinceVersion": "16.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Create new wait event `DSMAllocate` to indicate waiting for dynamic shared memory allocation",
      "description": "Create new wait event `DSMAllocate` to indicate waiting for dynamic shared memory allocation (Thomas Munro)\n              Previously this type of wait was reported as `DSMFillZeroWrite`, which was also used by `mmap()()` allocations.",
      "sinceVersion": "16.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add the database name to the process title of logical WAL senders",
      "description": "Add the database name to the process title of logical WAL senders (Tatsuhiro Nakamori)\n              Physical WAL senders do not display a database name.",
      "sinceVersion": "16.0",
      "contributor": "Tatsuhiro Nakamori"
    },
    {
      "title": "Add checkpoint and `REDO LSN` information to log_checkpoints messages",
      "description": "Add checkpoint and `REDO LSN` information to log_checkpoints messages (Bharath Rupireddy, Kyotaro Horiguchi)",
      "sinceVersion": "16.0",
      "contributor": "Bharath Rupireddy, Kyotaro Horiguchi"
    },
    {
      "title": "Provide additional details during client certificate failures",
      "description": "Provide additional details during client certificate failures (Jacob Champion)",
      "sinceVersion": "16.0",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Add predefined role `pg_create_subscription` with permission to create subscriptions",
      "description": "Add predefined role `pg_create_subscription` with permission to create subscriptions (Robert Haas)",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow subscriptions to not require passwords",
      "description": "Allow subscriptions to not require passwords (Robert Haas)\n              This is accomplished with the option `password_required=false`.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Simplify permissions for LOCK TABLE",
      "description": "Simplify permissions for LOCK TABLE (Jeff Davis)\n              Previously a user's ability to perform LOCK TABLE at various lock levels was limited to the lock levels required by the commands they had permission to execute on the table. For example, someone with UPDATE permission could perform all lock levels except `ACCESS SHARE`, even though it was a lesser lock level. Now users can issue lesser lock levels if they already have permission for greater lock levels.",
      "sinceVersion": "16.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Allow `ALTER GROUP group_name ADD USER user_name` to be performed with `ADMIN OPTION`",
      "description": "Allow `ALTER GROUP group_name ADD USER user_name` to be performed with `ADMIN OPTION` (Robert Haas)\n              Previously `CREATEROLE` permission was required.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow GRANT to use `WITH ADMIN TRUE`/`FALSE` syntax",
      "description": "Allow GRANT to use `WITH ADMIN TRUE`/`FALSE` syntax (Robert Haas)\n              Previously only the `WITH ADMIN OPTION` syntax was supported.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow roles that create other roles to automatically inherit the new role's rights or the ability to SET ROLE to the new role",
      "description": "Allow roles that create other roles to automatically inherit the new role's rights or the ability to SET ROLE to the new role (Robert Haas, Shi Yu)\n              This is controlled by server variable createrole_self_grant.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas, Shi Yu"
    },
    {
      "title": "Prevent users from changing the default privileges of non-inherited roles",
      "description": "Prevent users from changing the default privileges of non-inherited roles (Robert Haas)\n              This is now only allowed for inherited roles.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "When granting role membership, require the granted-by role to be a role that has appropriate permissions",
      "description": "When granting role membership, require the granted-by role to be a role that has appropriate permissions (Robert Haas)\n              This is a requirement even when a non-bootstrap superuser is granting role membership.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow non-superusers to grant permissions using a granted-by user that is not the current user",
      "description": "Allow non-superusers to grant permissions using a granted-by user that is not the current user (Robert Haas)\n              The current user still must have sufficient permissions given by the specified granted-by user.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Add GRANT to control permission to use SET ROLE",
      "description": "Add GRANT to control permission to use SET ROLE (Robert Haas)\n              This is controlled by a new `GRANT ... SET` option.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Add dependency tracking to roles which have granted privileges",
      "description": "Add dependency tracking to roles which have granted privileges (Robert Haas)\n              For example, removing `ADMIN OPTION` will fail if there are privileges using that option; `CASCADE` must be used to revoke dependent permissions.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Add dependency tracking of grantors for GRANT records",
      "description": "Add dependency tracking of grantors for GRANT records (Robert Haas)\n              This guarantees that pg_auth_members.grantor values are always valid.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow multiple role membership records",
      "description": "Allow multiple role membership records (Robert Haas)\n              Previously a new membership grant would remove a previous matching membership grant, even if other aspects of the grant did not match.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Prevent removal of superuser privileges for the bootstrap user",
      "description": "Prevent removal of superuser privileges for the bootstrap user (Robert Haas)\n              Restoring such users could lead to errors.",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Allow `makeaclitem",
      "description": "Allow `makeaclitem()()` to accept multiple privilege names (Robins Tharakan)\n              Previously only a single privilege name, like SELECT, was accepted.",
      "sinceVersion": "16.0",
      "contributor": "Robins Tharakan"
    },
    {
      "title": "Add support for Kerberos credential delegation",
      "description": "Add support for Kerberos credential delegation (Stephen Frost)\n              This is enabled with server variable gss_accept_delegation and libpq connection parameter `gssdelegation`.",
      "sinceVersion": "16.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Allow the SCRAM iteration count to be set with server variable scram_iterations",
      "description": "Allow the SCRAM iteration count to be set with server variable scram_iterations (Daniel Gustafsson)",
      "sinceVersion": "16.0",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Tighten restrictions on which server variables can be reset",
      "description": "Tighten restrictions on which server variables can be reset (Masahiko Sawada)\n              Previously, while certain variables, like transaction_isolation, were not affected by RESET ALL, they could be individually reset in inappropriate situations.",
      "sinceVersion": "16.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Move various postgresql.conf items into new categories",
      "description": "Move various postgresql.conf items into new categories (Shinya Kato)\n              This also affects the categories displayed in the pg_settings view.",
      "sinceVersion": "16.0",
      "contributor": "Shinya Kato"
    },
    {
      "title": "Prevent configuration file recursion beyond 10 levels",
      "description": "Prevent configuration file recursion beyond 10 levels (Julien Rouhaud)",
      "sinceVersion": "16.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Allow autovacuum to more frequently honor changes to delay settings",
      "description": "Allow autovacuum to more frequently honor changes to delay settings (Melanie Plageman)\n              Rather than honor changes only at the start of each relation, honor them at the start of each block.",
      "sinceVersion": "16.0",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Remove restrictions that archive files be durably renamed",
      "description": "Remove restrictions that archive files be durably renamed (Nathan Bossart)\n              The archive_command command is now more likely to be called with already-archived files after a crash.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Prevent archive_library and archive_command from being set at the same time",
      "description": "Prevent archive_library and archive_command from being set at the same time (Nathan Bossart)\n              Previously archive_library would override archive_command.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Allow the postmaster to terminate children with an abort signal",
      "description": "Allow the postmaster to terminate children with an abort signal (Tom Lane)\n              This allows collection of a core dump for a stuck child process. This is controlled by send_abort_for_crash and send_abort_for_kill. The postmaster's -T switch is now the same as setting send_abort_for_crash.",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Remove the non-functional postmaster -n option",
      "description": "Remove the non-functional postmaster -n option (Tom Lane)",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow the server to reserve backend slots for roles with `pg_use_reserved_connections` membership",
      "description": "Allow the server to reserve backend slots for roles with `pg_use_reserved_connections` membership (Nathan Bossart)\n              The number of reserved slots is set by server variable reserved_connections.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Allow huge pages to work on newer versions of Windows 10",
      "description": "Allow huge pages to work on newer versions of Windows 10 (Thomas Munro)\n              This adds the special handling required to enable huge pages on newer versions of Windows 10.",
      "sinceVersion": "16.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Add debug_io_direct setting for developer usage",
      "description": "Add debug_io_direct setting for developer usage (Thomas Munro, Andres Freund, Bharath Rupireddy)\n              While primarily for developers, `wal_sync_method=open_sync`/`open_datasync` has been modified to not use direct I/O with `wal_level=minimal`; this is now enabled with `debug_io_direct=wal`.",
      "sinceVersion": "16.0",
      "contributor": "Thomas Munro, Andres Freund, Bharath Rupireddy"
    },
    {
      "title": "Add function `pg_split_walfile_name",
      "description": "Add function `pg_split_walfile_name()()` to report the segment and timeline values of WAL file names (Bharath Rupireddy)",
      "sinceVersion": "16.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Add support for regular expression matching on database and role entries in pg_hba.conf",
      "description": "Add support for regular expression matching on database and role entries in pg_hba.conf (Bertrand Drouvot)\n              Regular expression patterns are prefixed with a slash. Database and role names that begin with slashes need to be double-quoted if referenced in pg_hba.conf.",
      "sinceVersion": "16.0",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Improve user-column handling of pg_ident.conf to match pg_hba.conf",
      "description": "Improve user-column handling of pg_ident.conf to match pg_hba.conf (Jelte Fennema)\n              Specifically, add support for `all`, role membership with `+`, and regular expressions with a leading slash. Any user name that matches these patterns must be double-quoted.",
      "sinceVersion": "16.0",
      "contributor": "Jelte Fennema"
    },
    {
      "title": "Allow include files in pg_hba.conf and pg_ident.conf",
      "description": "Allow include files in pg_hba.conf and pg_ident.conf (Julien Rouhaud)\n              These are controlled by `include`, `include_if_exists`, and `include_dir`. System views pg_hba_file_rules and pg_ident_file_mappings now display the file name.",
      "sinceVersion": "16.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Allow pg_hba.conf tokens to be of unlimited length",
      "description": "Allow pg_hba.conf tokens to be of unlimited length (Tom Lane)",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add rule and map numbers to the system view pg_hba_file_rules",
      "description": "Add rule and map numbers to the system view pg_hba_file_rules (Julien Rouhaud)",
      "sinceVersion": "16.0",
      "contributor": "Julien Rouhaud"
    },
    {
      "title": "Determine the default encoding from the locale when using ICU",
      "description": "Determine the default encoding from the locale when using ICU (Jeff Davis)\n              Previously the default was always `UTF-8`.",
      "sinceVersion": "16.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Have CREATE DATABASE and CREATE COLLATION's `LOCALE` options, and initdb and createdb --locale options, control non-libc collation providers",
      "description": "Have CREATE DATABASE and CREATE COLLATION's `LOCALE` options, and initdb and createdb --locale options, control non-libc collation providers (Jeff Davis)\n              Previously they only controlled libc providers.",
      "sinceVersion": "16.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Add predefined collations `unicode` and `ucs_basic`",
      "description": "Add predefined collations `unicode` and `ucs_basic` (Peter Eisentraut)\n              This only works if ICU support is enabled.",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow custom ICU collation rules to be created",
      "description": "Allow custom ICU collation rules to be created (Peter Eisentraut)\n              This is done using CREATE COLLATION's new `RULES` clause, as well as new options for CREATE DATABASE, createdb, and initdb.",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow Windows to import system locales automatically",
      "description": "Allow Windows to import system locales automatically (Juan José Santamaría Flecha)\n              Previously, only ICU locales could be imported on Windows.",
      "sinceVersion": "16.0",
      "contributor": "Juan José Santamaría Flecha"
    },
    {
      "title": "Allow logical decoding on standbys",
      "description": "Allow logical decoding on standbys (Bertrand Drouvot, Andres Freund, Amit Khandekar)\n            Snapshot WAL records are required for logical slot creation but cannot be created on standbys. To avoid delays, the new function `pg_log_standby_snapshot()()` allows creation of such records.",
      "sinceVersion": "16.0",
      "contributor": "Bertrand Drouvot, Andres Freund, Amit Khandekar"
    },
    {
      "title": "Add server variable to control how logical decoding publishers transfer changes and how subscribers apply them",
      "description": "Add server variable to control how logical decoding publishers transfer changes and how subscribers apply them (Shi Yu)\n            The variable is debug_logical_replication_streaming.",
      "sinceVersion": "16.0",
      "contributor": "Shi Yu"
    },
    {
      "title": "Allow logical replication initial table synchronization to copy rows in binary format",
      "description": "Allow logical replication initial table synchronization to copy rows in binary format (Melih Mutlu)\n            This is only possible for subscriptions marked as binary.",
      "sinceVersion": "16.0",
      "contributor": "Melih Mutlu"
    },
    {
      "title": "Allow logical replication subscribers to process only changes that have no origin",
      "description": "Allow logical replication subscribers to process only changes that have no origin (Vignesh C, Amit Kapila)\n            This can be used to avoid replication loops. This is controlled by the new `CREATE SUBSCRIPTION ... ORIGIN` option.",
      "sinceVersion": "16.0",
      "contributor": "Vignesh C, Amit Kapila"
    },
    {
      "title": "Have wal_retrieve_retry_interval operate on a per-subscription basis",
      "description": "Have wal_retrieve_retry_interval operate on a per-subscription basis (Nathan Bossart)\n            Previously the retry time was applied globally. This also adds wait events &gt;`LogicalRepLauncherDSA` and `LogicalRepLauncherHash`.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add EXPLAIN option `GENERIC_PLAN` to display the generic plan for a parameterized query",
      "description": "Add EXPLAIN option `GENERIC_PLAN` to display the generic plan for a parameterized query (Laurenz Albe)",
      "sinceVersion": "16.0",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "Allow a COPY FROM value to map to a column's `DEFAULT`",
      "description": "Allow a COPY FROM value to map to a column's `DEFAULT` (Israel Barth Rubio)",
      "sinceVersion": "16.0",
      "contributor": "Israel Barth Rubio"
    },
    {
      "title": "Allow COPY into foreign tables to add rows in batches",
      "description": "Allow COPY into foreign tables to add rows in batches (Andrey Lepikhov, Etsuro Fujita)\n            This is controlled by the postgres_fdw option batch_size.",
      "sinceVersion": "16.0",
      "contributor": "Andrey Lepikhov, Etsuro Fujita"
    },
    {
      "title": "Allow the `STORAGE` type to be specified by CREATE TABLE",
      "description": "Allow the `STORAGE` type to be specified by CREATE TABLE (Teodor Sigaev, Aleksander Alekseev)\n            Previously only ALTER TABLE could control this.",
      "sinceVersion": "16.0",
      "contributor": "Teodor Sigaev, Aleksander Alekseev"
    },
    {
      "title": "Allow truncate triggers on foreign tables",
      "description": "Allow truncate triggers on foreign tables (Yugo Nagata)",
      "sinceVersion": "16.0",
      "contributor": "Yugo Nagata"
    },
    {
      "title": "Allow VACUUM and vacuumdb to only process `TOAST` tables",
      "description": "Allow VACUUM and vacuumdb to only process `TOAST` tables (Nathan Bossart)\n            This is accomplished by having VACUUM turn off `PROCESS_MAIN` or by vacuumdb using the --no-process-main option.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add VACUUM options to skip or update all frozen statistics",
      "description": "Add VACUUM options to skip or update all frozen statistics (Tom Lane, Nathan Bossart)\n            The options are `SKIP_DATABASE_STATS` and `ONLY_DATABASE_STATS`.",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane, Nathan Bossart"
    },
    {
      "title": "Change REINDEX DATABASE and REINDEX SYSTEM to no longer require an argument",
      "description": "Change REINDEX DATABASE and REINDEX SYSTEM to no longer require an argument (Simon Riggs)\n            Previously the database name had to be specified.",
      "sinceVersion": "16.0",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Allow CREATE STATISTICS to generate a statistics name if none is specified",
      "description": "Allow CREATE STATISTICS to generate a statistics name if none is specified (Simon Riggs)",
      "sinceVersion": "16.0",
      "contributor": "Simon Riggs"
    },
    {
      "title": "Allow non-decimal integer literals",
      "description": "Allow non-decimal integer literals (Peter Eisentraut)\n            For example, `0x42F`, `0o273`, and `0b100101`.",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow NUMERIC to process hexadecimal, octal, and binary integers of any size",
      "description": "Allow NUMERIC to process hexadecimal, octal, and binary integers of any size (Dean Rasheed)\n            Previously only unquoted eight-byte integers were supported with these non-decimal bases.",
      "sinceVersion": "16.0",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Allow underscores in integer and numeric constants",
      "description": "Allow underscores in integer and numeric constants (Peter Eisentraut, Dean Rasheed)\n            This can improve readability for long strings of digits.",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut, Dean Rasheed"
    },
    {
      "title": "Accept the spelling `+infinity` in datetime input",
      "description": "Accept the spelling `+infinity` in datetime input (Vik Fearing)",
      "sinceVersion": "16.0",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Prevent the specification of `epoch` and `infinity` together with other fields in datetime strings",
      "description": "Prevent the specification of `epoch` and `infinity` together with other fields in datetime strings (Joseph Koshakow)",
      "sinceVersion": "16.0",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Remove undocumented support for date input in the form `Y`year`Mmonth`D`day`",
      "description": "Remove undocumented support for date input in the form `Y`year`Mmonth`D`day` (Joseph Koshakow)",
      "sinceVersion": "16.0",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Add functions `pg_input_is_valid",
      "description": "Add functions `pg_input_is_valid()()` and `pg_input_error_info()()` to check for type conversion errors (Tom Lane)",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow subqueries in the `FROM` clause to omit aliases",
      "description": "Allow subqueries in the `FROM` clause to omit aliases (Dean Rasheed)",
      "sinceVersion": "16.0",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Add support for enhanced numeric literals in SQL/JSON paths",
      "description": "Add support for enhanced numeric literals in SQL/JSON paths (Peter Eisentraut)\n            For example, allow hexadecimal, octal, and binary integers and underscores between digits.",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add SQL/JSON constructors",
      "description": "Add SQL/JSON constructors (Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov, Amit Langote)\n            The new functions `JSON_ARRAY()()`, `JSON_ARRAYAGG()()`, `JSON_OBJECT()()`, and `JSON_OBJECTAGG()()` are part of the SQL standard.",
      "sinceVersion": "16.0",
      "contributor": "Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov, Amit Langote"
    },
    {
      "title": "Add SQL/JSON object checks",
      "description": "Add SQL/JSON object checks (Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov, Amit Langote, Andrew Dunstan)\n            The `IS JSON` checks include checks for values, arrays, objects, scalars, and unique keys.",
      "sinceVersion": "16.0",
      "contributor": "Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov, Amit Langote, Andrew Dunstan"
    },
    {
      "title": "Allow JSON string parsing to use vector operations",
      "description": "Allow JSON string parsing to use vector operations (John Naylor)",
      "sinceVersion": "16.0",
      "contributor": "John Naylor"
    },
    {
      "title": "Improve the handling of full text highlighting function `ts_headline",
      "description": "Improve the handling of full text highlighting function `ts_headline()()` for `OR` and `NOT` expressions (Tom Lane)",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add functions to add, subtract, and generate timestamptz values in a specified time zone",
      "description": "Add functions to add, subtract, and generate timestamptz values in a specified time zone (Przemyslaw Sztoch, Gurjeet Singh)\n            The functions are `date_add()()`, `date_subtract()()`, and `generate_series()()`.",
      "sinceVersion": "16.0",
      "contributor": "Przemyslaw Sztoch, Gurjeet Singh"
    },
    {
      "title": "Change `date_trunc",
      "description": "Change `date_trunc(unit, timestamptz, time_zone)()` to be an immutable function (Przemyslaw Sztoch)\n            This allows the creation of expression indexes using this function.",
      "sinceVersion": "16.0",
      "contributor": "Przemyslaw Sztoch"
    },
    {
      "title": "Add server variable `SYSTEM_USER`",
      "description": "Add server variable `SYSTEM_USER` (Bertrand Drouvot)\n            This reports the authentication method and its authenticated user.",
      "sinceVersion": "16.0",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Add functions `array_sample",
      "description": "Add functions `array_sample()()` and `array_shuffle()()` (Martin Kalcher)",
      "sinceVersion": "16.0",
      "contributor": "Martin Kalcher"
    },
    {
      "title": "Add aggregate function `ANY_VALUE",
      "description": "Add aggregate function `ANY_VALUE()()` which returns any value from a set (Vik Fearing)",
      "sinceVersion": "16.0",
      "contributor": "Vik Fearing"
    },
    {
      "title": "Add function `random_normal",
      "description": "Add function `random_normal()()` to supply normally-distributed random numbers (Paul Ramsey)",
      "sinceVersion": "16.0",
      "contributor": "Paul Ramsey"
    },
    {
      "title": "Add error function `erf",
      "description": "Add error function `erf()()` and its complement `erfc()()` (Dean Rasheed)",
      "sinceVersion": "16.0",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Improve the accuracy of numeric `power",
      "description": "Improve the accuracy of numeric `power()()` for integer exponents (Dean Rasheed)",
      "sinceVersion": "16.0",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Add `XMLSERIALIZE",
      "description": "Add `XMLSERIALIZE()()` option `INDENT` to pretty-print its output (Jim Jones)",
      "sinceVersion": "16.0",
      "contributor": "Jim Jones"
    },
    {
      "title": "Change `pg_collation_actual_version",
      "description": "Change `pg_collation_actual_version()()` to return a reasonable value for the default collation (Jeff Davis)\n            Previously it returned `NULL`.",
      "sinceVersion": "16.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Allow `pg_read_file",
      "description": "Allow `pg_read_file()()` and `pg_read_binary_file()()` to ignore missing files (Kyotaro Horiguchi)",
      "sinceVersion": "16.0",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Add byte specification",
      "description": "Add byte specification (`B`) to `pg_size_bytes()()` (Peter Eisentraut)",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow `to_reg",
      "description": "Allow `to_reg()`* functions to accept numeric OIDs as input (Tom Lane)",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add the ability to get the current function's OID in PL/pgSQL",
      "description": "Add the ability to get the current function's OID in PL/pgSQL (Pavel Stehule)\n            This is accomplished with GET DIAGNOSTICS variable = PG_ROUTINE_OID.",
      "sinceVersion": "16.0",
      "contributor": "Pavel Stehule"
    },
    {
      "title": "Add libpq connection option require_auth to specify a list of acceptable authentication methods",
      "description": "Add libpq connection option require_auth to specify a list of acceptable authentication methods (Jacob Champion)\n            This can also be used to disallow certain authentication methods.",
      "sinceVersion": "16.0",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Allow multiple libpq-specified hosts to be randomly selected",
      "description": "Allow multiple libpq-specified hosts to be randomly selected (Jelte Fennema)\n            This is enabled with `load_balance_hosts=random` and can be used for load balancing.",
      "sinceVersion": "16.0",
      "contributor": "Jelte Fennema"
    },
    {
      "title": "Add libpq option sslcertmode to control transmission of the client certificate",
      "description": "Add libpq option sslcertmode to control transmission of the client certificate (Jacob Champion)\n            The option values are `disable`, `allow`, and `require`.",
      "sinceVersion": "16.0",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Allow libpq to use the system certificate pool for certificate verification",
      "description": "Allow libpq to use the system certificate pool for certificate verification (Jacob Champion, Thomas Habets)\n            This is enabled with `sslrootcert=system`, which also enables `sslmode=verify-full`.",
      "sinceVersion": "16.0",
      "contributor": "Jacob Champion, Thomas Habets"
    },
    {
      "title": "Allow ECPG variable declarations to use typedef names that match unreserved SQL keywords",
      "description": "Allow ECPG variable declarations to use typedef names that match unreserved SQL keywords (Tom Lane)\n            This change does prevent keywords which match C typedef names from being processed as keywords in later EXEC SQL blocks.",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow psql to control the maximum width of header lines in expanded format",
      "description": "Allow psql to control the maximum width of header lines in expanded format (Platon Pronko)\n              This is controlled by xheader_width.",
      "sinceVersion": "16.0",
      "contributor": "Platon Pronko"
    },
    {
      "title": "Add psql command \\drg to show role membership details",
      "description": "Add psql command \\drg to show role membership details (Pavel Luzanov)\n              The `Member of` output column has been removed from \\du and \\dg because this new command displays this information in more detail.",
      "sinceVersion": "16.0",
      "contributor": "Pavel Luzanov"
    },
    {
      "title": "Allow psql's access privilege commands to show system objects",
      "description": "Allow psql's access privilege commands to show system objects (Nathan Bossart)\n              The options are \\dpS and \\zS.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add `FOREIGN` designation to psql \\d+ for foreign table children and partitions",
      "description": "Add `FOREIGN` designation to psql \\d+ for foreign table children and partitions (Ian Lawrence Barwick)",
      "sinceVersion": "16.0",
      "contributor": "Ian Lawrence Barwick"
    },
    {
      "title": "Prevent \\df+ from showing function source code",
      "description": "Prevent \\df+ from showing function source code (Isaac Morland)\n              Function bodies are more easily viewed with \\sf.",
      "sinceVersion": "16.0",
      "contributor": "Isaac Morland"
    },
    {
      "title": "Allow psql to submit queries using the extended query protocol",
      "description": "Allow psql to submit queries using the extended query protocol (Peter Eisentraut)\n              Passing arguments to such queries is done using the new psql \\bind command.",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Allow psql \\watch to limit the number of executions",
      "description": "Allow psql \\watch to limit the number of executions (Andrey Borodin)\n              The \\watch options can now be named when specified.",
      "sinceVersion": "16.0",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Detect invalid values for psql \\watch, and allow zero to specify no delay",
      "description": "Detect invalid values for psql \\watch, and allow zero to specify no delay (Andrey Borodin)",
      "sinceVersion": "16.0",
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Allow psql scripts to obtain the exit status of shell commands and queries",
      "description": "Allow psql scripts to obtain the exit status of shell commands and queries (Corey Huinker, Tom Lane)\n              The new psql control variables are `SHELL_ERROR` and `SHELL_EXIT_CODE`.",
      "sinceVersion": "16.0",
      "contributor": "Corey Huinker, Tom Lane"
    },
    {
      "title": "Various psql tab completion improvements",
      "description": "Various psql tab completion improvements (Vignesh C, Aleksander Alekseev, Dagfinn Ilmari Mannsåker, Shi Yu, Michael Paquier, Ken Kato, Peter Smith)",
      "sinceVersion": "16.0",
      "contributor": "Vignesh C, Aleksander Alekseev, Dagfinn Ilmari Mannsåker, Shi Yu, Michael Paquier, Ken Kato, Peter Smith"
    },
    {
      "title": "Add pg_dump control of dumping child tables and partitions",
      "description": "Add pg_dump control of dumping child tables and partitions (Gilles Darold)\n              The new options are --table-and-children, --exclude-table-and-children, and --exclude-table-data-and-children.",
      "sinceVersion": "16.0",
      "contributor": "Gilles Darold"
    },
    {
      "title": "Add LZ4 and Zstandard compression to pg_dump",
      "description": "Add LZ4 and Zstandard compression to pg_dump (Georgios Kokolatos, Justin Pryzby)",
      "sinceVersion": "16.0",
      "contributor": "Georgios Kokolatos, Justin Pryzby"
    },
    {
      "title": "Allow pg_dump and pg_basebackup to use `long` mode for compression",
      "description": "Allow pg_dump and pg_basebackup to use `long` mode for compression (Justin Pryzby)",
      "sinceVersion": "16.0",
      "contributor": "Justin Pryzby"
    },
    {
      "title": "Improve pg_dump to accept a more consistent compression syntax",
      "description": "Improve pg_dump to accept a more consistent compression syntax (Georgios Kokolatos)\n              Options like --compress=gzip:5.",
      "sinceVersion": "16.0",
      "contributor": "Georgios Kokolatos"
    },
    {
      "title": "Add initdb option to set server variables for the duration of initdb and all future server starts",
      "description": "Add initdb option to set server variables for the duration of initdb and all future server starts (Tom Lane)\n            The option is -c name=value.",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow control of vacuumdb schema processing",
      "description": "Allow control of vacuumdb schema processing (Gilles Darold)\n            These are controlled by options --schema and --exclude-schema.",
      "sinceVersion": "16.0",
      "contributor": "Gilles Darold"
    },
    {
      "title": "Have pg_upgrade set the new cluster's locale and encoding",
      "description": "Have pg_upgrade set the new cluster's locale and encoding (Jeff Davis)\n            This removes the requirement that the new cluster be created with the same locale and encoding settings.",
      "sinceVersion": "16.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Add pg_upgrade option to specify the default transfer mode",
      "description": "Add pg_upgrade option to specify the default transfer mode (Peter Eisentraut)\n            The option is --copy.",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Improve pg_basebackup to accept numeric compression options",
      "description": "Improve pg_basebackup to accept numeric compression options (Georgios Kokolatos, Michael Paquier)\n            Options like --compress=server-5 are now supported.",
      "sinceVersion": "16.0",
      "contributor": "Georgios Kokolatos, Michael Paquier"
    },
    {
      "title": "Fix pg_basebackup to handle tablespaces stored in the PGDATA directory",
      "description": "Fix pg_basebackup to handle tablespaces stored in the PGDATA directory (Robert Haas)",
      "sinceVersion": "16.0",
      "contributor": "Robert Haas"
    },
    {
      "title": "Add pg_waldump option --save-fullpage to dump full page images",
      "description": "Add pg_waldump option --save-fullpage to dump full page images (David Christensen)",
      "sinceVersion": "16.0",
      "contributor": "David Christensen"
    },
    {
      "title": "Allow pg_waldump options -t/--timeline to accept hexadecimal values",
      "description": "Allow pg_waldump options -t/--timeline to accept hexadecimal values (Peter Eisentraut)",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add support for progress reporting to pg_verifybackup",
      "description": "Add support for progress reporting to pg_verifybackup (Masahiko Sawada)",
      "sinceVersion": "16.0",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Allow pg_rewind to properly track timeline changes",
      "description": "Allow pg_rewind to properly track timeline changes (Heikki Linnakangas)\n            Previously if pg_rewind was run after a timeline switch but before a checkpoint was issued, it might incorrectly determine that a rewind was unnecessary.",
      "sinceVersion": "16.0",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Have pg_receivewal and pg_recvlogical cleanly exit on `SIGTERM`",
      "description": "Have pg_receivewal and pg_recvlogical cleanly exit on `SIGTERM` (Christoph Berg)\n            This signal is often used by systemd.",
      "sinceVersion": "16.0",
      "contributor": "Christoph Berg"
    },
    {
      "title": "Build ICU support by default",
      "description": "Build ICU support by default (Jeff Davis)\n            This removes build flag --with-icu and adds flag --without-icu.",
      "sinceVersion": "16.0",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Add support for SSE2",
      "description": "Add support for SSE2 (Streaming SIMD Extensions 2) vector operations on x86-64 architectures (John Naylor)",
      "sinceVersion": "16.0",
      "contributor": "John Naylor"
    },
    {
      "title": "Add support for Advanced SIMD",
      "description": "Add support for Advanced SIMD (Single Instruction Multiple Data) (NEON) instructions on ARM architectures (Nathan Bossart)",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Have Windows binaries built with MSVC use `RandomizedBaseAddress`",
      "description": "Have Windows binaries built with MSVC use `RandomizedBaseAddress` (ASLR) (Michael Paquier)\n            This was already enabled on MinGW builds.",
      "sinceVersion": "16.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Prevent extension libraries from exporting their symbols by default",
      "description": "Prevent extension libraries from exporting their symbols by default (Andres Freund, Tom Lane)\n            Functions that need to be called from the core backend or other extensions must now be explicitly marked `PGDLLEXPORT`.",
      "sinceVersion": "16.0",
      "contributor": "Andres Freund, Tom Lane"
    },
    {
      "title": "Require Windows 10 or newer versions",
      "description": "Require Windows 10 or newer versions (Michael Paquier, Juan José Santamaría Flecha)\n            Previously Windows Vista and Windows XP were supported.",
      "sinceVersion": "16.0",
      "contributor": "Michael Paquier, Juan José Santamaría Flecha"
    },
    {
      "title": "Require Perl version 5.14 or later",
      "description": "Require Perl version 5.14 or later (John Naylor)",
      "sinceVersion": "16.0",
      "contributor": "John Naylor"
    },
    {
      "title": "Require Bison version 2.3 or later",
      "description": "Require Bison version 2.3 or later (John Naylor)",
      "sinceVersion": "16.0",
      "contributor": "John Naylor"
    },
    {
      "title": "Require Flex version 2.5.35 or later",
      "description": "Require Flex version 2.5.35 or later (John Naylor)",
      "sinceVersion": "16.0",
      "contributor": "John Naylor"
    },
    {
      "title": "Require MIT Kerberos for GSSAPI support",
      "description": "Require MIT Kerberos for GSSAPI support (Stephen Frost)",
      "sinceVersion": "16.0",
      "contributor": "Stephen Frost"
    },
    {
      "title": "Remove support for Visual Studio 2013",
      "description": "Remove support for Visual Studio 2013 (Michael Paquier)",
      "sinceVersion": "16.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Remove support for HP-UX",
      "description": "Remove support for HP-UX (Thomas Munro)",
      "sinceVersion": "16.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Remove support for HP/Intel Itanium",
      "description": "Remove support for HP/Intel Itanium (Thomas Munro)",
      "sinceVersion": "16.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Remove support for M68K, M88K, M32R, and SuperH CPU architectures",
      "description": "Remove support for M68K, M88K, M32R, and SuperH CPU architectures (Thomas Munro)",
      "sinceVersion": "16.0",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Remove libpq support for SCM credential authentication",
      "description": "Remove libpq support for SCM credential authentication (Michael Paquier)\n            Backend support for this authentication method was removed in PostgresSQL 9.1.",
      "sinceVersion": "16.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add meson build system",
      "description": "Add meson build system (Andres Freund, Nazir Bilal Yavuz, Peter Eisentraut)\n            This eventually will replace the Autoconf and Windows-based MSVC build systems.",
      "sinceVersion": "16.0",
      "contributor": "Andres Freund, Nazir Bilal Yavuz, Peter Eisentraut"
    },
    {
      "title": "Allow control of the location of the openssl binary used by the build system",
      "description": "Allow control of the location of the openssl binary used by the build system (Peter Eisentraut)\n            Make finding openssl program a configure or meson option",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Add build option to allow testing of small table segment sizes",
      "description": "Add build option to allow testing of small table segment sizes (Andres Freund)\n            The build options are --with-segsize-blocks and -Dsegsize_blocks.",
      "sinceVersion": "16.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Add pgindent options",
      "description": "Add pgindent options (Andrew Dunstan)\n            The new options are --show-diff, --silent-diff, --commit, and --help, and allow multiple --exclude options. Also require the typedef file to be explicitly specified. Options --code-base and --build were also removed.",
      "sinceVersion": "16.0",
      "contributor": "Andrew Dunstan"
    },
    {
      "title": "Add pg_bsd_indent source code to the main tree",
      "description": "Add pg_bsd_indent source code to the main tree (Tom Lane)",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve make_ctags and make_etags",
      "description": "Improve make_ctags and make_etags (Yugo Nagata)",
      "sinceVersion": "16.0",
      "contributor": "Yugo Nagata"
    },
    {
      "title": "Adjust pg_attribute columns for efficiency",
      "description": "Adjust pg_attribute columns for efficiency (Peter Eisentraut)",
      "sinceVersion": "16.0",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Improve use of extension-based indexes on boolean columns",
      "description": "Improve use of extension-based indexes on boolean columns (Zongliang Quan, Tom Lane)",
      "sinceVersion": "16.0",
      "contributor": "Zongliang Quan, Tom Lane"
    },
    {
      "title": "Add support for Daitch-Mokotoff Soundex to fuzzystrmatch",
      "description": "Add support for Daitch-Mokotoff Soundex to fuzzystrmatch (Dag Lem)",
      "sinceVersion": "16.0",
      "contributor": "Dag Lem"
    },
    {
      "title": "Allow auto_explain to log values passed to parameterized statements",
      "description": "Allow auto_explain to log values passed to parameterized statements (Dagfinn Ilmari Mannsåker)\n            This affects queries using server-side PREPARE/EXECUTE and client-side parse/bind. Logging is controlled by `auto_explain.log_parameter_max_length`; by default query parameters will be logged with no length restriction.",
      "sinceVersion": "16.0",
      "contributor": "Dagfinn Ilmari Mannsåker"
    },
    {
      "title": "Have auto_explain's log_verbose mode honor the value of compute_query_id",
      "description": "Have auto_explain's log_verbose mode honor the value of compute_query_id (Atsushi Torikoshi)\n            Previously even if compute_query_id was enabled, log_verbose was not showing the query identifier.",
      "sinceVersion": "16.0",
      "contributor": "Atsushi Torikoshi"
    },
    {
      "title": "Change the maximum length of ltree labels from 256 to 1000 and allow hyphens",
      "description": "Change the maximum length of ltree labels from 256 to 1000 and allow hyphens (Garen Torikian)",
      "sinceVersion": "16.0",
      "contributor": "Garen Torikian"
    },
    {
      "title": "Have pg_stat_statements normalize constants used in utility commands",
      "description": "Have pg_stat_statements normalize constants used in utility commands (Michael Paquier)\n            Previously constants appeared instead of placeholders, e.g., `$1`.",
      "sinceVersion": "16.0",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Add pg_walinspect function `pg_get_wal_block_info",
      "description": "Add pg_walinspect function `pg_get_wal_block_info()()` to report WAL block information (Michael Paquier, Melanie Plageman, Bharath Rupireddy)",
      "sinceVersion": "16.0",
      "contributor": "Michael Paquier, Melanie Plageman, Bharath Rupireddy"
    },
    {
      "title": "Change how pg_walinspect functions `pg_get_wal_records_info",
      "description": "Change how pg_walinspect functions `pg_get_wal_records_info()()` and `pg_get_wal_stats()()` interpret ending LSNs (Bharath Rupireddy)\n            Previously ending LSNs which represent nonexistent WAL locations would generate an error, while they will now be interpreted as the end of the WAL.",
      "sinceVersion": "16.0",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Add detailed descriptions of WAL records in pg_walinspect and pg_waldump",
      "description": "Add detailed descriptions of WAL records in pg_walinspect and pg_waldump (Melanie Plageman, Peter Geoghegan)",
      "sinceVersion": "16.0",
      "contributor": "Melanie Plageman, Peter Geoghegan"
    },
    {
      "title": "Add pageinspect function `bt_multi_page_stats",
      "description": "Add pageinspect function `bt_multi_page_stats()()` to report statistics on multiple pages (Hamid Akhtar)\n            This is similar to `bt_page_stats()()` except it can report on a range of pages.",
      "sinceVersion": "16.0",
      "contributor": "Hamid Akhtar"
    },
    {
      "title": "Add empty range output column to pageinspect function `brin_page_items",
      "description": "Add empty range output column to pageinspect function `brin_page_items()()` (Tomas Vondra)",
      "sinceVersion": "16.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Redesign archive modules to be more flexible",
      "description": "Redesign archive modules to be more flexible (Nathan Bossart)\n            Initialization changes will require modules written for older versions of Postgres to be updated.",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Correct inaccurate pg_stat_statements row tracking extended query protocol statements",
      "description": "Correct inaccurate pg_stat_statements row tracking extended query protocol statements (Sami Imseih)",
      "sinceVersion": "16.0",
      "contributor": "Sami Imseih"
    },
    {
      "title": "Add pg_buffercache function `pg_buffercache_usage_counts",
      "description": "Add pg_buffercache function `pg_buffercache_usage_counts()()` to report usage totals (Nathan Bossart)",
      "sinceVersion": "16.0",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Add pg_buffercache function `pg_buffercache_summary",
      "description": "Add pg_buffercache function `pg_buffercache_summary()()` to report summarized buffer statistics (Melih Mutlu)",
      "sinceVersion": "16.0",
      "contributor": "Melih Mutlu"
    },
    {
      "title": "Allow the schemas of required extensions to be referenced in extension scripts using the new syntax `@extschema:referenced_extension_name@`",
      "description": "Allow the schemas of required extensions to be referenced in extension scripts using the new syntax `@extschema:referenced_extension_name@` (Regina Obe)",
      "sinceVersion": "16.0",
      "contributor": "Regina Obe"
    },
    {
      "title": "Allow required extensions to be marked as non-relocatable using `no_relocate`",
      "description": "Allow required extensions to be marked as non-relocatable using `no_relocate` (Regina Obe)\n            This allows `@extschema:referenced_extension_name@` to be treated as a constant for the lifetime of the extension.",
      "sinceVersion": "16.0",
      "contributor": "Regina Obe"
    },
    {
      "title": "Allow postgres_fdw to do aborts in parallel",
      "description": "Allow postgres_fdw to do aborts in parallel (Etsuro Fujita)\n              This is enabled with postgres_fdw option parallel_abort.",
      "sinceVersion": "16.0",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Make ANALYZE on foreign postgres_fdw tables more efficient",
      "description": "Make ANALYZE on foreign postgres_fdw tables more efficient (Tomas Vondra)\n              The postgres_fdw option analyze_sampling controls the sampling method.",
      "sinceVersion": "16.0",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Restrict shipment of reg* type constants in postgres_fdw to those referencing built-in objects or extensions marked as shippable",
      "description": "Restrict shipment of reg* type constants in postgres_fdw to those referencing built-in objects or extensions marked as shippable (Tom Lane)",
      "sinceVersion": "16.0",
      "contributor": "Tom Lane"
    },
    {
      "title": "Have postgres_fdw and dblink handle interrupts during connection establishment",
      "description": "Have postgres_fdw and dblink handle interrupts during connection establishment (Andres Freund)",
      "sinceVersion": "16.0",
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions",
      "description": "Fix handling of unknown-type arguments in `DISTINCT` \"any\" aggregate functions (Tom Lane)\n          This error led to a text-type value being interpreted as an unknown-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the text value.\n          The PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "sinceVersion": "16.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix misbehavior during recursive page split in GiST index build (Heikki Linnakangas)\n          Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "sinceVersion": "16.1",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Prevent de-duplication of btree index entries for interval columns",
      "description": "Prevent de-duplication of btree index entries for interval columns (Noah Misch)\n          There are interval values that are distinguishable but compare equal, for example `24:00:00` and `1 day`. This breaks assumptions made by btree de-duplication, so interval columns need to be excluded from de-duplication. This oversight can cause incorrect results from index-only scans. Moreover, after updating amcheck will report an error for almost all such indexes. Users should reindex any btree indexes on interval columns.",
      "sinceVersion": "16.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Process date values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "Process date values more sanely in BRIN `datetime_minmax_multi_ops` indexes (Tomas Vondra)\n          The distance calculation for dates was backward, causing poor decisions about which entries to merge. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on date columns is advisable.",
      "sinceVersion": "16.1",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Process large timestamp and timestamptz values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "Process large timestamp and timestamptz values more sanely in BRIN `datetime_minmax_multi_ops` indexes (Tomas Vondra)\n          Infinities were mistakenly treated as having distance zero rather than a large distance from other values, causing poor decisions about which entries to merge. Also, finite-but-very-large values (near the endpoints of the representable timestamp range) could result in internal overflows, again causing poor decisions. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on timestamp and timestamptz columns is advisable if the column contains, or has contained, infinities or large finite values.",
      "sinceVersion": "16.1",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Avoid calculation overflows in BRIN `interval_minmax_multi_ops` indexes with extreme interval values",
      "description": "Avoid calculation overflows in BRIN `interval_minmax_multi_ops` indexes with extreme interval values (Tomas Vondra)\n          This bug might have caused unexpected failures while trying to insert large interval values into such an index.",
      "sinceVersion": "16.1",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys (David Rowley)\n          Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "sinceVersion": "16.1",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix inconsistent rechecking of concurrently-updated rows during MERGE",
      "description": "Fix inconsistent rechecking of concurrently-updated rows during MERGE (Dean Rasheed)\n          In `READ COMMITTED` mode, an update that finds that its target row was just updated by a concurrent transaction will recheck the query's `WHERE` conditions on the updated row. MERGE failed to ensure that the proper rows of other joined tables were used during this recheck, possibly resulting in incorrect decisions about whether the newly-updated row should be updated again by MERGE.",
      "sinceVersion": "16.1",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Correctly identify the target table in an inherited UPDATE/DELETE/MERGE even when the parent table is excluded by constraints",
      "description": "Correctly identify the target table in an inherited UPDATE/DELETE/MERGE even when the parent table is excluded by constraints (Amit Langote, Tom Lane)\n          If the initially-named table is excluded by constraints, but not all its inheritance descendants are, the first non-excluded descendant was identified as the primary target table. This would lead to firing statement-level triggers associated with that table, rather than the initially-named table as should happen. In v16, the same oversight could also lead to “invalid perminfoindex 0 in RTE with relid NNNN” errors.",
      "sinceVersion": "16.1",
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses (Peter Geoghegan)\n          When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "sinceVersion": "16.1",
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Fix intra-query memory leak in Memoize execution",
      "description": "Fix intra-query memory leak in Memoize execution (Orlov Aleksej, David Rowley)",
      "sinceVersion": "16.1",
      "contributor": "Orlov Aleksej, David Rowley"
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows",
      "description": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane)",
      "sinceVersion": "16.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema",
      "description": "Don't crash if `cursor_to_xmlschema()()` is applied to a non-data-returning Portal (Boyu Yang)",
      "sinceVersion": "16.1",
      "contributor": "Boyu Yang"
    },
    {
      "title": "Fix improper sharing of origin filter condition across successive `pg_logical_slot_get_changes",
      "description": "Fix improper sharing of origin filter condition across successive `pg_logical_slot_get_changes()()` calls (Hou Zhijie)\n          The origin condition set by one call of this function would be re-used by later calls that did not specify the origin argument. This was not intended.",
      "sinceVersion": "16.1",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Throw the intended error if `pgrowlocks",
      "description": "Throw the intended error if `pgrowlocks()()` is applied to a partitioned table (David Rowley)\n          Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "sinceVersion": "16.1",
      "contributor": "David Rowley"
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Handle invalid indexes more cleanly in assorted SQL functions (Noah Misch)\n          Report an error if `pgstatindex()()`, `pgstatginindex()()`, `pgstathashindex()()`, or `pgstattuple()()` is applied to an invalid index. If `brin_desummarize_range()()`, `brin_summarize_new_values()()`, `brin_summarize_range()()`, or `gin_clean_pending_list()()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed CREATE INDEX had left behind.",
      "sinceVersion": "16.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector",
      "description": "Avoid premature memory allocation failure with long inputs to `to_tsvector()()` (Tom Lane)",
      "sinceVersion": "16.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix over-allocation of the constructed tsvector in `tsvectorrecv",
      "description": "Fix over-allocation of the constructed tsvector in `tsvectorrecv()()` (Denis Erokhin)\n          If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished tsvector. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "sinceVersion": "16.1",
      "contributor": "Denis Erokhin"
    },
    {
      "title": "Improve checks for corrupt PGLZ compressed data",
      "description": "Improve checks for corrupt PGLZ compressed data (Flavien Guedez)",
      "sinceVersion": "16.1",
      "contributor": "Flavien Guedez"
    },
    {
      "title": "Fix ALTER SUBSCRIPTION so that a commanded change in the `run_as_owner` option is actually applied",
      "description": "Fix ALTER SUBSCRIPTION so that a commanded change in the `run_as_owner` option is actually applied (Hou Zhijie)",
      "sinceVersion": "16.1",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Fix bulk table insertion into partitioned tables",
      "description": "Fix bulk table insertion into partitioned tables (Andres Freund)\n          Improper sharing of insertion state across partitions could result in failures during COPY FROM, typically manifesting as “could not read block NNNN in file XXXX: read only 0 of 8192 bytes” errors.",
      "sinceVersion": "16.1",
      "contributor": "Andres Freund"
    },
    {
      "title": "In COPY FROM, avoid evaluating column default values that will not be needed by the command",
      "description": "In COPY FROM, avoid evaluating column default values that will not be needed by the command (Laurenz Albe)\n          This avoids a possible error if the default value isn't actually valid for the column, or if the default's expression would fail in the current execution context. Such edge cases sometimes arise while restoring dumps, for example. Previous releases did not fail in this situation, so prevent v16 from doing so.",
      "sinceVersion": "16.1",
      "contributor": "Laurenz Albe"
    },
    {
      "title": "In COPY FROM, fail cleanly when an unsupported encoding conversion is needed",
      "description": "In COPY FROM, fail cleanly when an unsupported encoding conversion is needed (Tom Lane)\n          Recent refactoring accidentally removed the intended error check for this, such that it ended in “cache lookup failed for function 0” instead of a useful error message.",
      "sinceVersion": "16.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value",
      "description": "Avoid crash in EXPLAIN if a parameter marked to be displayed by EXPLAIN has a NULL boot-time value (Xing Guo, Aleksander Alekseev, Tom Lane)\n          No built-in parameter fits this description, but an extension could define such a parameter.",
      "sinceVersion": "16.1",
      "contributor": "Xing Guo, Aleksander Alekseev, Tom Lane"
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables (Tom Lane)\n          This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "sinceVersion": "16.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system",
      "description": "Avoid improper response to shutdown signals in child processes just forked by `system()()` (Nathan Bossart)\n          This fix avoids a race condition in which a child process that has been forked off by `system()()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "sinceVersion": "16.1",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Cope with torn reads of pg_control in frontend programs",
      "description": "Cope with torn reads of pg_control in frontend programs (Thomas Munro)\n          On some file systems, reading pg_control may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "sinceVersion": "16.1",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid torn reads of pg_control in relevant SQL functions",
      "description": "Avoid torn reads of pg_control in relevant SQL functions (Thomas Munro)\n          Acquire the appropriate lock before reading pg_control, to ensure we get a consistent view of that file.",
      "sinceVersion": "16.1",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix “could not find pathkey item to sort” errors occurring while planning aggregate functions with `ORDER BY` or `DISTINCT` options",
      "description": "Fix “could not find pathkey item to sort” errors occurring while planning aggregate functions with `ORDER BY` or `DISTINCT` options (David Rowley)",
      "sinceVersion": "16.1",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "Avoid integer overflow when computing size of backend activity string array (Jakub Wartak)\n          On 64-bit machines we will allow values of track_activity_query_size large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "sinceVersion": "16.1",
      "contributor": "Jakub Wartak"
    },
    {
      "title": "Fix briefly showing inconsistent progress statistics for ANALYZE on inherited tables",
      "description": "Fix briefly showing inconsistent progress statistics for ANALYZE on inherited tables (Heikki Linnakangas)\n          The block-level counters should be reset to zero at the same time we update the current-relation field.",
      "sinceVersion": "16.1",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix the background writer to report any WAL writes it makes to the statistics counters",
      "description": "Fix the background writer to report any WAL writes it makes to the statistics counters (Nazir Bilal Yavuz)",
      "sinceVersion": "16.1",
      "contributor": "Nazir Bilal Yavuz"
    },
    {
      "title": "Fix confusion about forced-flush behavior in `pgstat_report_wal",
      "description": "Fix confusion about forced-flush behavior in `pgstat_report_wal()()` (Ryoga Yoshida, Michael Paquier)\n          This could result in some statistics about WAL I/O being forgotten in a shutdown.",
      "sinceVersion": "16.1",
      "contributor": "Ryoga Yoshida, Michael Paquier"
    },
    {
      "title": "Fix statistics tracking of temporary-table extensions",
      "description": "Fix statistics tracking of temporary-table extensions (Karina Litskevich, Andres Freund)\n          These were counted as normal-table writes when they should be counted as temp-table writes.",
      "sinceVersion": "16.1",
      "contributor": "Karina Litskevich, Andres Freund"
    },
    {
      "title": "When track_io_timing is enabled, include the time taken by relation extension operations as write time",
      "description": "When track_io_timing is enabled, include the time taken by relation extension operations as write time (Nazir Bilal Yavuz)",
      "sinceVersion": "16.1",
      "contributor": "Nazir Bilal Yavuz"
    },
    {
      "title": "Track the dependencies of cached CALL statements, and re-plan them when needed",
      "description": "Track the dependencies of cached CALL statements, and re-plan them when needed (Tom Lane)\n          DDL commands, such as replacement of a function that has been inlined into a CALL argument, can create the need to re-plan a CALL that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "sinceVersion": "16.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid a possible pfree-a-NULL-pointer crash after an error in OpenSSL connection setup",
      "description": "Avoid a possible pfree-a-NULL-pointer crash after an error in OpenSSL connection setup (Sergey Shinderuk)",
      "sinceVersion": "16.1",
      "contributor": "Sergey Shinderuk"
    },
    {
      "title": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels",
      "description": "Track nesting depth correctly when inspecting RECORD-type Vars from outer query levels (Richard Guo)\n          This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "sinceVersion": "16.1",
      "contributor": "Richard Guo"
    },
    {
      "title": "Track hash function and negator function dependencies of ScalarArrayOpExpr plan nodes",
      "description": "Track hash function and negator function dependencies of ScalarArrayOpExpr plan nodes (David Rowley)\n          In most cases this oversight was harmless, since these functions would be unlikely to disappear while the node's original operator remains present.",
      "sinceVersion": "16.1",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix error-handling bug in RECORD type cache management",
      "description": "Fix error-handling bug in RECORD type cache management (Thomas Munro)\n          An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "sinceVersion": "16.1",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Treat out-of-memory failures as fatal while reading WAL (Michael Paquier)\n          Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "sinceVersion": "16.1",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field",
      "description": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier)",
      "sinceVersion": "16.1",
      "contributor": "Thomas Munro, Michael Paquier"
    },
    {
      "title": "Fix “could not duplicate handle” error occurring on Windows when min_dynamic_shared_memory is set above zero",
      "description": "Fix “could not duplicate handle” error occurring on Windows when min_dynamic_shared_memory is set above zero (Thomas Munro)",
      "sinceVersion": "16.1",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish",
      "description": "Fix order of operations in `GenericXLogFinish()` (Jeff Davis)\n          This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (contrib/bloom does, for example).",
      "sinceVersion": "16.1",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling",
      "description": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin)",
      "sinceVersion": "16.1",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix pg_dump to dump the new `run_as_owner` option of subscriptions",
      "description": "Fix pg_dump to dump the new `run_as_owner` option of subscriptions (Philip Warner)\n          Due to this oversight, subscriptions would always be restored with `run_as_owner` set to `false`, which is not equivalent to their behavior in pre-v16 releases.",
      "sinceVersion": "16.1",
      "contributor": "Philip Warner"
    },
    {
      "title": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Fix pg_restore so that selective restores will include both table-level and column-level ACLs for selected tables (Euler Taveira, Tom Lane)\n          Formerly, only the table-level ACL would get restored if both types were present.",
      "sinceVersion": "16.1",
      "contributor": "Euler Taveira, Tom Lane"
    },
    {
      "title": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types",
      "description": "Add logic to pg_upgrade to check for use of abstime, reltime, and tinterval data types (Álvaro Herrera)\n          These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "sinceVersion": "16.1",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows",
      "description": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch)",
      "sinceVersion": "16.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix vacuumdb's handling of multiple -N switches",
      "description": "Fix vacuumdb's handling of multiple -N switches (Nathan Bossart, Kuwamura Masaki)\n          Multiple -N switches should exclude tables in multiple schemas, but in fact excluded nothing due to faulty construction of a generated query.",
      "sinceVersion": "16.1",
      "contributor": "Nathan Bossart, Kuwamura Masaki"
    },
    {
      "title": "Fix vacuumdb to honor its --buffer-usage-limit option in analyze-only mode",
      "description": "Fix vacuumdb to honor its --buffer-usage-limit option in analyze-only mode (Ryoga Yoshida, David Rowley)",
      "sinceVersion": "16.1",
      "contributor": "Ryoga Yoshida, David Rowley"
    },
    {
      "title": "In contrib/amcheck, do not report interrupted page deletion as corruption",
      "description": "In contrib/amcheck, do not report interrupted page deletion as corruption (Noah Misch)\n          This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before VACUUM had cleaned things up.",
      "sinceVersion": "16.1",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed",
      "description": "Fix failure of contrib/btree_gin indexes on interval columns, when an indexscan using the `&lt;` or `&lt;=` operator is performed (Dean Rasheed)\n          Such an indexscan failed to return all the entries it should.",
      "sinceVersion": "16.1",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Add support for LLVM 16 and 17",
      "description": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "16.1",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Suppress assorted build-time warnings on recent macOS (Tom Lane)\n          Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the -multiply_defined suppress linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "sinceVersion": "16.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "When building contrib/unaccent's rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set",
      "description": "When building contrib/unaccent's rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set (Japin Li)",
      "sinceVersion": "16.1",
      "contributor": "Japin Li"
    },
    {
      "title": "Remove `PHOT`",
      "description": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list (Tom Lane)\n          Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "sinceVersion": "16.1",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "Fix memory leak when performing JIT inlining (Andres Freund, Daniel Gustafsson)\n          There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "sinceVersion": "16.2",
      "contributor": "Andres Freund, Daniel Gustafsson"
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Avoid generating incorrect partitioned-join plans (Richard Guo)\n          Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "sinceVersion": "16.2",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars (Tom Lane)\n          This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix misprocessing of window function run conditions",
      "description": "Fix misprocessing of window function run conditions (Richard Guo)\n          This oversight could lead to “WindowFunc not found in subplan target lists” errors.",
      "sinceVersion": "16.2",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix detection of inner-side uniqueness for Memoize plans",
      "description": "Fix detection of inner-side uniqueness for Memoize plans (Richard Guo)\n          This mistake could lead to “cache entry already complete” errors.",
      "sinceVersion": "16.2",
      "contributor": "Richard Guo"
    },
    {
      "title": "Fix computation of nullingrels when constant-folding field selection",
      "description": "Fix computation of nullingrels when constant-folding field selection (Richard Guo)\n          Failure to do this led to errors like “wrong varnullingrels (b) (expected (b 3)) for Var 2/2”.",
      "sinceVersion": "16.2",
      "contributor": "Richard Guo"
    },
    {
      "title": "Skip inappropriate actions when MERGE causes a cross-partition update",
      "description": "Skip inappropriate actions when MERGE causes a cross-partition update (Dean Rasheed)\n          When executing a `MERGE UPDATE` action on a partitioned table, if the `UPDATE` is turned into a `DELETE` and `INSERT` due to changing a partition key column, skip firing `AFTER UPDATE ROW` triggers, as well as other post-update actions such as RLS checks. These actions would typically fail, which is why a regular `UPDATE` doesn't do them in such cases; `MERGE` shouldn't either.",
      "sinceVersion": "16.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Cope with `BEFORE ROW DELETE` triggers in cross-partition MERGE updates",
      "description": "Cope with `BEFORE ROW DELETE` triggers in cross-partition MERGE updates (Dean Rasheed)\n          If such a trigger attempted to prevent the update by returning NULL, MERGE would suffer an error or assertion failure.",
      "sinceVersion": "16.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Prevent access to a no-longer-pinned buffer in `BEFORE ROW UPDATE` triggers",
      "description": "Prevent access to a no-longer-pinned buffer in `BEFORE ROW UPDATE` triggers (Alexander Lakhin, Tom Lane)\n          If the tuple being updated had just been updated and moved to another page by another session, there was a narrow window where we would attempt to fetch data from the new tuple version without any pin on its buffer. In principle this could result in garbage data appearing in non-updated columns of the proposed new tuple. The odds of problems in practice seem rather low, however.",
      "sinceVersion": "16.2",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "Avoid requesting an oversize shared-memory area in parallel hash join (Thomas Munro, Andrei Lepikhov, Alexander Korotkov)\n          The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "sinceVersion": "16.2",
      "contributor": "Thomas Munro, Andrei Lepikhov, Alexander Korotkov"
    },
    {
      "title": "Fix corruption of local buffer state when an error occurs while trying to extend a temporary table",
      "description": "Fix corruption of local buffer state when an error occurs while trying to extend a temporary table (Tender Wang)",
      "sinceVersion": "16.2",
      "contributor": "Tender Wang"
    },
    {
      "title": "Fix use of wrong tuple slot while evaluating `DISTINCT` aggregates that have multiple arguments",
      "description": "Fix use of wrong tuple slot while evaluating `DISTINCT` aggregates that have multiple arguments (David Rowley)\n          This mistake could lead to errors such as “attribute 1 of type record has wrong type”.",
      "sinceVersion": "16.2",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid assertion failures in `heap_update",
      "description": "Avoid assertion failures in `heap_update()()` and `heap_delete()()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck (Alexander Lakhin)\n          This error had no impact in non-assert builds.",
      "sinceVersion": "16.2",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix overly tight assertion about false_positive_rate parameter of BRIN bloom operator classes",
      "description": "Fix overly tight assertion about false_positive_rate parameter of BRIN bloom operator classes (Alexander Lakhin)\n          This error had no impact in non-assert builds, either.",
      "sinceVersion": "16.2",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree",
      "description": "Fix possible failure during ALTER TABLE ADD COLUMN on a complex inheritance tree (Tender Wang)\n          If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "sinceVersion": "16.2",
      "contributor": "Tender Wang"
    },
    {
      "title": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands",
      "description": "Fix problems with duplicate token names in ALTER TEXT SEARCH CONFIGURATION ... MAPPING commands (Tender Wang, Michael Paquier)",
      "sinceVersion": "16.2",
      "contributor": "Tender Wang, Michael Paquier"
    },
    {
      "title": "Fix DROP ROLE with duplicate role names",
      "description": "Fix DROP ROLE with duplicate role names (Michael Paquier)\n          Previously this led to a “tuple already updated by self” failure. Instead, ignore the duplicate.",
      "sinceVersion": "16.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Properly lock the associated table during DROP STATISTICS",
      "description": "Properly lock the associated table during DROP STATISTICS (Tomas Vondra)\n          Failure to acquire the lock could result in “tuple concurrently deleted” errors if the DROP executes concurrently with ANALYZE.",
      "sinceVersion": "16.2",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "Detect that a new catalog cache entry became stale while detoasting its fields (Tom Lane)\n          We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Fix edge-case integer overflow detection bug on some platforms (Dean Rasheed)\n          Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "sinceVersion": "16.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect Julian-date overflow when adding or subtracting an interval to/from a timestamp (Tom Lane)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add more checks for overflow in `interval_mul",
      "description": "Add more checks for overflow in `interval_mul()()` and `interval_div()()` (Dean Rasheed)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "16.2",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Allow `scram_SaltedPassword",
      "description": "Allow `scram_SaltedPassword()()` to be interrupted (Bowen Shi)\n          With large scram_iterations values, this function could take a long time to run. Allow it to be interrupted by query cancel requests.",
      "sinceVersion": "16.2",
      "contributor": "Bowen Shi"
    },
    {
      "title": "Ensure cached statistics are discarded after a change to stats_fetch_consistency",
      "description": "Ensure cached statistics are discarded after a change to stats_fetch_consistency (Shinya Kato)\n          In some code paths, it was possible for stale statistics to be returned.",
      "sinceVersion": "16.2",
      "contributor": "Shinya Kato"
    },
    {
      "title": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Make the pg_file_settings view check validity of unapplied values for settings with `backend` or `superuser-backend` context (Tom Lane)\n          Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Match collation too when matching an existing index to a new partitioned index (Peter Eisentraut)\n          Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "sinceVersion": "16.2",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid failure if a child index is dropped concurrently with REINDEX INDEX on a partitioned index",
      "description": "Avoid failure if a child index is dropped concurrently with REINDEX INDEX on a partitioned index (Fei Changhong)",
      "sinceVersion": "16.2",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page (Fei Changhong, Heikki Linnakangas)\n          The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "sinceVersion": "16.2",
      "contributor": "Fei Changhong, Heikki Linnakangas"
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "Avoid premature release of buffer pin in GIN index insertion (Tom Lane)\n          If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Avoid failure with partitioned SP-GiST indexes (Tom Lane)\n          Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ownership tests for large objects",
      "description": "Fix ownership tests for large objects (Tom Lane)\n          Operations on large objects that require ownership privilege failed with “unrecognized class ID: 2613”, unless run by a superuser.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "Fix ownership change reporting for large objects (Tom Lane)\n          A no-op ALTER LARGE OBJECT OWNER command (that is, one selecting the existing owner) passed the wrong class ID to the PostAlterHook, probably confusing any extension using that hook.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix reporting of I/O timing data in `EXPLAIN",
      "description": "Fix reporting of I/O timing data in `EXPLAIN (BUFFERS)` (Michael Paquier)\n          The numbers labeled as “shared/local” actually refer only to shared buffers, so change that label to “shared”.",
      "sinceVersion": "16.2",
      "contributor": "Michael Paquier"
    },
    {
      "title": "Ensure durability of CREATE DATABASE",
      "description": "Ensure durability of CREATE DATABASE (Noah Misch)\n          If an operating system crash occurred during or shortly after CREATE DATABASE, recovery could fail, or subsequent connections to the new database could fail. If a base backup was taken in that window, similar problems could be observed when trying to use the backup. The symptom would be that the database directory, PG_VERSION file, or pg_filenode.map file was missing or empty.",
      "sinceVersion": "16.2",
      "contributor": "Noah Misch"
    },
    {
      "title": "Add more `LOG` messages when starting and ending recovery from a backup",
      "description": "Add more `LOG` messages when starting and ending recovery from a backup (Andres Freund)\n          This change provides additional information in the postmaster log that may be useful for diagnosing recovery problems.",
      "sinceVersion": "16.2",
      "contributor": "Andres Freund"
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions (Fei Changhong)\n          The startedInRecovery flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "sinceVersion": "16.2",
      "contributor": "Fei Changhong"
    },
    {
      "title": "Fix signal handling in walreceiver processes",
      "description": "Fix signal handling in walreceiver processes (Heikki Linnakangas)\n          Revert a change that made walreceivers non-responsive to SIGTERM while waiting for the replication connection to be established.",
      "sinceVersion": "16.2",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix integer overflow hazard in checking whether a record will fit into the WAL decoding buffer",
      "description": "Fix integer overflow hazard in checking whether a record will fit into the WAL decoding buffer (Thomas Munro)\n          This bug appears to be only latent except when running a 32-bit PostgreSQL build on a 64-bit platform.",
      "sinceVersion": "16.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription (Shlok Kyal)\n          One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "sinceVersion": "16.2",
      "contributor": "Shlok Kyal"
    },
    {
      "title": "Ensure that column default values are correctly transmitted by the pgoutput logical replication plugin",
      "description": "Ensure that column default values are correctly transmitted by the pgoutput logical replication plugin (Nikhil Benesch)\n          ALTER TABLE ADD COLUMN with a constant default value for the new column avoids rewriting existing tuples, instead expecting that reading code will insert the correct default into a tuple that lacks that column. If replication was subsequently initiated on the table, pgoutput would transmit NULL instead of the correct default for such a column, causing incorrect replication on the subscriber.",
      "sinceVersion": "16.2",
      "contributor": "Nikhil Benesch"
    },
    {
      "title": "Fix failure of logical replication's initial sync for a table with no columns",
      "description": "Fix failure of logical replication's initial sync for a table with no columns (Vignesh C)\n          This case generated an improperly-formatted COPY command.",
      "sinceVersion": "16.2",
      "contributor": "Vignesh C"
    },
    {
      "title": "Re-validate a subscription's connection string before use",
      "description": "Re-validate a subscription's connection string before use (Vignesh C)\n          This is meant to detect cases where a subscription was created without a password (which is allowed to superusers) but then the subscription owner is changed to a non-superuser.",
      "sinceVersion": "16.2",
      "contributor": "Vignesh C"
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "Return the correct status code when a new client disconnects without responding to the server's password challenge (Liu Lang, Tom Lane)\n          In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use ClientAuthentication_hook.",
      "sinceVersion": "16.2",
      "contributor": "Liu Lang, Tom Lane"
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Fix incompatibility with OpenSSL 3.2 (Tristan Partin, Bo Andreson)\n          Use the BIO “app_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "sinceVersion": "16.2",
      "contributor": "Tristan Partin, Bo Andreson"
    },
    {
      "title": "Be more wary about OpenSSL not setting errno on error",
      "description": "Be more wary about OpenSSL not setting errno on error (Tom Lane)\n          If errno isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix file descriptor leakage when a foreign data wrapper's `ForeignAsyncRequest",
      "description": "Fix file descriptor leakage when a foreign data wrapper's `ForeignAsyncRequest()` function fails (Heikki Linnakangas)",
      "sinceVersion": "16.2",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix minor memory leak in connection string validation for CREATE SUBSCRIPTION",
      "description": "Fix minor memory leak in connection string validation for CREATE SUBSCRIPTION (Jeff Davis)",
      "sinceVersion": "16.2",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR`",
      "description": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov)",
      "sinceVersion": "16.2",
      "contributor": "Alexander Kuzmenkov"
    },
    {
      "title": "In PL/pgSQL, support SQL commands that are CREATE FUNCTION/CREATE PROCEDURE with SQL-standard bodies",
      "description": "In PL/pgSQL, support SQL commands that are CREATE FUNCTION/CREATE PROCEDURE with SQL-standard bodies (Tom Lane)\n          Previously, such cases failed with parsing errors due to the semicolon(s) appearing in the function body.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix libpq's handling of errors in pipelines",
      "description": "Fix libpq's handling of errors in pipelines (Álvaro Herrera)\n          The pipeline state could get out of sync if an error is returned for reasons other than a query problem (for example, if the connection is lost). Potentially this would lead to a busy-loop in the calling application.",
      "sinceVersion": "16.2",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Make libpq's `PQsendFlushRequest",
      "description": "Make libpq's `PQsendFlushRequest()()` function flush the client output buffer under the same rules as other `PQsend` functions (Jelte Fennema-Nio)\n          In pipeline mode, it may still be necessary to call `PQflush()()` as well; but this change removes some inconsistency.",
      "sinceVersion": "16.2",
      "contributor": "Jelte Fennema-Nio"
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads",
      "description": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier)",
      "sinceVersion": "16.2",
      "contributor": "Willi Mann, Michael Paquier"
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "Fix timing-dependent failure in GSSAPI data transmission (Tom Lane)\n          When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Change initdb to always un-comment the postgresql.conf entries for the `lc_`xxx`` parameters",
      "description": "Change initdb to always un-comment the postgresql.conf entries for the `lc_`xxx`` parameters (Kyotaro Horiguchi)\n          initdb used to work this way before v16, and now it does again. The change caused initdb's --no-locale option to not have the intended effect on lc_messages.",
      "sinceVersion": "16.2",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "In pg_dump, don't dump an extended statistics object if its underlying table isn't being dumped (Rian McGuire, Tom Lane)\n          This conforms to the behavior for other dependent objects such as indexes.",
      "sinceVersion": "16.2",
      "contributor": "Rian McGuire, Tom Lane"
    },
    {
      "title": "Properly detect out-of-memory in one code path in pg_dump",
      "description": "Properly detect out-of-memory in one code path in pg_dump (Daniel Gustafsson)",
      "sinceVersion": "16.2",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Make it an error for a pgbench script to end with an open pipeline",
      "description": "Make it an error for a pgbench script to end with an open pipeline (Anthonin Bonnefoy)\n          Previously, pgbench would behave oddly if a \\startpipeline command lacked a matching \\endpipeline. This seems like a scripting mistake rather than a case that pgbench needs to handle nicely, so throw an error.",
      "sinceVersion": "16.2",
      "contributor": "Anthonin Bonnefoy"
    },
    {
      "title": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index",
      "description": "Fix crash in contrib/intarray if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane)",
      "sinceVersion": "16.2",
      "contributor": "Alexander Lakhin, Tom Lane"
    },
    {
      "title": "Report a better error when contrib/pageinspect's `hash_bitmap_info",
      "description": "Report a better error when contrib/pageinspect's `hash_bitmap_info()()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier)",
      "sinceVersion": "16.2",
      "contributor": "Alexander Lakhin, Michael Paquier"
    },
    {
      "title": "Report a better error when contrib/pgstattuple's `pgstathashindex",
      "description": "Report a better error when contrib/pgstattuple's `pgstathashindex()()` function is applied to a partitioned hash index (Alexander Lakhin)",
      "sinceVersion": "16.2",
      "contributor": "Alexander Lakhin"
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress",
      "description": "On Windows, suppress autorun options when launching subprocesses in pg_ctl and pg_regress (Kyotaro Horiguchi)\n          When launching a child process via cmd.exe, pass the /D flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "sinceVersion": "16.2",
      "contributor": "Kyotaro Horiguchi"
    },
    {
      "title": "Move `is_valid_ascii",
      "description": "Move `is_valid_ascii()()` from mb/pg_wchar.h to utils/ascii.h (Jubilee Young)\n          This change avoids the need to include &lt;simd.h&gt; in pg_wchar.h, which was causing problems for some third-party code.",
      "sinceVersion": "16.2",
      "contributor": "Jubilee Young"
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later",
      "description": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane)",
      "sinceVersion": "16.2",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix compilation failure of `WAL_DEBUG` code on Windows",
      "description": "Fix compilation failure of `WAL_DEBUG` code on Windows (Bharath Rupireddy)",
      "sinceVersion": "16.2",
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Suppress compiler warnings from Python's header files (Peter Eisentraut, Tom Lane)\n          Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "sinceVersion": "16.2",
      "contributor": "Peter Eisentraut, Tom Lane"
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18",
      "description": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro)",
      "sinceVersion": "16.2",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Untitled feature",
      "description": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon.",
      "sinceVersion": "16.2",
      "contributor": null
    },
    {
      "title": "Make ALTER TABLE ... ADD COLUMN create identity/serial sequences with the same persistence as their owning tables",
      "description": "Make ALTER TABLE ... ADD COLUMN create identity/serial sequences with the same persistence as their owning tables (Peter Eisentraut)\n          CREATE UNLOGGED TABLE will make any owned sequences be unlogged too. ALTER TABLE missed that consideration, so that an added identity column would have a logged sequence, which seems pointless.",
      "sinceVersion": "16.3",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Ensure that index-only scans on name columns return a fully-padded value",
      "description": "Ensure that index-only scans on name columns return a fully-padded value (David Rowley)\n          The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "sinceVersion": "16.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type",
      "description": "Fix INSERT from multiple VALUES rows into a target column that is a domain over an array or composite type (Tom Lane)\n          Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Require `SELECT` privilege on the target table for MERGE with a `DO NOTHING` clause",
      "description": "Require `SELECT` privilege on the target table for MERGE with a `DO NOTHING` clause (Álvaro Herrera)\n          `SELECT` privilege would be required in all practical cases anyway, but require it even if the query reads no columns of the target table. This avoids an edge case in which MERGE would require no privileges whatever, which seems undesirable even when it's a do-nothing command.",
      "sinceVersion": "16.3",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix handling of self-modified tuples in MERGE",
      "description": "Fix handling of self-modified tuples in MERGE (Dean Rasheed)\n          Throw an error if a target row joins to more than one source row, as required by the SQL standard. (The previous coding could silently ignore this condition if a concurrent update was involved.) Also, throw a non-misleading error if a target row is already updated by a later command in the current transaction, thanks to a `BEFORE` trigger or a volatile function used in the query.",
      "sinceVersion": "16.3",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause (David Rowley)\n          A NULL value satisfies a clause such as ``boolcol` IS NOT FALSE`, so pruning away a partition containing NULLs yielded incorrect answers.",
      "sinceVersion": "16.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema",
      "description": "Make ALTER FOREIGN TABLE SET SCHEMA move any owned sequences into the new schema (Tom Lane)\n          Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve ALTER TABLE ... ALTER COLUMN TYPE's error message when there is a dependent function or publication",
      "description": "Improve ALTER TABLE ... ALTER COLUMN TYPE's error message when there is a dependent function or publication (Tom Lane)",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "In CREATE DATABASE, recognize strategy keywords case-insensitively for consistency with other options",
      "description": "In CREATE DATABASE, recognize strategy keywords case-insensitively for consistency with other options (Tomas Vondra)",
      "sinceVersion": "16.3",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan",
      "description": "Fix EXPLAIN's counting of heap pages accessed by a bitmap heap scan (Melanie Plageman)\n          Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "sinceVersion": "16.3",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Fix EXPLAIN's output for subplans in MERGE",
      "description": "Fix EXPLAIN's output for subplans in MERGE (Dean Rasheed)\n          EXPLAIN would sometimes fail to properly display subplan Params referencing variables in other parts of the plan tree.",
      "sinceVersion": "16.3",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "Avoid deadlock during removal of orphaned temporary tables (Mikhail Zhilin)\n          If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "sinceVersion": "16.3",
      "contributor": "Mikhail Zhilin"
    },
    {
      "title": "Fix updating of visibility map state in VACUUM with the `DISABLE_PAGE_SKIPPING` option",
      "description": "Fix updating of visibility map state in VACUUM with the `DISABLE_PAGE_SKIPPING` option (Heikki Linnakangas)\n          Due to an oversight, this mode caused all heap pages to be dirtied, resulting in excess I/O. Also, visibility map bits that were incorrectly set would not get cleared.",
      "sinceVersion": "16.3",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "Avoid race condition while examining per-relation frozen-XID values (Noah Misch)\n          VACUUM's computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another VACUUM.",
      "sinceVersion": "16.3",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix buffer usage reporting for parallel vacuuming",
      "description": "Fix buffer usage reporting for parallel vacuuming (Anthonin Bonnefoy)\n          Buffer accesses performed by parallel workers were not getting counted in the statistics reported in `VERBOSE` mode.",
      "sinceVersion": "16.3",
      "contributor": "Anthonin Bonnefoy"
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level (Tom Lane)\n          In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to UNION ALL trees that have constant outputs for the join column in some SELECT arms.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix “could not find pathkey item to sort” errors occurring while planning aggregate functions with `ORDER BY` or `DISTINCT` options",
      "description": "Fix “could not find pathkey item to sort” errors occurring while planning aggregate functions with `ORDER BY` or `DISTINCT` options (David Rowley)\n          This is similar to a fix applied in 16.1, but it solves the problem for parallel plans.",
      "sinceVersion": "16.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "Avoid use of already-freed data while planning partition-wise joins under GEQO (Tom Lane)\n          This would typically end in a crash or unexpected error message.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid freeing still-in-use data in Memoize",
      "description": "Avoid freeing still-in-use data in Memoize (Tender Wang, Andrei Lepikhov)\n          In production builds this error frequently didn't cause any problems, as the freed data would most likely not get overwritten before it was used.",
      "sinceVersion": "16.3",
      "contributor": "Tender Wang, Andrei Lepikhov"
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages",
      "description": "Fix incorrectly-reported statistics kind codes in “requested statistics kind `X` is not yet built” error messages (David Rowley)",
      "sinceVersion": "16.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Be more careful with RECORD-returning functions in `FROM`",
      "description": "Be more careful with RECORD-returning functions in `FROM` (Tom Lane)\n          The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "Fix confusion about the return rowtype of SQL-language procedures (Tom Lane)\n          A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Add protective stack depth checks to some recursive functions",
      "description": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin)",
      "sinceVersion": "16.3",
      "contributor": "Egor Chindyaskin"
    },
    {
      "title": "Fix mis-rounding and overflow hazards in `date_bin",
      "description": "Fix mis-rounding and overflow hazards in `date_bin()()` (Moaaz Assali)\n          In the case where the source timestamp is before the origin timestamp and their difference is already an exact multiple of the stride, the code incorrectly subtracted the stride anyway. Also, detect some integer-overflow cases that would have produced incorrect results.",
      "sinceVersion": "16.3",
      "contributor": "Moaaz Assali"
    },
    {
      "title": "Detect integer overflow when adding or subtracting an interval to/from a timestamp",
      "description": "Detect integer overflow when adding or subtracting an interval to/from a timestamp (Joseph Koshakow)\n          Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "sinceVersion": "16.3",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Avoid race condition in `pg_get_expr",
      "description": "Avoid race condition in `pg_get_expr()()` (Tom Lane)\n          If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Fix detection of old transaction IDs in XID status functions (Karina Litskevich)\n          Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()()` or `txid_status()()`.",
      "sinceVersion": "16.3",
      "contributor": "Karina Litskevich"
    },
    {
      "title": "Ensure that a table's freespace map won't return a page that's past the end of the table",
      "description": "Ensure that a table's freespace map won't return a page that's past the end of the table (Ronan Dunklau)\n          Because the freespace map isn't WAL-logged, this was possible in edge cases involving an OS crash, a replica promote, or a PITR restore. The result would be a “could not read block” error.",
      "sinceVersion": "16.3",
      "contributor": "Ronan Dunklau"
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait",
      "description": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait()` (Etsuro Fujita)",
      "sinceVersion": "16.3",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "Avoid corrupting exception stack if an FDW implements async append but doesn't configure any wait conditions for the Append plan node to wait for",
      "description": "Avoid corrupting exception stack if an FDW implements async append but doesn't configure any wait conditions for the Append plan node to wait for (Alexander Pyhalov)",
      "sinceVersion": "16.3",
      "contributor": "Alexander Pyhalov"
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Throw an error if an index is accessed while it is being reindexed (Tom Lane)\n          Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix race condition that could lead to reporting an incorrect conflict cause when invalidating a replication slot",
      "description": "Fix race condition that could lead to reporting an incorrect conflict cause when invalidating a replication slot (Bertrand Drouvot)",
      "sinceVersion": "16.3",
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Fix race condition in deciding whether a table sync operation is needed in logical replication",
      "description": "Fix race condition in deciding whether a table sync operation is needed in logical replication (Vignesh C)\n          An invalidation event arriving while a subscriber identifies which tables need to be synced would be forgotten about, so that any tables newly in need of syncing might not get processed in a timely fashion.",
      "sinceVersion": "16.3",
      "contributor": "Vignesh C"
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB",
      "description": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas)",
      "sinceVersion": "16.3",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "Disconnect if a new server session's client socket cannot be put into non-blocking mode (Heikki Linnakangas)\n          It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "sinceVersion": "16.3",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "Fix inadequate error reporting with OpenSSL 3.0.0 and later (Heikki Linnakangas, Tom Lane)\n          System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "sinceVersion": "16.3",
      "contributor": "Heikki Linnakangas, Tom Lane"
    },
    {
      "title": "Fix thread-safety of error reporting for `getaddrinfo",
      "description": "Fix thread-safety of error reporting for `getaddrinfo()()` on Windows (Thomas Munro)\n          A multi-threaded libpq client program could get an incorrect or corrupted error message after a network lookup failure.",
      "sinceVersion": "16.3",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain",
      "description": "Avoid concurrent calls to `bindtextdomain()()` in libpq and ecpglib (Tom Lane)\n          Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line",
      "description": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane)",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings",
      "description": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane)",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc",
      "description": "Ensure that the string result of ecpg's `intoasc()()` function is correctly zero-terminated (Oleg Tselebrovskiy)",
      "sinceVersion": "16.3",
      "contributor": "Oleg Tselebrovskiy"
    },
    {
      "title": "In initdb's -c option, match parameter names case-insensitively",
      "description": "In initdb's -c option, match parameter names case-insensitively (Tom Lane)\n          The server treats parameter names case-insensitively, so this code should too. This avoids putting redundant entries into the generated postgresql.conf file.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "In psql, avoid leaking a query result after the query is cancelled",
      "description": "In psql, avoid leaking a query result after the query is cancelled (Tom Lane)\n          This happened only when cancelling a non-last query in a query string made with `\\;` separators.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords",
      "description": "Fix pg_dumpall so that role comments, if present, will be dumped regardless of the setting of --no-role-passwords (Daniel Gustafsson, Álvaro Herrera)",
      "sinceVersion": "16.3",
      "contributor": "Daniel Gustafsson, Álvaro Herrera"
    },
    {
      "title": "Skip files named .DS_Store in pg_basebackup, pg_checksums, and pg_rewind",
      "description": "Skip files named .DS_Store in pg_basebackup, pg_checksums, and pg_rewind (Daniel Gustafsson)\n          This avoids problems on macOS, where the Finder may create such files.",
      "sinceVersion": "16.3",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments",
      "description": "Fix PL/pgSQL's parsing of single-line comments (`--`-style comments) following expressions (Erik Wienhold, Tom Lane)\n          This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL CASE statement.",
      "sinceVersion": "16.3",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "In contrib/amcheck, don't report false match failures due to short- versus long-header values",
      "description": "In contrib/amcheck, don't report false match failures due to short- versus long-header values (Andrey Borodin, Michael Zhilin)\n          A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "sinceVersion": "16.3",
      "contributor": "Andrey Borodin, Michael Zhilin"
    },
    {
      "title": "Fix bugs in BRIN output functions",
      "description": "Fix bugs in BRIN output functions (Tomas Vondra)\n          These output functions are only used for displaying index entries in contrib/pageinspect, so the errors are of limited practical concern.",
      "sinceVersion": "16.3",
      "contributor": "Tomas Vondra"
    },
    {
      "title": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant",
      "description": "In contrib/postgres_fdw, avoid emitting requests to sort by a constant (David Rowley)\n          This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position `N` is not in select list” errors.",
      "sinceVersion": "16.3",
      "contributor": "David Rowley"
    },
    {
      "title": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC`",
      "description": "Make contrib/postgres_fdw set the remote session's time zone to `GMT` not `UTC` (Tom Lane)\n          This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "sinceVersion": "16.3",
      "contributor": "Tom Lane"
    },
    {
      "title": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2",
      "description": "In contrib/xml2, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval)",
      "sinceVersion": "16.3",
      "contributor": "Dmitry Koval"
    },
    {
      "title": "Fix incompatibility with LLVM 18",
      "description": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov)",
      "sinceVersion": "16.3",
      "contributor": "Thomas Munro, Dmitry Dolgov"
    },
    {
      "title": "Allow `make check` to work with the musl C library",
      "description": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane)",
      "sinceVersion": "16.3",
      "contributor": "Thomas Munro, Bruce Momjian, Tom Lane"
    },
    {
      "title": "Prevent unauthorized code execution during pg_dump",
      "description": "Prevent unauthorized code execution during pg_dump (Masahiko Sawada)\n          An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg_dump session with the privileges of the role running pg_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter restrict_nonsystem_relation_kind that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg_dump to set it when available. Note that the attack is prevented only if both pg_dump and the server it is dumping from are new enough to have this fix.\n          The PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "sinceVersion": "16.4",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid incorrect results from Merge Right Anti Join plans",
      "description": "Avoid incorrect results from Merge Right Anti Join plans (Richard Guo)\n          If the inner relation is known to have unique join keys, the merge could misbehave when there are duplicated join keys in the outer relation.",
      "sinceVersion": "16.4",
      "contributor": "Richard Guo"
    },
    {
      "title": "Prevent infinite loop in VACUUM",
      "description": "Prevent infinite loop in VACUUM (Melanie Plageman)\n          After a disconnected standby server with an old running transaction reconnected to the primary, it was possible for VACUUM on the primary to get confused about which tuples are removable, resulting in an infinite loop.",
      "sinceVersion": "16.4",
      "contributor": "Melanie Plageman"
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children",
      "description": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera)",
      "sinceVersion": "16.4",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints",
      "description": "Fix ALTER TABLE DETACH PARTITION for cases involving inconsistent index-based constraints (Álvaro Herrera, Tender Wang)\n          When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect coninhcount value. This would cause trouble during any further manipulations of that constraint.",
      "sinceVersion": "16.4",
      "contributor": "Álvaro Herrera, Tender Wang"
    },
    {
      "title": "Fix partition pruning setup during `ALTER TABLE DETACH PARTITION CONCURRENTLY`",
      "description": "Fix partition pruning setup during `ALTER TABLE DETACH PARTITION CONCURRENTLY` (Álvaro Herrera)\n          The executor assumed that no partition could be detached between planning and execution of a query on a partitioned table. This is no longer true since the introduction of `DETACH PARTITION`'s `CONCURRENTLY` option, making it possible for query execution to fail transiently when that is used.",
      "sinceVersion": "16.4",
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Correctly update a partitioned table's pg_class.reltuples field to zero after its last child partition is dropped",
      "description": "Correctly update a partitioned table's pg_class.reltuples field to zero after its last child partition is dropped (Noah Misch)\n          The first ANALYZE on such a partitioned table must update relhassubclass as well, and that caused the reltuples update to be lost.",
      "sinceVersion": "16.4",
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "Fix handling of polymorphic output arguments for procedures (Tom Lane)\n          The SQL CALL statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But CALL in PL/pgSQL worked correctly.)",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix behavior of stable functions called from a CALL statement's argument list",
      "description": "Fix behavior of stable functions called from a CALL statement's argument list (Tom Lane)\n          If the CALL is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix input of ISO-8601 “extended” time format for types time and timetz",
      "description": "Fix input of ISO-8601 “extended” time format for types time and timetz (Tom Lane)\n          Re-allow cases such as `T12:34:56`.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect integer overflow in money calculations",
      "description": "Detect integer overflow in money calculations (Joseph Koshakow)\n          None of the arithmetic functions for the money type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "sinceVersion": "16.4",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round",
      "description": "Fix over-aggressive clamping of the scale argument in `round(numeric)()` and `trunc(numeric)()` (Dean Rasheed)\n          These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type numeric.",
      "sinceVersion": "16.4",
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Fix result for `pg_size_pretty",
      "description": "Fix result for `pg_size_pretty()()` when applied to the smallest possible bigint value (Joseph Koshakow)",
      "sinceVersion": "16.4",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Prevent `pg_sequence_last_value",
      "description": "Prevent `pg_sequence_last_value()()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions (Nathan Bossart)\n          Make it return NULL in these cases instead of throwing an error.",
      "sinceVersion": "16.4",
      "contributor": "Nathan Bossart"
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery",
      "description": "Fix parsing of ignored operators in `websearch_to_tsquery()()` (Tom Lane)\n          Per the manual, punctuation in the input of `websearch_to_tsquery()()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Detect another integer overflow case while computing new array dimensions (Joseph Koshakow)\n          Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "sinceVersion": "16.4",
      "contributor": "Joseph Koshakow"
    },
    {
      "title": "Fix unportable usage of `strnxfrm",
      "description": "Fix unportable usage of `strnxfrm()()` (Jeff Davis)\n          Some code paths for non-deterministic collations could fail with errors like “pg_strnxfrm() returned unexpected result”.",
      "sinceVersion": "16.4",
      "contributor": "Jeff Davis"
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields (Noah Misch)\n          An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the pg_database catalog, so the effects are narrow, but misbehavior is possible.",
      "sinceVersion": "16.4",
      "contributor": "Noah Misch"
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT` (Tom Lane)\n          If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number `N` not found in view targetlist”.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Avoid reporting an unhelpful internal error for incorrect recursive queries (Tom Lane)\n          Rearrange the order of error checks so that we throw an on-point error when a WITH RECURSIVE query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Lock owned sequences during `ALTER TABLE SET LOGGED|UNLOGGED`",
      "description": "Lock owned sequences during `ALTER TABLE SET LOGGED|UNLOGGED` (Noah Misch)\n          These commands change the persistence of a table's owned sequences along with the table, but they failed to acquire lock on the sequences while doing so. This could result in losing the effects of concurrent `nextval()()` calls.",
      "sinceVersion": "16.4",
      "contributor": "Noah Misch"
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "Don't throw an error if a queued `AFTER` trigger no longer exists (Tom Lane)\n          It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger `NNNN`”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped",
      "description": "Fix failure to remove pg_init_privs entries for column-level privileges when their table is dropped (Tom Lane)\n          If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg_dump dumps for that relation.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates (Tom Lane)\n          If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Refuse to modify a temporary table of another session with `ALTER TABLE` (Tom Lane)\n          Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix handling of extended statistics on expressions in `CREATE TABLE LIKE STATISTICS`",
      "description": "Fix handling of extended statistics on expressions in `CREATE TABLE LIKE STATISTICS` (Tom Lane)\n          The `CREATE` command failed to adjust column references in statistics expressions to the possibly-different column numbering of the new table. This resulted in invalid statistics objects that would cause problems later. A typical scenario where renumbering columns is needed is when the source table contains some dropped columns.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN",
      "description": "Fix failure to recalculate sub-queries generated from `MIN()()` or `MAX()()` aggregates (Tom Lane)\n          In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Re-forbid underscore in positional parameters",
      "description": "Re-forbid underscore in positional parameters (Erik Wienhold)\n          As of v16 we allow integer literals to contain underscores. This change caused input such as `$1_234` to be taken as a single token, but it did not work correctly. It seems better to revert to the original definition in which a parameter symbol is only `$` followed by digits.",
      "sinceVersion": "16.4",
      "contributor": "Erik Wienhold"
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "Avoid crashing when a JIT-inlined backend function throws an error (Tom Lane)\n          The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Cope with behavioral changes in libxml2 version 2.13.x (Erik Wienhold, Tom Lane)\n          Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "sinceVersion": "16.4",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "Fix handling of subtransactions of prepared transactions when starting a hot standby server (Heikki Linnakangas)\n          When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "sinceVersion": "16.4",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "Prevent incorrect initialization of logical replication slots (Masahiko Sawada)\n          In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "sinceVersion": "16.4",
      "contributor": "Masahiko Sawada"
    },
    {
      "title": "Avoid “can only drop stats once” error during replication slot creation and drop",
      "description": "Avoid “can only drop stats once” error during replication slot creation and drop (Floris Van Nee)",
      "sinceVersion": "16.4",
      "contributor": "Floris Van Nee"
    },
    {
      "title": "Fix resource leakage in logical replication WAL sender",
      "description": "Fix resource leakage in logical replication WAL sender (Hou Zhijie)\n          The walsender process leaked memory when publishing changes to a partitioned table whose partitions have row types physically different from the partitioned table's.",
      "sinceVersion": "16.4",
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "Avoid memory leakage after servicing a notify or sinval interrupt (Tom Lane)\n          The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent leakage of reference counts for the shared memory block used for statistics",
      "description": "Prevent leakage of reference counts for the shared memory block used for statistics (Anthonin Bonnefoy)\n          A new backend process attaching to the statistics shared memory incremented its reference count, but failed to decrement the count when exiting. After 232 sessions had been created, the reference count would overflow to zero, causing failures in all subsequent backend process starts.",
      "sinceVersion": "16.4",
      "contributor": "Anthonin Bonnefoy"
    },
    {
      "title": "Prevent deadlocks and assertion failures during truncation of the multixact SLRU log",
      "description": "Prevent deadlocks and assertion failures during truncation of the multixact SLRU log (Heikki Linnakangas)\n          A process trying to delete SLRU segments could deadlock with the checkpointer process.",
      "sinceVersion": "16.4",
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Avoid possibly missing end-of-input events on Windows sockets (Thomas Munro)\n          Windows reports an FD_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "sinceVersion": "16.4",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix buffer overread in JSON parse error reports for incomplete byte sequences",
      "description": "Fix buffer overread in JSON parse error reports for incomplete byte sequences (Jacob Champion)\n          It was possible to walk off the end of the input buffer by a few bytes when the last bytes comprise an incomplete multi-byte character. While usually harmless, in principle this could cause a crash.",
      "sinceVersion": "16.4",
      "contributor": "Jacob Champion"
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "Disable creation of stateful TLS session tickets by OpenSSL (Daniel Gustafsson)\n          This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "sinceVersion": "16.4",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "When replanning a PL/pgSQL “simple expression”, check it's still simple (Tom Lane)\n          Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/pgSQL's handling of integer ranges containing underscores",
      "description": "Fix PL/pgSQL's handling of integer ranges containing underscores (Erik Wienhold)\n          As of v16 we allow integer literals to contain underscores, but PL/pgSQL failed to handle examples such as `FOR i IN 1_001..1_003`.",
      "sinceVersion": "16.4",
      "contributor": "Erik Wienhold"
    },
    {
      "title": "Fix recursive RECORD-returning PL/Python functions",
      "description": "Fix recursive RECORD-returning PL/Python functions (Tom Lane)\n          If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call (Tom Lane)\n          If a PL/Python-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple (Erik Wienhold, Tom Lane)\n          Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "sinceVersion": "16.4",
      "contributor": "Erik Wienhold, Tom Lane"
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror",
      "description": "Avoid non-thread-safe usage of `strerror()()` in libpq (Peter Eisentraut)\n          Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "sinceVersion": "16.4",
      "contributor": "Peter Eisentraut"
    },
    {
      "title": "Avoid memory leak within pg_dump during a binary upgrade",
      "description": "Avoid memory leak within pg_dump during a binary upgrade (Daniel Gustafsson)",
      "sinceVersion": "16.4",
      "contributor": "Daniel Gustafsson"
    },
    {
      "title": "Ensure that `pg_restore` -l reports dependent TOC entries correctly",
      "description": "Ensure that `pg_restore` -l reports dependent TOC entries correctly (Tom Lane)\n          If -l was specified together with selective-restore options such as -n or -N, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow contrib/pg_stat_statements to distinguish among utility statements appearing within SQL-language functions",
      "description": "Allow contrib/pg_stat_statements to distinguish among utility statements appearing within SQL-language functions (Anthonin Bonnefoy)\n          The SQL-language function executor failed to pass along the query ID that is computed for a utility (non SELECT/INSERT/UPDATE/DELETE/MERGE) statement.",
      "sinceVersion": "16.4",
      "contributor": "Anthonin Bonnefoy"
    },
    {
      "title": "Avoid “cursor can only scan forward” error in contrib/postgres_fdw",
      "description": "Avoid “cursor can only scan forward” error in contrib/postgres_fdw (Etsuro Fujita)\n          This error could occur if the remote server is v15 or later and a foreign table is mapped to a non-trivial remote view.",
      "sinceVersion": "16.4",
      "contributor": "Etsuro Fujita"
    },
    {
      "title": "In contrib/postgres_fdw, do not send `FETCH FIRST WITH TIES` clauses to the remote server",
      "description": "In contrib/postgres_fdw, do not send `FETCH FIRST WITH TIES` clauses to the remote server (Japin Li)\n          The remote server might not implement this clause, or might interpret it differently than we would locally, so don't risk attempting remote execution.",
      "sinceVersion": "16.4",
      "contributor": "Japin Li"
    },
    {
      "title": "Avoid clashing with system-provided &lt;regex.h&gt; headers",
      "description": "Avoid clashing with system-provided &lt;regex.h&gt; headers (Thomas Munro)\n          This fixes a compilation failure on macOS version 15 and up.",
      "sinceVersion": "16.4",
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix otherwise-harmless assertion failure in Memoize cost estimation",
      "description": "Fix otherwise-harmless assertion failure in Memoize cost estimation (David Rowley)",
      "sinceVersion": "16.4",
      "contributor": "David Rowley"
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index",
      "description": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane)",
      "sinceVersion": "16.4",
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled feature",
      "description": "pg_basebackup now supports incremental backup.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove server variable old_snapshot_threshold",
      "description": "Remove server variable old_snapshot_threshold (Thomas Munro) §\n          This variable allowed vacuum to remove rows that potentially could be still visible to running transactions, causing \"snapshot too old\" errors later if accessed. This feature might be re-added to PostgreSQL later if an improved implementation is found.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Create system view pg_stat_checkpointer",
      "description": "Create system view pg_stat_checkpointer (Bharath Rupireddy, Anton A. Melnikov, Alexander Korotkov) § § §\n              Relevant columns have been removed from pg_stat_bgwriter and added to this new system view.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow the use of an ENUM added via ALTER TYPE if the type was created in the same transaction",
      "description": "Allow the use of an ENUM added via ALTER TYPE if the type was created in the same transaction (Tom Lane) §\n            This was previously disallowed.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow extensions to define custom wait events",
      "description": "Allow extensions to define custom wait events (Masahiro Ikeda) § § § §\n            Custom wait events have been added to postgres_fdw and dblink.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "New SQL/JSON capabilities, including constructors, identity functions, and the `JSON_TABLE",
      "description": "New SQL/JSON capabilities, including constructors, identity functions, and the `JSON_TABLE()()` function, which converts JSON data into a table representation.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Logical replication enhancements, including:\n          \n            \n              \n                Failover control\n              \n              \n                pg_createsubscriber, a utility that creates logical replicas from physical standbys\n              \n              \n                pg_upgrade now preserves replication slots on both publishers and subscribers\n              \n            \n          ",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "Failover control",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "pg_createsubscriber, a utility that creates logical replicas from physical standbys",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "pg_upgrade now preserves replication slots on both publishers and subscribers",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "New client-side connection option, `sslnegotiation=direct`, that performs a direct TLS handshake to avoid a round-trip negotiation.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Untitled feature",
      "description": "COPY adds a new option, `ON_ERROR ignore`, that allows a copy operation to continue in the event of an error.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Change functions to use a safe search_path during maintenance operations",
      "description": "Change functions to use a safe search_path during maintenance operations (Jeff Davis) §\n          This prevents maintenance operations (ANALYZE, CLUSTER, REFRESH MATERIALIZED VIEW, REINDEX, or VACUUM) from performing unsafe access. Functions used by expression indexes and materialized views that need to reference non-default schemas must specify a search path during function creation.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Restrict `ago` to only appear at the end in interval values",
      "description": "Restrict `ago` to only appear at the end in interval values (Joseph Koshakow) § §\n          Also, prevent empty interval units from appearing multiple times.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Change SET SESSION AUTHORIZATION handling of the initial session user's superuser status",
      "description": "Change SET SESSION AUTHORIZATION handling of the initial session user's superuser status (Joseph Koshakow) §\n          The new behavior is based on the session user's superuser status at the time the SET SESSION AUTHORIZATION command is issued, rather than their superuser status at connection time.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove feature which simulated per-database users",
      "description": "Remove feature which simulated per-database users (Nathan Bossart) §\n          The feature, `db_user_namespace`, was rarely used.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove wal_sync_method value `fsync_writethrough` on Windows",
      "description": "Remove wal_sync_method value `fsync_writethrough` on Windows (Thomas Munro) §\n          This value was the same as `fsync` on Windows.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Change file boundary handling of two WAL file name functions",
      "description": "Change file boundary handling of two WAL file name functions (Kyotaro Horiguchi, Andres Freund, Bruce Momjian) §\n          The functions `pg_walfile_name()()` and `pg_walfile_name_offset()()` used to report the previous LSN segment number when the LSN was on a file segment boundary; it now returns the current LSN segment.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove server variable `trace_recovery_messages` since it is no longer needed",
      "description": "Remove server variable `trace_recovery_messages` since it is no longer needed (Bharath Rupireddy) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove information schema column element_types.domain_default",
      "description": "Remove information schema column element_types.domain_default (Peter Eisentraut) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Change pgrowlocks lock mode output labels",
      "description": "Change pgrowlocks lock mode output labels (Bruce Momjian) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove buffers_backend and buffers_backend_fsync from pg_stat_bgwriter",
      "description": "Remove buffers_backend and buffers_backend_fsync from pg_stat_bgwriter (Bharath Rupireddy) §\n          These fields are considered redundant to similar columns in pg_stat_io.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Rename I/O block read/write timing statistics columns of pg_stat_statements",
      "description": "Rename I/O block read/write timing statistics columns of pg_stat_statements (Nazir Bilal Yavuz) §\n          This renames blk_read_time to shared_blk_read_time, and blk_write_time to shared_blk_write_time.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Change pg_attribute.attstattarget and pg_statistic_ext.stxstattarget to represent the default statistics target as `NULL`",
      "description": "Change pg_attribute.attstattarget and pg_statistic_ext.stxstattarget to represent the default statistics target as `NULL` (Peter Eisentraut) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Rename pg_collation.colliculocale to colllocale and pg_database.daticulocale to datlocale",
      "description": "Rename pg_collation.colliculocale to colllocale and pg_database.daticulocale to datlocale (Jeff Davis) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Rename pg_stat_progress_vacuum column max_dead_tuples to max_dead_tuple_bytes, rename num_dead_tuples to num_dead_item_ids, and add dead_tuple_bytes",
      "description": "Rename pg_stat_progress_vacuum column max_dead_tuples to max_dead_tuple_bytes, rename num_dead_tuples to num_dead_item_ids, and add dead_tuple_bytes (Masahiko Sawada) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Rename SLRU columns in system view pg_stat_slru",
      "description": "Rename SLRU columns in system view pg_stat_slru (Alvaro Herrera) §\n          The column names accepted by `pg_stat_reset_slru()()` are also changed.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow the optimizer to improve CTE plans by considering the statistics and sort order of columns referenced in earlier row output clauses",
      "description": "Allow the optimizer to improve CTE plans by considering the statistics and sort order of columns referenced in earlier row output clauses (Jian Guo, Richard Guo, Tom Lane) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow partition pruning on boolean columns on `IS [NOT] UNKNOWN` conditionals",
      "description": "Allow partition pruning on boolean columns on `IS [NOT] UNKNOWN` conditionals (David Rowley) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow correlated `IN` subqueries to be transformed into joins",
      "description": "Allow correlated `IN` subqueries to be transformed into joins (Andy Fan, Tom Lane) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow query nodes to be run in parallel in more cases",
      "description": "Allow query nodes to be run in parallel in more cases (Tom Lane) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow `GROUP BY` columns to be internally ordered to match `ORDER BY`",
      "description": "Allow `GROUP BY` columns to be internally ordered to match `ORDER BY` (Andrei Lepikhov, Teodor Sigaev) §\n              This can be disabled using server variable enable_group_by_reordering.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow `UNION`",
      "description": "Allow `UNION` (without `ALL`) to use MergeAppend (David Rowley) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Fix MergeAppend plans to more accurately compute the number of rows that need to be sorted",
      "description": "Fix MergeAppend plans to more accurately compute the number of rows that need to be sorted (Alexander Kuzmenkov) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow GiST and SP-GiST indexes to be part of incremental sorts",
      "description": "Allow GiST and SP-GiST indexes to be part of incremental sorts (Miroslav Bendik) §\n              This is particularly useful for `ORDER BY` clauses where the first column has a GiST and SP-GiST index, and other columns do not.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add columns to pg_stats to report range-type histogram information",
      "description": "Add columns to pg_stats to report range-type histogram information (Egor Rogov, Soumyadeep Chakraborty) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow btree indexes to more efficiently find a set of values, such as those supplied by `IN` clauses using constants",
      "description": "Allow btree indexes to more efficiently find a set of values, such as those supplied by `IN` clauses using constants (Peter Geoghegan, Matthias van de Meent) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow BRIN indexes to be created using parallel workers",
      "description": "Allow BRIN indexes to be created using parallel workers (Tomas Vondra, Matthias van de Meent) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow vacuum to more efficiently remove and freeze tuples",
      "description": "Allow vacuum to more efficiently remove and freeze tuples (Melanie Plageman, Heikki Linnakangas) §\n              WAL traffic caused by vacuum is also more compact.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow vacuum to more efficiently store tuple references",
      "description": "Allow vacuum to more efficiently store tuple references (Masahiko Sawada, John Naylor) § § § §\n              Additionally, vacuum is no longer silently limited to one gigabyte of memory when maintenance_work_mem or autovacuum_work_mem are higher.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Optimize vacuuming of relations with no indexes",
      "description": "Optimize vacuuming of relations with no indexes (Melanie Plageman) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Increase default vacuum_buffer_usage_limit to 2MB",
      "description": "Increase default vacuum_buffer_usage_limit to 2MB (Thomas Munro) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow the grouping of file system reads with the new system variable io_combine_limit",
      "description": "Allow the grouping of file system reads with the new system variable io_combine_limit (Thomas Munro, Andres Freund, Melanie Plageman, Nazir Bilal Yavuz) § § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Improve control over resetting statistics",
      "description": "Improve control over resetting statistics (Atsushi Torikoshi, Bharath Rupireddy) § § §\n              Allow `pg_stat_reset_shared()()` (with no arguments) and pg_stat_reset_shared(`NULL`) to reset all shared statistics. Allow pg_stat_reset_shared('slru') and `pg_stat_reset_slru()()` (with no arguments) to reset SLRU statistics, which was already possible with pg_stat_reset_slru(NULL).",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add log messages related to WAL recovery from backups",
      "description": "Add log messages related to WAL recovery from backups (Andres Freund) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add log_connections log line for `trust` connections",
      "description": "Add log_connections log line for `trust` connections (Jacob Champion) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add log message to report walsender acquisition and release of replication slots",
      "description": "Add log message to report walsender acquisition and release of replication slots (Bharath Rupireddy) §\n              This is enabled by the server variable log_replication_commands.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add system view pg_wait_events that reports wait event types",
      "description": "Add system view pg_wait_events that reports wait event types (Bertrand Drouvot) §\n              This is useful for adding descriptions to wait events reported in pg_stat_activity.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add wait events for checkpoint delays",
      "description": "Add wait events for checkpoint delays (Thomas Munro) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow vacuum to report the progress of index processing",
      "description": "Allow vacuum to report the progress of index processing (Sami Imseih) §\n              This appears in system view pg_stat_progress_vacuum columns indexes_total and indexes_processed.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow granting the right to perform maintenance operations",
      "description": "Allow granting the right to perform maintenance operations (Nathan Bossart) §\n              The permission can be granted on a per-table basis using the `MAINTAIN` privilege and on a per-role basis via the `pg_maintain` predefined role. Permitted operations are VACUUM, ANALYZE, REINDEX, REFRESH MATERIALIZED VIEW, CLUSTER, and LOCK TABLE.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow roles with `pg_monitor` membership to execute `pg_current_logfile",
      "description": "Allow roles with `pg_monitor` membership to execute `pg_current_logfile()()` (Pavlo Golub, Nathan Bossart) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add system variable allow_alter_system to disallow ALTER SYSTEM",
      "description": "Add system variable allow_alter_system to disallow ALTER SYSTEM (Jelte Fennema-Nio, Gabriele Bartolini) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow ALTER SYSTEM to set unrecognized custom server variables",
      "description": "Allow ALTER SYSTEM to set unrecognized custom server variables (Tom Lane) §\n              This is also possible with `GRANT ON PARAMETER`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add server variable transaction_timeout to restrict the duration of transactions",
      "description": "Add server variable transaction_timeout to restrict the duration of transactions (Andrey Borodin, Japin Li, Junwang Zhao, Alexander Korotkov) § § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add a builtin platform-independent collation provider",
      "description": "Add a builtin platform-independent collation provider (Jeff Davis) § § § §\n              This supports `C` and `C.UTF-8` collations.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add server variable huge_pages_status to report the use of huge pages by Postgres",
      "description": "Add server variable huge_pages_status to report the use of huge pages by Postgres (Justin Pryzby) §\n              This is useful when huge_pages is set to `try`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add server variable to disable event triggers",
      "description": "Add server variable to disable event triggers (Daniel Gustafsson) §\n              The setting, event_triggers, allows for the temporary disabling of event triggers for debugging.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow the SLRU cache sizes to be configured",
      "description": "Allow the SLRU cache sizes to be configured (Andrey Borodin, Dilip Kumar, Alvaro Herrera) §\n              The new server variables are commit_timestamp_buffers, multixact_member_buffers, multixact_offset_buffers, notify_buffers, serializable_buffers, subtransaction_buffers, and transaction_buffers. commit_timestamp_buffers, transaction_buffers, and subtransaction_buffers scale up automatically with shared_buffers.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add support for incremental file system backup",
      "description": "Add support for incremental file system backup (Robert Haas, Jakub Wartak, Tomas Vondra) § §\n              Incremental backups can be created using pg_basebackup's new --incremental option. The new application pg_combinebackup allows manipulation of base and incremental file system backups.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow the creation of WAL summarization files",
      "description": "Allow the creation of WAL summarization files (Robert Haas, Nathan Bossart, Hubert Depesz Lubaczewski) § § § §\n              These files record the block numbers that have changed within an LSN range and are useful for incremental file system backups. This is controlled by the server variables summarize_wal and wal_summary_keep_time, and introspected with `pg_available_wal_summaries()()`, `pg_wal_summary_contents()()`, and `pg_get_wal_summarizer_state()()`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add the system identifier to file system backup manifest files",
      "description": "Add the system identifier to file system backup manifest files (Amul Sul) §\n              This helps detect invalid WAL usage.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow connection string value `dbname` to be written when pg_basebackup writes connection information to postgresql.auto.conf",
      "description": "Allow connection string value `dbname` to be written when pg_basebackup writes connection information to postgresql.auto.conf (Vignesh C, Hayato Kuroda) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add column pg_replication_slots.invalidation_reason to report the reason for invalid slots",
      "description": "Add column pg_replication_slots.invalidation_reason to report the reason for invalid slots (Shveta Malik, Bharath Rupireddy) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add column pg_replication_slots.inactive_since to report slot inactivity duration",
      "description": "Add column pg_replication_slots.inactive_since to report slot inactivity duration (Bharath Rupireddy) § § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add function `pg_sync_replication_slots",
      "description": "Add function `pg_sync_replication_slots()()` to synchronize logical replication slots (Hou Zhijie, Shveta Malik, Ajin Cherian, Peter Eisentraut) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add the `failover` property to the replication protocol",
      "description": "Add the `failover` property to the replication protocol (Hou Zhijie, Shveta Malik) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add application pg_createsubscriber to create a logical replica from a physical standby server",
      "description": "Add application pg_createsubscriber to create a logical replica from a physical standby server (Euler Taveira) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Have pg_upgrade migrate valid logical slots and subscriptions",
      "description": "Have pg_upgrade migrate valid logical slots and subscriptions (Hayato Kuroda, Hou Zhijie, Vignesh C, Julien Rouhaud, Shlok Kyal) § §\n              This allows logical replication to continue quickly after the upgrade. This only works for old PostgreSQL clusters that are version 17 or later.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Enable the failover of logical slots",
      "description": "Enable the failover of logical slots (Hou Zhijie, Shveta Malik, Ajin Cherian) §\n              This is controlled by an optional fifth argument to `pg_create_logical_replication_slot()()`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add server variable sync_replication_slots to enable failover logical slot synchronization",
      "description": "Add server variable sync_replication_slots to enable failover logical slot synchronization (Shveta Malik, Hou Zhijie, Peter Smith) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add logical replication failover control to `CREATE/ALTER SUBSCRIPTION`",
      "description": "Add logical replication failover control to `CREATE/ALTER SUBSCRIPTION` (Shveta Malik, Hou Zhijie, Ajin Cherian) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow the application of logical replication changes to use hash indexes on the subscriber",
      "description": "Allow the application of logical replication changes to use hash indexes on the subscriber (Hayato Kuroda) §\n              Previously only btree indexes could be used for this purpose.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Restart apply workers if subscription owner's superuser privileges are revoked",
      "description": "Restart apply workers if subscription owner's superuser privileges are revoked (Vignesh C) §\n              This forces reauthentication.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add `flush` option to `pg_logical_emit_message",
      "description": "Add `flush` option to `pg_logical_emit_message()()` (Michael Paquier) §\n              This makes the message durable.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow specification of physical standbys that must be synchronized before they are visible to subscribers",
      "description": "Allow specification of physical standbys that must be synchronized before they are visible to subscribers (Hou Zhijie, Shveta Malik) § §\n              The new server variable is synchronized_standby_slots.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add worker type column to pg_stat_subscription",
      "description": "Add worker type column to pg_stat_subscription (Peter Smith) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add new COPY option `ON_ERROR ignore` to discard error rows",
      "description": "Add new COPY option `ON_ERROR ignore` to discard error rows (Damir Belyalov, Atsushi Torikoshi, Alex Shulgin, Jian He, Yugo Nagata) § § § §\n            The default behavior is `ON_ERROR stop`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add new COPY option `LOG_VERBOSITY` which reports `COPY FROM` ignored error rows",
      "description": "Add new COPY option `LOG_VERBOSITY` which reports `COPY FROM` ignored error rows (Bharath Rupireddy) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow `COPY FROM` to report the number of skipped rows during processing",
      "description": "Allow `COPY FROM` to report the number of skipped rows during processing (Atsushi Torikoshi) §\n            This appears in system view column pg_stat_progress_copy.tuples_skipped.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "In `COPY FROM`, allow easy specification that all columns should be forced null or not null",
      "description": "In `COPY FROM`, allow easy specification that all columns should be forced null or not null (Zhang Mingli) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow partitioned tables to have identity columns",
      "description": "Allow partitioned tables to have identity columns (Ashutosh Bapat) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow exclusion constraints on partitioned tables",
      "description": "Allow exclusion constraints on partitioned tables (Paul A. Jungwirth) §\n            As long as exclusion constraints compare partition key columns for equality, other columns can use exclusion constraint-specific comparisons.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add clearer ALTER TABLE method to set a column to the default statistics target",
      "description": "Add clearer ALTER TABLE method to set a column to the default statistics target (Peter Eisentraut) §\n            The new syntax is `ALTER TABLE ... SET STATISTICS DEFAULT`; using `SET STATISTICS -1` is still supported.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow `ALTER TABLE` to change a column's generation expression",
      "description": "Allow `ALTER TABLE` to change a column's generation expression (Amul Sul) §\n            The syntax is `ALTER TABLE ... ALTER COLUMN ... SET EXPRESSION`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow specification of table access methods on partitioned tables",
      "description": "Allow specification of table access methods on partitioned tables (Justin Pryzby, Soumyadeep Chakraborty, Michael Paquier) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add `DEFAULT` setting for `ALTER TABLE .. SET ACCESS METHOD`",
      "description": "Add `DEFAULT` setting for `ALTER TABLE .. SET ACCESS METHOD` (Michael Paquier) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add support for event triggers that fire at connection time",
      "description": "Add support for event triggers that fire at connection time (Konstantin Knizhnik, Mikhail Gribkov) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add event trigger support for REINDEX",
      "description": "Add event trigger support for REINDEX (Garrett Thornburg, Jian He) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow parenthesized syntax for CLUSTER options if a table name is not specified",
      "description": "Allow parenthesized syntax for CLUSTER options if a table name is not specified (Nathan Bossart) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow EXPLAIN to report optimizer memory usage",
      "description": "Allow EXPLAIN to report optimizer memory usage (Ashutosh Bapat) §\n              The option is called `MEMORY`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add EXPLAIN option `SERIALIZE` to report the cost of converting data for network transmission",
      "description": "Add EXPLAIN option `SERIALIZE` to report the cost of converting data for network transmission (Stepan Rutz, Matthias van de Meent) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add local I/O block read/write timing statistics to EXPLAIN's `BUFFERS` output",
      "description": "Add local I/O block read/write timing statistics to EXPLAIN's `BUFFERS` output (Nazir Bilal Yavuz) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Improve EXPLAIN's display of SubPlan nodes and output parameters",
      "description": "Improve EXPLAIN's display of SubPlan nodes and output parameters (Tom Lane, Dean Rasheed) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add JIT `deform_counter` details to EXPLAIN",
      "description": "Add JIT `deform_counter` details to EXPLAIN (Dmitry Dolgov) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow the interval data type to support `+/-infinity` values",
      "description": "Allow the interval data type to support `+/-infinity` values (Joseph Koshakow, Jian He, Ashutosh Bapat) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow MERGE to modify updatable views",
      "description": "Allow MERGE to modify updatable views (Dean Rasheed) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add `WHEN NOT MATCHED BY SOURCE` to MERGE",
      "description": "Add `WHEN NOT MATCHED BY SOURCE` to MERGE (Dean Rasheed) §\n            `WHEN NOT MATCHED` on target rows was already supported.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow MERGE to use the `RETURNING` clause",
      "description": "Allow MERGE to use the `RETURNING` clause (Dean Rasheed) §\n            The new `RETURNING` function `merge_action()()` reports on the DML that generated the row.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add function `JSON_TABLE",
      "description": "Add function `JSON_TABLE()()` to convert JSON data to a table representation (Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov, Andrew Dunstan, Amit Langote, Jian He) § §\n            This function can be used in the `FROM` clause of SELECT queries as a tuple source.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add SQL/JSON constructor functions `JSON",
      "description": "Add SQL/JSON constructor functions `JSON()()`, `JSON_SCALAR()()`, and `JSON_SERIALIZE()()` (Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov, Andrew Dunstan, Amit Langote) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add SQL/JSON query functions `JSON_EXISTS",
      "description": "Add SQL/JSON query functions `JSON_EXISTS()()`, `JSON_QUERY()()`, and `JSON_VALUE()()` (Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov, Andrew Dunstan, Amit Langote, Peter Eisentraut, Jian He) § § § § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add jsonpath methods to convert JSON values to other JSON data types",
      "description": "Add jsonpath methods to convert JSON values to other JSON data types (Jeevan Chalke) §\n            The jsonpath methods are `.bigint()()`, `.boolean()()`, `.date()()`, `.decimal([precision [, scale]])()`, `.integer()()`, `.number()()`, `.string()()`, `.time()()`, `.time_tz()()`, `.timestamp()()`, and `.timestamp_tz()()`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add `to_timestamp",
      "description": "Add `to_timestamp()()` time zone format specifiers (Tom Lane) §\n            `TZ` accepts time zone abbreviations or numeric offsets, while `OF` accepts only numeric offsets.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow the session time zone to be specified by `AS LOCAL`",
      "description": "Allow the session time zone to be specified by `AS LOCAL` (Vik Fearing) §\n            This is useful when converting adding and removing time zones from time stamps values, rather than specifying the literal session time zone.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add functions `uuid_extract_timestamp",
      "description": "Add functions `uuid_extract_timestamp()()` and `uuid_extract_version()()` to return UUID information (Andrey Borodin) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add functions to generate random numbers in a specified range",
      "description": "Add functions to generate random numbers in a specified range (Dean Rasheed) §\n            The functions are `random(min, max)()` and they take values of type integer, bigint, and numeric.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add functions to convert integers to binary and octal strings",
      "description": "Add functions to convert integers to binary and octal strings (Eric Radman, Nathan Bossart) §\n            The functions are `to_bin()()` and `to_oct()()`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add Unicode informational functions",
      "description": "Add Unicode informational functions (Jeff Davis) §\n            Function `unicode_version()()` returns the Unicode version, `icu_unicode_version()()` returns the ICU version, and `unicode_assigned()()` returns if the characters are assigned Unicode codepoints.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add function `xmltext",
      "description": "Add function `xmltext()()` to convert text to a single XML text node (Jim Jones) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add function `to_regtypemod",
      "description": "Add function `to_regtypemod()()` to return the type modifier of a type specification (David Wheeler, Erik Wienhold) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add `pg_basetype",
      "description": "Add `pg_basetype()()` function to return a domain's base type (Steve Chavez) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add function `pg_column_toast_chunk_id",
      "description": "Add function `pg_column_toast_chunk_id()()` to return a value's TOAST identifier (Yugo Nagata) §\n            This returns `NULL` if the value is not stored in TOAST.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow plpgsql `%TYPE` and `%ROWTYPE` specifications to represent arrays of non-array types",
      "description": "Allow plpgsql `%TYPE` and `%ROWTYPE` specifications to represent arrays of non-array types (Quan Zongliang, Pavel Stehule) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow plpgsql `%TYPE` specification to reference composite column",
      "description": "Allow plpgsql `%TYPE` specification to reference composite column (Tom Lane) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add libpq function to change role passwords",
      "description": "Add libpq function to change role passwords (Joe Conway) §\n            The new function, `PQchangePassword()()`, hashes the new password before sending it to the server.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add libpq functions to close portals and prepared statements",
      "description": "Add libpq functions to close portals and prepared statements (Jelte Fennema-Nio) §\n            The functions are `PQclosePrepared()()`, `PQclosePortal()()`, `PQsendClosePrepared()()`, and `PQsendClosePortal()()`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add libpq API which allows for blocking and non-blocking cancel requests, with encryption if already in use",
      "description": "Add libpq API which allows for blocking and non-blocking cancel requests, with encryption if already in use (Jelte Fennema-Nio) §\n            Previously only blocking, unencrypted cancel requests were supported.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add libpq function `PQsocketPoll",
      "description": "Add libpq function `PQsocketPoll()()` to allow polling of network sockets (Tristan Partin, Tom Lane) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add libpq function `PQsendPipelineSync",
      "description": "Add libpq function `PQsendPipelineSync()()` to send a pipeline synchronization point (Anton Kirilov) §\n            This is similar to `PQpipelineSync()()` but it does not flush to the server unless the size threshold of the output buffer is reached.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add libpq function `PQsetChunkedRowsMode",
      "description": "Add libpq function `PQsetChunkedRowsMode()()` to allow retrieval of results in chunks (Daniel Vérité) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow TLS connections without requiring a network round-trip negotiation",
      "description": "Allow TLS connections without requiring a network round-trip negotiation (Greg Stark, Heikki Linnakangas, Peter Eisentraut, Michael Paquier, Daniel Gustafsson) § § § § § § § §\n            This is enabled with the client-side option `sslnegotiation=direct`, requires ALPN, and only works on PostgreSQL 17 and later servers.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Improve psql display of default and empty privileges",
      "description": "Improve psql display of default and empty privileges (Erik Wienhold, Laurenz Albe) §\n            Command `\\dp` now displays `(none)` for empty privileges; default still displays as empty.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Have backslash commands honor `\\pset null`",
      "description": "Have backslash commands honor `\\pset null` (Erik Wienhold, Laurenz Albe) §\n            Previously `\\pset null` was ignored.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow psql's `\\watch` to stop after a minimum number of rows returned",
      "description": "Allow psql's `\\watch` to stop after a minimum number of rows returned (Greg Sabino Mullane) §\n            The parameter is `min_rows`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow psql connection attempts to be canceled with control-C",
      "description": "Allow psql connection attempts to be canceled with control-C (Tristan Partin) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow psql to honor `FETCH_COUNT` for non-SELECT queries",
      "description": "Allow psql to honor `FETCH_COUNT` for non-SELECT queries (Daniel Vérité) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Improve psql tab completion",
      "description": "Improve psql tab completion (Dagfinn Ilmari Mannsåker, Gilles Darold, Christoph Heiss, Steve Chavez, Vignesh C, Pavel Borisov, Jian He) § § § § § § § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add application pg_walsummary to dump WAL summary files",
      "description": "Add application pg_walsummary to dump WAL summary files (Robert Haas) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow pg_dump's large objects to be restorable in batches",
      "description": "Allow pg_dump's large objects to be restorable in batches (Tom Lane) §\n            This allows the restoration of many large objects to avoid transaction limits and to be restored in parallel.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add pg_dump option --exclude-extension",
      "description": "Add pg_dump option --exclude-extension (Ayush Vatsa) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow pg_dump, pg_dumpall, and pg_restore to specify include/exclude objects in a file",
      "description": "Allow pg_dump, pg_dumpall, and pg_restore to specify include/exclude objects in a file (Pavel Stehule, Daniel Gustafsson) §\n            The option is called --filter.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add the --sync-method parameter to several client applications",
      "description": "Add the --sync-method parameter to several client applications (Justin Pryzby, Nathan Bossart) §\n            The applications are initdb, pg_basebackup, pg_checksums, pg_dump, pg_rewind, and pg_upgrade.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Change pgbench debug mode option from -d to --debug",
      "description": "Change pgbench debug mode option from -d to --debug (Greg Sabino Mullane) §\n            Option -d is now used for the database name, and the new --dbname option can be used as well.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add pgbench option --exit-on-abort to exit after any client aborts",
      "description": "Add pgbench option --exit-on-abort to exit after any client aborts (Yugo Nagata) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add pgbench command `\\syncpipeline` to allow sending of sync messages",
      "description": "Add pgbench command `\\syncpipeline` to allow sending of sync messages (Anthonin Bonnefoy) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow pg_archivecleanup to remove backup history files",
      "description": "Allow pg_archivecleanup to remove backup history files (Atsushi Torikoshi) §\n            The option is --clean-backup-history.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add some long options to pg_archivecleanup",
      "description": "Add some long options to pg_archivecleanup (Atsushi Torikoshi) §\n            The long options are --debug, --dry-run, and --strip-extension.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow pg_basebackup and pg_receivewal to use dbname in their connection specification",
      "description": "Allow pg_basebackup and pg_receivewal to use dbname in their connection specification (Jelte Fennema-Nio) §\n            This is useful for connection poolers that are sensitive to the database name.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add pg_upgrade option --copy-file-range",
      "description": "Add pg_upgrade option --copy-file-range (Thomas Munro) §\n            This is supported on Linux and FreeBSD.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow reindexdb --index to process indexes from different tables in parallel",
      "description": "Allow reindexdb --index to process indexes from different tables in parallel (Maxim Orlov, Svetlana Derevyanko, Alexander Korotkov) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow reindexdb, vacuumdb, and clusterdb to process objects in all databases matching a pattern",
      "description": "Allow reindexdb, vacuumdb, and clusterdb to process objects in all databases matching a pattern (Nathan Bossart) § § §\n            The new option --all controls this behavior.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove support for OpenSSL 1.0.1",
      "description": "Remove support for OpenSSL 1.0.1 (Michael Paquier) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow tests to pass in OpenSSL FIPS mode",
      "description": "Allow tests to pass in OpenSSL FIPS mode (Peter Eisentraut) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Use CPU AVX-512 instructions for bit counting",
      "description": "Use CPU AVX-512 instructions for bit counting (Paul Amonson, Nathan Bossart, Ants Aasma) § §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Require LLVM version 10 or later",
      "description": "Require LLVM version 10 or later (Thomas Munro) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Use native CRC instructions on 64-bit LoongArch CPUs",
      "description": "Use native CRC instructions on 64-bit LoongArch CPUs (Xudong Yang) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove AIX support",
      "description": "Remove AIX support (Heikki Linnakangas) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove the Microsoft Visual Studio-specific PostgreSQL build option",
      "description": "Remove the Microsoft Visual Studio-specific PostgreSQL build option (Michael Paquier) §\n            Meson is now the only available method for Visual Studio builds.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove configure option --disable-thread-safety",
      "description": "Remove configure option --disable-thread-safety (Thomas Munro, Heikki Linnakangas) § §\n            We now assume all supported platforms have sufficient thread support.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove configure option --with-CC",
      "description": "Remove configure option --with-CC (Heikki Linnakangas) §\n            Setting the CC environment variable is now the only supported method for specifying the compiler.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "User-defined data type receive functions will no longer receive their data null-terminated",
      "description": "User-defined data type receive functions will no longer receive their data null-terminated (David Rowley) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add incremental JSON parser for use with huge JSON documents",
      "description": "Add incremental JSON parser for use with huge JSON documents (Andrew Dunstan) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Convert top-level README file to Markdown",
      "description": "Convert top-level README file to Markdown (Nathan Bossart) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove no longer needed top-level INSTALL file",
      "description": "Remove no longer needed top-level INSTALL file (Tom Lane) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove make's `distprep` option",
      "description": "Remove make's `distprep` option (Peter Eisentraut) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add make support for Android shared libraries",
      "description": "Add make support for Android shared libraries (Peter Eisentraut) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add backend support for injection points",
      "description": "Add backend support for injection points (Michael Paquier) § § § §\n            This is used for server debugging and they must be enabled at server compile time.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add dynamic shared memory registry",
      "description": "Add dynamic shared memory registry (Nathan Bossart) §\n            This allows shared libraries which are not initialized at startup to coordinate dynamic shared memory access.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Fix `emit_log_hook` to use the same time value as other log records for the same query",
      "description": "Fix `emit_log_hook` to use the same time value as other log records for the same query (Kambam Vinay, Michael Paquier) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Improve documentation for using `jsonpath` for predicate checks",
      "description": "Improve documentation for using `jsonpath` for predicate checks (David Wheeler) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow joins with non-join qualifications to be pushed down to foreign servers and custom scans",
      "description": "Allow joins with non-join qualifications to be pushed down to foreign servers and custom scans (Richard Guo, Etsuro Fujita) §\n            Foreign data wrappers and custom scans will need to be modified to handle these cases.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow pushdown of `EXISTS` and `IN` subqueries to postgres_fdw foreign servers",
      "description": "Allow pushdown of `EXISTS` and `IN` subqueries to postgres_fdw foreign servers (Alexander Pyhalov) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Increase the default foreign data wrapper tuple cost",
      "description": "Increase the default foreign data wrapper tuple cost (David Rowley, Umair Shahid) § §\n            This value is used by the optimizer.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow dblink database operations to be interrupted",
      "description": "Allow dblink database operations to be interrupted (Noah Misch) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow the creation of hash indexes on ltree columns",
      "description": "Allow the creation of hash indexes on ltree columns (Tommy Pavlicek) §\n            This also enables hash join and hash aggregation on ltree columns.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow unaccent character translation rules to contain whitespace and quotes",
      "description": "Allow unaccent character translation rules to contain whitespace and quotes (Michael Paquier) §\n            The syntax for the unaccent.rules file has changed.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow amcheck to check for unique constraint violations using new option --checkunique",
      "description": "Allow amcheck to check for unique constraint violations using new option --checkunique (Anastasia Lubennikova, Pavel Borisov, Maxim Orlov) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow citext tests to pass in OpenSSL FIPS mode",
      "description": "Allow citext tests to pass in OpenSSL FIPS mode (Peter Eisentraut) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Allow pgcrypto tests to pass in OpenSSL FIPS mode",
      "description": "Allow pgcrypto tests to pass in OpenSSL FIPS mode (Peter Eisentraut) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove some unused SPI macros",
      "description": "Remove some unused SPI macros (Bharath Rupireddy) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Remove adminpack contrib extension",
      "description": "Remove adminpack contrib extension (Daniel Gustafsson) §\n            This was used by now end-of-life pgAdmin III.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add pg_buffercache function `pg_buffercache_evict",
      "description": "Add pg_buffercache function `pg_buffercache_evict()()` to allow shared buffer eviction (Palak Chaturvedi, Thomas Munro) §\n            This is useful for testing.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Replace CALL parameters in pg_stat_statements with placeholders",
      "description": "Replace CALL parameters in pg_stat_statements with placeholders (Sami Imseih) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Replace savepoint names stored in pg_stat_statements with placeholders",
      "description": "Replace savepoint names stored in pg_stat_statements with placeholders (Greg Sabino Mullane) §\n              This greatly reduces the number of entries needed to record SAVEPOINT, RELEASE SAVEPOINT, and ROLLBACK TO SAVEPOINT commands.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Replace the two-phase commit GIDs stored in pg_stat_statements with placeholders",
      "description": "Replace the two-phase commit GIDs stored in pg_stat_statements with placeholders (Michael Paquier) §\n              This greatly reduces the number of entries needed to record PREPARE TRANSACTION, COMMIT PREPARED, and ROLLBACK PREPARED.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Track DEALLOCATE in pg_stat_statements",
      "description": "Track DEALLOCATE in pg_stat_statements (Dagfinn Ilmari Mannsåker, Michael Paquier) §\n              DEALLOCATE names are stored in pg_stat_statements as placeholders.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add local I/O block read/write timing statistics columns of pg_stat_statements",
      "description": "Add local I/O block read/write timing statistics columns of pg_stat_statements (Nazir Bilal Yavuz) § §\n              The new columns are local_blk_read_time and local_blk_write_time.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add JIT deform_counter details to pg_stat_statements",
      "description": "Add JIT deform_counter details to pg_stat_statements (Dmitry Dolgov) §",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add optional fourth argument",
      "description": "Add optional fourth argument (`minmax_only`) to `pg_stat_statements_reset()()` to allow for the resetting of only min/max statistics (Andrei Zubkov) §\n              This argument defaults to `false`.",
      "sinceVersion": "17.0",
      "contributor": null
    },
    {
      "title": "Add pg_stat_statements columns stats_since and minmax_stats_since to track entry creation time and last min/max reset time",
      "description": "Add pg_stat_statements columns stats_since and minmax_stats_since to track entry creation time and last min/max reset time (Andrei Zubkov) §",
      "sinceVersion": "17.0",
      "contributor": null
    }
  ],
  "performanceImprovements": [
    {
      "title": "Untitled performance improvement",
      "description": "Significant general performance improvements",
      "sinceVersion": "10.0",
      "significant": true,
      "contributor": null
    },
    {
      "title": "Improve hash index performance",
      "description": "Improve hash index performance (Amit Kapila, Mithun Cy, Ashutosh Sharma)",
      "sinceVersion": "10.0",
      "significant": false,
      "contributor": "Amit Kapila, Mithun Cy, Ashutosh Sharma"
    },
    {
      "title": "Allow faster GiST inserts and updates by reusing index space more efficiently",
      "description": "Allow faster GiST inserts and updates by reusing index space more efficiently (Andrey Borodin)",
      "sinceVersion": "10.0",
      "significant": false,
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Improve performance of queries affected by row-level security restrictions",
      "description": "Improve performance of queries affected by row-level security restrictions (Tom Lane)\nThe optimizer now has more knowledge about where it can place RLS filter conditions, allowing better plans to be generated while still enforcing the RLS conditions safely.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Speed up aggregate functions that calculate a running sum using numeric-type arithmetic, including some variants of `SUM",
      "description": "Speed up aggregate functions that calculate a running sum using numeric-type arithmetic, including some variants of `SUM()()`, `AVG()()`, and `STDDEV()()` (Heikki Linnakangas)",
      "sinceVersion": "10.0",
      "significant": false,
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Improve performance of character encoding conversions by using radix trees",
      "description": "Improve performance of character encoding conversions by using radix trees (Kyotaro Horiguchi, Heikki Linnakangas)",
      "sinceVersion": "10.0",
      "significant": false,
      "contributor": "Kyotaro Horiguchi, Heikki Linnakangas"
    },
    {
      "title": "Improve sort performance of the macaddr data type",
      "description": "Improve sort performance of the macaddr data type (Brandur Leach)",
      "sinceVersion": "10.0",
      "significant": false,
      "contributor": "Brandur Leach"
    },
    {
      "title": "Improve performance of hot standby replay with better tracking of Access Exclusive locks",
      "description": "Improve performance of hot standby replay with better tracking of Access Exclusive locks (Simon Riggs, David Rowley)",
      "sinceVersion": "10.0",
      "significant": false,
      "contributor": "Simon Riggs, David Rowley"
    },
    {
      "title": "Speed up two-phase commit recovery performance",
      "description": "Speed up two-phase commit recovery performance (Stas Kelvich, Nikhil Sontakke, Michael Paquier)",
      "sinceVersion": "10.0",
      "significant": false,
      "contributor": "Stas Kelvich, Nikhil Sontakke, Michael Paquier"
    },
    {
      "title": "Improve speed of VACUUM's removal of trailing empty heap pages",
      "description": "Improve speed of VACUUM's removal of trailing empty heap pages (Claudio Freire, Álvaro Herrera)",
      "sinceVersion": "10.0",
      "significant": false,
      "contributor": "Claudio Freire, Álvaro Herrera"
    },
    {
      "title": "Prevent sharing transition states between ordered-set aggregates",
      "description": "Prevent sharing transition states between ordered-set aggregates (David Rowley)\nThis causes a crash with the built-in ordered-set aggregates, and probably with user-written ones as well. v11 and later will include provisions for dealing with such cases safely, but in released branches, just disable the optimization.",
      "sinceVersion": "10.1",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Reduce the frequency of data flush requests during bulk file copies to avoid performance problems on macOS, particularly with its new APFS file system",
      "description": "Reduce the frequency of data flush requests during bulk file copies to avoid performance problems on macOS, particularly with its new APFS file system (Tom Lane)",
      "sinceVersion": "10.1",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid an unnecessary catalog lookup during heap page pruning",
      "description": "Avoid an unnecessary catalog lookup during heap page pruning (Thomas Munro)\nIt's no longer necessary to check for unlogged indexes here, and the check caused significant performance problems in some workloads. There was also at least a theoretical possibility of deadlock.",
      "sinceVersion": "10.11",
      "significant": true,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix contrib/intarray's GiST opclasses to not fail for empty arrays with `&lt;@`",
      "description": "Fix contrib/intarray's GiST opclasses to not fail for empty arrays with `&lt;@` (Tom Lane)\nA clause like ``array_column` &lt;@ constant_array` is considered indexable, but the index search may not find empty array values; of course, such entries should trivially match the search.\nThe only practical back-patchable fix for this requires making `&lt;@` index searches scan the whole index, which is what this patch does. This is unfortunate: it means that the query performance is likely worse than a plain sequential scan would be.\nApplications whose performance is adversely impacted by this change have a couple of options. They could switch to a GIN index, which doesn't have this bug, or they could replace ``array_column` &lt;@ constant_array` with ``array_column` &lt;@ constant_array` AND `array_column` &amp;&amp; `constant_array`. That will provide about the same performance as before, and it will find all non-empty subsets of the given constant array, which is all that could reliably be expected of the query before.",
      "sinceVersion": "10.11",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve performance of hash joins with very large inner relations",
      "description": "Improve performance of hash joins with very large inner relations (Thomas Munro)",
      "sinceVersion": "10.12",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "In logical replication walsender, fix failure to send feedback messages after sending a keepalive message",
      "description": "In logical replication walsender, fix failure to send feedback messages after sending a keepalive message (Álvaro Herrera)\nThis is a relatively minor problem when using built-in logical replication, because the built-in walreceiver will send a feedback reply (which clears the incorrect state) fairly frequently anyway. But with some other replication systems, such as pglogical, it causes significant performance issues.",
      "sinceVersion": "10.14",
      "significant": true,
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid misoptimization of subquery qualifications that reference apparently-constant grouping columns",
      "description": "Avoid misoptimization of subquery qualifications that reference apparently-constant grouping columns (Tom Lane)\nA “constant” subquery output column isn't really constant if it is a grouping column that appears in only some of the grouping sets.",
      "sinceVersion": "10.15",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "In libpq for Windows, call `WSAStartup",
      "description": "In libpq for Windows, call `WSAStartup()()` once per process and `WSACleanup()()` not at all (Tom Lane, Alexander Lakhin)\nPreviously, libpq invoked `WSAStartup()()` at connection start and `WSACleanup()()` at connection cleanup. However, it appears that calling `WSACleanup()()` can interfere with other program operations; notably, we have observed rare failures to emit expected output to stdout. There appear to be no ill effects from omitting the call, so do that. (This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections.)",
      "sinceVersion": "10.15",
      "significant": false,
      "contributor": "Tom Lane, Alexander Lakhin"
    },
    {
      "title": "Make pg_upgrade carry forward the old installation's `oldestXID` value",
      "description": "Make pg_upgrade carry forward the old installation's `oldestXID` value (Bertrand Drouvot)\nPreviously, the new installation's `oldestXID` was set to a value old enough to (usually) force immediate anti-wraparound autovacuuming. That's not desirable from a performance standpoint; what's worse, installations using large values of autovacuum_freeze_max_age could suffer unwanted forced shutdowns soon after an upgrade.",
      "sinceVersion": "10.18",
      "significant": false,
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Prevent data loss during crash recovery of CREATE TABLESPACE, when wal_level = `minimal`",
      "description": "Prevent data loss during crash recovery of CREATE TABLESPACE, when wal_level = `minimal` (Noah Misch)\nIf the server crashed between CREATE TABLESPACE and the next checkpoint, replay would fully remove the contents of the new tablespace's directory, relying on subsequent WAL replay to restore everything within that directory. This interacts badly with optimizations that skip writing WAL (one example is COPY into a just-created table). Such optimizations are applied only when wal_level is `minimal`, which is not the default in v10 and later.",
      "sinceVersion": "10.19",
      "significant": false,
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix regular expression performance bug with back-references inside iteration nodes",
      "description": "Fix regular expression performance bug with back-references inside iteration nodes (Tom Lane)\nIncorrect back-tracking logic could result in exponential time spent looking for a match. Fortunately the problem is masked in most cases by other optimizations.",
      "sinceVersion": "10.19",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "Prevent wraparound of overflowed-subtransaction tracking on standby servers (Kyotaro Horiguchi, Alexander Korotkov)\nThis oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "sinceVersion": "10.19",
      "significant": true,
      "contributor": "Kyotaro Horiguchi, Alexander Korotkov"
    },
    {
      "title": "Improve pg_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type",
      "description": "Improve pg_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type()()` (Tom Lane)\nThese changes provide only marginal improvement when dumping from a local server, but a dump from a remote server can benefit substantially due to fewer network round-trips.",
      "sinceVersion": "10.19",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Add spinlock support for the RISC-V architecture",
      "description": "Add spinlock support for the RISC-V architecture (Marek Szuba)\nThis is essential for reasonable performance on that platform.",
      "sinceVersion": "10.19",
      "significant": false,
      "contributor": "Marek Szuba"
    },
    {
      "title": "Provide for forward compatibility with future minor protocol versions",
      "description": "Provide for forward compatibility with future minor protocol versions (Robert Haas, Badrul Chowdhury)\nUp to now, PostgreSQL servers simply rejected requests to use protocol versions newer than 3.0, so that there was no functional difference between the major and minor parts of the protocol version number. Allow clients to request versions 3.x without failing, sending back a message showing that the server only understands 3.0. This makes no difference at the moment, but back-patching this change should allow speedier introduction of future minor protocol upgrades.",
      "sinceVersion": "10.2",
      "significant": true,
      "contributor": "Robert Haas, Badrul Chowdhury"
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale",
      "description": "In ecpglib, avoid redundant `newlocale()()` calls (Noah Misch)\nAllocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "sinceVersion": "10.22",
      "significant": false,
      "contributor": "Noah Misch"
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "In Snowball dictionaries, don't try to stem excessively-long words (Olly Betts, Tom Lane)\nIf the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "sinceVersion": "10.23",
      "significant": false,
      "contributor": "Olly Betts, Tom Lane"
    },
    {
      "title": "Fix incorrect volatility markings on a few built-in functions",
      "description": "Fix incorrect volatility markings on a few built-in functions (Thomas Munro, Tom Lane)\nThe functions `query_to_xml()`, `cursor_to_xml()`, `cursor_to_xmlschema()`, `query_to_xmlschema()`, and `query_to_xml_and_xmlschema()` should be marked volatile because they execute user-supplied queries that might contain volatile operations. They were not, leading to a risk of incorrect query optimization. This has been repaired for new installations by correcting the initial catalog data, but existing installations will continue to contain the incorrect markings. Practical use of these functions seems to pose little hazard, but in case of trouble, it can be fixed by manually updating these functions' pg_proc entries, for example `ALTER FUNCTION pg_catalog.query_to_xml(text, boolean, boolean, text) VOLATILE`. (Note that that will need to be done in each database of the installation.) Another option is to pg_upgrade the database to a version containing the corrected initial data.",
      "sinceVersion": "10.4",
      "significant": false,
      "contributor": "Thomas Munro, Tom Lane"
    },
    {
      "title": "Fix misoptimization of `CHECK` constraints having provably-NULL subclauses of top-level `AND`/`OR` conditions",
      "description": "Fix misoptimization of `CHECK` constraints having provably-NULL subclauses of top-level `AND`/`OR` conditions (Tom Lane, Dean Rasheed)\nThis could, for example, allow constraint exclusion to exclude a child table that should not be excluded from a query.",
      "sinceVersion": "10.4",
      "significant": false,
      "contributor": "Tom Lane, Dean Rasheed"
    },
    {
      "title": "Improve performance of WAL replay for transactions that drop many relations",
      "description": "Improve performance of WAL replay for transactions that drop many relations (Fujii Masao)\nThis change reduces the number of times that shared buffers are scanned, so that it is of most benefit when that setting is large.",
      "sinceVersion": "10.5",
      "significant": false,
      "contributor": "Fujii Masao"
    },
    {
      "title": "Improve performance of lock releasing in standby server WAL replay",
      "description": "Improve performance of lock releasing in standby server WAL replay (Thomas Munro)",
      "sinceVersion": "10.5",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Pad arrays of unnamed POSIX semaphores to reduce cache line sharing",
      "description": "Pad arrays of unnamed POSIX semaphores to reduce cache line sharing (Thomas Munro)\nThis reduces contention on many-CPU systems, fixing a performance regression (compared to previous releases) on Linux and FreeBSD.",
      "sinceVersion": "10.5",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix hash-join costing mistake introduced with inner_unique optimization",
      "description": "Fix hash-join costing mistake introduced with inner_unique optimization (David Rowley)\nThis could lead to bad plan choices in situations where that optimization was applicable.",
      "sinceVersion": "10.5",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Fix misoptimization of equivalence classes involving composite-type columns",
      "description": "Fix misoptimization of equivalence classes involving composite-type columns (Tom Lane)\nThis resulted in failure to recognize that an index on a composite column could provide the sort order needed for a mergejoin on that column.",
      "sinceVersion": "10.5",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Update the free space map during WAL replay of page all-visible/frozen flag changes",
      "description": "Update the free space map during WAL replay of page all-visible/frozen flag changes (Álvaro Herrera)\nPreviously we were not careful about this, reasoning that the FSM is not critical data anyway. However, if it's sufficiently out of date, that can result in significant performance degradation after a standby has been promoted to primary. The FSM will eventually be healed by updates, but we'd like it to be good sooner, so work harder at maintaining it during WAL replay.",
      "sinceVersion": "10.6",
      "significant": true,
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid using potentially-under-aligned page buffers",
      "description": "Avoid using potentially-under-aligned page buffers (Tom Lane)\nInvent new union types PGAlignedBlock and PGAlignedXLogBlock, and use these in place of plain char arrays, ensuring that the compiler can't place the buffer at a misaligned start address. This fixes potential core dumps on alignment-picky platforms, and may improve performance even on platforms that allow misalignment.",
      "sinceVersion": "10.6",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid deadlock between GIN vacuuming and concurrent index insertions",
      "description": "Avoid deadlock between GIN vacuuming and concurrent index insertions (Alexander Korotkov, Andrey Borodin, Peter Geoghegan)\nThis change partially reverts a performance improvement, introduced in version 10.0, that attempted to reduce the number of index pages locked during deletion of a GIN posting tree page. That's now been found to lead to deadlocks, so we've removed it pending closer analysis.",
      "sinceVersion": "10.7",
      "significant": false,
      "contributor": "Alexander Korotkov, Andrey Borodin, Peter Geoghegan"
    },
    {
      "title": "Prevent incorrect use of WAL-skipping optimization during COPY to a view or foreign table",
      "description": "Prevent incorrect use of WAL-skipping optimization during COPY to a view or foreign table (Amit Langote, Michael Paquier)",
      "sinceVersion": "10.7",
      "significant": false,
      "contributor": "Amit Langote, Michael Paquier"
    },
    {
      "title": "Speed up planning when there are many equality conditions and many potentially-relevant foreign key constraints",
      "description": "Speed up planning when there are many equality conditions and many potentially-relevant foreign key constraints (David Rowley)",
      "sinceVersion": "10.8",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid O",
      "description": "Avoid O(N^2) performance issue when rolling back a transaction that created many tables (Tomas Vondra)",
      "sinceVersion": "10.8",
      "significant": false,
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix misoptimization of `{1,1}` quantifiers in regular expressions",
      "description": "Fix misoptimization of `{1,1}` quantifiers in regular expressions (Tom Lane)\nSuch quantifiers were treated as no-ops and optimized away; but the documentation specifies that they impose greediness, or non-greediness in the case of the non-greedy variant `{1,1}?`, on the subexpression they're attached to, and this did not happen. The misbehavior occurred only if the subexpression contained capturing parentheses or a back-reference.",
      "sinceVersion": "10.9",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled performance improvement",
      "description": "Improvements to partitioning functionality, including:\n          \n            \n              \n                Add support for partitioning by a hash key\n              \n              \n                Add support for `PRIMARY KEY`, `FOREIGN KEY`, indexes, and triggers on partitioned tables\n              \n              \n                Allow creation of a “default” partition for storing data that does not match any of the remaining partitions\n              \n              \n                UPDATE statements that change a partition key column now cause affected rows to be moved to the appropriate partitions\n              \n              \n                Improve SELECT performance through enhanced partition elimination strategies during query planning and execution\n              \n            \n          ",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Untitled performance improvement",
      "description": "Improve SELECT performance through enhanced partition elimination strategies during query planning and execution",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Optional Just-in-Time",
      "description": "Optional Just-in-Time (JIT) compilation for some SQL code, speeding evaluation of expressions",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Untitled performance improvement",
      "description": "Many other useful performance improvements, including the ability to avoid a table rewrite for ALTER TABLE ... ADD COLUMN with a non-null column default",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Allow faster partition elimination during query processing",
      "description": "Allow faster partition elimination during query processing (Amit Langote, David Rowley, Dilip Kumar)\n              This speeds access to partitioned tables with many partitions.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "Amit Langote, David Rowley, Dilip Kumar"
    },
    {
      "title": "Improve performance of sequential scans with many parallel workers",
      "description": "Improve performance of sequential scans with many parallel workers (David Rowley)",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Improve performance of monotonically increasing index additions",
      "description": "Improve performance of monotonically increasing index additions (Pavan Deolasee, Peter Geoghegan)",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "Pavan Deolasee, Peter Geoghegan"
    },
    {
      "title": "Improve performance of hash index scans",
      "description": "Improve performance of hash index scans (Ashutosh Sharma)",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "Ashutosh Sharma"
    },
    {
      "title": "Add Just-in-Time",
      "description": "Add Just-in-Time (JIT) compilation of some parts of query plans to improve execution speed (Andres Freund)\n              This feature requires LLVM to be available. It is not currently enabled by default, even in builds that support it.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "Andres Freund"
    },
    {
      "title": "Improve performance of committing multiple concurrent transactions",
      "description": "Improve performance of committing multiple concurrent transactions (Amit Kapila)",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "Amit Kapila"
    },
    {
      "title": "Improve the speed of aggregate computations",
      "description": "Improve the speed of aggregate computations (Andres Freund)",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "Andres Freund"
    },
    {
      "title": "Speed up lookups of built-in functions by OID",
      "description": "Speed up lookups of built-in functions by OID (Andres Freund)\n            The previous binary search has been replaced by a lookup array.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "Andres Freund"
    },
    {
      "title": "Speed up construction of query results",
      "description": "Speed up construction of query results (Andres Freund)",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "Andres Freund"
    },
    {
      "title": "Improve speed of access to system caches",
      "description": "Improve speed of access to system caches (Andres Freund)",
      "sinceVersion": "11.0",
      "significant": false,
      "contributor": "Andres Freund"
    },
    {
      "title": "Disable recheck_on_update optimization",
      "description": "Disable recheck_on_update optimization (Tom Lane)\n          This new-in-v11 feature turns out not to have been ready for prime time. Disable it until something can be done about it.",
      "sinceVersion": "11.1",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid misoptimization of subquery qualifications that reference apparently-constant grouping columns",
      "description": "Avoid misoptimization of subquery qualifications that reference apparently-constant grouping columns (Tom Lane)\n          A “constant” subquery output column isn't really constant if it is a grouping column that appears in only some of the grouping sets.",
      "sinceVersion": "11.10",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "In libpq for Windows, call `WSAStartup",
      "description": "In libpq for Windows, call `WSAStartup()()` once per process and `WSACleanup()()` not at all (Tom Lane, Alexander Lakhin)\n          Previously, libpq invoked `WSAStartup()()` at connection start and `WSACleanup()()` at connection cleanup. However, it appears that calling `WSACleanup()()` can interfere with other program operations; notably, we have observed rare failures to emit expected output to stdout. There appear to be no ill effects from omitting the call, so do that. (This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections.)",
      "sinceVersion": "11.10",
      "significant": false,
      "contributor": "Tom Lane, Alexander Lakhin"
    },
    {
      "title": "Avoid `memcpy",
      "description": "Avoid `memcpy()()` with a NULL source pointer and zero count during partitioned index creation (Álvaro Herrera)\n          While such a call is not known to cause problems in itself, some compilers assume that the arguments of `memcpy()()` are never NULL, which could result in incorrect optimization of nearby code.",
      "sinceVersion": "11.11",
      "significant": false,
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Make pg_upgrade carry forward the old installation's `oldestXID` value",
      "description": "Make pg_upgrade carry forward the old installation's `oldestXID` value (Bertrand Drouvot)\n          Previously, the new installation's `oldestXID` was set to a value old enough to (usually) force immediate anti-wraparound autovacuuming. That's not desirable from a performance standpoint; what's worse, installations using large values of autovacuum_freeze_max_age could suffer unwanted forced shutdowns soon after an upgrade.",
      "sinceVersion": "11.13",
      "significant": false,
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Prevent data loss during crash recovery of CREATE TABLESPACE, when wal_level = `minimal`",
      "description": "Prevent data loss during crash recovery of CREATE TABLESPACE, when wal_level = `minimal` (Noah Misch)\n          If the server crashed between CREATE TABLESPACE and the next checkpoint, replay would fully remove the contents of the new tablespace's directory, relying on subsequent WAL replay to restore everything within that directory. This interacts badly with optimizations that skip writing WAL (one example is COPY into a just-created table). Such optimizations are applied only when wal_level is `minimal`, which is not the default in v10 and later.",
      "sinceVersion": "11.14",
      "significant": false,
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix regular expression performance bug with back-references inside iteration nodes",
      "description": "Fix regular expression performance bug with back-references inside iteration nodes (Tom Lane)\n          Incorrect back-tracking logic could result in exponential time spent looking for a match. Fortunately the problem is masked in most cases by other optimizations.",
      "sinceVersion": "11.14",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "Prevent wraparound of overflowed-subtransaction tracking on standby servers (Kyotaro Horiguchi, Alexander Korotkov)\n          This oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "sinceVersion": "11.14",
      "significant": true,
      "contributor": "Kyotaro Horiguchi, Alexander Korotkov"
    },
    {
      "title": "Improve pg_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type",
      "description": "Improve pg_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type()()` (Tom Lane)\n          These changes provide only marginal improvement when dumping from a local server, but a dump from a remote server can benefit substantially due to fewer network round-trips.",
      "sinceVersion": "11.14",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Add spinlock support for the RISC-V architecture",
      "description": "Add spinlock support for the RISC-V architecture (Marek Szuba)\n          This is essential for reasonable performance on that platform.",
      "sinceVersion": "11.14",
      "significant": false,
      "contributor": "Marek Szuba"
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale",
      "description": "In ecpglib, avoid redundant `newlocale()()` calls (Noah Misch)\n          Allocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "sinceVersion": "11.17",
      "significant": false,
      "contributor": "Noah Misch"
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "In Snowball dictionaries, don't try to stem excessively-long words (Olly Betts, Tom Lane)\n          If the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "sinceVersion": "11.18",
      "significant": false,
      "contributor": "Olly Betts, Tom Lane"
    },
    {
      "title": "Honor non-default settings of checkpoint_completion_target",
      "description": "Honor non-default settings of checkpoint_completion_target (Bharath Rupireddy)\n          Internal state was not updated after a change in checkpoint_completion_target, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "sinceVersion": "11.19",
      "significant": false,
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range",
      "description": "Limit the amount of cleanup work done by `get_actual_variable_range()` (Simon Riggs)\n          Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "sinceVersion": "11.19",
      "significant": true,
      "contributor": "Simon Riggs"
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary (Simon Riggs, Michail Nikolaev)\n          Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when max_connections is set to a large value on the standby.",
      "sinceVersion": "11.19",
      "significant": false,
      "contributor": "Simon Riggs, Michail Nikolaev"
    },
    {
      "title": "Avoid deadlock between GIN vacuuming and concurrent index insertions",
      "description": "Avoid deadlock between GIN vacuuming and concurrent index insertions (Alexander Korotkov, Andrey Borodin, Peter Geoghegan)\n          This change partially reverts a performance improvement, introduced in version 10.0, that attempted to reduce the number of index pages locked during deletion of a GIN posting tree page. That's now been found to lead to deadlocks, so we've removed it pending closer analysis.",
      "sinceVersion": "11.2",
      "significant": false,
      "contributor": "Alexander Korotkov, Andrey Borodin, Peter Geoghegan"
    },
    {
      "title": "Prevent incorrect use of WAL-skipping optimization during COPY to a view or foreign table",
      "description": "Prevent incorrect use of WAL-skipping optimization during COPY to a view or foreign table (Amit Langote, Michael Paquier)",
      "sinceVersion": "11.2",
      "significant": false,
      "contributor": "Amit Langote, Michael Paquier"
    },
    {
      "title": "Fix performance and memory leakage issues in hash-based grouping",
      "description": "Fix performance and memory leakage issues in hash-based grouping (Andres Freund)",
      "sinceVersion": "11.2",
      "significant": false,
      "contributor": "Andres Freund"
    },
    {
      "title": "Improve planning speed for large inheritance or partitioning table groups",
      "description": "Improve planning speed for large inheritance or partitioning table groups (Amit Langote, Etsuro Fujita)",
      "sinceVersion": "11.2",
      "significant": false,
      "contributor": "Amit Langote, Etsuro Fujita"
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs (David Rowley)\n          This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "sinceVersion": "11.20",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Fix glitches in `SERIALIZABLE READ ONLY` optimization (Thomas Munro)\n          Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "sinceVersion": "11.20",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Speed up planning when there are many equality conditions and many potentially-relevant foreign key constraints",
      "description": "Speed up planning when there are many equality conditions and many potentially-relevant foreign key constraints (David Rowley)",
      "sinceVersion": "11.3",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid O",
      "description": "Avoid O(N^2) performance issue when rolling back a transaction that created many tables (Tomas Vondra)",
      "sinceVersion": "11.3",
      "significant": false,
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Fix misoptimization of `{1,1}` quantifiers in regular expressions",
      "description": "Fix misoptimization of `{1,1}` quantifiers in regular expressions (Tom Lane)\n          Such quantifiers were treated as no-ops and optimized away; but the documentation specifies that they impose greediness, or non-greediness in the case of the non-greedy variant `{1,1}?`, on the subexpression they're attached to, and this did not happen. The misbehavior occurred only if the subexpression contained capturing parentheses or a back-reference.",
      "sinceVersion": "11.4",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid an unnecessary catalog lookup during heap page pruning",
      "description": "Avoid an unnecessary catalog lookup during heap page pruning (Thomas Munro)\n          It's no longer necessary to check for unlogged indexes here, and the check caused significant performance problems in some workloads. There was also at least a theoretical possibility of deadlock.",
      "sinceVersion": "11.6",
      "significant": true,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix failure to JIT-compile equality comparisons for grouping hash tables, leading to performance loss",
      "description": "Fix failure to JIT-compile equality comparisons for grouping hash tables, leading to performance loss (Andres Freund)",
      "sinceVersion": "11.6",
      "significant": false,
      "contributor": "Andres Freund"
    },
    {
      "title": "Fix contrib/intarray's GiST opclasses to not fail for empty arrays with `&lt;@`",
      "description": "Fix contrib/intarray's GiST opclasses to not fail for empty arrays with `&lt;@` (Tom Lane)\n          A clause like ``array_column` &lt;@ constant_array` is considered indexable, but the index search may not find empty array values; of course, such entries should trivially match the search.\n          The only practical back-patchable fix for this requires making `&lt;@` index searches scan the whole index, which is what this patch does. This is unfortunate: it means that the query performance is likely worse than a plain sequential scan would be.\n          Applications whose performance is adversely impacted by this change have a couple of options. They could switch to a GIN index, which doesn't have this bug, or they could replace ``array_column` &lt;@ constant_array` with ``array_column` &lt;@ constant_array` AND `array_column` &amp;&amp; `constant_array`. That will provide about the same performance as before, and it will find all non-empty subsets of the given constant array, which is all that could reliably be expected of the query before.",
      "sinceVersion": "11.6",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve performance of hash joins with very large inner relations",
      "description": "Improve performance of hash joins with very large inner relations (Thomas Munro)",
      "sinceVersion": "11.7",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow the planner to apply potentially-leaky tests to child-table statistics, if the user can read the corresponding column of the table that's actually named in the query",
      "description": "Allow the planner to apply potentially-leaky tests to child-table statistics, if the user can read the corresponding column of the table that's actually named in the query (Dilip Kumar, Amit Langote)\n          This change fixes a performance problem for partitioned tables that was created by the fix for CVE-2017-7484. That security fix disallowed applying leaky operators to statistics for columns that the current user doesn't have permission to read directly. However, it's somewhat common to grant permissions only on the parent partitioned table and not bother to do so on individual partitions. In such cases, the user can read the column via the parent, so there's no point in this security restriction; it only results in poorer planner estimates than necessary.",
      "sinceVersion": "11.7",
      "significant": false,
      "contributor": "Dilip Kumar, Amit Langote"
    },
    {
      "title": "Repair performance regression in information_schema.triggers view",
      "description": "Repair performance regression in information_schema.triggers view (Tom Lane)\n          This patch redefines that view so that an outer `WHERE` clause constraining the table name can be pushed down into the view, allowing its calculations to be done only for triggers belonging to the table of interest rather than all triggers in the database. In a database with many triggers this would make a significant speed difference for queries of that form. Since things worked that way before v11, this is a potential performance regression. Users who find this to be a problem can fix it by replacing the view definition (or, perhaps, just deleting and reinstalling the whole information_schema schema).",
      "sinceVersion": "11.8",
      "significant": true,
      "contributor": "Tom Lane"
    },
    {
      "title": "In logical replication walsender, fix failure to send feedback messages after sending a keepalive message",
      "description": "In logical replication walsender, fix failure to send feedback messages after sending a keepalive message (Álvaro Herrera)\n          This is a relatively minor problem when using built-in logical replication, because the built-in walreceiver will send a feedback reply (which clears the incorrect state) fairly frequently anyway. But with some other replication systems, such as pglogical, it causes significant performance issues.",
      "sinceVersion": "11.9",
      "significant": true,
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "General performance improvements, including:\n          \n            \n              \n                Optimizations to space utilization and read/write performance for B-tree indexes\n              \n              \n                Partitioning performance enhancements, including improved query performance on tables with thousands of partitions, improved insertion performance with INSERT and COPY, and the ability to execute ALTER TABLE ATTACH PARTITION without blocking queries\n              \n              \n                Automatic",
      "description": "General performance improvements, including:\n          \n            \n              \n                Optimizations to space utilization and read/write performance for B-tree indexes\n              \n              \n                Partitioning performance enhancements, including improved query performance on tables with thousands of partitions, improved insertion performance with INSERT and COPY, and the ability to execute ALTER TABLE ATTACH PARTITION without blocking queries\n              \n              \n                Automatic (but overridable) inlining of common table expressions (CTEs)\n              \n              \n                Reduction of WAL overhead for creation of GiST, GIN, and SP-GiST indexes\n              \n              \n                Support for covering GiST indexes, via the `INCLUDE` clause\n              \n              \n                Multi-column most-common-value (MCV) statistics can be defined via CREATE STATISTICS, to support better plans for queries that test several non-uniformly-distributed columns\n              \n            \n          ",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "CTEs"
    },
    {
      "title": "Untitled performance improvement",
      "description": "Optimizations to space utilization and read/write performance for B-tree indexes",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Untitled performance improvement",
      "description": "Partitioning performance enhancements, including improved query performance on tables with thousands of partitions, improved insertion performance with INSERT and COPY, and the ability to execute ALTER TABLE ATTACH PARTITION without blocking queries",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve performance by using a new algorithm for output of real and double precision values",
      "description": "Improve performance by using a new algorithm for output of real and double precision values (Andrew Gierth)\n          Previously, displayed floating-point values were rounded to 6 (for real) or 15 (for double precision) digits by default, adjusted by the value of extra_float_digits. Now, whenever extra_float_digits is more than zero (as it now is by default), only the minimum number of digits required to preserve the exact binary value are output. The behavior is the same as before when extra_float_digits is set to zero or less.\n          Also, formatting of floating-point exponents is now uniform across platforms: two digits are used unless three are necessary. In previous releases, Windows builds always printed three digits.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Andrew Gierth"
    },
    {
      "title": "Treat object-name columns in the information_schema views as being of type name, not varchar",
      "description": "Treat object-name columns in the information_schema views as being of type name, not varchar (Tom Lane)\n          Per the SQL standard, object-name columns in the information_schema views are declared as being of domain type sql_identifier. In PostgreSQL, the underlying catalog columns are really of type name. This change makes sql_identifier be a domain over name, rather than varchar as before. This eliminates a semantic mismatch in comparison and sorting behavior, which can greatly improve the performance of queries on information_schema views that restrict an object-name column. Note however that inequality restrictions, for example\n          SELECT ... FROM information_schema.tables WHERE table_name &lt; 'foo';\n\n          will now use “C”-locale comparison semantics by default, rather than the database's default collation as before. Sorting on these columns will also follow “C” ordering rules. The previous behavior (and inefficiency) can be enforced by adding a `COLLATE \"default\"` clause.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve performance of many operations on partitioned tables",
      "description": "Improve performance of many operations on partitioned tables (Amit Langote, David Rowley, Tom Lane, Álvaro Herrera)\n              Allow tables with thousands of child partitions to be processed efficiently by operations that only affect a small number of partitions.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Amit Langote, David Rowley, Tom Lane, Álvaro Herrera"
    },
    {
      "title": "Improve speed of COPY into partitioned tables",
      "description": "Improve speed of COPY into partitioned tables (David Rowley)",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Improve performance and space utilization of btree indexes with many duplicates",
      "description": "Improve performance and space utilization of btree indexes with many duplicates (Peter Geoghegan, Heikki Linnakangas)\n              Previously, duplicate index entries were stored unordered within their duplicate groups. This caused overhead during index inserts, wasted space due to excessive page splits, and it reduced VACUUM's ability to recycle entire pages. Duplicate index entries are now sorted in heap-storage order.\n              Indexes pg_upgrade'd from previous releases will not have these benefits.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Peter Geoghegan, Heikki Linnakangas"
    },
    {
      "title": "Improve speed of btree index insertions by reducing locking overhead",
      "description": "Improve speed of btree index insertions by reducing locking overhead (Alexander Korotkov)",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Alexander Korotkov"
    },
    {
      "title": "Improve the performance of vacuum scans of GiST indexes",
      "description": "Improve the performance of vacuum scans of GiST indexes (Andrey Borodin, Konstantin Kuznetsov, Heikki Linnakangas)",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Andrey Borodin, Konstantin Kuznetsov, Heikki Linnakangas"
    },
    {
      "title": "Allow CREATE STATISTICS to create most-common-value statistics for multiple columns",
      "description": "Allow CREATE STATISTICS to create most-common-value statistics for multiple columns (Tomas Vondra)\n              This improves optimization for queries that test several columns, requiring an estimate of the combined effect of several `WHERE` clauses. If the columns are correlated and have non-uniform distributions then multi-column statistics will allow much better estimates.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Tomas Vondra"
    },
    {
      "title": "Improve optimization of partition and `UNION ALL` queries that have only a single child",
      "description": "Improve optimization of partition and `UNION ALL` queries that have only a single child (David Rowley)",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Improve processing of domains that have no check constraints",
      "description": "Improve processing of domains that have no check constraints (Tom Lane)\n              Domains that are being used purely as type aliases no longer cause optimization difficulties.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve optimization of joins on columns of type tid",
      "description": "Improve optimization of joins on columns of type tid (Tom Lane)\n              These changes primarily improve the efficiency of self-joins on ctid columns.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Fix the leakproofness designations of some btree comparison operators and support functions",
      "description": "Fix the leakproofness designations of some btree comparison operators and support functions (Tom Lane)\n              This allows some optimizations that previously would not have been applied in the presence of security barrier views or row-level security.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Speed up keyword lookup",
      "description": "Speed up keyword lookup (John Naylor, Joerg Sonnenberger, Tom Lane)",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "John Naylor, Joerg Sonnenberger, Tom Lane"
    },
    {
      "title": "Improve search performance for multi-byte characters in `position",
      "description": "Improve search performance for multi-byte characters in `position()()` and related functions (Heikki Linnakangas)",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Improve speed in converting strings to int2 or int4 integers",
      "description": "Improve speed in converting strings to int2 or int4 integers (Andres Freund)",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Andres Freund"
    },
    {
      "title": "Improve the speed of setting the process title on FreeBSD",
      "description": "Improve the speed of setting the process title on FreeBSD (Thomas Munro)",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Reduce the default value of autovacuum_vacuum_cost_delay to 2ms",
      "description": "Reduce the default value of autovacuum_vacuum_cost_delay to 2ms (Tom Lane)\n              This allows autovacuum operations to proceed faster by default.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow `date_trunc",
      "description": "Allow `date_trunc()()` to have an additional argument to control the time zone (Vik Fearing, Tom Lane)\n            This is faster and simpler than using the `AT TIME ZONE` clause.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Vik Fearing, Tom Lane"
    },
    {
      "title": "Add planner support function interfaces to improve optimizer estimates, inlining, and indexing for functions",
      "description": "Add planner support function interfaces to improve optimizer estimates, inlining, and indexing for functions (Tom Lane)\n            This allows extensions to create planner support functions that can provide function-specific selectivity, cost, and row-count estimates that can depend on the function's arguments. Support functions can also supply simplified representations and index conditions, greatly expanding optimization possibilities.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale",
      "description": "In ecpglib, avoid redundant `newlocale()()` calls (Noah Misch)\n          Allocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "sinceVersion": "12.12",
      "significant": false,
      "contributor": "Noah Misch"
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "In Snowball dictionaries, don't try to stem excessively-long words (Olly Betts, Tom Lane)\n          If the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "sinceVersion": "12.13",
      "significant": false,
      "contributor": "Olly Betts, Tom Lane"
    },
    {
      "title": "Honor non-default settings of checkpoint_completion_target",
      "description": "Honor non-default settings of checkpoint_completion_target (Bharath Rupireddy)\n          Internal state was not updated after a change in checkpoint_completion_target, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "sinceVersion": "12.14",
      "significant": false,
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range",
      "description": "Limit the amount of cleanup work done by `get_actual_variable_range()` (Simon Riggs)\n          Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "sinceVersion": "12.14",
      "significant": true,
      "contributor": "Simon Riggs"
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary (Simon Riggs, Michail Nikolaev)\n          Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when max_connections is set to a large value on the standby.",
      "sinceVersion": "12.14",
      "significant": false,
      "contributor": "Simon Riggs, Michail Nikolaev"
    },
    {
      "title": "Remove faulty assertion in useless-RESULT-RTE optimization logic",
      "description": "Remove faulty assertion in useless-RESULT-RTE optimization logic (Tom Lane)",
      "sinceVersion": "12.14",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs (David Rowley)\n          This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "sinceVersion": "12.15",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Fix glitches in `SERIALIZABLE READ ONLY` optimization (Thomas Munro)\n          Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "sinceVersion": "12.15",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions (Tom Lane)\n          These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in ALTER TABLE ADD COLUMN.",
      "sinceVersion": "12.18",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame (Vallimaharajan G)\n          When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "sinceVersion": "12.19",
      "significant": false,
      "contributor": "Vallimaharajan G"
    },
    {
      "title": "Improve performance of hash joins with very large inner relations",
      "description": "Improve performance of hash joins with very large inner relations (Thomas Munro)",
      "sinceVersion": "12.2",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow the planner to apply potentially-leaky tests to child-table statistics, if the user can read the corresponding column of the table that's actually named in the query",
      "description": "Allow the planner to apply potentially-leaky tests to child-table statistics, if the user can read the corresponding column of the table that's actually named in the query (Dilip Kumar, Amit Langote)\n          This change fixes a performance problem for partitioned tables that was created by the fix for CVE-2017-7484. That security fix disallowed applying leaky operators to statistics for columns that the current user doesn't have permission to read directly. However, it's somewhat common to grant permissions only on the parent partitioned table and not bother to do so on individual partitions. In such cases, the user can read the column via the parent, so there's no point in this security restriction; it only results in poorer planner estimates than necessary.",
      "sinceVersion": "12.2",
      "significant": false,
      "contributor": "Dilip Kumar, Amit Langote"
    },
    {
      "title": "Repair performance regression in information_schema.triggers view",
      "description": "Repair performance regression in information_schema.triggers view (Tom Lane)\n          This patch redefines that view so that an outer `WHERE` clause constraining the table name can be pushed down into the view, allowing its calculations to be done only for triggers belonging to the table of interest rather than all triggers in the database. In a database with many triggers this would make a significant speed difference for queries of that form. Since things worked that way before v11, this is a potential performance regression. Users who find this to be a problem can fix it by replacing the view definition (or, perhaps, just deleting and reinstalling the whole information_schema schema).",
      "sinceVersion": "12.3",
      "significant": true,
      "contributor": "Tom Lane"
    },
    {
      "title": "Repair performance regression in floating point overflow/underflow detection",
      "description": "Repair performance regression in floating point overflow/underflow detection (Emre Hasegeli)\n          Previous refactoring had resulted in `isinf()()` being called extra times in some hot code paths.",
      "sinceVersion": "12.3",
      "significant": false,
      "contributor": "Emre Hasegeli"
    },
    {
      "title": "In logical replication walsender, fix failure to send feedback messages after sending a keepalive message",
      "description": "In logical replication walsender, fix failure to send feedback messages after sending a keepalive message (Álvaro Herrera)\n          This is a relatively minor problem when using built-in logical replication, because the built-in walreceiver will send a feedback reply (which clears the incorrect state) fairly frequently anyway. But with some other replication systems, such as pglogical, it causes significant performance issues.",
      "sinceVersion": "12.4",
      "significant": true,
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Avoid misoptimization of subquery qualifications that reference apparently-constant grouping columns",
      "description": "Avoid misoptimization of subquery qualifications that reference apparently-constant grouping columns (Tom Lane)\n          A “constant” subquery output column isn't really constant if it is a grouping column that appears in only some of the grouping sets.",
      "sinceVersion": "12.5",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "In libpq for Windows, call `WSAStartup",
      "description": "In libpq for Windows, call `WSAStartup()()` once per process and `WSACleanup()()` not at all (Tom Lane, Alexander Lakhin)\n          Previously, libpq invoked `WSAStartup()()` at connection start and `WSACleanup()()` at connection cleanup. However, it appears that calling `WSACleanup()()` can interfere with other program operations; notably, we have observed rare failures to emit expected output to stdout. There appear to be no ill effects from omitting the call, so do that. (This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections.)",
      "sinceVersion": "12.5",
      "significant": false,
      "contributor": "Tom Lane, Alexander Lakhin"
    },
    {
      "title": "Avoid `memcpy",
      "description": "Avoid `memcpy()()` with a NULL source pointer and zero count during partitioned index creation (Álvaro Herrera)\n          While such a call is not known to cause problems in itself, some compilers assume that the arguments of `memcpy()()` are never NULL, which could result in incorrect optimization of nearby code.",
      "sinceVersion": "12.6",
      "significant": false,
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Make pg_upgrade carry forward the old installation's `oldestXID` value",
      "description": "Make pg_upgrade carry forward the old installation's `oldestXID` value (Bertrand Drouvot)\n          Previously, the new installation's `oldestXID` was set to a value old enough to (usually) force immediate anti-wraparound autovacuuming. That's not desirable from a performance standpoint; what's worse, installations using large values of autovacuum_freeze_max_age could suffer unwanted forced shutdowns soon after an upgrade.",
      "sinceVersion": "12.8",
      "significant": false,
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Prevent data loss during crash recovery of CREATE TABLESPACE, when wal_level = `minimal`",
      "description": "Prevent data loss during crash recovery of CREATE TABLESPACE, when wal_level = `minimal` (Noah Misch)\n          If the server crashed between CREATE TABLESPACE and the next checkpoint, replay would fully remove the contents of the new tablespace's directory, relying on subsequent WAL replay to restore everything within that directory. This interacts badly with optimizations that skip writing WAL (one example is COPY into a just-created table). Such optimizations are applied only when wal_level is `minimal`, which is not the default in v10 and later.",
      "sinceVersion": "12.9",
      "significant": false,
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix regular expression performance bug with back-references inside iteration nodes",
      "description": "Fix regular expression performance bug with back-references inside iteration nodes (Tom Lane)\n          Incorrect back-tracking logic could result in exponential time spent looking for a match. Fortunately the problem is masked in most cases by other optimizations.",
      "sinceVersion": "12.9",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "Prevent wraparound of overflowed-subtransaction tracking on standby servers (Kyotaro Horiguchi, Alexander Korotkov)\n          This oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "sinceVersion": "12.9",
      "significant": true,
      "contributor": "Kyotaro Horiguchi, Alexander Korotkov"
    },
    {
      "title": "Improve pg_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type",
      "description": "Improve pg_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type()()` (Tom Lane)\n          These changes provide only marginal improvement when dumping from a local server, but a dump from a remote server can benefit substantially due to fewer network round-trips.",
      "sinceVersion": "12.9",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Add spinlock support for the RISC-V architecture",
      "description": "Add spinlock support for the RISC-V architecture (Marek Szuba)\n          This is essential for reasonable performance on that platform.",
      "sinceVersion": "12.9",
      "significant": false,
      "contributor": "Marek Szuba"
    },
    {
      "title": "Untitled performance improvement",
      "description": "Space savings and performance gains from de-duplication of B-tree index entries",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Untitled performance improvement",
      "description": "Improved performance for queries that use aggregates or partitioned tables",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve the performance of sorting inet values",
      "description": "Improve the performance of sorting inet values (Brandur Leach)",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Brandur Leach"
    },
    {
      "title": "Improve performance when replaying DROP DATABASE commands when many tablespaces are in use",
      "description": "Improve performance when replaying DROP DATABASE commands when many tablespaces are in use (Fujii Masao)",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Fujii Masao"
    },
    {
      "title": "Improve performance for truncation of very large relations",
      "description": "Improve performance for truncation of very large relations (Kirk Jamison)",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Kirk Jamison"
    },
    {
      "title": "Improve performance of LISTEN/NOTIFY",
      "description": "Improve performance of LISTEN/NOTIFY (Martijn van Oosterhout, Tom Lane)",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Martijn van Oosterhout, Tom Lane"
    },
    {
      "title": "Speed up conversions of integers to text",
      "description": "Speed up conversions of integers to text (David Fetter)",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "David Fetter"
    },
    {
      "title": "Improve performance of wait events on BSD-based systems",
      "description": "Improve performance of wait events on BSD-based systems (Thomas Munro)",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Improve the performance and accuracy of the numeric type's square root",
      "description": "Improve the performance and accuracy of the numeric type's square root (`sqrt()`) and natural log (`ln()`) functions (Dean Rasheed)",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Dean Rasheed"
    },
    {
      "title": "Improve performance of simple PL/pgSQL expressions",
      "description": "Improve performance of simple PL/pgSQL expressions (Tom Lane, Amit Langote)",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Tom Lane, Amit Langote"
    },
    {
      "title": "Improve performance of PL/pgSQL functions that use immutable expressions",
      "description": "Improve performance of PL/pgSQL functions that use immutable expressions (Konstantin Knizhnik)",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Konstantin Knizhnik"
    },
    {
      "title": "Allow pgbench to partition its “accounts” table",
      "description": "Allow pgbench to partition its “accounts” table (Fabien Coelho)\n              This allows performance testing of partitioning.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Fabien Coelho"
    },
    {
      "title": "Implement internal lists as arrays, rather than a chain of cells",
      "description": "Implement internal lists as arrays, rather than a chain of cells (Tom Lane)\n            This improves performance for queries that access many objects.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "In libpq for Windows, call `WSAStartup",
      "description": "In libpq for Windows, call `WSAStartup()()` once per process and `WSACleanup()()` not at all (Tom Lane, Alexander Lakhin)\n          Previously, libpq invoked `WSAStartup()()` at connection start and `WSACleanup()()` at connection cleanup. However, it appears that calling `WSACleanup()()` can interfere with other program operations; notably, we have observed rare failures to emit expected output to stdout. There appear to be no ill effects from omitting the call, so do that. (This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections.)",
      "sinceVersion": "13.1",
      "significant": false,
      "contributor": "Tom Lane, Alexander Lakhin"
    },
    {
      "title": "Honor non-default settings of checkpoint_completion_target",
      "description": "Honor non-default settings of checkpoint_completion_target (Bharath Rupireddy)\n          Internal state was not updated after a change in checkpoint_completion_target, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "sinceVersion": "13.10",
      "significant": false,
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range",
      "description": "Limit the amount of cleanup work done by `get_actual_variable_range()` (Simon Riggs)\n          Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "sinceVersion": "13.10",
      "significant": true,
      "contributor": "Simon Riggs"
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary (Simon Riggs, Michail Nikolaev)\n          Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when max_connections is set to a large value on the standby.",
      "sinceVersion": "13.10",
      "significant": false,
      "contributor": "Simon Riggs, Michail Nikolaev"
    },
    {
      "title": "Remove faulty assertion in useless-RESULT-RTE optimization logic",
      "description": "Remove faulty assertion in useless-RESULT-RTE optimization logic (Tom Lane)",
      "sinceVersion": "13.10",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs (David Rowley)\n          This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "sinceVersion": "13.11",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Fix glitches in `SERIALIZABLE READ ONLY` optimization (Thomas Munro)\n          Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "sinceVersion": "13.11",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions (Tom Lane)\n          These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in ALTER TABLE ADD COLUMN.",
      "sinceVersion": "13.14",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame (Vallimaharajan G)\n          When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "sinceVersion": "13.15",
      "significant": false,
      "contributor": "Vallimaharajan G"
    },
    {
      "title": "Avoid `memcpy",
      "description": "Avoid `memcpy()()` with a NULL source pointer and zero count during partitioned index creation (Álvaro Herrera)\n          While such a call is not known to cause problems in itself, some compilers assume that the arguments of `memcpy()()` are never NULL, which could result in incorrect optimization of nearby code.",
      "sinceVersion": "13.2",
      "significant": false,
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "Disable the vacuum_cleanup_index_scale_factor parameter and storage option",
      "description": "Disable the vacuum_cleanup_index_scale_factor parameter and storage option (Peter Geoghegan)\n          The notion of tracking “stale” index statistics proved to interact badly with the autovacuum_vacuum_insert_threshold parameter, resulting in unnecessary full-index scans and consequent degradation of autovacuum performance. The latter mechanism seems superior, so remove the stale-statistics logic. The control parameter for that, vacuum_cleanup_index_scale_factor, will be removed entirely in v14. In v13, it remains present to avoid breaking existing configuration files, but it no longer does anything.",
      "sinceVersion": "13.3",
      "significant": false,
      "contributor": "Peter Geoghegan"
    },
    {
      "title": "Make pg_upgrade carry forward the old installation's `oldestXID` value",
      "description": "Make pg_upgrade carry forward the old installation's `oldestXID` value (Bertrand Drouvot)\n          Previously, the new installation's `oldestXID` was set to a value old enough to (usually) force immediate anti-wraparound autovacuuming. That's not desirable from a performance standpoint; what's worse, installations using large values of autovacuum_freeze_max_age could suffer unwanted forced shutdowns soon after an upgrade.",
      "sinceVersion": "13.4",
      "significant": false,
      "contributor": "Bertrand Drouvot"
    },
    {
      "title": "Prevent data loss during crash recovery of CREATE TABLESPACE, when wal_level = `minimal`",
      "description": "Prevent data loss during crash recovery of CREATE TABLESPACE, when wal_level = `minimal` (Noah Misch)\n          If the server crashed between CREATE TABLESPACE and the next checkpoint, replay would fully remove the contents of the new tablespace's directory, relying on subsequent WAL replay to restore everything within that directory. This interacts badly with optimizations that skip writing WAL (one example is COPY into a just-created table). Such optimizations are applied only when wal_level is `minimal`, which is not the default in v10 and later.",
      "sinceVersion": "13.5",
      "significant": false,
      "contributor": "Noah Misch"
    },
    {
      "title": "Fix regular expression performance bug with back-references inside iteration nodes",
      "description": "Fix regular expression performance bug with back-references inside iteration nodes (Tom Lane)\n          Incorrect back-tracking logic could result in exponential time spent looking for a match. Fortunately the problem is masked in most cases by other optimizations.",
      "sinceVersion": "13.5",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "Prevent wraparound of overflowed-subtransaction tracking on standby servers (Kyotaro Horiguchi, Alexander Korotkov)\n          This oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "sinceVersion": "13.5",
      "significant": true,
      "contributor": "Kyotaro Horiguchi, Alexander Korotkov"
    },
    {
      "title": "Improve pg_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type",
      "description": "Improve pg_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type()()` (Tom Lane)\n          These changes provide only marginal improvement when dumping from a local server, but a dump from a remote server can benefit substantially due to fewer network round-trips.",
      "sinceVersion": "13.5",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Add spinlock support for the RISC-V architecture",
      "description": "Add spinlock support for the RISC-V architecture (Marek Szuba)\n          This is essential for reasonable performance on that platform.",
      "sinceVersion": "13.5",
      "significant": false,
      "contributor": "Marek Szuba"
    },
    {
      "title": "Improve performance of walsenders sending logical changes by avoiding unnecessary cache accesses",
      "description": "Improve performance of walsenders sending logical changes by avoiding unnecessary cache accesses (Hou Zhijie)",
      "sinceVersion": "13.6",
      "significant": false,
      "contributor": "Hou Zhijie"
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale",
      "description": "In ecpglib, avoid redundant `newlocale()()` calls (Noah Misch)\n          Allocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "sinceVersion": "13.8",
      "significant": false,
      "contributor": "Noah Misch"
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "In Snowball dictionaries, don't try to stem excessively-long words (Olly Betts, Tom Lane)\n          If the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "sinceVersion": "13.9",
      "significant": false,
      "contributor": "Olly Betts, Tom Lane"
    },
    {
      "title": "Untitled performance improvement",
      "description": "Numerous performance improvements have been made for parallel queries, heavily-concurrent workloads, partitioned tables, logical replication, and vacuuming.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Prevent the containment operators",
      "description": "Prevent the containment operators (`&lt;@` and `@&gt;`) for intarray from using GiST indexes (Tom Lane)\n          Previously a full GiST index scan was required, so just avoid that and scan the heap, which is faster. Indexes created for this purpose should be removed.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Allow vacuum to skip index vacuuming when the number of removable index entries is insignificant",
      "description": "Allow vacuum to skip index vacuuming when the number of removable index entries is insignificant (Masahiko Sawada, Peter Geoghegan)\n              The vacuum parameter `INDEX_CLEANUP` has a new default of `auto` that enables this optimization.",
      "sinceVersion": "14.0",
      "significant": true,
      "contributor": "Masahiko Sawada, Peter Geoghegan"
    },
    {
      "title": "Speed up vacuuming of databases with many relations",
      "description": "Speed up vacuuming of databases with many relations (Tatsuhito Kasahara)",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Tatsuhito Kasahara"
    },
    {
      "title": "Improve the performance of updates and deletes on partitioned tables with many partitions",
      "description": "Improve the performance of updates and deletes on partitioned tables with many partitions (Amit Langote, Tom Lane)\n              This change greatly reduces the planner's overhead for such cases, and also allows updates/deletes on partitioned tables to use execution-time partition pruning.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Amit Langote, Tom Lane"
    },
    {
      "title": "Allow some GiST indexes to be built by presorting the data",
      "description": "Allow some GiST indexes to be built by presorting the data (Andrey Borodin)\n              Presorting happens automatically and allows for faster index creation and smaller indexes.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Andrey Borodin"
    },
    {
      "title": "Improve the speed of computing MVCC visibility snapshots on systems with many CPUs and high session counts",
      "description": "Improve the speed of computing MVCC visibility snapshots on systems with many CPUs and high session counts (Andres Freund)\n              This also improves performance when there are many idle sessions.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Andres Freund"
    },
    {
      "title": "Improve the I/O performance of parallel sequential scans",
      "description": "Improve the I/O performance of parallel sequential scans (Thomas Munro, David Rowley)\n              This was done by allocating blocks in groups to parallel workers.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Thomas Munro, David Rowley"
    },
    {
      "title": "Improve performance of regular expression searches",
      "description": "Improve performance of regular expression searches (Tom Lane)",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Dramatically improve Unicode normalization performance",
      "description": "Dramatically improve Unicode normalization performance (John Naylor)\n              This speeds `normalize()()` and `IS NORMALIZED`.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "John Naylor"
    },
    {
      "title": "Speed truncation of small tables during recovery on clusters with a large number of shared buffers",
      "description": "Speed truncation of small tables during recovery on clusters with a large number of shared buffers (Kirk Jamison)",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Kirk Jamison"
    },
    {
      "title": "Allow file system sync at the start of crash recovery on Linux",
      "description": "Allow file system sync at the start of crash recovery on Linux (Thomas Munro)\n            By default, PostgreSQL opens and fsyncs each data file in the database cluster at the start of crash recovery. A new setting, recovery_init_sync_method`=syncfs`, instead syncs each filesystem used by the cluster. This allows for faster recovery on systems with many database files.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Allow logical replication subscriptions to use binary transfer mode",
      "description": "Allow logical replication subscriptions to use binary transfer mode (Dave Cramer)\n              This is faster than text mode, but slightly less robust.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Dave Cramer"
    },
    {
      "title": "Improve the performance of COPY FROM in binary mode",
      "description": "Improve the performance of COPY FROM in binary mode (Bharath Rupireddy, Amit Langote)",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Bharath Rupireddy, Amit Langote"
    },
    {
      "title": "Improve performance of repeated CALLs within plpgsql procedures",
      "description": "Improve performance of repeated CALLs within plpgsql procedures (Pavel Stehule, Tom Lane)",
      "sinceVersion": "14.0",
      "significant": false,
      "contributor": "Pavel Stehule, Tom Lane"
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "Prevent wraparound of overflowed-subtransaction tracking on standby servers (Kyotaro Horiguchi, Alexander Korotkov)\n          This oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "sinceVersion": "14.1",
      "significant": true,
      "contributor": "Kyotaro Horiguchi, Alexander Korotkov"
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions (Tom Lane)\n          These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in ALTER TABLE ADD COLUMN.",
      "sinceVersion": "14.11",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame (Vallimaharajan G)\n          When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "sinceVersion": "14.12",
      "significant": false,
      "contributor": "Vallimaharajan G"
    },
    {
      "title": "Improve performance of walsenders sending logical changes by avoiding unnecessary cache accesses",
      "description": "Improve performance of walsenders sending logical changes by avoiding unnecessary cache accesses (Hou Zhijie)",
      "sinceVersion": "14.2",
      "significant": false,
      "contributor": "Hou Zhijie"
    },
    {
      "title": "Make the server more robust against missed timer interrupts",
      "description": "Make the server more robust against missed timer interrupts (Michael Harris, Tom Lane)\n          An optimization added in v14 meant that if a server process somehow missed a timer interrupt, it would never again ask the kernel for another one, thus breaking timeout detection for the remainder of the session. This seems unduly fragile, so add a recovery path.",
      "sinceVersion": "14.3",
      "significant": false,
      "contributor": "Michael Harris, Tom Lane"
    },
    {
      "title": "Prevent possible corruption of indexes created or rebuilt with the `CONCURRENTLY` option",
      "description": "Prevent possible corruption of indexes created or rebuilt with the `CONCURRENTLY` option (Álvaro Herrera)\n          An optimization added in v14 caused CREATE INDEX ... CONCURRENTLY and REINDEX ... CONCURRENTLY to sometimes miss indexing rows that were updated during the index build. Revert that optimization. It is recommended that any indexes made with the `CONCURRENTLY` option be rebuilt after installing this update. (Alternatively, rebuild them without `CONCURRENTLY`.)",
      "sinceVersion": "14.4",
      "significant": false,
      "contributor": "Álvaro Herrera"
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale",
      "description": "In ecpglib, avoid redundant `newlocale()()` calls (Noah Misch)\n          Allocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "sinceVersion": "14.5",
      "significant": false,
      "contributor": "Noah Misch"
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "In Snowball dictionaries, don't try to stem excessively-long words (Olly Betts, Tom Lane)\n          If the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "sinceVersion": "14.6",
      "significant": false,
      "contributor": "Olly Betts, Tom Lane"
    },
    {
      "title": "Honor non-default settings of checkpoint_completion_target",
      "description": "Honor non-default settings of checkpoint_completion_target (Bharath Rupireddy)\n          Internal state was not updated after a change in checkpoint_completion_target, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "sinceVersion": "14.7",
      "significant": false,
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range",
      "description": "Limit the amount of cleanup work done by `get_actual_variable_range()` (Simon Riggs)\n          Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "sinceVersion": "14.7",
      "significant": true,
      "contributor": "Simon Riggs"
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary (Simon Riggs, Michail Nikolaev)\n          Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when max_connections is set to a large value on the standby.",
      "sinceVersion": "14.7",
      "significant": false,
      "contributor": "Simon Riggs, Michail Nikolaev"
    },
    {
      "title": "Remove faulty assertion in useless-RESULT-RTE optimization logic",
      "description": "Remove faulty assertion in useless-RESULT-RTE optimization logic (Tom Lane)",
      "sinceVersion": "14.7",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs (David Rowley)\n          This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "sinceVersion": "14.8",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Fix glitches in `SERIALIZABLE READ ONLY` optimization (Thomas Munro)\n          Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "sinceVersion": "14.8",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Untitled performance improvement",
      "description": "Performance improvements, particularly for in-memory and on-disk sorting.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve lookup performance of GiST indexes that were built using sorting",
      "description": "Improve lookup performance of GiST indexes that were built using sorting (Aliaksandr Kalenik, Sergei Shoulbakov, Andrey Borodin)",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "Aliaksandr Kalenik, Sergei Shoulbakov, Andrey Borodin"
    },
    {
      "title": "Speed up encoding validation of UTF-8 text by processing 16 bytes at a time",
      "description": "Speed up encoding validation of UTF-8 text by processing 16 bytes at a time (John Naylor, Heikki Linnakangas)\n              This will improve text-heavy operations like COPY FROM.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "John Naylor, Heikki Linnakangas"
    },
    {
      "title": "Improve performance for sorts that exceed work_mem",
      "description": "Improve performance for sorts that exceed work_mem (Heikki Linnakangas)\n              When the sort data no longer fits in work_mem, switch to a batch sorting algorithm that uses more output streams than before.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Improve performance and reduce memory consumption of in-memory sorts",
      "description": "Improve performance and reduce memory consumption of in-memory sorts (Ronan Dunklau, David Rowley, Thomas Munro, John Naylor)",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "Ronan Dunklau, David Rowley, Thomas Munro, John Naylor"
    },
    {
      "title": "Improve the performance of window functions that use `row_number",
      "description": "Improve the performance of window functions that use `row_number()()`, `rank()()`, `dense_rank()()` and `count()()` (David Rowley)",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Improve the performance of spinlocks on high-core-count ARM64 systems",
      "description": "Improve the performance of spinlocks on high-core-count ARM64 systems (Geoffrey Blake)",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "Geoffrey Blake"
    },
    {
      "title": "Run the checkpointer and bgwriter processes during crash recovery",
      "description": "Run the checkpointer and bgwriter processes during crash recovery (Thomas Munro)\n            This helps to speed up long crash recoveries.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Improve performance of psql's \\copy command, by sending data in larger chunks",
      "description": "Improve performance of psql's \\copy command, by sending data in larger chunks (Heikki Linnakangas)",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "Heikki Linnakangas"
    },
    {
      "title": "Improve performance of dumping databases with many objects",
      "description": "Improve performance of dumping databases with many objects (Tom Lane)\n              This will also improve the performance of pg_upgrade.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve parallel pg_dump's performance for tables with large TOAST tables",
      "description": "Improve parallel pg_dump's performance for tables with large TOAST tables (Tom Lane)",
      "sinceVersion": "15.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Honor non-default settings of checkpoint_completion_target",
      "description": "Honor non-default settings of checkpoint_completion_target (Bharath Rupireddy)\n          Internal state was not updated after a change in checkpoint_completion_target, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "sinceVersion": "15.2",
      "significant": false,
      "contributor": "Bharath Rupireddy"
    },
    {
      "title": "Fix possible dangling-pointer access during execution of window function run-condition expressions",
      "description": "Fix possible dangling-pointer access during execution of window function run-condition expressions (David Rowley)\n          In practice, because the run-condition optimization is only applied to certain window functions that happen to all return int8, this only manifested as a problem on 32-bit builds.",
      "sinceVersion": "15.2",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range",
      "description": "Limit the amount of cleanup work done by `get_actual_variable_range()` (Simon Riggs)\n          Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "sinceVersion": "15.2",
      "significant": true,
      "contributor": "Simon Riggs"
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary (Simon Riggs, Michail Nikolaev)\n          Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when max_connections is set to a large value on the standby.",
      "sinceVersion": "15.2",
      "significant": false,
      "contributor": "Simon Riggs, Michail Nikolaev"
    },
    {
      "title": "Remove faulty assertion in useless-RESULT-RTE optimization logic",
      "description": "Remove faulty assertion in useless-RESULT-RTE optimization logic (Tom Lane)",
      "sinceVersion": "15.2",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs (David Rowley)\n          This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "sinceVersion": "15.3",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Fix glitches in `SERIALIZABLE READ ONLY` optimization (Thomas Munro)\n          Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "sinceVersion": "15.3",
      "significant": false,
      "contributor": "Thomas Munro"
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions (Tom Lane)\n          These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in ALTER TABLE ADD COLUMN.",
      "sinceVersion": "15.6",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent potentially-incorrect optimization of some window functions",
      "description": "Prevent potentially-incorrect optimization of some window functions (David Rowley)\n          Disable “run condition” optimization of `ntile()()` and `count()()` with non-constant arguments. This avoids possible misbehavior with sub-selects, typically leading to errors like “WindowFunc not found in subplan target lists”.",
      "sinceVersion": "15.7",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame (Vallimaharajan G)\n          When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "sinceVersion": "15.7",
      "significant": false,
      "contributor": "Vallimaharajan G"
    },
    {
      "title": "Untitled performance improvement",
      "description": "Improve performance of vacuum freezing",
      "sinceVersion": "16.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Allow window functions to use the faster `ROWS` mode internally when `RANGE` mode is active but unnecessary",
      "description": "Allow window functions to use the faster `ROWS` mode internally when `RANGE` mode is active but unnecessary (David Rowley)",
      "sinceVersion": "16.0",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Allow optimization of always-increasing window functions `ntile",
      "description": "Allow optimization of always-increasing window functions `ntile()()`, `cume_dist()()` and `percent_rank()()` (David Rowley)",
      "sinceVersion": "16.0",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Improve performance by caching `RANGE` and `LIST` partition lookups",
      "description": "Improve performance by caching `RANGE` and `LIST` partition lookups (Amit Langote, Hou Zhijie, David Rowley)",
      "sinceVersion": "16.0",
      "significant": false,
      "contributor": "Amit Langote, Hou Zhijie, David Rowley"
    },
    {
      "title": "Improve the speed of updating the process title",
      "description": "Improve the speed of updating the process title (David Rowley)",
      "sinceVersion": "16.0",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Improve performance of server variable management",
      "description": "Improve performance of server variable management (Tom Lane)",
      "sinceVersion": "16.0",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Improve performance for logical replication apply without a primary key",
      "description": "Improve performance for logical replication apply without a primary key (Onder Kalaci, Amit Kapila)\n            Specifically, `REPLICA IDENTITY FULL` can now use btree indexes rather than sequentially scanning the table to find matches.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributor": "Onder Kalaci, Amit Kapila"
    },
    {
      "title": "Use new VACUUM options to improve the performance of vacuumdb",
      "description": "Use new VACUUM options to improve the performance of vacuumdb (Tom Lane, Nathan Bossart)",
      "sinceVersion": "16.0",
      "significant": false,
      "contributor": "Tom Lane, Nathan Bossart"
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions (Tom Lane)\n          These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in ALTER TABLE ADD COLUMN.",
      "sinceVersion": "16.2",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Prevent potentially-incorrect optimization of some window functions",
      "description": "Prevent potentially-incorrect optimization of some window functions (David Rowley)\n          Disable “run condition” optimization of `ntile()()` and `count()()` with non-constant arguments. This avoids possible misbehavior with sub-selects, typically leading to errors like “WindowFunc not found in subplan target lists”.",
      "sinceVersion": "16.3",
      "significant": false,
      "contributor": "David Rowley"
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame (Vallimaharajan G)\n          When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "sinceVersion": "16.3",
      "significant": false,
      "contributor": "Vallimaharajan G"
    },
    {
      "title": "Use a hash table instead of linear search for “catcache list” objects",
      "description": "Use a hash table instead of linear search for “catcache list” objects (Tom Lane)\n          This change solves performance problems that were reported for certain operations in installations with many thousands of roles.",
      "sinceVersion": "16.3",
      "significant": false,
      "contributor": "Tom Lane"
    },
    {
      "title": "Untitled performance improvement",
      "description": "New memory management system for VACUUM, which reduces memory consumption and can improve overall vacuuming performance.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Untitled performance improvement",
      "description": "Various query performance improvements, including for sequential reads using streaming I/O, write throughput under high concurrency, and searches over multiple values in a btree index.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve optimization of `IS NOT NULL` and `IS NULL` query restrictions",
      "description": "Improve optimization of `IS NOT NULL` and `IS NULL` query restrictions (David Rowley, Richard Guo, Andy Fan) § §\n              Remove `IS NOT NULL` restrictions from queries on `NOT NULL` columns and eliminate scans on `NOT NULL` columns if `IS NULL` is specified.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve optimization of range values when using containment operators &lt;@ and @&gt;",
      "description": "Improve optimization of range values when using containment operators &lt;@ and @&gt; (Kim Johan Andersson, Jian He) §",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve optimization of the `LIMIT` clause on partitioned tables, inheritance parents, and `UNION ALL` queries",
      "description": "Improve optimization of the `LIMIT` clause on partitioned tables, inheritance parents, and `UNION ALL` queries (Andy Fan, David Rowley) §",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve performance when checking roles with many memberships",
      "description": "Improve performance when checking roles with many memberships (Nathan Bossart) §",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve performance of heavily-contended WAL writes",
      "description": "Improve performance of heavily-contended WAL writes (Bharath Rupireddy) §",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve performance when transferring large blocks of data to a client",
      "description": "Improve performance when transferring large blocks of data to a client (Melih Mutlu) §",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Improve logical decoding performance in cases where there are many subtransactions",
      "description": "Improve logical decoding performance in cases where there are many subtransactions (Masahiko Sawada) §",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Add pg_restore option --transaction-size to allow object restores in transaction batches",
      "description": "Add pg_restore option --transaction-size to allow object restores in transaction batches (Tom Lane) §\n            This allows the performance benefits of transaction batches without the problems of excessively large transaction blocks.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    },
    {
      "title": "Allow ALTER OPERATOR to set more optimization attributes",
      "description": "Allow ALTER OPERATOR to set more optimization attributes (Tommy Pavlicek) §\n            This is useful for extensions.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributor": null
    }
  ]
}