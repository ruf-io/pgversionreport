{
  "versionDates": {
    "10.0": "2017-10-05",
    "10.1": "2017-11-09",
    "10.10": "2019-08-08",
    "10.11": "2019-11-14",
    "10.12": "2020-02-13",
    "10.13": "2020-05-14",
    "10.14": "2020-08-13",
    "10.15": "2020-11-12",
    "10.16": "2021-02-11",
    "10.17": "2021-05-13",
    "10.18": "2021-08-12",
    "10.19": "2021-11-11",
    "10.2": "2018-02-08",
    "10.20": "2022-02-10",
    "10.21": "2022-05-12",
    "10.22": "2022-08-11",
    "10.23": "2022-11-10",
    "10.3": "2018-03-01",
    "10.4": "2018-05-10",
    "10.5": "2018-08-09",
    "10.6": "2018-11-08",
    "10.7": "2019-02-14",
    "10.8": "2019-05-09",
    "10.9": "2019-06-20",
    "11.0": "2018-10-18",
    "11.1": "2018-11-08",
    "11.10": "2020-11-12",
    "11.11": "2021-02-11",
    "11.12": "2021-05-13",
    "11.13": "2021-08-12",
    "11.14": "2021-11-11",
    "11.15": "2022-02-10",
    "11.16": "2022-05-12",
    "11.17": "2022-08-11",
    "11.18": "2022-11-10",
    "11.19": "2023-02-09",
    "11.2": "2019-02-14",
    "11.20": "2023-05-11",
    "11.21": "2023-08-10",
    "11.22": "2023-11-09",
    "11.3": "2019-05-09",
    "11.4": "2019-06-20",
    "11.5": "2019-08-08",
    "11.6": "2019-11-14",
    "11.7": "2020-02-13",
    "11.8": "2020-05-14",
    "11.9": "2020-08-13",
    "12.0": "2019-10-03",
    "12.1": "2019-11-14",
    "12.10": "2022-02-10",
    "12.11": "2022-05-12",
    "12.12": "2022-08-11",
    "12.13": "2022-11-10",
    "12.14": "2023-02-09",
    "12.15": "2023-05-11",
    "12.16": "2023-08-10",
    "12.17": "2023-11-09",
    "12.18": "2024-02-08",
    "12.19": "2024-05-09",
    "12.2": "2020-02-13",
    "12.20": "2024-08-08",
    "12.21": "2024-11-14",
    "12.22": "2024-11-21",
    "12.3": "2020-05-14",
    "12.4": "2020-08-13",
    "12.5": "2020-11-12",
    "12.6": "2021-02-11",
    "12.7": "2021-05-13",
    "12.8": "2021-08-12",
    "12.9": "2021-11-11",
    "13.0": "2020-09-24",
    "13.1": "2020-11-12",
    "13.10": "2023-02-09",
    "13.11": "2023-05-11",
    "13.12": "2023-08-10",
    "13.13": "2023-11-09",
    "13.14": "2024-02-08",
    "13.15": "2024-05-09",
    "13.16": "2024-08-08",
    "13.17": "2024-11-14",
    "13.18": "2024-11-21",
    "13.2": "2021-02-11",
    "13.3": "2021-05-13",
    "13.4": "2021-08-12",
    "13.5": "2021-11-11",
    "13.6": "2022-02-10",
    "13.7": "2022-05-12",
    "13.8": "2022-08-11",
    "13.9": "2022-11-10",
    "14.0": "2021-09-30",
    "14.1": "2021-11-11",
    "14.10": "2023-11-09",
    "14.11": "2024-02-08",
    "14.12": "2024-05-09",
    "14.13": "2024-08-08",
    "14.14": "2024-11-14",
    "14.15": "2024-11-21",
    "14.2": "2022-02-10",
    "14.3": "2022-05-12",
    "14.4": "2022-06-16",
    "14.5": "2022-08-11",
    "14.6": "2022-11-10",
    "14.7": "2023-02-09",
    "14.8": "2023-05-11",
    "14.9": "2023-08-10",
    "15.0": "2022-10-13",
    "15.1": "2022-11-10",
    "15.10": "2024-11-21",
    "15.2": "2023-02-09",
    "15.3": "2023-05-11",
    "15.4": "2023-08-10",
    "15.5": "2023-11-09",
    "15.6": "2024-02-08",
    "15.7": "2024-05-09",
    "15.8": "2024-08-08",
    "15.9": "2024-11-14",
    "16.0": "2023-09-14",
    "16.1": "2023-11-09",
    "16.2": "2024-02-08",
    "16.3": "2024-05-09",
    "16.4": "2024-08-08",
    "16.5": "2024-11-14",
    "16.6": "2024-11-21",
    "17.0": "2024-09-26",
    "17.1": "2024-11-14",
    "17.2": "2024-11-21"
  },
  "bugs": [
    {
      "title": "Logical replication using publish/subscribe",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Declarative table partitioning",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Stronger password authentication based on SCRAM-SHA-256",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename write-ahead log directory `pg_xlog` to [pg\\_wal](https://www.postgresql.org/docs/10/wal.html \"Chapter 30. Reliability and the Write-Ahead Log\"), and rename transaction status directory `pg_clog` to `pg_xact`",
      "description": "Users have occasionally thought that these directories contained only inessential log files, and proceeded to remove write-ahead log files or transaction status files manually, causing irrecoverable data loss. These name changes are intended to discourage such errors in future.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Rename SQL functions, tools, and options that reference “xlog” to “wal”",
      "description": "For example, `pg_switch_xlog()` becomes `pg_switch_wal()`, pg\\_receivexlog becomes pg\\_receivewal, and `--xlogdir` becomes `--waldir`. This is for consistency with the change of the `pg_xlog` directory name; in general, the “xlog” terminology is no longer used in any user-facing places.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Rename WAL\\-related functions and views to use `lsn` instead of `location`",
      "description": "There was previously an inconsistent mixture of the two terminologies.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Change the implementation of set-returning functions appearing in a query's `SELECT` list",
      "description": "Set-returning functions are now evaluated before evaluation of scalar expressions in the `SELECT` list, much as though they had been placed in a `LATERAL FROM`\\-clause item. This allows saner semantics for cases where multiple set-returning functions are present. If they return different numbers of rows, the shorter results are extended to match the longest result by adding nulls. Previously the results were cycled until they all terminated at the same time, producing a number of rows equal to the least common multiple of the functions' periods. In addition, set-returning functions are now disallowed within `CASE` and `COALESCE` constructs. For more information see [Section 37.4.8](https://www.postgresql.org/docs/10/xfunc-sql.html#XFUNC-SQL-FUNCTIONS-RETURNING-SET \"37.4.8. SQL Functions Returning Sets\").",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Use standard row constructor syntax in `` UPDATE ... SET (_`columnlist`_) = _`rowconstructor`_ ``",
      "description": "The _`rowconstructor`_ can now begin with the keyword `ROW`; previously that had to be omitted. If just one column name appears in the _`columnlist`_, then the _`rowconstructor`_ now must use the `ROW` keyword, since otherwise it is not a valid row constructor but just a parenthesized expression. Also, an occurrence of `` _`tablename`_.* `` within the _`rowconstructor`_ is now expanded into multiple columns, as occurs in other uses of _`rowconstructor`_s.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "When `ALTER TABLE ... ADD PRIMARY KEY` marks columns `NOT NULL`, that change now propagates to inheritance child tables as well",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Prevent statement-level triggers from firing more than once per statement",
      "description": "Cases involving writable CTEs updating the same table updated by the containing statement, or by another writable CTE, fired `BEFORE STATEMENT` or `AFTER STATEMENT` triggers more than once. Also, if there were statement-level triggers on a table affected by a foreign key enforcement action (such as `ON DELETE CASCADE`), they could fire more than once per outer SQL statement. This is contrary to the SQL standard, so change it.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Change how logical replication uses [pg\\_hba.conf](https://www.postgresql.org/docs/10/auth-pg-hba-conf.html \"20.1. The pg_hba.conf File\")",
      "description": "In previous releases, a logical replication connection required the `replication` keyword in the database column. As of this release, logical replication matches a normal entry with a database name or keywords such as `all`. Physical replication continues to use the `replication` keyword. Since built-in logical replication is new in this release, this change only affects users of third-party logical replication plugins.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Make all [pg\\_ctl](https://www.postgresql.org/docs/10/app-pg-ctl.html \"pg_ctl\") actions wait for completion by default",
      "description": "Previously some pg\\_ctl actions didn't wait for completion, and required the use of `-w` to do so.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Change the default value of the [log\\_directory](https://www.postgresql.org/docs/10/runtime-config-logging.html#GUC-LOG-DIRECTORY) server parameter from `pg_log` to `log`",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Andreas Karlsson"
      ]
    },
    {
      "title": "Add configuration option [ssl\\_dh\\_params\\_file](https://www.postgresql.org/docs/10/runtime-config-connection.html#GUC-SSL-DH-PARAMS-FILE) to specify file name for custom OpenSSL DH parameters",
      "description": "This replaces the hardcoded, undocumented file name `dh1024.pem`. Note that `dh1024.pem` is no longer examined by default; you must set this option if you want to use custom DH parameters.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Increase the size of the default DH parameters used for OpenSSL ephemeral DH ciphers to 2048 bits",
      "description": "The size of the compiled-in DH parameters has been increased from 1024 to 2048 bits, making DH key exchange more resistant to brute-force attacks. However, some old SSL implementations, notably some revisions of Java Runtime Environment version 6, will not accept DH parameters longer than 1024 bits, and hence will not be able to connect over SSL. If it's necessary to support such old clients, you can use custom 1024-bit DH parameters instead of the compiled-in defaults. See [ssl\\_dh\\_params\\_file](https://www.postgresql.org/docs/10/runtime-config-connection.html#GUC-SSL-DH-PARAMS-FILE).",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Remove the ability to store unencrypted passwords on the server",
      "description": "The [password\\_encryption](https://www.postgresql.org/docs/10/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION) server parameter no longer supports `off` or `plain`. The `UNENCRYPTED` option is no longer supported in `CREATE/ALTER USER ... PASSWORD`. Similarly, the `--unencrypted` option has been removed from createuser. Unencrypted passwords migrated from older versions will be stored encrypted in this release. The default setting for `password_encryption` is still `md5`.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Add [min\\_parallel\\_table\\_scan\\_size](https://www.postgresql.org/docs/10/runtime-config-query.html#GUC-MIN-PARALLEL-TABLE-SCAN-SIZE) and [min\\_parallel\\_index\\_scan\\_size](https://www.postgresql.org/docs/10/runtime-config-query.html#GUC-MIN-PARALLEL-INDEX-SCAN-SIZE) server parameters to control parallel queries",
      "description": "These replace `min_parallel_relation_size`, which was found to be too generic.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Robert Haas"
      ]
    },
    {
      "title": "Don't downcase unquoted text within [shared\\_preload\\_libraries](https://www.postgresql.org/docs/10/runtime-config-client.html#GUC-SHARED-PRELOAD-LIBRARIES) and related server parameters",
      "description": "These settings are really lists of file names, but they were previously treated as lists of SQL identifiers, which have different parsing rules.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "QL Zhuo"
      ]
    },
    {
      "title": "Remove `sql_inheritance` server parameter",
      "description": "Changing this setting from the default value caused queries referencing parent tables to not include child tables. The SQL standard requires them to be included, however, and this has been the default since PostgreSQL 7.1.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Allow multi-dimensional arrays to be passed into PL/Python functions, and returned as nested Python lists",
      "description": "This feature requires a backwards-incompatible change to the handling of arrays of composite types in PL/Python. Previously, you could return an array of composite values by writing, e.g., `[[col1, col2], [col1, col2]]`; but now that is interpreted as a two-dimensional array. Composite types in arrays must now be written as Python tuples, not lists, to resolve the ambiguity; that is, write `[(col1, col2), (col1, col2)]` instead.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Alexey Grishchenko",
        "Dave Cramer",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Remove PL/Tcl's “module” auto-loading facility",
      "description": "This functionality has been replaced by new server parameters [pltcl.start\\_proc](https://www.postgresql.org/docs/10/pltcl-config.html#GUC-PLTCL-START-PROC) and [pltclu.start\\_proc](https://www.postgresql.org/docs/10/pltcl-config.html#GUC-PLTCLU-START-PROC), which are easier to use and more similar to features available in other PLs.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove pg\\_dump/pg\\_dumpall support for dumping from pre-8.0 servers",
      "description": "Users needing to dump from pre-8.0 servers will need to use dump programs from PostgreSQL 9.6 or earlier. The resulting output should still load successfully into newer servers.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove support for floating-point timestamps and intervals",
      "description": "This removes configure's `--disable-integer-datetimes` option. Floating-point timestamps have few advantages and have not been the default since PostgreSQL 8.3.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove server support for client/server protocol version 1.0",
      "description": "This protocol hasn't had client support since PostgreSQL 6.3.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove `contrib/tsearch2` module",
      "description": "This module provided compatibility with the version of full text search that shipped in pre-8.3 PostgreSQL releases.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Remove createlang and droplang command-line applications",
      "description": "These had been deprecated since PostgreSQL 9.1\\. Instead, use `CREATE EXTENSION` and `DROP EXTENSION` directly.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Remove support for version-0 function calling conventions",
      "description": "Extensions providing C-coded functions must now conform to version 1 calling conventions. Version 0 has been deprecated since 2001.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Support parallel B-tree index scans",
      "description": "This change allows B-tree index pages to be searched by separate parallel workers.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Rahila Syed",
        "Amit Kapila",
        "Robert Haas",
        "Rafia Sabih"
      ]
    },
    {
      "title": "Support parallel bitmap heap scans",
      "description": "This allows a single index scan to dispatch parallel workers to process different areas of the heap.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Dilip Kumar"
      ]
    },
    {
      "title": "Allow merge joins to be performed in parallel",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Dilip Kumar"
      ]
    },
    {
      "title": "Allow non-correlated subqueries to be run in parallel",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Increase parallel query usage in procedural language functions",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Robert Haas",
        "Rafia Sabih"
      ]
    },
    {
      "title": "Add [max\\_parallel\\_workers](https://www.postgresql.org/docs/10/runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS) server parameter to limit the number of worker processes that can be used for query parallelism",
      "description": "This parameter can be set lower than [max\\_worker\\_processes](https://www.postgresql.org/docs/10/runtime-config-resource.html#GUC-MAX-WORKER-PROCESSES) to reserve worker processes for purposes other than parallel queries.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Enable parallelism by default by changing the default setting of [max\\_parallel\\_workers\\_per\\_gather](https://www.postgresql.org/docs/10/runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS-PER-GATHER) to `2`.",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add write-ahead logging support to hash indexes",
      "description": "This makes hash indexes crash-safe and replicatable. The former warning message about their use is removed.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Add SP-GiST index support for `INET` and `CIDR` data types",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Emre Hasegeli"
      ]
    },
    {
      "title": "Add option to allow BRIN index summarization to happen more aggressively",
      "description": "A new [CREATE INDEX](https://www.postgresql.org/docs/10/sql-createindex.html \"CREATE INDEX\") option enables auto-summarization of the previous BRIN page range when a new page range is created.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Add functions to remove and re-add BRIN summarization for BRIN index ranges",
      "description": "The new SQL function [brin\\_summarize\\_range()](https://www.postgresql.org/docs/10/functions-admin.html#FUNCTIONS-ADMIN-INDEX-TABLE \"Table 9.87. Index Maintenance Functions\") updates BRIN index summarization for a specified range and `brin_desummarize_range()` removes it. This is helpful to update summarization of a range that is now smaller due to `UPDATE`s and `DELETE`s.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Allow tuning of predicate lock promotion thresholds",
      "description": "Lock promotion can now be controlled through two new server parameters, [max\\_pred\\_locks\\_per\\_relation](https://www.postgresql.org/docs/10/runtime-config-locks.html#GUC-MAX-PRED-LOCKS-PER-RELATION) and [max\\_pred\\_locks\\_per\\_page](https://www.postgresql.org/docs/10/runtime-config-locks.html#GUC-MAX-PRED-LOCKS-PER-PAGE).",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Dagfinn Ilmari Mannsåker"
      ]
    },
    {
      "title": "Allow hashed aggregation to be used with grouping sets",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Use uniqueness guarantees to optimize certain join types",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Allow explicit control over [EXPLAIN](https://www.postgresql.org/docs/10/sql-explain.html \"EXPLAIN\")'s display of planning and execution time",
      "description": "By default planning and execution time are displayed by `EXPLAIN ANALYZE` and are not displayed in other cases. The new `EXPLAIN` option `SUMMARY` allows explicit control of this.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Ashutosh Bapat"
      ]
    },
    {
      "title": "Add default monitoring roles",
      "description": "New roles `pg_monitor`, `pg_read_all_settings`, `pg_read_all_stats`, and `pg_stat_scan_tables` allow simplified permission configuration.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Dave Page"
      ]
    },
    {
      "title": "Properly update the statistics collector during [REFRESH MATERIALIZED VIEW](https://www.postgresql.org/docs/10/sql-refreshmaterializedview.html \"REFRESH MATERIALIZED VIEW\")",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Jim Mlodgenski"
      ]
    },
    {
      "title": "Change the default value of [log\\_line\\_prefix](https://www.postgresql.org/docs/10/runtime-config-logging.html#GUC-LOG-LINE-PREFIX) to include current timestamp (with milliseconds) and the process ID in each line of postmaster log output",
      "description": "The previous default was an empty prefix.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Christoph Berg"
      ]
    },
    {
      "title": "Add function [pg\\_current\\_logfile()](https://www.postgresql.org/docs/10/functions-info.html#FUNCTIONS-INFO-SESSION-TABLE \"Table 9.60. Session Information Functions\") to read logging collector's current stderr and csvlog output file names",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Gilles Darold"
      ]
    },
    {
      "title": "Report the address and port number of each listening socket in the server log during postmaster startup",
      "description": "Also, when logging failure to bind a listening socket, include the specific address we attempted to bind to.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add `pg_stat_activity` reporting of low-level wait states",
      "description": "This change enables reporting of numerous low-level wait conditions, including latch waits, file reads/writes/fsyncs, client reads/writes, and synchronous replication.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Robert Haas",
        "Rushabh Lathia"
      ]
    },
    {
      "title": "Show auxiliary processes, background workers, and walsender processes in `pg_stat_activity`",
      "description": "This simplifies monitoring. A new column `backend_type` identifies the process type.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Kuntal Ghosh",
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow `pg_stat_activity` to show the SQL query being executed by parallel workers",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Rafia Sabih"
      ]
    },
    {
      "title": "Rename `pg_stat_activity`.`wait_event_type` values `LWLockTranche` and `LWLockNamed` to `LWLock`",
      "description": "This makes the output more consistent.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Change the [password\\_encryption](https://www.postgresql.org/docs/10/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION) server parameter from `boolean` to `enum`",
      "description": "This was necessary to support additional password hashing options.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add view [pg\\_hba\\_file\\_rules](https://www.postgresql.org/docs/10/view-pg-hba-file-rules.html \"51.71. pg_hba_file_rules\") to display the contents of `pg_hba.conf`",
      "description": "This shows the file contents, not the currently active settings.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Support multiple RADIUS servers",
      "description": "All the RADIUS related parameters are now plural and support a comma-separated list of servers.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Allow SSL configuration to be updated during configuration reload",
      "description": "This allows SSL to be reconfigured without a server restart, by using `pg_ctl reload`, `SELECT pg_reload_conf()`, or sending a `SIGHUP` signal. However, reloading the SSL configuration does not work if the server's SSL key requires a passphrase, as there is no way to re-prompt for the passphrase. The original configuration will apply for the life of the postmaster in that case.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Andreas Karlsson",
        "Tom Lane"
      ]
    },
    {
      "title": "Make the maximum value of [bgwriter\\_lru\\_maxpages](https://www.postgresql.org/docs/10/runtime-config-resource.html#GUC-BGWRITER-LRU-MAXPAGES) effectively unlimited",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Jim Nasby"
      ]
    },
    {
      "title": "Prevent unnecessary checkpoints and WAL archiving on otherwise-idle systems",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add [wal\\_consistency\\_checking](https://www.postgresql.org/docs/10/runtime-config-developer.html#GUC-WAL-CONSISTENCY-CHECKING) server parameter to add details to WAL that can be sanity-checked on the standby",
      "description": "Any sanity-check failure generates a fatal error on the standby.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Kuntal Ghosh",
        "Robert Haas"
      ]
    },
    {
      "title": "Increase the maximum configurable WAL segment size to one gigabyte",
      "description": "A larger WAL segment size allows for fewer [archive\\_command](https://www.postgresql.org/docs/10/runtime-config-wal.html#GUC-ARCHIVE-COMMAND) invocations and fewer WAL files to manage.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Beena Emerson"
      ]
    },
    {
      "title": "Add the ability to [logically replicate](https://www.postgresql.org/docs/10/logical-replication.html \"Chapter 31. Logical Replication\") tables to standby servers",
      "description": "Logical replication allows more flexibility than physical replication does, including replication between different major versions of PostgreSQL and selective replication.",
      "fixedIn": "10.0",
      "significant": true,
      "contributors": [
        "Petr Jelinek"
      ]
    },
    {
      "title": "Allow waiting for commit acknowledgment from standby servers irrespective of the order they appear in [synchronous\\_standby\\_names](https://www.postgresql.org/docs/10/runtime-config-replication.html#GUC-SYNCHRONOUS-STANDBY-NAMES)",
      "description": "Previously the server always waited for the active standbys that appeared first in `synchronous_standby_names`. The new `synchronous_standby_names` keyword `ANY` allows waiting for any number of standbys irrespective of their ordering. This is known as quorum commit.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Enable replication from localhost connections by default in [pg\\_hba.conf](https://www.postgresql.org/docs/10/auth-pg-hba-conf.html \"20.1. The pg_hba.conf File\")",
      "description": "Previously `pg_hba.conf`'s replication connection lines were commented out by default. This is particularly useful for [pg\\_basebackup](https://www.postgresql.org/docs/10/app-pgbasebackup.html \"pg_basebackup\").",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add columns to [pg\\_stat\\_replication](https://www.postgresql.org/docs/10/monitoring-stats.html#PG-STAT-REPLICATION-VIEW \"Table 28.5. pg_stat_replication View\") to report replication delay times",
      "description": "The new columns are `write_lag`, `flush_lag`, and `replay_lag`.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Allow specification of the recovery stopping point by Log Sequence Number (LSN) in [recovery.conf](https://www.postgresql.org/docs/10/recovery-config.html \"Chapter 27. Recovery Configuration\")",
      "description": "Previously the stopping point could only be selected by timestamp or XID.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow users to disable [pg\\_stop\\_backup()](https://www.postgresql.org/docs/10/functions-admin.html \"9.26. System Administration Functions\")'s waiting for all WAL to be archived",
      "description": "An optional second argument to `pg_stop_backup()` controls that behavior.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "David Steele"
      ]
    },
    {
      "title": "Allow creation of [temporary replication slots](https://www.postgresql.org/docs/10/functions-admin.html#FUNCTIONS-REPLICATION-TABLE \"Table 9.83. Replication SQL Functions\")",
      "description": "Temporary slots are automatically removed on session exit or error.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Petr Jelinek"
      ]
    },
    {
      "title": "Add [XMLTABLE](https://www.postgresql.org/docs/10/functions-xml.html#FUNCTIONS-XML-PROCESSING-XMLTABLE \"9.14.3.3. xmltable\") function that converts `XML`\\-formatted data into a row set",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Pavel Stehule",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix regular expressions' character class handling for large character codes, particularly Unicode characters above `U+7FF`",
      "description": "Previously, such characters were never recognized as belonging to locale-dependent character classes such as `[[:alpha:]]`.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add table [partitioning syntax](https://www.postgresql.org/docs/10/sql-createtable.html#SQL-CREATETABLE-PARTITION) that automatically creates partition constraints and handles routing of tuple insertions and updates",
      "description": "The syntax supports range and list partitioning.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Add [AFTER trigger](https://www.postgresql.org/docs/10/sql-createtrigger.html \"CREATE TRIGGER\") transition tables to record changed rows",
      "description": "Transition tables are accessible from triggers written in server-side languages.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Kevin Grittner",
        "Thomas Munro"
      ]
    },
    {
      "title": "Allow [restrictive row-level security policies](https://www.postgresql.org/docs/10/sql-createpolicy.html \"CREATE POLICY\")",
      "description": "Previously all security policies were permissive, meaning that any matching policy allowed access. A restrictive policy must match for access to be granted. These policy types can be combined.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Stephen Frost"
      ]
    },
    {
      "title": "When creating a foreign-key constraint, check for `REFERENCES` permission on only the referenced table",
      "description": "Previously `REFERENCES` permission on the referencing table was also required. This appears to have stemmed from a misreading of the SQL standard. Since creating a foreign key (or any other type of) constraint requires ownership privilege on the constrained table, additionally requiring `REFERENCES` permission seems rather pointless.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow [default permissions](https://www.postgresql.org/docs/10/sql-alterdefaultprivileges.html \"ALTER DEFAULT PRIVILEGES\") on schemas",
      "description": "This is done using the `ALTER DEFAULT PRIVILEGES` command.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Matheus Oliveira"
      ]
    },
    {
      "title": "Add [CREATE SEQUENCE AS](https://www.postgresql.org/docs/10/sql-createsequence.html \"CREATE SEQUENCE\") command to create a sequence matching an integer data type",
      "description": "This simplifies the creation of sequences matching the range of base columns.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Allow `` COPY _`view`_ FROM _`source`_ `` on views with `INSTEAD INSERT` triggers",
      "description": "The triggers are fed the data rows read by `COPY`.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Allow the specification of a function name without arguments in DDL commands, if it is unique",
      "description": "For example, allow [DROP FUNCTION](https://www.postgresql.org/docs/10/sql-dropfunction.html \"DROP FUNCTION\") on a function name without arguments if there is only one function with that name. This behavior is required by the SQL standard.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Allow multiple functions, operators, and aggregates to be dropped with a single `DROP` command",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Support `IF NOT EXISTS` in [CREATE SERVER](https://www.postgresql.org/docs/10/sql-createserver.html \"CREATE SERVER\"), [CREATE USER MAPPING](https://www.postgresql.org/docs/10/sql-createusermapping.html \"CREATE USER MAPPING\"), and [CREATE COLLATION](https://www.postgresql.org/docs/10/sql-createcollation.html \"CREATE COLLATION\")",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Anastasia Lubennikova",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Make [VACUUM VERBOSE](https://www.postgresql.org/docs/10/sql-vacuum.html \"VACUUM\") report the number of skipped frozen pages and oldest xmin",
      "description": "This information is also included in [log\\_autovacuum\\_min\\_duration](https://www.postgresql.org/docs/10/runtime-config-autovacuum.html#GUC-LOG-AUTOVACUUM-MIN-DURATION) output.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Masahiko Sawada",
        "Simon Riggs"
      ]
    },
    {
      "title": "Add full text search support for `JSON` and `JSONB`",
      "description": "The functions `ts_headline()` and `to_tsvector()` can now be used on these data types.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Dmitry Dolgov"
      ]
    },
    {
      "title": "Add support for EUI-64 MAC addresses, as a new data type [macaddr8](https://www.postgresql.org/docs/10/datatype-net-types.html#DATATYPE-MACADDR8 \"8.9.5. macaddr8\")",
      "description": "This complements the existing support for EUI-48 MAC addresses (type `macaddr`).",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Add [identity columns](https://www.postgresql.org/docs/10/sql-createtable.html \"CREATE TABLE\") for assigning a numeric value to columns on insert",
      "description": "These are similar to `SERIAL` columns, but are SQL standard compliant.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Allow [ENUM](https://www.postgresql.org/docs/10/datatype-enum.html \"8.7. Enumerated Types\") values to be renamed",
      "description": "This uses the syntax [ALTER TYPE ... RENAME VALUE](https://www.postgresql.org/docs/10/sql-altertype.html \"ALTER TYPE\").",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Dagfinn Ilmari Mannsåker"
      ]
    },
    {
      "title": "Properly treat array pseudotypes (`anyarray`) as arrays in [to\\_json()](https://www.postgresql.org/docs/10/functions-json.html#FUNCTIONS-JSON-CREATION-TABLE \"Table 9.45. JSON Creation Functions\") and `to_jsonb()`",
      "description": "Previously columns declared as `anyarray` (particularly those in the `pg_stats` view) were converted to `JSON` strings rather than arrays.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Check for overflow in the `money` type's input function",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add simplified [regexp\\_match()](https://www.postgresql.org/docs/10/functions-matching.html#FUNCTIONS-POSIX-REGEXP \"9.7.3. POSIX Regular Expressions\") function",
      "description": "This is similar to `regexp_matches()`, but it only returns results from the first match so it does not need to return a set, making it easier to use for simple cases.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Emre Hasegeli"
      ]
    },
    {
      "title": "Add a version of `jsonb`'s [delete operator](https://www.postgresql.org/docs/10/functions-json.html#FUNCTIONS-JSONB-OP-TABLE \"Table 9.44. Additional jsonb Operators\") that takes an array of keys to delete",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Make [json\\_populate\\_record()](https://www.postgresql.org/docs/10/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE \"Table 9.46. JSON Processing Functions\") and related functions process JSON arrays and objects recursively",
      "description": "With this change, array-type fields in the destination SQL type are properly converted from JSON arrays, and composite-type fields are properly converted from JSON objects. Previously, such cases would fail because the text representation of the JSON value would be fed to `array_in()` or `record_in()`, and its syntax would not match what those input functions expect.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Nikita Glukhov"
      ]
    },
    {
      "title": "Add function [txid\\_current\\_if\\_assigned()](https://www.postgresql.org/docs/10/functions-info.html#FUNCTIONS-TXID-SNAPSHOT \"Table 9.69. Transaction IDs and Snapshots\") to return the current transaction ID or `NULL` if no transaction ID has been assigned",
      "description": "This is different from [txid\\_current()](https://www.postgresql.org/docs/10/functions-info.html#FUNCTIONS-TXID-SNAPSHOT \"Table 9.69. Transaction IDs and Snapshots\"), which always returns a transaction ID, assigning one if necessary. Unlike that function, this function can be run on standby servers.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Craig Ringer"
      ]
    },
    {
      "title": "Add function [txid\\_status()](https://www.postgresql.org/docs/10/functions-info.html#FUNCTIONS-TXID-SNAPSHOT \"Table 9.69. Transaction IDs and Snapshots\") to check if a transaction was committed",
      "description": "This is useful for checking after an abrupt disconnection whether your previous transaction committed and you just didn't receive the acknowledgment.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Craig Ringer"
      ]
    },
    {
      "title": "Allow [make\\_date()](https://www.postgresql.org/docs/10/functions-datetime.html#FUNCTIONS-DATETIME-TABLE \"Table 9.30. Date/Time Functions\") to interpret negative years as BC years",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Make [to\\_timestamp()](https://www.postgresql.org/docs/10/functions-formatting.html#FUNCTIONS-FORMATTING-TABLE \"Table 9.23. Formatting Functions\") and `to_date()` reject out-of-range input fields",
      "description": "For example, previously `to_date('2009-06-40','YYYY-MM-DD')` was accepted and returned `2009-07-10`. It will now generate an error.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Artur Zakirov"
      ]
    },
    {
      "title": "Allow PL/Python's `cursor()` and `execute()` functions to be called as methods of their plan-object arguments",
      "description": "This allows a more object-oriented programming style.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Allow PL/pgSQL's `GET DIAGNOSTICS` statement to retrieve values into array elements",
      "description": "Previously, a syntactic restriction prevented the target variable from being an array element.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow PL/Tcl functions to return composite types and sets",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Karl Lehenbauer"
      ]
    },
    {
      "title": "Add a subtransaction command to PL/Tcl",
      "description": "This allows PL/Tcl queries to fail without aborting the entire function.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Victor Wagner"
      ]
    },
    {
      "title": "Add server parameters [pltcl.start\\_proc](https://www.postgresql.org/docs/10/pltcl-config.html#GUC-PLTCL-START-PROC) and [pltclu.start\\_proc](https://www.postgresql.org/docs/10/pltcl-config.html#GUC-PLTCLU-START-PROC), to allow initialization functions to be called on PL/Tcl startup",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow specification of [multiple host names or addresses](https://www.postgresql.org/docs/10/libpq-connect.html#LIBPQ-CONNECT-HOST) in libpq connection strings and URIs",
      "description": "libpq will connect to the first responsive server in the list.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Robert Haas",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Allow libpq connection strings and URIs to request a [read/write host](https://www.postgresql.org/docs/10/libpq-connect.html#LIBPQ-CONNECT-TARGET-SESSION-ATTRS), that is a master server rather than a standby server",
      "description": "This is useful when multiple host names are specified. It is controlled by libpq connection parameter `target_session_attrs`.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Victor Wagner",
        "Mithun Cy"
      ]
    },
    {
      "title": "Allow the [password file name](https://www.postgresql.org/docs/10/libpq-connect.html#LIBPQ-CONNECT-PASSFILE) to be specified as a libpq connection parameter",
      "description": "Previously this could only be specified via an environment variable.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Julian Markwort"
      ]
    },
    {
      "title": "Change ecpg preprocessor version from 4.12 to 10",
      "description": "Henceforth the ecpg version will match the PostgreSQL distribution version number.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add conditional branch support to psql",
      "description": "This feature adds psql meta-commands `\\if`, `\\elif`, `\\else`, and `\\endif`. This is primarily helpful for scripting.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Corey Huinker"
      ]
    },
    {
      "title": "Add psql `\\gx` meta-command to execute (`\\g`) a query in expanded mode (`\\x`)",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Christoph Berg"
      ]
    },
    {
      "title": "Expand psql variable references in backtick-executed strings",
      "description": "This is particularly useful in the new psql conditional branch commands.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent psql's special variables from being set to invalid values",
      "description": "Previously, setting one of psql's special variables to an invalid value silently resulted in the default behavior. `\\set` on a special variable now fails if the proposed new value is invalid. As a special exception, `\\set` with an empty or omitted new value, on a boolean-valued special variable, still has the effect of setting the variable to `on`; but now it actually acquires that value rather than an empty string. `\\unset` on a special variable now explicitly sets the variable to its default value, which is also the value it acquires at startup. In sum, a control variable now always has a displayable value that reflects what psql is actually doing.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Daniel Vérité",
        "Tom Lane"
      ]
    },
    {
      "title": "Add variables showing server version and psql version",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Make the various `\\d` commands handle no-matching-object cases more consistently",
      "description": "They now all print the message about that to stderr, not stdout, and the message wording is more consistent.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Daniel Gustafsson"
      ]
    },
    {
      "title": "Add pgbench option `--log-prefix` to control the log file prefix",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Allow pgbench's meta-commands to span multiple lines",
      "description": "A meta-command can now be continued onto the next line by writing backslash-return.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Remove restriction on placement of `-M` option relative to other command line options",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add [pg\\_receivewal](https://www.postgresql.org/docs/10/app-pgreceivewal.html \"pg_receivewal\") option `-Z`/`--compress` to specify compression",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add [pg\\_recvlogical](https://www.postgresql.org/docs/10/app-pgrecvlogical.html \"pg_recvlogical\") option `--endpos` to specify the ending position",
      "description": "This complements the existing `--startpos` option.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Craig Ringer"
      ]
    },
    {
      "title": "Rename [initdb](https://www.postgresql.org/docs/10/app-initdb.html \"initdb\") options `--noclean` and `--nosync` to be spelled `--no-clean` and `--no-sync`",
      "description": "The old spellings are still supported.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Vik Fearing",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Allow pg\\_restore to exclude schemas",
      "description": "This adds a new `-N`/`--exclude-schema` option.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Banck"
      ]
    },
    {
      "title": "Add `--no-blobs` option to pg\\_dump",
      "description": "This suppresses dumping of large objects.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Guillaume Lelarge"
      ]
    },
    {
      "title": "Add pg\\_dumpall option `--no-role-passwords` to omit role passwords",
      "description": "This allows use of pg\\_dumpall by non-superusers; without this option, it fails due to inability to read passwords.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Robins Tharakan",
        "Simon Riggs"
      ]
    },
    {
      "title": "Support using synchronized snapshots when dumping from a standby server",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Petr Jelinek"
      ]
    },
    {
      "title": "Issue `fsync()` on the output files generated by pg\\_dump and pg\\_dumpall",
      "description": "This provides more security that the output is safely stored on disk before the program exits. This can be disabled with the new `--no-sync` option.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow pg\\_basebackup to stream write-ahead log in tar mode",
      "description": "The WAL will be stored in a separate tar file from the base backup.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Make pg\\_basebackup use temporary replication slots",
      "description": "Temporary replication slots will be used by default when pg\\_basebackup uses WAL streaming with default options.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Be more careful about fsync'ing in all required places in pg\\_basebackup and pg\\_receivewal",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add pg\\_basebackup option `--no-sync` to disable fsync",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add wait option for [pg\\_ctl](https://www.postgresql.org/docs/10/app-pg-ctl.html \"pg_ctl\")'s promote operation",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add long options for pg\\_ctl wait (`--wait`) and no-wait (`--no-wait`)",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Vik Fearing"
      ]
    },
    {
      "title": "Add long option for pg\\_ctl server options (`--options`)",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Ensure that pg\\_ctl exits with nonzero status if an operation being waited for does not complete within the timeout",
      "description": "The `start` and `promote` operations now return exit status 1, not 0, in such cases. The `stop` operation has always done that.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Allow the [ICU](https://www.postgresql.org/docs/10/install-procedure.html#CONFIGURE \"Configuration\") library to optionally be used for collation support",
      "description": "The ICU library has versioning that allows detection of collation changes between versions. It is enabled via configure option `--with-icu`. The default still uses the operating system's native collation library.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Automatically mark all [PG\\_FUNCTION\\_INFO\\_V1](https://www.postgresql.org/docs/10/xfunc-c.html \"37.9. C-Language Functions\") functions as `DLLEXPORT`\\-ed on Windows",
      "description": "If third-party code is using `extern` function declarations, they should also add `DLLEXPORT` markers to those declarations.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Laurenz Albe"
      ]
    },
    {
      "title": "Remove SPI functions `SPI_push()`, `SPI_pop()`, `SPI_push_conditional()`, `SPI_pop_conditional()`, and `SPI_restore_connection()` as unnecessary",
      "description": "Their functionality now happens automatically. There are now no-op macros by these names so that external modules don't need to be updated immediately, but eventually such calls should be removed.\n\nA side effect of this change is that `SPI_palloc()` and allied functions now require an active SPI connection; they do not degenerate to simple `palloc()` if there is none. That previous behavior was not very useful and posed risks of unexpected memory leaks.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow shared memory to be dynamically allocated",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Robert Haas"
      ]
    },
    {
      "title": "Use POSIX semaphores rather than SysV semaphores on Linux and FreeBSD",
      "description": "This avoids platform-specific limits on SysV semaphore usage.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Enable 64-bit atomic operations on ARM64",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Roman Shaposhnik"
      ]
    },
    {
      "title": "Switch to using `clock_gettime()`, if available, for duration measurements",
      "description": "`gettimeofday()` is still used if `clock_gettime()` is not available.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add more robust random number generators to be used for cryptographically secure uses",
      "description": "If no strong random number generator can be found, [configure](https://www.postgresql.org/docs/10/install-procedure.html#CONFIGURE \"Configuration\") will fail unless the `--disable-strong-random` option is used. However, with this option, [pgcrypto](https://www.postgresql.org/docs/10/pgcrypto.html \"F.26. pgcrypto\") functions requiring a strong random number generator will be disabled.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Magnus Hagander",
        "Michael Paquier",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Allow `WaitLatchOrSocket()` to wait for socket connection on Windows",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "`tupconvert.c` functions no longer convert tuples just to embed a different composite-type OID in them",
      "description": "The majority of callers don't care about the composite-type OID; but if the result tuple is to be used as a composite Datum, steps should be taken to make sure the correct OID is inserted in it.",
      "fixedIn": "10.0",
      "significant": true,
      "contributors": [
        "Ashutosh Bapat",
        "Tom Lane"
      ]
    },
    {
      "title": "Remove SCO and Unixware ports",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Overhaul documentation [build process](https://www.postgresql.org/docs/10/docguide-toolsets.html \"J.2. Tool Sets\")",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Use XSLT to build the PostgreSQL documentation",
      "description": "Previously Jade, DSSSL, and JadeTex were used.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Build HTML documentation using XSLT stylesheets by default",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Allow [file\\_fdw](https://www.postgresql.org/docs/10/file-fdw.html \"F.15. file_fdw\") to read from program output as well as files",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Corey Huinker",
        "Adam Gomaa"
      ]
    },
    {
      "title": "In postgres\\_fdw, push joins to the remote server in more cases",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "David Rowley",
        "Ashutosh Bapat",
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Properly support `OID` columns in postgres\\_fdw tables",
      "description": "Previously `OID` columns always returned zeros.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Allow [btree\\_gist](https://www.postgresql.org/docs/10/btree-gist.html \"F.7. btree_gist\") and [btree\\_gin](https://www.postgresql.org/docs/10/btree-gin.html \"F.6. btree_gin\") to index enum types",
      "description": "This allows enums to be used in exclusion constraints.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Add indexing support to btree\\_gist for the `UUID` data type",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Paul Jungwirth"
      ]
    },
    {
      "title": "Add [amcheck](https://www.postgresql.org/docs/10/amcheck.html \"F.2. amcheck\") which can check the validity of B-tree indexes",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Show ignored constants as `$N` rather than `?` in [pg\\_stat\\_statements](https://www.postgresql.org/docs/10/pgstatstatements.html \"F.30. pg_stat_statements\")",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Lukas Fittl"
      ]
    },
    {
      "title": "Allow [pg\\_buffercache](https://www.postgresql.org/docs/10/pgbuffercache.html \"F.25. pg_buffercache\") to run with fewer locks",
      "description": "This makes it less disruptive when run on production systems.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Ivan Kartyshov"
      ]
    },
    {
      "title": "Add [pgstattuple](https://www.postgresql.org/docs/10/pgstattuple.html \"F.31. pgstattuple\") function `pgstathashindex()` to view hash index statistics",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Ashutosh Sharma"
      ]
    },
    {
      "title": "Use `GRANT` permissions to control pgstattuple function usage",
      "description": "This allows DBAs to allow non-superusers to run these functions.",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Stephen Frost"
      ]
    },
    {
      "title": "Add [pageinspect](https://www.postgresql.org/docs/10/pageinspect.html \"F.23. pageinspect\") function `page_checksum()` to show a page's checksum",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Add pageinspect function `bt_page_items()` to print page items from a page image",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Add hash index support to pageinspect",
      "description": "",
      "fixedIn": "10.0",
      "significant": false,
      "contributors": [
        "Jesper Pedersen",
        "Ashutosh Sharma"
      ]
    },
    {
      "title": "Fix BRIN index summarization to handle concurrent table extension correctly",
      "description": "Previously, a race condition allowed some table rows to be omitted from the index. It may be necessary to reindex existing BRIN indexes to recover from past occurrences of this problem.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix possible failures during concurrent updates of a BRIN index",
      "description": "These race conditions could result in errors like “invalid index offnum” or “inconsistent range map”.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent logical replication from setting non-replicated columns to nulls when replicating an `UPDATE`",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Petr Jelinek"
      ]
    },
    {
      "title": "Fix logical replication to fire `BEFORE ROW DELETE` triggers when expected",
      "description": "Previously, that failed to happen unless the table also had a `BEFORE ROW UPDATE` trigger.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Fix crash when logical decoding is invoked from a SPI-using function, in particular any function written in a PL language",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ignore CTEs when looking up the target table for `INSERT`/`UPDATE`/`DELETE`, and prevent matching schema-qualified target table names to trigger transition table names",
      "description": "This restores the pre-v10 behavior for CTEs attached to DML commands.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid evaluating an aggregate function's argument expression(s) at rows where its `FILTER` test fails",
      "description": "This restores the pre-v10 (and SQL-standard) behavior.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect query results when multiple `GROUPING SETS` columns contain the same simple variable",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix query-lifespan memory leakage while evaluating a set-returning function in a `SELECT`'s target list",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow parallel execution of prepared statements with generic plans",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Kuntal Ghosh"
      ]
    },
    {
      "title": "Fix incorrect parallelization decisions for nested queries",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Kuntal Ghosh"
      ]
    },
    {
      "title": "Fix parallel query handling to not fail when a recently-used role is dropped",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Fix crash in parallel execution of a bitmap scan having a BitmapAnd plan node below a BitmapOr node",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Dilip Kumar"
      ]
    },
    {
      "title": "Fix `json_build_array()`, `json_build_object()`, and their `jsonb` equivalents to handle explicit `VARIADIC` arguments correctly",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix autovacuum's “work item” logic to prevent possible crashes and silent loss of work items",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Record proper dependencies when a view or rule contains `FieldSelect` or `FieldStore` expression nodes",
      "description": "Lack of these dependencies could allow a column or data type `DROP` to go through when it ought to fail, thereby causing later uses of the view or rule to get errors. This patch does not do anything to protect existing views/rules, only ones created in the future.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Correctly detect hashability of range data types",
      "description": "The planner mistakenly assumed that any range type could be hashed for use in hash joins or hash aggregation, but actually it must check whether the range's subtype has hash support. This does not affect any of the built-in range types, since they're all hashable anyway.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Correctly ignore `RelabelType` expression nodes when examining functional-dependency statistics",
      "description": "This allows, e.g., extended statistics on `varchar` columns to be used properly.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Prevent sharing transition states between ordered-set aggregates",
      "description": "This causes a crash with the built-in ordered-set aggregates, and probably with user-written ones as well. v11 and later will include provisions for dealing with such cases safely, but in released branches, just disable the optimization.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Prevent `idle_in_transaction_session_timeout` from being ignored when a `statement_timeout` occurred earlier",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Lukas Fittl"
      ]
    },
    {
      "title": "Fix low-probability loss of `NOTIFY` messages due to XID wraparound",
      "description": "If a session executed no queries, but merely listened for notifications, for more than 2 billion transactions, it started to miss some notifications from concurrently-committing transactions.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Marko Tiikkaja",
        "Tom Lane"
      ]
    },
    {
      "title": "Reduce the frequency of data flush requests during bulk file copies to avoid performance problems on macOS, particularly with its new APFS file system",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow `COPY`'s `FREEZE` option to work when the transaction isolation level is `REPEATABLE READ` or higher",
      "description": "This case was unintentionally broken by a previous bug fix.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix `AggGetAggref()` to return the correct `Aggref` nodes to aggregate final functions whose transition calculations have been merged",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix insufficient schema-qualification in some new queries in pg\\_dump and psql",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Vitaly Burovoy",
        "Tom Lane",
        "Noah Misch"
      ]
    },
    {
      "title": "Avoid use of `@>` operator in psql's queries for `\\d`",
      "description": "This prevents problems when the parray\\_gin extension is installed, since that defines a conflicting operator.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_basebackup's matching of tablespace paths to canonicalize both paths before comparing",
      "description": "This is particularly helpful on Windows.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix libpq to not require user's home directory to exist",
      "description": "In v10, failure to find the home directory while trying to read `~/.pgpass` was treated as a hard error, but it should just cause that file to not be found. Both v10 and previous release branches made the same mistake when reading `~/.pg_service.conf`, though this was less obvious since that file is not sought unless a service name is specified.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In ecpglib, correctly handle backslashes in string literals depending on whether `standard_conforming_strings` is set",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Tsunakawa Takayuki"
      ]
    },
    {
      "title": "Make ecpglib's Informix-compatibility mode ignore fractional digits in integer input strings, as expected",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Gao Zengqi",
        "Michael Meskes"
      ]
    },
    {
      "title": "Fix missing temp-install prerequisites for `check`\\-like Make targets",
      "description": "Some non-default test procedures that are meant to work like `make check` failed to ensure that the temporary installation was up to date.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2017c for DST law changes in Fiji, Namibia, Northern Cyprus, Sudan, Tonga, and Turks & Caicos Islands, plus historical corrections for Alaska, Apia, Burma, Calcutta, Detroit, Ireland, Namibia, and Pago Pago.",
      "description": "",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In the documentation, restore HTML anchors to being upper-case strings",
      "description": "Due to a toolchain change, the 10.0 user manual had lower-case strings for intrapage anchors, thus breaking some external links into our website documentation. Return to our previous convention of using upper-case strings.",
      "fixedIn": "10.1",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Fix failure of `ALTER TABLE ... ALTER COLUMN TYPE` when altering multiple columns' types in one command",
      "description": "This fixes a regression introduced in the most recent minor releases: indexes using the altered columns were not processed correctly, leading to strange failures during `ALTER TABLE`.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Install dependencies to prevent dropping partition key columns",
      "description": "`ALTER TABLE ... DROP COLUMN` will refuse to drop a column that is a partition key column. However, indirect drops (such as a cascade from dropping a key column's data type) had no such check, allowing the deletion of a key column. This resulted in a badly broken partitioned table that could neither be accessed nor dropped.\n\nThis fix adds `pg_depend` entries that enforce that the whole partitioned table, not just the key column, will be dropped if a cascaded drop forces removal of the key column. However, such entries will only be created when a partitioned table is created; so this fix does not remove the risk for pre-existing partitioned tables. The issue can only arise for partition key columns of non-built-in data types, so it seems not to be a hazard for most users.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Don't optimize away `GROUP BY` columns when the table involved is an inheritance parent",
      "description": "Normally, if a table's primary key column(s) are included in `GROUP BY`, it's safe to drop any other grouping columns, since the primary key columns are enough to make the groups unique. This rule does not work if the query is also reading inheritance child tables, though; the parent's uniqueness does not extend to the children.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Avoid using unnecessary sort steps for some queries with `GROUPING SETS`",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Richard Guo"
      ]
    },
    {
      "title": "Fix failure to access trigger transition tables during `EvalPlanQual` rechecks",
      "description": "Triggers that rely on transition tables sometimes failed in the presence of concurrent updates.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Alex Aktsipetrov"
      ]
    },
    {
      "title": "Fix mishandling of multi-column foreign keys when rebuilding a foreign key constraint",
      "description": "`ALTER TABLE` could make an incorrect decision about whether revalidation of a foreign key is necessary, if not all columns of the key are of the same type. It seems likely that the error would always have been in the conservative direction, that is revalidating unnecessarily.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Don't build extended statistics for inheritance trees",
      "description": "This avoids a “tuple already updated by self” error during `ANALYZE`.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Avoid spurious deadlock errors when upgrading a tuple lock",
      "description": "When two or more transactions are waiting for a transaction T1 to release a tuple-level lock, and T1 upgrades its lock to a higher level, a spurious deadlock among the waiting transactions could be reported when T1 finishes.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Oleksii Kliukin"
      ]
    },
    {
      "title": "Fix failure to resolve deadlocks involving multiple parallel worker processes",
      "description": "It is not clear whether this bug is reachable with non-artificial queries, but if it did happen, the queries involved in an otherwise-resolvable deadlock would block until canceled.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Rui Hai Jiang"
      ]
    },
    {
      "title": "Prevent incorrect canonicalization of date ranges with `infinity` endpoints",
      "description": "It's incorrect to try to convert an open range to a closed one or vice versa by incrementing or decrementing the endpoint value, if the endpoint is infinite; so leave the range alone in such cases.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Laurenz Albe"
      ]
    },
    {
      "title": "Fix loss of fractional digits when converting very large `money` values to `numeric`",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix spinlock assembly code for MIPS CPUs so that it works on MIPS r6",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "YunQiang Su"
      ]
    },
    {
      "title": "Make libpq ignore carriage return (`\\r`) in connection service files",
      "description": "In some corner cases, service files containing Windows-style newlines could be mis-parsed, resulting in connection failures.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Michael Paquier"
      ]
    },
    {
      "title": "In psql, avoid offering incorrect tab completion options after `` SET _`variable`_ = ``",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix a small memory leak in psql's `\\d` command",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_dump to ensure that custom operator classes are dumped in the right order",
      "description": "If a user-defined opclass is the subtype opclass of a user-defined range type, related objects were dumped in the wrong order, producing an unrestorable dump. (The underlying failure to handle opclass dependencies might manifest in other cases too, but this is the only known case.)",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible lockup in pgbench when using `-R` option",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Fix `contrib/passwordcheck` to coexist with other users of `check_password_hook`",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix `contrib/sepgsql` tests to work under recent SELinux releases",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Mike Palmiotto"
      ]
    },
    {
      "title": "Improve stability of `src/test/recovery` regression tests",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Reduce stderr output from pg\\_upgrade's test script",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix TAP tests to work with msys Perl, in cases where the build directory is on a non-root msys mount point",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Support building Postgres with Microsoft Visual Studio 2019",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "In Visual Studio builds, honor `WindowsSDKVersion` environment variable, if that's set",
      "description": "This fixes build failures in some configurations.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Peifeng Qiu"
      ]
    },
    {
      "title": "Support OpenSSL 1.1.0 and newer in Visual Studio builds",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Juan José Santamaría Flecha",
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow make options to be passed down to gmake when non-GNU make is invoked at the top level",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid choosing `localtime` or `posixrules` as `TimeZone` during initdb",
      "description": "In some cases initdb would choose one of these artificial zone names over the “real” zone name. Prefer any other match to the C library's timezone behavior over these two.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Adjust `pg_timezone_names` view to show the `Factory` time zone if and only if it has a short abbreviation",
      "description": "Historically, IANA set up this artificial zone with an “abbreviation” like `Local time zone must be set--see zic manual page`. Modern versions of the tzdb database show `-00` instead, but some platforms alter the data to show one or another of the historical phrases. Show this zone only if it uses the modern abbreviation.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2019b",
      "description": "This adds support for zic's new `-b slim` option to reduce the size of the installed zone files. We are not currently using that, but may enable it in future.",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2019b for DST law changes in Brazil, plus historical corrections for Hong Kong, Italy, and Palestine.",
      "description": "",
      "fixedIn": "10.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `ALTER TABLE SET` with a custom relation option",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Disallow changing a multiply-inherited column's type if not all parent tables were changed",
      "description": "Previously, this was allowed, whereupon queries on the now-out-of-sync parent would fail.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent `VACUUM` from trying to freeze an old multixact ID involving a still-running transaction",
      "description": "This case would lead to `VACUUM` failing until the old transaction terminates.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Nathan Bossart",
        "Jeremy Schneider"
      ]
    },
    {
      "title": "Fix planner's test for case-foldable characters in `ILIKE` with an ICU collation",
      "description": "This mistake caused the planner to treat too much of the pattern as being a fixed prefix, so that indexscans derived from an `ILIKE` clause might miss entries that they should find.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that offset expressions in `WINDOW` clauses are processed when a query's expressions are manipulated",
      "description": "This oversight could result in assorted failures when the offsets are nontrivial expressions. One example is that a function parameter reference in such an expression would fail if the function was inlined.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix handling of whole-row variables in `WITH CHECK OPTION` expressions and row-level-security policy expressions",
      "description": "Previously, such usage might result in bogus errors about row type mismatches.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Avoid postmaster failure if a parallel query requests a background worker when no postmaster child process array slots remain free",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent possible double-free if a `BEFORE UPDATE` trigger returns the old tuple as-is, and it is not the last such trigger",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Provide a relevant error context line when an error occurs while setting GUC parameters during parallel worker startup",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "In serializable mode, ensure that row-level predicate locks are acquired on the correct version of the row",
      "description": "If the visible version of the row is HOT-updated, the lock might be taken on its now-dead predecessor, resulting in subtle failures to guarantee serialization.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Ensure that `fsync()` is applied only to files that are opened read/write",
      "description": "Some code paths tried to do this after opening a file read-only, but on some platforms that causes “bad file descriptor” or similar errors.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow encoding conversion to succeed on longer strings than before",
      "description": "Previously, there was a hard limit of 0.25GB on the input string, but now it will work as long as the converted output is not over 1GB.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid an unnecessary catalog lookup during heap page pruning",
      "description": "It's no longer necessary to check for unlogged indexes here, and the check caused significant performance problems in some workloads. There was also at least a theoretical possibility of deadlock.",
      "fixedIn": "10.11",
      "significant": true,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid creating unnecessarily-bulky tuple stores for window functions",
      "description": "In some cases the tuple storage would include all columns of the source table(s), not just the ones that are needed by the query.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Allow `repalloc()` to give back space when a large chunk is reduced in size",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that temporary WAL and history files are removed at the end of archive recovery",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Sawada Masahiko"
      ]
    },
    {
      "title": "Avoid failure in archive recovery if `recovery_min_apply_delay` is enabled",
      "description": "`recovery_min_apply_delay` is not typically used in this configuration, but it should work.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix logical replication failure when publisher and subscriber have different ideas about a table's replica identity columns",
      "description": "Declaring a column as part of the replica identity on the subscriber, when it does not exist at all on the publisher, led to “negative bitmapset member not allowed” errors.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid unwanted delay during shutdown of a logical replication walsender",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Craig Ringer",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix timeout handling in logical replication walreceiver processes",
      "description": "Erroneous logic prevented `wal_receiver_timeout` from working in logical replication deployments.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Correctly time-stamp replication messages for logical decoding",
      "description": "This oversight resulted, for example, in `pg_stat_subscription`.`last_msg_send_time` usually reading as NULL.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Jeff Janes"
      ]
    },
    {
      "title": "In logical decoding, ensure that sub-transactions are correctly accounted for when reconstructing a snapshot",
      "description": "This error leads to assertion failures; it's unclear whether any bad effects exist in production builds.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Fix race condition during backend exit, when the backend process has previously waited for synchronous replication to occur",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Dongming Liu"
      ]
    },
    {
      "title": "Fix `ALTER SYSTEM` to cope with duplicate entries in `postgresql.auto.conf`",
      "description": "`ALTER SYSTEM` itself will not generate such a state, but external tools that modify `postgresql.auto.conf` could do so. Duplicate entries for the target variable will now be removed, and then the new setting (if any) will be appended at the end.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Ian Barwick"
      ]
    },
    {
      "title": "Reject include directives with empty file names in configuration files, and report include-file recursion more clearly",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Ian Barwick",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid logging complaints about abandoned connections when using PAM authentication",
      "description": "libpq-based clients will typically make two connection attempts when a password is required, since they don't prompt their user for a password until their first connection attempt fails. Therefore the server is coded not to generate useless log spam when a client closes the connection upon being asked for a password. However, the PAM authentication code hadn't gotten that memo, and would generate several messages about a phantom authentication failure.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix some cases where an incomplete date specification is not detected in `time with time zone` input",
      "description": "If a time zone with a time-varying UTC offset is specified, then a date must be as well, so that the offset can be resolved. Depending on the syntax used, this check was not enforced in some cases, allowing bogus output to be produced.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Fix misbehavior of `bitshiftright()`",
      "description": "The bitstring right shift operator failed to zero out padding space that exists in the last byte of the result when the bitstring length is not a multiple of 8\\. While invisible to most operations, any nonzero bits there would result in unexpected comparison behavior, since bitstring comparisons don't bother to ignore the extra bits, expecting them to always be zero.\n\nIf you have inconsistent data as a result of saving the output of `bitshiftright()` in a table, it's possible to fix it with something like\n\nUPDATE mytab SET bitcol = ~(~bitcol) WHERE bitcol != ~(~bitcol);",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid crash when selecting a namespace node in `XMLTABLE`",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Chapman Flack"
      ]
    },
    {
      "title": "Fix detection of edge-case integer overflow in interval multiplication",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Yuya Watari"
      ]
    },
    {
      "title": "Fix memory leaks in `lower()`, `upper()`, and `initcap()` functions when using ICU collations",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik"
      ]
    },
    {
      "title": "Avoid crashes if `ispell` text search dictionaries contain wrong affix data",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Arthur Zakirov"
      ]
    },
    {
      "title": "Fix incorrect compression logic for GIN posting lists",
      "description": "A GIN posting list item can require 7 bytes if the distance between adjacent indexed TIDs exceeds 16TB. One step in the logic was out of sync with that, and might try to write the value into a 6-byte buffer. In principle this could cause a stack overrun, but on most architectures it's likely that the next byte would be unused alignment padding, making the bug harmless. In any case the bug would be very difficult to hit.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Fix handling of infinity, NaN, and NULL values in KNN-GiST",
      "description": "The query's output order could be wrong (different from a plain sort's result) if some distances computed for non-null column values are infinity or NaN.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix handling of searches for NULL in KNN-SP-GiST",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Nikita Glukhov"
      ]
    },
    {
      "title": "On Windows, recognize additional spellings of the “Norwegian (Bokmål)” locale name",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid compile failure if an ECPG client includes `ecpglib.h` while having `ENABLE_NLS` defined",
      "description": "This risk was created by a misplaced declaration: `ecpg_gettext()` should not be visible to client code.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In psql, resynchronize internal state about the server after an unexpected connection loss and successful reconnection",
      "description": "Ordinarily this is unnecessary since the state would be the same anyway. But it can matter in corner cases, such as where the connection might lead to one of several servers. This change causes psql to re-issue any interactive messages that it would have issued at startup, for example about whether SSL is in use.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Peter Billen",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid platform-specific null pointer dereference in psql",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Quentin Rameau"
      ]
    },
    {
      "title": "In pg\\_dump, ensure stable output order for similarly-named triggers and row-level-security policy objects",
      "description": "Previously, if two triggers on different tables had the same names, they would be sorted in OID-based order, which is less desirable than sorting them by table name. Likewise for RLS policies.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Benjie Gillam"
      ]
    },
    {
      "title": "Fix pg\\_dump to work again with pre-8.3 source servers",
      "description": "A previous fix caused pg\\_dump to always try to query `pg_opfamily`, but that catalog doesn't exist before version 8.3.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In pg\\_restore, treat `-f -` as meaning “output to stdout”",
      "description": "This synchronizes pg\\_restore's behavior with some other applications, and in particular makes pre-v12 branches act similarly to version 12's pg\\_restore, simplifying creation of dump/restore scripts that work across multiple PostgreSQL versions. Before this change, pg\\_restore interpreted such a switch as meaning “output to a file named `-`”, but few people would want that.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Improve pg\\_upgrade's checks for the use of a data type that has changed representation, such as `line`",
      "description": "The previous coding could be fooled by cases where the data type of interest underlies a stored column of a domain or composite type.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Detect file read errors during pg\\_basebackup",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Jeevan Chalke"
      ]
    },
    {
      "title": "In pg\\_basebackup, don't fsync output files until the end of backup",
      "description": "The previous coding could result in timeout failures if fsync was slow.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In pg\\_rewind with an online source cluster, disable timeouts, much as pg\\_dump does",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Alexander Kukushkin"
      ]
    },
    {
      "title": "Fix failure in pg\\_waldump with the `-s` option, when a continuation WAL record ends exactly at a page boundary",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Andrey Lepikhov"
      ]
    },
    {
      "title": "In pg\\_waldump, include the `newitemoff` field in btree page split records",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "In pg\\_waldump with the `--bkp-details` option, avoid emitting extra newlines for WAL records involving full-page writes",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix small memory leak in pg\\_waldump",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix vacuumdb with a high `--jobs` option to handle running out of file descriptors better",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix `contrib/amcheck` to skip unlogged indexes during hot standby",
      "description": "An unlogged index won't necessarily contain valid data in this context, so don't try to check it.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Andrey Borodin",
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix `contrib/intarray`'s GiST opclasses to not fail for empty arrays with `<@`",
      "description": "A clause like `` _`arraycolumn`_ <@ _`constantarray`_ `` is considered indexable, but the index search may not find empty array values; of course, such entries should trivially match the search.\n\nThe only practical back-patchable fix for this requires making `<@` index searches scan the whole index, which is what this patch does. This is unfortunate: it means that the query performance is likely worse than a plain sequential scan would be.\n\nApplications whose performance is adversely impacted by this change have a couple of options. They could switch to a GIN index, which doesn't have this bug, or they could replace `` _`arraycolumn`_ <@ _`constantarray`_ `` with `` _`arraycolumn`_ <@ _`constantarray`_ AND _`arraycolumn`_ && _`constantarray`_ ``. That will provide about the same performance as before, and it will find all non-empty subsets of the given constant array, which is all that could reliably be expected of the query before.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix configure's test for presence of libperl so that it works on recent Red Hat releases",
      "description": "Previously, it could fail if the user sets `CFLAGS` to `-O0`.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure correct code generation for spinlocks on PowerPC",
      "description": "The previous spinlock coding allowed the compiler to select register zero for use with an assembly instruction that does not accept that register, causing a build failure. We have seen only one long-ago report that matches this bug, but it could cause problems for people trying to build modified PostgreSQL code or use atypical compiler options.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "On PowerPC, avoid depending on the xlc compiler's `__fetch_and_add()` function",
      "description": "xlc 13 and newer interpret this function in a way incompatible with our usage, resulting in an unusable build of PostgreSQL. Fix by using custom assembly code instead.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "On AIX, don't use the compiler option `-qsrcmsg`",
      "description": "This avoids an internal compiler error with xlc v16.1.0, with little consequence other than changing the format of compiler error messages.",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix MSVC build process to cope with spaces in the file path of OpenSSL",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2019c for DST law changes in Fiji and Norfolk Island, plus historical corrections for Alberta, Austria, Belgium, British Columbia, Cambodia, Hong Kong, Indiana (Perry County), Kaliningrad, Kentucky, Michigan, Norfolk Island, South Korea, and Turkey.",
      "description": "",
      "fixedIn": "10.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix logical replication subscriber code to execute per-column `UPDATE` triggers when appropriate",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid failure in logical decoding when a large transaction must be spilled into many separate temporary files",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Amit Khandekar"
      ]
    },
    {
      "title": "Fix possible crash or data corruption when a logical replication subscriber processes a row update",
      "description": "This bug caused visible problems only if the subscriber's table contained columns that were not being copied from the publisher and had pass-by-reference data types.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix crash in logical replication subscriber after DDL changes on a subscribed relation",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais",
        "Vignesh C"
      ]
    },
    {
      "title": "Fix failure in logical replication publisher after a database crash and restart",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Vignesh C"
      ]
    },
    {
      "title": "Improve efficiency of logical replication with `REPLICA IDENTITY FULL`",
      "description": "When searching for an existing tuple during an update or delete operation, return the first matching tuple not the last one.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik"
      ]
    },
    {
      "title": "Prevent premature shutdown of a Gather or GatherMerge plan node that is underneath a Limit node",
      "description": "This avoids failure if such a plan node needs to be scanned more than once, as for instance if it is on the inside of a nestloop.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Avoid memory leak when there are no free dynamic shared memory slots",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Ignore the `CONCURRENTLY` option when performing an index creation, drop, or rebuild on a temporary table",
      "description": "This avoids strange failures if the temporary table has an `ON COMMIT` action. There is no benefit in using `CONCURRENTLY` for a temporary table anyway, since other sessions cannot access the table, making the extra processing pointless.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Heikki Linnakangas",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix possible failure when resetting expression indexes on temporary tables that are marked `ON COMMIT DELETE ROWS`",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible crash in BRIN index operations with `box`, `range` and `inet` data types",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Fix handling of deleted pages in GIN indexes",
      "description": "Avoid possible deadlocks, incorrect updates of a deleted page's state, and failure to traverse through a recently-deleted page.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix possible crash with a SubPlan (sub-`SELECT`) within a multi-row `VALUES` list",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix crash after FileClose() failure",
      "description": "This issue could only be observed with `data_sync_retry` enabled, since otherwise FileClose() failure would be reported as a PANIC.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix unlikely crash with pass-by-reference aggregate transition states",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Teodor Sigaev"
      ]
    },
    {
      "title": "Improve error reporting in `to_date()` and `to_timestamp()`",
      "description": "Reports about incorrect month or day names in input strings could truncate the input in the middle of a multi-byte character, leading to an improperly encoded error message that could cause follow-on failures. Truncate at the next whitespace instead.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix off-by-one result for `` EXTRACT(ISOYEAR FROM _`timestamp`_) `` for BC dates",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid stack overflow in `information_schema` views when a self-referential view exists in the system catalogs",
      "description": "A self-referential view can't work; it will always result in infinite recursion. We handled that situation correctly when trying to execute the view, but not when inquiring whether it is automatically updatable.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that walsender processes always show NULL for transaction start time in `pg_stat_activity`",
      "description": "Previously, the `xact_start` column would sometimes show the process start time.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Improve performance of hash joins with very large inner relations",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix edge-case crashes and misestimations in selectivity calculations for the `<@` and `@>` range operators",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Andrey Borodin",
        "Tom Lane"
      ]
    },
    {
      "title": "Ignore system columns when applying most-common-value extended statistics",
      "description": "This prevents “negative bitmapset member not allowed” planner errors for affected queries.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix BRIN index logic to support hypothetical BRIN indexes",
      "description": "Previously, if an “index adviser” extension tried to get the planner to produce a plan involving a hypothetical BRIN index, that would fail, because the BRIN cost estimation code would always try to physically access the index's metapage. Now it checks to see if the index is only hypothetical, and uses default assumptions about the index parameters if so.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Julien Rouhaud",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Improve error reporting for attempts to use automatic updating of views with conditional `INSTEAD` rules",
      "description": "This has never been supported, but previously the error was thrown only at execution time, so that it could be masked by planner errors.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Prevent a composite type from being included in itself indirectly via a range type",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Disallow partition key expressions that return pseudo-types, such as `record`",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix error reporting for index expressions of prohibited types",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix dumping of views that contain only a `VALUES` list to handle cases where a view output column has been renamed",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that data types and collations used in `XMLTABLE` constructs are accounted for when computing dependencies of a view or rule",
      "description": "Previously it was possible to break a view using `XMLTABLE` by dropping a type, if the type was not otherwise referenced in the view. This fix does not correct the dependencies already recorded for existing views, only for newly-created ones.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent unwanted downcasing and truncation of RADIUS authentication parameters",
      "description": "The `pg_hba.conf` parser mistakenly treated these fields as SQL identifiers, which in general they aren't.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Marcos David"
      ]
    },
    {
      "title": "Transmit incoming `NOTIFY` messages to the client before sending `ReadyForQuery`, rather than after",
      "description": "This change ensures that, with libpq and other client libraries that act similarly to it, any notifications received during a transaction will be available by the time the client thinks the transaction is complete. This probably makes no difference in practical applications (which would need to cope with asynchronous notifications in any case); but it makes it easier to build test cases with reproducible behavior.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow libpq to parse all GSS-related connection parameters even when the GSSAPI code hasn't been compiled in",
      "description": "This makes the behavior similar to our SSL support, where it was long ago deemed to be a good idea to always accept all the related parameters, even if some are ignored or restricted due to lack of the feature in a particular build.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect handling of `%b` and `%B` format codes in ecpg's `PGTYPEStimestamp_fmt_asc()` function",
      "description": "Due to an off-by-one error, these codes would print the wrong month name, or possibly crash.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix parallel pg\\_dump/pg\\_restore to more gracefully handle failure to create worker processes",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent possible crash or lockup when attempting to terminate a parallel pg\\_dump/pg\\_restore run via a signal",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In pg\\_upgrade, look inside arrays and ranges while searching for non-upgradable data types in tables",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Apply more thorough syntax checking to createuser's `--connection-limit` option",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Avoid crash in `postgres_fdw` when trying to send a command like `UPDATE remote_tab SET (x,y) = (SELECT ...)` to the remote server",
      "description": "",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `contrib/dict_int`, reject `maxlen` settings less than one",
      "description": "This prevents a possible crash with silly settings for that parameter.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Disallow NULL category values in `contrib/tablefunc`'s `crosstab()` function",
      "description": "This case never worked usefully, and it would crash on some platforms.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Joe Conway"
      ]
    },
    {
      "title": "Mark some timeout and statistics-tracking GUC variables as `PGDLLIMPORT`, to allow extensions to access them on Windows",
      "description": "This applies to `idle_in_transaction_session_timeout`, `lock_timeout`, `statement_timeout`, `track_activities`, `track_counts`, and `track_functions`.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Pascal Legrand"
      ]
    },
    {
      "title": "Avoid memory leak in sanity checks for “slab” memory contexts",
      "description": "This isn't an issue for production builds, since they wouldn't ordinarily have memory context checking enabled; but the leak could be quite severe in a debug build.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix multiple statistics entries reported by the LWLock statistics mechanism",
      "description": "The LWLock statistics code (which is not built by default; it requires compiling with `-DLWLOCK_STATS`) could report multiple entries for the same LWLock and backend process, as a result of faulty hashtable key creation.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix race condition that led to delayed delivery of interprocess signals on Windows",
      "description": "This caused visible timing oddities in `NOTIFY`, and perhaps other misbehavior.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "On Windows, retry a few times after an `ERROR_ACCESS_DENIED` file access failure",
      "description": "This helps cope with cases where a file open attempt fails because the targeted file is flagged for deletion but not yet actually gone. pg\\_ctl, for example, frequently failed with such an error when probing to see if the postmaster had shut down yet.",
      "fixedIn": "10.12",
      "significant": false,
      "contributors": [
        "Alexander Lakhin",
        "Tom Lane"
      ]
    },
    {
      "title": "Preserve the `indisclustered` setting of indexes rewritten by `ALTER TABLE`",
      "description": "Previously, `ALTER TABLE` lost track of which index had been used for `CLUSTER`.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Justin Pryzby"
      ]
    },
    {
      "title": "Preserve the replica identity properties of indexes rewritten by `ALTER TABLE`",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Quan Zongliang",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Lock objects sooner during `DROP OWNED BY`",
      "description": "This avoids failures in race-condition cases where another session is deleting some of the same objects.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix error-case processing for `CREATE ROLE ... IN ROLE`",
      "description": "Some error cases would be reported as “unexpected node type” or the like, instead of the intended message.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Ensure that members of the `pg_read_all_stats` role can read all statistics views, as expected",
      "description": "The functions underlying the `pg_stat_progress_*` views had not gotten this memo.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Fix full text search to handle NOT above a phrase search correctly",
      "description": "Queries such as `!(foo<->bar)` failed to find matching rows when implemented as a GiST or GIN index search.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix full text search for cases where a phrase search includes an item with both prefix matching and a weight restriction",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `ts_headline()` to make better headline selections when working with phrase queries",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix bugs in `gin_fuzzy_search_limit` processing",
      "description": "A small value of `gin_fuzzy_search_limit` could result in unexpected slowness due to unintentionally rescanning the same index page many times. Another code path failed to apply the intended filtering at all, possibly returning too many values.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Adé Heyward",
        "Tom Lane"
      ]
    },
    {
      "title": "Allow input of type `circle` to accept the format “`` (_`x`_,_`y`_),_`r`_ ``” as the documentation says it does",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "David Zhang"
      ]
    },
    {
      "title": "Make the `get_bit()` and `set_bit()` functions cope with `bytea` strings longer than 256MB",
      "description": "Since the bit number argument is only `int4`, it's impossible to use these functions to access bits beyond the first 256MB of a long `bytea`. We'll widen the argument to `int8` in v13, but in the meantime, allow these functions to work on the initial substring of a long `bytea`.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Movead Li"
      ]
    },
    {
      "title": "Ignore file-not-found errors in `pg_ls_waldir()` and allied functions",
      "description": "This prevents a race condition failure if a file is removed between when we see its directory entry and when we attempt to `stat()` it.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid possibly leaking an open-file descriptor for a directory in `pg_ls_dir()`, `pg_timezone_names()`, `pg_tablespace_databases()`, and allied functions",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Fix polymorphic-function type resolution to correctly infer the actual type of an `anyarray` output when given only an `anyrange` input",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid unlikely crash when `REINDEX` is terminated by a session-shutdown signal",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix low-probability crash after constraint violation errors in partitioned tables",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Prevent printout of possibly-incorrect hash join table statistics in `EXPLAIN`",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik",
        "Tom Lane",
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix reporting of elapsed time for heap truncation steps in `VACUUM VERBOSE`",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tatsuhito Kasahara"
      ]
    },
    {
      "title": "Ensure that TimelineHistoryRead and TimelineHistoryWrite wait states are reported in all code paths that read or write timeline history files",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Masahiro Ikeda"
      ]
    },
    {
      "title": "Avoid possibly showing “waiting” twice in a process's PS status",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Avoid premature recycling of WAL segments during crash recovery",
      "description": "WAL segments that become ready to be archived during crash recovery were potentially recycled without being archived.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais"
      ]
    },
    {
      "title": "Avoid scanning irrelevant timelines during archive recovery",
      "description": "This can eliminate many attempts to fetch non-existent WAL files from archive storage, which is helpful if archive access is slow.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Remove bogus “subtransaction logged without previous top-level txn record” error check in logical decoding",
      "description": "This condition is legitimately reachable in various scenarios, so remove the check.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Arseny Sher",
        "Amit Kapila"
      ]
    },
    {
      "title": "Ensure that a replication slot's `io_in_progress_lock` is released in failure code paths",
      "description": "This could result in a walsender later becoming stuck waiting for the lock.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Pavan Deolasee"
      ]
    },
    {
      "title": "Fix race conditions in synchronous standby management",
      "description": "During a change in the `synchronous_standby_names` setting, there was a window in which wrong decisions could be made about whether it is OK to release transactions that are waiting for synchronous commit. Another hazard for similarly wrong decisions existed if a walsender process exited and was immediately replaced by another.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure `nextXid` can't go backwards on a standby server",
      "description": "This race condition could allow incorrect hot standby feedback messages to be sent back to the primary server, potentially allowing `VACUUM` to run too soon on the primary.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Eka Palamadai"
      ]
    },
    {
      "title": "Add missing SQLSTATE values to a few error reports",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Sawada Masahiko"
      ]
    },
    {
      "title": "Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix memory leak in libpq when using `sslmode=verify-full`",
      "description": "Certificate verification during connection startup could leak some memory. This would become an issue if a client process opened many database connections during its lifetime.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Roman Peshkurov"
      ]
    },
    {
      "title": "Fix ecpg to treat an argument of just “`-`” as meaning “read from stdin” on all platforms",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow tab-completion of the filename argument to psql's `\\gx` command",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Vik Fearing"
      ]
    },
    {
      "title": "Add pg\\_dump support for `ALTER ... DEPENDS ON EXTENSION`",
      "description": "pg\\_dump previously ignored dependencies added this way, causing them to be forgotten during dump/restore or pg\\_upgrade.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix pg\\_dump to dump comments on RLS policy objects",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In pg\\_dump, postpone restore of event triggers till the end",
      "description": "This minimizes the risk that an event trigger could interfere with the restoration of other objects.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Fabrízio de Royes Mello",
        "Hamid Akhtar",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix quoting of `--encoding`, `--lc-ctype` and `--lc-collate` values in createdb utility",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "`contrib/lo`'s `lo_manage()` function crashed if called directly rather than as a trigger",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `contrib/ltree`, protect against overflow of `ltree` and `lquery` length fields",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Nikita Glukhov"
      ]
    },
    {
      "title": "Fix cache reference leak in `contrib/sepgsql`",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Michael Luo"
      ]
    },
    {
      "title": "Avoid failures when dealing with Unix-style locale names on Windows",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Juan José Santamaría Flecha"
      ]
    },
    {
      "title": "Use pkg-config, if available, to locate libxml2 during configure",
      "description": "If pkg-config is not present or lacks knowledge of libxml2, we still query xml2-config as before.\n\nThis change could break build processes that try to make PostgreSQL use a non-default version of libxml2 by putting that version's xml2-config into the `PATH`. Instead, set `XML2_CONFIG` to point to the non-default xml2-config. That method will work with either older or newer PostgreSQL releases.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Hugh McMaster",
        "Tom Lane",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Include `CFLAGS_SL` in `CXXFLAGS` when building a shared library",
      "description": "This ensures that C++ source files are compiled correctly, for example by adding `-fPIC` when needed.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Oleksii Kliukin"
      ]
    },
    {
      "title": "In MSVC builds, cope with spaces in the path name for Python",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Victor Wagner"
      ]
    },
    {
      "title": "In MSVC builds, fix detection of Visual Studio version to work with more language settings",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "In MSVC builds, use `-Wno-deprecated` with bison versions newer than 3.0, as non-Windows builds already do",
      "description": "",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2020a for DST law changes in Morocco and the Canadian Yukon, plus historical corrections for Shanghai.",
      "description": "The America/Godthab zone has been renamed to America/Nuuk to reflect current English usage; however, the old name remains available as a compatibility link.\n\nAlso, update initdb's list of known Windows time zone names to include recent additions, improving the odds that it will correctly translate the system time zone setting on that platform.",
      "fixedIn": "10.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In logical replication walsender, fix failure to send feedback messages after sending a keepalive message",
      "description": "This is a relatively minor problem when using built-in logical replication, because the built-in walreceiver will send a feedback reply (which clears the incorrect state) fairly frequently anyway. But with some other replication systems, such as pglogical, it causes significant performance issues.",
      "fixedIn": "10.14",
      "significant": true,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix firing of column-specific `UPDATE` triggers in logical replication subscribers",
      "description": "The code neglected to account for the possibility of column numbers being different between the publisher and subscriber tables, so that if those were indeed different, wrong decisions might be made about which triggers to fire.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix slow execution of `ts_headline()`",
      "description": "The phrase-search fix added in our previous set of minor releases could cause `ts_headline()` to take unreasonable amounts of time for long documents; to make matters worse, the query was not cancellable within the troublesome loop.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure the `repeat()` function can be interrupted by query cancel",
      "description": "",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Joe Conway"
      ]
    },
    {
      "title": "Fix `pg_current_logfile()` to not include a carriage return (`\\r`) in its result on Windows",
      "description": "",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix mis-handling of `NaN` inputs during parallel aggregation on `numeric`\\-type columns",
      "description": "If some partial aggregation workers found only `NaN`s while others found only non-`NaN`s, the results were combined incorrectly, possibly leading to the wrong overall result (i.e., not `NaN` when it should be).",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reject time-of-day values greater than 24 hours",
      "description": "The intention of the datetime input code is to allow “24:00:00” or equivalently “23:59:60”, but no larger value. However, the range check was miscoded so that it would accept “23:59:60._`nnn`_” with nonzero fractional-second _`nnn`_. In timestamp values this would result in wrapping into the first second of the next day. In `time` and `timetz` values, the stored value would actually be more than 24 hours, causing dump/reload failures and possibly other misbehavior.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Undo double-quoting of index names in `EXPLAIN`'s non-text output formats",
      "description": "",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Euler Taveira"
      ]
    },
    {
      "title": "Fix `EXPLAIN`'s accounting for resource usage, particularly buffer accesses, in parallel workers in a plan using `Gather Merge` nodes",
      "description": "",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais"
      ]
    },
    {
      "title": "Fix timing of constraint revalidation in `ALTER TABLE`",
      "description": "If `ALTER TABLE` needs to fully rewrite the table's contents (for example, due to change of a column's data type) and also needs to scan the table to re-validate foreign keys or `CHECK` constraints, it sometimes did things in the wrong order, leading to odd errors such as “could not read block 0 in file \"base/nnnnn/nnnnn\": read only 0 of 8192 bytes”.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Work around incorrect not-null markings for `pg_subscription`.`subslotname` and `pg_subscription_rel`.`srsublsn`",
      "description": "The bootstrap catalog data incorrectly marks these two catalog columns as always non-null. There's no easy way to correct that mistake in existing installations (though v13 and later will have the correct markings). The main place that depends on that marking being correct is JIT-enabled tuple deconstruction, so teach it to explicitly ignore the marking for these two columns. Also adjust some C code that accessed `srsublsn` without checking to see if it's null; a crash from that is improbable but perhaps not impossible.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Cope with `LATERAL` references in restriction clauses attached to an un-flattened sub-`SELECT` in the `FROM` clause",
      "description": "This oversight could result in assertion failures or crashes at query execution.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid believing that a never-analyzed foreign table has zero tuples",
      "description": "This primarily affected the planner's estimate of the number of groups that would be obtained by `GROUP BY`.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove bogus warning about “leftover placeholder tuple” in BRIN index de-summarization",
      "description": "The case can occur legitimately after a cancelled vacuum, so warning about it is overly noisy.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Improve error handling in the server's `buffile` module",
      "description": "Fix some cases where I/O errors were indistinguishable from reaching EOF, or were not reported at all. Also add details such as block numbers and byte counts where appropriate.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix conflict-checking anomalies in `SERIALIZABLE` isolation mode",
      "description": "If a concurrently-inserted tuple was updated by a different concurrent transaction, and neither tuple version was visible to the current transaction's snapshot, serialization conflict checking could draw the wrong conclusions about whether the tuple was relevant to the results of the current transaction. This could allow a serializable transaction to commit when it should have failed with a serialization error.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Avoid repeated marking of dead btree index entries as dead",
      "description": "While functionally harmless, this led to useless WAL traffic when checksums are enabled or `wal_log_hints` is on.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Fix failure of some code paths to acquire the correct lock before modifying `pg_control`",
      "description": "This oversight could allow `pg_control` to be written out with an inconsistent checksum, possibly causing trouble later, including inability to restart the database if it crashed before the next `pg_control` update.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Nathan Bossart",
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix errors in `currtid()` and `currtid2()`",
      "description": "These functions (which are undocumented and used only by ancient versions of the ODBC driver) contained coding errors that could result in crashes, or in confusing error messages such as “could not open file” when applied to a relation having no storage.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid calling `elog()` or `palloc()` while holding a spinlock",
      "description": "Logic associated with replication slots had several violations of this coding rule. While the odds of trouble are quite low, an error in the called function would lead to a stuck spinlock.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix assertion in logical replication subscriber to allow use of `REPLICA IDENTITY FULL`",
      "description": "This was just an incorrect assertion, so it has no impact on standard production builds.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Euler Taveira"
      ]
    },
    {
      "title": "Report out-of-disk-space errors properly in pg\\_dump and pg\\_basebackup",
      "description": "Some code paths could produce silly reports like “could not write file: Success”.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Justin Pryzby",
        "Tom Lane",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix parallel restore of tables having both table-level privileges and per-column privileges",
      "description": "The table-level privilege grants have to be applied first, but a parallel restore did not reliably order them that way; this could lead to “tuple concurrently updated” errors, or to disappearance of some per-column privilege grants. The fix for this is to include dependency links between such entries in the archive file, meaning that a new dump has to be taken with a corrected pg\\_dump to ensure that the problem will not recur.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that pg\\_upgrade runs with `vacuum_defer_cleanup_age` set to zero in the target cluster",
      "description": "If the target cluster's configuration has been modified to set `vacuum_defer_cleanup_age` to a nonzero value, that prevented freezing of the system catalogs from working properly, which caused the upgrade to fail in confusing ways. Ensure that any such setting is overridden for the duration of the upgrade.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Fix pg\\_recvlogical to drain pending messages before exiting",
      "description": "Without this, the replication sender might detect a send failure and exit without making the expected final update to the replication slot's LSN position. That led to re-transmitting data after the next connection. It was also possible to miss error messages sent after the last data that pg\\_recvlogical wants to consume.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix pg\\_rewind's handling of just-deleted files in the source data directory",
      "description": "When working with an on-line source database, concurrent file deletions are possible, but pg\\_rewind would get confused if deletion happened between seeing a file's directory entry and examining it with `stat()`.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Justin Pryzby",
        "Michael Paquier"
      ]
    },
    {
      "title": "Make pg\\_test\\_fsync use binary I/O mode on Windows",
      "description": "Previously it wrote the test file in text mode, which is not an accurate reflection of PostgreSQL's actual usage.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix failure to initialize local state correctly in `contrib/dblink`",
      "description": "With the right combination of circumstances, this could lead to `dblink_close()` issuing an unexpected remote `COMMIT`.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Joe Conway"
      ]
    },
    {
      "title": "Fix `contrib/pgcrypto`'s misuse of `deflate()`",
      "description": "The `pgp_sym_encrypt` functions could produce incorrect compressed data due to mishandling of zlib's API requirements. We have no reports of this error manifesting with stock zlib, but it can be seen when using IBM's zlibNX implementation.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix corner case in decompression logic in `contrib/pgcrypto`'s `pgp_sym_decrypt` functions",
      "description": "A compressed stream can validly end with an empty packet, but the decompressor failed to handle this and would complain about corrupt data.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Michael Paquier"
      ]
    },
    {
      "title": "Use POSIX-standard `strsignal()` in place of the BSD-ish `sys_siglist[]`",
      "description": "This avoids build failures with very recent versions of glibc.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Support building our NLS code with Microsoft Visual Studio 2015 or later",
      "description": "",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Juan José Santamaría Flecha",
        "Davinder Singh",
        "Amit Kapila"
      ]
    },
    {
      "title": "Avoid possible failure of our MSVC install script when there is a file named `configure` several levels above the source code tree",
      "description": "This could confuse some logic that looked for `configure` to identify the top level of the source tree.",
      "fixedIn": "10.14",
      "significant": false,
      "contributors": [
        "Arnold Müller"
      ]
    },
    {
      "title": "Prevent possible data loss from concurrent truncations of SLRU logs",
      "description": "This rare problem would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Ensure that SLRU directories are properly fsync'd during checkpoints",
      "description": "This prevents possible data loss in a subsequent operating system crash.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix `ALTER ROLE` for users with the `BYPASSRLS` attribute",
      "description": "The `BYPASSRLS` attribute is only allowed to be changed by superusers, but other `ALTER ROLE` operations, such as password changes, should be allowed with only ordinary permission checks. The previous coding erroneously restricted all changes on such a role to superusers.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Stephen Frost"
      ]
    },
    {
      "title": "Fix handling of expressions in `CREATE TABLE LIKE` with inheritance",
      "description": "If a `CREATE TABLE` command uses both `LIKE` and traditional inheritance, column references in `CHECK` constraints and expression indexes that came from a `LIKE` parent table tended to get mis-numbered, resulting in wrong answers and/or bizarre error messages. The same could happen in `GENERATED` expressions, in branches that have that feature.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix off-by-one conversion of negative years to BC dates in `to_date()` and `to_timestamp()`",
      "description": "Also, arrange for the combination of a negative year and an explicit “BC” marker to cancel out and produce AD.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Dar Alathar-Yemen",
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that standby servers will archive WAL timeline history files when `archive_mode` is set to `always`",
      "description": "This oversight could lead to failure of subsequent PITR recovery attempts.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Grigory Smolkin",
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix “cache lookup failed for relation 0” failures in logical replication workers",
      "description": "The real-world impact is small, since the failure is unlikely, and if it does happen the worker would just exit and be restarted.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent logical replication workers from sending redundant ping requests",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "During “smart” shutdown, don't terminate background processes until all client (foreground) sessions are done",
      "description": "The previous behavior broke parallel query processing, since the postmaster would terminate parallel workers and refuse to launch any new ones. It also caused autovacuum to cease functioning, which could have dire long-term effects if the surviving client sessions make a lot of data changes.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid recursive consumption of stack space while processing signals in the postmaster",
      "description": "Heavy use of parallel processing has been observed to cause postmaster crashes due to too many concurrent signals requesting creation of a parallel worker process.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid running atexit handlers when exiting due to SIGQUIT",
      "description": "Most server processes followed this practice already, but the archiver process was overlooked. Backends that were still waiting for a client startup packet got it wrong, too.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid misoptimization of subquery qualifications that reference apparently-constant grouping columns",
      "description": "A “constant” subquery output column isn't really constant if it is a grouping column that appears in only some of the grouping sets.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid failure when SQL function inlining changes the shape of a potentially-hashable subplan comparison expression",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "While building or re-building an index, tolerate the appearance of new HOT chains due to concurrent updates",
      "description": "This oversight could lead to “failed to find parent tuple for heap-only tuple” errors.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Anastasia Lubennikova",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix failure of parallel B-tree index scans when the index condition is unsatisfiable",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "James Hunter"
      ]
    },
    {
      "title": "Ensure that data is detoasted before being inserted into a BRIN index",
      "description": "Index entries are not supposed to contain out-of-line TOAST pointers, but BRIN didn't get that memo. This could lead to errors like “missing chunk number 0 for toast value NNN”. (If you are faced with such an error from an existing index, `REINDEX` should be enough to fix it.)",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Handle concurrent desummarization correctly during BRIN index scans",
      "description": "Previously, if a page range was desummarized at just the wrong time, an index scan might falsely raise an error indicating index corruption.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Alexander Lakhin",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix rare “lost saved point in index” errors in scans of multicolumn GIN indexes",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix unportable use of `getnameinfo()` in `pg_hba_file_rules` view",
      "description": "On FreeBSD 11, and possibly other platforms, the view's `address` and `netmask` columns were always null due to this error.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix use-after-free hazard when an event trigger monitors an `ALTER TABLE` operation",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais"
      ]
    },
    {
      "title": "Fix incorrect error message about inconsistent moving-aggregate data types",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Jeff Janes"
      ]
    },
    {
      "title": "Avoid lockup when a parallel worker reports a very long error message",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Vignesh C"
      ]
    },
    {
      "title": "Avoid unnecessary failure when transferring very large payloads through shared memory queues",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Markus Wanner"
      ]
    },
    {
      "title": "Fix relation cache memory leaks with RLS policies",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make libpq support arbitrary-length lines in `.pgpass` files",
      "description": "This is mostly useful to allow using very long security tokens as passwords.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In libpq for Windows, call `WSAStartup()` once per process and `WSACleanup()` not at all",
      "description": "Previously, libpq invoked `WSAStartup()` at connection start and `WSACleanup()` at connection cleanup. However, it appears that calling `WSACleanup()` can interfere with other program operations; notably, we have observed rare failures to emit expected output to stdout. There appear to be no ill effects from omitting the call, so do that. (This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections.)",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Fix ecpg library's per-thread initialization logic for Windows",
      "description": "Multi-threaded ecpg applications could suffer rare misbehavior due to incorrect locking.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Alexander Lakhin"
      ]
    },
    {
      "title": "On Windows, make psql read the output of a backtick command in text mode, not binary mode",
      "description": "This ensures proper handling of newlines.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that pg\\_dump collects per-column information about extension configuration tables",
      "description": "Failure to do this led to crashes when specifying `--inserts`, or underspecified (though usually correct) `COPY` commands when using `COPY` to reload the tables' data.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Fabrízio de Royes Mello",
        "Tom Lane"
      ]
    },
    {
      "title": "Make pg\\_upgrade check for pre-existence of tablespace directories in the target cluster",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Fix potential memory leak in `contrib/pgcrypto`",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add check for an unlikely failure case in `contrib/pgcrypto`",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Daniel Gustafsson"
      ]
    },
    {
      "title": "Fix recently-added `timetz` test case so it works when the USA is not observing daylight savings time",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station (Antarctica); plus historical corrections for France, Hungary, Monaco, and Palestine.",
      "description": "",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2020d",
      "description": "This absorbs upstream's change of zic's default output option from “fat” to “slim”. That's just cosmetic for our purposes, as we continue to select the “fat” mode in pre-v13 branches. This change also ensures that `strftime()` does not change `errno` unless it fails.",
      "fixedIn": "10.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `CREATE INDEX CONCURRENTLY` to wait for concurrent prepared transactions",
      "description": "At the point where `CREATE INDEX CONCURRENTLY` waits for all concurrent transactions to complete so that it can see rows they inserted, it must also wait for all prepared transactions to complete, for the same reason. Its failure to do so meant that rows inserted by prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. In installations that have enabled prepared transactions (`max_prepared_transactions` \\> 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node",
      "description": "This case is unsupported (in general, a cursor using `ORDER BY` is not guaranteed to be simply updatable); but the code previously did not reject it, and could silently give false matches.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "David Geier"
      ]
    },
    {
      "title": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level",
      "description": "This oversight could lead to “failed to build any _`N`_\\-way joins” planner errors.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Be more careful about whether index AMs support mark/restore",
      "description": "This prevents errors about missing support functions in rare edge cases.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Adjust settings to make it more difficult to run out of DSM slots during heavy usage of parallel queries",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix `ALTER DEFAULT PRIVILEGES` to handle duplicated arguments safely",
      "description": "Duplicate role or schema names within the same command could lead to “tuple already updated by self” errors or unique-constraint violations.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Flush ACL-related caches when `pg_authid` changes",
      "description": "This change ensures that permissions-related decisions will promptly reflect the results of `ALTER ROLE ... [NO] INHERIT`.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Prevent misprocessing of ambiguous `CREATE TABLE LIKE` clauses",
      "description": "A `LIKE` clause is re-examined after initial creation of the new table, to handle importation of indexes and such. It was possible for this re-examination to find a different table of the same name, causing unexpected behavior; one example is where the new table is a temporary table of the same name as the `LIKE` target.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Rearrange order of operations in `CREATE TABLE LIKE` so that indexes are cloned before building foreign key constraints",
      "description": "This fixes the case where a self-referential foreign key constraint declared in the outer `CREATE TABLE` depends on an index that's coming from the `LIKE` clause.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow `CREATE STATISTICS` on system catalogs",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Disallow converting an inheritance child table to a view",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that disk space allocated for a dropped relation is released promptly at commit",
      "description": "Previously, if the dropped relation spanned multiple 1GB segments, only the first segment was truncated immediately. Other segments were simply unlinked, which doesn't authorize the kernel to release the storage so long as any other backends still have the files open.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix handling of backslash-escaped multibyte characters in `COPY FROM`",
      "description": "A backslash followed by a multibyte character was not handled correctly. In some client character encodings, this could lead to misinterpreting part of a multibyte character as a field separator or end-of-copy-data marker.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Avoid preallocating executor hash tables in `EXPLAIN` without `ANALYZE`",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Alexey Bashtanov"
      ]
    },
    {
      "title": "Fix recently-introduced race conditions in `LISTEN`/`NOTIFY` queue handling",
      "description": "A newly-listening backend could attempt to read SLRU pages that were in process of being truncated, possibly causing an error.\n\nThe queue tail pointer could become set to a value that's not equal to the queue position of any backend, resulting in effective disabling of the queue truncation logic. Continued use of `NOTIFY` then led to queue-fill warnings, and eventually to inability to send any more notifies until the server is restarted.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow the `jsonb` concatenation operator to handle all combinations of JSON data types",
      "description": "We can concatenate two JSON objects or two JSON arrays. Handle other cases by wrapping non-array inputs in one-element arrays, then performing an array concatenation. Previously, some combinations of inputs followed this rule but others arbitrarily threw an error.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression",
      "description": "This error could cause the quantifier to act non-greedy, that is behave like a `*?` quantifier would do in full regular expressions.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix numeric `power()` for the case where the exponent is exactly `INT_MIN` (-2147483648)",
      "description": "Previously, a result with no significant digits was produced.",
      "fixedIn": "10.16",
      "significant": true,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log",
      "description": "The wraparound point typically falls in the middle of a page, which must be rounded off to a page boundary, and that was not done correctly. No issue could arise unless an installation had gotten to within one page of SLRU overflow, which is unlikely in a properly-functioning system. If this did happen, it would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix memory leak in walsender processes while sending new snapshots for logical decoding",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Fix walsender to accept additional commands after terminating replication",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Jeff Davis"
      ]
    },
    {
      "title": "Ensure detection of deadlocks between hot standby backends and the startup (WAL-application) process",
      "description": "The startup process did not run the deadlock detection code, so that in situations where the startup process is last to join a circular wait situation, the deadlock might never be recognized.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence",
      "description": "Previously, there was a race condition whereby a child process that had requested a background worker just before shutdown could wait indefinitely, preventing shutdown from completing.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix portability problem in parsing of `recovery_target_xid` values",
      "description": "The target XID is potentially 64 bits wide, but it was parsed with `strtoul()`, causing misbehavior on platforms where `long` is 32 bits (such as Windows).",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid assertion failure in `pg_get_functiondef()` when examining a function with a `TRANSFORM` option",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In psql, re-allow including a password in a _`connectionstring`_ argument of a `\\connect` command",
      "description": "This used to work, but a recent bug fix caused the password to be ignored (resulting in prompting for a password).",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix assorted bugs in psql's `\\help` command",
      "description": "`\\help` with two argument words failed to find a command description using only the first word, for example `\\help reset all` should show the help for `RESET` but did not. Also, `\\help` often failed to invoke the pager when it should. It also leaked memory.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Tom Lane"
      ]
    },
    {
      "title": "In pg\\_dump, ensure that the restore script runs `ALTER PUBLICATION ADD TABLE` commands as the owner of the publication",
      "description": "Previously, these commands would be run by the role that started the restore script; which will usually work, but in corner cases that role might not have adequate permissions.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_dump to handle `WITH GRANT OPTION` in an extension's initial privileges",
      "description": "If an extension's script creates an object and grants privileges on it with grant option, then later the user revokes such privileges, pg\\_dump would generate incorrect SQL for reproducing the situation. (Few if any extensions do this today.)",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "In pg\\_rewind, ensure that all WAL is accounted for when rewinding a standby server",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Ian Barwick",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Report the correct database name in connection failure error messages from some client programs",
      "description": "If the database name was defaulted rather than given on the command line, pg\\_dumpall, pgbench, oid2name, and vacuumlo would produce misleading error messages after a connection failure.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix memory leak in `contrib/auto_explain`",
      "description": "Memory consumed while producing the `EXPLAIN` output was not freed until the end of the current transaction (for a top-level statement) or the end of the surrounding statement (for a nested statement). This was particularly a problem with `log_nested_statements` enabled.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Japin Li"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped",
      "description": "Open connections that depend on a dropped user mapping or foreign server can no longer be referenced, but formerly they were kept around anyway for the duration of the local session.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Bharath Rupireddy"
      ]
    },
    {
      "title": "In `contrib/pgcrypto`, check for error returns from OpenSSL's EVP functions",
      "description": "We do not really expect errors here, but this change silences warnings from static analysis tools.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In `contrib/pg_trgm`'s GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items",
      "description": "",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix miscalculation of timeouts in `contrib/pg_prewarm` and `contrib/postgres_fdw`",
      "description": "The main loop in `contrib/pg_prewarm`'s autoprewarm parent process underestimated its desired sleep time by a factor of 1000, causing it to consume much more CPU than intended. When waiting for a result from a remote server, `contrib/postgres_fdw` overestimated the desired timeout by a factor of 1000 (though this error had been mitigated by imposing a clamp to 60 seconds).\n\nBoth of these errors stemmed from incorrectly converting seconds-and-microseconds to milliseconds. Introduce a new API `TimestampDifferenceMilliseconds()` to make it easier to get this right in the future.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Alexey Kondratov",
        "Tom Lane"
      ]
    },
    {
      "title": "Improve configure's heuristics for selecting `PG_SYSROOT` on macOS",
      "description": "The new method is more likely to produce desirable results when Xcode is newer than the underlying operating system. Choosing a sysroot that does not match the OS version may result in nonfunctional executables.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "While building on macOS, specify `-isysroot` in link steps as well as compile steps",
      "description": "This likewise improves the results when Xcode is out of sync with the operating system.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": [
        "James Hilliard"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2021a for DST law changes in Russia (Volgograd zone) and South Sudan, plus historical corrections for Australia, Bahamas, Belize, Bermuda, Ghana, Israel, Kenya, Nigeria, Palestine, Seychelles, and Vanuatu.",
      "description": "Notably, the Australia/Currie zone has been corrected to the point where it is identical to Australia/Hobart.",
      "fixedIn": "10.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Forbid marking an identity column as nullable",
      "description": "`GENERATED ... AS IDENTITY` implies `NOT NULL`, so don't allow it to be combined with an explicit `NULL` specification.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Vik Fearing"
      ]
    },
    {
      "title": "Allow `ALTER ROLE/DATABASE ... SET` to set the `role`, `session_authorization`, and `temp_buffers` parameters",
      "description": "Previously, over-eager validity checks might reject these commands, even if the values would have worked when used later. This created a command ordering hazard for dump/reload and upgrade scenarios.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type",
      "description": "This led to a parse tree in which the `COLLATE` appears to be applied to a non-collatable value. While that normally has no real impact (since `COLLATE` has no effect at runtime), it was possible to construct views that would be rejected during dump/reload.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow calling window functions and procedures via the “fast path” wire protocol message",
      "description": "Only plain functions are supported here. While trying to call an aggregate function failed already, calling a window function would crash, and calling a procedure would work only if the procedure did no transaction control.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Extend `pg_identify_object_as_address()` to support event triggers",
      "description": "",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Joel Jacobson"
      ]
    },
    {
      "title": "Fix `to_char()`'s handling of Roman-numeral month format codes with negative intervals",
      "description": "Previously, such cases would usually cause a crash.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Check that the argument of `pg_import_system_collations()` is a valid schema OID",
      "description": "",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix use of uninitialized value while parsing an `` \\{_`m`_,_`n`_\\} `` quantifier in a BRE-mode regular expression",
      "description": "This error could cause the quantifier to act non-greedy, that is behave like an `` {_`m`_,_`n`_}? `` quantifier would do in full regular expressions.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Don't ignore system columns when estimating the number of groups using extended statistics",
      "description": "This led to strange estimates for queries such as `SELECT ... GROUP BY a, b, ctid`.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix",
      "description": "This typically led to a `NaN` selectivity value, causing assertion failures or strange planner behavior.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans",
      "description": "If the page range size used by a BRIN index isn't a power of two, there were corner cases in which a bitmap scan could try to fetch pages past the actual end of the table, leading to “could not open file” errors.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL",
      "description": "This error could lead to subsequent WAL records being written under the wrong timeline ID, leading to consistency problems, or even complete failure to be able to restart the server, later on.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Soumyadeep Chakraborty",
        "Jimmy Yih",
        "Kevin Yeap"
      ]
    },
    {
      "title": "Ensure that locks are released while shutting down a standby server's startup process",
      "description": "When a standby server is shut down while still in recovery, some locks might be left held. This causes assertion failures in debug builds; it's unclear whether any serious consequence could occur in production builds.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix crash when a logical replication worker does `ALTER SUBSCRIPTION REFRESH`",
      "description": "The core code won't do this, but a replica trigger could.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Peter Smith"
      ]
    },
    {
      "title": "Ensure we default to `wal_sync_method` \\= `fdatasync` on recent FreeBSD",
      "description": "FreeBSD 13 supports `open_datasync`, which would normally become the default choice. However, it's unclear whether that is actually an improvement for Postgres, so preserve the existing default for now.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Ensure we finish cleaning up when interrupted while detaching a DSM segment",
      "description": "This error could result in temporary files not being cleaned up promptly after a parallel query.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix memory leak while initializing server's SSL parameters",
      "description": "This is ordinarily insignificant, but if the postmaster is repeatedly sent SIGHUP signals, the leak can build up over time.",
      "fixedIn": "10.17",
      "significant": true,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix assorted minor memory leaks in the server",
      "description": "",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Andres Freund"
      ]
    },
    {
      "title": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received",
      "description": "",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "When initdb prints instructions about how to start the server, make the path shown for pg\\_ctl use backslash separators on Windows",
      "description": "",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Nitin Jadhav"
      ]
    },
    {
      "title": "Fix psql to restore the previous behavior of `` \\connect service=_`something`_ ``",
      "description": "A previous bug fix caused environment variables (such as `PGPORT`) to override entries in the service file in this context. Restore the previous behavior, in which the priority is the other way around.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix race condition in detection of file modification by psql's `\\e` and related commands",
      "description": "A very fast typist could fool the code's file-timestamp-based detection of whether the temporary edit file was changed.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Laurenz Albe"
      ]
    },
    {
      "title": "Fix missed file version check in pg\\_restore",
      "description": "When reading a custom-format archive from a non-seekable source, pg\\_restore neglected to check the archive version. If it was fed a newer archive version than it can support, it would fail messily later on.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add some more checks to pg\\_upgrade for user tables containing non-upgradable data types",
      "description": "Fix detection of some cases where a non-upgradable data type is embedded within a container type (such as an array or range). Also disallow upgrading when user tables contain columns of system-defined composite types, since those types' OIDs are not stable across versions.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_waldump to count `XACT` records correctly when generating per-record statistics",
      "description": "",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Fix `contrib/amcheck` to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set",
      "description": "This is a valid state after `SELECT FOR UPDATE`.",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions",
      "description": "",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix testing of PL/Python for Python 3 on Solaris",
      "description": "",
      "fixedIn": "10.17",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Reject `SELECT ... GROUP BY GROUPING SETS (()) FOR UPDATE`",
      "description": "This should be disallowed, just as `FOR UPDATE` with a plain `GROUP BY` is disallowed, but the test for that failed to handle empty grouping sets correctly. The end result would be a null-pointer dereference in the executor.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reject cases where a query in `WITH` rewrites to just `NOTIFY`",
      "description": "Such cases previously crashed.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `numeric` multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix corner-case errors and loss of precision when raising `numeric` values to very large powers",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix division-by-zero failure in `to_char()` with `EEEE` format and a `numeric` input value less than 10^(-1001)",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix `pg_size_pretty(bigint)` to round negative values consistently with the way it rounds positive ones (and consistently with the `numeric` version)",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Dean Rasheed",
        "David Rowley"
      ]
    },
    {
      "title": "Make `pg_filenode_relation(0, 0)` return NULL rather than failing",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Make `ALTER EXTENSION` lock the extension when adding or removing a member object",
      "description": "The previous coding allowed `ALTER EXTENSION ADD/DROP` to occur concurrently with `DROP EXTENSION`, leading to a crash or corrupt catalog entries.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `ALTER SUBSCRIPTION` to reject an empty slot name",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Japin Li"
      ]
    },
    {
      "title": "Avoid alias conflicts in queries generated for `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "This command failed on materialized views containing columns with certain names, notably `mv` and `newdata`.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Bharath Rupireddy"
      ]
    },
    {
      "title": "Fix `PREPARE TRANSACTION` to check correctly for conflicting session-lifespan and transaction-lifespan locks",
      "description": "A transaction cannot be prepared if it has both session-lifespan and transaction-lifespan locks on the same advisory-lock ID value. This restriction was not fully checked, which could lead to a PANIC during `PREPARE TRANSACTION`.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix misbehavior of `DROP OWNED BY` when the target role is listed more than once in an RLS policy",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Skip unnecessary error tests when removing a role from an RLS policy during `DROP OWNED BY`",
      "description": "Notably, this fixes some cases where it was necessary to be a superuser to use `DROP OWNED BY`.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow index state flags to be updated transactionally",
      "description": "This avoids failures when dealing with index predicates that aren't really immutable. While that's not considered a supported case, the original reason for using a non-transactional update here is long gone, so we may as well change it.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Andrey Lepikhov"
      ]
    },
    {
      "title": "Avoid corrupting the plan cache entry when `CREATE DOMAIN` or `ALTER DOMAIN` appears in a cached plan",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make walsenders show their latest replication commands in `pg_stat_activity`",
      "description": "Previously, a walsender would show its latest SQL command, which was confusing if it's now doing some replication operation instead. Now we show replication-protocol commands on the same footing as SQL commands.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make `pg_settings`.`pending_restart` show as true when the pertinent entry in `postgresql.conf` has been removed",
      "description": "`pending_restart` correctly showed the case where an entry that cannot be changed without a postmaster restart has been modified, but not where the entry had been removed altogether.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix corner-case failure of a new standby to follow a new primary",
      "description": "Under a narrow combination of conditions, the standby could wind up trying to follow the wrong WAL timeline.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Dilip Kumar",
        "Robert Haas"
      ]
    },
    {
      "title": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation",
      "description": "File truncation is irreversible, so it's no longer safe to stop recovery at a point earlier than that record. The corresponding case for transaction commit was fixed years ago, but this one was overlooked.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "In walreceivers, avoid attempting catalog lookups after an error",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Masahiko Sawada",
        "Bharath Rupireddy"
      ]
    },
    {
      "title": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Fujii Masao",
        "Soumyadeep Chakraborty"
      ]
    },
    {
      "title": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Improve checks for violations of replication protocol",
      "description": "Logical replication workers frequently used Asserts to check for cases that could be triggered by invalid or out-of-order replication commands. This seems unwise, so promote these tests to regular error checks.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix error cases and memory leaks in logical decoding of speculative insertions",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Dilip Kumar"
      ]
    },
    {
      "title": "Fix plan cache reference leaks in some error cases in `CREATE TABLE ... AS EXECUTE`",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible race condition when releasing BackgroundWorkerSlots",
      "description": "It's likely that this doesn't fix any observable bug on Intel hardware, but machines with weaker memory ordering rules could have problems.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix latent crash in sorting code",
      "description": "One code path could attempt to free a null pointer. The case appears unreachable in the core server's use of sorting, but perhaps it could be triggered by extensions.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Ronan Dunklau"
      ]
    },
    {
      "title": "Prevent infinite loops in SP-GiST index insertion",
      "description": "In the event that INCLUDE columns take up enough space to prevent a leaf index tuple from ever fitting on a page, the text\\_ops operator class would get into an infinite loop vainly trying to make the tuple fit. While pre-v11 versions don't have INCLUDE columns, back-patch this anti-looping fix to them anyway, as it seems like a good defense against bugs in operator classes.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that SP-GiST index insertion can be terminated by a query cancel request",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Don't abort the process for an out-of-memory failure in libpq's printing functions",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In ecpg, allow the `numeric` value INT\\_MIN (usually -2147483648) to be converted to integer",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "John Naylor"
      ]
    },
    {
      "title": "Avoid “invalid creation date in header” warnings observed when running pg\\_restore on an archive file created in a different time zone",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make pg\\_upgrade carry forward the old installation's `oldestXID` value",
      "description": "Previously, the new installation's `oldestXID` was set to a value old enough to (usually) force immediate anti-wraparound autovacuuming. That's not desirable from a performance standpoint; what's worse, installations using large values of `autovacuum_freeze_max_age` could suffer unwanted forced shutdowns soon after an upgrade.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Bertrand Drouvot"
      ]
    },
    {
      "title": "Extend pg\\_upgrade to detect and warn about extensions that should be upgraded",
      "description": "A script file is now produced containing the `ALTER EXTENSION UPDATE` commands needed to bring extensions up to the versions that are considered default in the new installation.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Avoid problems when switching pg\\_receivewal between compressed and non-compressed WAL storage",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid attempting catalog lookups after an error",
      "description": "While this usually worked, it's not very safe since the error might have been one that made catalog access nonfunctional. A side effect of the fix is that messages about data conversion errors will now mention the query's table and column aliases (if used) rather than the true underlying name of a foreign table or column.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Improve the isolation-test infrastructure",
      "description": "Allow isolation test steps to be annotated to show the expected completion order. This allows getting stable results from otherwise-racy test cases, without the long delays that we previously used (not entirely successfully) to fend off race conditions. Allow non-quoted identifiers as isolation test session/step names (formerly, all such names had to be double-quoted). Detect and warn about unused steps in isolation tests. Improve display of query results in isolation tests. Remove isolationtester's “dry-run” mode. Remove memory leaks in isolationtester itself.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Michael Paquier"
      ]
    },
    {
      "title": "Reduce overhead of cache-clobber testing",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix PL/Python's regression tests to pass with Python 3.10",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Honza Horak"
      ]
    },
    {
      "title": "Make `printf(\"%s\", NULL)` print `(null)` instead of crashing",
      "description": "This should improve server robustness in corner cases, and it syncs our `printf` implementation with common libraries.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect log message when point-in-time recovery stops at a `ROLLBACK PREPARED` record",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Simon Riggs"
      ]
    },
    {
      "title": "Clarify error messages referring to “non-negative” values",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Bharath Rupireddy"
      ]
    },
    {
      "title": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate `libldap_r` library",
      "description": "If there is no `libldap_r` library, we now silently assume that `libldap` is thread-safe.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Adrian Ho",
        "Tom Lane"
      ]
    },
    {
      "title": "Add new make targets `world-bin` and `install-world-bin`",
      "description": "These are the same as `world` and `install-world` respectively, except that they do not build or install the documentation.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Fix make rule for TAP tests (`prove_installcheck`) to work in PGXS usage",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Allow PostgreSQL version 10 to build with ICU 69 and newer",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated",
      "description": "The GSSAPI spec provides for a string pointer and length. It seems that in practice the next byte after the string is usually zero, so that our previous coding didn't actually fail; but we do have a report of AddressSanitizer complaints.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Enable building with GSSAPI on MSVC",
      "description": "Fix various incompatibilities with modern Kerberos builds.",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In MSVC builds, include `--with-pgport` in the set of configure options reported by pg\\_config, if it had been specified",
      "description": "",
      "fixedIn": "10.18",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "If the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\n\nWhen applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix `CREATE INDEX CONCURRENTLY` to wait for the latest prepared transactions",
      "description": "Rows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for `PREPARE TRANSACTION` commands that were still in progress when `CREATE INDEX CONCURRENTLY` checked for them. As before, in installations that have enabled prepared transactions (`max_prepared_transactions` \\> 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "While it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Noah Misch",
        "Andrey Borodin"
      ]
    },
    {
      "title": "Fix `float4` and `float8` hash functions to produce uniform results for NaNs",
      "description": "Since PostgreSQL's floating-point types deem all NaNs to be equal, it's important for the hash functions to produce the same hash code for all bit-patterns that are NaNs according to the IEEE 754 standard. This failed to happen before, meaning that hash indexes and hash-based query plans might produce incorrect results for non-canonical NaN values. (`'-NaN'::float8` is one way to produce such a value on most machines.) It is advisable to reindex hash indexes on floating-point columns, if there is any possibility that they might contain such values.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent data loss during crash recovery of `CREATE TABLESPACE`, when `wal_level` \\= `minimal`",
      "description": "If the server crashed between `CREATE TABLESPACE` and the next checkpoint, replay would fully remove the contents of the new tablespace's directory, relying on subsequent WAL replay to restore everything within that directory. This interacts badly with optimizations that skip writing WAL (one example is `COPY` into a just-created table). Such optimizations are applied only when `wal_level` is `minimal`, which is not the default in v10 and later.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "This oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication",
      "description": "This oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Hou Zhijie",
        "Vignesh C"
      ]
    },
    {
      "title": "Don't discard a cast to the same type with unspecified type modifier",
      "description": "For example, if column `f1` is of type `numeric(18,3)`, the parser used to simply discard a cast like `f1::numeric`, on the grounds that it would have no run-time effect. That's true, but the exposed type of the expression should still be considered to be plain `numeric`, not `numeric(18,3)`. This is important for correctly resolving the type of larger constructs, such as recursive `UNION`s.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow creating an ICU collation if the current database's encoding won't support it",
      "description": "Previously this was allowed, but then the collation could not be referenced because of the way collation lookup works; you could not use the collation, nor even drop it.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power()`",
      "description": "The result could be inaccurate when the first argument is very close to 1.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Avoid regular expression errors with capturing parentheses inside `{0}`",
      "description": "Regular expressions like `(.){0}...\\1` drew “invalid backreference number”. Other regexp engines such as Perl don't complain, though, and for that matter ours doesn't either in some closely related cases. Worse, it could throw an assertion failure instead. Fix it so that no error is thrown and instead the back-reference is silently deemed to never match.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent regular expression back-references from sometimes matching when they shouldn't",
      "description": "The regexp engine was careless about clearing match data for capturing parentheses after rejecting a partial match. This could allow a later back-reference to match in places where it should fail for lack of a defined referent.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix regular expression performance bug with back-references inside iteration nodes",
      "description": "Incorrect back-tracking logic could result in exponential time spent looking for a match. Fortunately the problem is masked in most cases by other optimizations.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect results from `AT TIME ZONE` applied to a `time with time zone` value",
      "description": "The results were incorrect if the target time zone was specified by a dynamic timezone abbreviation (that is, one that is defined as equivalent to a full time zone name, rather than a fixed UTC offset).",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "There are corner cases in which `ANALYZE` will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "This oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Dilip Kumar"
      ]
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "This oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "fixedIn": "10.19",
      "significant": true,
      "contributors": [
        "Kyotaro Horiguchi",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "There was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix detection of a relation that has grown to the maximum allowed length",
      "description": "An attempt to extend a table or index past the limit of 2^32-1 blocks was rejected, but not soon enough to prevent inconsistent internal state from being created.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule",
      "description": "The previous failure to do this could lead to problems such as unsafely choosing a parallel plan.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Greg Nancarrow",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect reporting of permissions failures on extended statistics objects",
      "description": "The code typically produced “cache lookup error” rather than the intended message.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix incorrect snapshot handling in parallel workers",
      "description": "This oversight could lead to misbehavior in parallel queries if the transaction isolation level is less than `REPEATABLE READ`.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Greg Nancarrow"
      ]
    },
    {
      "title": "Ensure that walreceiver processes create all required archive notification files before exiting",
      "description": "If a walreceiver exited exactly at a WAL segment boundary, it failed to make a notification file for the last-received segment, thus delaying archiving of that segment on the standby.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE`",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Masahiko Sawada",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix parser's processing of aggregate `FILTER` clauses",
      "description": "If the `FILTER` expression is a plain boolean column, the semantic level of the aggregate could be mis-determined, leading to not-per-spec behavior. If the `FILTER` expression is itself a boolean-returning aggregate, an error should be thrown but was not, likely resulting in a crash at execution.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export()` or a related function fails",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Ensure that scans of SP-GiST indexes are counted in the statistics views",
      "description": "Incrementing the number-of-index-scans counter was overlooked in the SP-GiST code, although per-tuple counters were advanced correctly.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Recalculate relevant wait intervals if `recovery_min_apply_delay` is changed during recovery",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Soumyadeep Chakraborty",
        "Ashwin Agrawal"
      ]
    },
    {
      "title": "Fix infinite loop if a `simplehash.h` hash table reaches 2^32 elements",
      "description": "It seems unlikely that this bug has been hit in practice, as it would require `work_mem` settings of hundreds of gigabytes for existing uses of `simplehash.h`.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Yura Sokolov"
      ]
    },
    {
      "title": "Reduce memory consumption during calculation of extended statistics",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Justin Pryzby",
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix ecpg to recover correctly after `malloc()` failure while establishing a connection",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine",
      "description": "If the routine does not require an explicit `RETURN`, this usage should be valid, but it was rejected.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove pg\\_ctl's hard-coded limits on the total length of generated commands",
      "description": "For example, this removes a restriction on how many command-line options can be passed through to the postmaster. Individual path names that pg\\_ctl deals with, such as the postmaster executable's name or the data directory name, are still limited to `MAXPGPATH` bytes in most cases.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Phil Krylov"
      ]
    },
    {
      "title": "Fix pg\\_dump to dump non-global default privileges correctly",
      "description": "If a global (unrestricted) `ALTER DEFAULT PRIVILEGES` command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted `ALTER DEFAULT PRIVILEGES` command granted that privilege again for a selected role or schema, pg\\_dump failed to dump the restricted privilege grant correctly.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Neil Chen",
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Make pg\\_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "This oversight was usually pretty harmless, since once pg\\_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "fixedIn": "10.19",
      "significant": true,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Improve pg\\_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type()`",
      "description": "These changes provide only marginal improvement when dumping from a local server, but a dump from a remote server can benefit substantially due to fewer network round-trips.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect filename in pg\\_restore's error message about an invalid large object TOC file",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Daniel Gustafsson"
      ]
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `\"char\"` (not `` char(_`n`_) ``) columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Change `contrib/pg_stat_statements` to read its “query texts” file in units of at most 1GB",
      "description": "Such large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix null-pointer crash when `contrib/postgres_fdw` tries to report a data conversion error",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add spinlock support for the RISC-V architecture",
      "description": "This is essential for reasonable performance on that platform.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Marek Szuba"
      ]
    },
    {
      "title": "Support OpenSSL 3.0.0",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Peter Eisentraut",
        "Daniel Gustafsson",
        "Michael Paquier"
      ]
    },
    {
      "title": "Set correct type identifier on OpenSSL BIO (I/O abstraction) objects created by PostgreSQL",
      "description": "This oversight probably only matters for code that is doing tasks like auditing the OpenSSL installation. But it's nominally a violation of the OpenSSL API, so fix it.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Itamar Gafni"
      ]
    },
    {
      "title": "Make `pg_regexec()` robust against an out-of-range _`searchstart`_ parameter",
      "description": "Return `REG_NOMATCH`, instead of possibly crashing, when _`searchstart`_ is past the end of the string. This case is probably unreachable within core PostgreSQL, but extensions might be more careless about the parameter value.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `GetSharedSecurityLabel()` can be used in a newly-started session that has not yet built its critical relation cache entries",
      "description": "",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Jeff Davis"
      ]
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "When running on Windows, initdb attempts to set the new cluster's `timezone` parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.",
      "description": "Also, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port\\_of\\_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "fixedIn": "10.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix vacuuming of tuples that were updated while key-share locked",
      "description": "In some cases `VACUUM` would fail to remove such tuples even though they are now dead, leading to assorted data corruption scenarios.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix failure to mark a hash index's metapage dirty after adding a new overflow page, potentially leading to index corruption",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Lixian Zou",
        "Amit Kapila"
      ]
    },
    {
      "title": "Ensure that vacuum will always clean up the pending-insertions list of a GIN index",
      "description": "This is necessary to ensure that dead index entries get removed. The old code got it backwards, allowing vacuum to skip the cleanup if some other process were running cleanup concurrently, thus risking invalid entries being left behind in the index.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Fix inadequate buffer locking in some LSN fetches",
      "description": "These errors could result in misbehavior under concurrent load. The potential consequences have not been characterized fully.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Jacob Champion",
        "Asim Praveen",
        "Ashwin Agrawal"
      ]
    },
    {
      "title": "Fix incorrect query results from cases involving flattening of subqueries whose outputs are used in `GROUPING SETS`",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Fix handling of list partitioning constraints for partition keys of boolean or array types",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Avoid unnecessary failure in a query on an inheritance tree that occurs concurrently with some child table being removed from the tree by `ALTER TABLE NO INHERIT`",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix spurious deadlock failures when multiple sessions are running `CREATE INDEX CONCURRENTLY`",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Jeff Janes"
      ]
    },
    {
      "title": "During `VACUUM FULL`, update the table's size fields in `pg_class` sooner",
      "description": "This prevents poor behavior when rebuilding hash indexes on the table, since those use the `pg_class` statistics to govern the initial hash size.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Fix `UNION`/`INTERSECT`/`EXCEPT` over zero columns",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow identity columns on typed tables and partitions",
      "description": "These cases will be treated as unsupported features for now.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix assorted failures to apply the correct default value when inserting into an identity column",
      "description": "In several contexts, notably `COPY` and `ALTER TABLE ADD COLUMN`, the expected default value was not applied and instead a null value was inserted.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Fix failures when an inheritance tree contains foreign child tables",
      "description": "A mix of regular and foreign tables in an inheritance tree resulted in creation of incorrect plans for `UPDATE` and `DELETE` queries. This led to visible failures in some cases, notably when there are row-level triggers on a foreign child table.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Repair failure with correlated sub-`SELECT` inside `VALUES` inside a `LATERAL` subquery",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix “could not devise a query plan for the given query” planner failure for some cases involving nested `UNION ALL` inside a lateral subquery",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow functional dependency statistics to be used for boolean columns",
      "description": "Previously, although extended statistics could be declared and collected on boolean columns, the planner failed to apply them.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid underestimating the number of groups emitted by subqueries containing set-returning functions in their grouping columns",
      "description": "Cases similar to `SELECT DISTINCT unnest(foo)` got a lower output rowcount estimate in 10.0 than they did in earlier releases, possibly resulting in unfavorable plan choices. Restore the prior estimation behavior.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix use of triggers in logical replication workers",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Petr Jelinek"
      ]
    },
    {
      "title": "Fix logical decoding to correctly clean up disk files for crashed transactions",
      "description": "Logical decoding may spill WAL records to disk for transactions generating many WAL records. Normally these files are cleaned up after the transaction's commit or abort record arrives; but if no such record is ever seen, the removal code misbehaved.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Atsushi Torikoshi"
      ]
    },
    {
      "title": "Fix walsender timeout failure and failure to respond to interrupts when processing a large transaction",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Petr Jelinek"
      ]
    },
    {
      "title": "Fix race condition during replication origin drop that could allow the dropping process to wait indefinitely",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow members of the `pg_read_all_stats` role to see walsender statistics in the `pg_stat_replication` view",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Feike Steenbergen"
      ]
    },
    {
      "title": "Show walsenders that are sending base backups as active in the `pg_stat_activity` view",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Fix reporting of `scram-sha-256` authentication method in the `pg_hba_file_rules` view",
      "description": "Previously this was printed as `scram-sha256`, possibly confusing users as to the correct spelling.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix `has_sequence_privilege()` to support `WITH GRANT OPTION` tests, as other privilege-testing functions do",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Joe Conway"
      ]
    },
    {
      "title": "In databases using UTF8 encoding, ignore any XML declaration that asserts a different encoding",
      "description": "We always store XML strings in the database encoding, so allowing libxml to act on a declaration of another encoding gave wrong results. In encodings other than UTF8, we don't promise to support non-ASCII XML data anyway, so retain the previous behavior for bug compatibility. This change affects only `xpath()` and related functions; other XML code paths already acted this way.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Pavel Stehule",
        "Noah Misch"
      ]
    },
    {
      "title": "Provide for forward compatibility with future minor protocol versions",
      "description": "Up to now, PostgreSQL servers simply rejected requests to use protocol versions newer than 3.0, so that there was no functional difference between the major and minor parts of the protocol version number. Allow clients to request versions 3.x without failing, sending back a message showing that the server only understands 3.0\\. This makes no difference at the moment, but back-patching this change should allow speedier introduction of future minor protocol upgrades.",
      "fixedIn": "10.2",
      "significant": true,
      "contributors": [
        "Robert Haas",
        "Badrul Chowdhury"
      ]
    },
    {
      "title": "Allow a client that supports SCRAM channel binding (such as v11 or later libpq) to connect to a v10 server",
      "description": "v10 does not have this feature, and the connection-time negotiation about whether to use it was done incorrectly.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid live-lock in `ConditionVariableBroadcast()`",
      "description": "Given repeatedly-unlucky timing, a process attempting to awaken all waiters for a condition variable could loop indefinitely. Due to the limited usage of condition variables in v10, this affects only parallel index scans and some operations on replication slots.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Thomas Munro"
      ]
    },
    {
      "title": "Clean up waits for condition variables correctly during subtransaction abort",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Ensure that child processes that are waiting for a condition variable will exit promptly if the postmaster process dies",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix crashes in parallel queries using more than one Gather node",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix hang in parallel index scan when processing a deleted or half-dead index page",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Avoid crash if parallel bitmap heap scan is unable to allocate a shared memory segment",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Cope with failure to start a parallel worker process",
      "description": "Parallel query previously tended to hang indefinitely if a worker could not be started, as the result of `fork()` failure or other low-probability problems.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Robert Haas"
      ]
    },
    {
      "title": "Avoid unnecessary failure when no parallel workers can be obtained during parallel query startup",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Fix collection of `EXPLAIN` statistics from parallel workers",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Thomas Munro"
      ]
    },
    {
      "title": "Ensure that query strings passed to parallel workers are correctly null-terminated",
      "description": "This prevents emitting garbage in postmaster log output from such workers.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid unsafe alignment assumptions when working with `__int128`",
      "description": "Typically, compilers assume that `__int128` variables are aligned on 16-byte boundaries, but our memory allocation infrastructure isn't prepared to guarantee that, and increasing the setting of MAXALIGN seems infeasible for multiple reasons. Adjust the code to allow use of `__int128` only when we can tell the compiler to assume lesser alignment. The only known symptom of this problem so far is crashes in some parallel aggregation queries.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent stack-overflow crashes when planning extremely deeply nested set operations (`UNION`/`INTERSECT`/`EXCEPT`)",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid crash during an EvalPlanQual recheck of an indexscan that is the inner child of a merge join",
      "description": "This could only happen during an update or `SELECT FOR UPDATE` of a join, when there is a concurrent update of some selected row.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix crash in autovacuum when extended statistics are defined for a table but can't be computed",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix null-pointer crashes for some types of LDAP URLs appearing in `pg_hba.conf`",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Prevent out-of-memory failures due to excessive growth of simple hash tables",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tomas Vondra",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix sample `INSTR()` functions in the PL/pgSQL documentation",
      "description": "These functions are stated to be Oracle® compatible, but they weren't exactly. In particular, there was a discrepancy in the interpretation of a negative third parameter: Oracle thinks that a negative value indicates the last place where the target substring can begin, whereas our functions took it as the last place where the target can end. Also, Oracle throws an error for a zero or negative fourth parameter, whereas our functions returned zero.\n\nThe sample code has been adjusted to match Oracle's behavior more precisely. Users who have copied this code into their applications may wish to update their copies.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Yugo Nagata",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_dump to make ACL (permissions), comment, and security label entries reliably identifiable in archive output formats",
      "description": "The “tag” portion of an ACL archive entry was usually just the name of the associated object. Make it start with the object type instead, bringing ACLs into line with the convention already used for comment and security label archive entries. Also, fix the comment and security label entries for the whole database, if present, to make their tags start with `DATABASE` so that they also follow this convention. This prevents false matches in code that tries to identify large-object-related entries by seeing if the tag starts with `LARGE OBJECT`. That could have resulted in misclassifying entries as data rather than schema, with undesirable results in a schema-only or data-only dump.\n\nNote that this change has user-visible results in the output of `pg_restore --list`.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Rename pg\\_rewind's `copy_file_range` function to avoid conflict with new Linux system call of that name",
      "description": "This change prevents build failures with newer glibc versions.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "In ecpg, detect indicator arrays that do not have the correct length and report an error",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "David Rader"
      ]
    },
    {
      "title": "Change the behavior of `contrib/cube`'s `cube` `~>` `int` operator to make it compatible with KNN search",
      "description": "The meaning of the second argument (the dimension selector) has been changed to make it predictable which value is selected even when dealing with cubes of varying dimensionalities.\n\nThis is an incompatible change, but since the point of the operator was to be used in KNN searches, it seems rather useless as-is. After installing this update, any expression indexes or materialized views using this operator will need to be reindexed/refreshed.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Avoid triggering a libc assertion in `contrib/hstore`, due to use of `memcpy()` with equal source and destination pointers",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix incorrect display of tuples' null bitmaps in `contrib/pageinspect`",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Maksim Milyutin"
      ]
    },
    {
      "title": "Fix incorrect output from `contrib/pageinspect`'s `hash_page_items()` function",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid “outer pathkeys do not match mergeclauses” planner error when constructing a plan involving a remote join",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid planner failure when there are duplicate `GROUP BY` entries",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Jeevan Chalke"
      ]
    },
    {
      "title": "Provide modern examples of how to auto-start Postgres on macOS",
      "description": "The scripts in `contrib/start-scripts/osx` use infrastructure that's been deprecated for over a decade, and which no longer works at all in macOS releases of the last couple of years. Add a new subdirectory `contrib/start-scripts/macos` containing scripts that use the newer launchd infrastructure.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect selection of configuration-specific libraries for OpenSSL on Windows",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Support linking to MinGW-built versions of libperl",
      "description": "This allows building PL/Perl with some common Perl distributions for Windows.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix MSVC build to test whether 32-bit libperl needs `-D_USE_32BIT_TIME_T`",
      "description": "Available Perl distributions are inconsistent about what they expect, and lack any reliable means of reporting it, so resort to a build-time test on what the library being used actually does.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "On Windows, install the crash dump handler earlier in postmaster startup",
      "description": "This may allow collection of a core dump for some early-startup failures that did not produce a dump before.",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Takayuki Tsunakawa"
      ]
    },
    {
      "title": "On Windows, avoid encoding-conversion-related crashes when emitting messages very early in postmaster startup",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "Takayuki Tsunakawa"
      ]
    },
    {
      "title": "Use our existing Motorola 68K spinlock code on OpenBSD as well as NetBSD",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "David Carlier"
      ]
    },
    {
      "title": "Add support for spinlocks on Motorola 88K",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": [
        "David Carlier"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2018c for DST law changes in Brazil, Sao Tome and Principe, plus historical corrections for Bolivia, Japan, and South Sudan. The `US/Pacific-New` zone has been removed (it was only an alias for `America/Los_Angeles` anyway).",
      "description": "",
      "fixedIn": "10.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "If an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "While the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary",
      "description": "",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "If a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Abhijit Menon-Sen",
        "Tomas Vondra"
      ]
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "The walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction",
      "description": "",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Alex Kingsborough",
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Be sure to `fsync` the `pg_logical/mappings` subdirectory during checkpoints",
      "description": "On some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Nathan Bossart"
      ]
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "A previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows `ANALYZE` to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual `ANALYZE` on the partitioned table if you want to maintain such statistics.)",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Currently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "This restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "The same prohibition already existed for primary key indexes.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Haiying Tang",
        "Hou Zhijie"
      ]
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Concurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tang Haiying",
        "Hou Zhijie"
      ]
    },
    {
      "title": "Avoid leaking memory during `REASSIGN OWNED BY` operations that reassign ownership of many objects",
      "description": "",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "A whole-row variable would be printed as “var.\\*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "These errors should affect only debug builds, not production.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Simon Riggs",
        "Michael Paquier",
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib",
      "description": "",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid calling `strerror` from libpq's `PQcancel` function",
      "description": "`PQcancel` is supposed to be safe to call from a signal handler, but `strerror` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make psql's `\\password` command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "This agrees with the documented behavior, and avoids probable permissions failure if `SET ROLE` or `SET SESSION AUTHORIZATION` has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext()` from a control-C signal handler",
      "description": "While no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow canceling the initial password prompt in pg\\_receivewal and pg\\_recvlogical",
      "description": "Previously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Nathan Bossart"
      ]
    },
    {
      "title": "Fix pg\\_dump's dump ordering for user-defined casts",
      "description": "In rare cases, the output script might refer to a user-defined cast before it had been created.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible mis-reporting of errors in pg\\_dump and pg\\_basebackup",
      "description": "The previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix results of index-only scans on `contrib/btree_gist` indexes on `` char(_`N`_) `` columns",
      "description": "Index-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store `` char(_`N`_) `` values with the expected amount of space padding. The behavior of such an index will not change immediately unless you `REINDEX` it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "With Python 3.10, this avoids configure\\-time warnings about distutils being deprecated and scheduled for removal in Python 3.12\\. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Peter Eisentraut",
        "Tom Lane",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later",
      "description": "",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Victor Wagner"
      ]
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later",
      "description": "",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add support for building with Visual Studio 2022",
      "description": "",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Hans Buschmann"
      ]
    },
    {
      "title": "Allow the `.bat` wrapper scripts in our MSVC build system to be called without first changing into their directory",
      "description": "",
      "fixedIn": "10.20",
      "significant": false,
      "contributors": [
        "Anton Voloshin",
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "The column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\n\nIn cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type `record` to begin with and there's no issue.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect output for types `timestamptz` and `timetz` in `table_to_xmlschema()` and allied functions",
      "description": "The xmlschema output for these types included a malformed regular expression.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Renan Soares Lopes"
      ]
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns",
      "description": "",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix planner errors for `GROUPING()` constructs that reference outer query levels",
      "description": "",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Richard Guo",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "The previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering",
      "description": "",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Aliaksandr Kalenik"
      ]
    },
    {
      "title": "Fix `ALTER FUNCTION` to support changing a function's parallelism property and its `SET`\\-variable list in the same command",
      "description": "The parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix mis-sorting of table rows when `CLUSTER`ing using an index whose leading key is an expression",
      "description": "The table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Peter Geoghegan",
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix race condition between `DROP TABLESPACE` and checkpointing",
      "description": "The checkpoint forced by `DROP TABLESPACE` could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Nathan Bossart"
      ]
    },
    {
      "title": "Fix possible trouble in crash recovery after a `TRUNCATE` command that overlaps a checkpoint",
      "description": "`TRUNCATE` must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Heikki Linnakangas",
        "Robert Haas"
      ]
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Temporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record",
      "description": "",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Sami Imseih"
      ]
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "With unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the `max_sync_workers_per_subscription` limit",
      "description": "Faulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Otherwise subscribers cannot see the values and will fail to replicate the update.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Dilip Kumar",
        "Amit Kapila"
      ]
    },
    {
      "title": "Improve logical replication subscriber's error message for an unsupported relation kind",
      "description": "v13 and later servers support publishing partitioned tables. Older server versions cannot handle subscribing to such a table, and they gave a very misleading error message: “table XYZ not found on publisher”. Arrange to deliver a more on-point message.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Perl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "This change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6\\. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "David Steele"
      ]
    },
    {
      "title": "Make pg\\_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "pg\\_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg\\_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `contrib/pageinspect` functions cope with all-zero pages",
      "description": "This is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In `contrib/pageinspect`, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "These changes make it less likely that the module will crash on bad data.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Justin Pryzby",
        "Julien Rouhaud"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "This fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Ronan Dunklau"
      ]
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Most of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Andres Freund",
        "Zhihong Yu"
      ]
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions",
      "description": "",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible build failure of pg\\_dumpall on Windows, when not using MSVC to build",
      "description": "",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "This adapts the build process to work on recent MSys tool chains.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "For some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine.",
      "description": "",
      "fixedIn": "10.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix replay of `CREATE DATABASE` WAL records on standby servers",
      "description": "Standby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Asim R Praveen",
        "Paul Guo"
      ]
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Normally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the `CREATE DATABASE` replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Michael Paquier",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "In extended query protocol, force an immediate commit after `CREATE DATABASE` and other commands that can't run in a transaction block",
      "description": "If the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "`TransactionIdIsInProgress` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Simon Riggs"
      ]
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Richard Guo"
      ]
    },
    {
      "title": "Prevent `pg_stat_get_subscription()` from possibly returning an extra row containing garbage values",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Kuntal Ghosh"
      ]
    },
    {
      "title": "Ensure that `pg_stop_backup()` cleans up session state properly",
      "description": "This omission could lead to assertion failures or crashes later in the session.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "In corner cases, a misleading error could be reported.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Reject `ROW()` expressions and functions in `FROM` that have too many columns",
      "description": "Cases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "When decompiling a view or rule, show a `SELECT` output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "Previously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made",
      "description": "This oversight could lead to dump/reload or pg\\_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "If `CREATE OPERATOR CLASS` results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Previously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Prevent triggering of standby's `wal_receiver_timeout` during logical replication of large transactions",
      "description": "If a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Wang Wei",
        "Amit Kapila"
      ]
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix memory leak in logical replication subscribers",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Hou Zhijie"
      ]
    },
    {
      "title": "Ignore heap-rewrite temporary tables for materialized views in logical replication",
      "description": "A `FOR ALL TABLES` publication will try to publish temporary tables if left to its own devices. There is a heuristic to suppress these, but it failed to cover internal temporary tables created while rewriting a materialized view. This created a risk of “logical replication target relation ... does not exist” failures during `REFRESH MATERIALIZED VIEW`.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Euler Taveira"
      ]
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Such cases could result in harmless warning messages.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Previously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Steve Chavez"
      ]
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Haiyang Wang"
      ]
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "In the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Certain operations such as `EXEC SQL PREPARE` would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale()` calls",
      "description": "Allocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "In psql's `\\watch` command, echo a newline after cancellation with control-C",
      "description": "This prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Pavel Stehule"
      ]
    },
    {
      "title": "Fix `contrib/pg_stat_statements` to avoid problems with very large query-text files on 32-bit platforms",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `contrib/postgres_fdw` sends constants of `regconfig` and other `reg*` types with proper schema qualification",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "This avoids problems when a signal interrupts `posix_fallocate()`.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open()`",
      "description": "This avoids a possible crash on Solaris.",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Dagfinn Ilmari MannsÃ¥ker"
      ]
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap\\_r library when multiple OpenLDAP installations are present while building PostgreSQL",
      "description": "",
      "fixedIn": "10.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `VACUUM` to press on if an attempted page deletion in a btree index fails to find the page's parent downlink",
      "description": "Rather than throwing an error, just log the issue and continue without deleting the empty page. Previously, a buggy operator class or corrupted index could indefinitely prevent completion of vacuuming of the index, eventually leading to transaction wraparound problems.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an `INSERT` on an updatable view",
      "description": "This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Repair rare failure of MULTIEXPR\\_SUBLINK subplans in inherited updates",
      "description": "Use of the syntax `UPDATE tab SET (c1, ...) = (SELECT ...)` with an inherited or partitioned target table could result in failure if the child tables are sufficiently dissimilar. This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid flattening `FROM`\\-less subqueries when the outer query has grouping sets",
      "description": "This oversight could lead to assertion failures or planner errors such as “variable not found in subplan target list”.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "When a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Dilip Kumar",
        "Robert Haas"
      ]
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Matthias van de Meent",
        "Zhang Mingli"
      ]
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Masahiko Sawada",
        "Kuroda Hayato"
      ]
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "This ameliorates problems with slow shutdown of replication workers.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "If a syntax error occurred in a SQL-language or PL/pgSQL-language `CREATE FUNCTION` or `DO` command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Maxim Orlov",
        "Anton Melnikov",
        "Masahiko Sawada",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "If a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "If the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Olly Betts",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Improper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add some more defenses against recursion till stack overrun",
      "description": "",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Richard Guo",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "The lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Reid Thompson"
      ]
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "There's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()` and `PQisnonblocking()` didn't get that memo, so fix them.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Daniele Varrazzo",
        "Tom Lane"
      ]
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple `varchar` or `bytea` variables are declared in the same declaration",
      "description": "For example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only `str1` was marked `static`.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Andrey Sokolov"
      ]
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg\\_basebackup",
      "description": "Allow the remote path in `--tablespace-mapping` to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "In pg\\_stat\\_statements, fix access to already-freed memory",
      "description": "This occurred if pg\\_stat\\_statements tracked a `ROLLBACK` command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "zhaoqigui"
      ]
    },
    {
      "title": "In postgres\\_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "This avoids “variable not found in subplan target list” errors in rare cases.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Richard Guo",
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create()` function",
      "description": "The uuid-ossp module expects libc's `uuid_create()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()`.)",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Nazir Bilal Yavuz"
      ]
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Add `PostgreSQL/Test/Cluster.pm` and `PostgreSQL/Test/Utils.pm` to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "This avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Tom Lane"
      ]
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set()` for spinlocks on any machine",
      "description": "This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS",
      "description": "",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later",
      "description": "",
      "fixedIn": "10.23",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.",
      "description": "Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala\\_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan\\_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy\\_River, America/Thunder\\_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n\nThese zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of `timestamptz` display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n\nIt is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "fixedIn": "10.23",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Prevent logical replication from trying to ship changes for unpublishable relations",
      "description": "A publication marked `FOR ALL TABLES` would incorrectly ship changes in materialized views and `information_schema` tables, which are supposed to be omitted from the change stream.",
      "fixedIn": "10.3",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Fix misbehavior of concurrent-update rechecks with CTE references appearing in subplans",
      "description": "If a CTE (`WITH` clause reference) is used in an InitPlan or SubPlan, and the query requires a recheck due to trying to update or lock a concurrently-updated row, incorrect results could be obtained.",
      "fixedIn": "10.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix planner failures with overlapping mergejoin clauses in an outer join",
      "description": "These mistakes led to “left and right pathkeys do not match in mergejoin” or “outer pathkeys do not match mergeclauses” planner errors in corner cases.",
      "fixedIn": "10.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Repair pg\\_upgrade's failure to preserve `relfrozenxid` for materialized views",
      "description": "This oversight could lead to data corruption in materialized views after an upgrade, manifesting as “could not access status of transaction” or “found xmin from before relfrozenxid” errors. The problem would be more likely to occur in seldom-refreshed materialized views, or ones that were maintained only with `REFRESH MATERIALIZED VIEW CONCURRENTLY`.\n\nIf such corruption is observed, it can be repaired by refreshing the materialized view (without `CONCURRENTLY`).",
      "fixedIn": "10.3",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix incorrect pg\\_dump output for some non-default sequence limit values",
      "description": "",
      "fixedIn": "10.3",
      "significant": false,
      "contributors": [
        "Alexey Bashtanov"
      ]
    },
    {
      "title": "Fix pg\\_dump's mishandling of `STATISTICS` objects",
      "description": "An extended statistics object's schema was mislabeled in the dump's table of contents, possibly leading to the wrong results in a schema-selective restore. Its ownership was not correctly restored, either. Also, change the logic so that statistics objects are dumped/restored, or not, as independent objects rather than tying them to the dump/restore decision for the table they are on. The original definition could not scale to the planned future extension to cross-table statistics.",
      "fixedIn": "10.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect reporting of PL/Python function names in error `CONTEXT` stacks",
      "description": "An error occurring within a nested PL/Python function call (that is, one reached via a SPI query from another PL/Python function) would result in a stack trace showing the inner function's name twice, rather than the expected results. Also, an error in a nested PL/Python `DO` block could result in a null pointer dereference crash on some platforms.",
      "fixedIn": "10.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow `contrib/auto_explain`'s `log_min_duration` setting to range up to `INT_MAX`, or about 24 days instead of 35 minutes",
      "description": "",
      "fixedIn": "10.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Mark assorted GUC variables as `PGDLLIMPORT`, to ease porting extension modules to Windows",
      "description": "",
      "fixedIn": "10.3",
      "significant": false,
      "contributors": [
        "Metin Doslu"
      ]
    },
    {
      "title": "Fix incorrect volatility markings on a few built-in functions",
      "description": "The functions `query_to_xml`, `cursor_to_xml`, `cursor_to_xmlschema`, `query_to_xmlschema`, and `query_to_xml_and_xmlschema` should be marked volatile because they execute user-supplied queries that might contain volatile operations. They were not, leading to a risk of incorrect query optimization. This has been repaired for new installations by correcting the initial catalog data, but existing installations will continue to contain the incorrect markings. Practical use of these functions seems to pose little hazard, but in case of trouble, it can be fixed by manually updating these functions' `pg_proc` entries, for example `ALTER FUNCTION pg_catalog.query_to_xml(text, boolean, boolean, text) VOLATILE`. (Note that that will need to be done in each database of the installation.) Another option is to pg\\_upgrade the database to a version containing the corrected initial data.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect parallel-safety markings on a few built-in functions",
      "description": "The functions `brin_summarize_new_values`, `brin_summarize_range`, `brin_desummarize_range`, `gin_clean_pending_list`, `cursor_to_xml`, `cursor_to_xmlschema`, `ts_rewrite`, `ts_stat`, `binary_upgrade_create_empty_extension`, and `pg_import_system_collations` should be marked parallel-unsafe; some because they perform database modifications directly, and others because they execute user-supplied queries that might do so. They were marked parallel-restricted instead, leading to a risk of unexpected query errors. This has been repaired for new installations by correcting the initial catalog data, but existing installations will continue to contain the incorrect markings. Practical use of these functions seems to pose little hazard unless `force_parallel_mode` is turned on. In case of trouble, it can be fixed by manually updating these functions' `pg_proc` entries, for example `ALTER FUNCTION pg_catalog.brin_summarize_new_values(regclass) PARALLEL UNSAFE`. (Note that that will need to be done in each database of the installation.) Another option is to pg\\_upgrade the database to a version containing the corrected initial data.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid re-using TOAST value OIDs that match dead-but-not-yet-vacuumed TOAST entries",
      "description": "Once the OID counter has wrapped around, it's possible to assign a TOAST value whose OID matches a previously deleted entry in the same TOAST table. If that entry were not yet vacuumed away, this resulted in “unexpected chunk number 0 (expected 1) for toast value _`nnnnn`_” errors, which would persist until the dead entry was removed by `VACUUM`. Fix by not selecting such OIDs when creating a new TOAST entry.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Pavan Deolasee"
      ]
    },
    {
      "title": "Correctly enforce any `CHECK` constraints on individual partitions during `COPY` to a partitioned table",
      "description": "Previously, only constraints declared for the partitioned table as a whole were checked.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Accept `TRUE` and `FALSE` as partition bound values",
      "description": "Previously, only string-literal values were accepted for a boolean partitioning column. But then pg\\_dump would print such values as `TRUE` or `FALSE`, leading to dump/reload failures.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix memory management for partition key comparison functions",
      "description": "This error could lead to crashes when using user-defined operator classes for partition keys.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "Amit Langote"
      ]
    },
    {
      "title": "Fix possible crash when a query inserts tuples in several partitions of a partitioned table, and those partitions don't have identical row types",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Etsuro Fujita",
        "Amit Langote"
      ]
    },
    {
      "title": "Change `ANALYZE`'s algorithm for updating `pg_class`.`reltuples`",
      "description": "Previously, pages not actually scanned by `ANALYZE` were assumed to retain their old tuple density. In a large table where `ANALYZE` samples only a small fraction of the pages, this meant that the overall tuple density estimate could not change very much, so that `reltuples` would change nearly proportionally to changes in the table's physical size (`relpages`) regardless of what was actually happening in the table. This has been observed to result in `reltuples` becoming so much larger than reality as to effectively shut off autovacuuming. To fix, assume that `ANALYZE`'s sample is a statistically unbiased sample of the table (as it should be), and just extrapolate the density observed within those pages to the whole table.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "David Gould"
      ]
    },
    {
      "title": "Include extended-statistics objects in the set of table properties duplicated by `CREATE TABLE ... LIKE ... INCLUDING ALL`",
      "description": "Also add an `INCLUDING STATISTICS` option, to allow finer-grained control over whether this happens.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Fix `CREATE TABLE ... LIKE` with `bigint` identity columns",
      "description": "On platforms where `long` is 32 bits (which includes 64-bit Windows as well as most 32-bit machines), copied sequence parameters would be truncated to 32 bits.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid deadlocks in concurrent `CREATE INDEX CONCURRENTLY` commands that are run under `SERIALIZABLE` or `REPEATABLE READ` transaction isolation",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible slow execution of `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix `UPDATE/DELETE ... WHERE CURRENT OF` to not fail when the referenced cursor uses an index-only-scan plan",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Yugo Nagata",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect planning of join clauses pushed into parameterized paths",
      "description": "This error could result in misclassifying a condition as a “join filter” for an outer join when it should be a plain “filter” condition, leading to incorrect join output.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possibly incorrect generation of an index-only-scan plan when the same table column appears in multiple index columns, and only some of those index columns use operator classes that can return the column value",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Fix misoptimization of `CHECK` constraints having provably-NULL subclauses of top-level `AND`/`OR` conditions",
      "description": "This could, for example, allow constraint exclusion to exclude a child table that should not be excluded from a query.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Dean Rasheed"
      ]
    },
    {
      "title": "Prevent planner crash when a query has multiple `GROUPING SETS`, none of which can be implemented by sorting",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix executor crash due to double free in some `GROUPING SETS` usages",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix misexecution of self-joins on transition tables",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid crash if a table rewrite event trigger is added concurrently with a command that could call such a trigger",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "Andrew Gierth",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid failure if a query-cancel or session-termination interrupt occurs while committing a prepared transaction",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Stas Kelvich"
      ]
    },
    {
      "title": "Fix query-lifespan memory leakage in repeatedly executed hash joins",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible leak or double free of visibility map buffer pins",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Avoid spuriously marking pages as all-visible",
      "description": "This could happen if some tuples were locked (but not deleted). While queries would still function correctly, vacuum would normally ignore such pages, with the long-term effect that the tuples were never frozen. In recent releases this would eventually result in errors such as “found multixact _`nnnnn`_ from before relminmxid _`nnnnn`_”.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Dan Wood",
        "Pavan Deolasee",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix overly strict sanity check in `heap_prepare_freeze_tuple`",
      "description": "This could result in incorrect “cannot freeze committed xmax” failures in databases that have been pg\\_upgrade'd from 9.2 or earlier.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Prevent dangling-pointer dereference when a C-coded before-update row trigger returns the “old” tuple",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Rushabh Lathia"
      ]
    },
    {
      "title": "Reduce locking during autovacuum worker scheduling",
      "description": "The previous behavior caused drastic loss of potential worker concurrency in databases with many tables.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Jeff Janes"
      ]
    },
    {
      "title": "Ensure client hostname is copied while copying `pg_stat_activity` data to local memory",
      "description": "Previously the supposedly-local snapshot contained a pointer into shared memory, allowing the client hostname column to change unexpectedly if any existing session disconnected.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Edmund Horner"
      ]
    },
    {
      "title": "Handle `pg_stat_activity` information for auxiliary processes correctly",
      "description": "The `application_name`, `client_hostname`, and `query` fields might show incorrect data for such processes.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Edmund Horner"
      ]
    },
    {
      "title": "Fix incorrect processing of multiple compound affixes in `ispell` dictionaries",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Arthur Zakirov"
      ]
    },
    {
      "title": "Fix collation-aware searches (that is, indexscans using inequality operators) in SP-GiST indexes on text columns",
      "description": "Such searches would return the wrong set of rows in most non-C locales.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent query-lifespan memory leakage with SP-GiST operator classes that use traversal values",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Anton Dignös"
      ]
    },
    {
      "title": "Count the number of index tuples correctly during initial build of an SP-GiST index",
      "description": "Previously, the tuple count was reported to be the same as that of the underlying table, which is wrong if the index is partial.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Count the number of index tuples correctly during vacuuming of a GiST index",
      "description": "Previously it reported the estimated number of heap tuples, which might be inaccurate, and is certainly wrong if the index is partial.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "Fix a corner case where a streaming standby gets stuck at a WAL continuation record",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "In logical decoding, avoid possible double processing of WAL data when a walsender restarts",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Craig Ringer"
      ]
    },
    {
      "title": "Fix logical replication to not assume that type OIDs match between the local and remote servers",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Allow `scalarltsel` and `scalargtsel` to be used on non-core datatypes",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Reduce libpq's memory consumption when a server error is reported after a large amount of query output has been collected",
      "description": "Discard the previous output before, not after, processing the error message. On some platforms, notably Linux, this can make a difference in the application's subsequent memory footprint.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix double-free crashes in ecpg",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Patrick Krecker",
        "Jeevan Ladhe"
      ]
    },
    {
      "title": "Fix ecpg to handle `long long int` variables correctly in MSVC builds",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Michael Meskes",
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix mis-quoting of values for list-valued GUC variables in dumps",
      "description": "The `local_preload_libraries`, `session_preload_libraries`, `shared_preload_libraries`, and `temp_tablespaces` variables were not correctly quoted in pg\\_dump output. This would cause problems if settings for these variables appeared in `CREATE FUNCTION ... SET` or `ALTER DATABASE/ROLE ... SET` clauses.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_recvlogical to not fail against pre-v10 PostgreSQL servers",
      "description": "A previous fix caused pg\\_recvlogical to issue a command regardless of server version, but it should only be issued to v10 and later servers.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Ensure that pg\\_rewind deletes files on the target server if they are deleted from the source server during the run",
      "description": "Failure to do this could result in data inconsistency on the target, particularly if the file in question is a WAL segment.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Takayuki Tsunakawa"
      ]
    },
    {
      "title": "Fix pg\\_rewind to handle tables in non-default tablespaces correctly",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Takayuki Tsunakawa"
      ]
    },
    {
      "title": "Fix overflow handling in PL/pgSQL integer `FOR` loops",
      "description": "The previous coding failed to detect overflow of the loop variable on some non-gcc compilers, leading to an infinite loop.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Adjust PL/Python regression tests to pass under Python 3.7",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Support testing PL/Python and related modules when building with Python 3 and MSVC",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Fix errors in initial build of `contrib/bloom` indexes",
      "description": "Fix possible omission of the table's last tuple from the index. Count the number of index tuples correctly, in case it is a partial index.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tomas Vondra",
        "Tom Lane"
      ]
    },
    {
      "title": "Rename internal `b64_encode` and `b64_decode` functions to avoid conflict with Solaris 11.4 built-in functions",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Rainer Orth"
      ]
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2018e",
      "description": "This fixes the zic timezone data compiler to cope with negative daylight-savings offsets. While the PostgreSQL project will not immediately ship such timezone data, zic might be used with timezone data obtained directly from IANA, so it seems prudent to update zic now.",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2018d for DST law changes in Palestine and Antarctica (Casey Station), plus historical corrections for Portugal and its colonies, as well as Enderbury, Jamaica, Turks & Caicos Islands, and Uruguay.",
      "description": "",
      "fixedIn": "10.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that updates to the `relfrozenxid` and `relminmxid` values for “nailed” system catalogs are processed in a timely fashion",
      "description": "Overoptimistic caching rules could prevent these updates from being seen by other sessions, leading to spurious errors and/or data corruption. The problem was significantly worse for shared catalogs, such as `pg_authid`, because the stale cache data could persist into new sessions as well as existing ones.",
      "fixedIn": "10.5",
      "significant": true,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix case where a freshly-promoted standby crashes before having completed its first post-recovery checkpoint",
      "description": "This led to a situation where the server did not think it had reached a consistent database state during subsequent WAL replay, preventing restart.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Kyotaro Horiguchi",
        "Pavan Deolasee",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Avoid emitting a bogus WAL record when recycling an all-zero btree page",
      "description": "This mistake has been seen to cause assertion failures, and potentially it could result in unnecessary query cancellations on hot standby servers.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "During WAL replay, guard against corrupted record lengths exceeding 1GB",
      "description": "Treat such a case as corrupt data. Previously, the code would try to allocate space and get a hard error, making recovery impossible.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "When ending recovery, delay writing the timeline history file as long as possible",
      "description": "This avoids some situations where a failure during recovery cleanup (such as a problem with a two-phase state file) led to inconsistent timeline state on-disk.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Improve performance of WAL replay for transactions that drop many relations",
      "description": "This change reduces the number of times that shared buffers are scanned, so that it is of most benefit when that setting is large.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Improve performance of lock releasing in standby server WAL replay",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Make logical WAL senders report streaming state correctly",
      "description": "The code previously mis-detected whether or not it had caught up with the upstream server.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Simon Riggs",
        "Sawada Masahiko"
      ]
    },
    {
      "title": "Ensure that a snapshot is provided when executing data type input functions in logical replication subscribers",
      "description": "This omission led to failures in some cases, such as domains with constraints using SQL-language functions.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Minh-Quan Tran",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix bugs in snapshot handling during logical decoding, allowing wrong decoding results in rare cases",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Arseny Sher",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Add subtransaction handling in logical-replication table synchronization workers",
      "description": "Previously, table synchronization could misbehave if any subtransactions were aborted after modifying a table being synchronized.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Amit Khandekar",
        "Robert Haas"
      ]
    },
    {
      "title": "Ensure a table's cached index list is correctly rebuilt after an index creation fails partway through",
      "description": "Previously, the failed index's OID could remain in the list, causing problems later in the same session.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix mishandling of empty uncompressed posting list pages in GIN indexes",
      "description": "This could result in an assertion failure after pg\\_upgrade of a pre-9.4 GIN index (9.4 and later will not create such pages).",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Sivasubramanian Ramasubramanian",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Pad arrays of unnamed POSIX semaphores to reduce cache line sharing",
      "description": "This reduces contention on many-CPU systems, fixing a performance regression (compared to previous releases) on Linux and FreeBSD.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Ensure that a process doing a parallel index scan will respond to signals",
      "description": "Previously, parallel workers could get stuck waiting for a lock on an index page, and not notice requests to abort the query.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Ensure that `VACUUM` will respond to signals within btree page deletion loops",
      "description": "Corrupted btree indexes could result in an infinite loop here, and that previously wasn't interruptible without forcing a crash.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix hash-join costing mistake introduced with inner\\_unique optimization",
      "description": "This could lead to bad plan choices in situations where that optimization was applicable.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Fix misoptimization of equivalence classes involving composite-type columns",
      "description": "This resulted in failure to recognize that an index on a composite column could provide the sort order needed for a mergejoin on that column.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix planner to avoid “ORDER/GROUP BY expression not found in targetlist” errors in some queries with set-returning functions",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix handling of partition keys whose data type uses a polymorphic btree operator class, such as arrays",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix SQL-standard `FETCH FIRST` syntax to allow parameters (`` $_`n`_ ``), as the standard expects",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Remove undocumented restriction against duplicate partition key columns",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Yugo Nagata"
      ]
    },
    {
      "title": "Disallow temporary tables from being partitions of non-temporary tables",
      "description": "While previously allowed, this case didn't work reliably.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix `EXPLAIN`'s accounting for resource usage, particularly buffer accesses, in parallel workers",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Robert Haas"
      ]
    },
    {
      "title": "Fix `SHOW ALL` to show all settings to roles that are members of `pg_read_all_settings`, and also allow such roles to see source filename and line number in the `pg_settings` view",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Laurenz Albe",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix failure to schema-qualify some object names in `getObjectDescription` and `getObjectIdentity` output",
      "description": "Names of collations, conversions, text search objects, publication relations, and extended statistics objects were not schema-qualified when they should be.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `CREATE AGGREGATE` type checking so that parallelism support functions can be attached to variadic aggregates",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Alexey Bashtanov"
      ]
    },
    {
      "title": "Widen `COPY FROM`'s current-line-number counter from 32 to 64 bits",
      "description": "This avoids two problems with input exceeding 4G lines: `COPY FROM WITH HEADER` would drop a line every 4G lines, not only the first line, and error reports could show a wrong line number.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Allow replication slots to be dropped in single-user mode",
      "description": "This use-case was accidentally broken in release 10.0.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix incorrect results from `variance(int4)` and related aggregates when run in parallel aggregation mode",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Process `TEXT` and `CDATA` nodes correctly in `xmltable()` column expressions",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Markus Winand"
      ]
    },
    {
      "title": "Cope with possible failure of OpenSSL's `RAND_bytes()` function",
      "description": "Under rare circumstances, this oversight could result in “could not generate random cancel key” failures that could only be resolved by restarting the postmaster.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Dean Rasheed",
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix libpq's handling of some cases where `hostaddr` is specified",
      "description": "`PQhost()` gave misleading or incorrect results in some cases. Now, it uniformly returns the host name if specified, or the host address if only that is specified, or the default host name (typically `/tmp` or `localhost`) if both parameters are omitted.\n\nAlso, the wrong value might be compared to the server name when verifying an SSL certificate.\n\nAlso, the wrong value might be compared to the host name field in `~/.pgpass`. Now, that field is compared to the host name if specified, or the host address if only that is specified, or `localhost` if both parameters are omitted.\n\nAlso, an incorrect error message was reported for an unparseable `hostaddr` value.\n\nAlso, when the `host`, `hostaddr`, or `port` parameters contain comma-separated lists, libpq is now more careful to treat empty elements of a list as selecting the default behavior.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Hari Babu",
        "Tom Lane",
        "Robert Haas"
      ]
    },
    {
      "title": "Add a string freeing function to ecpg's `pgtypes` library, so that cross-module memory management problems can be avoided on Windows",
      "description": "On Windows, crashes can ensue if the `free` call for a given chunk of memory is not made from the same DLL that `malloc`'ed the memory. The `pgtypes` library sometimes returns strings that it expects the caller to free, making it impossible to follow this rule. Add a `PGTYPESchar_free()` function that just wraps `free`, allowing applications to follow this rule.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Takayuki Tsunakawa"
      ]
    },
    {
      "title": "Fix ecpg's support for `long long` variables on Windows, as well as other platforms that declare `strtoll`/`strtoull` nonstandardly or not at all",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Dang Minh Huong",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix misidentification of SQL statement type in PL/pgSQL, when a rule change causes a change in the semantics of a statement intra-session",
      "description": "This error led to assertion failures, or in rare cases, failure to enforce the `INTO STRICT` option as expected.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix password prompting in client programs so that echo is properly disabled on Windows when `stdin` is not the terminal",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Matthew Stickney"
      ]
    },
    {
      "title": "Further fix mis-quoting of values for list-valued GUC variables in dumps",
      "description": "The previous fix for quoting of `search_path` and other list-valued variables in pg\\_dump output turned out to misbehave for empty-string list elements, and it risked truncation of long file paths.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_dump's failure to dump `REPLICA IDENTITY` properties for constraint indexes",
      "description": "Manually created unique indexes were properly marked, but not those created by declaring `UNIQUE` or `PRIMARY KEY` constraints.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make pg\\_upgrade check that the old server was shut down cleanly",
      "description": "The previous check could be fooled by an immediate-mode shutdown.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Fix `contrib/hstore_plperl` to look through Perl scalar references, and to not crash if it doesn't find a hash reference where it expects one",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix crash in `contrib/ltree`'s `lca()` function when the input array is empty",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Pierre Ducroquet"
      ]
    },
    {
      "title": "Fix various error-handling code paths in which an incorrect error code might be reported",
      "description": "",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Tom Lane",
        "Magnus Hagander"
      ]
    },
    {
      "title": "Rearrange makefiles to ensure that programs link to freshly-built libraries (such as `libpq.so`) rather than ones that might exist in the system library directories",
      "description": "This avoids problems when building on platforms that supply old copies of PostgreSQL libraries.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2018e for DST law changes in North Korea, plus historical corrections for Czechoslovakia.",
      "description": "This update includes a redefinition of “daylight savings” in Ireland, as well as for some past years in Namibia and Czechoslovakia. In those jurisdictions, legally standard time is observed in summer, and daylight savings time in winter, so that the daylight savings offset is one hour behind standard time not one hour ahead. This does not affect either the actual UTC offset or the timezone abbreviations in use; the only known effect is that the `is_dst` column in the `pg_timezone_names` view will now be true in winter and false in summer in these cases.",
      "fixedIn": "10.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case failures in `` has_ _`foo`__privilege() `` family of functions",
      "description": "Return NULL rather than throwing an error when an invalid object OID is provided. Some of these functions got that right already, but not all. `has_column_privilege()` was additionally capable of crashing on some platforms.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `pg_get_partition_constraintdef()` to return NULL rather than fail when passed an invalid relation OID",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid O(N^2) slowdown in regular expression match/split functions on long strings",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix parsing of standard multi-character operators that are immediately followed by a comment or `+` or `-`",
      "description": "This oversight could lead to parse errors, or to incorrect assignment of precedence.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Avoid O(N^3) slowdown in lexer for long strings of `+` or `-` characters",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix mis-execution of SubPlans when the outer query is being scanned backwards",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix failure of `UPDATE/DELETE ... WHERE CURRENT OF ...` after rewinding the referenced cursor",
      "description": "A cursor that scans multiple relations (particularly an inheritance tree) could produce wrong behavior if rewound to an earlier relation.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `EvalPlanQual` to handle conditionally-executed InitPlans properly",
      "description": "This resulted in hard-to-reproduce crashes or wrong answers in concurrent updates, if they contained code such as an uncorrelated sub-`SELECT` inside a `CASE` construct.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent creation of a partition in a trigger attached to its parent table",
      "description": "Ideally we'd allow that, but for the moment it has to be blocked to avoid crashes.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix problems with applying `ON COMMIT DELETE ROWS` to a partitioned temporary table",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix character-class checks to not fail on Windows for Unicode characters above U+FFFF",
      "description": "This bug affected full-text-search operations, as well as `contrib/ltree` and `contrib/pg_trgm`.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Kenji Uno"
      ]
    },
    {
      "title": "Disallow pushing sub-`SELECT`s containing window functions, `LIMIT`, or `OFFSET` to parallel workers",
      "description": "Such cases could result in inconsistent behavior due to different workers getting different answers, as a result of indeterminacy due to row-ordering variations.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Ensure that sequences owned by a foreign table are processed by `ALTER OWNER` on the table",
      "description": "The ownership change should propagate to such sequences as well, but this was missed for foreign tables.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Ensure that the server will process already-received `NOTIFY` and `SIGTERM` interrupts before waiting for client input",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Jeff Janes",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix over-allocation of space for `array_out()`'s result string",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Keiichi Hirobe"
      ]
    },
    {
      "title": "Avoid query-lifetime memory leak in `XMLTABLE`",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix memory leak in repeated SP-GiST index scans",
      "description": "This is only known to amount to anything significant in cases where an exclusion constraint using SP-GiST receives many new index entries in a single command.",
      "fixedIn": "10.6",
      "significant": true,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `ApplyLogicalMappingFile()` closes the mapping file when done with it",
      "description": "Previously, the file descriptor was leaked, eventually resulting in failures during logical decoding.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix logical decoding to handle cases where a mapped catalog table is repeatedly rewritten, e.g., by `VACUUM FULL`",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Prevent starting the server with `wal_level` set to too low a value to support an existing replication slot",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Avoid crash if a utility command causes infinite recursion",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "When initializing a hot standby, cope with duplicate XIDs caused by two-phase transactions on the master",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Konstantin Knizhnik"
      ]
    },
    {
      "title": "Fix event triggers to handle nested `ALTER TABLE` commands",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Propagate parent process's transaction and statement start timestamps to parallel workers",
      "description": "This prevents misbehavior of functions such as `transaction_timestamp()` when executed in a worker.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik"
      ]
    },
    {
      "title": "Fix transfer of expanded datums to parallel workers so that alignment is preserved, preventing crashes on alignment-picky platforms",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Amit Kapila"
      ]
    },
    {
      "title": "Fix WAL file recycling logic to work correctly on standby servers",
      "description": "Depending on the setting of `archive_mode`, a standby might fail to remove some WAL files that could be removed.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix handling of commit-timestamp tracking during recovery",
      "description": "If commit timestamp tracking has been turned on or off, recovery might fail due to trying to fetch the commit timestamp for a transaction that did not record it.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Masahiko Sawada",
        "Michael Paquier"
      ]
    },
    {
      "title": "Randomize the `random()` seed in bootstrap and standalone backends, and in initdb",
      "description": "The main practical effect of this change is that it avoids a scenario where initdb might mistakenly conclude that POSIX shared memory is not available, due to name collisions caused by always using the same random seed.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix possible shared-memory corruption in DSA logic",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Allow DSM allocation to be interrupted",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Chris Travers"
      ]
    },
    {
      "title": "Avoid failure in a parallel worker when loading an extension that tries to access system caches within its init function",
      "description": "We don't consider that to be good extension coding practice, but it mostly worked before parallel query, so continue to support it for now.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Properly handle turning `full_page_writes` on dynamically",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Fix possible crash due to double `free()` during SP-GiST rescan",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Prevent mis-linking of src/port and src/common functions on ELF-based BSD platforms, as well as HP-UX and Solaris",
      "description": "Shared libraries loaded into a backend's address space could use the backend's versions of these functions, rather than their own copies as intended. Since the behavior of the two sets of functions isn't quite the same, this led to failures.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid possible buffer overrun when replaying GIN page recompression from WAL",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Alexander Korotkov",
        "Sivasubramanian Ramasubramanian"
      ]
    },
    {
      "title": "Avoid overrun of a hash index's metapage when `BLCKSZ` is smaller than default",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Dilip Kumar"
      ]
    },
    {
      "title": "Fix missed page checksum updates in hash indexes",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Fix missed fsync of a replication slot's directory",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik",
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix unexpected timeouts when using `wal_sender_timeout` on a slow server",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Ensure that hot standby processes use the correct WAL consistency point",
      "description": "This prevents possible misbehavior just after a standby server has reached a consistent database state during WAL replay.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Alexander Kukushkin",
        "Michael Paquier"
      ]
    },
    {
      "title": "Ensure background workers are stopped properly when the postmaster receives a fast-shutdown request before completing database startup",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Alexander Kukushkin"
      ]
    },
    {
      "title": "Update the free space map during WAL replay of page all-visible/frozen flag changes",
      "description": "Previously we were not careful about this, reasoning that the FSM is not critical data anyway. However, if it's sufficiently out of date, that can result in significant performance degradation after a standby has been promoted to primary. The FSM will eventually be healed by updates, but we'd like it to be good sooner, so work harder at maintaining it during WAL replay.",
      "fixedIn": "10.6",
      "significant": true,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Avoid premature release of parallel-query resources when query end or tuple count limit is reached",
      "description": "It's only okay to shut down the executor at this point if the caller cannot demand backwards scan afterwards.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Don't run atexit callbacks when servicing `SIGQUIT`",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Don't record foreign-server user mappings as members of extensions",
      "description": "If `CREATE USER MAPPING` is executed in an extension script, an extension dependency was created for the user mapping, which is unexpected. Roles can't be extension members, so user mappings shouldn't be either.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make syslogger more robust against failures in opening CSV log files",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "When libpq is given multiple target host names, do the DNS lookups one at a time, not all at once",
      "description": "This prevents unnecessary failures or slow connections when a connection is successfully made to one of the earlier servers in the list.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix libpq's handling of connection timeouts so that they are properly applied per host name or IP address",
      "description": "Previously, some code paths failed to restart the timer when switching to a new target host, possibly resulting in premature timeout.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix psql, as well as documentation examples, to call `PQconsumeInput()` before each `PQnotifies()` call",
      "description": "This fixes cases in which psql would not report receipt of a `NOTIFY` message until after the next command.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_dump's `--no-publications` option to also ignore publication tables",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Gilles Darold"
      ]
    },
    {
      "title": "In pg\\_dump, exclude identity sequences when their parent table is excluded from the dump",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Fix possible inconsistency in pg\\_dump's sorting of dissimilar object names",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Jacob Champion"
      ]
    },
    {
      "title": "Ensure that pg\\_restore will schema-qualify the table name when emitting `DISABLE`/`ENABLE TRIGGER` commands",
      "description": "This avoids failures due to the new policy of running restores with restrictive search path.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_upgrade to handle event triggers in extensions correctly",
      "description": "pg\\_upgrade failed to preserve an event trigger's extension-membership status.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Fix pg\\_upgrade's cluster state check to work correctly on a standby server",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Enforce type `cube`'s dimension limit in all `contrib/cube` functions",
      "description": "Previously, some cube-related functions could construct values that would be rejected by `cube_in()`, leading to dump/reload failures.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "In `contrib/pg_stat_statements`, disallow the `pg_read_all_stats` role from executing `pg_stat_statements_reset()`",
      "description": "`pg_read_all_stats` is only meant to grant permission to read statistics, not to change them, so this grant was incorrect.\n\nTo cause this change to take effect, run `ALTER EXTENSION pg_stat_statements UPDATE` in each database where `pg_stat_statements` has been installed.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, don't try to ship a variable-free `ORDER BY` clause to the remote server",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix `contrib/unaccent`'s `unaccent()` function to use the `unaccent` text search dictionary that is in the same schema as the function",
      "description": "Previously it tried to look up the dictionary using the search path, which could fail if the search path has a restrictive value.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix build problems on macOS 10.14 (Mojave)",
      "description": "Adjust configure to add an `-isysroot` switch to `CPPFLAGS`; without this, PL/Perl and PL/Tcl fail to configure or build on macOS 10.14\\. The specific sysroot used can be overridden at configure time or build time by setting the `PG_SYSROOT` variable in the arguments of configure or make.\n\nIt is now recommended that Perl-related extensions write `$(perl_includespec)` rather than `-I$(perl_archlibexp)/CORE` in their compiler flags. The latter continues to work on most platforms, but not recent macOS.\n\nAlso, it should no longer be necessary to specify `--with-tclconfig` manually to get PL/Tcl to build on recent macOS releases.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix MSVC build and regression-test scripts to work on recent Perl versions",
      "description": "Perl no longer includes the current directory in its search path by default; work around that.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "On Windows, allow the regression tests to be run by an Administrator account",
      "description": "To do this safely, pg\\_regress now gives up any such privileges at startup.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Allow btree comparison functions to return `INT_MIN`",
      "description": "Up to now, we've forbidden datatype-specific comparison functions from returning `INT_MIN`, which allows callers to invert the sort order just by negating the comparison result. However, this was never safe for comparison functions that directly return the result of `memcmp()`, `strcmp()`, etc, as POSIX doesn't place any such restriction on those functions. At least some recent versions of `memcmp()` can return `INT_MIN`, causing incorrect sort ordering. Hence, we've removed this restriction. Callers must now use the `INVERT_COMPARE_RESULT()` macro if they wish to invert the sort order.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix recursion hazard in shared-invalidation message processing",
      "description": "This error could, for example, result in failure to access a system catalog or index that had just been processed by `VACUUM FULL`.\n\nThis change adds a new result code for `LockAcquire`, which might possibly affect external callers of that function, though only very unusual usage patterns would have an issue with it. The API of `LockAcquireExtended` is also changed.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Save and restore SPI's global variables during `SPI_connect()` and `SPI_finish()`",
      "description": "This prevents possible interference when one SPI-using function calls another.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Chapman Flack",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid using potentially-under-aligned page buffers",
      "description": "Invent new union types `PGAlignedBlock` and `PGAlignedXLogBlock`, and use these in place of plain char arrays, ensuring that the compiler can't place the buffer at a misaligned start address. This fixes potential core dumps on alignment-picky platforms, and may improve performance even on platforms that allow misalignment.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make `src/port/snprintf.c` follow the C99 standard's definition of `snprintf()`'s result value",
      "description": "On platforms where this code is used (mostly Windows), its pre-C99 behavior could lead to failure to detect buffer overrun, if the calling code assumed C99 semantics.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "When building on i386 with the clang compiler, require `-msse2` to be used",
      "description": "This avoids problems with missed floating point overflow checks.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix configure's detection of the result type of `strerror_r()`",
      "description": "The previous coding got the wrong answer when building with icc on Linux (and perhaps in other cases), leading to libpq not returning useful error messages for system-reported errors.",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2018g for DST law changes in Chile, Fiji, Morocco, and Russia (Volgograd), plus historical corrections for China, Hawaii, Japan, Macau, and North Korea.",
      "description": "",
      "fixedIn": "10.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "By default, panic instead of retrying after `fsync()` failure, to avoid possible data corruption",
      "description": "Some popular operating systems discard kernel data buffers when unable to write them out, reporting this as `fsync()` failure. If we reissue the `fsync()` request it will succeed, but in fact the data has been lost, so continuing risks database corruption. By raising a panic condition instead, we can replay from WAL, which may contain the only remaining copy of the data in such a situation. While this is surely ugly and inefficient, there are few alternatives, and fortunately the case happens very rarely.\n\nA new server parameter [data\\_sync\\_retry](https://www.postgresql.org/docs/10/runtime-config-error-handling.html#GUC-DATA-SYNC-RETRY) has been added to control this; if you are certain that your kernel does not discard dirty data buffers in such scenarios, you can set `data_sync_retry` to `on` to restore the old behavior.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Craig Ringer",
        "Thomas Munro"
      ]
    },
    {
      "title": "Include each major release branch's release notes in the documentation for only that branch, rather than that branch and all later ones",
      "description": "The duplication induced by the previous policy was getting out of hand. Our plan is to provide a full archive of release notes on the project's web site, but not duplicate it within each release.",
      "fixedIn": "10.7",
      "significant": true,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `NOT NULL` constraints of a partitioned table are honored within its partitions",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "Amit Langote"
      ]
    },
    {
      "title": "Use a safe table lock level when detaching a partition",
      "description": "The previous locking level was too weak and might allow concurrent DDL on the table, with bad results.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix problems with applying `ON COMMIT DROP` and `ON COMMIT DELETE ROWS` to partitioned tables and tables with inheritance children",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Disallow `COPY FREEZE` on partitioned tables",
      "description": "This should eventually be made to work, but it may require a patch that's too complicated to risk back-patching.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Avoid possible deadlock when acquiring multiple buffer locks",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Nishant Fnu"
      ]
    },
    {
      "title": "Avoid deadlock between GIN vacuuming and concurrent index insertions",
      "description": "This change partially reverts a performance improvement, introduced in version 10.0, that attempted to reduce the number of index pages locked during deletion of a GIN posting tree page. That's now been found to lead to deadlocks, so we've removed it pending closer analysis.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Alexander Korotkov",
        "Andrey Borodin",
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Avoid deadlock between hot-standby queries and replay of GIN index page deletion",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix possible crashes in logical replication when index expressions or predicates are in use",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid useless and expensive logical decoding of TOAST data during a table rewrite",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix logic for stopping a subset of WAL senders when synchronous replication is enabled",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Paul Guo",
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid possibly writing an incorrect replica identity field in a tuple deletion WAL record",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Stas Kelvich"
      ]
    },
    {
      "title": "Prevent incorrect use of WAL-skipping optimization during `COPY` to a view or foreign table",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Michael Paquier"
      ]
    },
    {
      "title": "Make the archiver prioritize WAL history files over WAL data files while choosing which file to archive next",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "David Steele"
      ]
    },
    {
      "title": "Fix possible crash in `UPDATE` with a multiple `SET` clause using a sub-`SELECT` as source",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid crash if libxml2 returns a null error message",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Sergio Conde Gómez"
      ]
    },
    {
      "title": "Fix spurious grouping-related parser errors caused by inconsistent handling of collation assignment",
      "description": "In some cases, expressions that should be considered to match were not seen as matching, if they included operations on collatable data types.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Check whether the comparison function underlying `LEAST()` or `GREATEST()` is leakproof, rather than just assuming it is",
      "description": "Actual information leaks from btree comparison functions are typically hard to provoke, but in principle they could happen.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect planning of queries involving nested loops both above and below a Gather plan node",
      "description": "If both levels of nestloop needed to pass the same variable into their right-hand sides, an incorrect plan would be generated.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect planning of queries in which a lateral reference must be evaluated at a foreign table scan",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix corner-case underestimation of the cost of a merge join",
      "description": "The planner could prefer a merge join when the outer key range is much smaller than the inner key range, even if there are so many duplicate keys on the inner side that this is a poor choice.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid O(N^2) planning time growth when a query contains many thousand indexable clauses",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Improve `ANALYZE`'s handling of concurrently-updated rows",
      "description": "Previously, rows deleted by an in-progress transaction were omitted from `ANALYZE`'s sample, but this has been found to lead to more inconsistency than including them would do. In effect, the sample now corresponds to an MVCC snapshot as of `ANALYZE`'s start time.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Jeff Janes",
        "Tom Lane"
      ]
    },
    {
      "title": "Make `TRUNCATE` ignore inheritance child tables that are temporary tables of other sessions",
      "description": "This brings `TRUNCATE` into line with the behavior of other commands. Previously, such cases usually ended in failure.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix `TRUNCATE` to update the statistics counters for the right table",
      "description": "If the truncated table had a TOAST table, that table's counters were reset instead.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Process `ALTER TABLE ONLY ADD COLUMN IF NOT EXISTS` correctly",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Greg Stark"
      ]
    },
    {
      "title": "Allow `UNLISTEN` in hot-standby mode",
      "description": "This is necessarily a no-op, because `LISTEN` isn't allowed in hot-standby mode; but allowing the dummy operation simplifies session-state-reset logic in clients.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Shay Rojansky"
      ]
    },
    {
      "title": "Fix missing role dependencies in some schema and data type permissions lists",
      "description": "In some cases it was possible to drop a role to which permissions had been granted. This caused no immediate problem, but a subsequent dump/reload or upgrade would fail, with symptoms involving attempts to grant privileges to all-numeric role names.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent use of a session's temporary schema within a two-phase transaction",
      "description": "Accessing a temporary table within such a transaction has been forbidden for a long time, but it was still possible to cause problems with other operations on temporary objects.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Ensure relation caches are updated properly after adding or removing foreign key constraints",
      "description": "This oversight could result in existing sessions failing to enforce a newly-created constraint, or continuing to enforce a dropped one.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Ensure relation caches are updated properly after renaming constraints",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Make autovacuum more aggressive about removing leftover temporary tables, and also remove leftover temporary tables during `DISCARD TEMP`",
      "description": "This helps ensure that remnants from a crashed session are cleaned up more promptly.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix replay of GiST index micro-vacuum operations so that concurrent hot-standby queries do not see inconsistent state",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Prevent empty GIN index pages from being reclaimed too quickly, causing failures of concurrent searches",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Andrey Borodin",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix edge-case failures in float-to-integer coercions",
      "description": "Values very slightly above the maximum valid integer value might not be rejected, and then would overflow, producing the minimum valid integer instead. Also, values that should round to the minimum or maximum integer value might be incorrectly rejected.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Tom Lane"
      ]
    },
    {
      "title": "When making a PAM authentication request, don't set the `PAM_RHOST` variable if the connection is via a Unix socket",
      "description": "Previously that variable would be set to `[local]`, which is at best unhelpful, since it's supposed to be a host name.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Disallow setting `client_min_messages` higher than `ERROR`",
      "description": "Previously, it was possible to set this variable to `FATAL` or `PANIC`, which had the effect of suppressing transmission of ordinary error messages to the client. However, that's contrary to guarantees that are given in the PostgreSQL wire protocol specification, and it caused some clients to become very confused. In released branches, fix this by silently treating such settings as meaning `ERROR` instead. Version 12 and later will reject those alternatives altogether.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Jonah Harris",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix ecpglib to use `uselocale()` or `_configthreadlocale()` in preference to `setlocale()`",
      "description": "Since `setlocale()` is not thread-local, and might not even be thread-safe, the previous coding caused problems in multi-threaded ecpg applications.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Michael Meskes",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect results for numeric data passed through an ecpg SQLDA (SQL Descriptor Area)",
      "description": "Values with leading zeroes were not copied correctly.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Daisuke Higuchi"
      ]
    },
    {
      "title": "Fix psql's `\\g` _`target`_ meta-command to work with `COPY TO STDOUT`",
      "description": "Previously, the _`target`_ option was ignored, so that the copy data always went to the current query output target.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Daniel Vérité"
      ]
    },
    {
      "title": "Make psql's LaTeX output formats render special characters properly",
      "description": "Backslash and some other ASCII punctuation characters were not rendered correctly, leading to document syntax errors or wrong characters in the output.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_dump's handling of materialized views with indirect dependencies on primary keys",
      "description": "This led to mis-labeling of such views' dump archive entries, causing harmless warnings about “archive items not in correct section order”; less harmlessly, selective-restore options depending on those labels, such as `--section`, might misbehave.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid null-pointer-dereference crash on some platforms when pg\\_dump or pg\\_restore tries to report an error",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Properly disregard `SIGPIPE` errors if `COPY FROM PROGRAM` stops reading the program's output early",
      "description": "This case isn't actually reachable directly with `COPY`, but it can happen when using `contrib/file_fdw`.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `contrib/hstore` to calculate correct hash values for empty `hstore` values that were created in version 8.4 or before",
      "description": "The previous coding did not give the same result as for an empty `hstore` value created by a newer version, thus potentially causing wrong results in hash joins or hash aggregation. It is advisable to reindex any hash indexes built on `hstore` columns, if the table might contain data that was originally stored as far back as 8.4 and was never dumped/reloaded since then.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Avoid crashes and excessive runtime with large inputs to `contrib/intarray`'s `gist__int_ops` index support",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "In configure, look for `python3` and then `python2` if `python` isn't found",
      "description": "This allows PL/Python to be configured without explicitly specifying `PYTHON` on platforms that no longer provide an unversioned `python` executable.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Support new Makefile variables `PG_CFLAGS`, `PG_CXXFLAGS`, and `PG_LDFLAGS` in pgxs builds",
      "description": "This simplifies customization of extension build processes.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Christoph Berg"
      ]
    },
    {
      "title": "Fix Perl-coded build scripts to not assume “`.`” is in the search path, since recent Perl versions don't include that",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Fix server command-line option parsing problems on OpenBSD",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Relocate call of `set_rel_pathlist_hook` so that extensions can use it to supply partial paths for parallel queries",
      "description": "This is not expected to affect existing use-cases.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "KaiGai Kohei"
      ]
    },
    {
      "title": "Rename red-black tree support functions to use `rbt` prefix not `rb` prefix",
      "description": "This avoids name collisions with Ruby functions, which broke PL/Ruby. It's hoped that there are no other affected extensions.",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2018i for DST law changes in Kazakhstan, Metlakatla, and Sao Tome and Principe. Kazakhstan's Qyzylorda zone is split in two, creating a new zone Asia/Qostanay, as some areas did not change UTC offset. Historical corrections for Hong Kong and numerous Pacific islands.",
      "description": "",
      "fixedIn": "10.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid catalog corruption when a temporary table with `ON COMMIT DROP` and an identity column is created in a single-statement transaction",
      "description": "This hazard was overlooked because the case is not actually useful, since the temporary table would be dropped immediately after creation.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid crash when an EPQ recheck is performed for a partitioned query result relation",
      "description": "This occurs when using `READ COMMITTED` isolation level and another session has concurrently updated some of the target row(s).",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix behavior for an `UPDATE` or `DELETE` on an inheritance tree or partitioned table in which every table can be excluded",
      "description": "In such cases, the query did not report the correct set of output columns when a `RETURNING` clause was present, and if there were any statement-level triggers that should be fired, it didn't fire them.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid throwing incorrect errors for updates of temporary tables and unlogged tables when a `FOR ALL TABLES` publication exists",
      "description": "Such tables should be ignored for publication purposes, but some parts of the code failed to do so.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Fix handling of explicit `DEFAULT` items in an `INSERT ... VALUES` command with multiple `VALUES` rows, if the target relation is an updatable view",
      "description": "When the updatable view has no default for the column but its underlying table has one, a single-row `INSERT ... VALUES` will use the underlying table's default. In the multi-row case, however, NULL was always used. Correct it to act like the single-row case.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix `CREATE VIEW` to allow zero-column views",
      "description": "We should allow this for consistency with allowing zero-column tables. Since a table can be converted to a view, zero-column views could be created even with the restriction in place, leading to dump/reload failures.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Ashutosh Sharma"
      ]
    },
    {
      "title": "Add missing support for `CREATE TABLE IF NOT EXISTS ... AS EXECUTE ...`",
      "description": "The combination of `IF NOT EXISTS` and `EXECUTE` should work, but the grammar omitted it.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Andreas Karlsson"
      ]
    },
    {
      "title": "Ensure that sub-`SELECT`s appearing in row-level-security policy expressions are executed with the correct user's permissions",
      "description": "Previously, if the table having the RLS policy was accessed via a view, such checks might be executed as the user calling the view, not as the view owner as they should be.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Accept XML documents as valid values of type `xml` when `xmloption` is set to `content`, as required by SQL:2006 and later",
      "description": "Previously PostgreSQL followed the SQL:2003 definition, which doesn't allow this. But that creates a serious problem for dump/restore: there is no setting of `xmloption` that will accept all valid XML data. Hence, switch to the 2006 definition.\n\npg\\_dump is also modified to emit `SET xmloption = content` while restoring data, ensuring that dump/restore works even if the prevailing setting is `document`.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Chapman Flack"
      ]
    },
    {
      "title": "Improve server's startup-time checks for whether a pre-existing shared memory segment is still in use",
      "description": "The postmaster is now more likely to detect that there are still active processes from a previous postmaster incarnation, even if the `postmaster.pid` file has been removed.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Avoid counting parallel workers' transactions as separate transactions",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Fix incompatibility of GIN-index WAL records",
      "description": "A fix applied in February's minor releases was not sufficiently careful about backwards compatibility, leading to problems if a standby server of that vintage reads GIN page-deletion WAL records generated by a primary server of a previous minor release.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix possible crash while executing a `SHOW` command in a replication connection",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid memory leak when a partition's relation cache entry is rebuilt",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Tom Lane"
      ]
    },
    {
      "title": "Tolerate `EINVAL` and `ENOSYS` error results, where appropriate, for `fsync` and `sync_file_range` calls",
      "description": "The previous change to panic on file synchronization failures turns out to have been excessively paranoid for certain cases where a failure is predictable and essentially means “operation not supported”.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "James Sewell"
      ]
    },
    {
      "title": "Report correct relation name in autovacuum's `pg_stat_activity` display during BRIN summarize operations",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix “failed to build any _`N`_\\-way joins” planner failures with lateral references leading out of `FULL` outer joins",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix misplanning of queries in which a set-returning function is applied to a relation that is provably empty",
      "description": "In v10, this oversight only led to slightly inefficient plans, but in v11 it could cause “set-valued function called in context that cannot accept a set” errors.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Check the appropriate user's permissions when enforcing rules about letting a leaky operator see `pg_statistic` data",
      "description": "When an underlying table is being accessed via a view, consider the privileges of the view owner while deciding whether leaky operators may be applied to the table's statistics data, rather than the privileges of the user making the query. This makes the planner's rules about what data is visible match up with the executor's, avoiding unnecessarily-poor plans.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Speed up planning when there are many equality conditions and many potentially-relevant foreign key constraints",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Avoid O(N^2) performance issue when rolling back a transaction that created many tables",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix corner-case server crashes in dynamic shared memory allocation",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Robert Haas"
      ]
    },
    {
      "title": "Fix race conditions in management of dynamic shared memory",
      "description": "These could lead to “dsa\\_area could not attach to segment” or “cannot unpin a segment that is not pinned” errors.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix race condition in which a hot-standby postmaster could fail to shut down after receiving a smart-shutdown request",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible crash when `pg_identify_object_as_address()` is given invalid input",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix possible “could not access status of transaction” failures in `txid_status()`",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Tighten validation of encoded SCRAM-SHA-256 and MD5 passwords",
      "description": "A password string that had the right initial characters could be mistaken for one that is correctly hashed into SCRAM-SHA-256 or MD5 format. The password would be accepted but would be unusable later.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Jonathan Katz"
      ]
    },
    {
      "title": "Fix handling of `lc_time` settings that imply an encoding different from the database's encoding",
      "description": "Localized month or day names that include non-ASCII characters previously caused unexpected errors or wrong output in such locales.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Juan José Santamaría Flecha",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect `operator_precedence_warning` checks involving unary minus operators",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Rikard Falkeborn"
      ]
    },
    {
      "title": "Disallow `NaN` as a value for floating-point server parameters",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Rearrange `REINDEX` processing to avoid assertion failures when reindexing individual indexes of `pg_class`",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix planner assertion failure for parameterized dummy paths",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Insert correct test function in the result of `SnapBuildInitialSnapshot()`",
      "description": "No core code cares about this, but some extensions do.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Antonin Houska"
      ]
    },
    {
      "title": "Fix intermittent “could not reattach to shared memory” session startup failures on Windows",
      "description": "A previously unrecognized source of these failures is creation of thread stacks for a process's default thread pool. Arrange for such stacks to be allocated in a different memory region.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix error detection in directory scanning on Windows",
      "description": "Errors, such as lack of permissions to read the directory, were not detected or reported correctly; instead the code silently acted as though the directory were empty.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik"
      ]
    },
    {
      "title": "Fix grammar problems in ecpg",
      "description": "A missing semicolon led to mistranslation of `` SET _`variable`_ = DEFAULT `` (but not `` SET _`variable`_ TO DEFAULT ``) in ecpg programs, producing syntactically invalid output that the server would reject. Additionally, in a `DROP TYPE` or `DROP DOMAIN` command that listed multiple type names, only the first type name was actually processed.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Sync ecpg's syntax for `CREATE TABLE AS` with the server's",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Daisuke Higuchi"
      ]
    },
    {
      "title": "Fix possible buffer overruns in ecpg's processing of include filenames",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Liu Huailing",
        "Fei Wu"
      ]
    },
    {
      "title": "Avoid crash in `contrib/postgres_fdw` when a query using remote grouping or aggregation has a `SELECT`\\-list item that is an uncorrelated sub-select, outer reference, or parameter symbol",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid crash in `contrib/vacuumlo` if an `lo_unlink()` call failed",
      "description": "",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2019a",
      "description": "This corrects a small bug in zic that caused it to output an incorrect year-2440 transition in the `Africa/Casablanca` zone, and adds support for zic's new `-r` option.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2019a for DST law changes in Palestine and Metlakatla, plus historical corrections for Israel.",
      "description": "`Etc/UCT` is now a backward-compatibility link to `Etc/UTC`, instead of being a separate zone that generates the abbreviation `UCT`, which nowadays is typically a typo. PostgreSQL will still accept `UCT` as an input zone abbreviation, but it won't output it.",
      "fixedIn": "10.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `ALTER TABLE ... ALTER COLUMN TYPE` when the table has a partial exclusion constraint",
      "description": "",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix failure of `COMMENT` command for comments on domain constraints",
      "description": "",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Daniel Gustafsson",
        "Michael Paquier"
      ]
    },
    {
      "title": "Prevent possible memory clobber when there are duplicate columns in a hash aggregate's hash key list",
      "description": "",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix faulty generation of merge-append plans",
      "description": "This mistake could lead to “could not find pathkey item to sort” errors.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect printing of queries with duplicate join names",
      "description": "This oversight caused a dump/restore failure for views containing such queries.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Philip Dubé"
      ]
    },
    {
      "title": "Fix conversion of JSON string literals to JSON-type output columns in `json_to_record()` and `json_populate_record()`",
      "description": "Such cases should produce the literal as a standalone JSON value, but the code misbehaved if the literal contained any characters requiring escaping.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix misoptimization of `{1,1}` quantifiers in regular expressions",
      "description": "Such quantifiers were treated as no-ops and optimized away; but the documentation specifies that they impose greediness, or non-greediness in the case of the non-greedy variant `{1,1}?`, on the subexpression they're attached to, and this did not happen. The misbehavior occurred only if the subexpression contained capturing parentheses or a back-reference.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid possible failures while initializing a new process's `pg_stat_activity` data",
      "description": "Certain operations that could fail, such as converting strings extracted from an SSL certificate into the database encoding, were being performed inside a critical section. Failure there would result in database-wide lockup due to violating the access protocol for shared `pg_stat_activity` data.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix race condition in check to see whether a pre-existing shared memory segment is still in use by a conflicting postmaster",
      "description": "",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix unsafe coding in walreceiver's signal handler",
      "description": "This avoids rare problems in which the walreceiver process would crash or deadlock when commanded to shut down.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid attempting to do database accesses for parameter checking in processes that are not connected to a specific database",
      "description": "This error could result in failures like “cannot read pg\\_class without having selected a database”.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Vignesh C",
        "Andres Freund"
      ]
    },
    {
      "title": "Avoid possible hang in libpq if using SSL and OpenSSL's pending-data buffer contains an exact multiple of 256 bytes",
      "description": "",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "David Binderman"
      ]
    },
    {
      "title": "Improve initdb's handling of multiple equivalent names for the system time zone",
      "description": "Make initdb examine the `/etc/localtime` symbolic link, if that exists, to break ties between equivalent names for the system time zone. This makes initdb more likely to select the time zone name that the user would expect when multiple identical time zones exist. It will not change the behavior if `/etc/localtime` is not a symlink to a zone data file, nor if the time zone is determined from the `TZ` environment variable.\n\nSeparately, prefer `UTC` over other spellings of that time zone, when neither `TZ` nor `/etc/localtime` provide a hint. This fixes an annoyance introduced by tzdata 2019a's change to make the `UCT` and `UTC` zone names equivalent: initdb was then preferring `UCT`, which almost nobody wants.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix ordering of `GRANT` commands emitted by pg\\_dump and pg\\_dumpall for databases and tablespaces",
      "description": "If cascading grants had been issued, restore might fail due to the `GRANT` commands being given in an order that didn't respect their interdependencies.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Nathan Bossart",
        "Michael Paquier"
      ]
    },
    {
      "title": "Make pg\\_dump recreate table partitions using `CREATE TABLE` then `ATTACH PARTITION`, rather than including `PARTITION OF` in the creation command",
      "description": "This avoids problems with the partition's column order possibly being changed to match the parent's. Also, a partition is now restorable from the dump (as a standalone table) even if its parent table isn't restored; the `ATTACH` will fail, but that can just be ignored.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "David Rowley"
      ]
    },
    {
      "title": "Fix misleading error reports from reindexdb",
      "description": "",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Ensure that vacuumdb returns correct status if an error occurs while using parallel jobs",
      "description": "",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Fix `contrib/auto_explain` to not cause problems in parallel queries",
      "description": "Previously, a parallel worker might try to log its query even if the parent query were not being logged by `auto_explain`. This would work sometimes, but it's confusing, and in some cases it resulted in failures like “could not find key N in shm TOC”.\n\nAlso, fix an off-by-one error that resulted in not necessarily logging every query even when the sampling rate is set to 1.0.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, account for possible data modifications by local `BEFORE ROW UPDATE` triggers",
      "description": "If a trigger modified a column that was otherwise not changed by the `UPDATE`, the new value was not transmitted to the remote server.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Shohei Mochizuki"
      ]
    },
    {
      "title": "On Windows, avoid failure when the database encoding is set to SQL\\_ASCII and we attempt to log a non-ASCII string",
      "description": "The code had been assuming that such strings must be in UTF-8, and would throw an error if they didn't appear to be validly encoded. Now, just transmit the untranslated bytes to the log.",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Make PL/pgSQL's header files C++-safe",
      "description": "",
      "fixedIn": "10.9",
      "significant": false,
      "contributors": [
        "George Tarasov"
      ]
    },
    {
      "title": "Add support for partitioning by a hash key",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for `PRIMARY KEY`, `FOREIGN KEY`, indexes, and triggers on partitioned tables",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow creation of a “default” partition for storing data that does not match any of the remaining partitions",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "`UPDATE` statements that change a partition key column now cause affected rows to be moved to the appropriate partitions",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "`CREATE INDEX` can now use parallel processing while building a B-tree index",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parallelization is now possible in `CREATE TABLE ... AS`, `CREATE MATERIALIZED VIEW`, and certain queries using `UNION`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "SQL stored procedures that support embedded transactions",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Window functions now support all framing options shown in the SQL:2011 standard, including `` RANGE _`distance`_ PRECEDING/FOLLOWING ``, `GROUPS` mode, and frame exclusion options",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Covering indexes can now be created, using the `INCLUDE` clause of `CREATE INDEX`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make [pg\\_dump](https://www.postgresql.org/docs/11/app-pgdump.html \"pg_dump\") dump the properties of a database, not just its contents",
      "description": "Previously, attributes of the database itself, such as database-level `GRANT`/`REVOKE` permissions and `ALTER DATABASE SET` variable settings, were only dumped by [pg\\_dumpall](https://www.postgresql.org/docs/11/app-pg-dumpall.html \"pg_dumpall\"). Now `pg_dump --create` and `pg_restore --create` will restore these database properties in addition to the objects within the database. `pg_dumpall -g` now only dumps role- and tablespace-related attributes. pg\\_dumpall's complete output (without `-g`) is unchanged.\n\npg\\_dump and pg\\_restore, without `--create`, no longer dump/restore database-level comments and security labels; those are now treated as properties of the database.\n\npg\\_dumpall's output script will now always create databases with their original locale and encoding, and hence will fail if the locale or encoding name is unknown to the destination system. Previously, `CREATE DATABASE` would be emitted without these specifications if the database locale and encoding matched the old cluster's defaults.\n\n`pg_dumpall --clean` now restores the original locale and encoding settings of the `postgres` and `template1` databases, as well as those of user-created databases.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Consider syntactic form when disambiguating function versus column references",
      "description": "When _`x`_ is a table name or composite column, PostgreSQL has traditionally considered the syntactic forms `` _`f`_(_`x`_) `` and `` _`x`_._`f`_ `` to be equivalent, allowing tricks such as writing a function and then using it as though it were a computed-on-demand column. However, if both interpretations are feasible, the column interpretation was always chosen, leading to surprising results if the user intended the function interpretation. Now, if there is ambiguity, the interpretation that matches the syntactic form is chosen.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fully enforce uniqueness of table and domain constraint names",
      "description": "PostgreSQL expects the names of a table's constraints to be distinct, and likewise for the names of a domain's constraints. However, there was not rigid enforcement of this, and previously there were corner cases where duplicate names could be created.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make `power(numeric, numeric)` and `power(float8, float8)` handle `NaN` inputs according to the POSIX standard",
      "description": "POSIX says that `NaN ^ 0 = 1` and `1 ^ NaN = 1`, but all other cases with `NaN` input(s) should return `NaN`. `power(numeric, numeric)` just returned `NaN` in all such cases; now it honors the two exceptions. `power(float8, float8)` followed the standard if the C library does; but on some old Unix platforms the library doesn't, and there were also problems on some versions of Windows.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Dang Minh Huong"
      ]
    },
    {
      "title": "Prevent [to\\_number()](https://www.postgresql.org/docs/11/functions-formatting.html#FUNCTIONS-FORMATTING-NUMERIC-TABLE \"Table 9.26. Template Patterns for Numeric Formatting\") from consuming characters when the template separator does not match",
      "description": "Specifically, `SELECT to_number('1234', '9,999')` used to return `134`. It will now return `1234`. `L` and `TH` now only consume characters that are not digits, positive/negative signs, decimal points, or commas.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Oliver Ford"
      ]
    },
    {
      "title": "Fix [to\\_date()](https://www.postgresql.org/docs/11/functions-formatting.html \"9.8. Data Type Formatting Functions\"), `to_number()`, and `to_timestamp()` to skip a character for each template character",
      "description": "Previously, they skipped one _byte_ for each byte of template character, resulting in strange behavior if either string contained multibyte characters.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Adjust the handling of backslashes inside double-quotes in template strings for `to_char()`, `to_number()`, and `to_timestamp()`.",
      "description": "Such a backslash now escapes the character after it, particularly a double-quote or another backslash.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly handle relative path expressions in `xmltable()`, `xpath()`, and other XML-handling functions",
      "description": "Per the SQL standard, relative paths start from the document node of the XML input document, not the root node as these functions previously did.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Markus Winand"
      ]
    },
    {
      "title": "In the [extended query protocol](https://www.postgresql.org/docs/11/protocol-overview.html#PROTOCOL-QUERY-CONCEPTS \"53.1.2. Extended Query Overview\"), make [statement\\_timeout](https://www.postgresql.org/docs/11/runtime-config-client.html#GUC-STATEMENT-TIMEOUT) apply to each Execute message separately, not to all commands before Sync",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tatsuo Ishii",
        "Andres Freund"
      ]
    },
    {
      "title": "Remove the `relhaspkey` column from system catalog `pg_class`",
      "description": "Applications needing to check for a primary key should consult `pg_index`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Replace system catalog `pg_proc`'s `proisagg` and `proiswindow` columns with `prokind`",
      "description": "This new column more clearly distinguishes functions, procedures, aggregates, and window functions.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Correct information schema column [tables.table\\_type](https://www.postgresql.org/docs/11/infoschema-tables.html \"37.52. tables\") to return `FOREIGN` instead of `FOREIGN TABLE`",
      "description": "This new output matches the SQL standard.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Change the ps process display labels for background workers to match the [pg\\_stat\\_activity.backend\\_type](https://www.postgresql.org/docs/11/monitoring-stats.html#PG-STAT-ACTIVITY-VIEW \"Table 28.3. pg_stat_activity View\") labels",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Cause large object permission checks to happen during large object open, [lo\\_open()](https://www.postgresql.org/docs/11/lo-interfaces.html#LO-OPEN \"35.3.4. Opening an Existing Large Object\"), not when a read or write is attempted",
      "description": "If write access is requested and not available, an error will now be thrown even if the large object is never written to.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Michael Paquier"
      ]
    },
    {
      "title": "Prevent non-superusers from reindexing shared catalogs",
      "description": "Previously, database owners were also allowed to do this, but now it is considered outside the bounds of their privileges.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Robert Haas"
      ]
    },
    {
      "title": "Remove deprecated [adminpack](https://www.postgresql.org/docs/11/adminpack.html \"F.1. adminpack\") functions `pg_file_read()`, `pg_file_length()`, and `pg_logfile_rotate()`",
      "description": "Equivalent functionality is now present in the core backend. Existing `adminpack` installs will continue to have access to these functions until they are updated via `ALTER EXTENSION ... UPDATE`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Stephen Frost"
      ]
    },
    {
      "title": "Honor the capitalization of double-quoted command options",
      "description": "Previously, option names in certain SQL commands were forcibly lower-cased even if entered with double quotes; thus for example `\"FillFactor\"` would be accepted as an index storage option, though properly its name is lower-case. Such cases will now generate an error.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Daniel Gustafsson"
      ]
    },
    {
      "title": "Remove server parameter `replacement_sort_tuples`",
      "description": "Replacement sorts were determined to be no longer useful.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Remove `WITH` clause in [CREATE FUNCTION](https://www.postgresql.org/docs/11/sql-createfunction.html \"CREATE FUNCTION\")",
      "description": "PostgreSQL has long supported a more standard-compliant syntax for this capability.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In PL/pgSQL trigger functions, the `OLD` and `NEW` variables now read as NULL when not assigned",
      "description": "Previously, references to these variables could be parsed but not executed.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow the creation of partitions based on hashing a key column",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Amul Sul"
      ]
    },
    {
      "title": "Allow foreign keys on partitioned tables",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Allow `FOR EACH ROW` triggers on partitioned tables",
      "description": "Creation of a trigger on a partitioned table automatically creates triggers on all existing and future partitions. This also allows deferred unique constraints on partitioned tables.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Allow partitioned tables to have a default partition",
      "description": "The default partition will store rows that don't match any of the other defined partitions, and is searched accordingly.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Jeevan Ladhe",
        "Beena Emerson",
        "Ashutosh Bapat",
        "Rahila Syed",
        "Robert Haas"
      ]
    },
    {
      "title": "`UPDATE` statements that change a partition key column now cause affected rows to be moved to the appropriate partitions",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Amit Khandekar"
      ]
    },
    {
      "title": "Allow `INSERT`, `UPDATE`, and `COPY` on partitioned tables to properly route rows to foreign partitions",
      "description": "This is supported by `postgres_fdw` foreign tables. Since the `ExecForeignInsert` callback function is called for this in a different way than it used to be, foreign data wrappers must be modified to cope with this change.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Etsuro Fujita",
        "Amit Langote"
      ]
    },
    {
      "title": "Allow partition elimination during query execution",
      "description": "Previously, partition elimination only happened at planning time, meaning many joins and prepared queries could not use partition elimination.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "David Rowley",
        "Beena Emerson"
      ]
    },
    {
      "title": "In an equality join between partitioned tables, allow matching partitions to be joined directly",
      "description": "This feature is disabled by default but can be enabled by changing [enable\\_partitionwise\\_join](https://www.postgresql.org/docs/11/runtime-config-query.html#GUC-ENABLE-PARTITIONWISE-JOIN).",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Ashutosh Bapat"
      ]
    },
    {
      "title": "Allow aggregate functions on partitioned tables to be evaluated separately for each partition, subsequently merging the results",
      "description": "This feature is disabled by default but can be enabled by changing [enable\\_partitionwise\\_aggregate](https://www.postgresql.org/docs/11/runtime-config-query.html#GUC-ENABLE-PARTITIONWISE-AGGREGATE).",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Jeevan Chalke",
        "Ashutosh Bapat",
        "Robert Haas"
      ]
    },
    {
      "title": "Allow [postgres\\_fdw](https://www.postgresql.org/docs/11/postgres-fdw.html \"F.33. postgres_fdw\") to push down aggregates to foreign tables that are partitions",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Jeevan Chalke"
      ]
    },
    {
      "title": "Allow parallel building of a btree index",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Geoghegan",
        "Rushabh Lathia",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Allow hash joins to be performed in parallel using a shared hash table",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Allow `UNION` to run each `SELECT` in parallel if the individual `SELECT`s cannot be parallelized",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Amit Khandekar",
        "Robert Haas",
        "Amul Sul"
      ]
    },
    {
      "title": "Allow single-evaluation queries, e.g., `WHERE` clause aggregate queries, and functions in the target list to be parallelized",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Robert Haas"
      ]
    },
    {
      "title": "Add server parameter [parallel\\_leader\\_participation](https://www.postgresql.org/docs/11/runtime-config-query.html#GUC-PARALLEL-LEADER-PARTICIPATION) to control whether the leader also executes subplans",
      "description": "The default is enabled, meaning the leader will execute subplans.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Allow parallelization of commands `CREATE TABLE ... AS`, `SELECT INTO`, and `CREATE MATERIALIZED VIEW`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Add reporting of parallel workers' sort activity in `EXPLAIN`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Robert Haas",
        "Tom Lane"
      ]
    },
    {
      "title": "Allow B-tree indexes to include columns that are not part of the search key or unique constraint, but are available to be read by index-only scans",
      "description": "This is enabled by the new `INCLUDE` clause of [CREATE INDEX](https://www.postgresql.org/docs/11/sql-createindex.html \"CREATE INDEX\"). It facilitates building “covering indexes” that optimize specific types of queries. Columns can be included even if their data types don't have B-tree support.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Anastasia Lubennikova",
        "Alexander Korotkov",
        "Teodor Sigaev"
      ]
    },
    {
      "title": "Allow polygons to be indexed with SP-GiST",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Nikita Glukhov",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Allow SP-GiST to use lossy representation of leaf keys",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Teodor Sigaev",
        "Heikki Linnakangas",
        "Alexander Korotkov",
        "Nikita Glukhov"
      ]
    },
    {
      "title": "Make the optimizer account for evaluation costs and selectivity of `HAVING` clauses",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow bitmap scans to perform index-only scans when possible",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Alexander Kuzmenkov"
      ]
    },
    {
      "title": "Update the free space map during `VACUUM`",
      "description": "This allows free space to be reused more quickly.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Claudio Freire"
      ]
    },
    {
      "title": "Allow `VACUUM` to avoid unnecessary index scans",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Masahiko Sawada",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Allow [postgres\\_fdw](https://www.postgresql.org/docs/11/postgres-fdw.html \"F.33. postgres_fdw\") to push `UPDATE`s and `DELETE`s using joins to foreign servers",
      "description": "Previously, only non-join `UPDATE`s and `DELETE`s were pushed.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Add support for _large pages_ on Windows",
      "description": "This is controlled by the [huge\\_pages](https://www.postgresql.org/docs/11/runtime-config-resource.html#GUC-HUGE-PAGES) configuration parameter.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Takayuki Tsunakawa",
        "Thomas Munro"
      ]
    },
    {
      "title": "Show memory usage in output from [log\\_statement\\_stats](https://www.postgresql.org/docs/11/runtime-config-statistics.html#RUNTIME-CONFIG-STATISTICS-MONITOR \"19.9.2. Statistics Monitoring\"), `log_parser_stats`, `log_planner_stats`, and `log_executor_stats`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Justin Pryzby",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add column [pg\\_stat\\_activity.backend\\_type](https://www.postgresql.org/docs/11/monitoring-stats.html#PG-STAT-ACTIVITY-VIEW \"Table 28.3. pg_stat_activity View\") to show the type of a background worker",
      "description": "The type is also visible in ps output.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Make [log\\_autovacuum\\_min\\_duration](https://www.postgresql.org/docs/11/runtime-config-autovacuum.html#GUC-LOG-AUTOVACUUM-MIN-DURATION) log skipped tables that are concurrently being dropped",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Nathan Bossart"
      ]
    },
    {
      "title": "Add `information_schema` columns related to table constraints and triggers",
      "description": "Specifically, `triggers`.`action_order`, `triggers`.`action_reference_old_table`, and `triggers`.`action_reference_new_table` are now populated, where before they were always null. Also, `table_constraints`.`enforced` now exists but is not yet usefully populated.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Allow the server to specify more complex [LDAP](https://www.postgresql.org/docs/11/auth-ldap.html \"20.10. LDAP Authentication\") specifications in search+bind mode",
      "description": "Specifically, `ldapsearchfilter` allows pattern matching using combinations of LDAP attributes.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Allow LDAP authentication to use encrypted LDAP",
      "description": "We already supported LDAP over TLS by using `ldaptls=1`. This new TLS LDAP method for encrypted LDAP is enabled with `ldapscheme=ldaps` or `ldapurl=ldaps://`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Add [default roles](https://www.postgresql.org/docs/11/default-roles.html#DEFAULT-ROLES-TABLE \"Table 21.1. Default Roles\") that enable file system access",
      "description": "Specifically, the new roles are: `pg_read_server_files`, `pg_write_server_files`, and `pg_execute_server_program`. These roles now also control who can use server-side `COPY` and the [file\\_fdw](https://www.postgresql.org/docs/11/file-fdw.html \"F.14. file_fdw\") extension. Previously, only superusers could use these functions, and that is still the default behavior.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Stephen Frost"
      ]
    },
    {
      "title": "Allow access to file system functions to be controlled by `GRANT`/`REVOKE` permissions, rather than superuser checks",
      "description": "Specifically, these functions were modified: [pg\\_ls\\_dir()](https://www.postgresql.org/docs/11/functions-admin.html#FUNCTIONS-ADMIN-GENFILE-TABLE \"Table 9.88. Generic File Access Functions\"), `pg_read_file()`, `pg_read_binary_file()`, `pg_stat_file()`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Stephen Frost"
      ]
    },
    {
      "title": "Use `GRANT`/`REVOKE` to control access to [lo\\_import()](https://www.postgresql.org/docs/11/lo-interfaces.html#LO-IMPORT \"35.3.2. Importing a Large Object\") and `lo_export()`",
      "description": "Previously, only superusers were granted access to these functions.\n\nThe compile-time option `ALLOW_DANGEROUS_LO_FUNCTIONS` has been removed.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Tom Lane"
      ]
    },
    {
      "title": "Use view owner not session owner when preventing non-password access to [postgres\\_fdw](https://www.postgresql.org/docs/11/postgres-fdw.html \"F.33. postgres_fdw\") tables",
      "description": "PostgreSQL only allows superusers to access `postgres_fdw` tables without passwords, e.g., via `peer`. Previously, the session owner had to be a superuser to allow such access; now the view owner is checked instead.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Fix invalid locking permission check in `SELECT FOR UPDATE` on views",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add server setting [ssl\\_passphrase\\_command](https://www.postgresql.org/docs/11/runtime-config-connection.html#GUC-SSL-PASSPHRASE-COMMAND) to allow supplying of the passphrase for SSL key files",
      "description": "Also add [ssl\\_passphrase\\_command\\_supports\\_reload](https://www.postgresql.org/docs/11/runtime-config-connection.html#GUC-SSL-PASSPHRASE-COMMAND-SUPPORTS-RELOAD) to specify whether the SSL configuration should be reloaded and `ssl_passphrase_command` called during a server configuration reload.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add storage parameter [toast\\_tuple\\_target](https://www.postgresql.org/docs/11/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS \"Storage Parameters\") to control the minimum tuple length before TOAST storage will be considered",
      "description": "The default TOAST threshold has not been changed.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Simon Riggs"
      ]
    },
    {
      "title": "Allow server options related to memory and file sizes to be specified in units of bytes",
      "description": "The new unit suffix is “B”. This is in addition to the existing units “kB”, “MB”, “GB” and “TB”.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Beena Emerson"
      ]
    },
    {
      "title": "Allow the WAL file size to be set during initdb",
      "description": "Previously, the 16MB default could only be changed at compile time.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Beena Emerson"
      ]
    },
    {
      "title": "Retain WAL data for only a single checkpoint",
      "description": "Previously, WAL was retained for two checkpoints.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Simon Riggs"
      ]
    },
    {
      "title": "Replicate `TRUNCATE` activity when using logical replication",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Simon Riggs",
        "Marco Nenciarini",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Pass prepared transaction information to logical replication subscribers",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Nikhil Sontakke",
        "Stas Kelvich"
      ]
    },
    {
      "title": "Exclude unlogged tables, temporary tables, and `pg_internal.init` files from streaming base backups",
      "description": "There is no need to copy such files.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "David Steele"
      ]
    },
    {
      "title": "Allow checksums of heap pages to be verified during streaming base backup",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Banck"
      ]
    },
    {
      "title": "Add timeline information to the [backup\\_label](https://www.postgresql.org/docs/11/continuous-archiving.html#BACKUP-LOWLEVEL-BASE-BACKUP \"25.3.3. Making a Base Backup Using the Low Level API\") file",
      "description": "Also add a check that the WAL timeline matches the `backup_label` file's timeline.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add host and port connection information to the `pg_stat_wal_receiver` system view",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Allow `ALTER TABLE` to add a column with a non-null default without doing a table rewrite",
      "description": "This is enabled when the default value is a constant.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Andrew Dunstan",
        "Serge Rielau"
      ]
    },
    {
      "title": "Allow views to be locked by locking the underlying tables",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Yugo Nagata"
      ]
    },
    {
      "title": "Allow `ALTER INDEX` to set statistics-gathering targets for expression indexes",
      "description": "In psql, `\\d+` now shows the statistics target for indexes.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Alexander Korotkov",
        "Adrien Nayrat"
      ]
    },
    {
      "title": "Allow multiple tables to be specified in one `VACUUM` or `ANALYZE` command",
      "description": "Also, if any table mentioned in `VACUUM` uses a column list, then the `ANALYZE` keyword must be supplied; previously, `ANALYZE` was implied in such cases.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Nathan Bossart"
      ]
    },
    {
      "title": "Add parenthesized options syntax to `ANALYZE`",
      "description": "This is similar to the syntax supported by `VACUUM`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Nathan Bossart"
      ]
    },
    {
      "title": "Add `CREATE AGGREGATE` option to specify the behavior of the aggregate's finalization function",
      "description": "This is helpful for allowing user-defined aggregate functions to be optimized and to work as window functions.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow the creation of arrays of domains",
      "description": "This also allows `array_agg()` to be used on domains.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add casts from `JSONB` scalars to numeric and boolean data types",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Anastasia Lubennikova"
      ]
    },
    {
      "title": "Add support for 64-bit non-cryptographic hash functions",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Robert Haas",
        "Amul Sul"
      ]
    },
    {
      "title": "Allow `to_char()` and `to_timestamp()` to specify the time zone's offset from UTC in hours and minutes",
      "description": "This is done with format specifications [TZH](https://www.postgresql.org/docs/11/functions-formatting.html#FUNCTIONS-FORMATTING-DATETIME-TABLE \"Table 9.24. Template Patterns for Date/Time Formatting\") and `TZM`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Nikita Glukhov",
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Add text search function [websearch\\_to\\_tsquery()](https://www.postgresql.org/docs/11/functions-textsearch.html#TEXTSEARCH-FUNCTIONS-TABLE \"Table 9.41. Text Search Functions\") that supports a query syntax similar to that used by web search engines",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Victor Drobny",
        "Dmitry Ivanov"
      ]
    },
    {
      "title": "Add functions [json(b)\\_to\\_tsvector()](https://www.postgresql.org/docs/11/functions-textsearch.html#TEXTSEARCH-FUNCTIONS-TABLE \"Table 9.41. Text Search Functions\") to create a text search query for matching `JSON`/`JSONB` values",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Dmitry Dolgov"
      ]
    },
    {
      "title": "Add SQL-level procedures, which can start and commit their own transactions",
      "description": "They are created with the new [CREATE PROCEDURE](https://www.postgresql.org/docs/11/sql-createprocedure.html \"CREATE PROCEDURE\") command and invoked via [CALL](https://www.postgresql.org/docs/11/sql-call.html \"CALL\").\n\nThe new `ALTER`/`DROP ROUTINE` commands allow altering/dropping of all routine-like objects, including procedures, functions, and aggregates.\n\nAlso, writing `FUNCTION` is now preferred over writing `PROCEDURE` in `CREATE OPERATOR` and `CREATE TRIGGER`, because the referenced object must be a function not a procedure. However, the old syntax is still accepted for compatibility.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add transaction control to PL/pgSQL, PL/Perl, PL/Python, PL/Tcl, and SPI server-side languages",
      "description": "Transaction control is only available within top-transaction-level procedures and nested `DO` and `CALL` blocks that only contain other `DO` and `CALL` blocks.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add the ability to define PL/pgSQL composite-type variables as not null, constant, or with initial values",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow PL/pgSQL to handle changes to composite types (e.g., record, row) that happen between the first and later function executions in the same session",
      "description": "Previously, such circumstances generated errors.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add extension `jsonb_plpython` to transform `JSONB` to/from PL/Python types",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Anthony Bykov"
      ]
    },
    {
      "title": "Add extension `jsonb_plperl` to transform `JSONB` to/from PL/Perl types",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Anthony Bykov"
      ]
    },
    {
      "title": "Change libpq to disable compression by default",
      "description": "Compression is already disabled in modern OpenSSL versions, so that the libpq setting had no effect with such libraries.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add `DO CONTINUE` option to ecpg's `WHENEVER` statement",
      "description": "This generates a C `continue` statement, causing a return to the top of the contained loop when the specified condition occurs.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Vinayak Pokale"
      ]
    },
    {
      "title": "Add an ecpg mode to enable Oracle Pro\\*C-style handling of char arrays.",
      "description": "This mode is enabled with `-C`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add psql command `\\gdesc` to display the names and types of the columns in a query result",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Pavel Stehule"
      ]
    },
    {
      "title": "Add psql variables to report query activity and errors",
      "description": "Specifically, the new variables are `ERROR`, `SQLSTATE`, `ROW_COUNT`, `LAST_ERROR_MESSAGE`, and `LAST_ERROR_SQLSTATE`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Allow psql to test for the existence of a variable",
      "description": "Specifically, the syntax `:{?variable_name}` allows a variable's existence to be tested in an `\\if` statement.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Allow environment variable `PSQL_PAGER` to control psql's pager",
      "description": "This allows psql's default pager to be specified as a separate environment variable from the pager for other applications. `PAGER` is still honored if `PSQL_PAGER` is not set.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Pavel Stehule"
      ]
    },
    {
      "title": "Make psql's `\\d+` command always show the table's partitioning information",
      "description": "Previously, partition information would not be displayed for a partitioned table if it had no partitions. Also indicate which partitions are themselves partitioned.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Ashutosh Bapat"
      ]
    },
    {
      "title": "Ensure that psql reports the proper user name when prompting for a password",
      "description": "Previously, combinations of `-U` and a user name embedded in a URI caused incorrect reporting. Also suppress the user name before the password prompt when `--password` is specified.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow `quit` and `exit` to exit psql when given with no prior input",
      "description": "Also print hints about how to exit when `quit` and `exit` are used alone on a line while the input buffer is not empty. Add a similar hint for `help`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Make psql hint at using control-D when `\\q` is entered alone on a line but ignored",
      "description": "For example, `\\q` does not exit when supplied in character strings.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Add infrastructure to allow psql to adapt its tab completion queries based on the server version",
      "description": "Previously, tab completion queries could fail against older servers.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add pgbench expression support for NULLs, booleans, and some functions and operators",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Add `\\if` conditional support to pgbench",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Allow the use of non-ASCII characters in pgbench variable names",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Add pgbench option `--init-steps` to control the initialization steps performed",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Add an approximately Zipfian-distributed random generator to pgbench",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Alik Khilazhev"
      ]
    },
    {
      "title": "Allow the random seed to be set in pgbench",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Allow pgbench to do exponentiation with `pow()` and `power()`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Raúl Marín Rodríguez"
      ]
    },
    {
      "title": "Add hashing functions to pgbench",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Ildar Musin"
      ]
    },
    {
      "title": "Make pgbench statistics more accurate when using `--latency-limit` and `--rate`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Add an option to [pg\\_basebackup](https://www.postgresql.org/docs/11/app-pgbasebackup.html \"pg_basebackup\") that creates a named replication slot",
      "description": "The option `--create-slot` creates the named replication slot (`--slot`) when the WAL streaming method (`--wal-method=stream`) is used.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Banck"
      ]
    },
    {
      "title": "Allow [initdb](https://www.postgresql.org/docs/11/app-initdb.html \"initdb\") to set group read access to the data directory",
      "description": "This is accomplished with the new initdb option `--allow-group-access`. Administrators can also set group permissions on the empty data directory before running initdb. Server variable [data\\_directory\\_mode](https://www.postgresql.org/docs/11/runtime-config-file-locations.html#GUC-DATA-DIRECTORY) allows reading of data directory group permissions.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "David Steele"
      ]
    },
    {
      "title": "Add [pg\\_verify\\_checksums](https://www.postgresql.org/docs/11/pgverifychecksums.html \"pg_verify_checksums\") tool to verify database checksums while offline",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Allow [pg\\_resetwal](https://www.postgresql.org/docs/11/app-pgresetwal.html \"pg_resetwal\") to change the WAL segment size via `--wal-segsize`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Nathan Bossart"
      ]
    },
    {
      "title": "Add long options to pg\\_resetwal and pg\\_controldata",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Nathan Bossart",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add [pg\\_receivewal](https://www.postgresql.org/docs/11/app-pgreceivewal.html \"pg_receivewal\") option `--no-sync` to prevent synchronous WAL writes, for testing",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add pg\\_receivewal option `--endpos` to specify when WAL receiving should stop",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow [pg\\_ctl](https://www.postgresql.org/docs/11/app-pg-ctl.html \"pg_ctl\") to send the `SIGKILL` signal to processes",
      "description": "This was previously unsupported due to concerns over possible misuse.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Prevent pg\\_rewind from running as `root`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add pg\\_dumpall option `--encoding` to control output encoding",
      "description": "pg\\_dump already had this option.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add pg\\_dump option `--load-via-partition-root` to force loading of data into the partition's root table, rather than the original partition",
      "description": "This is useful if the system to be loaded to has different collation definitions or endianness, possibly requiring rows to be stored in different partitions than previously.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Rushabh Lathia"
      ]
    },
    {
      "title": "Add an option to suppress dumping and restoring database object comments",
      "description": "The new pg\\_dump, pg\\_dumpall, and pg\\_restore option is `--no-comments`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Robins Tharakan"
      ]
    },
    {
      "title": "Add PGXS support for installing include files",
      "description": "This supports creating extension modules that depend on other modules. Formerly there was no easy way for the dependent module to find the referenced one's include files. Several existing `contrib` modules that define data types have been adjusted to install relevant files. Also, PL/Perl and PL/Python now install their include files, to support creation of transform modules for those languages.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Install `errcodes.txt` to allow extensions to access the list of error codes known to PostgreSQL",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Convert documentation to DocBook XML",
      "description": "The file names still use an `sgml` extension for compatibility with back branches.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut",
        "Alexander Lakhin",
        "Jürgen Purtz"
      ]
    },
    {
      "title": "Use `stdbool.h` to define type `bool` on platforms where it's suitable, which is most",
      "description": "This eliminates a coding hazard for extension modules that need to include `stdbool.h`.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Overhaul the way that initial system catalog contents are defined",
      "description": "The initial data is now represented in Perl data structures, making it much easier to manipulate mechanically.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "John Naylor"
      ]
    },
    {
      "title": "Prevent extensions from creating custom server parameters that take a quoted list of values",
      "description": "This cannot be supported at present because knowledge of the parameter's property would be required even before the extension is loaded.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add ability to use channel binding when using [SCRAM](https://www.postgresql.org/docs/11/auth-password.html \"20.5. Password Authentication\") authentication",
      "description": "Channel binding is intended to prevent man-in-the-middle attacks, but SCRAM cannot prevent them unless it can be forced to be active. Unfortunately, there is no way to do that in libpq. Support for it is expected in future versions of libpq and in interfaces not built using libpq, e.g., JDBC.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow background workers to attach to databases that normally disallow connections",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Add support for hardware CRC calculations on ARMv8",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Yuqi Gu",
        "Heikki Linnakangas",
        "Thomas Munro"
      ]
    },
    {
      "title": "Make the computation of `pg_class`.`reltuples` by `VACUUM` consistent with its computation by `ANALYZE`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Update to use perltidy version `20170521`",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Allow extension [pg\\_prewarm](https://www.postgresql.org/docs/11/pgprewarm.html \"F.27. pg_prewarm\") to restore the previous shared buffer contents on startup",
      "description": "This is accomplished by having `pg_prewarm` store the shared buffers' relation and block number data to disk occasionally during server operation, and at shutdown.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Mithun Cy",
        "Robert Haas"
      ]
    },
    {
      "title": "Add [pg\\_trgm](https://www.postgresql.org/docs/11/pgtrgm.html \"F.31. pg_trgm\") function `strict_word_similarity()` to compute the similarity of whole words",
      "description": "The function `word_similarity()` already existed for this purpose, but it was designed to find similar parts of words, while `strict_word_similarity()` computes the similarity to whole words.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Allow [btree\\_gin](https://www.postgresql.org/docs/11/btree-gin.html \"F.6. btree_gin\") to index `bool`, `bpchar`, `name` and `uuid` data types",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Matheus Oliveira"
      ]
    },
    {
      "title": "Allow [cube](https://www.postgresql.org/docs/11/cube.html \"F.9. cube\") and [seg](https://www.postgresql.org/docs/11/seg.html \"F.34. seg\") extensions to perform index-only scans using GiST indexes",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "Allow retrieval of negative cube coordinates using the `~>` operator",
      "description": "This is useful for KNN-GiST searches when looking for coordinates in descending order.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Add Vietnamese letter handling to the [unaccent](https://www.postgresql.org/docs/11/unaccent.html \"F.43. unaccent\") extension",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Dang Minh Huong",
        "Michael Paquier"
      ]
    },
    {
      "title": "Have [adminpack](https://www.postgresql.org/docs/11/adminpack.html \"F.1. adminpack\") use the new default file system access roles",
      "description": "Previously, only superusers could call `adminpack` functions; now role permissions are checked.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Stephen Frost"
      ]
    },
    {
      "title": "Remove the `contrib/start-scripts/osx` scripts since they are no longer recommended (use `contrib/start-scripts/macos` instead)",
      "description": "",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove the `chkpass` extension",
      "description": "This extension is no longer considered to be a usable security tool or example of how to write an extension.",
      "fixedIn": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Apply the tablespace specified for a partitioned index when creating a child index",
      "description": "Previously, child indexes were always created in the default tablespace.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix NULL handling in parallel hashed multi-batch left joins",
      "description": "Outer-relation rows with null values of the hash key were omitted from the join result.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix incorrect processing of an array-type coercion expression appearing within a `CASE` clause that has a constant test expression",
      "description": "",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect expansion of tuples lacking recently-added columns",
      "description": "This is known to lead to crashes in triggers on tables with recently-added columns, and could have other symptoms as well.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Andrew Dunstan",
        "Amit Langote"
      ]
    },
    {
      "title": "Fix bugs with named or defaulted arguments in `CALL` argument lists",
      "description": "",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Pavel Stehule"
      ]
    },
    {
      "title": "Fix strictness check for strict aggregates with `ORDER BY` columns",
      "description": "The strictness logic incorrectly ignored rows for which the `ORDER BY` value(s) were null.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Andres Freund"
      ]
    },
    {
      "title": "Disable `recheck_on_update` optimization",
      "description": "This new-in-v11 feature turns out not to have been ready for prime time. Disable it until something can be done about it.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent creation of a partition in a trigger attached to its parent table",
      "description": "Ideally we'd allow that, but for the moment it has to be blocked to avoid crashes.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix problems with applying `ON COMMIT DELETE ROWS` to a partitioned temporary table",
      "description": "",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix character-class checks to not fail on Windows for Unicode characters above U+FFFF",
      "description": "This bug affected full-text-search operations, as well as `contrib/ltree` and `contrib/pg_trgm`.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Kenji Uno"
      ]
    },
    {
      "title": "Ensure that the server will process already-received `NOTIFY` and `SIGTERM` interrupts before waiting for client input",
      "description": "",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Jeff Janes",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix memory leak in repeated SP-GiST index scans",
      "description": "This is only known to amount to anything significant in cases where an exclusion constraint using SP-GiST receives many new index entries in a single command.",
      "fixedIn": "11.1",
      "significant": true,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent starting the server with `wal_level` set to too low a value to support an existing replication slot",
      "description": "",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix psql, as well as documentation examples, to call `PQconsumeInput()` before each `PQnotifies()` call",
      "description": "This fixes cases in which psql would not report receipt of a `NOTIFY` message until after the next command.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_verify\\_checksums's determination of which files to check the checksums of",
      "description": "In some cases it complained about files that are not expected to have checksums.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In `contrib/pg_stat_statements`, disallow the `pg_read_all_stats` role from executing `pg_stat_statements_reset()`",
      "description": "`pg_read_all_stats` is only meant to grant permission to read statistics, not to change them, so this grant was incorrect.\n\nTo cause this change to take effect, run `ALTER EXTENSION pg_stat_statements UPDATE` in each database where `pg_stat_statements` has been installed. (A database freshly created in 11.0 should not need this, but a database upgraded from a previous release probably still contains the old version of `pg_stat_statements`. The `UPDATE` command is harmless if the module was already updated.)",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Rename red-black tree support functions to use `rbt` prefix not `rb` prefix",
      "description": "This avoids name collisions with Ruby functions, which broke PL/Ruby. It's hoped that there are no other affected extensions.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix build problems on macOS 10.14 (Mojave)",
      "description": "Adjust configure to add an `-isysroot` switch to `CPPFLAGS`; without this, PL/Perl and PL/Tcl fail to configure or build on macOS 10.14\\. The specific sysroot used can be overridden at configure time or build time by setting the `PG_SYSROOT` variable in the arguments of configure or make.\n\nIt is now recommended that Perl-related extensions write `$(perl_includespec)` rather than `-I$(perl_archlibexp)/CORE` in their compiler flags. The latter continues to work on most platforms, but not recent macOS.\n\nAlso, it should no longer be necessary to specify `--with-tclconfig` manually to get PL/Tcl to build on recent macOS releases.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix MSVC build and regression-test scripts to work on recent Perl versions",
      "description": "Perl no longer includes the current directory in its search path by default; work around that.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "On Windows, allow the regression tests to be run by an Administrator account",
      "description": "To do this safely, pg\\_regress now gives up any such privileges at startup.",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2018g for DST law changes in Chile, Fiji, Morocco, and Russia (Volgograd), plus historical corrections for China, Hawaii, Japan, Macau, and North Korea.",
      "description": "",
      "fixedIn": "11.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent possible data loss from concurrent truncations of SLRU logs",
      "description": "This rare problem would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Ensure that SLRU directories are properly fsync'd during checkpoints",
      "description": "This prevents possible data loss in a subsequent operating system crash.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix `ALTER ROLE` for users with the `BYPASSRLS` attribute",
      "description": "The `BYPASSRLS` attribute is only allowed to be changed by superusers, but other `ALTER ROLE` operations, such as password changes, should be allowed with only ordinary permission checks. The previous coding erroneously restricted all changes on such a role to superusers.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Stephen Frost"
      ]
    },
    {
      "title": "Ensure that `ALTER TABLE ONLY ... ENABLE/DISABLE TRIGGER` does not recurse to child tables",
      "description": "Previously the `ONLY` flag was ignored.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix handling of expressions in `CREATE TABLE LIKE` with inheritance",
      "description": "If a `CREATE TABLE` command uses both `LIKE` and traditional inheritance, column references in `CHECK` constraints and expression indexes that came from a `LIKE` parent table tended to get mis-numbered, resulting in wrong answers and/or bizarre error messages. The same could happen in `GENERATED` expressions, in branches that have that feature.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow `DROP INDEX CONCURRENTLY` on a partitioned table",
      "description": "This case failed anyway, but with a confusing error message.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow `LOCK TABLE` to succeed on a self-referential view",
      "description": "It previously threw an error complaining about infinite recursion, but there seems no need to disallow the case.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix off-by-one conversion of negative years to BC dates in `to_date()` and `to_timestamp()`",
      "description": "Also, arrange for the combination of a negative year and an explicit “BC” marker to cancel out and produce AD.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Dar Alathar-Yemen",
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that standby servers will archive WAL timeline history files when `archive_mode` is set to `always`",
      "description": "This oversight could lead to failure of subsequent PITR recovery attempts.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Grigory Smolkin",
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix “cache lookup failed for relation 0” failures in logical replication workers",
      "description": "The real-world impact is small, since the failure is unlikely, and if it does happen the worker would just exit and be restarted.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent logical replication workers from sending redundant ping requests",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "During “smart” shutdown, don't terminate background processes until all client (foreground) sessions are done",
      "description": "The previous behavior broke parallel query processing, since the postmaster would terminate parallel workers and refuse to launch any new ones. It also caused autovacuum to cease functioning, which could have dire long-term effects if the surviving client sessions make a lot of data changes.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid recursive consumption of stack space while processing signals in the postmaster",
      "description": "Heavy use of parallel processing has been observed to cause postmaster crashes due to too many concurrent signals requesting creation of a parallel worker process.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid running atexit handlers when exiting due to SIGQUIT",
      "description": "Most server processes followed this practice already, but the archiver process was overlooked. Backends that were still waiting for a client startup packet got it wrong, too.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid misoptimization of subquery qualifications that reference apparently-constant grouping columns",
      "description": "A “constant” subquery output column isn't really constant if it is a grouping column that appears in only some of the grouping sets.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid failure when SQL function inlining changes the shape of a potentially-hashable subplan comparison expression",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "While building or re-building an index, tolerate the appearance of new HOT chains due to concurrent updates",
      "description": "This oversight could lead to “failed to find parent tuple for heap-only tuple” errors.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Anastasia Lubennikova",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix failure of parallel B-tree index scans when the index condition is unsatisfiable",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "James Hunter"
      ]
    },
    {
      "title": "Ensure that data is detoasted before being inserted into a BRIN index",
      "description": "Index entries are not supposed to contain out-of-line TOAST pointers, but BRIN didn't get that memo. This could lead to errors like “missing chunk number 0 for toast value NNN”. (If you are faced with such an error from an existing index, `REINDEX` should be enough to fix it.)",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Handle concurrent desummarization correctly during BRIN index scans",
      "description": "Previously, if a page range was desummarized at just the wrong time, an index scan might falsely raise an error indicating index corruption.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Alexander Lakhin",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix rare “lost saved point in index” errors in scans of multicolumn GIN indexes",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix unportable use of `getnameinfo()` in `pg_hba_file_rules` view",
      "description": "On FreeBSD 11, and possibly other platforms, the view's `address` and `netmask` columns were always null due to this error.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid crash if `debug_query_string` is NULL when starting a parallel worker",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix use-after-free hazard when an event trigger monitors an `ALTER TABLE` operation",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais"
      ]
    },
    {
      "title": "Fix incorrect error message about inconsistent moving-aggregate data types",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Jeff Janes"
      ]
    },
    {
      "title": "Avoid lockup when a parallel worker reports a very long error message",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Vignesh C"
      ]
    },
    {
      "title": "Avoid unnecessary failure when transferring very large payloads through shared memory queues",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Markus Wanner"
      ]
    },
    {
      "title": "Fix incorrect handling of template function attributes in JIT code generation",
      "description": "This has been shown to cause crashes on `s390x`, and very possibly there are other cases on other platforms.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix relation cache memory leaks with RLS policies",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix memory leaks in PL/pgsql's `CALL` processing",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Pavel Stehule",
        "Tom Lane"
      ]
    },
    {
      "title": "Make libpq support arbitrary-length lines in `.pgpass` files",
      "description": "This is mostly useful to allow using very long security tokens as passwords.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In libpq for Windows, call `WSAStartup()` once per process and `WSACleanup()` not at all",
      "description": "Previously, libpq invoked `WSAStartup()` at connection start and `WSACleanup()` at connection cleanup. However, it appears that calling `WSACleanup()` can interfere with other program operations; notably, we have observed rare failures to emit expected output to stdout. There appear to be no ill effects from omitting the call, so do that. (This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections.)",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Fix ecpg library's per-thread initialization logic for Windows",
      "description": "Multi-threaded ecpg applications could suffer rare misbehavior due to incorrect locking.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Alexander Lakhin"
      ]
    },
    {
      "title": "On Windows, make psql read the output of a backtick command in text mode, not binary mode",
      "description": "This ensures proper handling of newlines.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that pg\\_dump collects per-column information about extension configuration tables",
      "description": "Failure to do this led to crashes when specifying `--inserts`, or underspecified (though usually correct) `COPY` commands when using `COPY` to reload the tables' data.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Fabrízio de Royes Mello",
        "Tom Lane"
      ]
    },
    {
      "title": "Make pg\\_upgrade check for pre-existence of tablespace directories in the target cluster",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Fix potential memory leak in `contrib/pgcrypto`",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Add check for an unlikely failure case in `contrib/pgcrypto`",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Daniel Gustafsson"
      ]
    },
    {
      "title": "Fix recently-added `timetz` test case so it works when the USA is not observing daylight savings time",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station (Antarctica); plus historical corrections for France, Hungary, Monaco, and Palestine.",
      "description": "",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2020d",
      "description": "This absorbs upstream's change of zic's default output option from “fat” to “slim”. That's just cosmetic for our purposes, as we continue to select the “fat” mode in pre-v13 branches. This change also ensures that `strftime()` does not change `errno` unless it fails.",
      "fixedIn": "11.10",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `CREATE INDEX CONCURRENTLY` to wait for concurrent prepared transactions",
      "description": "At the point where `CREATE INDEX CONCURRENTLY` waits for all concurrent transactions to complete so that it can see rows they inserted, it must also wait for all prepared transactions to complete, for the same reason. Its failure to do so meant that rows inserted by prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. In installations that have enabled prepared transactions (`max_prepared_transactions` \\> 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "Avoid crash when a `CALL` or `DO` statement that performs a transaction rollback is executed via extended query protocol",
      "description": "In PostgreSQL 13, this case reliably caused a null-pointer dereference. In earlier versions the bug seems to have no visible symptoms, but it's not quite clear that it could never cause a problem.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix partition pruning logic to handle asymmetric hash partition sets",
      "description": "If a hash-partitioned table has unequally-sized partitions (that is, varying modulus values), or it lacks partitions for some remainder values, then the planner's pruning logic could mistakenly conclude that some partitions don't need to be scanned, leading to failure to find rows that the query should find.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node",
      "description": "This case is unsupported (in general, a cursor using `ORDER BY` is not guaranteed to be simply updatable); but the code previously did not reject it, and could silently give false matches.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "David Geier"
      ]
    },
    {
      "title": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level",
      "description": "This oversight could lead to “failed to build any _`N`_\\-way joins” planner errors.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Be more careful about whether index AMs support mark/restore",
      "description": "This prevents errors about missing support functions in rare edge cases.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Adjust settings to make it more difficult to run out of DSM slots during heavy usage of parallel queries",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix overestimate of the amount of shared memory needed for parallel queries",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Takayuki Tsunakawa"
      ]
    },
    {
      "title": "Fix `ALTER DEFAULT PRIVILEGES` to handle duplicated arguments safely",
      "description": "Duplicate role or schema names within the same command could lead to “tuple already updated by self” errors or unique-constraint violations.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Flush ACL-related caches when `pg_authid` changes",
      "description": "This change ensures that permissions-related decisions will promptly reflect the results of `ALTER ROLE ... [NO] INHERIT`.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Prevent misprocessing of ambiguous `CREATE TABLE LIKE` clauses",
      "description": "A `LIKE` clause is re-examined after initial creation of the new table, to handle importation of indexes and such. It was possible for this re-examination to find a different table of the same name, causing unexpected behavior; one example is where the new table is a temporary table of the same name as the `LIKE` target.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Rearrange order of operations in `CREATE TABLE LIKE` so that indexes are cloned before building foreign key constraints",
      "description": "This fixes the case where a self-referential foreign key constraint declared in the outer `CREATE TABLE` depends on an index that's coming from the `LIKE` clause.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow `CREATE STATISTICS` on system catalogs",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Disallow converting an inheritance child table to a view",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that disk space allocated for a dropped relation is released promptly at commit",
      "description": "Previously, if the dropped relation spanned multiple 1GB segments, only the first segment was truncated immediately. Other segments were simply unlinked, which doesn't authorize the kernel to release the storage so long as any other backends still have the files open.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Prevent dropping a tablespace that is referenced by a partitioned relation, but is not used for any actual storage",
      "description": "Previously this was allowed, but subsequent operations on the partitioned relation would fail.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix handling of backslash-escaped multibyte characters in `COPY FROM`",
      "description": "A backslash followed by a multibyte character was not handled correctly. In some client character encodings, this could lead to misinterpreting part of a multibyte character as a field separator or end-of-copy-data marker.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Avoid preallocating executor hash tables in `EXPLAIN` without `ANALYZE`",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Alexey Bashtanov"
      ]
    },
    {
      "title": "Fix recently-introduced race conditions in `LISTEN`/`NOTIFY` queue handling",
      "description": "A newly-listening backend could attempt to read SLRU pages that were in process of being truncated, possibly causing an error.\n\nThe queue tail pointer could become set to a value that's not equal to the queue position of any backend, resulting in effective disabling of the queue truncation logic. Continued use of `NOTIFY` then led to queue-fill warnings, and eventually to inability to send any more notifies until the server is restarted.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow the `jsonb` concatenation operator to handle all combinations of JSON data types",
      "description": "We can concatenate two JSON objects or two JSON arrays. Handle other cases by wrapping non-array inputs in one-element arrays, then performing an array concatenation. Previously, some combinations of inputs followed this rule but others arbitrarily threw an error.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression",
      "description": "This error could cause the quantifier to act non-greedy, that is behave like a `*?` quantifier would do in full regular expressions.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix numeric `power()` for the case where the exponent is exactly `INT_MIN` (-2147483648)",
      "description": "Previously, a result with no significant digits was produced.",
      "fixedIn": "11.11",
      "significant": true,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix integer-overflow cases in `substring()` functions",
      "description": "If the specified starting index and length overflow an integer when added together, `substring()` misbehaved, either throwing a bogus “negative substring length” error for a case that should succeed, or failing to complain that a negative length is negative (and instead returning the whole string, in most cases).",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Pavel Stehule"
      ]
    },
    {
      "title": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log",
      "description": "The wraparound point typically falls in the middle of a page, which must be rounded off to a page boundary, and that was not done correctly. No issue could arise unless an installation had gotten to within one page of SLRU overflow, which is unlikely in a properly-functioning system. If this did happen, it would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix memory leak in walsender processes while sending new snapshots for logical decoding",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Fix walsender to accept additional commands after terminating replication",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Jeff Davis"
      ]
    },
    {
      "title": "Ensure detection of deadlocks between hot standby backends and the startup (WAL-application) process",
      "description": "The startup process did not run the deadlock detection code, so that in situations where the startup process is last to join a circular wait situation, the deadlock might never be recognized.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence",
      "description": "Previously, there was a race condition whereby a child process that had requested a background worker just before shutdown could wait indefinitely, preventing shutdown from completing.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix portability problem in parsing of `recovery_target_xid` values",
      "description": "The target XID is potentially 64 bits wide, but it was parsed with `strtoul()`, causing misbehavior on platforms where `long` is 32 bits (such as Windows).",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid trying to use parallel index build in a standalone backend",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Yulin Pei"
      ]
    },
    {
      "title": "Allow index AMs to support included columns without necessarily supporting multiple key columns",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid assertion failure during parallel aggregation of an aggregate with a non-strict deserialization function",
      "description": "No such aggregate functions exist in core PostgreSQL, but some extensions such as PostGIS provide some. The mistake is harmless anyway in a non-assert build.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Avoid assertion failure in `pg_get_functiondef()` when examining a function with a `TRANSFORM` option",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix data structure misallocation in PL/pgSQL's `CALL` statement",
      "description": "A `CALL` in a PL/pgSQL procedure, to another procedure that has OUT parameters, would fail if the called procedure did a `COMMIT` or `ROLLBACK`.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In psql, re-allow including a password in a _`connectionstring`_ argument of a `\\connect` command",
      "description": "This used to work, but a recent bug fix caused the password to be ignored (resulting in prompting for a password).",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix assorted bugs in psql's `\\help` command",
      "description": "`\\help` with two argument words failed to find a command description using only the first word, for example `\\help reset all` should show the help for `RESET` but did not. Also, `\\help` often failed to invoke the pager when it should. It also leaked memory.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Tom Lane"
      ]
    },
    {
      "title": "In pg\\_dump, ensure that the restore script runs `ALTER PUBLICATION ADD TABLE` commands as the owner of the publication, and similarly runs `ALTER INDEX ATTACH PARTITION` commands as the owner of the partitioned index",
      "description": "Previously, these commands would be run by the role that started the restore script; which will usually work, but in corner cases that role might not have adequate permissions.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_dump to handle `WITH GRANT OPTION` in an extension's initial privileges",
      "description": "If an extension's script creates an object and grants privileges on it with grant option, then later the user revokes such privileges, pg\\_dump would generate incorrect SQL for reproducing the situation. (Few if any extensions do this today.)",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "In pg\\_rewind, ensure that all WAL is accounted for when rewinding a standby server",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Ian Barwick",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "In pgbench, disallow a digit as the first character of a variable name",
      "description": "This prevents trying to substitute variables into timestamp literal values, which may contain strings like `12:34`.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Report the correct database name in connection failure error messages from some client programs",
      "description": "If the database name was defaulted rather than given on the command line, pg\\_dumpall, pgbench, oid2name, and vacuumlo would produce misleading error messages after a connection failure.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix memory leak in `contrib/auto_explain`",
      "description": "Memory consumed while producing the `EXPLAIN` output was not freed until the end of the current transaction (for a top-level statement) or the end of the surrounding statement (for a nested statement). This was particularly a problem with `log_nested_statements` enabled.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Japin Li"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped",
      "description": "Open connections that depend on a dropped user mapping or foreign server can no longer be referenced, but formerly they were kept around anyway for the duration of the local session.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Bharath Rupireddy"
      ]
    },
    {
      "title": "In `contrib/pgcrypto`, check for error returns from OpenSSL's EVP functions",
      "description": "We do not really expect errors here, but this change silences warnings from static analysis tools.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Make `contrib/pg_prewarm` more robust when the cluster is shut down before prewarming is complete",
      "description": "Previously, autoprewarm would rewrite its status file with only the block numbers that it had managed to load so far, thus perhaps largely disabling the prewarm functionality in the next startup. Instead, suppress status file updates until the initial loading pass is complete.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `contrib/pg_trgm`'s GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix miscalculation of timeouts in `contrib/pg_prewarm` and `contrib/postgres_fdw`",
      "description": "The main loop in `contrib/pg_prewarm`'s autoprewarm parent process underestimated its desired sleep time by a factor of 1000, causing it to consume much more CPU than intended. When waiting for a result from a remote server, `contrib/postgres_fdw` overestimated the desired timeout by a factor of 1000 (though this error had been mitigated by imposing a clamp to 60 seconds).\n\nBoth of these errors stemmed from incorrectly converting seconds-and-microseconds to milliseconds. Introduce a new API `TimestampDifferenceMilliseconds()` to make it easier to get this right in the future.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Alexey Kondratov",
        "Tom Lane"
      ]
    },
    {
      "title": "Improve configure's heuristics for selecting `PG_SYSROOT` on macOS",
      "description": "The new method is more likely to produce desirable results when Xcode is newer than the underlying operating system. Choosing a sysroot that does not match the OS version may result in nonfunctional executables.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "While building on macOS, specify `-isysroot` in link steps as well as compile steps",
      "description": "This likewise improves the results when Xcode is out of sync with the operating system.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "James Hilliard"
      ]
    },
    {
      "title": "Fix JIT compilation to be compatible with LLVM 11 and LLVM 12",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix potential mishandling of references to boolean variables in JIT expression compilation",
      "description": "No field reports attributable to this have been seen, but it seems likely that it could cause problems on some architectures.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix compile failure with ICU 68 and later",
      "description": "",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid `memcpy()` with a NULL source pointer and zero count during partitioned index creation",
      "description": "While such a call is not known to cause problems in itself, some compilers assume that the arguments of `memcpy()` are never NULL, which could result in incorrect optimization of nearby code.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2021a for DST law changes in Russia (Volgograd zone) and South Sudan, plus historical corrections for Australia, Bahamas, Belize, Bermuda, Ghana, Israel, Kenya, Nigeria, Palestine, Seychelles, and Vanuatu.",
      "description": "Notably, the Australia/Currie zone has been corrected to the point where it is identical to Australia/Hobart.",
      "fixedIn": "11.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix adjustment of constraint deferrability properties in partitioned tables",
      "description": "When applied to a foreign-key constraint of a partitioned table, `ALTER TABLE ... ALTER CONSTRAINT` failed to adjust the `DEFERRABLE` and/or `INITIALLY DEFERRED` markings of the constraints and triggers of leaf partitions. This led to unexpected behavior of such constraints. After updating to this version, any misbehaving partitioned tables can be fixed by executing a new `ALTER` command to set the desired properties.\n\nThis change also disallows applying such an `ALTER` directly to the constraints of leaf partitions. The only supported case is for the whole partitioning hierarchy to have identical constraint properties, so such `ALTER`s must be applied at the partition root.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Forbid marking an identity column as nullable",
      "description": "`GENERATED ... AS IDENTITY` implies `NOT NULL`, so don't allow it to be combined with an explicit `NULL` specification.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Vik Fearing"
      ]
    },
    {
      "title": "Allow `ALTER ROLE/DATABASE ... SET` to set the `role`, `session_authorization`, and `temp_buffers` parameters",
      "description": "Previously, over-eager validity checks might reject these commands, even if the values would have worked when used later. This created a command ordering hazard for dump/reload and upgrade scenarios.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type",
      "description": "This led to a parse tree in which the `COLLATE` appears to be applied to a non-collatable value. While that normally has no real impact (since `COLLATE` has no effect at runtime), it was possible to construct views that would be rejected during dump/reload.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow calling window functions and procedures via the “fast path” wire protocol message",
      "description": "Only plain functions are supported here. While trying to call an aggregate function failed already, calling a window function would crash, and calling a procedure would work only if the procedure did no transaction control.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Extend `pg_identify_object_as_address()` to support event triggers",
      "description": "",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Joel Jacobson"
      ]
    },
    {
      "title": "Fix `to_char()`'s handling of Roman-numeral month format codes with negative intervals",
      "description": "Previously, such cases would usually cause a crash.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Check that the argument of `pg_import_system_collations()` is a valid schema OID",
      "description": "",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix use of uninitialized value while parsing an `` \\{_`m`_,_`n`_\\} `` quantifier in a BRE-mode regular expression",
      "description": "This error could cause the quantifier to act non-greedy, that is behave like an `` {_`m`_,_`n`_}? `` quantifier would do in full regular expressions.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Don't ignore system columns when estimating the number of groups using extended statistics",
      "description": "This led to strange estimates for queries such as `SELECT ... GROUP BY a, b, ctid`.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix",
      "description": "This typically led to a `NaN` selectivity value, causing assertion failures or strange planner behavior.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans",
      "description": "If the page range size used by a BRIN index isn't a power of two, there were corner cases in which a bitmap scan could try to fetch pages past the actual end of the table, leading to “could not open file” errors.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL",
      "description": "This error could lead to subsequent WAL records being written under the wrong timeline ID, leading to consistency problems, or even complete failure to be able to restart the server, later on.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Soumyadeep Chakraborty",
        "Jimmy Yih",
        "Kevin Yeap"
      ]
    },
    {
      "title": "Ensure that locks are released while shutting down a standby server's startup process",
      "description": "When a standby server is shut down while still in recovery, some locks might be left held. This causes assertion failures in debug builds; it's unclear whether any serious consequence could occur in production builds.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix crash when a logical replication worker does `ALTER SUBSCRIPTION REFRESH`",
      "description": "The core code won't do this, but a replica trigger could.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Peter Smith"
      ]
    },
    {
      "title": "Ensure we default to `wal_sync_method` \\= `fdatasync` on recent FreeBSD",
      "description": "FreeBSD 13 supports `open_datasync`, which would normally become the default choice. However, it's unclear whether that is actually an improvement for Postgres, so preserve the existing default for now.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Ensure we finish cleaning up when interrupted while detaching a DSM segment",
      "description": "This error could result in temporary files not being cleaned up promptly after a parallel query.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix memory leak while initializing server's SSL parameters",
      "description": "This is ordinarily insignificant, but if the postmaster is repeatedly sent SIGHUP signals, the leak can build up over time.",
      "fixedIn": "11.12",
      "significant": true,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix assorted minor memory leaks in the server",
      "description": "",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix failure when a PL/pgSQL `DO` block makes use of both composite-type variables and transaction control",
      "description": "Previously, such cases led to errors about leaked tuple descriptors.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received",
      "description": "",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "When initdb prints instructions about how to start the server, make the path shown for pg\\_ctl use backslash separators on Windows",
      "description": "",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Nitin Jadhav"
      ]
    },
    {
      "title": "Fix psql to restore the previous behavior of `` \\connect service=_`something`_ ``",
      "description": "A previous bug fix caused environment variables (such as `PGPORT`) to override entries in the service file in this context. Restore the previous behavior, in which the priority is the other way around.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix race condition in detection of file modification by psql's `\\e` and related commands",
      "description": "A very fast typist could fool the code's file-timestamp-based detection of whether the temporary edit file was changed.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Laurenz Albe"
      ]
    },
    {
      "title": "Fix missed file version check in pg\\_restore",
      "description": "When reading a custom-format archive from a non-seekable source, pg\\_restore neglected to check the archive version. If it was fed a newer archive version than it can support, it would fail messily later on.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add some more checks to pg\\_upgrade for user tables containing non-upgradable data types",
      "description": "Fix detection of some cases where a non-upgradable data type is embedded within a container type (such as an array or range). Also disallow upgrading when user tables contain columns of system-defined composite types, since those types' OIDs are not stable across versions.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_waldump to count `XACT` records correctly when generating per-record statistics",
      "description": "",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Fix `contrib/amcheck` to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set",
      "description": "This is a valid state after `SELECT FOR UPDATE`.",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions",
      "description": "",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix testing of PL/Python for Python 3 on Solaris",
      "description": "",
      "fixedIn": "11.12",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Restore the Portal-level snapshot after `COMMIT` or `ROLLBACK` within a procedure",
      "description": "This change fixes cases where an attempt to fetch a toasted value immediately after `COMMIT`/`ROLLBACK` would fail with errors like “no known snapshots” or “missing chunk number 0 for toast value”.\n\nSome extensions may attempt to execute SQL code outside of any Portal. They are responsible for ensuring that an outer snapshot exists before doing so. Previously, not providing a snapshot might work or it might not; now it will consistently fail with “cannot execute SQL without an outer snapshot or portal”.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid misbehavior when persisting the output of a cursor that's reading a non-stable query",
      "description": "Previously, we'd always rewind and re-read the whole query result, possibly getting results different from the earlier execution, causing great confusion later. For a NO SCROLL cursor, we can fix this by only storing the not-yet-read portion of the query output, which is sufficient since a NO SCROLL cursor can't be backed up. Cursors with the SCROLL option remain at hazard, but that was already documented to be an unsafe option to use with a non-stable query. Make those documentation warnings stronger.\n\nAlso force NO SCROLL mode for the implicit cursor used by a PL/pgSQL FOR-over-query loop, to avoid this type of problem when persisting such a cursor during an intra-procedure commit.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reject `SELECT ... GROUP BY GROUPING SETS (()) FOR UPDATE`",
      "description": "This should be disallowed, just as `FOR UPDATE` with a plain `GROUP BY` is disallowed, but the test for that failed to handle empty grouping sets correctly. The end result would be a null-pointer dereference in the executor.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reject cases where a query in `WITH` rewrites to just `NOTIFY`",
      "description": "Such cases previously crashed.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `numeric` multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix corner-case errors and loss of precision when raising `numeric` values to very large powers",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix division-by-zero failure in `to_char()` with `EEEE` format and a `numeric` input value less than 10^(-1001)",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix `pg_size_pretty(bigint)` to round negative values consistently with the way it rounds positive ones (and consistently with the `numeric` version)",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Dean Rasheed",
        "David Rowley"
      ]
    },
    {
      "title": "Make `pg_filenode_relation(0, 0)` return NULL rather than failing",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Make `ALTER EXTENSION` lock the extension when adding or removing a member object",
      "description": "The previous coding allowed `ALTER EXTENSION ADD/DROP` to occur concurrently with `DROP EXTENSION`, leading to a crash or corrupt catalog entries.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `ALTER SUBSCRIPTION` to reject an empty slot name",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Japin Li"
      ]
    },
    {
      "title": "When cloning a partitioned table's triggers to a new partition, ensure that their enabled status is copied",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Avoid alias conflicts in queries generated for `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "This command failed on materialized views containing columns with certain names, notably `mv` and `newdata`.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Bharath Rupireddy"
      ]
    },
    {
      "title": "Fix `PREPARE TRANSACTION` to check correctly for conflicting session-lifespan and transaction-lifespan locks",
      "description": "A transaction cannot be prepared if it has both session-lifespan and transaction-lifespan locks on the same advisory-lock ID value. This restriction was not fully checked, which could lead to a PANIC during `PREPARE TRANSACTION`.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix misbehavior of `DROP OWNED BY` when the target role is listed more than once in an RLS policy",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Skip unnecessary error tests when removing a role from an RLS policy during `DROP OWNED BY`",
      "description": "Notably, this fixes some cases where it was necessary to be a superuser to use `DROP OWNED BY`.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Don't store a “fast default” when adding a column to a foreign table",
      "description": "The fast default is useless since no local heap storage exists for such a table, but it confused subsequent operations. In addition to suppressing creation of such catalog entries in `ALTER TABLE` commands, adjust the downstream code to cope when one is incorrectly present.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Allow index state flags to be updated transactionally",
      "description": "This avoids failures when dealing with index predicates that aren't really immutable. While that's not considered a supported case, the original reason for using a non-transactional update here is long gone, so we may as well change it.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Andrey Lepikhov"
      ]
    },
    {
      "title": "Avoid corrupting the plan cache entry when `CREATE DOMAIN` or `ALTER DOMAIN` appears in a cached plan",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make walsenders show their latest replication commands in `pg_stat_activity`",
      "description": "Previously, a walsender would show its latest SQL command, which was confusing if it's now doing some replication operation instead. Now we show replication-protocol commands on the same footing as SQL commands.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make `pg_settings`.`pending_restart` show as true when the pertinent entry in `postgresql.conf` has been removed",
      "description": "`pending_restart` correctly showed the case where an entry that cannot be changed without a postmaster restart has been modified, but not where the entry had been removed altogether.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix corner-case failure of a new standby to follow a new primary",
      "description": "Under a narrow combination of conditions, the standby could wind up trying to follow the wrong WAL timeline.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Dilip Kumar",
        "Robert Haas"
      ]
    },
    {
      "title": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation",
      "description": "File truncation is irreversible, so it's no longer safe to stop recovery at a point earlier than that record. The corresponding case for transaction commit was fixed years ago, but this one was overlooked.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "In walreceivers, avoid attempting catalog lookups after an error",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Masahiko Sawada",
        "Bharath Rupireddy"
      ]
    },
    {
      "title": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Fujii Masao",
        "Soumyadeep Chakraborty"
      ]
    },
    {
      "title": "Correctly clear shared state after failing to become a member of a transaction commit group",
      "description": "Given the right timing, this could cause an assertion failure when some later session re-uses the same PGPROC object.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Improve checks for violations of replication protocol",
      "description": "Logical replication workers frequently used Asserts to check for cases that could be triggered by invalid or out-of-order replication commands. This seems unwise, so promote these tests to regular error checks.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix deadlock when multiple logical replication workers try to truncate the same table",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Peter Smith",
        "Haiying Tang"
      ]
    },
    {
      "title": "Fix error cases and memory leaks in logical decoding of speculative insertions",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Dilip Kumar"
      ]
    },
    {
      "title": "Avoid leaving an invalid record-type hash table entry behind after an error",
      "description": "This could lead to later crashes or memory leakage.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Sait Talha Nisanci"
      ]
    },
    {
      "title": "Fix plan cache reference leaks in some error cases in `CREATE TABLE ... AS EXECUTE`",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix race condition in code for sharing tuple descriptors across parallel workers",
      "description": "Given the right timing, a crash could result.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix possible race condition when releasing BackgroundWorkerSlots",
      "description": "It's likely that this doesn't fix any observable bug on Intel hardware, but machines with weaker memory ordering rules could have problems.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix latent crash in sorting code",
      "description": "One code path could attempt to free a null pointer. The case appears unreachable in the core server's use of sorting, but perhaps it could be triggered by extensions.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Ronan Dunklau"
      ]
    },
    {
      "title": "Prevent infinite loops in SP-GiST index insertion",
      "description": "In the event that INCLUDE columns take up enough space to prevent a leaf index tuple from ever fitting on a page, the text\\_ops operator class would get into an infinite loop vainly trying to make the tuple fit. While pre-v11 versions don't have INCLUDE columns, back-patch this anti-looping fix to them anyway, as it seems like a good defense against bugs in operator classes.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that SP-GiST index insertion can be terminated by a query cancel request",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Don't abort the process for an out-of-memory failure in libpq's printing functions",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In ecpg, allow the `numeric` value INT\\_MIN (usually -2147483648) to be converted to integer",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "John Naylor"
      ]
    },
    {
      "title": "Fix pg\\_dump to correctly handle triggers on partitioned tables whose enabled status is different from their parent triggers' status",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Justin Pryzby",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Avoid “invalid creation date in header” warnings observed when running pg\\_restore on an archive file created in a different time zone",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make pg\\_upgrade carry forward the old installation's `oldestXID` value",
      "description": "Previously, the new installation's `oldestXID` was set to a value old enough to (usually) force immediate anti-wraparound autovacuuming. That's not desirable from a performance standpoint; what's worse, installations using large values of `autovacuum_freeze_max_age` could suffer unwanted forced shutdowns soon after an upgrade.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Bertrand Drouvot"
      ]
    },
    {
      "title": "Extend pg\\_upgrade to detect and warn about extensions that should be upgraded",
      "description": "A script file is now produced containing the `ALTER EXTENSION UPDATE` commands needed to bring extensions up to the versions that are considered default in the new installation.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Avoid problems when switching pg\\_receivewal between compressed and non-compressed WAL storage",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid attempting catalog lookups after an error",
      "description": "While this usually worked, it's not very safe since the error might have been one that made catalog access nonfunctional. A side effect of the fix is that messages about data conversion errors will now mention the query's table and column aliases (if used) rather than the true underlying name of a foreign table or column.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Improve the isolation-test infrastructure",
      "description": "Allow isolation test steps to be annotated to show the expected completion order. This allows getting stable results from otherwise-racy test cases, without the long delays that we previously used (not entirely successfully) to fend off race conditions. Allow non-quoted identifiers as isolation test session/step names (formerly, all such names had to be double-quoted). Detect and warn about unused steps in isolation tests. Improve display of query results in isolation tests. Remove isolationtester's “dry-run” mode. Remove memory leaks in isolationtester itself.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Michael Paquier"
      ]
    },
    {
      "title": "Reduce overhead of cache-clobber testing",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix PL/Python's regression tests to pass with Python 3.10",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Honza Horak"
      ]
    },
    {
      "title": "Make `printf(\"%s\", NULL)` print `(null)` instead of crashing",
      "description": "This should improve server robustness in corner cases, and it syncs our `printf` implementation with common libraries.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect log message when point-in-time recovery stops at a `ROLLBACK PREPARED` record",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Simon Riggs"
      ]
    },
    {
      "title": "Improve `ALTER TABLE`'s messages for wrong-relation-kind errors",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Clarify error messages referring to “non-negative” values",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Bharath Rupireddy"
      ]
    },
    {
      "title": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate `libldap_r` library",
      "description": "If there is no `libldap_r` library, we now silently assume that `libldap` is thread-safe.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Adrian Ho",
        "Tom Lane"
      ]
    },
    {
      "title": "Add new make targets `world-bin` and `install-world-bin`",
      "description": "These are the same as `world` and `install-world` respectively, except that they do not build or install the documentation.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Fix make rule for TAP tests (`prove_installcheck`) to work in PGXS usage",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Adjust JIT code to prepare for forthcoming LLVM API change",
      "description": "LLVM 13 has made an incompatible API change that will cause crashing of our previous JIT compiler.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Andres Freund"
      ]
    },
    {
      "title": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated",
      "description": "The GSSAPI spec provides for a string pointer and length. It seems that in practice the next byte after the string is usually zero, so that our previous coding didn't actually fail; but we do have a report of AddressSanitizer complaints.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Enable building with GSSAPI on MSVC",
      "description": "Fix various incompatibilities with modern Kerberos builds.",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In MSVC builds, include `--with-pgport` in the set of configure options reported by pg\\_config, if it had been specified",
      "description": "",
      "fixedIn": "11.13",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "If the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\n\nWhen applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix `CREATE INDEX CONCURRENTLY` to wait for the latest prepared transactions",
      "description": "Rows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for `PREPARE TRANSACTION` commands that were still in progress when `CREATE INDEX CONCURRENTLY` checked for them. As before, in installations that have enabled prepared transactions (`max_prepared_transactions` \\> 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "While it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Noah Misch",
        "Andrey Borodin"
      ]
    },
    {
      "title": "Fix `float4` and `float8` hash functions to produce uniform results for NaNs",
      "description": "Since PostgreSQL's floating-point types deem all NaNs to be equal, it's important for the hash functions to produce the same hash code for all bit-patterns that are NaNs according to the IEEE 754 standard. This failed to happen before, meaning that hash indexes and hash-based query plans might produce incorrect results for non-canonical NaN values. (`'-NaN'::float8` is one way to produce such a value on most machines.) It is advisable to reindex hash indexes on floating-point columns, if there is any possibility that they might contain such values.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent data loss during crash recovery of `CREATE TABLESPACE`, when `wal_level` \\= `minimal`",
      "description": "If the server crashed between `CREATE TABLESPACE` and the next checkpoint, replay would fully remove the contents of the new tablespace's directory, relying on subsequent WAL replay to restore everything within that directory. This interacts badly with optimizations that skip writing WAL (one example is `COPY` into a just-created table). Such optimizations are applied only when `wal_level` is `minimal`, which is not the default in v10 and later.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "This oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication",
      "description": "This oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Hou Zhijie",
        "Vignesh C"
      ]
    },
    {
      "title": "Don't discard a cast to the same type with unspecified type modifier",
      "description": "For example, if column `f1` is of type `numeric(18,3)`, the parser used to simply discard a cast like `f1::numeric`, on the grounds that it would have no run-time effect. That's true, but the exposed type of the expression should still be considered to be plain `numeric`, not `numeric(18,3)`. This is important for correctly resolving the type of larger constructs, such as recursive `UNION`s.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix updates of element fields in arrays of domain over composite",
      "description": "A command such as `UPDATE tab SET fld[1].subfld = val` failed if the array's elements were domains rather than plain composites.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow creating an ICU collation if the current database's encoding won't support it",
      "description": "Previously this was allowed, but then the collation could not be referenced because of the way collation lookup works; you could not use the collation, nor even drop it.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power()`",
      "description": "The result could be inaccurate when the first argument is very close to 1.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Avoid regular expression errors with capturing parentheses inside `{0}`",
      "description": "Regular expressions like `(.){0}...\\1` drew “invalid backreference number”. Other regexp engines such as Perl don't complain, though, and for that matter ours doesn't either in some closely related cases. Worse, it could throw an assertion failure instead. Fix it so that no error is thrown and instead the back-reference is silently deemed to never match.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent regular expression back-references from sometimes matching when they shouldn't",
      "description": "The regexp engine was careless about clearing match data for capturing parentheses after rejecting a partial match. This could allow a later back-reference to match in places where it should fail for lack of a defined referent.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix regular expression performance bug with back-references inside iteration nodes",
      "description": "Incorrect back-tracking logic could result in exponential time spent looking for a match. Fortunately the problem is masked in most cases by other optimizations.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect results from `AT TIME ZONE` applied to a `time with time zone` value",
      "description": "The results were incorrect if the target time zone was specified by a dynamic timezone abbreviation (that is, one that is defined as equivalent to a full time zone name, rather than a fixed UTC offset).",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "There are corner cases in which `ANALYZE` will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix restoration of a Portal's snapshot inside a subtransaction",
      "description": "If a procedure commits or rolls back a transaction, and then its next significant action is inside a new subtransaction, snapshot management went wrong, leading to a dangling pointer and probable crash. A typical example in PL/pgSQL is a `COMMIT` immediately followed by a `BEGIN ... EXCEPTION` block that performs a query.",
      "fixedIn": "11.14",
      "significant": true,
      "contributors": [
        "Bertrand Drouvot"
      ]
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "This oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Dilip Kumar"
      ]
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "This oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "fixedIn": "11.14",
      "significant": true,
      "contributors": [
        "Kyotaro Horiguchi",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "There was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Andres Freund"
      ]
    },
    {
      "title": "Refuse to rewind a cursor marked `NO SCROLL` if it has been held over from a previous transaction due to the `WITH HOLD` option",
      "description": "We have long forbidden fetching backwards from a `NO SCROLL` cursor, but for historical reasons the prohibition didn't extend to cases in which we rewind the query altogether and then re-fetch forwards. That exception leads to inconsistencies, particularly for held-over cursors which may not have stored all the data necessary to rewind. Disallow rewinding for non-scrollable held-over cursors to block the worst inconsistencies. (v15 will remove the exception altogether.)",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible failure while saving a `WITH HOLD` cursor at transaction end, if it had already been read to completion",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix detection of a relation that has grown to the maximum allowed length",
      "description": "An attempt to extend a table or index past the limit of 2^32-1 blocks was rejected, but not soon enough to prevent inconsistent internal state from being created.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule",
      "description": "The previous failure to do this could lead to problems such as unsafely choosing a parallel plan.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Greg Nancarrow",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect reporting of permissions failures on extended statistics objects",
      "description": "The code typically produced “cache lookup error” rather than the intended message.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix incorrect snapshot handling in parallel workers",
      "description": "This oversight could lead to misbehavior in parallel queries if the transaction isolation level is less than `REPEATABLE READ`.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Greg Nancarrow"
      ]
    },
    {
      "title": "Fix logical decoding to correctly ignore toast-table changes for transient tables",
      "description": "Logical decoding normally ignores changes in transient tables such as those created during an `ALTER TABLE` heap rewrite. But that filtering wasn't applied to the associated toast table if any, leading to possible errors when rewriting a table that's being published.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Bertrand Drouvot"
      ]
    },
    {
      "title": "Ensure that walreceiver processes create all required archive notification files before exiting",
      "description": "If a walreceiver exited exactly at a WAL segment boundary, it failed to make a notification file for the last-received segment, thus delaying archiving of that segment on the standby.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE`",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Masahiko Sawada",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix parser's processing of aggregate `FILTER` clauses",
      "description": "If the `FILTER` expression is a plain boolean column, the semantic level of the aggregate could be mis-determined, leading to not-per-spec behavior. If the `FILTER` expression is itself a boolean-returning aggregate, an error should be thrown but was not, likely resulting in a crash at execution.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid trying to clean up LLVM state after an error within LLVM",
      "description": "This prevents a likely crash during backend exit after a fatal LLVM error.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Justin Pryzby"
      ]
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export()` or a related function fails",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Ensure that scans of SP-GiST indexes are counted in the statistics views",
      "description": "Incrementing the number-of-index-scans counter was overlooked in the SP-GiST code, although per-tuple counters were advanced correctly.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Recalculate relevant wait intervals if `recovery_min_apply_delay` is changed during recovery",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Soumyadeep Chakraborty",
        "Ashwin Agrawal"
      ]
    },
    {
      "title": "Fix infinite loop if a `simplehash.h` hash table reaches 2^32 elements",
      "description": "It seems unlikely that this bug has been hit in practice, as it would require `work_mem` settings of hundreds of gigabytes for existing uses of `simplehash.h`.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Yura Sokolov"
      ]
    },
    {
      "title": "Reduce memory consumption during calculation of extended statistics",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Justin Pryzby",
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix ecpg to recover correctly after `malloc()` failure while establishing a connection",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix misevaluation of stable functions called in the arguments of a PL/pgSQL `CALL` statement",
      "description": "They were being called with an out-of-date snapshot, so that they would not see any database changes made since the start of the session's top-level command.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine",
      "description": "If the routine does not require an explicit `RETURN`, this usage should be valid, but it was rejected.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove pg\\_ctl's hard-coded limits on the total length of generated commands",
      "description": "For example, this removes a restriction on how many command-line options can be passed through to the postmaster. Individual path names that pg\\_ctl deals with, such as the postmaster executable's name or the data directory name, are still limited to `MAXPGPATH` bytes in most cases.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Phil Krylov"
      ]
    },
    {
      "title": "Fix pg\\_dump to dump non-global default privileges correctly",
      "description": "If a global (unrestricted) `ALTER DEFAULT PRIVILEGES` command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted `ALTER DEFAULT PRIVILEGES` command granted that privilege again for a selected role or schema, pg\\_dump failed to dump the restricted privilege grant correctly.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Neil Chen",
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Make pg\\_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "This oversight was usually pretty harmless, since once pg\\_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "fixedIn": "11.14",
      "significant": true,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Improve pg\\_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type()`",
      "description": "These changes provide only marginal improvement when dumping from a local server, but a dump from a remote server can benefit substantially due to fewer network round-trips.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix crash in pg\\_dump when attempting to dump trigger definitions from a pre-8.3 server",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect filename in pg\\_restore's error message about an invalid large object TOC file",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Daniel Gustafsson"
      ]
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `\"char\"` (not `` char(_`n`_) ``) columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Change `contrib/pg_stat_statements` to read its “query texts” file in units of at most 1GB",
      "description": "Such large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix null-pointer crash when `contrib/postgres_fdw` tries to report a data conversion error",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add spinlock support for the RISC-V architecture",
      "description": "This is essential for reasonable performance on that platform.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Marek Szuba"
      ]
    },
    {
      "title": "Support OpenSSL 3.0.0",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Peter Eisentraut",
        "Daniel Gustafsson",
        "Michael Paquier"
      ]
    },
    {
      "title": "Set correct type identifier on OpenSSL BIO (I/O abstraction) objects created by PostgreSQL",
      "description": "This oversight probably only matters for code that is doing tasks like auditing the OpenSSL installation. But it's nominally a violation of the OpenSSL API, so fix it.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Itamar Gafni"
      ]
    },
    {
      "title": "Make `pg_regexec()` robust against an out-of-range _`searchstart`_ parameter",
      "description": "Return `REG_NOMATCH`, instead of possibly crashing, when _`searchstart`_ is past the end of the string. This case is probably unreachable within core PostgreSQL, but extensions might be more careless about the parameter value.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `GetSharedSecurityLabel()` can be used in a newly-started session that has not yet built its critical relation cache entries",
      "description": "",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Jeff Davis"
      ]
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "When running on Windows, initdb attempts to set the new cluster's `timezone` parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.",
      "description": "Also, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port\\_of\\_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "fixedIn": "11.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "If an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "While the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary",
      "description": "",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "If a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Abhijit Menon-Sen",
        "Tomas Vondra"
      ]
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "The walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction",
      "description": "",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Alex Kingsborough",
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Be sure to `fsync` the `pg_logical/mappings` subdirectory during checkpoints",
      "description": "On some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Nathan Bossart"
      ]
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "A previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows `ANALYZE` to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual `ANALYZE` on the partitioned table if you want to maintain such statistics.)",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Currently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "This restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "The same prohibition already existed for primary key indexes.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Haiying Tang",
        "Hou Zhijie"
      ]
    },
    {
      "title": "Correctly update cached table state during `ALTER TABLE ADD PRIMARY KEY USING INDEX`",
      "description": "Concurrent sessions failed to update their opinion of whether the table has a primary key, possibly causing incorrect logical replication behavior.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Hou Zhijie"
      ]
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Concurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tang Haiying",
        "Hou Zhijie"
      ]
    },
    {
      "title": "Avoid leaking memory during `REASSIGN OWNED BY` operations that reassign ownership of many objects",
      "description": "",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "A whole-row variable would be printed as “var.\\*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "These errors should affect only debug builds, not production.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Simon Riggs",
        "Michael Paquier",
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib",
      "description": "",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid calling `strerror` from libpq's `PQcancel` function",
      "description": "`PQcancel` is supposed to be safe to call from a signal handler, but `strerror` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make psql's `\\password` command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "This agrees with the documented behavior, and avoids probable permissions failure if `SET ROLE` or `SET SESSION AUTHORIZATION` has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext()` from a control-C signal handler",
      "description": "While no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow canceling the initial password prompt in pg\\_receivewal and pg\\_recvlogical",
      "description": "Previously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Nathan Bossart"
      ]
    },
    {
      "title": "Fix pg\\_dump's dump ordering for user-defined casts",
      "description": "In rare cases, the output script might refer to a user-defined cast before it had been created.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible mis-reporting of errors in pg\\_dump and pg\\_basebackup",
      "description": "The previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix results of index-only scans on `contrib/btree_gist` indexes on `` char(_`N`_) `` columns",
      "description": "Index-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store `` char(_`N`_) `` values with the expected amount of space padding. The behavior of such an index will not change immediately unless you `REINDEX` it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "With Python 3.10, this avoids configure\\-time warnings about distutils being deprecated and scheduled for removal in Python 3.12\\. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Peter Eisentraut",
        "Tom Lane",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later",
      "description": "",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Victor Wagner"
      ]
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later",
      "description": "",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add support for building with Visual Studio 2022",
      "description": "",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Hans Buschmann"
      ]
    },
    {
      "title": "Allow the `.bat` wrapper scripts in our MSVC build system to be called without first changing into their directory",
      "description": "",
      "fixedIn": "11.15",
      "significant": false,
      "contributors": [
        "Anton Voloshin",
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "The column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\n\nIn cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type `record` to begin with and there's no issue.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect output for types `timestamptz` and `timetz` in `table_to_xmlschema()` and allied functions",
      "description": "The xmlschema output for these types included a malformed regular expression.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Renan Soares Lopes"
      ]
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns",
      "description": "",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix planner errors for `GROUPING()` constructs that reference outer query levels",
      "description": "",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Richard Guo",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "The previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering",
      "description": "",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Aliaksandr Kalenik"
      ]
    },
    {
      "title": "Fix `ALTER FUNCTION` to support changing a function's parallelism property and its `SET`\\-variable list in the same command",
      "description": "The parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix mis-sorting of table rows when `CLUSTER`ing using an index whose leading key is an expression",
      "description": "The table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Peter Geoghegan",
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix risk of deadlock failures while dropping a partitioned index",
      "description": "Ensure that the required table and index locks are taken in the standard order (parents before children, tables before indexes). The previous coding for `DROP INDEX` did it differently, and so could deadlock against concurrent queries taking these locks in the standard order.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Jimmy Yih",
        "Gaurab Dey",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix race condition between `DROP TABLESPACE` and checkpointing",
      "description": "The checkpoint forced by `DROP TABLESPACE` could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Nathan Bossart"
      ]
    },
    {
      "title": "Fix possible trouble in crash recovery after a `TRUNCATE` command that overlaps a checkpoint",
      "description": "`TRUNCATE` must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Heikki Linnakangas",
        "Robert Haas"
      ]
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Temporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record",
      "description": "",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Sami Imseih"
      ]
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "With unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the `max_sync_workers_per_subscription` limit",
      "description": "Faulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Otherwise subscribers cannot see the values and will fail to replicate the update.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Dilip Kumar",
        "Amit Kapila"
      ]
    },
    {
      "title": "Improve logical replication subscriber's error message for an unsupported relation kind",
      "description": "v13 and later servers support publishing partitioned tables. Older server versions cannot handle subscribing to such a table, and they gave a very misleading error message: “table XYZ not found on publisher”. Arrange to deliver a more on-point message.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Perl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "This change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6\\. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "David Steele"
      ]
    },
    {
      "title": "Make pg\\_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "pg\\_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg\\_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix error handling in pg\\_waldump",
      "description": "While trying to read a WAL file to determine the WAL segment size, pg\\_waldump would report an incorrect error for the case of a too-short file. In addition, the file name reported in this and related error messages could be garbage.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Andres Freund"
      ]
    },
    {
      "title": "Ensure that `contrib/pageinspect` functions cope with all-zero pages",
      "description": "This is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In `contrib/pageinspect`, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "These changes make it less likely that the module will crash on bad data.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Justin Pryzby",
        "Julien Rouhaud"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "This fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Ronan Dunklau"
      ]
    },
    {
      "title": "Update JIT code to work with LLVM 14",
      "description": "",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Most of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Andres Freund",
        "Zhihong Yu"
      ]
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions",
      "description": "",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible build failure of pg\\_dumpall on Windows, when not using MSVC to build",
      "description": "",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "This adapts the build process to work on recent MSys tool chains.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "For some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine.",
      "description": "",
      "fixedIn": "11.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix replay of `CREATE DATABASE` WAL records on standby servers",
      "description": "Standby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Asim R Praveen",
        "Paul Guo"
      ]
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Normally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the `CREATE DATABASE` replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Michael Paquier",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "In extended query protocol, force an immediate commit after `CREATE DATABASE` and other commands that can't run in a transaction block",
      "description": "If the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "`TransactionIdIsInProgress` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Simon Riggs"
      ]
    },
    {
      "title": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Richard Guo"
      ]
    },
    {
      "title": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables",
      "description": "In certain cases, a “trigger does not exist” failure would occur because the command would try to adjust the trigger on a child partition that doesn't have it.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "Amit Langote"
      ]
    },
    {
      "title": "Prevent `pg_stat_get_subscription()` from possibly returning an extra row containing garbage values",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Kuntal Ghosh"
      ]
    },
    {
      "title": "Ensure that `pg_stop_backup()` cleans up session state properly",
      "description": "This omission could lead to assertion failures or crashes later in the session.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "In corner cases, a misleading error could be reported.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Reject `ROW()` expressions and functions in `FROM` that have too many columns",
      "description": "Cases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "When decompiling a view or rule, show a `SELECT` output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "Previously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made",
      "description": "This oversight could lead to dump/reload or pg\\_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "If `CREATE OPERATOR CLASS` results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Previously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Prevent triggering of standby's `wal_receiver_timeout` during logical replication of large transactions",
      "description": "If a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Wang Wei",
        "Amit Kapila"
      ]
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix memory leak in logical replication subscribers",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Hou Zhijie"
      ]
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Such cases could result in harmless warning messages.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Previously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Steve Chavez"
      ]
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Haiyang Wang"
      ]
    },
    {
      "title": "Fix erroneous assertion checks in shared hashtable management",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Arrange to clean up after commit-time errors within `SPI_commit()`, rather than expecting callers to do that",
      "description": "Proper cleanup is complicated and requires use of low-level facilities, so it's not surprising that no known caller got it right. This led to misbehaviors when a PL procedure issued `COMMIT` but a failure occurred (such as a deferred constraint check). To improve matters, redefine `SPI_commit()` as starting a new transaction, so that it becomes equivalent to `SPI_commit_and_chain()` except that you get default transaction characteristics instead of preserving the prior transaction's characteristics. To make this somewhat transparent API-wise, redefine `SPI_start_transaction()` as a no-op. All known callers of `SPI_commit()` immediately call `SPI_start_transaction()`, so they will not notice any change. Similar remarks apply to `SPI_rollback()`.\n\nAlso fix PL/Python, which omitted any handling of such errors at all, resulting in jumping out of the Python interpreter. This is reported to crash Python 3.11\\. Older Python releases leak some memory but seem okay with it otherwise.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Peter Eisentraut",
        "Tom Lane"
      ]
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "In the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Certain operations such as `EXEC SQL PREPARE` would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale()` calls",
      "description": "Allocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "In psql's `\\watch` command, echo a newline after cancellation with control-C",
      "description": "This prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Pavel Stehule"
      ]
    },
    {
      "title": "Fix `contrib/pg_stat_statements` to avoid problems with very large query-text files on 32-bit platforms",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `contrib/postgres_fdw` sends constants of `regconfig` and other `reg*` types with proper schema qualification",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "This avoids problems when a signal interrupts `posix_fallocate()`.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open()`",
      "description": "This avoids a possible crash on Solaris.",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Dagfinn Ilmari Mannsåker"
      ]
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap\\_r library when multiple OpenLDAP installations are present while building PostgreSQL",
      "description": "",
      "fixedIn": "11.17",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `VACUUM` to press on if an attempted page deletion in a btree index fails to find the page's parent downlink",
      "description": "Rather than throwing an error, just log the issue and continue without deleting the empty page. Previously, a buggy operator class or corrupted index could indefinitely prevent completion of vacuuming of the index, eventually leading to transaction wraparound problems.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an `INSERT` on an updatable view",
      "description": "This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Repair rare failure of MULTIEXPR\\_SUBLINK subplans in inherited updates",
      "description": "Use of the syntax `UPDATE tab SET (c1, ...) = (SELECT ...)` with an inherited or partitioned target table could result in failure if the child tables are sufficiently dissimilar. This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect matching of index expressions and predicates when creating a partitioned index",
      "description": "While creating a partitioned index, we try to identify any existing indexes on the partitions that match the partitioned index, so that we can absorb those as child indexes instead of building new ones. Matching of expressions was not done right, so that a usable child index might be ignored, leading to creation of a duplicative index.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Richard Guo",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid flattening `FROM`\\-less subqueries when the outer query has grouping sets",
      "description": "This oversight could lead to assertion failures or planner errors such as “variable not found in subplan target list”.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "When a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Dilip Kumar",
        "Robert Haas"
      ]
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Matthias van de Meent",
        "Zhang Mingli"
      ]
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Masahiko Sawada",
        "Kuroda Hayato"
      ]
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "This ameliorates problems with slow shutdown of replication workers.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "If a syntax error occurred in a SQL-language or PL/pgSQL-language `CREATE FUNCTION` or `DO` command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Maxim Orlov",
        "Anton Melnikov",
        "Masahiko Sawada",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "If a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "If the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Olly Betts",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Improper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add some more defenses against recursion till stack overrun",
      "description": "",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Richard Guo",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "The lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Reid Thompson"
      ]
    },
    {
      "title": "Improve PL/pgSQL's ability to handle parameters declared as `RECORD`",
      "description": "Build a separate function cache entry for each concrete type passed to the `RECORD` parameter during a session, much as we do for polymorphic parameters. This allows some usages to work that previously failed with errors such as “type of parameter does not match that when preparing the plan”.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "There's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()` and `PQisnonblocking()` didn't get that memo, so fix them.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Daniele Varrazzo",
        "Tom Lane"
      ]
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple `varchar` or `bytea` variables are declared in the same declaration",
      "description": "For example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only `str1` was marked `static`.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Andrey Sokolov"
      ]
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg\\_basebackup",
      "description": "Allow the remote path in `--tablespace-mapping` to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "In pg\\_stat\\_statements, fix access to already-freed memory",
      "description": "This occurred if pg\\_stat\\_statements tracked a `ROLLBACK` command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "zhaoqigui"
      ]
    },
    {
      "title": "In postgres\\_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "This avoids “variable not found in subplan target list” errors in rare cases.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Richard Guo",
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create()` function",
      "description": "The uuid-ossp module expects libc's `uuid_create()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()`.)",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Nazir Bilal Yavuz"
      ]
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Add `PostgreSQL/Test/Cluster.pm` and `PostgreSQL/Test/Utils.pm` to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "This avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incompatibilities with LLVM 15",
      "description": "",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Andres Freund"
      ]
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set()` for spinlocks on any machine",
      "description": "This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS",
      "description": "",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later",
      "description": "",
      "fixedIn": "11.18",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.",
      "description": "Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala\\_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan\\_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy\\_River, America/Thunder\\_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n\nThese zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of `timestamptz` display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n\nIt is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "fixedIn": "11.18",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid",
      "description": "When pg\\_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an `INSERT` from a multi-row `VALUES` list",
      "description": "In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Dmitry Astapov"
      ]
    },
    {
      "title": "Honor non-default settings of `checkpoint_completion_target`",
      "description": "Internal state was not updated after a change in `checkpoint_completion_target`, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Bharath Rupireddy"
      ]
    },
    {
      "title": "Log the correct ending timestamp in `recovery_target_xid` mode",
      "description": "When ending recovery based on the `recovery_target_xid` setting with `recovery_target_inclusive` \\= `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after `ANALYZE` if we're running a pipeline",
      "description": "If there's not been an explicit `BEGIN TRANSACTION`, `ANALYZE` would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "This could result in “could not devise a query plan for the given query” errors.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range`",
      "description": "Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "fixedIn": "11.19",
      "significant": true,
      "contributors": [
        "Simon Riggs"
      ]
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches",
      "description": "",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as `CREATE SUBSCRIPTION`, such a failure resulted in a small session-lifespan memory leak.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when `max_connections` is set to a large value on the standby.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Simon Riggs",
        "Michail Nikolaev"
      ]
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations",
      "description": "",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Jeff Davis"
      ]
    },
    {
      "title": "Prevent unsafe usage of a relation cache entry's `rd_smgr` pointer",
      "description": "Remove various assumptions that `rd_smgr` would stay valid over a series of operations, by wrapping all uses of it in a function that will recompute it if needed. This prevents bugs occurring when an unexpected cache flush occurs partway through such a series.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Amul Sul"
      ]
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "The `epoll`\\-based and `kqueue`\\-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "In pg\\_dump, avoid calling unsafe server functions before we have locks on the tables to be examined",
      "description": "pg\\_dump uses certain server functions that can fail if examining a table that gets dropped concurrently. Avoid this type of failure by ensuring that we obtain access share lock before inquiring too deeply into a table's properties, and that we don't apply such functions to tables we don't intend to dump at all.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Gilles Darold"
      ]
    },
    {
      "title": "Fix tab completion of `ALTER FUNCTION/PROCEDURE/ROUTINE` ... `SET SCHEMA`",
      "description": "",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix `contrib/seg` to not crash or print garbage if an input number has more than 127 digits",
      "description": "",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `contrib/sepgsql`, avoid deprecation warnings with recent libselinux",
      "description": "",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl",
      "description": "",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix pg\\_waldump to build on compilers that don't discard unused static-inline functions",
      "description": "",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.",
      "description": "Notably, a new timezone America/Ciudad\\_Juarez has been split off from America/Ojinaga.",
      "fixedIn": "11.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "By default, panic instead of retrying after `fsync()` failure, to avoid possible data corruption",
      "description": "Some popular operating systems discard kernel data buffers when unable to write them out, reporting this as `fsync()` failure. If we reissue the `fsync()` request it will succeed, but in fact the data has been lost, so continuing risks database corruption. By raising a panic condition instead, we can replay from WAL, which may contain the only remaining copy of the data in such a situation. While this is surely ugly and inefficient, there are few alternatives, and fortunately the case happens very rarely.\n\nA new server parameter [data\\_sync\\_retry](https://www.postgresql.org/docs/11/runtime-config-error-handling.html#GUC-DATA-SYNC-RETRY) has been added to control this; if you are certain that your kernel does not discard dirty data buffers in such scenarios, you can set `data_sync_retry` to `on` to restore the old behavior.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Craig Ringer",
        "Thomas Munro"
      ]
    },
    {
      "title": "Include each major release branch's release notes in the documentation for only that branch, rather than that branch and all later ones",
      "description": "The duplication induced by the previous policy was getting out of hand. Our plan is to provide a full archive of release notes on the project's web site, but not duplicate it within each release.",
      "fixedIn": "11.2",
      "significant": true,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix handling of unique indexes with `INCLUDE` columns on partitioned tables",
      "description": "The uniqueness condition was not checked properly in such cases.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Ensure that `NOT NULL` constraints of a partitioned table are honored within its partitions",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "Amit Langote"
      ]
    },
    {
      "title": "Update catalog state correctly for partition table constraints when detaching their partition",
      "description": "Previously, the `pg_constraint`.`conislocal` field for such a constraint might improperly be left as `false`, rendering it undroppable. A dump/restore or pg\\_upgrade would cure the problem, but if necessary, the catalog field can be adjusted manually.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Create or delete foreign key enforcement triggers correctly when attaching or detaching a partition in a partitioned table that has a foreign-key constraint",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Avoid useless creation of duplicate foreign key constraints in partitioned tables",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "When an index is created on a partitioned table using `ONLY`, and there are no partitions yet, mark it valid immediately",
      "description": "Otherwise there is no way to make it become valid.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Use a safe table lock level when detaching a partition",
      "description": "The previous locking level was too weak and might allow concurrent DDL on the table, with bad results.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix problems with applying `ON COMMIT DROP` and `ON COMMIT DELETE ROWS` to partitioned tables and tables with inheritance children",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Disallow `COPY FREEZE` on partitioned tables",
      "description": "This should eventually be made to work, but it may require a patch that's too complicated to risk back-patching.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Fix possible index corruption when the indexed column has a “fast default” (that is, it was added by `ALTER TABLE ADD COLUMN` with a constant non-NULL default value specified, after the table already contained some rows)",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Correctly adjust “fast default” values during `ALTER TABLE ... ALTER COLUMN TYPE`",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Avoid possible deadlock when acquiring multiple buffer locks",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Nishant Fnu"
      ]
    },
    {
      "title": "Avoid deadlock between GIN vacuuming and concurrent index insertions",
      "description": "This change partially reverts a performance improvement, introduced in version 10.0, that attempted to reduce the number of index pages locked during deletion of a GIN posting tree page. That's now been found to lead to deadlocks, so we've removed it pending closer analysis.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Alexander Korotkov",
        "Andrey Borodin",
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Avoid deadlock between hot-standby queries and replay of GIN index page deletion",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix possible crashes in logical replication when index expressions or predicates are in use",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid useless and expensive logical decoding of TOAST data during a table rewrite",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix logic for stopping a subset of WAL senders when synchronous replication is enabled",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Paul Guo",
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid possibly writing an incorrect replica identity field in a tuple deletion WAL record",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Stas Kelvich"
      ]
    },
    {
      "title": "Prevent incorrect use of WAL-skipping optimization during `COPY` to a view or foreign table",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Michael Paquier"
      ]
    },
    {
      "title": "Make the archiver prioritize WAL history files over WAL data files while choosing which file to archive next",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "David Steele"
      ]
    },
    {
      "title": "Fix possible crash in `UPDATE` with a multiple `SET` clause using a sub-`SELECT` as source",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix crash when zero rows are fed to `json[b]_populate_recordset()` or `json[b]_to_recordset()`",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid crash if libxml2 returns a null error message",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Sergio Conde Gómez"
      ]
    },
    {
      "title": "Fix incorrect JIT tuple deforming code for tables with many columns (more than approximately 800)",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix performance and memory leakage issues in hash-based grouping",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix spurious grouping-related parser errors caused by inconsistent handling of collation assignment",
      "description": "In some cases, expressions that should be considered to match were not seen as matching, if they included operations on collatable data types.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix parsing of collation-sensitive expressions in the arguments of a `CALL` statement",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Ensure proper cleanup after detecting an error in the argument list of a `CALL` statement",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Check whether the comparison function underlying `LEAST()` or `GREATEST()` is leakproof, rather than just assuming it is",
      "description": "Actual information leaks from btree comparison functions are typically hard to provoke, but in principle they could happen.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect planning of queries involving nested loops both above and below a Gather plan node",
      "description": "If both levels of nestloop needed to pass the same variable into their right-hand sides, an incorrect plan would be generated.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect planning of queries in which a lateral reference must be evaluated at a foreign table scan",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix planner failure when the first column of a row comparison matches an index column, but later column(s) do not, and the index has included (non-key) columns",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix corner-case underestimation of the cost of a merge join",
      "description": "The planner could prefer a merge join when the outer key range is much smaller than the inner key range, even if there are so many duplicate keys on the inner side that this is a poor choice.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid O(N^2) planning time growth when a query contains many thousand indexable clauses",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Improve planning speed for large inheritance or partitioning table groups",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Improve `ANALYZE`'s handling of concurrently-updated rows",
      "description": "Previously, rows deleted by an in-progress transaction were omitted from `ANALYZE`'s sample, but this has been found to lead to more inconsistency than including them would do. In effect, the sample now corresponds to an MVCC snapshot as of `ANALYZE`'s start time.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Jeff Janes",
        "Tom Lane"
      ]
    },
    {
      "title": "Make `TRUNCATE` ignore inheritance child tables that are temporary tables of other sessions",
      "description": "This brings `TRUNCATE` into line with the behavior of other commands. Previously, such cases usually ended in failure.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix `TRUNCATE` to update the statistics counters for the right table",
      "description": "If the truncated table had a TOAST table, that table's counters were reset instead.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Process `ALTER TABLE ONLY ADD COLUMN IF NOT EXISTS` correctly",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Greg Stark"
      ]
    },
    {
      "title": "Allow `UNLISTEN` in hot-standby mode",
      "description": "This is necessarily a no-op, because `LISTEN` isn't allowed in hot-standby mode; but allowing the dummy operation simplifies session-state-reset logic in clients.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Shay Rojansky"
      ]
    },
    {
      "title": "Fix missing role dependencies in some schema and data type permissions lists",
      "description": "In some cases it was possible to drop a role to which permissions had been granted. This caused no immediate problem, but a subsequent dump/reload or upgrade would fail, with symptoms involving attempts to grant privileges to all-numeric role names.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent use of a session's temporary schema within a two-phase transaction",
      "description": "Accessing a temporary table within such a transaction has been forbidden for a long time, but it was still possible to cause problems with other operations on temporary objects.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Ensure relation caches are updated properly after adding or removing foreign key constraints",
      "description": "This oversight could result in existing sessions failing to enforce a newly-created constraint, or continuing to enforce a dropped one.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Ensure relation caches are updated properly after renaming constraints",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix replay of GiST index micro-vacuum operations so that concurrent hot-standby queries do not see inconsistent state",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Prevent empty GIN index pages from being reclaimed too quickly, causing failures of concurrent searches",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andrey Borodin",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix edge-case failures in float-to-integer coercions",
      "description": "Values very slightly above the maximum valid integer value might not be rejected, and then would overflow, producing the minimum valid integer instead. Also, values that should round to the minimum or maximum integer value might be incorrectly rejected.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix parsing of space-separated lists of host names in the `ldapserver` parameter of LDAP authentication entries in `pg_hba.conf`",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "When making a PAM authentication request, don't set the `PAM_RHOST` variable if the connection is via a Unix socket",
      "description": "Previously that variable would be set to `[local]`, which is at best unhelpful, since it's supposed to be a host name.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Disallow setting `client_min_messages` higher than `ERROR`",
      "description": "Previously, it was possible to set this variable to `FATAL` or `PANIC`, which had the effect of suppressing transmission of ordinary error messages to the client. However, that's contrary to guarantees that are given in the PostgreSQL wire protocol specification, and it caused some clients to become very confused. In released branches, fix this by silently treating such settings as meaning `ERROR` instead. Version 12 and later will reject those alternatives altogether.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Jonah Harris",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix ecpglib to use `uselocale()` or `_configthreadlocale()` in preference to `setlocale()`",
      "description": "Since `setlocale()` is not thread-local, and might not even be thread-safe, the previous coding caused problems in multi-threaded ecpg applications.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Michael Meskes",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect results for numeric data passed through an ecpg SQLDA (SQL Descriptor Area)",
      "description": "Values with leading zeroes were not copied correctly.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Daisuke Higuchi"
      ]
    },
    {
      "title": "Fix psql's `\\g` _`target`_ meta-command to work with `COPY TO STDOUT`",
      "description": "Previously, the _`target`_ option was ignored, so that the copy data always went to the current query output target.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Daniel Vérité"
      ]
    },
    {
      "title": "Make psql's LaTeX output formats render special characters properly",
      "description": "Backslash and some other ASCII punctuation characters were not rendered correctly, leading to document syntax errors or wrong characters in the output.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make pgbench's random number generation fully deterministic and platform-independent when `` --random-seed=_`N`_ `` is specified",
      "description": "On any specific platform, the sequence obtained with a particular value of _`N`_ will probably be different from what it was before this patch.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Fabien Coelho",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_basebackup and pg\\_verify\\_checksums to ignore temporary files appropriately",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Michael Banck",
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix pg\\_dump's handling of materialized views with indirect dependencies on primary keys",
      "description": "This led to mis-labeling of such views' dump archive entries, causing harmless warnings about “archive items not in correct section order”; less harmlessly, selective-restore options depending on those labels, such as `--section`, might misbehave.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make pg\\_dump include `ALTER INDEX SET STATISTICS` commands",
      "description": "When the ability to attach statistics targets to index expressions was added, we forgot to teach pg\\_dump about it, so that such settings were lost in dump/reload.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix pg\\_dump's dumping of tables that have OIDs",
      "description": "The `WITH OIDS` clause was omitted if it needed to be applied to the first table to be dumped.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid null-pointer-dereference crash on some platforms when pg\\_dump or pg\\_restore tries to report an error",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent false index-corruption reports from `contrib/amcheck` caused by inline-compressed data",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Properly disregard `SIGPIPE` errors if `COPY FROM PROGRAM` stops reading the program's output early",
      "description": "This case isn't actually reachable directly with `COPY`, but it can happen when using `contrib/file_fdw`.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `contrib/hstore` to calculate correct hash values for empty `hstore` values that were created in version 8.4 or before",
      "description": "The previous coding did not give the same result as for an empty `hstore` value created by a newer version, thus potentially causing wrong results in hash joins or hash aggregation. It is advisable to reindex any hash indexes built on `hstore` columns, if the table might contain data that was originally stored as far back as 8.4 and was never dumped/reloaded since then.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Avoid crashes and excessive runtime with large inputs to `contrib/intarray`'s `gist__int_ops` index support",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "In configure, look for `python3` and then `python2` if `python` isn't found",
      "description": "This allows PL/Python to be configured without explicitly specifying `PYTHON` on platforms that no longer provide an unversioned `python` executable.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Include JIT-related headers in the installed set of header files",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Donald Dong"
      ]
    },
    {
      "title": "Support new Makefile variables `PG_CFLAGS`, `PG_CXXFLAGS`, and `PG_LDFLAGS` in pgxs builds",
      "description": "This simplifies customization of extension build processes.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Christoph Berg"
      ]
    },
    {
      "title": "Fix Perl-coded build scripts to not assume “`.`” is in the search path, since recent Perl versions don't include that",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Fix server command-line option parsing problems on OpenBSD",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Relocate call of `set_rel_pathlist_hook` so that extensions can use it to supply partial paths for parallel queries",
      "description": "This is not expected to affect existing use-cases.",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": [
        "KaiGai Kohei"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2018i for DST law changes in Kazakhstan, Metlakatla, and Sao Tome and Principe. Kazakhstan's Qyzylorda zone is split in two, creating a new zone Asia/Qostanay, as some areas did not change UTC offset. Historical corrections for Hong Kong and numerous Pacific islands.",
      "description": "",
      "fixedIn": "11.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash when the new schema name is omitted in `CREATE SCHEMA`",
      "description": "The SQL standard allows writing `` CREATE SCHEMA AUTHORIZATION _`ownername`_ ``, with the schema name defaulting to _`ownername`_. However some code paths expected the schema name to be present and would fail.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "`ALTER TYPE` disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `COPY TO` from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "The documentation is quite clear that `COPY TO` copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Antonin Houska"
      ]
    },
    {
      "title": "Avoid possible crash when `array_position()` or `array_positions()` is passed an empty array",
      "description": "",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char()`",
      "description": "With bad luck this could have resulted in a server crash.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid buffer overread in `translate()` function",
      "description": "When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Daniil Anisimov"
      ]
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Alexander Lakhin",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "A crash was possible given unlucky timing and `parallel_leader_participation` \\= `off` (which is not the default).",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Melanie Plageman"
      ]
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation `vacuum_cost_delay` setting of zero",
      "description": "Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation `vacuum_cost_delay` setting, but this was done only for positive settings, not zero.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view",
      "description": "",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Repair rare failure of MULTIEXPR\\_SUBLINK subplans in partitioned updates",
      "description": "Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Dean Rasheed",
        "Tom Lane"
      ]
    },
    {
      "title": "When decompiling a rule or SQL function body containing `INSERT`/`UPDATE`/`DELETE` within `WITH`, take care to print the correct alias for the target table",
      "description": "",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache\\_callback\\_list slots” error.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Shi Yu"
      ]
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Ignore dropped columns during logical replication of an update or delete action",
      "description": "Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Onder Kalaci",
        "Shi Yu"
      ]
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Jacob Champion",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Add missing cases to `SPI_result_code_string()`",
      "description": "",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc()`",
      "description": "In the unusual case where the size of a large (>8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Karina Litskevich"
      ]
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message",
      "description": "",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Jeff Davis"
      ]
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range()` when the last few pages in the specified range are empty",
      "description": "It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Matthias van de Meent"
      ]
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Some rare failure cases could return without cleaning up the PG\\_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Xing Guo"
      ]
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the `-C ORACLE` option",
      "description": "When `ecpg_get_data()` is called with `varcharsize` set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Fix pg\\_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the `--load-via-partition-root` option; but since there is very little chance of success without that, teach pg\\_dump to apply it automatically to such tables.\n\nAlso, fix pg\\_restore to not try to `TRUNCATE` target tables before restoring into them when `--load-via-partition-root` mode is used. This avoids a hazard of deadlocks and lost data.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `contrib/hstore_plpython`, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Dmitry Dolgov",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix misbehavior in `contrib/pg_trgm` with an unsatisfiable regular expression",
      "description": "A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg\\_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Use the `--strip-unneeded` option when stripping static libraries with GNU-compatible strip",
      "description": "Previously, `make install-strip` used the `-x` option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's `--nonet` option to the build recipes.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Aleksander Alekseev",
        "Peter Eisentraut",
        "Tom Lane"
      ]
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary `portlock` directory",
      "description": "Place it under `tmp_check` in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.",
      "description": "When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "fixedIn": "11.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries",
      "description": "Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n\nThis fix will not in itself correct faulty BRIN entries. It's recommended to `REINDEX` any BRIN indexes that may be used to search for nulls.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Avoid leaving a corrupted database behind when `DROP DATABASE` is interrupted",
      "description": "If `DROP DATABASE` was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its `pg_database` row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another `DROP DATABASE`.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during `ALTER TABLE ATTACH PARTITION`",
      "description": "Such an index will now be ignored, and a new child index created instead.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "The update of the index's `pg_index` entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix `ALTER EXTENSION SET SCHEMA` to complain if the extension contains any objects outside the extension's schema",
      "description": "Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "fixedIn": "11.21",
      "significant": true,
      "contributors": [
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions",
      "description": "",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns",
      "description": "",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow tokens up to 10240 bytes long in `pg_hba.conf` and `pg_ident.conf`",
      "description": "The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "If JIT is in use, running out of memory in a C++ `new` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Dongming Liu"
      ]
    },
    {
      "title": "Allow `VACUUM` to continue after detecting certain types of b-tree index corruption",
      "description": "If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of `REINDEX` will fix the broken index, but preventing `VACUUM` from completing until that is done risks making matters far worse.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Ensure that `WrapLimitsVacuumLock` is released after `VACUUM` detects invalid data in `pg_database`.`datfrozenxid` or `pg_database`.`datminmxid`",
      "description": "Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "suyu.cmj",
        "Michael Paquier"
      ]
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync`'ed at the next checkpoint",
      "description": "Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Fix missing reinitializations of delay-checkpoint-end flags",
      "description": "This could result in unnecessary delays of checkpoints, or in assertion failures in assert-enabled builds.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "suyu.cmj"
      ]
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction",
      "description": "",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `contrib/fuzzystrmatch`'s Soundex `difference()` function to handle empty input sanely",
      "description": "An input string containing no alphabetic characters resulted in unpredictable output.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Alexander Lakhin",
        "Tom Lane"
      ]
    },
    {
      "title": "Tighten whitespace checks in `contrib/hstore` input",
      "description": "In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Evan Jones"
      ]
    },
    {
      "title": "Disallow oversize input arrays with `contrib/intarray`'s `gist__int_ops` index opclass",
      "description": "Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Ankit Kumar Pandey",
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in `contrib/intarray`",
      "description": "",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik",
        "Matthias van de Meent",
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `pg_index`.`indisreplident` is kept up-to-date in relation cache entries",
      "description": "This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Shruthi Gowda"
      ]
    },
    {
      "title": "Silence deprecation warnings when compiling with OpenSSL 3.0.0 or later",
      "description": "",
      "fixedIn": "11.21",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows",
      "description": "",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema()` is applied to a non-data-returning Portal",
      "description": "",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Boyu Yang"
      ]
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Report an error if `pgstatindex()`, `pgstatginindex()`, `pgstathashindex()`, or `pgstattuple()` is applied to an invalid index. If `brin_desummarize_range()`, `brin_summarize_new_values()`, `brin_summarize_range()`, or `gin_clean_pending_list()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed `CREATE INDEX` had left behind.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector()`",
      "description": "",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix over-allocation of the constructed `tsvector` in `tsvectorrecv()`",
      "description": "If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished `tsvector`. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Denis Erokhin"
      ]
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit()`",
      "description": "This could lead to poor page-split decisions in GiST indexes on `tsvector` columns.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system()`",
      "description": "This fix avoids a race condition in which a child process that has been forked off by `system()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Nathan Bossart"
      ]
    },
    {
      "title": "Avoid torn reads of `pg_control` in relevant SQL functions",
      "description": "Acquire the appropriate lock before reading `pg_control`, to ensure we get a consistent view of that file.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Track the dependencies of cached `CALL` statements, and re-plan them when needed",
      "description": "DDL commands, such as replacement of a function that has been inlined into a `CALL` argument, can create the need to re-plan a `CALL` that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Track nesting depth correctly when inspecting `RECORD`\\-type Vars from outer query levels",
      "description": "This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Richard Guo"
      ]
    },
    {
      "title": "Avoid “record type has not been registered” failure when deparsing a view that contains references to fields of composite constants",
      "description": "",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow extracting fields from a `RECORD`\\-type `ROW()` expression",
      "description": "SQL code that knows that we name such fields `f1`, `f2`, etc can use those names to extract fields from the expression. This change was originally made in version 13, and is now being back-patched into older branches to support tests for a related bug.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix error-handling bug in `RECORD` type cache management",
      "description": "An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error",
      "description": "",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Hou Zhijie"
      ]
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as `SET TRANSACTION ISOLATION LEVEL`.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Keep by-reference `attmissingval` values in a long-lived context while they are being used",
      "description": "This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Recalculate the effective value of `search_path` after `ALTER ROLE`",
      "description": "This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Jeff Davis"
      ]
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish`",
      "description": "This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (`contrib/bloom` does, for example).",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Jeff Davis"
      ]
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling",
      "description": "",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Fix pg\\_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Formerly, only the table-level ACL would get restored if both types were present.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Euler Taveira",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg\\_basebackup",
      "description": "This has only been seen to occur when the server connection runs through pgbouncer.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Jelte Fennema"
      ]
    },
    {
      "title": "In `contrib/amcheck`, do not report interrupted page deletion as corruption",
      "description": "This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before `VACUUM` had cleaned things up.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `interval` columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the `-multiply_defined suppress` linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list",
      "description": "Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "fixedIn": "11.22",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid catalog corruption when an `ALTER TABLE` on a partitioned table finds that a partitioned index is reusable",
      "description": "This occurs, for example, when `ALTER COLUMN TYPE` finds that no physical table rewrite is required.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid catalog corruption when a temporary table with `ON COMMIT DROP` and an identity column is created in a single-statement transaction",
      "description": "This hazard was overlooked because the case is not actually useful, since the temporary table would be dropped immediately after creation.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Fix failure in `ALTER INDEX ... ATTACH PARTITION` if the partitioned table contains more dropped columns than its partition does",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix failure to attach a partition's existing index to a newly-created partitioned index in some cases",
      "description": "This would lead to errors such as “index ... not found in partition” in subsequent DDL that uses the partitioned index.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Avoid crash when an EPQ recheck is performed for a partitioned query result relation",
      "description": "This occurs when using `READ COMMITTED` isolation level and another session has concurrently updated some of the target row(s).",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix tuple routing in multi-level partitioned tables that have dropped attributes",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix failure when the slow path of foreign key constraint initial validation is applied to partitioned tables",
      "description": "This didn't manifest except in the uncommon cases where the fast path can't be used (such as permissions problems).",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Hadi Moshayedi",
        "Tom Lane",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix behavior for an `UPDATE` or `DELETE` on an inheritance tree or partitioned table in which every table can be excluded",
      "description": "In such cases, the query did not report the correct set of output columns when a `RETURNING` clause was present, and if there were any statement-level triggers that should be fired, it didn't fire them.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Tom Lane"
      ]
    },
    {
      "title": "When accessing a partition directly, and `constraint_exclusion` is set to `on`, use the partition's partition constraint as well as any `CHECK` constraints for exclusion checking",
      "description": "This change restores the behavior to what it was in v10.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid server crash when an error occurs while trying to persist a cursor query across a transaction commit",
      "description": "If a procedure attempts to commit while it has an open explicit or implicit cursor (for example, a PL/pgSQL `FOR`\\-loop query), the cursor must be executed to completion and its results saved before the transaction commit can be performed. An error occurring during such execution led to a crash.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid throwing incorrect errors for updates of temporary tables and unlogged tables when a `FOR ALL TABLES` publication exists",
      "description": "Such tables should be ignored for publication purposes, but some parts of the code failed to do so.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Fix handling of explicit `DEFAULT` items in an `INSERT ... VALUES` command with multiple `VALUES` rows, if the target relation is an updatable view",
      "description": "When the updatable view has no default for the column but its underlying table has one, a single-row `INSERT ... VALUES` will use the underlying table's default. In the multi-row case, however, NULL was always used. Correct it to act like the single-row case.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix `CREATE VIEW` to allow zero-column views",
      "description": "We should allow this for consistency with allowing zero-column tables. Since a table can be converted to a view, zero-column views could be created even with the restriction in place, leading to dump/reload failures.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Ashutosh Sharma"
      ]
    },
    {
      "title": "Add missing support for `CREATE TABLE IF NOT EXISTS ... AS EXECUTE ...`",
      "description": "The combination of `IF NOT EXISTS` and `EXECUTE` should work, but the grammar omitted it.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Andreas Karlsson"
      ]
    },
    {
      "title": "Ensure that sub-`SELECT`s appearing in row-level-security policy expressions are executed with the correct user's permissions",
      "description": "Previously, if the table having the RLS policy was accessed via a view, such checks might be executed as the user calling the view, not as the view owner as they should be.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Accept XML documents as valid values of type `xml` when `xmloption` is set to `content`, as required by SQL:2006 and later",
      "description": "Previously PostgreSQL followed the SQL:2003 definition, which doesn't allow this. But that creates a serious problem for dump/restore: there is no setting of `xmloption` that will accept all valid XML data. Hence, switch to the 2006 definition.\n\npg\\_dump is also modified to emit `SET xmloption = content` while restoring data, ensuring that dump/restore works even if the prevailing setting is `document`.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Chapman Flack"
      ]
    },
    {
      "title": "Improve server's startup-time checks for whether a pre-existing shared memory segment is still in use",
      "description": "The postmaster is now more likely to detect that there are still active processes from a previous postmaster incarnation, even if the `postmaster.pid` file has been removed.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Avoid possible division-by-zero in btree index vacuum logic",
      "description": "This could lead to incorrect decisions about whether index cleanup is needed.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Piotr Stefaniak",
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Avoid counting parallel workers' transactions as separate transactions",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Fix incompatibility of GIN-index WAL records",
      "description": "A fix applied in February's minor releases was not sufficiently careful about backwards compatibility, leading to problems if a standby server of that vintage reads GIN page-deletion WAL records generated by a primary server of a previous minor release.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix possible crash while executing a `SHOW` command in a replication connection",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid server memory leak when fetching rows from a portal one at a time",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid memory leak when a partition's relation cache entry is rebuilt",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Tom Lane"
      ]
    },
    {
      "title": "Tolerate `EINVAL` and `ENOSYS` error results, where appropriate, for `fsync` and `sync_file_range` calls",
      "description": "The previous change to panic on file synchronization failures turns out to have been excessively paranoid for certain cases where a failure is predictable and essentially means “operation not supported”.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "James Sewell"
      ]
    },
    {
      "title": "Report correct relation name in autovacuum's `pg_stat_activity` display during BRIN summarize operations",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Avoid crash when trying to plan a partition-wise join when GEQO is active",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix “failed to build any _`N`_\\-way joins” planner failures with lateral references leading out of `FULL` outer joins",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix misplanning of queries in which a set-returning function is applied to a relation that is provably empty",
      "description": "In v10, this oversight only led to slightly inefficient plans, but in v11 it could cause “set-valued function called in context that cannot accept a set” errors.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Check the appropriate user's permissions when enforcing rules about letting a leaky operator see `pg_statistic` data",
      "description": "When an underlying table is being accessed via a view, consider the privileges of the view owner while deciding whether leaky operators may be applied to the table's statistics data, rather than the privileges of the user making the query. This makes the planner's rules about what data is visible match up with the executor's, avoiding unnecessarily-poor plans.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Fix planner's parallel-safety assessment for grouped queries",
      "description": "Previously, target-list evaluation work that could have been parallelized might not be.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Etsuro Fujita"
      ]
    },
    {
      "title": "Fix mishandling of “included” index columns in planner's unique-index logic",
      "description": "This could result in failing to recognize that a unique index with included columns proves uniqueness of a query result, leading to a poor plan.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect strictness check for array coercion expressions",
      "description": "This might allow, for example, incorrect inlining of a strict SQL function, leading to non-enforcement of the strictness condition.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Speed up planning when there are many equality conditions and many potentially-relevant foreign key constraints",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Avoid O(N^2) performance issue when rolling back a transaction that created many tables",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix corner-case server crashes in dynamic shared memory allocation",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Robert Haas"
      ]
    },
    {
      "title": "Fix race conditions in management of dynamic shared memory",
      "description": "These could lead to “dsa\\_area could not attach to segment” or “cannot unpin a segment that is not pinned” errors.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix race condition in which a hot-standby postmaster could fail to shut down after receiving a smart-shutdown request",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible crash when `pg_identify_object_as_address()` is given invalid input",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix possible “could not access status of transaction” failures in `txid_status()`",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix authentication failure when attempting to use SCRAM authentication with mixed OpenSSL library versions",
      "description": "If libpq is using OpenSSL 1.0.1 or older while the server is using OpenSSL 1.0.2 or newer, the negotiation of which SASL mechanism to use went wrong, leading to a confusing “channel binding not supported by this build” error message.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Tighten validation of encoded SCRAM-SHA-256 and MD5 passwords",
      "description": "A password string that had the right initial characters could be mistaken for one that is correctly hashed into SCRAM-SHA-256 or MD5 format. The password would be accepted but would be unusable later.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Jonathan Katz"
      ]
    },
    {
      "title": "Fix handling of `lc_time` settings that imply an encoding different from the database's encoding",
      "description": "Localized month or day names that include non-ASCII characters previously caused unexpected errors or wrong output in such locales.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Juan José Santamaría Flecha",
        "Tom Lane"
      ]
    },
    {
      "title": "Create the `current_logfiles` file with the same permissions as other files in the server's data directory",
      "description": "Previously it used the permissions specified by `log_file_mode`, but that can cause problems for backup utilities.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "Fix incorrect `operator_precedence_warning` checks involving unary minus operators",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Rikard Falkeborn"
      ]
    },
    {
      "title": "Disallow `NaN` as a value for floating-point server parameters",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Rearrange `REINDEX` processing to avoid assertion failures when reindexing individual indexes of `pg_class`",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix planner assertion failure for parameterized dummy paths",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Insert correct test function in the result of `SnapBuildInitialSnapshot()`",
      "description": "No core code cares about this, but some extensions do.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Antonin Houska"
      ]
    },
    {
      "title": "Fix intermittent “could not reattach to shared memory” session startup failures on Windows",
      "description": "A previously unrecognized source of these failures is creation of thread stacks for a process's default thread pool. Arrange for such stacks to be allocated in a different memory region.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix error detection in directory scanning on Windows",
      "description": "Errors, such as lack of permissions to read the directory, were not detected or reported correctly; instead the code silently acted as though the directory were empty.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik"
      ]
    },
    {
      "title": "Fix grammar problems in ecpg",
      "description": "A missing semicolon led to mistranslation of `` SET _`variable`_ = DEFAULT `` (but not `` SET _`variable`_ TO DEFAULT ``) in ecpg programs, producing syntactically invalid output that the server would reject. Additionally, in a `DROP TYPE` or `DROP DOMAIN` command that listed multiple type names, only the first type name was actually processed.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Sync ecpg's syntax for `CREATE TABLE AS` with the server's",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Daisuke Higuchi"
      ]
    },
    {
      "title": "Fix possible buffer overruns in ecpg's processing of include filenames",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Liu Huailing",
        "Fei Wu"
      ]
    },
    {
      "title": "Fix pg\\_rewind failures due to failure to remove some transient files in the target data directory",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Make pg\\_verify\\_checksums verify that the data directory it's pointed at is of the right PostgreSQL version",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid crash in `contrib/postgres_fdw` when a query using remote grouping or aggregation has a `SELECT`\\-list item that is an uncorrelated sub-select, outer reference, or parameter symbol",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Change `contrib/postgres_fdw` to report an error when a remote partition chosen to insert a routed row into is also an `UPDATE` subplan target that will be updated later in the same command",
      "description": "Previously, such situations led to server crashes or incorrect results of the `UPDATE`. Allowing such cases to work correctly is a matter for future work.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Etsuro Fujita"
      ]
    },
    {
      "title": "In `contrib/pg_prewarm`, avoid indefinitely respawning background worker processes if prewarming fails for some reason",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Mithun Cy"
      ]
    },
    {
      "title": "Avoid crash in `contrib/vacuumlo` if an `lo_unlink()` call failed",
      "description": "",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2019a",
      "description": "This corrects a small bug in zic that caused it to output an incorrect year-2440 transition in the `Africa/Casablanca` zone, and adds support for zic's new `-r` option.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2019a for DST law changes in Palestine and Metlakatla, plus historical corrections for Israel.",
      "description": "`Etc/UCT` is now a backward-compatibility link to `Etc/UTC`, instead of being a separate zone that generates the abbreviation `UCT`, which nowadays is typically a typo. PostgreSQL will still accept `UCT` as an input zone abbreviation, but it won't output it.",
      "fixedIn": "11.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assorted errors in run-time partition pruning logic",
      "description": "These mistakes could lead to wrong answers in queries on partitioned tables, if the comparison value used for pruning is dynamically determined, or if multiple range-partitioned columns are involved in pruning decisions, or if stable (not immutable) comparison operators are involved.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Amit Langote",
        "David Rowley"
      ]
    },
    {
      "title": "Fix possible crash while trying to copy trigger definitions to a new partition",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix failure of `ALTER TABLE ... ALTER COLUMN TYPE` when the table has a partial exclusion constraint",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix failure of `COMMENT` command for comments on domain constraints",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Daniel Gustafsson",
        "Michael Paquier"
      ]
    },
    {
      "title": "Prevent possible memory clobber when there are duplicate columns in a hash aggregate's hash key list",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix incorrect argument null-ness checking during partial aggregation of aggregates with zero or multiple arguments",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "David Rowley",
        "Kyotaro Horiguchi",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix faulty generation of merge-append plans",
      "description": "This mistake could lead to “could not find pathkey item to sort” errors.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect printing of queries with duplicate join names",
      "description": "This oversight caused a dump/restore failure for views containing such queries.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Philip Dubé"
      ]
    },
    {
      "title": "Fix conversion of JSON string literals to JSON-type output columns in `json_to_record()` and `json_populate_record()`",
      "description": "Such cases should produce the literal as a standalone JSON value, but the code misbehaved if the literal contained any characters requiring escaping.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix misoptimization of `{1,1}` quantifiers in regular expressions",
      "description": "Such quantifiers were treated as no-ops and optimized away; but the documentation specifies that they impose greediness, or non-greediness in the case of the non-greedy variant `{1,1}?`, on the subexpression they're attached to, and this did not happen. The misbehavior occurred only if the subexpression contained capturing parentheses or a back-reference.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid writing an invalid empty btree index page in the unlikely case that a failure occurs while processing INCLUDEd columns during a page split",
      "description": "The invalid page would not affect normal index operations, but it might cause failures in subsequent VACUUMs. If that has happened to one of your indexes, recover by reindexing the index.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Avoid possible failures while initializing a new process's `pg_stat_activity` data",
      "description": "Certain operations that could fail, such as converting strings extracted from an SSL certificate into the database encoding, were being performed inside a critical section. Failure there would result in database-wide lockup due to violating the access protocol for shared `pg_stat_activity` data.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix race condition in check to see whether a pre-existing shared memory segment is still in use by a conflicting postmaster",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix unsafe coding in walreceiver's signal handler",
      "description": "This avoids rare problems in which the walreceiver process would crash or deadlock when commanded to shut down.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid attempting to do database accesses for parameter checking in processes that are not connected to a specific database",
      "description": "This error could result in failures like “cannot read pg\\_class without having selected a database”.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Vignesh C",
        "Andres Freund"
      ]
    },
    {
      "title": "Avoid possible hang in libpq if using SSL and OpenSSL's pending-data buffer contains an exact multiple of 256 bytes",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "David Binderman"
      ]
    },
    {
      "title": "Improve initdb's handling of multiple equivalent names for the system time zone",
      "description": "Make initdb examine the `/etc/localtime` symbolic link, if that exists, to break ties between equivalent names for the system time zone. This makes initdb more likely to select the time zone name that the user would expect when multiple identical time zones exist. It will not change the behavior if `/etc/localtime` is not a symlink to a zone data file, nor if the time zone is determined from the `TZ` environment variable.\n\nSeparately, prefer `UTC` over other spellings of that time zone, when neither `TZ` nor `/etc/localtime` provide a hint. This fixes an annoyance introduced by tzdata 2019a's change to make the `UCT` and `UTC` zone names equivalent: initdb was then preferring `UCT`, which almost nobody wants.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix ordering of `GRANT` commands emitted by pg\\_dump and pg\\_dumpall for databases and tablespaces",
      "description": "If cascading grants had been issued, restore might fail due to the `GRANT` commands being given in an order that didn't respect their interdependencies.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Nathan Bossart",
        "Michael Paquier"
      ]
    },
    {
      "title": "Make pg\\_dump recreate table partitions using `CREATE TABLE` then `ATTACH PARTITION`, rather than including `PARTITION OF` in the creation command",
      "description": "This avoids problems with the partition's column order possibly being changed to match the parent's. Also, a partition is now restorable from the dump (as a standalone table) even if its parent table isn't restored; the `ATTACH` will fail, but that can just be ignored.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "David Rowley"
      ]
    },
    {
      "title": "Fix misleading error reports from reindexdb",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Ensure that vacuumdb returns correct status if an error occurs while using parallel jobs",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Fix `contrib/auto_explain` to not cause problems in parallel queries",
      "description": "Previously, a parallel worker might try to log its query even if the parent query were not being logged by `auto_explain`. This would work sometimes, but it's confusing, and in some cases it resulted in failures like “could not find key N in shm TOC”.\n\nAlso, fix an off-by-one error that resulted in not necessarily logging every query even when the sampling rate is set to 1.0.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `contrib/postgres_fdw`, account for possible data modifications by local `BEFORE ROW UPDATE` triggers",
      "description": "If a trigger modified a column that was otherwise not changed by the `UPDATE`, the new value was not transmitted to the remote server.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Shohei Mochizuki"
      ]
    },
    {
      "title": "On Windows, avoid failure when the database encoding is set to SQL\\_ASCII and we attempt to log a non-ASCII string",
      "description": "The code had been assuming that such strings must be in UTF-8, and would throw an error if they didn't appear to be validly encoded. Now, just transmit the untranslated bytes to the log.",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Make PL/pgSQL's header files C++-safe",
      "description": "",
      "fixedIn": "11.4",
      "significant": false,
      "contributors": [
        "George Tarasov"
      ]
    },
    {
      "title": "Fix failure of `ALTER TABLE ... ALTER COLUMN TYPE` when altering multiple columns' types in one command",
      "description": "This fixes a regression introduced in the most recent minor releases: indexes using the altered columns were not processed correctly, leading to strange failures during `ALTER TABLE`.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent dropping a partitioned table's trigger if there are pending trigger events in child partitions",
      "description": "This notably applies to foreign key constraints, since those are implemented by triggers.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Include user-specified trigger arguments when copying a trigger definition from a partitioned table to one of its partitions",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Patrick McHardy"
      ]
    },
    {
      "title": "Install dependencies to prevent dropping partition key columns",
      "description": "`ALTER TABLE ... DROP COLUMN` will refuse to drop a column that is a partition key column. However, indirect drops (such as a cascade from dropping a key column's data type) had no such check, allowing the deletion of a key column. This resulted in a badly broken partitioned table that could neither be accessed nor dropped.\n\nThis fix adds `pg_depend` entries that enforce that the whole partitioned table, not just the key column, will be dropped if a cascaded drop forces removal of the key column. However, such entries will only be created when a partitioned table is created; so this fix does not remove the risk for pre-existing partitioned tables. The issue can only arise for partition key columns of non-built-in data types, so it seems not to be a hazard for most users.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that column numbers are correctly mapped between a partitioned table and its default partition",
      "description": "Some operations misbehaved if the mapping wasn't exactly one-to-one, for example if there were dropped columns in one table and not the other.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Ignore partitions that are foreign tables when creating indexes on partitioned tables",
      "description": "Previously an error was thrown on encountering a foreign-table partition, but that's unhelpful and doesn't protect against any actual problem.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Prune a partitioned table's default partition (that is, avoid uselessly scanning it) in more cases",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Yuzuko Hosoya"
      ]
    },
    {
      "title": "Fix possible failure to prune partitions when there are multiple partition key columns of `boolean` type",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Don't optimize away `GROUP BY` columns when the table involved is an inheritance parent",
      "description": "Normally, if a table's primary key column(s) are included in `GROUP BY`, it's safe to drop any other grouping columns, since the primary key columns are enough to make the groups unique. This rule does not work if the query is also reading inheritance child tables, though; the parent's uniqueness does not extend to the children.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Avoid incorrect use of parallel hash join for semi-join queries",
      "description": "This error resulted in duplicate result rows from some `EXISTS` queries.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid using unnecessary sort steps for some queries with `GROUPING SETS`",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Andrew Gierth",
        "Richard Guo"
      ]
    },
    {
      "title": "Fix possible failure of planner's index endpoint probes",
      "description": "When using a recently-created index to determine the minimum or maximum value of a column, the planner could select a recently-dead tuple that does not actually contain the endpoint value. In the worst case the tuple might contain a null, resulting in a visible error “found unexpected null value in index”; more likely we would just end up using the wrong value, degrading the quality of planning estimates.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix failure to access trigger transition tables during `EvalPlanQual` rechecks",
      "description": "Triggers that rely on transition tables sometimes failed in the presence of concurrent updates.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Alex Aktsipetrov"
      ]
    },
    {
      "title": "Fix mishandling of multi-column foreign keys when rebuilding a foreign key constraint",
      "description": "`ALTER TABLE` could make an incorrect decision about whether revalidation of a foreign key is necessary, if not all columns of the key are of the same type. It seems likely that the error would always have been in the conservative direction, that is revalidating unnecessarily.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Don't build extended statistics for inheritance trees",
      "description": "This avoids a “tuple already updated by self” error during `ANALYZE`.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Avoid spurious deadlock errors when upgrading a tuple lock",
      "description": "When two or more transactions are waiting for a transaction T1 to release a tuple-level lock, and T1 upgrades its lock to a higher level, a spurious deadlock among the waiting transactions could be reported when T1 finishes.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Oleksii Kliukin"
      ]
    },
    {
      "title": "Fix failure to resolve deadlocks involving multiple parallel worker processes",
      "description": "It is not clear whether this bug is reachable with non-artificial queries, but if it did happen, the queries involved in an otherwise-resolvable deadlock would block until canceled.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Rui Hai Jiang"
      ]
    },
    {
      "title": "Prevent incorrect canonicalization of date ranges with `infinity` endpoints",
      "description": "It's incorrect to try to convert an open range to a closed one or vice versa by incrementing or decrementing the endpoint value, if the endpoint is infinite; so leave the range alone in such cases.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Laurenz Albe"
      ]
    },
    {
      "title": "Fix loss of fractional digits when converting very large `money` values to `numeric`",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix printing of `BTREE_META_CLEANUP` WAL records",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Prevent assertion failures due to mishandling of version-2 btree metapages",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix spinlock assembly code for MIPS CPUs so that it works on MIPS r6",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "YunQiang Su"
      ]
    },
    {
      "title": "Ensure that a record or row value returned from a PL/pgSQL function is marked with the function's declared composite type",
      "description": "This avoids problems if the result is stored directly into a table.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Make libpq ignore carriage return (`\\r`) in connection service files",
      "description": "In some corner cases, service files containing Windows-style newlines could be mis-parsed, resulting in connection failures.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Michael Paquier"
      ]
    },
    {
      "title": "In psql, avoid offering incorrect tab completion options after `` SET _`variable`_ = ``",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix a small memory leak in psql's `\\d` command",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pg\\_dump to ensure that custom operator classes are dumped in the right order",
      "description": "If a user-defined opclass is the subtype opclass of a user-defined range type, related objects were dumped in the wrong order, producing an unrestorable dump. (The underlying failure to handle opclass dependencies might manifest in other cases too, but this is the only known case.)",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible lockup in pgbench when using `-R` option",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Improve reliability of `contrib/amcheck`'s index verification",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix handling of Perl `undef` values in `contrib/jsonb_plperl`",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Ivan Panchenko"
      ]
    },
    {
      "title": "Fix `contrib/passwordcheck` to coexist with other users of `check_password_hook`",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix `contrib/sepgsql` tests to work under recent SELinux releases",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Mike Palmiotto"
      ]
    },
    {
      "title": "Improve stability of `src/test/kerberos` and `src/test/ldap` regression tests",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Tom Lane"
      ]
    },
    {
      "title": "Improve stability of `src/test/recovery` regression tests",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Reduce stderr output from pg\\_upgrade's test script",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix pgbench regression tests to work on Windows",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Fabien Coelho"
      ]
    },
    {
      "title": "Fix TAP tests to work with msys Perl, in cases where the build directory is on a non-root msys mount point",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Support building Postgres with Microsoft Visual Studio 2019",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Haribabu Kommi"
      ]
    },
    {
      "title": "In Visual Studio builds, honor `WindowsSDKVersion` environment variable, if that's set",
      "description": "This fixes build failures in some configurations.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Peifeng Qiu"
      ]
    },
    {
      "title": "Support OpenSSL 1.1.0 and newer in Visual Studio builds",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Juan José Santamaría Flecha",
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow make options to be passed down to gmake when non-GNU make is invoked at the top level",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid choosing `localtime` or `posixrules` as `TimeZone` during initdb",
      "description": "In some cases initdb would choose one of these artificial zone names over the “real” zone name. Prefer any other match to the C library's timezone behavior over these two.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Adjust `pg_timezone_names` view to show the `Factory` time zone if and only if it has a short abbreviation",
      "description": "Historically, IANA set up this artificial zone with an “abbreviation” like `Local time zone must be set--see zic manual page`. Modern versions of the tzdb database show `-00` instead, but some platforms alter the data to show one or another of the historical phrases. Show this zone only if it uses the modern abbreviation.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2019b",
      "description": "This adds support for zic's new `-b slim` option to reduce the size of the installed zone files. We are not currently using that, but may enable it in future.",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2019b for DST law changes in Brazil, plus historical corrections for Hong Kong, Italy, and Palestine.",
      "description": "",
      "fixedIn": "11.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `ALTER TABLE SET` with a custom relation option",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Disallow changing a multiply-inherited column's type if not all parent tables were changed",
      "description": "Previously, this was allowed, whereupon queries on the now-out-of-sync parent would fail.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid failure if the same target table is specified twice in an `ANALYZE` command inside a transaction block",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent `VACUUM` from trying to freeze an old multixact ID involving a still-running transaction",
      "description": "This case would lead to `VACUUM` failing until the old transaction terminates.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Nathan Bossart",
        "Jeremy Schneider"
      ]
    },
    {
      "title": "`SET CONSTRAINTS ... DEFERRED` failed on partitioned tables, incorrectly complaining about lack of triggers",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix failure when creating indexes for a partition, if the parent partitioned table contains any dropped columns",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix planner's test for case-foldable characters in `ILIKE` with an ICU collation",
      "description": "This mistake caused the planner to treat too much of the pattern as being a fixed prefix, so that indexscans derived from an `ILIKE` clause might miss entries that they should find.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that offset expressions in `WINDOW` clauses are processed when a query's expressions are manipulated",
      "description": "This oversight could result in assorted failures when the offsets are nontrivial expressions. One example is that a function parameter reference in such an expression would fail if the function was inlined.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix handling of whole-row variables in `WITH CHECK OPTION` expressions and row-level-security policy expressions",
      "description": "Previously, such usage might result in bogus errors about row type mismatches.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Avoid postmaster failure if a parallel query requests a background worker when no postmaster child process array slots remain free",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent possible double-free if a `BEFORE UPDATE` trigger returns the old tuple as-is, and it is not the last such trigger",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix crash if `` _`x`_ = ANY (_`array`_) ``, or related operations, contains a constant-null array",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix “unexpected relkind” error when a query tries to access a TOAST table",
      "description": "The error should say that permission is denied, but this case got broken during code refactoring.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "John Hsu",
        "Michael Paquier",
        "Tom Lane"
      ]
    },
    {
      "title": "Provide a relevant error context line when an error occurs while setting GUC parameters during parallel worker startup",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "In serializable mode, ensure that row-level predicate locks are acquired on the correct version of the row",
      "description": "If the visible version of the row is HOT-updated, the lock might be taken on its now-dead predecessor, resulting in subtle failures to guarantee serialization.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Thomas Munro",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Ensure that `fsync()` is applied only to files that are opened read/write",
      "description": "Some code paths tried to do this after opening a file read-only, but on some platforms that causes “bad file descriptor” or similar errors.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Michael Paquier"
      ]
    },
    {
      "title": "Allow encoding conversion to succeed on longer strings than before",
      "description": "Previously, there was a hard limit of 0.25GB on the input string, but now it will work as long as the converted output is not over 1GB.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid an unnecessary catalog lookup during heap page pruning",
      "description": "It's no longer necessary to check for unlogged indexes here, and the check caused significant performance problems in some workloads. There was also at least a theoretical possibility of deadlock.",
      "fixedIn": "11.6",
      "significant": true,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid creating unnecessarily-bulky tuple stores for window functions",
      "description": "In some cases the tuple storage would include all columns of the source table(s), not just the ones that are needed by the query.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix failure to JIT-compile equality comparisons for grouping hash tables, leading to performance loss",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Allow `repalloc()` to give back space when a large chunk is reduced in size",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that temporary WAL and history files are removed at the end of archive recovery",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Sawada Masahiko"
      ]
    },
    {
      "title": "Avoid failure in archive recovery if `recovery_min_apply_delay` is enabled",
      "description": "`recovery_min_apply_delay` is not typically used in this configuration, but it should work.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix logical replication failure when publisher and subscriber have different ideas about a table's replica identity columns",
      "description": "Declaring a column as part of the replica identity on the subscriber, when it does not exist at all on the publisher, led to “negative bitmapset member not allowed” errors.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid unwanted delay during shutdown of a logical replication walsender",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Craig Ringer",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix timeout handling in logical replication walreceiver processes",
      "description": "Erroneous logic prevented `wal_receiver_timeout` from working in logical replication deployments.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Correctly time-stamp replication messages for logical decoding",
      "description": "This oversight resulted, for example, in `pg_stat_subscription`.`last_msg_send_time` usually reading as NULL.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Jeff Janes"
      ]
    },
    {
      "title": "In logical decoding, ensure that sub-transactions are correctly accounted for when reconstructing a snapshot",
      "description": "This error leads to assertion failures; it's unclear whether any bad effects exist in production builds.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Fix race condition during backend exit, when the backend process has previously waited for synchronous replication to occur",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Dongming Liu"
      ]
    },
    {
      "title": "Fix `ALTER SYSTEM` to cope with duplicate entries in `postgresql.auto.conf`",
      "description": "`ALTER SYSTEM` itself will not generate such a state, but external tools that modify `postgresql.auto.conf` could do so. Duplicate entries for the target variable will now be removed, and then the new setting (if any) will be appended at the end.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Ian Barwick"
      ]
    },
    {
      "title": "Reject include directives with empty file names in configuration files, and report include-file recursion more clearly",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Ian Barwick",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid logging complaints about abandoned connections when using PAM authentication",
      "description": "libpq-based clients will typically make two connection attempts when a password is required, since they don't prompt their user for a password until their first connection attempt fails. Therefore the server is coded not to generate useless log spam when a client closes the connection upon being asked for a password. However, the PAM authentication code hadn't gotten that memo, and would generate several messages about a phantom authentication failure.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix some cases where an incomplete date specification is not detected in `time with time zone` input",
      "description": "If a time zone with a time-varying UTC offset is specified, then a date must be as well, so that the offset can be resolved. Depending on the syntax used, this check was not enforced in some cases, allowing bogus output to be produced.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Alexander Lakhin"
      ]
    },
    {
      "title": "Fix misbehavior of `bitshiftright()`",
      "description": "The bitstring right shift operator failed to zero out padding space that exists in the last byte of the result when the bitstring length is not a multiple of 8\\. While invisible to most operations, any nonzero bits there would result in unexpected comparison behavior, since bitstring comparisons don't bother to ignore the extra bits, expecting them to always be zero.\n\nIf you have inconsistent data as a result of saving the output of `bitshiftright()` in a table, it's possible to fix it with something like\n\nUPDATE mytab SET bitcol = ~(~bitcol) WHERE bitcol != ~(~bitcol);",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Restore the ability to take type information from an `AS` clause in `json[b]_populate_record()` and `json[b]_populate_recordset()`",
      "description": "If the record argument is NULL and has no declared composite type, try to use the `AS` clause instead. This isn't recommended usage, but it used to work, and now does again.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid crash when selecting a namespace node in `XMLTABLE`",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Chapman Flack"
      ]
    },
    {
      "title": "Fix detection of edge-case integer overflow in interval multiplication",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Yuya Watari"
      ]
    },
    {
      "title": "Fix memory leaks in `lower()`, `upper()`, and `initcap()` functions when using ICU collations",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik"
      ]
    },
    {
      "title": "Avoid crashes if `ispell` text search dictionaries contain wrong affix data",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Arthur Zakirov"
      ]
    },
    {
      "title": "Fix incorrect compression logic for GIN posting lists",
      "description": "A GIN posting list item can require 7 bytes if the distance between adjacent indexed TIDs exceeds 16TB. One step in the logic was out of sync with that, and might try to write the value into a 6-byte buffer. In principle this could cause a stack overrun, but on most architectures it's likely that the next byte would be unused alignment padding, making the bug harmless. In any case the bug would be very difficult to hit.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Fix handling of infinity, NaN, and NULL values in KNN-GiST",
      "description": "The query's output order could be wrong (different from a plain sort's result) if some distances computed for non-null column values are infinity or NaN.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix handling of searches for NULL in KNN-SP-GiST",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Nikita Glukhov"
      ]
    },
    {
      "title": "On Windows, recognize additional spellings of the “Norwegian (Bokmål)” locale name",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid compile failure if an ECPG client includes `ecpglib.h` while having `ENABLE_NLS` defined",
      "description": "This risk was created by a misplaced declaration: `ecpg_gettext()` should not be visible to client code.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In psql, resynchronize internal state about the server after an unexpected connection loss and successful reconnection",
      "description": "Ordinarily this is unnecessary since the state would be the same anyway. But it can matter in corner cases, such as where the connection might lead to one of several servers. This change causes psql to re-issue any interactive messages that it would have issued at startup, for example about whether SSL is in use.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Peter Billen",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid platform-specific null pointer dereference in psql",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Quentin Rameau"
      ]
    },
    {
      "title": "In pg\\_dump, ensure stable output order for similarly-named triggers and row-level-security policy objects",
      "description": "Previously, if two triggers on different tables had the same names, they would be sorted in OID-based order, which is less desirable than sorting them by table name. Likewise for RLS policies.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Benjie Gillam"
      ]
    },
    {
      "title": "Fix pg\\_dump to work again with pre-8.3 source servers",
      "description": "A previous fix caused pg\\_dump to always try to query `pg_opfamily`, but that catalog doesn't exist before version 8.3.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In pg\\_restore, treat `-f -` as meaning “output to stdout”",
      "description": "This synchronizes pg\\_restore's behavior with some other applications, and in particular makes pre-v12 branches act similarly to version 12's pg\\_restore, simplifying creation of dump/restore scripts that work across multiple PostgreSQL versions. Before this change, pg\\_restore interpreted such a switch as meaning “output to a file named `-`”, but few people would want that.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Improve pg\\_upgrade's checks for the use of a data type that has changed representation, such as `line`",
      "description": "The previous coding could be fooled by cases where the data type of interest underlies a stored column of a domain or composite type.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Detect file read errors during pg\\_basebackup",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Jeevan Chalke"
      ]
    },
    {
      "title": "In pg\\_basebackup, don't fsync output files until the end of backup",
      "description": "The previous coding could result in timeout failures if fsync was slow.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "In pg\\_rewind with an online source cluster, disable timeouts, much as pg\\_dump does",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Alexander Kukushkin"
      ]
    },
    {
      "title": "Fix failure in pg\\_waldump with the `-s` option, when a continuation WAL record ends exactly at a page boundary",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andrey Lepikhov"
      ]
    },
    {
      "title": "In pg\\_waldump, include the `newitemoff` field in btree page split records",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "In pg\\_waldump with the `--bkp-details` option, avoid emitting extra newlines for WAL records involving full-page writes",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix small memory leak in pg\\_waldump",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Fix vacuumdb with a high `--jobs` option to handle running out of file descriptors better",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix PL/pgSQL to handle replacements of composite types better",
      "description": "Cover the case where a composite type is dropped entirely, and then a new type of the same name is created, between executions of a PL/pgSQL function. Variables of the composite type will now update to match the new definition.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `contrib/amcheck` to skip unlogged indexes during hot standby",
      "description": "An unlogged index won't necessarily contain valid data in this context, so don't try to check it.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andrey Borodin",
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix `contrib/intarray`'s GiST opclasses to not fail for empty arrays with `<@`",
      "description": "A clause like `` _`arraycolumn`_ <@ _`constantarray`_ `` is considered indexable, but the index search may not find empty array values; of course, such entries should trivially match the search.\n\nThe only practical back-patchable fix for this requires making `<@` index searches scan the whole index, which is what this patch does. This is unfortunate: it means that the query performance is likely worse than a plain sequential scan would be.\n\nApplications whose performance is adversely impacted by this change have a couple of options. They could switch to a GIN index, which doesn't have this bug, or they could replace `` _`arraycolumn`_ <@ _`constantarray`_ `` with `` _`arraycolumn`_ <@ _`constantarray`_ AND _`arraycolumn`_ && _`constantarray`_ ``. That will provide about the same performance as before, and it will find all non-empty subsets of the given constant array, which is all that could reliably be expected of the query before.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix configure's test for presence of libperl so that it works on recent Red Hat releases",
      "description": "Previously, it could fail if the user sets `CFLAGS` to `-O0`.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure correct code generation for spinlocks on PowerPC",
      "description": "The previous spinlock coding allowed the compiler to select register zero for use with an assembly instruction that does not accept that register, causing a build failure. We have seen only one long-ago report that matches this bug, but it could cause problems for people trying to build modified PostgreSQL code or use atypical compiler options.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "On PowerPC, avoid depending on the xlc compiler's `__fetch_and_add()` function",
      "description": "xlc 13 and newer interpret this function in a way incompatible with our usage, resulting in an unusable build of PostgreSQL. Fix by using custom assembly code instead.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "On AIX, don't use the compiler option `-qsrcmsg`",
      "description": "This avoids an internal compiler error with xlc v16.1.0, with little consequence other than changing the format of compiler error messages.",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix MSVC build process to cope with spaces in the file path of OpenSSL",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2019c for DST law changes in Fiji and Norfolk Island, plus historical corrections for Alberta, Austria, Belgium, British Columbia, Cambodia, Hong Kong, Indiana (Perry County), Kaliningrad, Kentucky, Michigan, Norfolk Island, South Korea, and Turkey.",
      "description": "",
      "fixedIn": "11.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that row triggers on partitioned tables are correctly cloned to sub-partitions when appropriate",
      "description": "User-defined triggers (but not triggers for foreign key or deferred unique constraints) might be missed when creating or attaching a partition.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix logical replication subscriber code to execute per-column `UPDATE` triggers when appropriate",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Avoid failure in logical decoding when a large transaction must be spilled into many separate temporary files",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Amit Khandekar"
      ]
    },
    {
      "title": "Fix possible crash or data corruption when a logical replication subscriber processes a row update",
      "description": "This bug caused visible problems only if the subscriber's table contained columns that were not being copied from the publisher and had pass-by-reference data types.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix crash in logical replication subscriber after DDL changes on a subscribed relation",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais",
        "Vignesh C"
      ]
    },
    {
      "title": "Fix failure in logical replication publisher after a database crash and restart",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Vignesh C"
      ]
    },
    {
      "title": "Ensure that the effect of `pg_replication_slot_advance()` on a physical replication slot will persist across restarts",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Alexey Kondratov",
        "Michael Paquier"
      ]
    },
    {
      "title": "Improve efficiency of logical replication with `REPLICA IDENTITY FULL`",
      "description": "When searching for an existing tuple during an update or delete operation, return the first matching tuple not the last one.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik"
      ]
    },
    {
      "title": "Ensure parallel plans are always shut down at the correct time",
      "description": "This oversight is known to result in “temporary file leak” warnings from multi-batch parallel hash joins.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Prevent premature shutdown of a Gather or GatherMerge plan node that is underneath a Limit node",
      "description": "This avoids failure if such a plan node needs to be scanned more than once, as for instance if it is on the inside of a nestloop.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Improve efficiency of parallel hash join on CPUs with many cores",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Gang Deng",
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid crash in parallel `CREATE INDEX` when there are no free dynamic shared memory slots",
      "description": "Fall back to a non-parallel index build, instead.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Avoid memory leak when there are no free dynamic shared memory slots",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Ignore the `CONCURRENTLY` option when performing an index creation, drop, or rebuild on a temporary table",
      "description": "This avoids strange failures if the temporary table has an `ON COMMIT` action. There is no benefit in using `CONCURRENTLY` for a temporary table anyway, since other sessions cannot access the table, making the extra processing pointless.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Heikki Linnakangas",
        "Andres Freund"
      ]
    },
    {
      "title": "Fix possible failure when resetting expression indexes on temporary tables that are marked `ON COMMIT DELETE ROWS`",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix possible crash in BRIN index operations with `box`, `range` and `inet` data types",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Fix handling of deleted pages in GIN indexes",
      "description": "Avoid possible deadlocks, incorrect updates of a deleted page's state, and failure to traverse through a recently-deleted page.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix possible crash with a SubPlan (sub-`SELECT`) within a multi-row `VALUES` list",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix failure to insert default values for “missing” attributes during tuple conversion",
      "description": "This could result in values incorrectly reading as NULL, when they come from columns that had been added by `ALTER TABLE ADD COLUMN` with a constant default.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Vik Fearing",
        "Andrew Gierth"
      ]
    },
    {
      "title": "Fix crash after FileClose() failure",
      "description": "This issue could only be observed with `data_sync_retry` enabled, since otherwise FileClose() failure would be reported as a PANIC.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix unlikely crash with pass-by-reference aggregate transition states",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Andres Freund",
        "Teodor Sigaev"
      ]
    },
    {
      "title": "Improve error reporting in `to_date()` and `to_timestamp()`",
      "description": "Reports about incorrect month or day names in input strings could truncate the input in the middle of a multi-byte character, leading to an improperly encoded error message that could cause follow-on failures. Truncate at the next whitespace instead.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix off-by-one result for `` EXTRACT(ISOYEAR FROM _`timestamp`_) `` for BC dates",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid stack overflow in `information_schema` views when a self-referential view exists in the system catalogs",
      "description": "A self-referential view can't work; it will always result in infinite recursion. We handled that situation correctly when trying to execute the view, but not when inquiring whether it is automatically updatable.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that walsender processes always show NULL for transaction start time in `pg_stat_activity`",
      "description": "Previously, the `xact_start` column would sometimes show the process start time.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Improve performance of hash joins with very large inner relations",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix placement of “Subplans Removed” field in `EXPLAIN` output",
      "description": "In non-text output formats, this field was emitted inside the “Plans” sub-group, resulting in syntactically invalid output. Attach it to the parent Append or MergeAppend plan node as intended. This causes the field to change position in text output format too: if there are any InitPlans attached to the same plan node, “Subplans Removed” will now appear before those.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Daniel Gustafsson",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix edge-case crashes and misestimations in selectivity calculations for the `<@` and `@>` range operators",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Andrey Borodin",
        "Tom Lane"
      ]
    },
    {
      "title": "Ignore system columns when applying most-common-value extended statistics",
      "description": "This prevents “negative bitmapset member not allowed” planner errors for affected queries.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix BRIN index logic to support hypothetical BRIN indexes",
      "description": "Previously, if an “index adviser” extension tried to get the planner to produce a plan involving a hypothetical BRIN index, that would fail, because the BRIN cost estimation code would always try to physically access the index's metapage. Now it checks to see if the index is only hypothetical, and uses default assumptions about the index parameters if so.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Julien Rouhaud",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Improve error reporting for attempts to use automatic updating of views with conditional `INSTEAD` rules",
      "description": "This has never been supported, but previously the error was thrown only at execution time, so that it could be masked by planner errors.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "title": "Prevent a composite type from being included in itself indirectly via a range type",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Julien Rouhaud"
      ]
    },
    {
      "title": "Disallow partition key expressions that return pseudo-types, such as `record`",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix error reporting for index expressions of prohibited types",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Amit Langote"
      ]
    },
    {
      "title": "Fix dumping of views that contain only a `VALUES` list to handle cases where a view output column has been renamed",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that data types and collations used in `XMLTABLE` constructs are accounted for when computing dependencies of a view or rule",
      "description": "Previously it was possible to break a view using `XMLTABLE` by dropping a type, if the type was not otherwise referenced in the view. This fix does not correct the dependencies already recorded for existing views, only for newly-created ones.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent unwanted downcasing and truncation of RADIUS authentication parameters",
      "description": "The `pg_hba.conf` parser mistakenly treated these fields as SQL identifiers, which in general they aren't.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Marcos David"
      ]
    },
    {
      "title": "Transmit incoming `NOTIFY` messages to the client before sending `ReadyForQuery`, rather than after",
      "description": "This change ensures that, with libpq and other client libraries that act similarly to it, any notifications received during a transaction will be available by the time the client thinks the transaction is complete. This probably makes no difference in practical applications (which would need to cope with asynchronous notifications in any case); but it makes it easier to build test cases with reproducible behavior.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow libpq to parse all GSS-related connection parameters even when the GSSAPI code hasn't been compiled in",
      "description": "This makes the behavior similar to our SSL support, where it was long ago deemed to be a good idea to always accept all the related parameters, even if some are ignored or restricted due to lack of the feature in a particular build.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix incorrect handling of `%b` and `%B` format codes in ecpg's `PGTYPEStimestamp_fmt_asc()` function",
      "description": "Due to an off-by-one error, these codes would print the wrong month name, or possibly crash.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix parallel pg\\_dump/pg\\_restore to more gracefully handle failure to create worker processes",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Prevent possible crash or lockup when attempting to terminate a parallel pg\\_dump/pg\\_restore run via a signal",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In pg\\_upgrade, look inside arrays and ranges while searching for non-upgradable data types in tables",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Apply more thorough syntax checking to createuser's `--connection-limit` option",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Cope with changes of the specific type referenced by a PL/pgSQL composite-type variable in more cases",
      "description": "Dropping and re-creating the composite type referenced by a PL/pgSQL variable could lead to “could not open relation with OID _`NNNN`_” errors.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Ashutosh Sharma",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid crash in `postgres_fdw` when trying to send a command like `UPDATE remote_tab SET (x,y) = (SELECT ...)` to the remote server",
      "description": "",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `contrib/dict_int`, reject `maxlen` settings less than one",
      "description": "This prevents a possible crash with silly settings for that parameter.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Disallow NULL category values in `contrib/tablefunc`'s `crosstab()` function",
      "description": "This case never worked usefully, and it would crash on some platforms.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Joe Conway"
      ]
    },
    {
      "title": "Fix configure's probe for OpenSSL's `SSL_clear_options()` function so that it works with OpenSSL versions before 1.1.0",
      "description": "This problem could lead to failure to set the SSL compression option as desired, when PostgreSQL is built against an old version of OpenSSL.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Daniel Gustafsson"
      ]
    },
    {
      "title": "Mark some timeout and statistics-tracking GUC variables as `PGDLLIMPORT`, to allow extensions to access them on Windows",
      "description": "This applies to `idle_in_transaction_session_timeout`, `lock_timeout`, `statement_timeout`, `track_activities`, `track_counts`, and `track_functions`.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Pascal Legrand"
      ]
    },
    {
      "title": "Avoid memory leak in sanity checks for “slab” memory contexts",
      "description": "This isn't an issue for production builds, since they wouldn't ordinarily have memory context checking enabled; but the leak could be quite severe in a debug build.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Fix multiple statistics entries reported by the LWLock statistics mechanism",
      "description": "The LWLock statistics code (which is not built by default; it requires compiling with `-DLWLOCK_STATS`) could report multiple entries for the same LWLock and backend process, as a result of faulty hashtable key creation.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix race condition that led to delayed delivery of interprocess signals on Windows",
      "description": "This caused visible timing oddities in `NOTIFY`, and perhaps other misbehavior.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "On Windows, retry a few times after an `ERROR_ACCESS_DENIED` file access failure",
      "description": "This helps cope with cases where a file open attempt fails because the targeted file is flagged for deletion but not yet actually gone. pg\\_ctl, for example, frequently failed with such an error when probing to see if the postmaster had shut down yet.",
      "fixedIn": "11.7",
      "significant": false,
      "contributors": [
        "Alexander Lakhin",
        "Tom Lane"
      ]
    },
    {
      "title": "Propagate `ALTER TABLE ... SET STORAGE` to indexes",
      "description": "Non-expression index columns have always copied the `attstorage` property of their table column at creation. Update them when `ALTER TABLE ... SET STORAGE` is done, to maintain consistency.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Preserve the `indisclustered` setting of indexes rewritten by `ALTER TABLE`",
      "description": "Previously, `ALTER TABLE` lost track of which index had been used for `CLUSTER`.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "Justin Pryzby"
      ]
    },
    {
      "title": "Preserve the replica identity properties of indexes rewritten by `ALTER TABLE`",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Quan Zongliang",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Lock objects sooner during `DROP OWNED BY`",
      "description": "This avoids failures in race-condition cases where another session is deleting some of the same objects.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix error-case processing for `CREATE ROLE ... IN ROLE`",
      "description": "Some error cases would be reported as “unexpected node type” or the like, instead of the intended message.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Andrew Gierth"
      ]
    },
    {
      "title": "Ensure that when a partition is detached, any triggers cloned from its formerly-parent table are removed",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Ensure that unique indexes over partitioned tables match the equality semantics of the partitioning key",
      "description": "This would only be an issue with index opclasses that have unusual notions of equality, but it's wrong in theory, so check.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Guancheng Luo"
      ]
    },
    {
      "title": "Ensure that members of the `pg_read_all_stats` role can read all statistics views, as expected",
      "description": "The functions underlying the `pg_stat_progress_*` views had not gotten this memo.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Repair performance regression in `information_schema`.`triggers` view",
      "description": "This patch redefines that view so that an outer `WHERE` clause constraining the table name can be pushed down into the view, allowing its calculations to be done only for triggers belonging to the table of interest rather than all triggers in the database. In a database with many triggers this would make a significant speed difference for queries of that form. Since things worked that way before v11, this is a potential performance regression. Users who find this to be a problem can fix it by replacing the view definition (or, perhaps, just deleting and reinstalling the whole `information_schema` schema).",
      "fixedIn": "11.8",
      "significant": true,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix full text search to handle NOT above a phrase search correctly",
      "description": "Queries such as `!(foo<->bar)` failed to find matching rows when implemented as a GiST or GIN index search.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix full text search for cases where a phrase search includes an item with both prefix matching and a weight restriction",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix `ts_headline()` to make better headline selections when working with phrase queries",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix bugs in `gin_fuzzy_search_limit` processing",
      "description": "A small value of `gin_fuzzy_search_limit` could result in unexpected slowness due to unintentionally rescanning the same index page many times. Another code path failed to apply the intended filtering at all, possibly returning too many values.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Adé Heyward",
        "Tom Lane"
      ]
    },
    {
      "title": "Allow input of type `circle` to accept the format “`` (_`x`_,_`y`_),_`r`_ ``” as the documentation says it does",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "David Zhang"
      ]
    },
    {
      "title": "Make the `get_bit()` and `set_bit()` functions cope with `bytea` strings longer than 256MB",
      "description": "Since the bit number argument is only `int4`, it's impossible to use these functions to access bits beyond the first 256MB of a long `bytea`. We'll widen the argument to `int8` in v13, but in the meantime, allow these functions to work on the initial substring of a long `bytea`.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Movead Li"
      ]
    },
    {
      "title": "Ignore file-not-found errors in `pg_ls_waldir()` and allied functions",
      "description": "This prevents a race condition failure if a file is removed between when we see its directory entry and when we attempt to `stat()` it.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid possibly leaking an open-file descriptor for a directory in `pg_ls_dir()`, `pg_timezone_names()`, `pg_tablespace_databases()`, and allied functions",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Justin Pryzby"
      ]
    },
    {
      "title": "Fix polymorphic-function type resolution to correctly infer the actual type of an `anyarray` output when given only an `anyrange` input",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid leakage of a hashed subplan's hash tables across multiple executions",
      "description": "This mistake could result in severe memory bloat if a query re-executed a hashed subplan enough times.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Andreas Karlsson",
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid unlikely crash when `REINDEX` is terminated by a session-shutdown signal",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix low-probability crash after constraint violation errors in partitioned tables",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Prevent printout of possibly-incorrect hash join table statistics in `EXPLAIN`",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Konstantin Knizhnik",
        "Tom Lane",
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix reporting of elapsed time for heap truncation steps in `VACUUM VERBOSE`",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tatsuhito Kasahara"
      ]
    },
    {
      "title": "Fix possible undercounting of deleted B-tree index pages in `VACUUM VERBOSE` output",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix wrong bookkeeping for oldest deleted page in a B-tree index",
      "description": "This could cause subtly wrong decisions about when `VACUUM` can skip an index cleanup scan; although it appears there may be no significant user-visible effects from that.",
      "fixedIn": "11.8",
      "significant": true,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Ensure that TimelineHistoryRead and TimelineHistoryWrite wait states are reported in all code paths that read or write timeline history files",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Masahiro Ikeda"
      ]
    },
    {
      "title": "Avoid possibly showing “waiting” twice in a process's PS status",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Avoid failure if autovacuum tries to access a just-dropped temporary schema",
      "description": "This hazard only arises if a superuser manually drops a temporary schema; which isn't normal practice, but should work.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid premature recycling of WAL segments during crash recovery",
      "description": "WAL segments that become ready to be archived during crash recovery were potentially recycled without being archived.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais"
      ]
    },
    {
      "title": "Avoid scanning irrelevant timelines during archive recovery",
      "description": "This can eliminate many attempts to fetch non-existent WAL files from archive storage, which is helpful if archive access is slow.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi"
      ]
    },
    {
      "title": "Remove bogus “subtransaction logged without previous top-level txn record” error check in logical decoding",
      "description": "This condition is legitimately reachable in various scenarios, so remove the check.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Arseny Sher",
        "Amit Kapila"
      ]
    },
    {
      "title": "Ensure that a replication slot's `io_in_progress_lock` is released in failure code paths",
      "description": "This could result in a walsender later becoming stuck waiting for the lock.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Pavan Deolasee"
      ]
    },
    {
      "title": "Fix race conditions in synchronous standby management",
      "description": "During a change in the `synchronous_standby_names` setting, there was a window in which wrong decisions could be made about whether it is OK to release transactions that are waiting for synchronous commit. Another hazard for similarly wrong decisions existed if a walsender process exited and was immediately replaced by another.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure `nextXid` can't go backwards on a standby server",
      "description": "This race condition could allow incorrect hot standby feedback messages to be sent back to the primary server, potentially allowing `VACUUM` to run too soon on the primary.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Eka Palamadai"
      ]
    },
    {
      "title": "Add missing SQLSTATE values to a few error reports",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Sawada Masahiko"
      ]
    },
    {
      "title": "Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix memory leak in libpq when using `sslmode=verify-full`",
      "description": "Certificate verification during connection startup could leak some memory. This would become an issue if a client process opened many database connections during its lifetime.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Roman Peshkurov"
      ]
    },
    {
      "title": "Fix ecpg to treat an argument of just “`-`” as meaning “read from stdin” on all platforms",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Allow tab-completion of the filename argument to psql's `\\gx` command",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Vik Fearing"
      ]
    },
    {
      "title": "Add pg\\_dump support for `ALTER ... DEPENDS ON EXTENSION`",
      "description": "pg\\_dump previously ignored dependencies added this way, causing them to be forgotten during dump/restore or pg\\_upgrade.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix pg\\_dump to dump comments on RLS policy objects",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In pg\\_dump, postpone restore of event triggers till the end",
      "description": "This minimizes the risk that an event trigger could interfere with the restoration of other objects.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Fabrízio de Royes Mello",
        "Hamid Akhtar",
        "Tom Lane"
      ]
    },
    {
      "title": "Make pg\\_verify\\_checksums skip tablespace subdirectories that belong to a different PostgreSQL major version",
      "description": "Such subdirectories don't really belong to our database cluster, and so must not be processed.",
      "fixedIn": "11.8",
      "significant": true,
      "contributors": [
        "Michael Banck",
        "Bernd Helmle"
      ]
    },
    {
      "title": "Ignore temporary copies of `pg_internal.init` in pg\\_verify\\_checksums and related programs",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix quoting of `--encoding`, `--lc-ctype` and `--lc-collate` values in createdb utility",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "`contrib/lo`'s `lo_manage()` function crashed if called directly rather than as a trigger",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In `contrib/ltree`, protect against overflow of `ltree` and `lquery` length fields",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Nikita Glukhov"
      ]
    },
    {
      "title": "Work around failure in `contrib/pageinspect`'s `bt_metap()` function when an oldest\\_xact value exceeds 2^31-1",
      "description": "Such XIDs will now be reported as negative integers, which isn't great but it beats throwing an error. v13 will widen the output argument to `int8` to provide saner reporting.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Fix cache reference leak in `contrib/sepgsql`",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Michael Luo"
      ]
    },
    {
      "title": "Avoid failures when dealing with Unix-style locale names on Windows",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Juan José Santamaría Flecha"
      ]
    },
    {
      "title": "Use pkg-config, if available, to locate libxml2 during configure",
      "description": "If pkg-config is not present or lacks knowledge of libxml2, we still query xml2-config as before.\n\nThis change could break build processes that try to make PostgreSQL use a non-default version of libxml2 by putting that version's xml2-config into the `PATH`. Instead, set `XML2_CONFIG` to point to the non-default xml2-config. That method will work with either older or newer PostgreSQL releases.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Hugh McMaster",
        "Tom Lane",
        "Peter Eisentraut"
      ]
    },
    {
      "title": "In MSVC builds, cope with spaces in the path name for Python",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Victor Wagner"
      ]
    },
    {
      "title": "In MSVC builds, fix detection of Visual Studio version to work with more language settings",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "In MSVC builds, use `-Wno-deprecated` with bison versions newer than 3.0, as non-Windows builds already do",
      "description": "",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": [
        "Andrew Dunstan"
      ]
    },
    {
      "title": "Update time zone data files to tzdata release 2020a for DST law changes in Morocco and the Canadian Yukon, plus historical corrections for Shanghai.",
      "description": "The America/Godthab zone has been renamed to America/Nuuk to reflect current English usage; however, the old name remains available as a compatibility link.\n\nAlso, update initdb's list of known Windows time zone names to include recent additions, improving the odds that it will correctly translate the system time zone setting on that platform.",
      "fixedIn": "11.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge cases in partition pruning",
      "description": "When there are multiple partition key columns, generation of pruning tests could misbehave if some columns had no constraining `WHERE` clauses or multiple constraining clauses. This could lead to server crashes, incorrect query results, or assertion failures.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Etsuro Fujita",
        "Dmitry Dolgov"
      ]
    },
    {
      "title": "Fix construction of parameterized BitmapAnd and BitmapOr index scans on the inside of partition-wise nestloop joins",
      "description": "A plan in which such a scan needed to use a value from the outside of the join would usually crash at execution.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "In logical replication walsender, fix failure to send feedback messages after sending a keepalive message",
      "description": "This is a relatively minor problem when using built-in logical replication, because the built-in walreceiver will send a feedback reply (which clears the incorrect state) fairly frequently anyway. But with some other replication systems, such as pglogical, it causes significant performance issues.",
      "fixedIn": "11.9",
      "significant": true,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix firing of column-specific `UPDATE` triggers in logical replication subscribers",
      "description": "The code neglected to account for the possibility of column numbers being different between the publisher and subscriber tables, so that if those were indeed different, wrong decisions might be made about which triggers to fire.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Update oldest xmin and LSN values during `pg_replication_slot_advance()`",
      "description": "This function previously failed to do that, possibly preventing resource cleanup (such as removal of no-longer-needed WAL segments) after manual advancement of a replication slot.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix slow execution of `ts_headline()`",
      "description": "The phrase-search fix added in our previous set of minor releases could cause `ts_headline()` to take unreasonable amounts of time for long documents; to make matters worse, the query was not cancellable within the troublesome loop.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure the `repeat()` function can be interrupted by query cancel",
      "description": "",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Joe Conway"
      ]
    },
    {
      "title": "Fix `pg_current_logfile()` to not include a carriage return (`\\r`) in its result on Windows",
      "description": "",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that `pg_read_file()` and related functions read until EOF is reached",
      "description": "Previously, if not given a specific data length to read, these functions would stop at whatever file length was reported by `stat()`. That's unhelpful for pipes and other sorts of virtual files.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Joe Conway"
      ]
    },
    {
      "title": "Fix mis-handling of `NaN` inputs during parallel aggregation on `numeric`\\-type columns",
      "description": "If some partial aggregation workers found only `NaN`s while others found only non-`NaN`s, the results were combined incorrectly, possibly leading to the wrong overall result (i.e., not `NaN` when it should be).",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reject time-of-day values greater than 24 hours",
      "description": "The intention of the datetime input code is to allow “24:00:00” or equivalently “23:59:60”, but no larger value. However, the range check was miscoded so that it would accept “23:59:60._`nnn`_” with nonzero fractional-second _`nnn`_. In timestamp values this would result in wrapping into the first second of the next day. In `time` and `timetz` values, the stored value would actually be more than 24 hours, causing dump/reload failures and possibly other misbehavior.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Undo double-quoting of index names in `EXPLAIN`'s non-text output formats",
      "description": "",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane",
        "Euler Taveira"
      ]
    },
    {
      "title": "Fix `EXPLAIN`'s accounting for resource usage, particularly buffer accesses, in parallel workers in a plan using `Gather Merge` nodes",
      "description": "",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Jehan-Guillaume de Rorthais"
      ]
    },
    {
      "title": "Fix timing of constraint revalidation in `ALTER TABLE`",
      "description": "If `ALTER TABLE` needs to fully rewrite the table's contents (for example, due to change of a column's data type) and also needs to scan the table to re-validate foreign keys or `CHECK` constraints, it sometimes did things in the wrong order, leading to odd errors such as “could not read block 0 in file \"base/nnnnn/nnnnn\": read only 0 of 8192 bytes”.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Work around incorrect not-null markings for `pg_subscription`.`subslotname` and `pg_subscription_rel`.`srsublsn`",
      "description": "The bootstrap catalog data incorrectly marks these two catalog columns as always non-null. There's no easy way to correct that mistake in existing installations (though v13 and later will have the correct markings). The main place that depends on that marking being correct is JIT-enabled tuple deconstruction, so teach it to explicitly ignore the marking for these two columns. Also adjust some C code that accessed `srsublsn` without checking to see if it's null; a crash from that is improbable but perhaps not impossible.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Cope with `LATERAL` references in restriction clauses attached to an un-flattened sub-`SELECT` in the `FROM` clause",
      "description": "This oversight could result in assertion failures or crashes at query execution.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Avoid believing that a never-analyzed foreign table has zero tuples",
      "description": "This primarily affected the planner's estimate of the number of groups that would be obtained by `GROUP BY`.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Remove bogus warning about “leftover placeholder tuple” in BRIN index de-summarization",
      "description": "The case can occur legitimately after a cancelled vacuum, so warning about it is overly noisy.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix selection of tablespaces for “shared fileset” temporary files",
      "description": "If `temp_tablespaces` is empty or explicitly names the database's primary tablespace, such files got placed into the `pg_default` tablespace rather than the database's primary tablespace as expected.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Magnus Hagander",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix corner-case error in masking of SP-GiST index pages during WAL consistency checking",
      "description": "This could cause false failure reports when `wal_consistency_checking` is enabled.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Improve error handling in the server's `buffile` module",
      "description": "Fix some cases where I/O errors were indistinguishable from reaching EOF, or were not reported at all. Also add details such as block numbers and byte counts where appropriate.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fix conflict-checking anomalies in `SERIALIZABLE` isolation mode",
      "description": "If a concurrently-inserted tuple was updated by a different concurrent transaction, and neither tuple version was visible to the current transaction's snapshot, serialization conflict checking could draw the wrong conclusions about whether the tuple was relevant to the results of the current transaction. This could allow a serializable transaction to commit when it should have failed with a serialization error.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Avoid repeated marking of dead btree index entries as dead",
      "description": "While functionally harmless, this led to useless WAL traffic when checksums are enabled or `wal_log_hints` is on.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Avoid trouble during cleanup of a non-exclusive backup when JIT compilation has been activated during the backup",
      "description": "",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Fix failure of some code paths to acquire the correct lock before modifying `pg_control`",
      "description": "This oversight could allow `pg_control` to be written out with an inconsistent checksum, possibly causing trouble later, including inability to restart the database if it crashed before the next `pg_control` update.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Nathan Bossart",
        "Fujii Masao"
      ]
    },
    {
      "title": "Fix errors in `currtid()` and `currtid2()`",
      "description": "These functions (which are undocumented and used only by ancient versions of the ODBC driver) contained coding errors that could result in crashes, or in confusing error messages such as “could not open file” when applied to a relation having no storage.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Avoid calling `elog()` or `palloc()` while holding a spinlock",
      "description": "Logic associated with replication slots had several violations of this coding rule. While the odds of trouble are quite low, an error in the called function would lead to a stuck spinlock.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Tom Lane"
      ]
    },
    {
      "title": "Fix assertion in logical replication subscriber to allow use of `REPLICA IDENTITY FULL`",
      "description": "This was just an incorrect assertion, so it has no impact on standard production builds.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Euler Taveira"
      ]
    },
    {
      "title": "Report out-of-disk-space errors properly in pg\\_dump and pg\\_basebackup",
      "description": "Some code paths could produce silly reports like “could not write file: Success”.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Justin Pryzby",
        "Tom Lane",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Fix parallel restore of tables having both table-level privileges and per-column privileges",
      "description": "The table-level privilege grants have to be applied first, but a parallel restore did not reliably order them that way; this could lead to “tuple concurrently updated” errors, or to disappearance of some per-column privilege grants. The fix for this is to include dependency links between such entries in the archive file, meaning that a new dump has to be taken with a corrected pg\\_dump to ensure that the problem will not recur.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Ensure that pg\\_upgrade runs with `vacuum_defer_cleanup_age` set to zero in the target cluster",
      "description": "If the target cluster's configuration has been modified to set `vacuum_defer_cleanup_age` to a nonzero value, that prevented freezing of the system catalogs from working properly, which caused the upgrade to fail in confusing ways. Ensure that any such setting is overridden for the duration of the upgrade.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Bruce Momjian"
      ]
    },
    {
      "title": "Fix pg\\_recvlogical to drain pending messages before exiting",
      "description": "Without this, the replication sender might detect a send failure and exit without making the expected final update to the replication slot's LSN position. That led to re-transmitting data after the next connection. It was also possible to miss error messages sent after the last data that pg\\_recvlogical wants to consume.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "title": "Fix pg\\_rewind's handling of just-deleted files in the source data directory",
      "description": "When working with an on-line source database, concurrent file deletions are possible, but pg\\_rewind would get confused if deletion happened between seeing a file's directory entry and examining it with `stat()`.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Justin Pryzby",
        "Michael Paquier"
      ]
    },
    {
      "title": "Make pg\\_test\\_fsync use binary I/O mode on Windows",
      "description": "Previously it wrote the test file in text mode, which is not an accurate reflection of PostgreSQL's actual usage.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Fix `contrib/amcheck` to not complain about deleted index pages that are empty",
      "description": "This state of affairs is normal during WAL replay.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Alexander Korotkov"
      ]
    },
    {
      "title": "Fix failure to initialize local state correctly in `contrib/dblink`",
      "description": "With the right combination of circumstances, this could lead to `dblink_close()` issuing an unexpected remote `COMMIT`.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Joe Conway"
      ]
    },
    {
      "title": "Fix `contrib/pgcrypto`'s misuse of `deflate()`",
      "description": "The `pgp_sym_encrypt` functions could produce incorrect compressed data due to mishandling of zlib's API requirements. We have no reports of this error manifesting with stock zlib, but it can be seen when using IBM's zlibNX implementation.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Fix corner case in decompression logic in `contrib/pgcrypto`'s `pgp_sym_decrypt` functions",
      "description": "A compressed stream can validly end with an empty packet, but the decompressor failed to handle this and would complain about corrupt data.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Michael Paquier"
      ]
    },
    {
      "title": "Use POSIX-standard `strsignal()` in place of the BSD-ish `sys_siglist[]`",
      "description": "This avoids build failures with very recent versions of glibc.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Support building our NLS code with Microsoft Visual Studio 2015 or later",
      "description": "",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Juan José Santamaría Flecha",
        "Davinder Singh",
        "Amit Kapila"
      ]
    },
    {
      "title": "Avoid possible failure of our MSVC install script when there is a file named `configure` several levels above the source code tree",
      "description": "This could confuse some logic that looked for `configure` to identify the top level of the source tree.",
      "fixedIn": "11.9",
      "significant": false,
      "contributors": [
        "Arnold Müller"
      ]
    },
    {
      "title": "Automatic (but overridable) inlining of [common table expressions](https://www.postgresql.org/docs/12/queries-with.html \"7.8. WITH Queries (Common Table Expressions)\")",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": [
        "CTEs"
      ]
    },
    {
      "title": "Reduction of WAL overhead for creation of [GiST](https://www.postgresql.org/docs/12/gist.html \"Chapter 64. GiST Indexes\"), [GIN](https://www.postgresql.org/docs/12/gin.html \"Chapter 66. GIN Indexes\"), and [SP-GiST](https://www.postgresql.org/docs/12/spgist.html \"Chapter 65. SP-GiST Indexes\") indexes",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support for covering [GiST](https://www.postgresql.org/docs/12/gist.html \"Chapter 64. GiST Indexes\") indexes, via the [INCLUDE](https://www.postgresql.org/docs/12/indexes-index-only-scans.html \"11.9. Index-Only Scans and Covering Indexes\") clause",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "[REINDEX CONCURRENTLY](https://www.postgresql.org/docs/12/sql-reindex.html#SQL-REINDEX-CONCURRENTLY \"Rebuilding Indexes Concurrently\") can rebuild an index without blocking writes to its table",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "[pg\\_checksums](https://www.postgresql.org/docs/12/app-pgchecksums.html \"pg_checksums\") can enable/disable page checksums (used for detecting data corruption) in an offline cluster",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Progress reporting statistics for [CREATE INDEX](https://www.postgresql.org/docs/12/sql-createindex.html \"CREATE INDEX\"), [REINDEX](https://www.postgresql.org/docs/12/sql-reindex.html \"REINDEX\"), [CLUSTER](https://www.postgresql.org/docs/12/sql-cluster.html \"CLUSTER\"), [VACUUM FULL](https://www.postgresql.org/docs/12/sql-vacuum.html \"VACUUM\"), and [pg\\_checksums](https://www.postgresql.org/docs/12/app-pgchecksums.html \"pg_checksums\")",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support for the [SQL/JSON path](https://www.postgresql.org/docs/12/functions-json.html#FUNCTIONS-SQLJSON-PATH \"9.15.2. The SQL/JSON Path Language\") language",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Stored [generated columns](https://www.postgresql.org/docs/12/ddl-generated-columns.html \"5.3. Generated Columns\")",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "[Nondeterministic](https://www.postgresql.org/docs/12/collation.html#COLLATION-NONDETERMINISTIC \"23.2.2.4. Nondeterministic Collations\") ICU collations, enabling case-insensitive and accent-insensitive grouping and ordering",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "New authentication features, including:",
      "description": "* Encryption of TCP/IP connections when using [GSSAPI](https://www.postgresql.org/docs/12/gssapi-auth.html \"20.6. GSSAPI Authentication\") authentication\n* Discovery of LDAP servers using DNS SRV records\n* Multi-factor authentication, using the [clientcert=verify-full](https://www.postgresql.org/docs/12/auth-cert.html \"20.12. Certificate Authentication\") option combined with an additional authentication method in `pg_hba.conf`",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Encryption of TCP/IP connections when using [GSSAPI](https://www.postgresql.org/docs/12/gssapi-auth.html \"20.6. GSSAPI Authentication\") authentication",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Discovery of LDAP servers using DNS SRV records",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Multi-factor authentication, using the [clientcert=verify-full](https://www.postgresql.org/docs/12/auth-cert.html \"20.12. Certificate Authentication\") option combined with an additional authentication method in `pg_hba.conf`",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove the special behavior of [oid](https://www.postgresql.org/docs/12/datatype-oid.html \"8.19. Object Identifier Types\") columns",
      "description": "Previously, a normally-invisible `oid` column could be specified during table creation using `WITH OIDS`; that ability has been removed. Columns can still be explicitly declared as type `oid`. Operations on tables that have columns created using `WITH OIDS` will need adjustment.\n\nThe system catalogs that previously had hidden `oid` columns now have ordinary `oid` columns. Hence, `SELECT *` will now output those columns, whereas previously they would be displayed only if selected explicitly.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove data types `abstime`, `reltime`, and `tinterval`",
      "description": "These are obsoleted by SQL-standard types such as `timestamp`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove the `timetravel` extension (Andres Freund) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Move `recovery.conf` settings into [postgresql.conf](https://www.postgresql.org/docs/12/runtime-config-wal.html#RUNTIME-CONFIG-WAL-ARCHIVE-RECOVERY \"19.5.4. Archive Recovery\")",
      "description": "`recovery.conf` is no longer used, and the server will not start if that file exists. [recovery.signal](https://www.postgresql.org/docs/12/runtime-config-wal.html#RUNTIME-CONFIG-WAL-ARCHIVE-RECOVERY \"19.5.4. Archive Recovery\") and `standby.signal` files are now used to switch into non-primary mode. The `trigger_file` setting has been renamed to [promote\\_trigger\\_file](https://www.postgresql.org/docs/12/runtime-config-replication.html#GUC-PROMOTE-TRIGGER-FILE). The `standby_mode` setting has been removed.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Do not allow multiple conflicting [recovery\\_target\\*](https://www.postgresql.org/docs/12/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET \"19.5.5. Recovery Target\") specifications",
      "description": "Specifically, only allow one of [recovery\\_target](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-RECOVERY-TARGET), [recovery\\_target\\_lsn](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-RECOVERY-TARGET-LSN), [recovery\\_target\\_name](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-RECOVERY-TARGET-NAME), [recovery\\_target\\_time](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-RECOVERY-TARGET-TIME), and [recovery\\_target\\_xid](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-RECOVERY-TARGET-XID). Previously, multiple different instances of these parameters could be specified, and the last one was honored. Now, only one can be specified, though the same one can be specified multiple times and the last specification is honored.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cause recovery to advance to the latest timeline by default",
      "description": "Specifically, [recovery\\_target\\_timeline](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-RECOVERY-TARGET-TIMELINE) now defaults to `latest`. Previously, it defaulted to `current`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Refactor code for [geometric functions and operators](https://www.postgresql.org/docs/12/functions-geometry.html \"9.11. Geometric Functions and Operators\")",
      "description": "This could lead to more accurate, but slightly different, results compared to previous releases. Notably, cases involving NaN, underflow, overflow, and division by zero are handled more consistently than before.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "[random()](https://www.postgresql.org/docs/12/functions-math.html#FUNCTIONS-MATH-RANDOM-TABLE \"Table 9.6. Random Functions\") and `setseed()` now behave uniformly across platforms",
      "description": "The sequence of `random()` values generated following a `setseed()` call with a particular seed value is likely to be different now than before. However, it will also be repeatable, which was not previously guaranteed because of interference from other uses of random numbers inside the server. The SQL `random()` function now has its own private per-session state to forestall that.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change SQL-style [substring()](https://www.postgresql.org/docs/12/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP \"9.7.2. SIMILAR TO Regular Expressions\") to have standard-compliant greediness behavior",
      "description": "In cases where the pattern can be matched in more than one way, the initial sub-pattern is now treated as matching the least possible amount of text rather than the greatest; for example, a pattern such as `%#\"aa*#\"%` now selects the first group of `a`'s from the input, not the last group.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Do not pretty-print the result of [xpath()](https://www.postgresql.org/docs/12/functions-xml.html \"9.14. XML Functions\") or the `XMLTABLE` construct",
      "description": "In some cases, these functions would insert extra whitespace (newlines and/or spaces) in nodeset values. This is undesirable since depending on usage, the whitespace might be considered semantically significant.",
      "fixedIn": "12.0",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Rename command-line tool pg\\_verify\\_checksums to [pg\\_checksums](https://www.postgresql.org/docs/12/app-pgchecksums.html \"pg_checksums\") (Michaël Paquier) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In [pg\\_restore](https://www.postgresql.org/docs/12/app-pgrestore.html \"pg_restore\"), require specification of `-f -` to send the dump contents to standard output",
      "description": "Previously, this happened by default if no destination was specified, but that was deemed to be unfriendly.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow non-unique abbreviations in psql's `\\pset format` command",
      "description": "Previously, for example, `\\pset format a` chose `aligned`; it will now fail since that could equally well mean `asciidoc`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Split the [pg\\_statistic\\_ext](https://www.postgresql.org/docs/12/catalog-pg-statistic-ext.html \"51.51. pg_statistic_ext\") catalog into two catalogs, and add the [pg\\_stats\\_ext](https://www.postgresql.org/docs/12/view-pg-stats-ext.html \"51.89. pg_stats_ext\") view of it",
      "description": "This change supports hiding potentially-sensitive statistics data from unprivileged users.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove obsolete [pg\\_constraint](https://www.postgresql.org/docs/12/catalog-pg-constraint.html \"51.13. pg_constraint\").`consrc` column",
      "description": "This column has been deprecated for a long time, because it did not update in response to other catalog changes (such as column renamings). The recommended way to get a text version of a check constraint's expression from `pg_constraint` is `pg_get_expr(conbin, conrelid)`. `pg_get_constraintdef()` is also a useful alternative.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove obsolete [pg\\_attrdef](https://www.postgresql.org/docs/12/catalog-pg-attrdef.html \"51.6. pg_attrdef\").`adsrc` column",
      "description": "This column has been deprecated for a long time, because it did not update in response to other catalog changes (such as column renamings). The recommended way to get a text version of a default-value expression from `pg_attrdef` is `pg_get_expr(adbin, adrelid)`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Mark table columns of type [name](https://www.postgresql.org/docs/12/datatype-character.html#DATATYPE-CHARACTER-SPECIAL-TABLE \"Table 8.5. Special Character Types\") as having “C” collation by default",
      "description": "The comparison operators for data type `name` can now use any collation, rather than always using “C” collation. To preserve the previous semantics of queries, columns of type `name` are now explicitly marked as having “C” collation. A side effect of this is that regular-expression operators on `name` columns will now use the “C” collation by default, not the database collation, to determine the behavior of locale-dependent regular expression patterns (such as `\\w`). If you want non-C behavior for a regular expression on a `name` column, attach an explicit `COLLATE` clause. (For user-defined `name` columns, another possibility is to specify a different collation at table creation time; but that just moves the non-backwards-compatibility to the comparison operators.)",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": [
        "For user-defined `name` columns",
        "another possibility is to specify a different collation at table creation time; but that just moves the non-backwards-compatibility to the comparison operators."
      ]
    },
    {
      "title": "Remove the ability to disable dynamic shared memory",
      "description": "Specifically, [dynamic\\_shared\\_memory\\_type](https://www.postgresql.org/docs/12/runtime-config-resource.html#GUC-DYNAMIC-SHARED-MEMORY-TYPE) can no longer be set to `none`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parse libpq integer connection parameters more strictly",
      "description": "In previous releases, using an incorrect integer value for connection parameters `connect_timeout`, `keepalives`, `keepalives_count`, `keepalives_idle`, `keepalives_interval` and `port` resulted in libpq either ignoring those values or failing with incorrect error messages.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [foreign keys](https://www.postgresql.org/docs/12/ddl-constraints.html#DDL-CONSTRAINTS-FK \"5.4.5. Foreign Keys\") to reference partitioned tables (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow partition bounds to be any expression",
      "description": "Such expressions are evaluated at partitioned-table creation time. Previously, only simple constants were allowed as partition bounds.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `CREATE TABLE`'s tablespace specification for a partitioned table to affect the tablespace of its children (David Rowley, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid sorting when partitions are already being scanned in the necessary order (David Rowley) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include partitioned indexes in the system view [pg\\_indexes](https://www.postgresql.org/docs/12/view-pg-indexes.html \"51.73. pg_indexes\") (Suraj Kharage) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add psql command `\\dP` to list partitioned tables and indexes (Pavel Stehule) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs that could cause `ALTER TABLE DETACH PARTITION` to leave behind incorrect dependency state, allowing subsequent operations to misbehave, for example by not dropping a former partition child index when its table is dropped (Tom Lane) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support [INCLUDE](https://www.postgresql.org/docs/12/indexes-index-only-scans.html \"11.9. Index-Only Scans and Covering Indexes\") columns in [GiST](https://www.postgresql.org/docs/12/gist.html \"Chapter 64. GiST Indexes\") indexes (Andrey Borodin) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for nearest-neighbor (KNN) searches of [SP-GiST](https://www.postgresql.org/docs/12/spgist.html \"Chapter 65. SP-GiST Indexes\") indexes (Nikita Glukhov, Alexander Korotkov, Vlad Sterzhanov) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Delete empty leaf pages during GiST `VACUUM` (Andrey Borodin) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [common table expressions](https://www.postgresql.org/docs/12/queries-with.html \"7.8. WITH Queries (Common Table Expressions)\") (CTEs) to be inlined into the outer query",
      "description": "Specifically, CTEs are automatically inlined if they have no side-effects, are not recursive, and are referenced only once in the query. Inlining can be prevented by specifying `MATERIALIZED`, or forced for multiply-referenced CTEs by specifying `NOT MATERIALIZED`. Previously, CTEs were never inlined and were always evaluated before the rest of the query.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control over when generic plans are used for prepared statements",
      "description": "This is controlled by the [plan\\_cache\\_mode](https://www.postgresql.org/docs/12/runtime-config-query.html#GUC-PLAN-CACHE%5FMODE) server parameter.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Pre-evaluate calls of [LEAST](https://www.postgresql.org/docs/12/functions-conditional.html#FUNCTIONS-GREATEST-LEAST \"9.17.4. GREATEST and LEAST\") and `GREATEST` when their arguments are constants (Vik Fearing) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enable [Just-in-Time](https://www.postgresql.org/docs/12/jit.html \"Chapter 31. Just-in-Time Compilation (JIT)\") (JIT) compilation by default, if the server has been built with support for it",
      "description": "Note that this support is not built by default, but has to be selected explicitly while configuring the build.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [toasted](https://www.postgresql.org/docs/12/storage-toast.html \"69.2. TOAST\") values to be minimally decompressed",
      "description": "This is useful for routines that only need to examine the initial portion of a toasted field.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [ALTER TABLE ... SET NOT NULL](https://www.postgresql.org/docs/12/sql-altertable.html \"ALTER TABLE\") to avoid unnecessary table scans",
      "description": "This can be optimized when the table's column constraints can be recognized as disallowing nulls.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `ALTER TABLE ... SET DATA TYPE` changing between `timestamp` and `timestamptz` to avoid a table rewrite when the session time zone is UTC",
      "description": "In the UTC time zone, these two data types are binary compatible.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow parallelized queries when in [SERIALIZABLE](https://www.postgresql.org/docs/12/transaction-iso.html#XACT-SERIALIZABLE \"13.2.3. Serializable Isolation Level\") isolation mode",
      "description": "Previously, parallelism was disabled when in this mode.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logging of statements from only a percentage of transactions",
      "description": "The parameter [log\\_transaction\\_sample\\_rate](https://www.postgresql.org/docs/12/runtime-config-logging.html#GUC-LOG-TRANSACTION-SAMPLE-RATE) controls this.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add progress reporting to `CREATE INDEX` and `REINDEX` operations",
      "description": "Progress is reported in the [pg\\_stat\\_progress\\_create\\_index](https://www.postgresql.org/docs/12/progress-reporting.html#CREATE-INDEX-PROGRESS-REPORTING \"27.4.1. CREATE INDEX Progress Reporting\") system view.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add progress reporting to `CLUSTER` and `VACUUM FULL`",
      "description": "Progress is reported in the [pg\\_stat\\_progress\\_cluster](https://www.postgresql.org/docs/12/progress-reporting.html#CLUSTER-PROGRESS-REPORTING \"27.4.3. CLUSTER Progress Reporting\") system view.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add progress reporting to [pg\\_checksums](https://www.postgresql.org/docs/12/app-pgchecksums.html \"pg_checksums\")",
      "description": "This is enabled with the option `--progress`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add counter of checksum failures to `pg_stat_database` (Magnus Hagander) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add tracking of global objects in system view `pg_stat_database`",
      "description": "Global objects are shown with a [pg\\_stat\\_database](https://www.postgresql.org/docs/12/monitoring-stats.html#PG-STAT-DATABASE-VIEW \"Table 27.12. pg_stat_database View\").`datid` value of zero.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the ability to list the contents of the archive directory",
      "description": "The function is [pg\\_ls\\_archive\\_statusdir()](https://www.postgresql.org/docs/12/functions-admin.html#FUNCTIONS-ADMIN-GENFILE-TABLE \"Table 9.94. Generic File Access Functions\").",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the ability to list the contents of temporary directories",
      "description": "The function, [pg\\_ls\\_tmpdir()](https://www.postgresql.org/docs/12/functions-admin.html#FUNCTIONS-ADMIN-GENFILE-TABLE \"Table 9.94. Generic File Access Functions\"), optionally allows specification of a tablespace.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add information about the client certificate to the system view [pg\\_stat\\_ssl](https://www.postgresql.org/docs/12/monitoring-stats.html#PG-STAT-SSL-VIEW \"Table 27.8. pg_stat_ssl View\")",
      "description": "The new columns are `client_serial` and `issuer_dn`. Column `clientdn` has been renamed to `client_dn` for clarity.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Restrict visibility of rows in `pg_stat_ssl` for unprivileged users (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "At server start, emit a log message including the server version number (Christoph Berg) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent logging “incomplete startup packet” if a new connection is immediately closed",
      "description": "This avoids log spam from certain forms of monitoring.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include the [application\\_name](https://www.postgresql.org/docs/12/runtime-config-logging.html#GUC-APPLICATION-NAME), if set, in [log\\_connections](https://www.postgresql.org/docs/12/runtime-config-logging.html#GUC-LOG-CONNECTIONS) log messages (Don Seiler) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make the walreceiver set its application name to the cluster name, if set (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the timestamp of the last received standby message to [pg\\_stat\\_replication](https://www.postgresql.org/docs/12/monitoring-stats.html#PG-STAT-REPLICATION-VIEW \"Table 27.5. pg_stat_replication View\") (Lim Myungkyu) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add a [wait event](https://www.postgresql.org/docs/12/monitoring-stats.html#WAIT-EVENT-TABLE \"Table 27.4. wait_event Description\") for fsync of WAL segments (Konstantin Knizhnik) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [GSSAPI](https://www.postgresql.org/docs/12/gssapi-auth.html \"20.6. GSSAPI Authentication\") encryption support",
      "description": "This feature allows TCP/IP connections to be encrypted when using GSSAPI authentication, without having to set up a separate encryption facility such as SSL. In support of this, add `hostgssenc` and `hostnogssenc` record types in [pg\\_hba.conf](https://www.postgresql.org/docs/12/auth-pg-hba-conf.html \"20.1. The pg_hba.conf File\") for selecting connections that do or do not use GSSAPI encryption, corresponding to the existing `hostssl` and `hostnossl` record types. There is also a new [gssencmode](https://www.postgresql.org/docs/12/libpq-connect.html#LIBPQ-CONNECT-GSSENCMODE) libpq option, and a [pg\\_stat\\_gssapi](https://www.postgresql.org/docs/12/monitoring-stats.html#PG-STAT-GSSAPI-VIEW \"Table 27.9. pg_stat_gssapi View\") system view.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the [clientcert](https://www.postgresql.org/docs/12/auth-cert.html \"20.12. Certificate Authentication\") `pg_hba.conf` option to check that the database user name matches the client certificate's common name",
      "description": "This new check is enabled with `clientcert=verify-full`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow discovery of an [LDAP](https://www.postgresql.org/docs/12/auth-ldap.html \"20.10. LDAP Authentication\") server using DNS SRV records",
      "description": "This avoids the requirement of specifying `ldapserver`. It is only supported if PostgreSQL is compiled with OpenLDAP.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add ability to enable/disable cluster checksums using [pg\\_checksums](https://www.postgresql.org/docs/12/app-pgchecksums.html \"pg_checksums\")",
      "description": "The cluster must be shut down for these operations.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [vacuum\\_cost\\_delay](https://www.postgresql.org/docs/12/runtime-config-resource.html#GUC-VACUUM-COST-DELAY) to specify sub-millisecond delays, by accepting fractional values (Tom Lane) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow time-based server parameters to use units of [microseconds](https://www.postgresql.org/docs/12/config-setting.html \"19.1. Setting Parameters\") (`us`) (Tom Lane) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow fractional input for integer server parameters",
      "description": "For example, `SET work_mem = '30.1GB'` is now allowed, even though `work_mem` is an integer parameter. The value will be rounded to an integer after any required units conversion.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow units to be defined for floating-point server parameters (Tom Lane) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [wal\\_recycle](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-WAL-RECYCLE) and [wal\\_init\\_zero](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-WAL-INIT-ZERO) server parameters to control WAL file recycling",
      "description": "Avoiding file recycling can be beneficial on copy-on-write file systems like ZFS.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server parameter [tcp\\_user\\_timeout](https://www.postgresql.org/docs/12/runtime-config-connection.html#GUC-TCP-USER-TIMEOUT) to control the server's TCP timeout (Ryohei Nagaura) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control of the minimum and maximum SSL protocol versions",
      "description": "The server parameters are [ssl\\_min\\_protocol\\_version](https://www.postgresql.org/docs/12/runtime-config-connection.html#GUC-SSL-MIN-PROTOCOL-VERSION) and [ssl\\_max\\_protocol\\_version](https://www.postgresql.org/docs/12/runtime-config-connection.html#GUC-SSL-MAX-PROTOCOL-VERSION).",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server parameter [ssl\\_library](https://www.postgresql.org/docs/12/runtime-config-preset.html#GUC-SSL-LIBRARY) to report the SSL library version used by the server (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server parameter [shared\\_memory\\_type](https://www.postgresql.org/docs/12/runtime-config-resource.html#GUC-SHARED-MEMORY-TYPE) to control the type of shared memory to use",
      "description": "This allows selection of System V shared memory, if desired.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow some recovery parameters to be changed with reload",
      "description": "These parameters are [archive\\_cleanup\\_command](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-ARCHIVE-CLEANUP-COMMAND), [promote\\_trigger\\_file](https://www.postgresql.org/docs/12/runtime-config-replication.html#GUC-PROMOTE-TRIGGER-FILE), [recovery\\_end\\_command](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-RECOVERY-END-COMMAND), and [recovery\\_min\\_apply\\_delay](https://www.postgresql.org/docs/12/runtime-config-replication.html#GUC-RECOVERY-MIN-APPLY-DELAY).",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the streaming replication timeout ([wal\\_sender\\_timeout](https://www.postgresql.org/docs/12/runtime-config-replication.html#GUC-WAL-SENDER-TIMEOUT)) to be set per connection",
      "description": "Previously, this could only be set cluster-wide.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [pg\\_promote()](https://www.postgresql.org/docs/12/functions-admin.html#FUNCTIONS-RECOVERY-CONTROL \"9.26.4. Recovery Control Functions\") to promote standbys to primaries",
      "description": "Previously, this operation was only possible by using [pg\\_ctl](https://www.postgresql.org/docs/12/app-pg-ctl.html \"pg_ctl\") or creating a trigger file.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow replication slots to be copied",
      "description": "The functions for this are [pg\\_copy\\_physical\\_replication\\_slot()](https://www.postgresql.org/docs/12/functions-admin.html#FUNCTIONS-REPLICATION-TABLE \"Table 9.88. Replication SQL Functions\") and `pg_copy_logical_replication_slot()`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make [max\\_wal\\_senders](https://www.postgresql.org/docs/12/runtime-config-replication.html#GUC-MAX-WAL-SENDERS) not count as part of [max\\_connections](https://www.postgresql.org/docs/12/runtime-config-connection.html#GUC-MAX-CONNECTIONS) (Alexander Kukushkin) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add an explicit value of `current` for [recovery\\_target\\_timeline](https://www.postgresql.org/docs/12/runtime-config-wal.html#GUC-RECOVERY-TARGET-TIMELINE) (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make recovery fail if a [two-phase transaction](https://www.postgresql.org/docs/12/sql-prepare-transaction.html \"PREPARE TRANSACTION\") status file is corrupt",
      "description": "Previously, a warning was logged and recovery continued, allowing the transaction to be lost.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [REINDEX](https://www.postgresql.org/docs/12/sql-reindex.html \"REINDEX\") `CONCURRENTLY` option to allow reindexing without locking out writes",
      "description": "This is also controlled by the [reindexdb](https://www.postgresql.org/docs/12/app-reindexdb.html \"reindexdb\") application's `--concurrently` option.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for [generated columns](https://www.postgresql.org/docs/12/ddl-generated-columns.html \"5.3. Generated Columns\")",
      "description": "The content of generated columns are computed from expressions (including references to other columns in the same table) rather than being specified by `INSERT` or `UPDATE` commands.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add a `WHERE` clause to [COPY FROM](https://www.postgresql.org/docs/12/sql-copy.html \"COPY\") to control which rows are accepted",
      "description": "This provides a simple way to filter incoming data.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add commands to end a transaction and start a new one",
      "description": "The commands are [COMMIT AND CHAIN](https://www.postgresql.org/docs/12/sql-commit.html \"COMMIT\") and [ROLLBACK AND CHAIN](https://www.postgresql.org/docs/12/sql-rollback.html \"ROLLBACK\").",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the ability to skip `VACUUM` and `ANALYZE` operations on tables that cannot be locked immediately",
      "description": "This option is called `SKIP_LOCKED`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `VACUUM` and `ANALYZE` to take optional Boolean argument specifications (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent [TRUNCATE](https://www.postgresql.org/docs/12/sql-truncate.html \"TRUNCATE\"), `VACUUM` and `ANALYZE` from requesting a lock on tables for which the user lacks permission",
      "description": "This prevents unauthorized locking, which could interfere with user queries.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [EXPLAIN](https://www.postgresql.org/docs/12/sql-explain.html \"EXPLAIN\") option `SETTINGS` to output non-default optimizer settings",
      "description": "This output can also be obtained when using [auto\\_explain](https://www.postgresql.org/docs/12/auto-explain.html \"F.4. auto_explain\") by setting `auto_explain.log_settings`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `OR REPLACE` option to [CREATE AGGREGATE](https://www.postgresql.org/docs/12/sql-createaggregate.html \"CREATE AGGREGATE\") (Andrew Gierth) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow modifications of system catalogs' options using [ALTER TABLE](https://www.postgresql.org/docs/12/sql-altertable.html \"ALTER TABLE\")",
      "description": "Modifications of catalogs' `reloptions` and autovacuum settings are now supported. (Setting [allow\\_system\\_table\\_mods](https://www.postgresql.org/docs/12/runtime-config-developer.html#GUC-ALLOW-SYSTEM-TABLE-MODS) is still required.)",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use all key columns' names when selecting default constraint names for foreign keys",
      "description": "Previously, only the first column name was included in the constraint name, resulting in ambiguity for multi-column foreign keys.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update assorted knowledge about Unicode to match Unicode 12.1.0",
      "description": "This fixes, for example, cases where psql would misformat output involving combining characters.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow creation of [collations](https://www.postgresql.org/docs/12/collation.html \"23.2. Collation Support\") that report string equality for strings that are not bit-wise equal",
      "description": "This feature supports “nondeterministic” collations that can define case- and accent-agnostic equality comparisons. Thus, for example, a case-insensitive uniqueness constraint on a text column can be made more easily than before. This is only supported for ICU collations.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for ICU collation attributes on older ICU versions",
      "description": "This allows customization of the collation rules in a consistent way across all ICU versions.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for the SQL/JSON [path](https://www.postgresql.org/docs/12/functions-json.html#FUNCTIONS-SQLJSON-PATH \"9.15.2. The SQL/JSON Path Language\") language",
      "description": "This allows execution of complex queries on `JSON` values using an SQL\\-standard language.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for [hyperbolic functions](https://www.postgresql.org/docs/12/functions-math.html#FUNCTIONS-MATH-HYP-TABLE \"Table 9.8. Hyperbolic Functions\")",
      "description": "Also add `log10()` as an alias for `log()`, for standards compliance.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assorted bugs in [XML functions](https://www.postgresql.org/docs/12/functions-xml.html \"9.14. XML Functions\")",
      "description": "Specifically, in `XMLTABLE`, `xpath()`, and `xmlexists()`, fix some cases where nothing was output for a node, or an unexpected error was thrown, or necessary escaping of XML special characters was omitted.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the `BY VALUE` clause in `XMLEXISTS` and `XMLTABLE`",
      "description": "This SQL-standard clause has no effect in PostgreSQL's implementation, but it was unnecessarily being rejected.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent [current\\_schema()](https://www.postgresql.org/docs/12/functions-info.html#FUNCTIONS-INFO-SESSION-TABLE \"Table 9.63. Session Information Functions\") and `current_schemas()` from being run by parallel workers, as they are not parallel-safe (Michaël Paquier) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `RECORD` and `RECORD[]` to be used as column types in a query's column definition list for a [table function](https://www.postgresql.org/docs/12/queries-table-expressions.html#QUERIES-TABLEFUNCTIONS \"7.2.1.4. Table Functions\") that is declared to return `RECORD` (Elvis Pranskevichus) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow SQL commands and variables with the same names as those commands to be used in the same PL/pgSQL function",
      "description": "For example, allow a variable called `comment` to exist in a function that calls the `COMMENT` SQL command. Previously this combination caused a parse error.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new optional warning and error checks to PL/pgSQL",
      "description": "The new checks allow for run-time validation of `INTO` column counts and single-row results.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add connection parameter [tcp\\_user\\_timeout](https://www.postgresql.org/docs/12/libpq-connect.html#LIBPQ-TCP-USER-TIMEOUT) to control libpq's TCP timeout (Ryohei Nagaura) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow libpq (and thus psql) to report only the `SQLSTATE` value in error messages (Didier Gautheron) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq function [PQresultMemorySize()](https://www.postgresql.org/docs/12/libpq-misc.html#LIBPQ-PQRESULTMEMORYSIZE) to report the memory used by a query result (Lars Kanis, Tom Lane) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove the no-display/debug flag from libpq's `options` connection parameter",
      "description": "This allows this parameter to be set by postgres\\_fdw.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [ecpg](https://www.postgresql.org/docs/12/app-ecpg.html \"ecpg\") to create variables of data type `bytea`",
      "description": "This allows ECPG clients to interact with `bytea` data directly, rather than using an encoded form.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `PREPARE AS` support to ECPG (Ryo Matsumura) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [vacuumdb](https://www.postgresql.org/docs/12/app-vacuumdb.html \"vacuumdb\") to select tables for vacuum based on their wraparound horizon",
      "description": "The options are `--min-xid-age` and `--min-mxid-age`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow vacuumdb to disable waiting for locks or skipping all-visible pages",
      "description": "The options are `--skip-locked` and `--disable-page-skipping`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add colorization to the output of command-line utilities",
      "description": "This is enabled by setting the environment variable `PG_COLOR` to `always` or `auto`. The specific colors used can be adjusted by setting the environment variable `PG_COLORS`, using ANSI escape codes for colors. For example, the default behavior is equivalent to `PG_COLORS=\"error=01;31:warning=01;35:locus=01\"`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add CSV table output mode in psql",
      "description": "This is controlled by `\\pset format csv` or the command-line `--csv` option.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Show the manual page URL in psql's `\\help` output for a SQL command (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Display the IP address in psql's `\\conninfo` (Fabien Coelho) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow values produced by queries to be assigned to pgbench variables",
      "description": "The command for this is `\\gset`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control of log file rotation via [pg\\_ctl](https://www.postgresql.org/docs/12/app-pg-ctl.html \"pg_ctl\")",
      "description": "Previously, this was only possible via an SQL function or a process signal.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly detach the new server process during `pg_ctl start`",
      "description": "This prevents the server from being shut down if the shell script that invoked pg\\_ctl is interrupted later.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_upgrade](https://www.postgresql.org/docs/12/pgupgrade.html \"pg_upgrade\") to use the file system's cloning feature, if there is one",
      "description": "The `--clone` option has the advantages of `--link`, while preventing the old cluster from being changed after the new cluster has started.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow specification of the socket directory to use in pg\\_upgrade",
      "description": "This is controlled by `--socketdir`; the default is the current directory.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_checksums](https://www.postgresql.org/docs/12/app-pgchecksums.html \"pg_checksums\") to disable fsync operations",
      "description": "This is controlled by the `--no-sync` option.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_rewind](https://www.postgresql.org/docs/12/app-pgrewind.html \"pg_rewind\") to disable fsync operations (Michaël Paquier) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [pg\\_test\\_fsync](https://www.postgresql.org/docs/12/pgtestfsync.html \"pg_test_fsync\") to report accurate `open_datasync` durations on Windows (Laurenz Albe) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When pg\\_dump emits data with `INSERT` commands rather than `COPY`, allow more than one data row to be included in each `INSERT`",
      "description": "The option controlling this is `--rows-per-insert`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pg\\_dump to emit `INSERT ... ON CONFLICT DO NOTHING`",
      "description": "This avoids conflict failures during restore. The option is `--on-conflict-do-nothing`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the [extra\\_float\\_digits](https://www.postgresql.org/docs/12/runtime-config-client.html#GUC-EXTRA-FLOAT-DIGITS) setting to be specified for pg\\_dump and pg\\_dumpall",
      "description": "This is primarily useful for making dumps that are exactly comparable across different source server versions. It is not recommended for normal use, as it may result in loss of precision when the dump is restored.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `--exclude-database` option to pg\\_dumpall (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [CREATE ACCESS METHOD](https://www.postgresql.org/docs/12/sql-create-access-method.html \"CREATE ACCESS METHOD\") command to create new table types",
      "description": "This enables the development of new [table access methods](https://www.postgresql.org/docs/12/tableam.html \"Chapter 60. Table Access Method Interface Definition\"), which can optimize storage for different use cases. The existing `heap` access method remains the default.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Build Cygwin binaries using dynamic instead of static libraries (Marco Atzeri) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove configure switch `--disable-strong-random`",
      "description": "A strong random-number source is now required.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "`printf`\\-family functions, as well as `strerror` and `strerror_r`, now behave uniformly across platforms within Postgres code",
      "description": "Notably, `printf` understands `%m` everywhere; on Windows, `strerror` copes with Winsock error codes (it used to do so in backend but not frontend code); and `strerror_r` always follows the GNU return convention.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require a C99-compliant compiler, and MSVC 2013 or later on Windows (Andres Freund) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support use of images in the PostgreSQL documentation (Jürgen Purtz) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `ORDER BY` sorts and `LIMIT` clauses to be pushed to [postgres\\_fdw](https://www.postgresql.org/docs/12/postgres-fdw.html \"F.33. postgres_fdw\") foreign servers in more cases (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly honor `WITH CHECK OPTION` on views that reference postgres\\_fdw tables",
      "description": "While `CHECK OPTION`s on postgres\\_fdw tables are ignored (because the reference is foreign), views on such tables are considered local, so this change enforces `CHECK OPTION`s on them. Previously, only `INSERT`s and `UPDATE`s with `RETURNING` clauses that returned `CHECK OPTION` values were validated.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_stat\\_statements\\_reset()](https://www.postgresql.org/docs/12/pgstatstatements.html \"F.29. pg_stat_statements\") to be more granular",
      "description": "The function now allows reset of statistics for specific databases, users, and queries.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control of the [auto\\_explain](https://www.postgresql.org/docs/12/auto-explain.html \"F.4. auto_explain\") log level",
      "description": "The default is `LOG`.",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update [unaccent](https://www.postgresql.org/docs/12/unaccent.html \"F.43. unaccent\") rules with new punctuation and symbols (Hugh Ranalli, Michaël Paquier) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow unaccent to handle some accents encoded as combining characters (Hugh Ranalli) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow unaccent to remove accents from Greek characters (Tasos Maschalidis) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add a parameter to [amcheck](https://www.postgresql.org/docs/12/amcheck.html \"F.2. amcheck\")'s `bt_index_parent_check()` function to check each index tuple from the root of the tree (Peter Geoghegan) ",
      "description": "",
      "fixedIn": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when `ALTER TABLE` adds a column without a default value along with making other changes that require a table rewrite (Andres Freund) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix lock handling in `REINDEX CONCURRENTLY`",
      "description": "`REINDEX CONCURRENTLY` neglected to take a session-level lock on the new index version, potentially allowing other sessions to manipulate it too soon. Also, a query-cancel or session-termination interrupt arriving at the wrong time could result in failure to release the session-level locks that `REINDEX CONCURRENTLY` does hold.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash due to race condition when reporting the progress of a `CREATE INDEX CONCURRENTLY` or `REINDEX CONCURRENTLY` command (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid creating duplicate dependency entries during `REINDEX CONCURRENTLY`",
      "description": "This bug resulted in bloat in `pg_depend`, but no worse consequences than that.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `VACUUM` from trying to freeze an old multixact ID involving a still-running transaction",
      "description": "This case would lead to `VACUUM` failing until the old transaction terminates.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “wrong type of slot” error when trying to `CLUSTER` on an expression index (Andres Freund) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "`SET CONSTRAINTS ... DEFERRED` failed on partitioned tables, incorrectly complaining about lack of triggers (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure when creating indexes for a partition, if the parent partitioned table contains any dropped columns (Michael Paquier) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dropping of indexed columns in partitioned tables",
      "description": "Previously this might fail with an error message complaining about the dependencies of the indexes. It should automatically drop the indexes, instead.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a partition index can be dropped after a failure to reindex it concurrently",
      "description": "The index's `pg_class`.`relispartition` flag was left in the wrong state in such a case, causing `DROP INDEX` to fail.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of equivalence class members for partition-wise joins",
      "description": "This oversight could lead either to failure to use a feasible partition-wise join plan, or to a “could not find pathkey item to sort” planner failure.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that offset expressions in `WINDOW` clauses are processed when a query's expressions are manipulated",
      "description": "This oversight could result in assorted failures when the offsets are nontrivial expressions. One example is that a function parameter reference in such an expression would fail if the function was inlined.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid postmaster failure if a parallel query requests a background worker when no postmaster child process array slots remain free (Tom Lane) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash triggered by an EvalPlanQual recheck on a table with a `BEFORE UPDATE` trigger (Andres Freund) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “unexpected relkind” error when a query tries to access a TOAST table",
      "description": "The error should say that permission is denied, but this case got broken during code refactoring.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Provide a relevant error context line when an error occurs while setting GUC parameters during parallel worker startup (Thomas Munro) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `fsync()` is applied only to files that are opened read/write",
      "description": "Some code paths tried to do this after opening a file read-only, but on some platforms that causes “bad file descriptor” or similar errors.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow encoding conversion to succeed on longer strings than before",
      "description": "Previously, there was a hard limit of 0.25GB on the input string, but now it will work as long as the converted output is not over 1GB.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid creating unnecessarily-bulky tuple stores for window functions",
      "description": "In some cases the tuple storage would include all columns of the source table(s), not just the ones that are needed by the query.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `repalloc()` to give back space when a large chunk is reduced in size (Tom Lane) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that temporary WAL and history files are removed at the end of archive recovery (Sawada Masahiko) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure in archive recovery if `recovery_min_apply_delay` is enabled",
      "description": "`recovery_min_apply_delay` is not typically used in this configuration, but it should work.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore `restore_command`, `recovery_end_command`, and `recovery_min_apply_delay` settings during crash recovery",
      "description": "Now that these settings can be specified in `postgresql.conf`, they could be turned on during crash recovery, but honoring them then is undesirable. Ignore these settings until crash recovery is complete.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix logical replication failure when publisher and subscriber have different ideas about a table's replica identity columns",
      "description": "Declaring a column as part of the replica identity on the subscriber, when it does not exist at all on the publisher, led to “negative bitmapset member not allowed” errors.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unwanted delay during shutdown of a logical replication walsender (Craig Ringer, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix timeout handling in logical replication walreceiver processes",
      "description": "Erroneous logic prevented `wal_receiver_timeout` from working in logical replication deployments.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly time-stamp replication messages for logical decoding",
      "description": "This oversight resulted, for example, in `pg_stat_subscription`.`last_msg_send_time` usually reading as NULL.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition during backend exit, when the backend process has previously waited for synchronous replication to occur (Dongming Liu) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid logging complaints about abandoned connections when using PAM authentication",
      "description": "libpq-based clients will typically make two connection attempts when a password is required, since they don't prompt their user for a password until their first connection attempt fails. Therefore the server is coded not to generate useless log spam when a client closes the connection upon being asked for a password. However, the PAM authentication code hadn't gotten that memo, and would generate several messages about a phantom authentication failure.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior of `bitshiftright()`",
      "description": "The bitstring right shift operator failed to zero out padding space that exists in the last byte of the result when the bitstring length is not a multiple of 8\\. While invisible to most operations, any nonzero bits there would result in unexpected comparison behavior, since bitstring comparisons don't bother to ignore the extra bits, expecting them to always be zero.\n\nIf you have inconsistent data as a result of saving the output of `bitshiftright()` in a table, it's possible to fix it with something like\n\nUPDATE mytab SET bitcol = ~(~bitcol) WHERE bitcol != ~(~bitcol);",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix result of text `position()` function (also known as `strpos()`) for an empty search string",
      "description": "Historically, and per the SQL standard, the result should be one in such cases, but 12.0 returned zero.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of edge-case integer overflow in interval multiplication (Yuya Watari) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crashes if `ispell` text search dictionaries contain wrong affix data (Arthur Zakirov) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leak while vacuuming a GiST index (Dilip Kumar) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, recognize additional spellings of the “Norwegian (Bokmål)” locale name (Tom Lane) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix libpq to allow trailing whitespace in the string values of integer parameters",
      "description": "Version 12 tightened libpq's validation of integer parameters, but disallowing trailing whitespace seems undesirable.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In libpq, correctly report `CONNECTION_BAD` connection status after a failure caused by a syntactically invalid `connect_timeout` parameter value (Lars Kanis) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid compile failure if an ECPG client includes `ecpglib.h` while having `ENABLE_NLS` defined",
      "description": "This risk was created by a misplaced declaration: `ecpg_gettext()` should not be visible to client code.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix scheduling of parallel restore of a foreign key constraint on a partitioned table",
      "description": "pg\\_dump failed to emit full dependency information for partitioned tables' foreign keys. This could allow parallel pg\\_restore to try to recreate a foreign key constraint too soon.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, ensure stable output order for similarly-named triggers and row-level-security policy objects",
      "description": "Previously, if two triggers on different tables had the same names, they would be sorted in OID-based order, which is less desirable than sorting them by table name. Likewise for RLS policies.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_upgrade, reject tables with columns of type `sql_identifier`, as that has changed representation in version 12 (Tomas Vondra) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve pg\\_upgrade's checks for the use of a data type that has changed representation, such as `line`",
      "description": "The previous coding could be fooled by cases where the data type of interest underlies a stored column of a domain or composite type.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_rewind with the `--dry-run` option, avoid updating `pg_control`",
      "description": "This could lead to failures in subsequent pg\\_rewind attempts.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure in pg\\_waldump with the `-s` option, when a continuation WAL record ends exactly at a page boundary (Andrey Lepikhov) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_waldump with the `--bkp-details` option, avoid emitting extra newlines for WAL records involving full-page writes (Andres Freund) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix small memory leak in pg\\_waldump (Andres Freund) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Put back `pqsignal()` as an exported libpq symbol",
      "description": "This function was removed on the grounds that no clients should be using it, but that turns out to break usage of current libpq with very old versions of psql, and perhaps other applications.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix configure's test for presence of libperl so that it works on recent Red Hat releases",
      "description": "Previously, it could fail if the user sets `CFLAGS` to `-O0`.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure correct code generation for spinlocks on PowerPC",
      "description": "The previous spinlock coding allowed the compiler to select register zero for use with an assembly instruction that does not accept that register, causing a build failure. We have seen only one long-ago report that matches this bug, but it could cause problems for people trying to build modified PostgreSQL code or use atypical compiler options.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On AIX, don't use the compiler option `-qsrcmsg`",
      "description": "This avoids an internal compiler error with xlc v16.1.0, with little consequence other than changing the format of compiler error messages.",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix MSVC build process to cope with spaces in the file path of OpenSSL (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enforce standard locking protocol for TOAST table updates, to prevent problems with `REINDEX CONCURRENTLY`",
      "description": "If applied to a TOAST table or TOAST table's index, `REINDEX CONCURRENTLY` tended to produce a corrupted index. This happened because sessions updating TOAST entries released their `ROW EXCLUSIVE` locks immediately, rather than holding them until transaction commit as all other updates do. The fix is to make TOAST updates hold the table lock according to the normal rule. Any existing corrupted indexes can be repaired by reindexing again.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect plan creation for parallel single-child Append nodes",
      "description": "In some cases the Append would be simplified away when it should not be, leading to wrong query results (duplicated rows).",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "If an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "While the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "If a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "The walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction (Alex Kingsborough, Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be sure to `fsync` the `pg_logical/mappings` subdirectory during checkpoints",
      "description": "On some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "A previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows `ANALYZE` to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual `ANALYZE` on the partitioned table if you want to maintain such statistics.)",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": [
        "But note that autovacuum does not process partitioned tables as such",
        "so you must periodically issue manual `ANALYZE` on the partitioned table if you want to maintain such statistics."
      ]
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Currently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "This restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "The same prohibition already existed for primary key indexes.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update cached table state during `ALTER TABLE ADD PRIMARY KEY USING INDEX`",
      "description": "Concurrent sessions failed to update their opinion of whether the table has a primary key, possibly causing incorrect logical replication behavior.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Concurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaking memory during `REASSIGN OWNED BY` operations that reassign ownership of many objects (Justin Pryzby) ",
      "description": "",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix display of `cert` authentication method's options in `pg_hba_file_rules` view",
      "description": "The `cert` authentication method implies `clientcert=verify-full`, but the `pg_hba_file_rules` view incorrectly reported `clientcert=verify-ca`.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "A whole-row variable would be printed as “var.\\*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "These errors should affect only debug builds, not production.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib (Tom Lane) ",
      "description": "",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid calling `strerror` from libpq's `PQcancel` function",
      "description": "`PQcancel` is supposed to be safe to call from a signal handler, but `strerror` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make psql's `\\password` command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "This agrees with the documented behavior, and avoids probable permissions failure if `SET ROLE` or `SET SESSION AUTHORIZATION` has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext()` from a control-C signal handler",
      "description": "While no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow canceling the initial password prompt in pg\\_receivewal and pg\\_recvlogical",
      "description": "Previously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's dump ordering for user-defined casts",
      "description": "In rare cases, the output script might refer to a user-defined cast before it had been created.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's `--inserts` and `--column-inserts` modes to handle tables containing both generated columns and dropped columns (Tom Lane) ",
      "description": "",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible mis-reporting of errors in pg\\_dump and pg\\_basebackup",
      "description": "The previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix results of index-only scans on `contrib/btree_gist` indexes on `` char(_`N`_) `` columns",
      "description": "Index-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store `` char(_`N`_) `` values with the expected amount of space padding. The behavior of such an index will not change immediately unless you `REINDEX` it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "With Python 3.10, this avoids configure\\-time warnings about distutils being deprecated and scheduled for removal in Python 3.12\\. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later (Victor Wagner) ",
      "description": "",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for building with Visual Studio 2022 (Hans Buschmann) ",
      "description": "",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the `.bat` wrapper scripts in our MSVC build system to be called without first changing into their directory (Anton Voloshin, Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "The column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\n\nIn cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type `record` to begin with and there's no issue.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect output for types `timestamptz` and `timetz` in `table_to_xmlschema()` and allied functions",
      "description": "The xmlschema output for these types included a malformed regular expression.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns (Tom Lane) ",
      "description": "",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner errors for `GROUPING()` constructs that reference outer query levels (Richard Guo, Tom Lane) ",
      "description": "",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "The previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid accessing a no-longer-pinned shared buffer while attempting to lock an outdated tuple during EvalPlanQual",
      "description": "The code would touch the buffer a couple more times after releasing its pin. In theory another process could recycle the buffer (or more likely, try to defragment its free space) as soon as the pin is gone, probably leading to failure to find the newer version of the tuple.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering (Aliaksandr Kalenik) ",
      "description": "",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER FUNCTION` to support changing a function's parallelism property and its `SET`\\-variable list in the same command",
      "description": "The parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bogus errors from attempts to alter system columns of tables",
      "description": "The system should just tell you that you can't do it, but sometimes it would report “no owned sequence found” instead.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-sorting of table rows when `CLUSTER`ing using an index whose leading key is an expression",
      "description": "The table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix risk of deadlock failures while dropping a partitioned index",
      "description": "Ensure that the required table and index locks are taken in the standard order (parents before children, tables before indexes). The previous coding for `DROP INDEX` did it differently, and so could deadlock against concurrent queries taking these locks in the standard order.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition between `DROP TABLESPACE` and checkpointing",
      "description": "The checkpoint forced by `DROP TABLESPACE` could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible trouble in crash recovery after a `TRUNCATE` command that overlaps a checkpoint",
      "description": "`TRUNCATE` must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Temporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve wait logic in RegisterSyncRequest",
      "description": "If we run out of space in the checkpointer sync request queue (which is hopefully rare on real systems, but is common when testing with a very small buffer pool), we wait for it to drain. While waiting, we should report that as a wait event so that users know what is going on, and also watch for postmaster death, since otherwise the loop might never terminate if the checkpointer has already exited.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record (Sami Imseih) ",
      "description": "",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "With unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the `max_sync_workers_per_subscription` limit",
      "description": "Faulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Otherwise subscribers cannot see the values and will fail to replicate the update.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve logical replication subscriber's error message for an unsupported relation kind",
      "description": "v13 and later servers support publishing partitioned tables. Older server versions cannot handle subscribing to such a table, and they gave a very misleading error message: “table XYZ not found on publisher”. Arrange to deliver a more on-point message.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Perl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "This change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6\\. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix behavior of libpq's `PQisBusy()` function after a connection failure",
      "description": "If we'd detected a write failure, `PQisBusy()` would always return true, which is the wrong thing: we want input processing to carry on normally until we've read whatever is available from the server. The practical effect of this error is that applications using libpq's async-query API would typically detect connection loss only when `PQconsumeInput()` returns a hard failure. With this fix, a connection loss will normally be reported via an error `PGresult` object, which is a much cleaner behavior for most applications.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "pg\\_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg\\_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error handling in pg\\_waldump",
      "description": "While trying to read a WAL file to determine the WAL segment size, pg\\_waldump would report an incorrect error for the case of a too-short file. In addition, the file name reported in this and related error messages could be garbage.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `contrib/pageinspect` functions cope with all-zero pages",
      "description": "This is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pageinspect`, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "These changes make it less likely that the module will crash on bad data.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "This fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update JIT code to work with LLVM 14 (Thomas Munro) ",
      "description": "",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Most of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions (Tom Lane) ",
      "description": "",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible build failure of pg\\_dumpall on Windows, when not using MSVC to build (Andres Freund) ",
      "description": "",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "This adapts the build process to work on recent MSys tool chains.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "For some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine. (Tom Lane) ",
      "description": "",
      "fixedIn": "12.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix replay of `CREATE DATABASE` WAL records on standby servers",
      "description": "Standby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Normally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the `CREATE DATABASE` replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In extended query protocol, force an immediate commit after `CREATE DATABASE` and other commands that can't run in a transaction block",
      "description": "If the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "`TransactionIdIsInProgress` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type (Tom Lane) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function (Richard Guo) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables",
      "description": "In certain cases, a “trigger does not exist” failure would occur because the command would try to adjust the trigger on a child partition that doesn't have it.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve syntax error messages for type `jsonpath` (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `pg_stat_get_subscription()` from possibly returning an extra row containing garbage values (Kuntal Ghosh) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_stop_backup()` cleans up session state properly",
      "description": "This omission could lead to assertion failures or crashes later in the session.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "In corner cases, a misleading error could be reported.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject `ROW()` expressions and functions in `FROM` that have too many columns",
      "description": "Cases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When decompiling a view or rule, show a `SELECT` output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "Previously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made",
      "description": "This oversight could lead to dump/reload or pg\\_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "If `CREATE OPERATOR CLASS` results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Previously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent triggering of standby's `wal_receiver_timeout` during logical replication of large transactions",
      "description": "If a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders (Fujii Masao) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in logical replication subscribers (Hou Zhijie) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Such cases could result in harmless warning messages.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Previously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags (Haiyang Wang) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix erroneous assertion checks in shared hashtable management (Thomas Munro) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Arrange to clean up after commit-time errors within `SPI_commit()`, rather than expecting callers to do that",
      "description": "Proper cleanup is complicated and requires use of low-level facilities, so it's not surprising that no known caller got it right. This led to misbehaviors when a PL procedure issued `COMMIT` but a failure occurred (such as a deferred constraint check). To improve matters, redefine `SPI_commit()` as starting a new transaction, so that it becomes equivalent to `SPI_commit_and_chain()` except that you get default transaction characteristics instead of preserving the prior transaction's characteristics. To make this somewhat transparent API-wise, redefine `SPI_start_transaction()` as a no-op. All known callers of `SPI_commit()` immediately call `SPI_start_transaction()`, so they will not notice any change. Similar remarks apply to `SPI_rollback()`.\n\nAlso fix PL/Python, which omitted any handling of such errors at all, resulting in jumping out of the Python interpreter. This is reported to crash Python 3.11\\. Older Python releases leak some memory but seem okay with it otherwise.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "In the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Certain operations such as `EXEC SQL PREPARE` would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale()` calls",
      "description": "Allocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql's `\\watch` command, echo a newline after cancellation with control-C",
      "description": "This prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible report of wrong error condition after `clone()` failure in pg\\_upgrade with `--clone` option (Justin Pryzby) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/pg_stat_statements` to avoid problems with very large query-text files on 32-bit platforms (Tom Lane) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `contrib/postgres_fdw` sends constants of `regconfig` and other `reg*` types with proper schema qualification (Tom Lane) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "This avoids problems when a signal interrupts `posix_fallocate()`.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open()`",
      "description": "This avoids a possible crash on Solaris.",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36 (Dagfinn Ilmari Mannsåker) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap\\_r library when multiple OpenLDAP installations are present while building PostgreSQL (Tom Lane) ",
      "description": "",
      "fixedIn": "12.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid rare PANIC during updates occurring concurrently with `VACUUM`",
      "description": "If a concurrent `VACUUM` sets the all-visible flag bit in a page that `UPDATE` or `DELETE` is in process of modifying, the updating command needs to clear that bit again; but some code paths failed to do so, ending in a PANIC exit and database restart.\n\nThis is known to be possible in versions 14 and 15\\. It may be only latent in previous branches.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `VACUUM` to press on if an attempted page deletion in a btree index fails to find the page's parent downlink",
      "description": "Rather than throwing an error, just log the issue and continue without deleting the empty page. Previously, a buggy operator class or corrupted index could indefinitely prevent completion of vacuuming of the index, eventually leading to transaction wraparound problems.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an `INSERT` on an updatable view",
      "description": "This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix resource management bug in saving tuples for `AFTER` triggers",
      "description": "Given the right circumstances, this manifested as a “tupdesc reference _`NNNN`_ is not owned by resource owner” error followed by a PANIC exit.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair rare failure of MULTIEXPR\\_SUBLINK subplans in inherited updates",
      "description": "Use of the syntax `UPDATE tab SET (c1, ...) = (SELECT ...)` with an inherited or partitioned target table could result in failure if the child tables are sufficiently dissimilar. This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix construction of per-partition foreign key constraints while doing `ALTER TABLE ATTACH PARTITION`",
      "description": "Previously, incorrect or duplicate constraints could be constructed for the newly-added partition.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix generation of constraint names for per-partition foreign key constraints",
      "description": "If the initially-given name is already in use for some constraint of the partition, a new one is selected; but it wasn't being spelled as intended.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect matching of index expressions and predicates when creating a partitioned index",
      "description": "While creating a partitioned index, we try to identify any existing indexes on the partitions that match the partitioned index, so that we can absorb those as child indexes instead of building new ones. Matching of expressions was not done right, so that a usable child index might be ignored, leading to creation of a duplicative index.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "When a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "This ameliorates problems with slow shutdown of replication workers.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "If a syntax error occurred in a SQL-language or PL/pgSQL-language `CREATE FUNCTION` or `DO` command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "If a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": [
        "Within core PostgreSQL",
        "the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types."
      ]
    },
    {
      "title": "Fix type `circle`'s equality comparator to handle NaNs properly",
      "description": "If the left-hand circle had a floating-point NaN for its radius, it would be considered equal to a circle with the same center and any radius.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "If the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Improper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add plan-time check for attempted access to a table that has no table access method",
      "description": "This prevents a crash in some catalog-corruption scenarios, for example use of a view whose `ON SELECT` rule is missing.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add some more defenses against recursion till stack overrun (Richard Guo, Tom Lane) ",
      "description": "",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "The lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve PL/pgSQL's ability to handle parameters declared as `RECORD`",
      "description": "Build a separate function cache entry for each concrete type passed to the `RECORD` parameter during a session, much as we do for polymorphic parameters. This allows some usages to work that previously failed with errors such as “type of parameter does not match that when preparing the plan”.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "There's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()` and `PQisnonblocking()` didn't get that memo, so fix them.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple `varchar` or `bytea` variables are declared in the same declaration",
      "description": "For example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only `str1` was marked `static`.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg\\_basebackup",
      "description": "Allow the remote path in `--tablespace-mapping` to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_stat\\_statements, fix access to already-freed memory",
      "description": "This occurred if pg\\_stat\\_statements tracked a `ROLLBACK` command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In postgres\\_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "This avoids “variable not found in subplan target list” errors in rare cases.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create()` function",
      "description": "The uuid-ossp module expects libc's `uuid_create()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()`.)",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Add `PostgreSQL/Test/Cluster.pm` and `PostgreSQL/Test/Utils.pm` to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "This avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibilities with LLVM 15 (Thomas Munro, Andres Freund) ",
      "description": "",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set()` for spinlocks on any machine",
      "description": "This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane) ",
      "description": "",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using `sprintf`, to avoid compile-time deprecation warnings (Tom Lane) ",
      "description": "",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "12.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.",
      "description": "Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala\\_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan\\_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy\\_River, America/Thunder\\_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n\nThese zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of `timestamptz` display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n\nIt is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "fixedIn": "12.13",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid",
      "description": "When pg\\_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an `INSERT` from a multi-row `VALUES` list",
      "description": "In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject uses of undefined variables in `jsonpath` existence checks",
      "description": "While `jsonpath` match operators threw an error for an undefined variable in the path pattern, the existence operators silently treated it as a match.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Honor non-default settings of `checkpoint_completion_target`",
      "description": "Internal state was not updated after a change in `checkpoint_completion_target`, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Log the correct ending timestamp in `recovery_target_xid` mode",
      "description": "When ending recovery based on the `recovery_target_xid` setting with `recovery_target_inclusive` \\= `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent “wrong tuple length” failure at the end of `VACUUM`",
      "description": "This occurred if `VACUUM` needed to update the current database's `datfrozenxid` value and the database has so many granted privileges that its `datacl` value has been pushed out-of-line.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after `ANALYZE` if we're running a pipeline",
      "description": "If there's not been an explicit `BEGIN TRANSACTION`, `ANALYZE` would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "This could result in “could not devise a query plan for the given query” errors.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range`",
      "description": "Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "fixedIn": "12.14",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches (Tom Lane) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in hashing strings with nondeterministic collations (Jeff Davis) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as `CREATE SUBSCRIPTION`, such a failure resulted in a small session-lifespan memory leak.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when `max_connections` is set to a large value on the standby.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations (Robert Haas) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent unsafe usage of a relation cache entry's `rd_smgr` pointer",
      "description": "Remove various assumptions that `rd_smgr` would stay valid over a series of operations, by wrapping all uses of it in a function that will recompute it if needed. This prevents bugs occurring when an unexpected cache flush occurs partway through such a series.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "The `epoll`\\-based and `kqueue`\\-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove faulty assertion in useless-RESULT-RTE optimization logic (Tom Lane) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, avoid calling unsafe server functions before we have locks on the tables to be examined",
      "description": "pg\\_dump uses certain server functions that can fail if examining a table that gets dropped concurrently. Avoid this type of failure by ensuring that we obtain access share lock before inquiring too deeply into a table's properties, and that we don't apply such functions to tables we don't intend to dump at all.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix tab completion of `ALTER FUNCTION/PROCEDURE/ROUTINE` ... `SET SCHEMA` (Dean Rasheed) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix faulty assertion in `contrib/postgres_fdw` (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/seg` to not crash or print garbage if an input number has more than 127 digits (Tom Lane) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/sepgsql`, avoid deprecation warnings with recent libselinux (Michael Paquier) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix build on Microsoft Visual Studio 2013",
      "description": "A previous patch supposed that all platforms of interest have `snprintf()`, but MSVC 2013 isn't quite there yet. Revert to using `sprintf()` on that platform.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_waldump to build on compilers that don't discard unused static-inline functions (Tom Lane) ",
      "description": "",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.",
      "description": "Notably, a new timezone America/Ciudad\\_Juarez has been split off from America/Ojinaga.",
      "fixedIn": "12.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash when the new schema name is omitted in `CREATE SCHEMA`",
      "description": "The SQL standard allows writing `` CREATE SCHEMA AUTHORIZATION _`ownername`_ ``, with the schema name defaulting to _`ownername`_. However some code paths expected the schema name to be present and would fail.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "`ALTER TYPE` disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow system columns as elements of foreign keys",
      "description": "Since the removal of OID as a system column, there is no plausible use-case for this, and various bits of code no longer support it. Disallow it rather than trying to fix all the cases.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `COPY TO` from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "The documentation is quite clear that `COPY TO` copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible crash when `array_position()` or `array_positions()` is passed an empty array (Tom Lane) ",
      "description": "",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char()`",
      "description": "With bad luck this could have resulted in a server crash.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid buffer overread in `translate()` function",
      "description": "When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data corruption due to `vacuum_defer_cleanup_age` being larger than the current 64-bit xid",
      "description": "In v14 and later with non-default settings of `vacuum_defer_cleanup_age`, it was possible to compute a very large vacuum cleanup horizon xid, leading to vacuum removing rows that are still live. v12 and v13 have a lesser form of the same problem affecting only GiST indexes, which could lead to index pages getting recycled too early.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent crash when updating a field within an array-of-domain-over-composite-type column (Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "A crash was possible given unlucky timing and `parallel_leader_participation` \\= `off` (which is not the default).",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate `GENERATED` columns after an EvalPlanQual check",
      "description": "In `READ COMMITTED` isolation mode, the effects of a row update might need to get reapplied to a newer version of the row than the query found originally. If so, we need to recompute any `GENERATED` columns, in case they depend on columns that were changed by the concurrent update.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation `vacuum_cost_delay` setting of zero",
      "description": "Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation `vacuum_cost_delay` setting, but this was done only for positive settings, not zero.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane) ",
      "description": "",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair rare failure of MULTIEXPR\\_SUBLINK subplans in partitioned updates",
      "description": "Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When decompiling a rule or SQL function body containing `INSERT`/`UPDATE`/`DELETE` within `WITH`, take care to print the correct alias for the target table (Tom Lane) ",
      "description": "",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache\\_callback\\_list slots” error.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore dropped columns and generated columns during logical replication of an update or delete action",
      "description": "Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add missing cases to `SPI_result_code_string()` (Dean Rasheed) ",
      "description": "",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc()`",
      "description": "In the unusual case where the size of a large (>8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message (Tomas Vondra) ",
      "description": "",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range()` when the last few pages in the specified range are empty",
      "description": "It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions (Ajit Awekar, Tom Lane) ",
      "description": "",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Some rare failure cases could return without cleaning up the PG\\_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll()`",
      "description": "With `gssencmode` set to `require`, the connection was not marked dead after a GSS initialization failure. Make it fail immediately, as the equivalent case for TLS encryption has long done.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the `-C ORACLE` option",
      "description": "When `ecpg_get_data()` is called with `varcharsize` set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the `--load-via-partition-root` option; but since there is very little chance of success without that, teach pg\\_dump to apply it automatically to such tables.\n\nAlso, fix pg\\_restore to not try to `TRUNCATE` target tables before restoring into them when `--load-via-partition-root` mode is used. This avoids a hazard of deadlocks and lost data.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/hstore_plpython`, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior in `contrib/pg_trgm` with an unsatisfiable regular expression",
      "description": "A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg\\_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the `--strip-unneeded` option when stripping static libraries with GNU-compatible strip",
      "description": "Previously, `make install-strip` used the `-x` option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's `--nonet` option to the build recipes.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary `portlock` directory",
      "description": "Place it under `tmp_check` in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.",
      "description": "When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "fixedIn": "12.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries",
      "description": "Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n\nThis fix will not in itself correct faulty BRIN entries. It's recommended to `REINDEX` any BRIN indexes that may be used to search for nulls.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaving a corrupted database behind when `DROP DATABASE` is interrupted",
      "description": "If `DROP DATABASE` was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its `pg_database` row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another `DROP DATABASE`.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during `ALTER TABLE ATTACH PARTITION`",
      "description": "Such an index will now be ignored, and a new child index created instead.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "The update of the index's `pg_index` entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER EXTENSION SET SCHEMA` to complain if the extension contains any objects outside the extension's schema",
      "description": "Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "fixedIn": "12.16",
      "significant": true,
      "contributors": [
        "A better solution will require ABI-breaking changes of planner data structures",
        "so it will have to wait for a future major release."
      ]
    },
    {
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions (Tom Lane) ",
      "description": "",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop",
      "description": "When rescanning the join after the values of such Params have changed, we must rebuild the hash table, but neglected to do so. This could result in missing join output rows.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent query-lifespan memory leaks in some `UPDATE` queries with triggers (Tomas Vondra) ",
      "description": "",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns (Tom Lane) ",
      "description": "",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow tokens up to 10240 bytes long in `pg_hba.conf` and `pg_ident.conf`",
      "description": "The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "If JIT is in use, running out of memory in a C++ `new` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `VACUUM` to continue after detecting certain types of b-tree index corruption",
      "description": "If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of `REINDEX` will fix the broken index, but preventing `VACUUM` from completing until that is done risks making matters far worse.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `WrapLimitsVacuumLock` is released after `VACUUM` detects invalid data in `pg_database`.`datfrozenxid` or `pg_database`.`datminmxid`",
      "description": "Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync`'ed at the next checkpoint",
      "description": "Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix missing reinitializations of delay-checkpoint-end flags",
      "description": "This could result in unnecessary delays of checkpoints, or in assertion failures in assert-enabled builds.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix overly strict assertion in `jsonpath` code",
      "description": "This assertion failed if a query applied the `.type()` operator to a `like_regex` result. There was no bug in non-assert builds.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction (Tom Lane) ",
      "description": "",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/fuzzystrmatch`'s Soundex `difference()` function to handle empty input sanely",
      "description": "An input string containing no alphabetic characters resulted in unpredictable output.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten whitespace checks in `contrib/hstore` input",
      "description": "In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow oversize input arrays with `contrib/intarray`'s `gist__int_ops` index opclass",
      "description": "Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in `contrib/intarray` (Konstantin Knizhnik, Matthias van de Meent, Tom Lane) ",
      "description": "",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_index`.`indisreplident` is kept up-to-date in relation cache entries",
      "description": "This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Silence deprecation warnings when compiling with OpenSSL 3.0.0 or later (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema()` is applied to a non-data-returning Portal (Boyu Yang) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw the intended error if `pgrowlocks()` is applied to a partitioned table",
      "description": "Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Report an error if `pgstatindex()`, `pgstatginindex()`, `pgstathashindex()`, or `pgstattuple()` is applied to an invalid index. If `brin_desummarize_range()`, `brin_summarize_new_values()`, `brin_summarize_range()`, or `gin_clean_pending_list()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed `CREATE INDEX` had left behind.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector()` (Tom Lane) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-allocation of the constructed `tsvector` in `tsvectorrecv()`",
      "description": "If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished `tsvector`. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit()`",
      "description": "This could lead to poor page-split decisions in GiST indexes on `tsvector` columns.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `COMMIT AND CHAIN`/`ROLLBACK AND CHAIN` to work properly when there is an unreleased savepoint",
      "description": "Instead of propagating the current transaction's properties to the new transaction, they propagated some previous transaction's properties.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash in `EXPLAIN` if a parameter marked to be displayed by `EXPLAIN` has a NULL boot-time value",
      "description": "No built-in parameter fits this description, but an extension could define such a parameter.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system()`",
      "description": "This fix avoids a race condition in which a child process that has been forked off by `system()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with torn reads of `pg_control` in frontend programs",
      "description": "On some file systems, reading `pg_control` may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid torn reads of `pg_control` in relevant SQL functions",
      "description": "Acquire the appropriate lock before reading `pg_control`, to ensure we get a consistent view of that file.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "On 64-bit machines we will allow values of `track_activity_query_size` large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track the dependencies of cached `CALL` statements, and re-plan them when needed",
      "description": "DDL commands, such as replacement of a function that has been inlined into a `CALL` argument, can create the need to re-plan a `CALL` that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track nesting depth correctly when inspecting `RECORD`\\-type Vars from outer query levels",
      "description": "This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “record type has not been registered” failure when deparsing a view that contains references to fields of composite constants (Tom Lane) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow extracting fields from a `RECORD`\\-type `ROW()` expression",
      "description": "SQL code that knows that we name such fields `f1`, `f2`, etc can use those names to extract fields from the expression. This change was originally made in version 13, and is now being back-patched into older branches to support tests for a related bug.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error-handling bug in `RECORD` type cache management",
      "description": "An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error (Hou Zhijie) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that standby-mode WAL recovery reports an error when an invalid page header is found (Yugo Nagata, Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as `SET TRANSACTION ISOLATION LEVEL`.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Keep by-reference `attmissingval` values in a long-lived context while they are being used",
      "description": "This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate the effective value of `search_path` after `ALTER ROLE`",
      "description": "This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish`",
      "description": "This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (`contrib/bloom` does, for example).",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Formerly, only the table-level ACL would get restored if both types were present.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add logic to pg\\_upgrade to check for use of `abstime`, `reltime`, and `tinterval` data types",
      "description": "These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg\\_basebackup",
      "description": "This has only been seen to occur when the server connection runs through pgbouncer.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, do not report interrupted page deletion as corruption",
      "description": "This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before `VACUUM` had cleaned things up.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `interval` columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the `-multiply_defined suppress` linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list",
      "description": "Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "fixedIn": "12.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes",
      "description": "This fixes O(N^2) behavior when the list of waiters is long. In some use-cases this results in substantial throughput improvements.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failures in `heap_update()` and `heap_delete()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck",
      "description": "This error had no impact in non-assert builds.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure during `ALTER TABLE ADD COLUMN` on a complex inheritance tree",
      "description": "If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix problems with duplicate token names in `ALTER TEXT SEARCH CONFIGURATION ... MAPPING` commands (Tender Wang, Michael Paquier) ",
      "description": "",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly lock the associated table during `DROP STATISTICS`",
      "description": "Failure to acquire the lock could result in “tuple concurrently deleted” errors if the `DROP` executes concurrently with `ANALYZE`.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in `ALTER TABLE ADD COLUMN`.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add more checks for overflow in `interval_mul()` and `interval_div()`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make the `pg_file_settings` view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "A no-op `ALTER LARGE OBJECT OWNER` command (that is, one selecting the existing owner) passed the wrong class ID to the `PostAlterHook`, probably confusing any extension using that hook.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "The `startedInRecovery` flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use `ClientAuthentication_hook`.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Use the BIO “app\\_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more wary about OpenSSL not setting `errno` on error",
      "description": "If `errno` isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov) ",
      "description": "",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier) ",
      "description": "",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "This conforms to the behavior for other dependent objects such as indexes.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in `contrib/intarray` if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane) ",
      "description": "",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pageinspect`'s `hash_bitmap_info()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier) ",
      "description": "",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pgstattuple`'s `pgstathashindex()` function is applied to a partitioned hash index (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg\\_ctl and pg\\_regress",
      "description": "When launching a child process via `cmd.exe`, pass the `/D` flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro) ",
      "description": "",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon (Tom Lane) ",
      "description": "",
      "fixedIn": "12.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `INSERT` from multiple `VALUES` rows into a target column that is a domain over an array or composite type",
      "description": "Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "A NULL value satisfies a clause such as `` _`boolcol`_ IS NOT FALSE ``, so pruning away a partition containing NULLs yielded incorrect answers.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `ALTER FOREIGN TABLE SET SCHEMA` move any owned sequences into the new schema",
      "description": "Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s counting of heap pages accessed by a bitmap heap scan",
      "description": "Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "`VACUUM`'s computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another `VACUUM`.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow converting a table to a view within an outer SQL command that is using that table",
      "description": "This avoids possible crashes.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to `UNION ALL` trees that have constant outputs for the join column in some `SELECT` arms.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "This would typically end in a crash or unexpected error message.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind _`X`_ is not yet built” error messages (David Rowley) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more careful with `RECORD`\\-returning functions in `FROM`",
      "description": "The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition in `pg_get_expr()`",
      "description": "If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()` or `txid_status()`.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait` (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that index-only scans on `name` columns return a fully-padded value",
      "description": "The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain()` in libpq and ecpglib",
      "description": "Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc()` function is correctly zero-terminated (Oleg Tselebrovskiy) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dumpall so that role comments, if present, will be dumped regardless of the setting of `--no-role-passwords` (Daniel Gustafsson, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments (`--`\\-style comments) following expressions",
      "description": "This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL `CASE` statement.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, don't report false match failures due to short- versus long-header values",
      "description": "A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid emitting requests to sort by a constant",
      "description": "This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position _`N`_ is not in select list” errors.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `contrib/postgres_fdw` set the remote session's time zone to `GMT` not `UTC`",
      "description": "This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/xml2`, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane) ",
      "description": "",
      "fixedIn": "12.19",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `TRUNCATE ... CASCADE` to ensure all relevant partitions are truncated",
      "description": "If a partition of a partitioned table is truncated with the `CASCADE` option, and the partitioned table has a foreign-key reference from another table, that table must also be truncated. The need to check this was missed if the referencing table was itself partitioned, possibly allowing rows to survive that violate the foreign-key constraint.\n\nHence, if you have foreign key constraints between partitioned tables, and you have done any partition-level `TRUNCATE` on the referenced table, you should check to see if any foreign key violations exist. The simplest way is to add a new instance of the foreign key constraint (and, once that succeeds, drop it or the original constraint). That may be prohibitive from a locking standpoint, however, in which case you might prefer to manually query for unmatched rows.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to attach foreign key constraints to sub-partitions",
      "description": "When adding a partition to a level below the first level of a multi-level partitioned table, foreign key constraints referencing the top partitioned table were not cloned to the new partition, leading to possible constraint violations later. Detaching and re-attaching the new partition is the cheapest way to fix this. However, if there are many partitions to be fixed, adding a new instance of the foreign key constraint might be preferable.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible crash during concurrent update on a partitioned table or inheritance tree (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that row triggers on partitioned tables are correctly cloned to sub-partitions when appropriate",
      "description": "User-defined triggers (but not triggers for foreign key or deferred unique constraints) might be missed when creating or attaching a partition.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix logical replication subscriber code to execute per-column `UPDATE` triggers when appropriate (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure in logical decoding when a large transaction must be spilled into many separate temporary files (Amit Khandekar) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible crash or data corruption when a logical replication subscriber processes a row update",
      "description": "This bug caused visible problems only if the subscriber's table contained columns that were not being copied from the publisher and had pass-by-reference data types.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in logical replication subscriber after DDL changes on a subscribed relation (Jehan-Guillaume de Rorthais, Vignesh C) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure in logical replication publisher after a database crash and restart (Vignesh C) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the effect of `pg_replication_slot_advance()` on a physical replication slot will persist across restarts (Alexey Kondratov, Michael Paquier) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve efficiency of logical replication with `REPLICA IDENTITY FULL`",
      "description": "When searching for an existing tuple during an update or delete operation, return the first matching tuple not the last one.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix base backup to handle database OIDs larger than `INT32_MAX` (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure parallel plans are always shut down at the correct time",
      "description": "This oversight is known to result in “temporary file leak” warnings from multi-batch parallel hash joins.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent premature shutdown of a Gather or GatherMerge plan node that is underneath a Limit node",
      "description": "This avoids failure if such a plan node needs to be scanned more than once, as for instance if it is on the inside of a nestloop.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve efficiency of parallel hash join on CPUs with many cores (Gang Deng, Thomas Munro) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash in parallel `CREATE INDEX` when there are no free dynamic shared memory slots",
      "description": "Fall back to a non-parallel index build, instead.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leak when there are no free dynamic shared memory slots (Thomas Munro) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore the `CONCURRENTLY` option when performing an index creation, drop, or rebuild on a temporary table",
      "description": "This avoids strange failures if the temporary table has an `ON COMMIT` action. There is no benefit in using `CONCURRENTLY` for a temporary table anyway, since other sessions cannot access the table, making the extra processing pointless.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure when resetting expression indexes on temporary tables that are marked `ON COMMIT DELETE ROWS` (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible crash in BRIN index operations with `box`, `range` and `inet` data types (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash during recursive page split in GiST index build (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of deleted pages in GIN indexes",
      "description": "Avoid possible deadlocks, incorrect updates of a deleted page's state, and failure to traverse through a recently-deleted page.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible crash with a SubPlan (sub-`SELECT`) within a multi-row `VALUES` list (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure in `ALTER TABLE` when a column referenced in a `GENERATED` expression has been added or changed in type earlier in the same `ALTER` command (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to insert default values for “missing” attributes during tuple conversion",
      "description": "This could result in values incorrectly reading as NULL, when they come from columns that had been added by `ALTER TABLE ADD COLUMN` with a constant default.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unlikely panic in the checkpointer process, caused by opening relation segments that might already have been removed (Thomas Munro) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash after FileClose() failure",
      "description": "This issue could only be observed with `data_sync_retry` enabled, since otherwise FileClose() failure would be reported as a PANIC.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of multiple `AFTER ROW` triggers on a foreign table (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unlikely crash with pass-by-reference aggregate transition states (Andres Freund, Teodor Sigaev) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve error reporting in `to_date()` and `to_timestamp()`",
      "description": "Reports about incorrect month or day names in input strings could truncate the input in the middle of a multi-byte character, leading to an improperly encoded error message that could cause follow-on failures. Truncate at the next whitespace instead.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix off-by-one result for `` EXTRACT(ISOYEAR FROM _`timestamp`_) `` for BC dates (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the `<>` operator for type `char` reports indeterminate-collation errors as such, rather than as “cache lookup failed for collation 0” (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid treating TID scans as sequential scans",
      "description": "A refactoring oversight caused TID scans (selection by CTID) to be counted as sequential scans in the statistics views, and to take whole-table predicate locks as sequential scans do. The latter behavior could cause unnecessary serialization errors in serializable transaction mode.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid stack overflow in `information_schema` views when a self-referential view exists in the system catalogs",
      "description": "A self-referential view can't work; it will always result in infinite recursion. We handled that situation correctly when trying to execute the view, but not when inquiring whether it is automatically updatable.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that walsender processes always show NULL for transaction start time in `pg_stat_activity`",
      "description": "Previously, the `xact_start` column would sometimes show the process start time.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of hash joins with very large inner relations (Thomas Munro) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce spinlock contention when there are many active walsender processes (Pierre Ducroquet) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix placement of “Subplans Removed” field in `EXPLAIN` output",
      "description": "In non-text output formats, this field was emitted inside the “Plans” sub-group, resulting in syntactically invalid output. Attach it to the parent Append or MergeAppend plan node as intended. This causes the field to change position in text output format too: if there are any InitPlans attached to the same plan node, “Subplans Removed” will now appear before those.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s `SETTINGS` option to print as empty in non-text output formats",
      "description": "In the non-text output formats, fields are supposed to appear when requested, even if they have empty or zero values.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner errors induced by overly-aggressive collapsing of joins to single-row subqueries",
      "description": "This mistake led to errors such as “failed to construct the join relation”.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “no = operator for opfamily _`NNNN`_” planner error when trying to match a `LIKE` or regex pattern-match operator to a binary-compatible index opclass (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case crashes and misestimations in selectivity calculations for the `<@` and `@>` range operators (Michael Paquier, Andrey Borodin, Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect estimation for `OR` clauses when using most-common-value extended statistics (Tomas Vondra) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore system columns when applying most-common-value extended statistics",
      "description": "This prevents “negative bitmapset member not allowed” planner errors for affected queries.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix BRIN index logic to support hypothetical BRIN indexes",
      "description": "Previously, if an “index adviser” extension tried to get the planner to produce a plan involving a hypothetical BRIN index, that would fail, because the BRIN cost estimation code would always try to physically access the index's metapage. Now it checks to see if the index is only hypothetical, and uses default assumptions about the index parameters if so.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve error reporting for attempts to use automatic updating of views with conditional `INSTEAD` rules",
      "description": "This has never been supported, but previously the error was thrown only at execution time, so that it could be masked by planner errors.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent a composite type from being included in itself indirectly via a range type (Tom Lane, Julien Rouhaud) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow partition key expressions that return pseudo-types, such as `record` (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error reporting for index expressions of prohibited types (Amit Langote) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dumping of views that contain only a `VALUES` list to handle cases where a view output column has been renamed (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that data types and collations used in `XMLTABLE` constructs are accounted for when computing dependencies of a view or rule",
      "description": "Previously it was possible to break a view using `XMLTABLE` by dropping a type, if the type was not otherwise referenced in the view. This fix does not correct the dependencies already recorded for existing views, only for newly-created ones.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent unwanted downcasing and truncation of RADIUS authentication parameters",
      "description": "The `pg_hba.conf` parser mistakenly treated these fields as SQL identifiers, which in general they aren't.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Transmit incoming `NOTIFY` messages to the client before sending `ReadyForQuery`, rather than after",
      "description": "This change ensures that, with libpq and other client libraries that act similarly to it, any notifications received during a transaction will be available by the time the client thinks the transaction is complete. This probably makes no difference in practical applications (which would need to cope with asynchronous notifications in any case); but it makes it easier to build test cases with reproducible behavior.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in handling of non-blocking I/O when using GSSAPI encryption",
      "description": "These errors could result in dropping data (usually leading to subsequent wire-protocol-violation errors) or in a “livelock” situation where a sending process goes to sleep although not all its data has been sent. Moreover, libpq failed to keep separate encryption state for each connection, creating the possibility for failures in applications using multiple encrypted database connections.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow libpq to parse all GSS-related connection parameters even when the GSSAPI code hasn't been compiled in",
      "description": "This makes the behavior similar to our SSL support, where it was long ago deemed to be a good idea to always accept all the related parameters, even if some are ignored or restricted due to lack of the feature in a particular build.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect handling of `%b` and `%B` format codes in ecpg's `PGTYPEStimestamp_fmt_asc()` function",
      "description": "Due to an off-by-one error, these codes would print the wrong month name, or possibly crash.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash after an out-of-memory failure in ecpglib (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parallel pg\\_dump/pg\\_restore to more gracefully handle failure to create worker processes (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent possible crash or lockup when attempting to terminate a parallel pg\\_dump/pg\\_restore run via a signal (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_upgrade, look inside arrays and ranges while searching for non-upgradable data types in tables (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Apply more thorough syntax checking to createuser's `--connection-limit` option (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with changes of the specific type referenced by a PL/pgSQL composite-type variable in more cases",
      "description": "Dropping and re-creating the composite type referenced by a PL/pgSQL variable could lead to “could not open relation with OID _`NNNN`_” errors.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash in `postgres_fdw` when trying to send a command like `UPDATE remote_tab SET (x,y) = (SELECT ...)` to the remote server (Tom Lane) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/dict_int`, reject `maxlen` settings less than one",
      "description": "This prevents a possible crash with silly settings for that parameter.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow NULL category values in `contrib/tablefunc`'s `crosstab()` function",
      "description": "This case never worked usefully, and it would crash on some platforms.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix configure's probe for OpenSSL's `SSL_clear_options()` function so that it works with OpenSSL versions before 1.1.0",
      "description": "This problem could lead to failure to set the SSL compression option as desired, when PostgreSQL is built against an old version of OpenSSL.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Mark some timeout and statistics-tracking GUC variables as `PGDLLIMPORT`, to allow extensions to access them on Windows",
      "description": "This applies to `idle_in_transaction_session_timeout`, `lock_timeout`, `statement_timeout`, `track_activities`, `track_counts`, and `track_functions`.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leak in sanity checks for “slab” memory contexts",
      "description": "This isn't an issue for production builds, since they wouldn't ordinarily have memory context checking enabled; but the leak could be quite severe in a debug build.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix multiple statistics entries reported by the LWLock statistics mechanism",
      "description": "The LWLock statistics code (which is not built by default; it requires compiling with `-DLWLOCK_STATS`) could report multiple entries for the same LWLock and backend process, as a result of faulty hashtable key creation.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition that led to delayed delivery of interprocess signals on Windows",
      "description": "This caused visible timing oddities in `NOTIFY`, and perhaps other misbehavior.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of a corner-case error result from Windows' `ReadFile()` function",
      "description": "So far as is known, this oversight just resulted in noisy log messages, not any actual query misbehavior.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, retry a few times after an `ERROR_ACCESS_DENIED` file access failure",
      "description": "This helps cope with cases where a file open attempt fails because the targeted file is flagged for deletion but not yet actually gone. pg\\_ctl, for example, frequently failed with such an error when probing to see if the postmaster had shut down yet.",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, work around sharing violations for the postmaster's log file when pg\\_ctl is used to start the postmaster very shortly after it's been stopped, for example by `pg_ctl restart` (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "12.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER TABLE DETACH PARTITION` for cases involving inconsistent index-based constraints",
      "description": "When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect `coninhcount` value. This would cause trouble during any further manipulations of that constraint.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "The SQL `CALL` statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But `CALL` in PL/pgSQL worked correctly.)",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": [
        "But `CALL` in PL/pgSQL worked correctly."
      ]
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list",
      "description": "If the `CALL` is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow in `money` calculations",
      "description": "None of the arithmetic functions for the `money` type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round(numeric)` and `trunc(numeric)`",
      "description": "These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type `numeric`.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `pg_sequence_last_value()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions",
      "description": "Make it return NULL in these cases instead of throwing an error.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery()`",
      "description": "Per the manual, punctuation in the input of `websearch_to_tsquery()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the `pg_database` catalog, so the effects are narrow, but misbehavior is possible.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number _`N`_ not found in view targetlist”.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Rearrange the order of error checks so that we throw an on-point error when a `WITH RECURSIVE` query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger _`NNNN`_”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to remove `pg_init_privs` entries for column-level privileges when their table is dropped",
      "description": "If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg\\_dump dumps for that relation.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN()` or `MAX()` aggregates",
      "description": "In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Windows reports an FD\\_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility between PL/Perl and Perl 5.40 (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix recursive `RECORD`\\-returning PL/Python functions",
      "description": "If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "If a PL/Python\\-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror()` in libpq",
      "description": "Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_restore` `-l` reports dependent TOC entries correctly",
      "description": "If `-l` was specified together with selective-restore options such as `-n` or `-N`, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid clashing with system-provided `<regex.h>` headers",
      "description": "This fixes a compilation failure on macOS version 15 and up.",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane) ",
      "description": "",
      "fixedIn": "12.20",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER TABLE ATTACH PARTITION` if the table to be attached has a foreign key referencing the partitioned table",
      "description": "This arrangement is not supported, and other ways of creating it already fail.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partitionwise joins or grouping if the query's collation for the key column doesn't match the partition key's collation",
      "description": "Such plans could produce incorrect results.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cancellation of the second stage of index build for large hash indexes (Pavel Borisov) ",
      "description": "",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure or confusing error message for `` COPY (_`query`_) TO ... ``, when the _`query`_ is rewritten by a `DO INSTEAD NOTIFY` rule (Tender Wang, Tom Lane) ",
      "description": "",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of skewed data during parallel hash join",
      "description": "After repartitioning the inner side of a hash join because one partition has accumulated too many tuples, we check to see if all the partition's tuples went into the same child partition, which suggests that they all have the same hash value and further repartitioning cannot improve matters. This check malfunctioned in some cases, allowing repeated futile repartitioning which would eventually end in a resource-exhaustion error.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in committing a serializable transaction",
      "description": "Mis-processing of a recently committed transaction could lead to an assertion failure or a “could not access status of transaction” error.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in `COMMIT PREPARED` that resulted in orphaned 2PC files",
      "description": "A concurrent `PREPARE TRANSACTION` could cause `COMMIT PREPARED` to not remove the on-disk two-phase state file for the completed transaction. There was no immediate ill effect, but a subsequent crash-and-recovery could fail with “could not access status of transaction”, requiring manual removal of the orphaned file to restore service.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid invalid memory accesses after skipping an invalid toast index during `VACUUM FULL`",
      "description": "A list tracking yet-to-be-rebuilt indexes was not properly updated in this code path, risking assertion failures or crashes later on.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ways in which an “in place” catalog update could be lost",
      "description": "Normal row updates write a new version of the row to preserve rollback-ability of the transaction. However, certain system catalog updates are intentionally non-transactional and are done with an in-place update of the row. These patches fix race conditions that could cause the effects of an in-place update to be lost. As an example, it was possible to forget having set `pg_class`.`relhasindex` to true, preventing updates of the new index and thus causing index corruption.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reset catalog caches at end of recovery",
      "description": "This prevents scenarios wherein an in-place catalog update could be lost due to using stale data from a catalog cache.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using parallel query while holding off interrupts",
      "description": "This situation cannot arise normally, but it can be reached with test scenarios such as using a SQL-language function as B-tree support (which would be far too slow for production usage). If it did occur it would result in an indefinite wait.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Guard against stack overflow in libxml2 with too-deeply-nested XML input",
      "description": "Use `xmlXPathCtxtCompile()` rather than `xmlXPathCompile()`, because the latter fails to protect itself against recursion-to-stack-overflow in libxml2 releases before 2.13.4.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “failed to find plan for subquery/CTE” errors in `EXPLAIN`",
      "description": "This case arose while trying to print references to fields of a RECORD-type output of a subquery when the subquery has been optimized out of the plan altogether (which is possible at least in the case that it has a constant-false `WHERE` condition). Nothing remains in the plan to identify the original field names, so fall back to printing `` f_`N`_ `` for the _`N`_'th record column. (That's actually the right thing anyway, if the record output arose from a `ROW()` constructor.)",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow a `USING` clause when altering the type of a generated column",
      "description": "A generated column already has an expression specifying the column contents, so including `USING` doesn't make sense.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore not-yet-defined Portals in the `pg_cursors` view",
      "description": "It is possible for user-defined code that inspects this view to be called while a new cursor is being set up, and if that happens a null pointer dereference would ensue. Avoid the problem by defining the view to exclude incompletely-set-up cursors.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce memory consumption of logical decoding",
      "description": "Use a smaller default block size to store tuple data received during logical replication. This reduces memory wastage, which has been reported to be severe while processing long-running transactions, even leading to out-of-memory failures.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-disable sending of stateless (TLSv1.2) session tickets",
      "description": "A previous change to prevent sending of stateful (TLSv1.3) session tickets accidentally re-enabled sending of stateless ones. Thus, while we intended to prevent clients from thinking that TLS session resumption is supported, some still did.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “wrong tuple length” failure when dropping a database with many ACL (permission) entries (Ayush Tiwari) ",
      "description": "",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow adjusting the `session_authorization` and `role` settings in parallel workers",
      "description": "Our code intends to allow modifiable server settings to be set by function `SET` clauses, but not otherwise within a parallel worker. `SET` clauses failed for these two settings, though.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list, when the `CALL` is within a PL/pgSQL `EXCEPTION` block",
      "description": "As with a similar fix in our previous quarterly releases, this case allowed such functions to be passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parse libpq's `keepalives` connection option in the same way as other integer-valued options",
      "description": "The coding used here rejected trailing whitespace in the option value, unlike other cases. This turns out to be problematic in ecpg's usage, for example.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpglib, fix out-of-bounds read when parsing incorrect datetime input",
      "description": "It was possible to try to read the location just before the start of a constant array. Real-world consequences seem minimal, though.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include the source timeline history in pg\\_rewind's debug output",
      "description": "This was the intention to begin with, but a coding error caused the source history to always print as empty.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to reindex temporary tables and indexes in vacuumdb and in parallel reindexdb",
      "description": "Reindexing other sessions' temporary tables cannot work, but the check to skip them was missing in some code paths, leading to unwanted failures.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow inspection of sequence relations in relevant functions of `contrib/pageinspect` and `contrib/pgstattuple`",
      "description": "This had been allowed in the past, but it got broken during the introduction of non-default access methods for tables.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect LLVM-generated code on ARM64 platforms",
      "description": "When using JIT compilation on ARM platforms, the generated code could not support relocation distances exceeding 32 bits, allowing unlucky placement of generated code to cause server crashes on large-memory systems.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix a few places that assumed that process start time (represented as a `time_t`) will fit into a `long` value",
      "description": "On platforms where `long` is 32 bits (notably Windows), this coding would fail after Y2038\\. Most of the failures appear only cosmetic, but notably `pg_ctl start` would hang.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent “nothing provides perl(PostgreSQL::Test::Utils)” failures while building RPM packages of PostgreSQL (Noah Misch) ",
      "description": "",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix building with Strawberry Perl on Windows (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024b",
      "description": "This tzdata release changes the old System-V-compatibility zone names to duplicate the corresponding geographic zones; for example `PST8PDT` is now an alias for `America/Los_Angeles`. The main visible consequence is that for timestamps before the introduction of standardized time zones, the zone is considered to represent local mean solar time for the named location. For example, in `PST8PDT`, `timestamptz` input such as `1801-01-01 00:00` would previously have been rendered as `1801-01-01 00:00:00-08`, but now it is rendered as `1801-01-01 00:00:00-07:52:58`.\n\nAlso, historical corrections for Mexico, Mongolia, and Portugal. Notably, `Asia/Choibalsan` is now an alias for `Asia/Ulaanbaatar` rather than being a separate zone, mainly because the differences between those zones were found to be based on untrustworthy data.",
      "fixedIn": "12.21",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure with `GENERATED` columns",
      "description": "If a `GENERATED` column's value is an exact copy of another column of the table (and it is a pass-by-reference data type), it was possible to crash or insert corrupted data into the table. While it would be rather pointless for a `GENERATED` expression to just duplicate another column, an expression using a function that sometimes returns its input unchanged could create the situation.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Handle inheritance of generated columns better",
      "description": "When a table column is inherited during `CREATE TABLE ... INHERITS`, disallow changing any generation properties when the parent column is already marked `GENERATED`; but allow a child column to be marked `GENERATED` when its parent is not.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix cross-column references in `CREATE TABLE LIKE INCLUDING GENERATED`",
      "description": "`CREATE TABLE ... LIKE` failed when trying to copy a `GENERATED` expression that references a physically-later column.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Propagate `ALTER TABLE ... SET STORAGE` to indexes",
      "description": "Non-expression index columns have always copied the `attstorage` property of their table column at creation. Update them when `ALTER TABLE ... SET STORAGE` is done, to maintain consistency.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Preserve the `indisclustered` setting of indexes rewritten by `ALTER TABLE`",
      "description": "Previously, `ALTER TABLE` lost track of which index had been used for `CLUSTER`.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Preserve the replica identity properties of indexes rewritten by `ALTER TABLE` (Quan Zongliang, Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Preserve the `indisclustered` setting of indexes rebuilt by `REINDEX CONCURRENTLY` (Justin Pryzby) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Lock objects sooner during `DROP OWNED BY`",
      "description": "This avoids failures in race-condition cases where another session is deleting some of the same objects.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error-case processing for `CREATE ROLE ... IN ROLE`",
      "description": "Some error cases would be reported as “unexpected node type” or the like, instead of the intended message.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that when a partition is detached, any triggers cloned from its formerly-parent table are removed (Justin Pryzby) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when `COLLATE` is applied to a non-collatable type in a partition bound expression (Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that unique indexes over partitioned tables match the equality semantics of the partitioning key",
      "description": "This would only be an issue with index opclasses that have unusual notions of equality, but it's wrong in theory, so check.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that members of the `pg_read_all_stats` role can read all statistics views, as expected",
      "description": "The functions underlying the `pg_stat_progress_*` views had not gotten this memo.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair performance regression in `information_schema`.`triggers` view",
      "description": "This patch redefines that view so that an outer `WHERE` clause constraining the table name can be pushed down into the view, allowing its calculations to be done only for triggers belonging to the table of interest rather than all triggers in the database. In a database with many triggers this would make a significant speed difference for queries of that form. Since things worked that way before v11, this is a potential performance regression. Users who find this to be a problem can fix it by replacing the view definition (or, perhaps, just deleting and reinstalling the whole `information_schema` schema).",
      "fixedIn": "12.3",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Repair performance regression in floating point overflow/underflow detection",
      "description": "Previous refactoring had resulted in `isinf()` being called extra times in some hot code paths.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix full text search to handle NOT above a phrase search correctly",
      "description": "Queries such as `!(foo<->bar)` failed to find matching rows when implemented as a GiST or GIN index search.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix full text search for cases where a phrase search includes an item with both prefix matching and a weight restriction (Tom Lane) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ts_headline()` to make better headline selections when working with phrase queries (Tom Lane) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in `gin_fuzzy_search_limit` processing",
      "description": "A small value of `gin_fuzzy_search_limit` could result in unexpected slowness due to unintentionally rescanning the same index page many times. Another code path failed to apply the intended filtering at all, possibly returning too many values.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow input of type `circle` to accept the format “`` (_`x`_,_`y`_),_`r`_ ``” as the documentation says it does (David Zhang) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make the `get_bit()` and `set_bit()` functions cope with `bytea` strings longer than 256MB",
      "description": "Since the bit number argument is only `int4`, it's impossible to use these functions to access bits beyond the first 256MB of a long `bytea`. We'll widen the argument to `int8` in v13, but in the meantime, allow these functions to work on the initial substring of a long `bytea`.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore file-not-found errors in `pg_ls_waldir()` and allied functions",
      "description": "This prevents a race condition failure if a file is removed between when we see its directory entry and when we attempt to `stat()` it.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possibly leaking an open-file descriptor for a directory in `pg_ls_dir()`, `pg_timezone_names()`, `pg_tablespace_databases()`, and allied functions (Justin Pryzby) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix polymorphic-function type resolution to correctly infer the actual type of an `anyarray` output when given only an `anyrange` input (Tom Lane) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix server's connection-startup logic for case where a GSSAPI connection is rejected because support is not compiled in, and the client then tries SSL instead",
      "description": "This led to a bogus “unsupported frontend protocol” failure.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leakage during GSSAPI encryption",
      "description": "Both the backend and libpq would leak memory equivalent to the total amount of data sent during the session, if GSSAPI encryption is in use.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix query-lifespan memory leak for a set-returning function used in a query's `FROM` clause (Andres Freund) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leakage of a hashed subplan's hash tables across multiple executions",
      "description": "This mistake could result in severe memory bloat if a query re-executed a hashed subplan enough times.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve planner's handling of no-op domain coercions",
      "description": "Fix some cases where a domain coercion that does nothing was not completely removed from expressions.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unlikely crash when `REINDEX` is terminated by a session-shutdown signal (Tom Lane) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent printout of possibly-incorrect hash join table statistics in `EXPLAIN` (Konstantin Knizhnik, Tom Lane, Thomas Munro) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix reporting of elapsed time for heap truncation steps in `VACUUM VERBOSE` (Tatsuhito Kasahara) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible undercounting of deleted B-tree index pages in `VACUUM VERBOSE` output (Peter Geoghegan) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix wrong bookkeeping for oldest deleted page in a B-tree index",
      "description": "This could cause subtly wrong decisions about when `VACUUM` can skip an index cleanup scan; although it appears there may be no significant user-visible effects from that.",
      "fixedIn": "12.3",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Ensure that TimelineHistoryRead and TimelineHistoryWrite wait states are reported in all code paths that read or write timeline history files (Masahiro Ikeda) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possibly showing “waiting” twice in a process's PS status (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition when `ANALYZE` replaces the catalog tuple for extended statistics data (Dean Rasheed) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove ill-considered skip of “redundant” anti-wraparound vacuums",
      "description": "This avoids a corner case where autovacuum could get into a loop of repeatedly trying and then skipping the same vacuum job.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure INCLUDE'd columns are always removed from B-tree pivot tuples",
      "description": "This mistake wasted space in some rare cases, but was otherwise harmless.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with invalid TOAST indexes that could be left over after a failed `REINDEX CONCURRENTLY` (Julien Rouhaud) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that valid index dependencies are left behind after a failed `REINDEX CONCURRENTLY`",
      "description": "Previously the old index could be left with no `pg_depend` links at all, so that for example it would not get dropped if the parent table is dropped.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure if autovacuum tries to access a just-dropped temporary schema",
      "description": "This hazard only arises if a superuser manually drops a temporary schema; which isn't normal practice, but should work.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature recycling of WAL segments during crash recovery",
      "description": "WAL segments that become ready to be archived during crash recovery were potentially recycled without being archived.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid scanning irrelevant timelines during archive recovery",
      "description": "This can eliminate many attempts to fetch non-existent WAL files from archive storage, which is helpful if archive access is slow.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove bogus “subtransaction logged without previous top-level txn record” error check in logical decoding",
      "description": "This condition is legitimately reachable in various scenarios, so remove the check.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible failure after a replication slot copy, due to premature removal of WAL data (Masahiko Sawada, Arseny Sher) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a replication slot's `io_in_progress_lock` is released in failure code paths",
      "description": "This could result in a walsender later becoming stuck waiting for the lock.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that generated columns are correctly handled during updates issued by logical replication (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race conditions in synchronous standby management",
      "description": "During a change in the `synchronous_standby_names` setting, there was a window in which wrong decisions could be made about whether it is OK to release transactions that are waiting for synchronous commit. Another hazard for similarly wrong decisions existed if a walsender process exited and was immediately replaced by another.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add missing SQLSTATE values to a few error reports (Sawada Masahiko) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/pgSQL to reliably refuse to execute an event trigger function as a plain function (Tom Lane) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in libpq when using `sslmode=verify-full`",
      "description": "Certificate verification during connection startup could leak some memory. This would become an issue if a client process opened many database connections during its lifetime.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ecpg to treat an argument of just “`-`” as meaning “read from stdin” on all platforms (Tom Lane) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in psql when attempting to re-establish a failed connection (Michael Paquier) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow tab-completion of the filename argument to psql's `\\gx` command (Vik Fearing) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add pg\\_dump support for `ALTER ... DEPENDS ON EXTENSION`",
      "description": "pg\\_dump previously ignored dependencies added this way, causing them to be forgotten during dump/restore or pg\\_upgrade.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to dump comments on RLS policy objects (Tom Lane) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, postpone restore of event triggers till the end",
      "description": "This minimizes the risk that an event trigger could interfere with the restoration of other objects.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that pg\\_basebackup generates valid tar files",
      "description": "In some cases a partial block of zeroes would be added to the end of the file. While this seems to be harmless with common versions of tar, it's not OK per the POSIX file format spec.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_checksums skip tablespace subdirectories that belong to a different PostgreSQL major version",
      "description": "Such subdirectories don't really belong to our database cluster, and so must not be processed.",
      "fixedIn": "12.3",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Ignore temporary copies of `pg_internal.init` in pg\\_checksums and related programs (Michael Paquier) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix quoting of `--encoding`, `--lc-ctype` and `--lc-collate` values in createdb utility (Michael Paquier) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "`contrib/lo`'s `lo_manage()` function crashed if called directly rather than as a trigger (Tom Lane) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/ltree`, protect against overflow of `ltree` and `lquery` length fields (Nikita Glukhov) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Work around failure in `contrib/pageinspect`'s `bt_metap()` function when an oldest\\_xact value exceeds 2^31-1",
      "description": "Such XIDs will now be reported as negative integers, which isn't great but it beats throwing an error. v13 will widen the output argument to `int8` to provide saner reporting.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix cache reference leak in `contrib/sepgsql` (Michael Luo) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, avoid premature creation of postmaster's log file during `pg_ctl start`",
      "description": "The previous coding could allow the file to be created with permissions that wouldn't allow the postmaster to write on it.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failures when dealing with Unix-style locale names on Windows (Juan José Santamaría Flecha) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, set console VT100 compatibility mode in programs that support `PG_COLOR` colorization",
      "description": "Without this, the colorization option doesn't actually work.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Stop requiring extra parentheses in `ereport()` calls (Andres Freund, Tom Lane) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use pkg-config, if available, to locate libxml2 during configure",
      "description": "If pkg-config is not present or lacks knowledge of libxml2, we still query xml2-config as before.\n\nThis change could break build processes that try to make PostgreSQL use a non-default version of libxml2 by putting that version's xml2-config into the `PATH`. Instead, set `XML2_CONFIG` to point to the non-default xml2-config. That method will work with either older or newer PostgreSQL releases.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix Makefile dependencies for libpq and ecpg (Dagfinn Ilmari Mannsåker) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In MSVC builds, cope with spaces in the path name for Python (Victor Wagner) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In MSVC builds, fix detection of Visual Studio version to work with more language settings (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In MSVC builds, use `-Wno-deprecated` with bison versions newer than 3.0, as non-Windows builds already do (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2020a for DST law changes in Morocco and the Canadian Yukon, plus historical corrections for Shanghai.",
      "description": "The America/Godthab zone has been renamed to America/Nuuk to reflect current English usage; however, the old name remains available as a compatibility link.\n\nAlso, update initdb's list of known Windows time zone names to include recent additions, improving the odds that it will correctly translate the system time zone setting on that platform.",
      "fixedIn": "12.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge cases in partition pruning",
      "description": "When there are multiple partition key columns, generation of pruning tests could misbehave if some columns had no constraining `WHERE` clauses or multiple constraining clauses. This could lead to server crashes, incorrect query results, or assertion failures.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix construction of parameterized BitmapAnd and BitmapOr index scans on the inside of partition-wise nestloop joins",
      "description": "A plan in which such a scan needed to use a value from the outside of the join would usually crash at execution.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect plan execution when a partitioned table is subject to both static and run-time partition pruning in the same query, and a new partition is added concurrently with the query (Amit Langote, Tom Lane) ",
      "description": "",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In logical replication walsender, fix failure to send feedback messages after sending a keepalive message",
      "description": "This is a relatively minor problem when using built-in logical replication, because the built-in walreceiver will send a feedback reply (which clears the incorrect state) fairly frequently anyway. But with some other replication systems, such as pglogical, it causes significant performance issues.",
      "fixedIn": "12.4",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Fix firing of column-specific `UPDATE` triggers in logical replication subscribers",
      "description": "The code neglected to account for the possibility of column numbers being different between the publisher and subscriber tables, so that if those were indeed different, wrong decisions might be made about which triggers to fire.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update oldest xmin and LSN values during `pg_replication_slot_advance()`",
      "description": "This function previously failed to do that, possibly preventing resource cleanup (such as removal of no-longer-needed WAL segments) after manual advancement of a replication slot.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix slow execution of `ts_headline()`",
      "description": "The phrase-search fix added in our previous set of minor releases could cause `ts_headline()` to take unreasonable amounts of time for long documents; to make matters worse, the query was not cancellable within the troublesome loop.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure the `repeat()` function can be interrupted by query cancel (Joe Conway) ",
      "description": "",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `pg_current_logfile()` to not include a carriage return (`\\r`) in its result on Windows (Tom Lane) ",
      "description": "",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_read_file()` and related functions read until EOF is reached",
      "description": "Previously, if not given a specific data length to read, these functions would stop at whatever file length was reported by `stat()`. That's unhelpful for pipes and other sorts of virtual files.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Forbid numeric `NaN` values in `jsonpath` computations",
      "description": "Neither SQL nor JSON have the concept of `NaN` (not-a-number), but the `jsonpath` code attempted to allow such values anyway. This necessarily leads to nonstandard behavior, so it seems better to reject such values at the outset.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Handle single `Inf` or `NaN` inputs correctly in floating-point aggregates",
      "description": "The affected aggregates are `corr()`, `covar_pop()`, `regr_intercept()`, `regr_r2()`, `regr_slope()`, `regr_sxx()`, `regr_sxy()`, `regr_syy()`, `stddev_pop()`, and `var_pop()`. The correct answer in such cases is `NaN`, but an algorithmic change introduced in PostgreSQL v12 had caused these aggregates to produce zero instead.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-handling of `NaN` inputs during parallel aggregation on `numeric`\\-type columns",
      "description": "If some partial aggregation workers found only `NaN`s while others found only non-`NaN`s, the results were combined incorrectly, possibly leading to the wrong overall result (i.e., not `NaN` when it should be).",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject time-of-day values greater than 24 hours",
      "description": "The intention of the datetime input code is to allow “24:00:00” or equivalently “23:59:60”, but no larger value. However, the range check was miscoded so that it would accept “23:59:60._`nnn`_” with nonzero fractional-second _`nnn`_. In timestamp values this would result in wrapping into the first second of the next day. In `time` and `timetz` values, the stored value would actually be more than 24 hours, causing dump/reload failures and possibly other misbehavior.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Undo double-quoting of index names in `EXPLAIN`'s non-text output formats (Tom Lane, Euler Taveira) ",
      "description": "",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s accounting for resource usage, particularly buffer accesses, in parallel workers in a plan using `Gather Merge` nodes (Jehan-Guillaume de Rorthais) ",
      "description": "",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix timing of constraint revalidation in `ALTER TABLE`",
      "description": "If `ALTER TABLE` needs to fully rewrite the table's contents (for example, due to change of a column's data type) and also needs to scan the table to re-validate foreign keys or `CHECK` constraints, it sometimes did things in the wrong order, leading to odd errors such as “could not read block 0 in file \"base/nnnnn/nnnnn\": read only 0 of 8192 bytes”.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `REINDEX CONCURRENTLY` to preserve the index's replication identity flag",
      "description": "Previously, reindexing a table's replica identity index caused the setting to be lost, preventing old tuple values from being included in future logical-decoding output.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Work around incorrect not-null markings for `pg_subscription`.`subslotname` and `pg_subscription_rel`.`srsublsn`",
      "description": "The bootstrap catalog data incorrectly marks these two catalog columns as always non-null. There's no easy way to correct that mistake in existing installations (though v13 and later will have the correct markings). The main place that depends on that marking being correct is JIT-enabled tuple deconstruction, so teach it to explicitly ignore the marking for these two columns. Also adjust some C code that accessed `srsublsn` without checking to see if it's null; a crash from that is improbable but perhaps not impossible.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with `LATERAL` references in restriction clauses attached to an un-flattened sub-`SELECT` in the `FROM` clause",
      "description": "This oversight could result in assertion failures or crashes at query execution.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the query-specified collation for operators invoked during selectivity estimation",
      "description": "Previously, the collation of the underlying database column was used. But using the query's collation is arguably more correct. More importantly, now that we have nondeterministic collations, there are cases where an operator will fail outright if given a nondeterministic collation. We don't want planning to fail in cases where the query itself would work, so this means that we must use the query's collation when invoking operators for estimation purposes.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid believing that a never-analyzed foreign table has zero tuples",
      "description": "This primarily affected the planner's estimate of the number of groups that would be obtained by `GROUP BY`.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove bogus warning about “leftover placeholder tuple” in BRIN index de-summarization",
      "description": "The case can occur legitimately after a cancelled vacuum, so warning about it is overly noisy.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix selection of tablespaces for “shared fileset” temporary files",
      "description": "If `temp_tablespaces` is empty or explicitly names the database's primary tablespace, such files got placed into the `pg_default` tablespace rather than the database's primary tablespace as expected.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case error in masking of SP-GiST index pages during WAL consistency checking",
      "description": "This could cause false failure reports when `wal_consistency_checking` is enabled.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve error handling in the server's `buffile` module",
      "description": "Fix some cases where I/O errors were indistinguishable from reaching EOF, or were not reported at all. Also add details such as block numbers and byte counts where appropriate.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix conflict-checking anomalies in `SERIALIZABLE` isolation mode",
      "description": "If a concurrently-inserted tuple was updated by a different concurrent transaction, and neither tuple version was visible to the current transaction's snapshot, serialization conflict checking could draw the wrong conclusions about whether the tuple was relevant to the results of the current transaction. This could allow a serializable transaction to commit when it should have failed with a serialization error.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid repeated marking of dead btree index entries as dead",
      "description": "While functionally harmless, this led to useless WAL traffic when checksums are enabled or `wal_log_hints` is on.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix checkpointer process to discard file sync requests when `fsync` is off",
      "description": "Such requests are treated as no-ops if `fsync` is off, but we forgot to remove them from the checkpointer's table of pending actions. This would lead to bloat of that table, as well as possible assertion failures if `fsync` is later re-enabled.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trouble during cleanup of a non-exclusive backup when JIT compilation has been activated during the backup (Robert Haas) ",
      "description": "",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of some code paths to acquire the correct lock before modifying `pg_control`",
      "description": "This oversight could allow `pg_control` to be written out with an inconsistent checksum, possibly causing trouble later, including inability to restart the database if it crashed before the next `pg_control` update.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix errors in `currtid()` and `currtid2()`",
      "description": "These functions (which are undocumented and used only by ancient versions of the ODBC driver) contained coding errors that could result in crashes, or in confusing error messages such as “could not open file” when applied to a relation having no storage.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid calling `elog()` or `palloc()` while holding a spinlock",
      "description": "Logic associated with replication slots had several violations of this coding rule. While the odds of trouble are quite low, an error in the called function would lead to a stuck spinlock.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion in logical replication subscriber to allow use of `REPLICA IDENTITY FULL`",
      "description": "This was just an incorrect assertion, so it has no impact on standard production builds.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that libpq continues to try to read from the database connection socket after a write failure",
      "description": "This is important not only to ensure that we collect any final error message from a dying server process, but because we do not consider the connection lost until we see a read failure. This oversight allowed libpq to continue trying to send `COPY` data indefinitely after a mid-transfer loss of connection, rather than reporting failure to the application.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in libpq's management of GSS encryption state",
      "description": "A connection using GSS encryption could freeze up when attempting to reset it after a server restart, or when moving on to the next one of a list of candidate servers.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ecpg crash with `bytea` and cursor variables (Jehan-Guillaume de Rorthais) ",
      "description": "",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report out-of-disk-space errors properly in pg\\_dump and pg\\_basebackup",
      "description": "Some code paths could produce silly reports like “could not write file: Success”.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_restore cope with data-offset-less custom-format archive files when it needs to restore data items out of order",
      "description": "pg\\_dump will produce such files if it cannot seek its output (for example, if the output is piped to something). This fix primarily improves the ability to do a parallel restore from such a file.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parallel restore of tables having both table-level privileges and per-column privileges",
      "description": "The table-level privilege grants have to be applied first, but a parallel restore did not reliably order them that way; this could lead to “tuple concurrently updated” errors, or to disappearance of some per-column privilege grants. The fix for this is to include dependency links between such entries in the archive file, meaning that a new dump has to be taken with a corrected pg\\_dump to ensure that the problem will not recur.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that pg\\_upgrade runs with `vacuum_defer_cleanup_age` set to zero in the target cluster",
      "description": "If the target cluster's configuration has been modified to set `vacuum_defer_cleanup_age` to a nonzero value, that prevented freezing of the system catalogs from working properly, which caused the upgrade to fail in confusing ways. Ensure that any such setting is overridden for the duration of the upgrade.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_recvlogical to drain pending messages before exiting",
      "description": "Without this, the replication sender might detect a send failure and exit without making the expected final update to the replication slot's LSN position. That led to re-transmitting data after the next connection. It was also possible to miss error messages sent after the last data that pg\\_recvlogical wants to consume.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_rewind's handling of just-deleted files in the source data directory",
      "description": "When working with an on-line source database, concurrent file deletions are possible, but pg\\_rewind would get confused if deletion happened between seeing a file's directory entry and examining it with `stat()`.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_test\\_fsync use binary I/O mode on Windows",
      "description": "Previously it wrote the test file in text mode, which is not an accurate reflection of PostgreSQL's actual usage.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/amcheck` to not complain about deleted index pages that are empty",
      "description": "This state of affairs is normal during WAL replay.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to initialize local state correctly in `contrib/dblink`",
      "description": "With the right combination of circumstances, this could lead to `dblink_close()` issuing an unexpected remote `COMMIT`.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/pgcrypto`'s misuse of `deflate()`",
      "description": "The `pgp_sym_encrypt` functions could produce incorrect compressed data due to mishandling of zlib's API requirements. We have no reports of this error manifesting with stock zlib, but it can be seen when using IBM's zlibNX implementation.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner case in decompression logic in `contrib/pgcrypto`'s `pgp_sym_decrypt` functions",
      "description": "A compressed stream can validly end with an empty packet, but the decompressor failed to handle this and would complain about corrupt data.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support building our NLS code with Microsoft Visual Studio 2015 or later (Juan José Santamaría Flecha, Davinder Singh, Amit Kapila) ",
      "description": "",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible failure of our MSVC install script when there is a file named `configure` several levels above the source code tree",
      "description": "This could confuse some logic that looked for `configure` to identify the top level of the source tree.",
      "fixedIn": "12.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent possible data loss from concurrent truncations of SLRU logs",
      "description": "This rare problem would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that SLRU directories are properly fsync'd during checkpoints",
      "description": "This prevents possible data loss in a subsequent operating system crash.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER ROLE` for users with the `BYPASSRLS` attribute",
      "description": "The `BYPASSRLS` attribute is only allowed to be changed by superusers, but other `ALTER ROLE` operations, such as password changes, should be allowed with only ordinary permission checks. The previous coding erroneously restricted all changes on such a role to superusers.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `ALTER TABLE ONLY ... ENABLE/DISABLE TRIGGER` does not recurse to child tables",
      "description": "Previously the `ONLY` flag was ignored.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary recursion to partitions in `ALTER TABLE SET NOT NULL`, when the target column is already marked `NOT NULL`",
      "description": "This avoids a potential deadlock in parallel pg\\_restore.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of expressions in `CREATE TABLE LIKE` with inheritance",
      "description": "If a `CREATE TABLE` command uses both `LIKE` and traditional inheritance, column references in `CHECK` constraints and expression indexes that came from a `LIKE` parent table tended to get mis-numbered, resulting in wrong answers and/or bizarre error messages. The same could happen in `GENERATED` expressions, in branches that have that feature.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `DROP INDEX CONCURRENTLY` on a partitioned table",
      "description": "This case failed anyway, but with a confusing error message.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `LOCK TABLE` to succeed on a self-referential view",
      "description": "It previously threw an error complaining about infinite recursion, but there seems no need to disallow the case.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Retain statistics about an index across `REINDEX CONCURRENTLY`",
      "description": "Non-concurrent reindexing has always preserved such statistics.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect progress reporting from `REINDEX CONCURRENTLY` (Matthias van de Meent, Michael Paquier) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `GENERATED` columns are updated when the column(s) they depend on are updated via a rule or an updatable view",
      "description": "This fix also takes care of possible failure to fire a column-specific trigger in such cases.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recheck default partition constraints while routing an inserted or updated tuple to the correct partition",
      "description": "This fixes race conditions when partitions are added concurrently with the insertion.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failures with collation-dependent partition bound expressions (Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support hashing of text arrays",
      "description": "Array hashing failed if the array element type is collatable. Notably, this prevented using hash partitioning with a text array column as partition key.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix off-by-one conversion of negative years to BC dates in `to_date()` and `to_timestamp()`",
      "description": "Also, arrange for the combination of a negative year and an explicit “BC” marker to cancel out and produce AD.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that standby servers will archive WAL timeline history files when `archive_mode` is set to `always`",
      "description": "This oversight could lead to failure of subsequent PITR recovery attempts.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “cache lookup failed for relation 0” failures in logical replication workers",
      "description": "The real-world impact is small, since the failure is unlikely, and if it does happen the worker would just exit and be restarted.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent logical replication workers from sending redundant ping requests (Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "During “smart” shutdown, don't terminate background processes until all client (foreground) sessions are done",
      "description": "The previous behavior broke parallel query processing, since the postmaster would terminate parallel workers and refuse to launch any new ones. It also caused autovacuum to cease functioning, which could have dire long-term effects if the surviving client sessions make a lot of data changes.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid recursive consumption of stack space while processing signals in the postmaster",
      "description": "Heavy use of parallel processing has been observed to cause postmaster crashes due to too many concurrent signals requesting creation of a parallel worker process.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid running atexit handlers when exiting due to SIGQUIT",
      "description": "Most server processes followed this practice already, but the archiver process was overlooked. Backends that were still waiting for a client startup packet got it wrong, too.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid misoptimization of subquery qualifications that reference apparently-constant grouping columns",
      "description": "A “constant” subquery output column isn't really constant if it is a grouping column that appears in only some of the grouping sets.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible crash when considering partition-wise joins during GEQO planning (Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure when SQL function inlining changes the shape of a potentially-hashable subplan comparison expression (Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "While building or re-building an index, tolerate the appearance of new HOT chains due to concurrent updates",
      "description": "This oversight could lead to “failed to find parent tuple for heap-only tuple” errors.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of parallel B-tree index scans when the index condition is unsatisfiable (James Hunter) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that data is detoasted before being inserted into a BRIN index",
      "description": "Index entries are not supposed to contain out-of-line TOAST pointers, but BRIN didn't get that memo. This could lead to errors like “missing chunk number 0 for toast value NNN”. (If you are faced with such an error from an existing index, `REINDEX` should be enough to fix it.)",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": [
        "If you are faced with such an error from an existing index",
        "`REINDEX` should be enough to fix it."
      ]
    },
    {
      "title": "Handle concurrent desummarization correctly during BRIN index scans",
      "description": "Previously, if a page range was desummarized at just the wrong time, an index scan might falsely raise an error indicating index corruption.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix rare “lost saved point in index” errors in scans of multicolumn GIN indexes (Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix buffered GiST index builds to work when the index has included columns (Pavel Borisov) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unportable use of `getnameinfo()` in `pg_hba_file_rules` view",
      "description": "On FreeBSD 11, and possibly other platforms, the view's `address` and `netmask` columns were always null due to this error.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash if `debug_query_string` is NULL when starting a parallel worker (Noah Misch) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use-after-free hazard when an event trigger monitors an `ALTER TABLE` operation (Jehan-Guillaume de Rorthais) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failures when a `BEFORE ROW UPDATE` trigger returns the “old” row of a table having dropped or “missing” columns",
      "description": "This method of suppressing an update could result in crashes, unexpected `CHECK` constraint failures, or incorrect `RETURNING` output, because “missing” columns would read as NULLs for those purposes. (A column is “missing” for this purpose if it was added by `ALTER TABLE ADD COLUMN` with a non-NULL, but constant, default value.) Dropped columns could cause trouble as well.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect error message about inconsistent moving-aggregate data types (Jeff Janes) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid lockup when a parallel worker reports a very long error message (Vignesh C) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary failure when transferring very large payloads through shared memory queues (Markus Wanner) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect handling of template function attributes in JIT code generation",
      "description": "This has been shown to cause crashes on `s390x`, and very possibly there are other cases on other platforms.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix relation cache memory leaks with RLS policies (Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case memory leak in `index_get_partition()` (Justin Pryzby) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart (Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leaks in PL/pgsql's `CALL` processing (Pavel Stehule, Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make libpq support arbitrary-length lines in `.pgpass` files",
      "description": "This is mostly useful to allow using very long security tokens as passwords.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In libpq for Windows, call `WSAStartup()` once per process and `WSACleanup()` not at all",
      "description": "Previously, libpq invoked `WSAStartup()` at connection start and `WSACleanup()` at connection cleanup. However, it appears that calling `WSACleanup()` can interfere with other program operations; notably, we have observed rare failures to emit expected output to stdout. There appear to be no ill effects from omitting the call, so do that. (This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections.)",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": [
        "This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections."
      ]
    },
    {
      "title": "Fix ecpg library's per-thread initialization logic for Windows",
      "description": "Multi-threaded ecpg applications could suffer rare misbehavior due to incorrect locking.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, make psql read the output of a backtick command in text mode, not binary mode",
      "description": "This ensures proper handling of newlines.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that pg\\_dump collects per-column information about extension configuration tables",
      "description": "Failure to do this led to crashes when specifying `--inserts`, or underspecified (though usually correct) `COPY` commands when using `COPY` to reload the tables' data.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that parallel pg\\_restore processes foreign keys referencing partitioned tables in the correct order",
      "description": "Previously, it might try to restore a foreign key constraint before the required indexes were all in place, leading to an error.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_upgrade check for pre-existence of tablespace directories in the target cluster (Bruce Momjian) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix potential memory leak in `contrib/pgcrypto` (Michael Paquier) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add check for an unlikely failure case in `contrib/pgcrypto` (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix recently-added `timetz` test case so it works when the USA is not observing daylight savings time (Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station (Antarctica); plus historical corrections for France, Hungary, Monaco, and Palestine. (Tom Lane) ",
      "description": "",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2020d",
      "description": "This absorbs upstream's change of zic's default output option from “fat” to “slim”. That's just cosmetic for our purposes, as we continue to select the “fat” mode in pre-v13 branches. This change also ensures that `strftime()` does not change `errno` unless it fails.",
      "fixedIn": "12.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect detection of concurrent page splits while inserting into a GiST index",
      "description": "Concurrent insertions could lead to a corrupt index with entries placed in the wrong pages. It's recommended to reindex any GiST index that's been subject to concurrent insertions.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `CREATE INDEX CONCURRENTLY` to wait for concurrent prepared transactions",
      "description": "At the point where `CREATE INDEX CONCURRENTLY` waits for all concurrent transactions to complete so that it can see rows they inserted, it must also wait for all prepared transactions to complete, for the same reason. Its failure to do so meant that rows inserted by prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. In installations that have enabled prepared transactions (`max_prepared_transactions` \\> 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash when a `CALL` or `DO` statement that performs a transaction rollback is executed via extended query protocol",
      "description": "In PostgreSQL 13, this case reliably caused a null-pointer dereference. In earlier versions the bug seems to have no visible symptoms, but it's not quite clear that it could never cause a problem.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition pruning logic to handle asymmetric hash partition sets",
      "description": "If a hash-partitioned table has unequally-sized partitions (that is, varying modulus values), or it lacks partitions for some remainder values, then the planner's pruning logic could mistakenly conclude that some partitions don't need to be scanned, leading to failure to find rows that the query should find.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node",
      "description": "This case is unsupported (in general, a cursor using `ORDER BY` is not guaranteed to be simply updatable); but the code previously did not reject it, and could silently give false matches.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node (David Geier) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner's mishandling of placeholders whose evaluation should be delayed by an outer join",
      "description": "This occurs in particular with trivial subqueries containing lateral references to outer-join outputs. The mistake could result in a malformed plan. The known cases trigger a “failed to assign all NestLoopParams to plan nodes” error, but other symptoms may be possible.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner's handling of placeholders during removal of useless RESULT RTEs",
      "description": "This oversight could lead to “no relation entry for relid _`N`_” planner errors.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level",
      "description": "This oversight could lead to “failed to build any _`N`_\\-way joins” planner errors.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more careful about whether index AMs support mark/restore",
      "description": "This prevents errors about missing support functions in rare edge cases.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust settings to make it more difficult to run out of DSM slots during heavy usage of parallel queries (Thomas Munro) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix overestimate of the amount of shared memory needed for parallel queries (Takayuki Tsunakawa) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER DEFAULT PRIVILEGES` to handle duplicated arguments safely",
      "description": "Duplicate role or schema names within the same command could lead to “tuple already updated by self” errors or unique-constraint violations.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Flush ACL-related caches when `pg_authid` changes",
      "description": "This change ensures that permissions-related decisions will promptly reflect the results of `ALTER ROLE ... [NO] INHERIT`.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent misprocessing of ambiguous `CREATE TABLE LIKE` clauses",
      "description": "A `LIKE` clause is re-examined after initial creation of the new table, to handle importation of indexes and such. It was possible for this re-examination to find a different table of the same name, causing unexpected behavior; one example is where the new table is a temporary table of the same name as the `LIKE` target.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rearrange order of operations in `CREATE TABLE LIKE` so that indexes are cloned before building foreign key constraints",
      "description": "This fixes the case where a self-referential foreign key constraint declared in the outer `CREATE TABLE` depends on an index that's coming from the `LIKE` clause.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `CREATE STATISTICS` on system catalogs (Tomas Vondra) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow converting an inheritance child table to a view (Tom Lane) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that disk space allocated for a dropped relation is released promptly at commit",
      "description": "Previously, if the dropped relation spanned multiple 1GB segments, only the first segment was truncated immediately. Other segments were simply unlinked, which doesn't authorize the kernel to release the storage so long as any other backends still have the files open.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent dropping a tablespace that is referenced by a partitioned relation, but is not used for any actual storage",
      "description": "Previously this was allowed, but subsequent operations on the partitioned relation would fail.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix progress reporting for `CLUSTER` (Matthias van de Meent) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of backslash-escaped multibyte characters in `COPY FROM`",
      "description": "A backslash followed by a multibyte character was not handled correctly. In some client character encodings, this could lead to misinterpreting part of a multibyte character as a field separator or end-of-copy-data marker.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid preallocating executor hash tables in `EXPLAIN` without `ANALYZE` (Alexey Bashtanov) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix recently-introduced race conditions in `LISTEN`/`NOTIFY` queue handling",
      "description": "A newly-listening backend could attempt to read SLRU pages that were in process of being truncated, possibly causing an error.\n\nThe queue tail pointer could become set to a value that's not equal to the queue position of any backend, resulting in effective disabling of the queue truncation logic. Continued use of `NOTIFY` then led to queue-fill warnings, and eventually to inability to send any more notifies until the server is restarted.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the `jsonb` concatenation operator to handle all combinations of JSON data types",
      "description": "We can concatenate two JSON objects or two JSON arrays. Handle other cases by wrapping non-array inputs in one-element arrays, then performing an array concatenation. Previously, some combinations of inputs followed this rule but others arbitrarily threw an error.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression",
      "description": "This error could cause the quantifier to act non-greedy, that is behave like a `*?` quantifier would do in full regular expressions.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix numeric `power()` for the case where the exponent is exactly `INT_MIN` (-2147483648)",
      "description": "Previously, a result with no significant digits was produced.",
      "fixedIn": "12.6",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Fix integer-overflow cases in `substring()` functions",
      "description": "If the specified starting index and length overflow an integer when added together, `substring()` misbehaved, either throwing a bogus “negative substring length” error for a case that should succeed, or failing to complain that a negative length is negative (and instead returning the whole string, in most cases).",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log",
      "description": "The wraparound point typically falls in the middle of a page, which must be rounded off to a page boundary, and that was not done correctly. No issue could arise unless an installation had gotten to within one page of SLRU overflow, which is unlikely in a properly-functioning system. If this did happen, it would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in walsender processes while sending new snapshots for logical decoding (Amit Kapila) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix walsender to accept additional commands after terminating replication (Jeff Davis) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure detection of deadlocks between hot standby backends and the startup (WAL-application) process",
      "description": "The startup process did not run the deadlock detection code, so that in situations where the startup process is last to join a circular wait situation, the deadlock might never be recognized.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure to detect recovery conflicts while deleting an index entry that references a HOT chain",
      "description": "The code failed to traverse the HOT chain and might thus compute a too-old XID horizon, which could lead to incorrect conflict processing in hot standby. The practical impact of this bug is limited; in most cases the correct XID horizon would be found anyway from nearby operations.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a nonempty value of `krb_server_keyfile` always overrides any setting of `KRB5_KTNAME` in the server's environment",
      "description": "Previously, which setting took precedence depended on whether the client requests GSS encryption.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In server log messages about failing to match connections to `pg_hba.conf` entries, include details about whether GSS encryption has been activated",
      "description": "This is relevant data if `hostgssenc` or `hostnogssenc` entries exist.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assorted issues in server's support for GSS encryption",
      "description": "Remove pointless restriction that only GSS authentication can be used on a GSS-encrypted connection. Add GSS encryption information to connection-authorized log messages. Include GSS-related space when computing the required size of shared memory (this omission could have caused problems with very high `max_connections` settings). Avoid possible infinite recursion when reporting an unrecoverable GSS encryption error.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence",
      "description": "Previously, there was a race condition whereby a child process that had requested a background worker just before shutdown could wait indefinitely, preventing shutdown from completing.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix portability problem in parsing of `recovery_target_xid` values",
      "description": "The target XID is potentially 64 bits wide, but it was parsed with `strtoul()`, causing misbehavior on platforms where `long` is 32 bits (such as Windows).",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to use parallel index build in a standalone backend (Yulin Pei) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow index AMs to support included columns without necessarily supporting multiple key columns (Tom Lane) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure during parallel aggregation of an aggregate with a non-strict deserialization function",
      "description": "No such aggregate functions exist in core PostgreSQL, but some extensions such as PostGIS provide some. The mistake is harmless anyway in a non-assert build.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure in `pg_get_functiondef()` when examining a function with a `TRANSFORM` option (Tom Lane) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data structure misallocation in PL/pgSQL's `CALL` statement",
      "description": "A `CALL` in a PL/pgSQL procedure, to another procedure that has OUT parameters, would fail if the called procedure did a `COMMIT` or `ROLLBACK`.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In libpq, do not skip trying SSL after GSS encryption",
      "description": "If we successfully made a GSS-encrypted connection, but then failed during authentication, we would fall back to an unencrypted connection rather than next trying an SSL-encrypted connection. This could lead to unexpected connection failure, or to silently getting an unencrypted connection where an encrypted one is expected. Fortunately, GSS encryption could only succeed if both client and server hold valid tickets in the same Kerberos infrastructure. It seems unlikely for that to be true in an environment that requires SSL encryption instead.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql, re-allow including a password in a _`connectionstring`_ argument of a `\\connect` command",
      "description": "This used to work, but a recent bug fix caused the password to be ignored (resulting in prompting for a password).",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql's `\\d` commands, don't truncate the display of column default values",
      "description": "Formerly, they were arbitrarily truncated at 128 characters.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assorted bugs in psql's `\\help` command",
      "description": "`\\help` with two argument words failed to find a command description using only the first word, for example `\\help reset all` should show the help for `RESET` but did not. Also, `\\help` often failed to invoke the pager when it should. It also leaked memory.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's dumping of inherited generated columns",
      "description": "The previous behavior resulted in (harmless) errors during restore.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, ensure that the restore script runs `ALTER PUBLICATION ADD TABLE` commands as the owner of the publication, and similarly runs `ALTER INDEX ATTACH PARTITION` commands as the owner of the partitioned index",
      "description": "Previously, these commands would be run by the role that started the restore script; which will usually work, but in corner cases that role might not have adequate permissions.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to handle `WITH GRANT OPTION` in an extension's initial privileges",
      "description": "If an extension's script creates an object and grants privileges on it with grant option, then later the user revokes such privileges, pg\\_dump would generate incorrect SQL for reproducing the situation. (Few if any extensions do this today.)",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": [
        "Few if any extensions do this today."
      ]
    },
    {
      "title": "In pg\\_rewind, ensure that all WAL is accounted for when rewinding a standby server (Ian Barwick, Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pgbench, disallow a digit as the first character of a variable name",
      "description": "This prevents trying to substitute variables into timestamp literal values, which may contain strings like `12:34`.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report the correct database name in connection failure error messages from some client programs",
      "description": "If the database name was defaulted rather than given on the command line, pg\\_dumpall, pgbench, oid2name, and vacuumlo would produce misleading error messages after a connection failure.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in `contrib/auto_explain`",
      "description": "Memory consumed while producing the `EXPLAIN` output was not freed until the end of the current transaction (for a top-level statement) or the end of the surrounding statement (for a nested statement). This was particularly a problem with `log_nested_statements` enabled.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped",
      "description": "Open connections that depend on a dropped user mapping or foreign server can no longer be referenced, but formerly they were kept around anyway for the duration of the local session.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pgcrypto`, check for error returns from OpenSSL's EVP functions",
      "description": "We do not really expect errors here, but this change silences warnings from static analysis tools.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `contrib/pg_prewarm` more robust when the cluster is shut down before prewarming is complete",
      "description": "Previously, autoprewarm would rewrite its status file with only the block numbers that it had managed to load so far, thus perhaps largely disabling the prewarm functionality in the next startup. Instead, suppress status file updates until the initial loading pass is complete.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pg_trgm`'s GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items (Andrew Gierth, Alexander Korotkov) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix miscalculation of timeouts in `contrib/pg_prewarm` and `contrib/postgres_fdw`",
      "description": "The main loop in `contrib/pg_prewarm`'s autoprewarm parent process underestimated its desired sleep time by a factor of 1000, causing it to consume much more CPU than intended. When waiting for a result from a remote server, `contrib/postgres_fdw` overestimated the desired timeout by a factor of 1000 (though this error had been mitigated by imposing a clamp to 60 seconds).\n\nBoth of these errors stemmed from incorrectly converting seconds-and-microseconds to milliseconds. Introduce a new API `TimestampDifferenceMilliseconds()` to make it easier to get this right in the future.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve configure's heuristics for selecting `PG_SYSROOT` on macOS",
      "description": "The new method is more likely to produce desirable results when Xcode is newer than the underlying operating system. Choosing a sysroot that does not match the OS version may result in nonfunctional executables.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "While building on macOS, specify `-isysroot` in link steps as well as compile steps",
      "description": "This likewise improves the results when Xcode is out of sync with the operating system.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix JIT compilation to be compatible with LLVM 11 and LLVM 12 (Andres Freund) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix potential mishandling of references to boolean variables in JIT expression compilation",
      "description": "No field reports attributable to this have been seen, but it seems likely that it could cause problems on some architectures.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compile failure with ICU 68 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid `memcpy()` with a NULL source pointer and zero count during partitioned index creation",
      "description": "While such a call is not known to cause problems in itself, some compilers assume that the arguments of `memcpy()` are never NULL, which could result in incorrect optimization of nearby code.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2021a for DST law changes in Russia (Volgograd zone) and South Sudan, plus historical corrections for Australia, Bahamas, Belize, Bermuda, Ghana, Israel, Kenya, Nigeria, Palestine, Seychelles, and Vanuatu.",
      "description": "Notably, the Australia/Currie zone has been corrected to the point where it is identical to Australia/Hobart.",
      "fixedIn": "12.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix adjustment of constraint deferrability properties in partitioned tables",
      "description": "When applied to a foreign-key constraint of a partitioned table, `ALTER TABLE ... ALTER CONSTRAINT` failed to adjust the `DEFERRABLE` and/or `INITIALLY DEFERRED` markings of the constraints and triggers of leaf partitions. This led to unexpected behavior of such constraints. After updating to this version, any misbehaving partitioned tables can be fixed by executing a new `ALTER` command to set the desired properties.\n\nThis change also disallows applying such an `ALTER` directly to the constraints of leaf partitions. The only supported case is for the whole partitioning hierarchy to have identical constraint properties, so such `ALTER`s must be applied at the partition root.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When attaching a child table with `ALTER TABLE ... INHERIT`, insist that any generated columns in the parent be generated the same way in the child (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Forbid marking an identity column as nullable",
      "description": "`GENERATED ... AS IDENTITY` implies `NOT NULL`, so don't allow it to be combined with an explicit `NULL` specification.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `ALTER ROLE/DATABASE ... SET` to set the `role`, `session_authorization`, and `temp_buffers` parameters",
      "description": "Previously, over-eager validity checks might reject these commands, even if the values would have worked when used later. This created a command ordering hazard for dump/reload and upgrade scenarios.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `REINDEX CONCURRENTLY` preserves any statistics target that's been set for the index (Michael Paquier) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `COMMIT AND CHAIN` to work correctly when the current transaction has live savepoints (Fujii Masao) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type",
      "description": "This led to a parse tree in which the `COLLATE` appears to be applied to a non-collatable value. While that normally has no real impact (since `COLLATE` has no effect at runtime), it was possible to construct views that would be rejected during dump/reload.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use-after-free bug in saving tuples for `AFTER` triggers",
      "description": "This could cause crashes in some situations.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow calling window functions and procedures via the “fast path” wire protocol message",
      "description": "Only plain functions are supported here. While trying to call an aggregate function failed already, calling a window function would crash, and calling a procedure would work only if the procedure did no transaction control.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Extend `pg_identify_object_as_address()` to support event triggers (Joel Jacobson) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `to_char()`'s handling of Roman-numeral month format codes with negative intervals",
      "description": "Previously, such cases would usually cause a crash.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Check that the argument of `pg_import_system_collations()` is a valid schema OID (Tom Lane) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use of uninitialized value while parsing an `` \\{_`m`_,_`n`_\\} `` quantifier in a BRE-mode regular expression",
      "description": "This error could cause the quantifier to act non-greedy, that is behave like an `` {_`m`_,_`n`_}? `` quantifier would do in full regular expressions.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't ignore system columns when estimating the number of groups using extended statistics",
      "description": "This led to strange estimates for queries such as `SELECT ... GROUP BY a, b, ctid`.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix",
      "description": "This typically led to a `NaN` selectivity value, causing assertion failures or strange planner behavior.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans",
      "description": "If the page range size used by a BRIN index isn't a power of two, there were corner cases in which a bitmap scan could try to fetch pages past the actual end of the table, leading to “could not open file” errors.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL",
      "description": "This error could lead to subsequent WAL records being written under the wrong timeline ID, leading to consistency problems, or even complete failure to be able to restart the server, later on.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that locks are released while shutting down a standby server's startup process",
      "description": "When a standby server is shut down while still in recovery, some locks might be left held. This causes assertion failures in debug builds; it's unclear whether any serious consequence could occur in production builds.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when a logical replication worker does `ALTER SUBSCRIPTION REFRESH`",
      "description": "The core code won't do this, but a replica trigger could.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure we default to `wal_sync_method` \\= `fdatasync` on recent FreeBSD",
      "description": "FreeBSD 13 supports `open_datasync`, which would normally become the default choice. However, it's unclear whether that is actually an improvement for Postgres, so preserve the existing default for now.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Pass the correct trigger OID to object post-alter hooks during `ALTER CONSTRAINT`",
      "description": "When updating trigger properties during `ALTER CONSTRAINT`, the post-alter hook was told that we are updating a trigger, but the constraint's OID was passed instead of the trigger's.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure we finish cleaning up when interrupted while detaching a DSM segment",
      "description": "This error could result in temporary files not being cleaned up promptly after a parallel query.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak while initializing server's SSL parameters",
      "description": "This is ordinarily insignificant, but if the postmaster is repeatedly sent SIGHUP signals, the leak can build up over time.",
      "fixedIn": "12.7",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Fix assorted minor memory leaks in the server (Tom Lane, Andres Freund) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure when a PL/pgSQL `DO` block makes use of both composite-type variables and transaction control",
      "description": "Previously, such cases led to errors about leaked tuple descriptors.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received (Tom Lane) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When initdb prints instructions about how to start the server, make the path shown for pg\\_ctl use backslash separators on Windows (Nitin Jadhav) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql to restore the previous behavior of `` \\connect service=_`something`_ ``",
      "description": "A previous bug fix caused environment variables (such as `PGPORT`) to override entries in the service file in this context. Restore the previous behavior, in which the priority is the other way around.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql's `ON_ERROR_ROLLBACK` feature to handle `COMMIT AND CHAIN` commands correctly",
      "description": "Previously, this case failed with “savepoint \"pg\\_psql\\_temporary\\_savepoint\" does not exist”.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in detection of file modification by psql's `\\e` and related commands",
      "description": "A very fast typist could fool the code's file-timestamp-based detection of whether the temporary edit file was changed.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's dumping of generated columns in partitioned tables",
      "description": "A fix introduced in the previous minor release should not be applied to partitioned tables, only traditionally-inherited tables.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix missed file version check in pg\\_restore",
      "description": "When reading a custom-format archive from a non-seekable source, pg\\_restore neglected to check the archive version. If it was fed a newer archive version than it can support, it would fail messily later on.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add some more checks to pg\\_upgrade for user tables containing non-upgradable data types",
      "description": "Fix detection of some cases where a non-upgradable data type is embedded within a container type (such as an array or range). Also disallow upgrading when user tables contain columns of system-defined composite types, since those types' OIDs are not stable across versions.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect progress-reporting calculation in pg\\_checksums (Shinya Kato) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_waldump to count `XACT` records correctly when generating per-record statistics (Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/amcheck` to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set",
      "description": "This is a valid state after `SELECT FOR UPDATE`.",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions (Noah Misch) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix testing of PL/Python for Python 3 on Solaris (Noah Misch) ",
      "description": "",
      "fixedIn": "12.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Restore the Portal-level snapshot after `COMMIT` or `ROLLBACK` within a procedure",
      "description": "This change fixes cases where an attempt to fetch a toasted value immediately after `COMMIT`/`ROLLBACK` would fail with errors like “no known snapshots” or “missing chunk number 0 for toast value”.\n\nSome extensions may attempt to execute SQL code outside of any Portal. They are responsible for ensuring that an outer snapshot exists before doing so. Previously, not providing a snapshot might work or it might not; now it will consistently fail with “cannot execute SQL without an outer snapshot or portal”.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid misbehavior when persisting the output of a cursor that's reading a non-stable query",
      "description": "Previously, we'd always rewind and re-read the whole query result, possibly getting results different from the earlier execution, causing great confusion later. For a NO SCROLL cursor, we can fix this by only storing the not-yet-read portion of the query output, which is sufficient since a NO SCROLL cursor can't be backed up. Cursors with the SCROLL option remain at hazard, but that was already documented to be an unsafe option to use with a non-stable query. Make those documentation warnings stronger.\n\nAlso force NO SCROLL mode for the implicit cursor used by a PL/pgSQL FOR-over-query loop, to avoid this type of problem when persisting such a cursor during an intra-procedure commit.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject `SELECT ... GROUP BY GROUPING SETS (()) FOR UPDATE`",
      "description": "This should be disallowed, just as `FOR UPDATE` with a plain `GROUP BY` is disallowed, but the test for that failed to handle empty grouping sets correctly. The end result would be a null-pointer dereference in the executor.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject cases where a query in `WITH` rewrites to just `NOTIFY`",
      "description": "Such cases previously crashed.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `numeric` multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point (Dean Rasheed) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case errors and loss of precision when raising `numeric` values to very large powers (Dean Rasheed) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix division-by-zero failure in `to_char()` with `EEEE` format and a `numeric` input value less than 10^(-1001) (Dean Rasheed) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `pg_size_pretty(bigint)` to round negative values consistently with the way it rounds positive ones (and consistently with the `numeric` version) (Dean Rasheed, David Rowley) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `pg_filenode_relation(0, 0)` return NULL rather than failing (Justin Pryzby) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `ALTER EXTENSION` lock the extension when adding or removing a member object",
      "description": "The previous coding allowed `ALTER EXTENSION ADD/DROP` to occur concurrently with `DROP EXTENSION`, leading to a crash or corrupt catalog entries.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER SUBSCRIPTION` to reject an empty slot name (Japin Li) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When cloning a partitioned table's triggers to a new partition, ensure that their enabled status is copied (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid alias conflicts in queries generated for `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "This command failed on materialized views containing columns with certain names, notably `mv` and `newdata`.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `PREPARE TRANSACTION` to check correctly for conflicting session-lifespan and transaction-lifespan locks",
      "description": "A transaction cannot be prepared if it has both session-lifespan and transaction-lifespan locks on the same advisory-lock ID value. This restriction was not fully checked, which could lead to a PANIC during `PREPARE TRANSACTION`.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior of `DROP OWNED BY` when the target role is listed more than once in an RLS policy (Tom Lane) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Skip unnecessary error tests when removing a role from an RLS policy during `DROP OWNED BY`",
      "description": "Notably, this fixes some cases where it was necessary to be a superuser to use `DROP OWNED BY`.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow whole-row variables in `GENERATED` expressions",
      "description": "Use of a whole-row variable clearly violates the rule that a generated column cannot depend on itself, so such cases have no well-defined behavior. The actual behavior frequently included a crash.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix usage of `tableoid` in `GENERATED` expressions",
      "description": "Some code paths failed to provide a valid value for this system column while evaluating a `GENERATED` expression.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't store a “fast default” when adding a column to a foreign table",
      "description": "The fast default is useless since no local heap storage exists for such a table, but it confused subsequent operations. In addition to suppressing creation of such catalog entries in `ALTER TABLE` commands, adjust the downstream code to cope when one is incorrectly present.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow index state flags to be updated transactionally",
      "description": "This avoids failures when dealing with index predicates that aren't really immutable. While that's not considered a supported case, the original reason for using a non-transactional update here is long gone, so we may as well change it.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid corrupting the plan cache entry when `CREATE DOMAIN` or `ALTER DOMAIN` appears in a cached plan (Tom Lane) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make walsenders show their latest replication commands in `pg_stat_activity`",
      "description": "Previously, a walsender would show its latest SQL command, which was confusing if it's now doing some replication operation instead. Now we show replication-protocol commands on the same footing as SQL commands.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `pg_settings`.`pending_restart` show as true when the pertinent entry in `postgresql.conf` has been removed",
      "description": "`pending_restart` correctly showed the case where an entry that cannot be changed without a postmaster restart has been modified, but not where the entry had been removed altogether.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-planning of queries involving regular tables that are inheritance children of foreign tables",
      "description": "`SELECT FOR UPDATE` and related commands would fail with assertion failures or “could not find junk column” errors in such cases.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case failure of a new standby to follow a new primary",
      "description": "Under a narrow combination of conditions, the standby could wind up trying to follow the wrong WAL timeline.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation",
      "description": "File truncation is irreversible, so it's no longer safe to stop recovery at a point earlier than that record. The corresponding case for transaction commit was fixed years ago, but this one was overlooked.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In walreceivers, avoid attempting catalog lookups after an error (Masahiko Sawada, Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive (Fujii Masao, Soumyadeep Chakraborty) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly clear shared state after failing to become a member of a transaction commit group",
      "description": "Given the right timing, this could cause an assertion failure when some later session re-uses the same PGPROC object.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve progress reporting for the sort phase of a parallel btree index build (Matthias van de Meent) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve checks for violations of replication protocol",
      "description": "Logical replication workers frequently used Asserts to check for cases that could be triggered by invalid or out-of-order replication commands. This seems unwise, so promote these tests to regular error checks.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix deadlock when multiple logical replication workers try to truncate the same table (Peter Smith, Haiying Tang) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error cases and memory leaks in logical decoding of speculative insertions (Dilip Kumar) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaving an invalid record-type hash table entry behind after an error",
      "description": "This could lead to later crashes or memory leakage.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix plan cache reference leaks in some error cases in `CREATE TABLE ... AS EXECUTE` (Tom Lane) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in code for sharing tuple descriptors across parallel workers",
      "description": "Given the right timing, a crash could result.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible race condition when releasing BackgroundWorkerSlots",
      "description": "It's likely that this doesn't fix any observable bug on Intel hardware, but machines with weaker memory ordering rules could have problems.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix latent crash in sorting code",
      "description": "One code path could attempt to free a null pointer. The case appears unreachable in the core server's use of sorting, but perhaps it could be triggered by extensions.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent infinite loops in SP-GiST index insertion",
      "description": "In the event that INCLUDE columns take up enough space to prevent a leaf index tuple from ever fitting on a page, the text\\_ops operator class would get into an infinite loop vainly trying to make the tuple fit. While pre-v11 versions don't have INCLUDE columns, back-patch this anti-looping fix to them anyway, as it seems like a good defense against bugs in operator classes.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that SP-GiST index insertion can be terminated by a query cancel request (Tom Lane, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't (Tom Lane) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't abort the process for an out-of-memory failure in libpq's printing functions (Tom Lane) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, allow the `numeric` value INT\\_MIN (usually -2147483648) to be converted to integer (John Naylor) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to correctly handle triggers on partitioned tables whose enabled status is different from their parent triggers' status (Justin Pryzby, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “invalid creation date in header” warnings observed when running pg\\_restore on an archive file created in a different time zone (Tom Lane) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_upgrade carry forward the old installation's `oldestXID` value",
      "description": "Previously, the new installation's `oldestXID` was set to a value old enough to (usually) force immediate anti-wraparound autovacuuming. That's not desirable from a performance standpoint; what's worse, installations using large values of `autovacuum_freeze_max_age` could suffer unwanted forced shutdowns soon after an upgrade.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Extend pg\\_upgrade to detect and warn about extensions that should be upgraded",
      "description": "A script file is now produced containing the `ALTER EXTENSION UPDATE` commands needed to bring extensions up to the versions that are considered default in the new installation.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid problems when switching pg\\_receivewal between compressed and non-compressed WAL storage (Michael Paquier) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/postgres_fdw` to work usefully with generated columns",
      "description": "`postgres_fdw` will now behave reasonably with generated columns, so long as a generated column in a foreign table represents a generated column in the remote table. `IMPORT FOREIGN SCHEMA` will now import generated columns that way by default.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid attempting catalog lookups after an error",
      "description": "While this usually worked, it's not very safe since the error might have been one that made catalog access nonfunctional. A side effect of the fix is that messages about data conversion errors will now mention the query's table and column aliases (if used) rather than the true underlying name of a foreign table or column.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the isolation-test infrastructure",
      "description": "Allow isolation test steps to be annotated to show the expected completion order. This allows getting stable results from otherwise-racy test cases, without the long delays that we previously used (not entirely successfully) to fend off race conditions. Allow non-quoted identifiers as isolation test session/step names (formerly, all such names had to be double-quoted). Detect and warn about unused steps in isolation tests. Improve display of query results in isolation tests. Remove isolationtester's “dry-run” mode. Remove memory leaks in isolationtester itself.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce overhead of cache-clobber testing (Tom Lane) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Python's regression tests to pass with Python 3.10 (Honza Horak) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `printf(\"%s\", NULL)` print `(null)` instead of crashing",
      "description": "This should improve server robustness in corner cases, and it syncs our `printf` implementation with common libraries.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect log message when point-in-time recovery stops at a `ROLLBACK PREPARED` record (Simon Riggs) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve `ALTER TABLE`'s messages for wrong-relation-kind errors (Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Clarify error messages referring to “non-negative” values (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate `libldap_r` library",
      "description": "If there is no `libldap_r` library, we now silently assume that `libldap` is thread-safe.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new make targets `world-bin` and `install-world-bin`",
      "description": "These are the same as `world` and `install-world` respectively, except that they do not build or install the documentation.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix make rule for TAP tests (`prove_installcheck`) to work in PGXS usage (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust JIT code to prepare for forthcoming LLVM API change",
      "description": "LLVM 13 has made an incompatible API change that will cause crashing of our previous JIT compiler.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated",
      "description": "The GSSAPI spec provides for a string pointer and length. It seems that in practice the next byte after the string is usually zero, so that our previous coding didn't actually fail; but we do have a report of AddressSanitizer complaints.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enable building with GSSAPI on MSVC",
      "description": "Fix various incompatibilities with modern Kerberos builds.",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In MSVC builds, include `--with-pgport` in the set of configure options reported by pg\\_config, if it had been specified (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "12.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "If the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\n\nWhen applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `CREATE INDEX CONCURRENTLY` to wait for the latest prepared transactions",
      "description": "Rows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for `PREPARE TRANSACTION` commands that were still in progress when `CREATE INDEX CONCURRENTLY` checked for them. As before, in installations that have enabled prepared transactions (`max_prepared_transactions` \\> 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "While it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `float4` and `float8` hash functions to produce uniform results for NaNs",
      "description": "Since PostgreSQL's floating-point types deem all NaNs to be equal, it's important for the hash functions to produce the same hash code for all bit-patterns that are NaNs according to the IEEE 754 standard. This failed to happen before, meaning that hash indexes and hash-based query plans might produce incorrect results for non-canonical NaN values. (`'-NaN'::float8` is one way to produce such a value on most machines.) It is advisable to reindex hash indexes on floating-point columns, if there is any possibility that they might contain such values.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent data loss during crash recovery of `CREATE TABLESPACE`, when `wal_level` \\= `minimal`",
      "description": "If the server crashed between `CREATE TABLESPACE` and the next checkpoint, replay would fully remove the contents of the new tablespace's directory, relying on subsequent WAL replay to restore everything within that directory. This interacts badly with optimizations that skip writing WAL (one example is `COPY` into a just-created table). Such optimizations are applied only when `wal_level` is `minimal`, which is not the default in v10 and later.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "This oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication",
      "description": "This oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't discard a cast to the same type with unspecified type modifier",
      "description": "For example, if column `f1` is of type `numeric(18,3)`, the parser used to simply discard a cast like `f1::numeric`, on the grounds that it would have no run-time effect. That's true, but the exposed type of the expression should still be considered to be plain `numeric`, not `numeric(18,3)`. This is important for correctly resolving the type of larger constructs, such as recursive `UNION`s.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix updates of element fields in arrays of domain over composite",
      "description": "A command such as `UPDATE tab SET fld[1].subfld = val` failed if the array's elements were domains rather than plain composites.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow creating an ICU collation if the current database's encoding won't support it",
      "description": "Previously this was allowed, but then the collation could not be referenced because of the way collation lookup works; you could not use the collation, nor even drop it.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power()`",
      "description": "The result could be inaccurate when the first argument is very close to 1.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid regular expression errors with capturing parentheses inside `{0}`",
      "description": "Regular expressions like `(.){0}...\\1` drew “invalid backreference number”. Other regexp engines such as Perl don't complain, though, and for that matter ours doesn't either in some closely related cases. Worse, it could throw an assertion failure instead. Fix it so that no error is thrown and instead the back-reference is silently deemed to never match.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent regular expression back-references from sometimes matching when they shouldn't",
      "description": "The regexp engine was careless about clearing match data for capturing parentheses after rejecting a partial match. This could allow a later back-reference to match in places where it should fail for lack of a defined referent.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix regular expression performance bug with back-references inside iteration nodes",
      "description": "Incorrect back-tracking logic could result in exponential time spent looking for a match. Fortunately the problem is masked in most cases by other optimizations.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect results from `AT TIME ZONE` applied to a `time with time zone` value",
      "description": "The results were incorrect if the target time zone was specified by a dynamic timezone abbreviation (that is, one that is defined as equivalent to a full time zone name, rather than a fixed UTC offset).",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mistranslation of PlaceHolderVars to inheritance child relations",
      "description": "This error could result in assertion failures, or in mis-planning of queries having partitioned or inherited tables on the nullable side of an outer join.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "There are corner cases in which `ANALYZE` will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix restoration of a Portal's snapshot inside a subtransaction",
      "description": "If a procedure commits or rolls back a transaction, and then its next significant action is inside a new subtransaction, snapshot management went wrong, leading to a dangling pointer and probable crash. A typical example in PL/pgSQL is a `COMMIT` immediately followed by a `BEGIN ... EXCEPTION` block that performs a query.",
      "fixedIn": "12.9",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "This oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "This oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "fixedIn": "12.9",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "There was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Refuse to rewind a cursor marked `NO SCROLL` if it has been held over from a previous transaction due to the `WITH HOLD` option",
      "description": "We have long forbidden fetching backwards from a `NO SCROLL` cursor, but for historical reasons the prohibition didn't extend to cases in which we rewind the query altogether and then re-fetch forwards. That exception leads to inconsistencies, particularly for held-over cursors which may not have stored all the data necessary to rewind. Disallow rewinding for non-scrollable held-over cursors to block the worst inconsistencies. (v15 will remove the exception altogether.)",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": [
        "v15 will remove the exception altogether."
      ]
    },
    {
      "title": "Fix possible failure while saving a `WITH HOLD` cursor at transaction end, if it had already been read to completion (Tom Lane) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of a relation that has grown to the maximum allowed length",
      "description": "An attempt to extend a table or index past the limit of 2^32-1 blocks was rejected, but not soon enough to prevent inconsistent internal state from being created.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule",
      "description": "The previous failure to do this could lead to problems such as unsafely choosing a parallel plan.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect reporting of permissions failures on extended statistics objects",
      "description": "The code typically produced “cache lookup error” rather than the intended message.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect snapshot handling in parallel workers",
      "description": "This oversight could lead to misbehavior in parallel queries if the transaction isolation level is less than `REPEATABLE READ`.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix logical decoding to correctly ignore toast-table changes for transient tables",
      "description": "Logical decoding normally ignores changes in transient tables such as those created during an `ALTER TABLE` heap rewrite. But that filtering wasn't applied to the associated toast table if any, leading to possible errors when rewriting a table that's being published.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that walreceiver processes create all required archive notification files before exiting",
      "description": "If a walreceiver exited exactly at a WAL segment boundary, it failed to make a notification file for the last-received segment, thus delaying archiving of that segment on the standby.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE` (Masahiko Sawada, Tom Lane) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parser's processing of aggregate `FILTER` clauses",
      "description": "If the `FILTER` expression is a plain boolean column, the semantic level of the aggregate could be mis-determined, leading to not-per-spec behavior. If the `FILTER` expression is itself a boolean-returning aggregate, an error should be thrown but was not, likely resulting in a crash at execution.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the correct lock level is used when renaming a table",
      "description": "For historical reasons, `ALTER INDEX ... RENAME` can be applied to any sort of relation. The lock level required to rename an index is lower than that required to rename a table or other kind of relation, but the code got this wrong and would use the weaker lock level whenever the command is spelled `ALTER INDEX`.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to clean up LLVM state after an error within LLVM",
      "description": "This prevents a likely crash during backend exit after a fatal LLVM error.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export()` or a related function fails (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that scans of SP-GiST indexes are counted in the statistics views",
      "description": "Incrementing the number-of-index-scans counter was overlooked in the SP-GiST code, although per-tuple counters were advanced correctly.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate relevant wait intervals if `recovery_min_apply_delay` is changed during recovery (Soumyadeep Chakraborty, Ashwin Agrawal) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix infinite loop if a `simplehash.h` hash table reaches 2^32 elements",
      "description": "It seems unlikely that this bug has been hit in practice, as it would require `work_mem` settings of hundreds of gigabytes for existing uses of `simplehash.h`.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce memory consumption during calculation of extended statistics (Justin Pryzby, Tomas Vondra) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow setting `huge_pages` to `on` when `shared_memory_type` is `sysv`",
      "description": "Previously, this setting was accepted, but it did nothing for lack of any implementation.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ecpg to recover correctly after `malloc()` failure while establishing a connection (Michael Paquier) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misevaluation of stable functions called in the arguments of a PL/pgSQL `CALL` statement",
      "description": "They were being called with an out-of-date snapshot, so that they would not see any database changes made since the start of the session's top-level command.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine",
      "description": "If the routine does not require an explicit `RETURN`, this usage should be valid, but it was rejected.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove pg\\_ctl's hard-coded limits on the total length of generated commands",
      "description": "For example, this removes a restriction on how many command-line options can be passed through to the postmaster. Individual path names that pg\\_ctl deals with, such as the postmaster executable's name or the data directory name, are still limited to `MAXPGPATH` bytes in most cases.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to dump non-global default privileges correctly",
      "description": "If a global (unrestricted) `ALTER DEFAULT PRIVILEGES` command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted `ALTER DEFAULT PRIVILEGES` command granted that privilege again for a selected role or schema, pg\\_dump failed to dump the restricted privilege grant correctly.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "This oversight was usually pretty harmless, since once pg\\_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "fixedIn": "12.9",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Improve pg\\_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type()`",
      "description": "These changes provide only marginal improvement when dumping from a local server, but a dump from a remote server can benefit substantially due to fewer network round-trips.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in pg\\_dump when attempting to dump trigger definitions from a pre-8.3 server (Tom Lane) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect filename in pg\\_restore's error message about an invalid large object TOC file (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that pgbench exits with non-zero status after a socket-level failure",
      "description": "The desired behavior is to finish out the run but then exit with status 2\\. Also, fix the reporting of such errors.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `\"char\"` (not `` char(_`n`_) ``) columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change `contrib/pg_stat_statements` to read its “query texts” file in units of at most 1GB",
      "description": "Such large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix null-pointer crash when `contrib/postgres_fdw` tries to report a data conversion error (Tom Lane) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add spinlock support for the RISC-V architecture",
      "description": "This is essential for reasonable performance on that platform.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support OpenSSL 3.0.0 (Peter Eisentraut, Daniel Gustafsson, Michael Paquier) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Set correct type identifier on OpenSSL BIO (I/O abstraction) objects created by PostgreSQL",
      "description": "This oversight probably only matters for code that is doing tasks like auditing the OpenSSL installation. But it's nominally a violation of the OpenSSL API, so fix it.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix our `pkg-config` files to again support static linking of libpq (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `pg_regexec()` robust against an out-of-range _`searchstart`_ parameter",
      "description": "Return `REG_NOMATCH`, instead of possibly crashing, when _`searchstart`_ is past the end of the string. This case is probably unreachable within core PostgreSQL, but extensions might be more careless about the parameter value.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `GetSharedSecurityLabel()` can be used in a newly-started session that has not yet built its critical relation cache entries (Jeff Davis) ",
      "description": "",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "When running on Windows, initdb attempts to set the new cluster's `timezone` parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.",
      "description": "Also, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port\\_of\\_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "fixedIn": "12.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parallelized vacuuming of indexes",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Incremental sorting",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make [json\\[b\\]\\_to\\_tsvector()](https://www.postgresql.org/docs/13/functions-textsearch.html#TEXTSEARCH-FUNCTIONS-TABLE \"Table 9.42. Text Search Functions\") fully check the spelling of its `string` option (Dominik Czarnota) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change the way non-default [effective\\_io\\_concurrency](https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-EFFECTIVE-IO-CONCURRENCY) values affect concurrency",
      "description": "Previously, this value was adjusted before setting the number of concurrent requests. The value is now used directly. Conversion of old values to new ones can be done using:\n\nSELECT round(sum(_`OLDVALUE`_ / n::float)) AS newvalue FROM generate_series(1, _`OLDVALUE`_) s(n);",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent display of auxiliary processes in [pg\\_stat\\_ssl](https://www.postgresql.org/docs/13/monitoring-stats.html#PG-STAT-SSL-VIEW \"Table 27.17. pg_stat_ssl View\") and [pg\\_stat\\_gssapi](https://www.postgresql.org/docs/13/monitoring-stats.html#PG-STAT-GSSAPI-VIEW \"Table 27.18. pg_stat_gssapi View\") system views",
      "description": "Queries that join these views to [pg\\_stat\\_activity](https://www.postgresql.org/docs/13/monitoring-stats.html#PG-STAT-ACTIVITY-VIEW \"Table 27.3. pg_stat_activity View\") and wish to see auxiliary processes will need to use left joins.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [ALTER FOREIGN TABLE ... RENAME COLUMN](https://www.postgresql.org/docs/13/sql-alterforeigntable.html \"ALTER FOREIGN TABLE\") to return a more appropriate command tag",
      "description": "Previously it returned `ALTER TABLE`; now it returns `ALTER FOREIGN TABLE`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [ALTER MATERIALIZED VIEW ... RENAME COLUMN](https://www.postgresql.org/docs/13/sql-altermaterializedview.html \"ALTER MATERIALIZED VIEW\") to return a more appropriate command tag",
      "description": "Previously it returned `ALTER TABLE`; now it returns `ALTER MATERIALIZED VIEW`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename configuration parameter `wal_keep_segments` to [wal\\_keep\\_size](https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-WAL-KEEP-SIZE)",
      "description": "This determines how much WAL to retain for standby servers. It is specified in megabytes, rather than number of files as with the old parameter. If you previously used `wal_keep_segments`, the following formula will give you an approximately equivalent setting:\n\nwal_keep_size = wal_keep_segments * wal_segment_size (typically 16MB)",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": [
        "typically 16MB"
      ]
    },
    {
      "title": "Remove support for defining [operator classes](https://www.postgresql.org/docs/13/sql-createopclass.html \"CREATE OPERATOR CLASS\") using pre-PostgreSQL 8.0 syntax (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for defining [foreign key constraints](https://www.postgresql.org/docs/13/sql-altertable.html \"ALTER TABLE\") using pre-PostgreSQL 7.3 syntax (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for \"opaque\" [pseudo-types](https://www.postgresql.org/docs/13/sql-createtype.html \"CREATE TYPE\") used by pre-PostgreSQL 7.3 servers (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for upgrading unpackaged (pre-9.1) extensions",
      "description": "The `FROM` option of [CREATE EXTENSION](https://www.postgresql.org/docs/13/sql-createextension.html \"CREATE EXTENSION\") is no longer supported. Any installations still using unpackaged extensions should upgrade them to a packaged version before updating to PostgreSQL 13.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for `posixrules` files in the timezone database",
      "description": "IANA's timezone group has deprecated this feature, meaning that it will gradually disappear from systems' timezone databases over the next few years. Rather than have a behavioral change appear unexpectedly with a timezone data update, we have removed PostgreSQL's support for this feature as of version 13\\. This affects only the behavior of [POSIX-style time zone specifications](https://www.postgresql.org/docs/13/datetime-posix-timezone-specs.html \"B.5. POSIX Time Zone Specifications\") that lack an explicit daylight savings transition rule; formerly the transition rule could be determined by installing a custom `posixrules` file, but now it is hard-wired. The recommended fix for any affected installations is to start using a geographical time zone name.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In [ltree](https://www.postgresql.org/docs/13/ltree.html \"F.21. ltree\"), when an `lquery` pattern contains adjacent asterisks with braces, e.g., `*{2}.*{3}`, properly interpret that as `*{5}` (Nikita Glukhov) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [pageinspect](https://www.postgresql.org/docs/13/pageinspect.html \"F.22. pageinspect\")'s `bt_metap()` to return more appropriate data types that are less likely to overflow (Peter Geoghegan) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pruning](https://www.postgresql.org/docs/13/ddl-partitioning.html#DDL-PARTITION-PRUNING \"5.11.4. Partition Pruning\") of partitions to happen in more cases (Yuzuko Hosoya, Amit Langote, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [partitionwise joins](https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-PARTITIONWISE-JOIN) to happen in more cases",
      "description": "For example, partitionwise joins can now happen between partitioned tables even when their partition bounds do not match exactly.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support row-level `BEFORE` [triggers](https://www.postgresql.org/docs/13/triggers.html \"Chapter 38. Triggers\") on partitioned tables",
      "description": "However, such a trigger is not allowed to change which partition is the destination.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logical replication into partitioned tables on subscribers",
      "description": "Previously, subscribers could only receive rows into non-partitioned tables.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow whole-row variables (that is, _`table`_`.*`) to be used in partitioning expressions (Amit Langote) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [GiST](https://www.postgresql.org/docs/13/gist.html \"Chapter 64. GiST Indexes\") and [SP-GiST](https://www.postgresql.org/docs/13/spgist.html \"Chapter 65. SP-GiST Indexes\") indexes on `box` columns to support `` ORDER BY _`box`_ <-> _`point`_ `` queries (Nikita Glukhov) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [index operator classes](https://www.postgresql.org/docs/13/sql-createindex.html \"CREATE INDEX\") to take parameters (Nikita Glukhov) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `CREATE INDEX` to specify the GiST signature length and maximum number of integer ranges",
      "description": "Indexes created on four and eight-byte [integer array](https://www.postgresql.org/docs/13/intarray.html \"F.18. intarray\"), [tsvector](https://www.postgresql.org/docs/13/textsearch.html \"Chapter 12. Full Text Search\"), [pg\\_trgm](https://www.postgresql.org/docs/13/pgtrgm.html \"F.31. pg_trgm\"), [ltree](https://www.postgresql.org/docs/13/ltree.html \"F.21. ltree\"), and [hstore](https://www.postgresql.org/docs/13/hstore.html \"F.16. hstore\") columns can now control these GiST index parameters, rather than using the defaults.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow use of multiple extended statistics objects in a single query (Tomas Vondra) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow use of extended statistics objects for OR clauses and [IN](https://www.postgresql.org/docs/13/functions-subquery.html \"9.23. Subquery Expressions\")/`ANY` constant lists (Pierre Ducroquet, Tomas Vondra) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow functions in `FROM` clauses to be pulled up (inlined) if they evaluate to constants (Alexander Kuzmenkov, Aleksandr Parfenov) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Implement [incremental sorting](https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-INCREMENTAL-SORT)",
      "description": "If an intermediate query result is known to be sorted by one or more leading keys of a required sort ordering, the additional sorting can be done considering only the remaining keys, if the rows are sorted in batches that have equal leading keys.\n\nIf necessary, this can be controlled using [enable\\_incremental\\_sort](https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-INCREMENTAL-SORT).",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [hash aggregation](https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-HASHAGG) to use disk storage for large aggregation result sets",
      "description": "Previously, hash aggregation was avoided if it was expected to use more than [work\\_mem](https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-WORK-MEM) memory. Now, a hash aggregation plan can be chosen despite that. The hash table will be spilled to disk if it exceeds `work_mem` times [hash\\_mem\\_multiplier](https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-HASH-MEM-MULTIPLIER).\n\nThis behavior is normally preferable to the old behavior, in which once hash aggregation had been chosen, the hash table would be kept in memory no matter how large it got — which could be very large if the planner had misestimated. If necessary, behavior similar to that can be obtained by increasing `hash_mem_multiplier`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [maintenance\\_io\\_concurrency](https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAINTENANCE-IO-CONCURRENCY) parameter to control I/O concurrency for maintenance operations (Thomas Munro) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow WAL writes to be skipped during a transaction that creates or rewrites a relation, if [wal\\_level](https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-LEVEL) is `minimal`",
      "description": "Relations larger than [wal\\_skip\\_threshold](https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-SKIP-THRESHOLD) will have their files fsync'ed rather than generating WAL. Previously this was done only for `COPY` operations, but the implementation had a bug that could cause data loss during crash recovery.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [EXPLAIN](https://www.postgresql.org/docs/13/sql-explain.html \"EXPLAIN\"), [auto\\_explain](https://www.postgresql.org/docs/13/auto-explain.html \"F.4. auto_explain\"), [autovacuum](https://www.postgresql.org/docs/13/routine-vacuuming.html#AUTOVACUUM \"24.1.6. The Autovacuum Daemon\"), and [pg\\_stat\\_statements](https://www.postgresql.org/docs/13/pgstatstatements.html \"F.29. pg_stat_statements\") to track WAL usage statistics (Kirill Bychik, Julien Rouhaud) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow a sample of SQL statements, rather than all statements, to be logged",
      "description": "A [log\\_statement\\_sample\\_rate](https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-STATEMENT-SAMPLE-RATE) fraction of those statements taking more than [log\\_min\\_duration\\_sample](https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-MIN-DURATION-SAMPLE) duration will be logged.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the backend type to [csvlog](https://www.postgresql.org/docs/13/runtime-config-logging.html \"19.8. Error Reporting and Logging\") and optionally [log\\_line\\_prefix](https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-LINE-PREFIX) log output (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow function call backtraces to be logged after errors",
      "description": "The new parameter [backtrace\\_functions](https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-BACKTRACE-FUNCTIONS) specifies which C functions should generate backtraces on error.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make [vacuum](https://www.postgresql.org/docs/13/sql-vacuum.html \"VACUUM\") buffer counters 64-bits wide to avoid overflow (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `leader_pid` to [pg\\_stat\\_activity](https://www.postgresql.org/docs/13/monitoring-stats.html#PG-STAT-ACTIVITY-VIEW \"Table 27.3. pg_stat_activity View\") to report a parallel worker's leader process (Julien Rouhaud) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_stat\\_progress\\_basebackup](https://www.postgresql.org/docs/13/progress-reporting.html#BASEBACKUP-PROGRESS-REPORTING \"27.4.5. Base Backup Progress Reporting\") to report the progress of streaming base backups (Fujii Masao) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_stat\\_progress\\_analyze](https://www.postgresql.org/docs/13/monitoring-stats.html#MONITORING-STATS-DYNAMIC-VIEWS-TABLE \"Table 27.1. Dynamic Statistics Views\") to report [ANALYZE](https://www.postgresql.org/docs/13/sql-analyze.html \"ANALYZE\") progress (Álvaro Herrera, Tatsuro Yamada, Vinayak Pokale) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_shmem\\_allocations](https://www.postgresql.org/docs/13/view-pg-shmem-allocations.html \"51.87. pg_shmem_allocations\") to display shared memory usage (Andres Freund, Robert Haas) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_stat\\_slru](https://www.postgresql.org/docs/13/monitoring-stats.html#MONITORING-STATS-VIEWS-TABLE \"Table 27.2. Collected Statistics Views\") to monitor internal SLRU caches (Tomas Vondra) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [track\\_activity\\_query\\_size](https://www.postgresql.org/docs/13/runtime-config-statistics.html#GUC-TRACK-ACTIVITY-QUERY-SIZE) to be set as high as 1MB",
      "description": "The previous maximum was 100kB.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a wait event while creating a DSM segment with `posix_fallocate()` (Thomas Munro) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add wait event VacuumDelay to report on cost-based vacuum delay (Justin Pryzby) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add wait events for WAL archive and recovery pause",
      "description": "The new events are BackupWaitWalArchive and RecoveryPause.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add wait events RecoveryConflictSnapshot and RecoveryConflictTablespace to monitor recovery conflicts (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow only superusers to view the [ssl\\_passphrase\\_command](https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-PASSPHRASE-COMMAND) setting",
      "description": "This was changed as a security precaution.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change the server's default minimum TLS version for encrypted connections from 1.0 to 1.2",
      "description": "This choice can be controlled by [ssl\\_min\\_protocol\\_version](https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-MIN-PROTOCOL-VERSION).",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten rules on which utility commands are allowed in read-only transaction mode",
      "description": "This change also increases the number of utility commands that can run in parallel queries.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [allow\\_system\\_table\\_mods](https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-ALLOW-SYSTEM-TABLE-MODS) to be changed after server start (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow non-superusers from modifying system tables when [allow\\_system\\_table\\_mods](https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-ALLOW-SYSTEM-TABLE-MODS) is set",
      "description": "Previously, if [allow\\_system\\_table\\_mods](https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-ALLOW-SYSTEM-TABLE-MODS) was set at server start, non-superusers could issue `INSERT`/`UPDATE`/`DELETE` commands on system tables.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enable support for [Unix-domain sockets](https://www.postgresql.org/docs/13/runtime-config-connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS \"19.3.1. Connection Settings\") on Windows (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow streaming replication configuration settings to be changed by reload",
      "description": "Previously, a server restart was required to change [primary\\_conninfo](https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-PRIMARY-CONNINFO) and [primary\\_slot\\_name](https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-PRIMARY-SLOT-NAME).",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow WAL receivers to use a temporary replication slot when a permanent one is not specified",
      "description": "This behavior can be enabled using [wal\\_receiver\\_create\\_temp\\_slot](https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-WAL-RECEIVER-CREATE-TEMP-SLOT).",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow WAL storage for replication slots to be limited by [max\\_slot\\_wal\\_keep\\_size](https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-MAX-SLOT-WAL-KEEP-SIZE)",
      "description": "Replication slots that would require exceeding this value are marked invalid.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [standby promotion](https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-PROMOTE-TRIGGER-FILE) to cancel any requested pause",
      "description": "Previously, promotion could not happen while the standby was in paused state.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Generate an error if recovery does not reach the specified [recovery target](https://www.postgresql.org/docs/13/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET \"19.5.5. Recovery Target\")",
      "description": "Previously, a standby would promote itself upon reaching the end of WAL, even if the target was not reached.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control over how much memory is used by logical decoding before it is spilled to disk",
      "description": "This is controlled by [logical\\_decoding\\_work\\_mem](https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-LOGICAL-DECODING-WORK-MEM).",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow recovery to continue even if invalid pages are referenced by WAL",
      "description": "This is enabled using [ignore\\_invalid\\_pages](https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-IGNORE-INVALID-PAGES).",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [VACUUM](https://www.postgresql.org/docs/13/sql-vacuum.html \"VACUUM\") to process a table's indexes in parallel",
      "description": "The new `PARALLEL` option controls this.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [FETCH FIRST](https://www.postgresql.org/docs/13/sql-select.html#SQL-LIMIT \"LIMIT Clause\") to use `WITH TIES` to return any additional rows that match the last result row (Surafel Temesgen) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report planning-time buffer usage in [EXPLAIN](https://www.postgresql.org/docs/13/sql-explain.html \"EXPLAIN\")'s `BUFFER` output (Julien Rouhaud) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make [CREATE TABLE LIKE](https://www.postgresql.org/docs/13/sql-createtable.html \"CREATE TABLE\") propagate a `CHECK` constraint's `NO INHERIT` property to the created table (Ildar Musin, Chris Travers) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When using [LOCK TABLE](https://www.postgresql.org/docs/13/sql-lock.html \"LOCK\") on a partitioned table, do not check permissions on the child tables (Amit Langote) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [OVERRIDING USER VALUE](https://www.postgresql.org/docs/13/sql-insert.html \"INSERT\") on inserts into identity columns (Dean Rasheed) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [ALTER TABLE ... DROP EXPRESSION](https://www.postgresql.org/docs/13/sql-altertable.html \"ALTER TABLE\") to allow removing the `GENERATED` property from a column (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in multi-step `ALTER TABLE` commands",
      "description": "`IF NOT EXISTS` clauses now work as expected, in that derived actions (such as index creation) do not execute if the column already exists. Also, certain cases of combining related actions into one `ALTER TABLE` now work when they did not before.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [ALTER VIEW](https://www.postgresql.org/docs/13/sql-alterview.html \"ALTER VIEW\") syntax to rename view columns",
      "description": "Renaming view columns was already possible, but one had to write `ALTER TABLE RENAME COLUMN`, which is confusing.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [ALTER TYPE](https://www.postgresql.org/docs/13/sql-altertype.html \"ALTER TYPE\") options to modify a base type's TOAST properties and support functions (Tomas Vondra, Tom Lane) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [CREATE DATABASE](https://www.postgresql.org/docs/13/sql-createdatabase.html \"CREATE DATABASE\") `LOCALE` option",
      "description": "This combines the existing options `LC_COLLATE` and `LC_CTYPE` into a single option.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [DROP DATABASE](https://www.postgresql.org/docs/13/sql-dropdatabase.html \"DROP DATABASE\") to disconnect sessions using the target database, allowing the drop to succeed",
      "description": "This is enabled by the `FORCE` option.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add structure member [tg\\_updatedcols](https://www.postgresql.org/docs/13/trigger-interface.html \"38.3. Writing Trigger Functions in C\") to allow C-language update triggers to know which column(s) were updated (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add polymorphic data types for use by functions requiring compatible arguments",
      "description": "The new data types are [anycompatible](https://www.postgresql.org/docs/13/datatype-pseudo.html#DATATYPE-PSEUDOTYPES-TABLE \"Table 8.27. Pseudo-Types\"), `anycompatiblearray`, `anycompatiblenonarray`, and `anycompatiblerange`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL data type [xid8](https://www.postgresql.org/docs/13/datatype-oid.html \"8.19. Object Identifier Types\") to expose FullTransactionId",
      "description": "The existing `xid` data type is only four bytes so it does not provide the transaction epoch.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add data type [regcollation](https://www.postgresql.org/docs/13/datatype-oid.html \"8.19. Object Identifier Types\") and associated functions, to represent OIDs of collation objects (Julien Rouhaud) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the glibc version in some cases as a [collation](https://www.postgresql.org/docs/13/collation.html \"23.2. Collation Support\") version identifier",
      "description": "If the glibc version changes, a warning will be issued about possible corruption of collation-dependent indexes.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for collation versions on Windows (Thomas Munro) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [ROW expressions](https://www.postgresql.org/docs/13/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS \"4.2.13. Row Constructors\") to have their members extracted with suffix notation",
      "description": "For example, `(ROW(4, 5.0)).f1` now returns 4.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add jsonpath [.datetime()](https://www.postgresql.org/docs/13/functions-json.html#FUNCTIONS-SQLJSON-PATH-OPERATORS \"9.16.2.2. SQL/JSON Path Operators and Methods\") method",
      "description": "This function allows JSON values to be converted to timestamps, which can then be processed in `jsonpath` expressions. This change also adds `jsonpath` functions that support time-zone-aware output.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL functions [NORMALIZE()](https://www.postgresql.org/docs/13/functions-string.html#FUNCTIONS-STRING-SQL \"Table 9.9. SQL String Functions and Operators\") to normalize Unicode strings, and [IS NORMALIZED](https://www.postgresql.org/docs/13/collation.html#COLLATION-NONDETERMINISTIC \"23.2.2.4. Nondeterministic Collations\") to check for normalization (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `min()` and `max()` aggregates for [pg\\_lsn](https://www.postgresql.org/docs/13/datatype-pg-lsn.html \"8.20. pg_lsn Type\")",
      "description": "These are particularly useful in monitoring queries.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [Unicode escapes](https://www.postgresql.org/docs/13/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-UESCAPE \"4.1.2.3. String Constants with Unicode Escapes\"), e.g., `` E'\\u_`nnnn`_' `` or `` U&'\\_`nnnn`_' ``, to specify any character available in the database encoding, even when the database encoding is not UTF\\-8 (Tom Lane) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [to\\_date()](https://www.postgresql.org/docs/13/functions-formatting.html \"9.8. Data Type Formatting Functions\") and `to_timestamp()` to recognize non-English month/day names",
      "description": "The names recognized are the same as those output by [to\\_char()](https://www.postgresql.org/docs/13/functions-formatting.html \"9.8. Data Type Formatting Functions\") with the same format patterns.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add datetime format patterns `FF1` – `FF6` to specify input or output of 1 to 6 fractional-second digits",
      "description": "These patterns can be used by `to_char()`, `to_timestamp()`, and jsonpath's .`datetime()`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `SSSSS` datetime format pattern as an SQL\\-standard alias for `SSSS` (Nikita Glukhov, Alexander Korotkov) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [gen\\_random\\_uuid()](https://www.postgresql.org/docs/13/functions-uuid.html \"9.14. UUID Functions\") to generate version-4 UUIDs",
      "description": "Previously UUID generation functions were only available in the external modules [uuid-ossp](https://www.postgresql.org/docs/13/uuid-ossp.html \"F.44. uuid-ossp\") and [pgcrypto](https://www.postgresql.org/docs/13/pgcrypto.html \"F.25. pgcrypto\").",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add greatest-common-denominator ([gcd](https://www.postgresql.org/docs/13/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE \"Table 9.5. Mathematical Functions\")) and least-common-multiple (`lcm`) functions (Vik Fearing) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [min\\_scale()](https://www.postgresql.org/docs/13/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE \"Table 9.5. Mathematical Functions\") that returns the number of digits to the right of the decimal point that are required to represent a `numeric` value with full accuracy (Pavel Stehule) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add commutators of [distance operators](https://www.postgresql.org/docs/13/functions-geometry.html#FUNCTIONS-GEOMETRY-OP-TABLE \"Table 9.35. Geometric Operators\")",
      "description": "For example, previously only `point` `<->` `line` was supported, now `line` `<->` `point` works too.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Create `xid8` versions of all [transaction ID functions](https://www.postgresql.org/docs/13/functions-info.html#FUNCTIONS-PG-SNAPSHOT \"Table 9.74. Transaction ID and Snapshot Information Functions\")",
      "description": "The old `xid`\\-based functions still exist, for backward compatibility.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [get\\_bit()](https://www.postgresql.org/docs/13/functions-binarystring.html#FUNCTIONS-BINARYSTRING-OTHER \"Table 9.12. Other Binary String Functions\") and `set_bit()` to set bits beyond the first 256MB of a `bytea` value (Movead Li) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [advisory-lock functions](https://www.postgresql.org/docs/13/functions-admin.html#FUNCTIONS-ADVISORY-LOCKS \"9.27.10. Advisory Lock Functions\") to be used in some parallel operations (Tom Lane) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the ability to remove an object's dependency on an extension",
      "description": "The object can be a function, materialized view, index, or trigger. The syntax is `ALTER .. NO DEPENDS ON`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow libpq clients to require channel binding for encrypted connections",
      "description": "Using the libpq connection parameter [channel\\_binding](https://www.postgresql.org/docs/13/libpq-connect.html#LIBPQ-CONNECT-CHANNEL-BINDING) forces the other end of the TLS connection to prove it knows the user's password. This prevents man-in-the-middle attacks.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq connection parameters to control the minimum and maximum TLS version allowed for an encrypted connection",
      "description": "The settings are [ssl\\_min\\_protocol\\_version](https://www.postgresql.org/docs/13/libpq-connect.html#LIBPQ-CONNECT-SSL-MIN-PROTOCOL-VERSION) and [ssl\\_max\\_protocol\\_version](https://www.postgresql.org/docs/13/libpq-connect.html#LIBPQ-CONNECT-SSL-MAX-PROTOCOL-VERSION). By default, the minimum TLS version is 1.2 (this represents a behavioral change from previous releases).",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow use of passwords to unlock client certificates",
      "description": "This is enabled by libpq's [sslpassword](https://www.postgresql.org/docs/13/libpq-connect.html#LIBPQ-CONNECT-SSLPASSWORD) connection parameter.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow libpq to use DER\\-encoded client certificates (Craig Ringer, Andrew Dunstan) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ecpg's `EXEC SQL elif` directive to work correctly",
      "description": "Previously it behaved the same as `endif` followed by `ifdef`, so that a successful previous branch of the same `if` construct did not prevent expansion of the `elif` branch or following branches.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add transaction status (`%x`) to psql's default [prompts](https://www.postgresql.org/docs/13/app-psql.html#APP-PSQL-PROMPTING \"Prompting\") (Vik Fearing) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the secondary psql prompt to be blank but the same width as the primary prompt",
      "description": "This is accomplished by setting `PROMPT2` to `%w`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql's [\\\\g](https://www.postgresql.org/docs/13/app-psql.html#APP-PSQL-META-COMMANDS \"Meta-Commands\") and `\\gx` commands to change [\\\\pset](https://www.postgresql.org/docs/13/app-psql.html#APP-PSQL-META-COMMANDS \"Meta-Commands\") output options for the duration of that single command",
      "description": "This feature allows syntax like `\\g (expand=on)`, which is equivalent to `\\gx`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Show table persistence in psql's [\\\\dt+](https://www.postgresql.org/docs/13/app-psql.html#APP-PSQL-META-COMMANDS \"Meta-Commands\") and related commands",
      "description": "In verbose mode, the table/index/view shows if the object is permanent, temporary, or unlogged.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix redisplay after psql's [\\\\e](https://www.postgresql.org/docs/13/app-psql.html#APP-PSQL-META-COMMANDS \"Meta-Commands\") command",
      "description": "When exiting the editor, if the query doesn't end with a semicolon or `\\g`, the query buffer contents will now be displayed.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [\\\\warn](https://www.postgresql.org/docs/13/app-psql.html#APP-PSQL-META-COMMANDS \"Meta-Commands\") command to psql",
      "description": "This is like `\\echo` except that the text is sent to stderr instead of stdout.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the PostgreSQL home page to command-line `--help` output (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add pgbench command `\\aset`, which behaves like `\\gset`, but for multiple queries (Fabien Coelho) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pgbench to generate its initial data server-side, rather than client-side (Fabien Coelho) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pgbench to show script contents using option `--show-script` (Fabien Coelho) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [pg\\_basebackup](https://www.postgresql.org/docs/13/app-pgbasebackup.html \"pg_basebackup\") estimate the total backup size by default",
      "description": "This computation allows [pg\\_stat\\_progress\\_basebackup](https://www.postgresql.org/docs/13/monitoring-stats.html#MONITORING-STATS-DYNAMIC-VIEWS-TABLE \"Table 27.1. Dynamic Statistics Views\") to show progress. If that is not needed, it can be disabled by using the `--no-estimate-size` option. Previously, this computation happened only if the `--progress` option was used.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add an option to [pg\\_rewind](https://www.postgresql.org/docs/13/app-pgrewind.html \"pg_rewind\") to configure standbys",
      "description": "This matches [pg\\_basebackup](https://www.postgresql.org/docs/13/app-pgbasebackup.html \"pg_basebackup\")'s `--write-recovery-conf` option.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pg\\_rewind to use the target cluster's [restore\\_command](https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RESTORE-COMMAND) to retrieve needed WAL",
      "description": "This is enabled using the `-c`/`--restore-target-wal` option.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have pg\\_rewind automatically run crash recovery before rewinding",
      "description": "This can be disabled by using `--no-ensure-shutdown`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Increase the [PREPARE TRANSACTION](https://www.postgresql.org/docs/13/sql-prepare-transaction.html \"PREPARE TRANSACTION\")\\-related information reported by pg\\_waldump (Fujii Masao) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_waldump](https://www.postgresql.org/docs/13/pgwaldump.html \"pg_waldump\") option `--quiet` to suppress non-error output (Andres Freund, Robert Haas) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_dump](https://www.postgresql.org/docs/13/app-pgdump.html \"pg_dump\") option `--include-foreign-data` to dump data from foreign servers (Luis Carril) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow vacuum commands run by [vacuumdb](https://www.postgresql.org/docs/13/app-vacuumdb.html \"vacuumdb\") to operate in parallel mode",
      "description": "This is enabled with the new `--parallel` option.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [reindexdb](https://www.postgresql.org/docs/13/app-reindexdb.html \"reindexdb\") to operate in parallel",
      "description": "Parallel mode is enabled with the new `--jobs` option.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [dropdb](https://www.postgresql.org/docs/13/app-dropdb.html \"dropdb\") to disconnect sessions using the target database, allowing the drop to succeed",
      "description": "This is enabled with the `-f` option.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove `--adduser` and `--no-adduser` from [createuser](https://www.postgresql.org/docs/13/app-createuser.html \"createuser\")",
      "description": "The long-supported preferred options for this are called `--superuser` and `--no-superuser`.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the directory of the [pg\\_upgrade](https://www.postgresql.org/docs/13/pgupgrade.html \"pg_upgrade\") program as the default `--new-bindir` setting when running pg\\_upgrade (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add a [glossary](https://www.postgresql.org/docs/13/glossary.html \"Appendix M. Glossary\") to the documentation (Corey Huinker, Jürgen Purtz, Roger Harkavy, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Upgrade to use [DocBook 4.5](https://www.postgresql.org/docs/13/docguide-docbook.html \"J.1. DocBook\") (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for building on Visual Studio 2019 (Haribabu Kommi) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add build support for MSYS2 (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add compare\\_exchange and fetch\\_add assembly language code for Power PC compilers (Noah Misch) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for Windows 2000 (Michael Paquier) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for non-ELF BSD systems (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove [support](https://www.postgresql.org/docs/13/plpython.html \"Chapter 45. PL/Python — Python Procedural Language\") for Python versions 2.5.X and earlier (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove [support](https://www.postgresql.org/docs/13/install-short.html \"16.1. Short Version\") for OpenSSL 0.9.8 and 1.0.0 (Michael Paquier) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove [configure](https://www.postgresql.org/docs/13/install-short.html \"16.1. Short Version\") options `--disable-float8-byval` and `--disable-float4-byval`",
      "description": "These were needed for compatibility with some version-zero C functions, but those are no longer supported.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Pass the query string to planner hook functions (Pascal Legrand, Julien Rouhaud) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [TRUNCATE](https://www.postgresql.org/docs/13/sql-truncate.html \"TRUNCATE\") command hook (Yuli Khodorkovskiy) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add TLS init hook (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow building with no predefined Unix-domain socket directory (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use operating system functions to reliably erase memory that contains sensitive information",
      "description": "For example, this is used for clearing passwords stored in memory.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `headerscheck` script to test C header-file compatibility (Tom Lane) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change the API for `TS_execute()`",
      "description": "`TS_execute` callbacks must now provide ternary (yes/no/maybe) logic. Calculating NOT queries accurately is now the default.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [extensions](https://www.postgresql.org/docs/13/sql-createextension.html \"CREATE EXTENSION\") to be specified as trusted",
      "description": "Such extensions can be installed in a database by users with database-level `CREATE` privileges, even if they are not superusers. This change also removes the `pg_pltemplate` system catalog.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow non-superusers to connect to [postgres\\_fdw](https://www.postgresql.org/docs/13/postgres-fdw.html \"F.33. postgres_fdw\") foreign servers without using a password",
      "description": "Specifically, allow a superuser to set `password_required` to false for a [user mapping](https://www.postgresql.org/docs/13/sql-alterusermapping.html \"ALTER USER MAPPING\"). Care must still be taken to prevent non-superusers from using superuser credentials to connect to the foreign server.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow postgres\\_fdw to use certificate authentication",
      "description": "Different users can use different certificates.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [sepgsql](https://www.postgresql.org/docs/13/sepgsql.html \"F.35. sepgsql\") to control access to the `TRUNCATE` command (Yuli Khodorkovskiy) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add extension [bool\\_plperl](https://www.postgresql.org/docs/13/plperl.html \"Chapter 44. PL/Perl — Perl Procedural Language\") which transforms SQL booleans to/from PL/Perl booleans (Ivan Panchenko) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [pg\\_stat\\_statements](https://www.postgresql.org/docs/13/pgstatstatements.html \"F.29. pg_stat_statements\") treat `SELECT ... FOR UPDATE` commands as distinct from those without `FOR UPDATE` (Andrew Gierth, Vik Fearing) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pg\\_stat\\_statements to optionally track the planning time of statements",
      "description": "Previously only execution time was tracked.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Overhaul [ltree](https://www.postgresql.org/docs/13/ltree.html \"F.21. ltree\")'s lquery syntax to treat `NOT` (!) more logically",
      "description": "Also allow non-\\* queries to use a numeric range ({}) of matches.",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for binary I/O of [ltree](https://www.postgresql.org/docs/13/ltree.html \"F.21. ltree\"), lquery, and ltxtquery types (Nino Floris) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add an option to [dict\\_int](https://www.postgresql.org/docs/13/dict-int.html \"F.11. dict_int\") to ignore the sign of integers (Jeff Janes) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [adminpack](https://www.postgresql.org/docs/13/adminpack.html \"F.1. adminpack\") function `pg_file_sync()` to allow fsync'ing a file (Fujii Masao) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pageinspect](https://www.postgresql.org/docs/13/pageinspect.html \"F.22. pageinspect\") functions to output `t_infomask`/`t_infomask2` values in human-readable format (Craig Ringer, Sawada Masahiko, Michael Paquier) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add B-tree index de-duplication processing columns to pageinspect output (Peter Geoghegan) ",
      "description": "",
      "fixedIn": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unintended breakage of the replication protocol",
      "description": "A walsender reports two command-completion events for `START_REPLICATION`. This was undocumented and apparently unintentional; so we failed to notice that a late 13.0 change removed the duplicate event. However it turns out that walreceivers require the extra event in some code paths. The most practical fix is to decree that the extra event is part of the protocol and resume generating it.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that SLRU directories are properly fsync'd during checkpoints",
      "description": "This prevents possible data loss in a subsequent operating system crash.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER ROLE` for users with the `BYPASSRLS` attribute",
      "description": "The `BYPASSRLS` attribute is only allowed to be changed by superusers, but other `ALTER ROLE` operations, such as password changes, should be allowed with only ordinary permission checks. The previous coding erroneously restricted all changes on such a role to superusers.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER TABLE ONLY ... DROP EXPRESSION` when there are child tables",
      "description": "The current implementation cannot handle this case correctly, so just forbid it for now.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `ALTER TABLE ONLY ... ENABLE/DISABLE TRIGGER` does not recurse to child tables",
      "description": "Previously the `ONLY` flag was ignored.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `LOCK TABLE` to succeed on a self-referential view",
      "description": "It previously threw an error complaining about infinite recursion, but there seems no need to disallow the case.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Retain statistics about an index across `REINDEX CONCURRENTLY`",
      "description": "Non-concurrent reindexing has always preserved such statistics.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect progress reporting from `REINDEX CONCURRENTLY` (Matthias van de Meent, Michael Paquier) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `GENERATED` columns are updated when the column(s) they depend on are updated via a rule or an updatable view",
      "description": "This fix also takes care of possible failure to fire a column-specific trigger in such cases.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failures with collation-dependent partition bound expressions (Tom Lane) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support hashing of text arrays",
      "description": "Array hashing failed if the array element type is collatable. Notably, this prevented using hash partitioning with a text array column as partition key.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent internal overflows in cross-type datetime comparisons",
      "description": "Previously, comparing a date to a timestamp would fail if the date is past the valid range for timestamps. There were also corner cases involving overflow of close-to-the-limit timestamp values during timezone rotation.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix off-by-one conversion of negative years to BC dates in `to_date()` and `to_timestamp()`",
      "description": "Also, arrange for the combination of a negative year and an explicit “BC” marker to cancel out and produce AD.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the `jsonpath` `.datetime()` method to accept ISO 8601-format timestamps",
      "description": "This is not required by SQL, but it seems appropriate since our `to_json()` functions generate that timestamp format for Javascript compatibility.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that standby servers will archive WAL timeline history files when `archive_mode` is set to `always`",
      "description": "This oversight could lead to failure of subsequent PITR recovery attempts.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge cases in detecting premature death of the postmaster on platforms that use `kqueue()` (Thomas Munro) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating an incorrect incremental-sort plan when the sort key is a volatile expression (James Coleman) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible crash when considering partition-wise joins during GEQO planning (Tom Lane) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible infinite loop or corrupted output data in TOAST decompression (Tom Lane) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix counting of the number of entries in B-tree indexes during cleanup-only `VACUUM`s (Peter Geoghegan) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that data is detoasted before being inserted into a BRIN index",
      "description": "Index entries are not supposed to contain out-of-line TOAST pointers, but BRIN didn't get that memo. This could lead to errors like “missing chunk number 0 for toast value NNN”. (If you are faced with such an error from an existing index, `REINDEX` should be enough to fix it.)",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": [
        "If you are faced with such an error from an existing index",
        "`REINDEX` should be enough to fix it."
      ]
    },
    {
      "title": "Fix buffered GiST index builds to work when the index has included columns (Pavel Borisov) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unportable use of `getnameinfo()` in `pg_hba_file_rules` view",
      "description": "On FreeBSD 11, and possibly other platforms, the view's `address` and `netmask` columns were always null due to this error.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash if `debug_query_string` is NULL when starting a parallel worker (Noah Misch) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failures when a `BEFORE ROW UPDATE` trigger returns the “old” row of a table having dropped or “missing” columns",
      "description": "This method of suppressing an update could result in crashes, unexpected `CHECK` constraint failures, or incorrect `RETURNING` output, because “missing” columns would read as NULLs for those purposes. (A column is “missing” for this purpose if it was added by `ALTER TABLE ADD COLUMN` with a non-NULL, but constant, default value.) Dropped columns could cause trouble as well.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s output for incremental sort plans to have correct tag nesting in XML output mode (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary failure when transferring very large payloads through shared memory queues (Markus Wanner) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix omission of result data type coercion in some cases in SQL-language functions",
      "description": "This could lead to wrong results or crashes, depending on the data types involved.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect handling of template function attributes in JIT code generation",
      "description": "This has been shown to cause crashes on `s390x`, and very possibly there are other cases on other platforms.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve code generated for compare\\_exchange and fetch\\_add operations on PPC (Noah Misch) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix relation cache memory leaks with RLS policies (Tom Lane) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case memory leak in `index_get_partition()` (Justin Pryzby) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix small memory leak when SIGHUP processing decides that a new GUC variable value cannot be applied without a restart (Tom Lane) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leaks in PL/pgsql's `CALL` processing (Pavel Stehule, Tom Lane) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In libpq for Windows, call `WSAStartup()` once per process and `WSACleanup()` not at all",
      "description": "Previously, libpq invoked `WSAStartup()` at connection start and `WSACleanup()` at connection cleanup. However, it appears that calling `WSACleanup()` can interfere with other program operations; notably, we have observed rare failures to emit expected output to stdout. There appear to be no ill effects from omitting the call, so do that. (This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections.)",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": [
        "This also eliminates a performance issue from repeated DLL loads and unloads when a program performs a series of database connections."
      ]
    },
    {
      "title": "Fix ecpg library's per-thread initialization logic for Windows",
      "description": "Multi-threaded ecpg applications could suffer rare misbehavior due to incorrect locking.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ecpg's mis-processing of `B'...'` and `X'...'` literals (Shenhao Wang) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, make psql read the output of a backtick command in text mode, not binary mode",
      "description": "This ensures proper handling of newlines.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that pg\\_dump collects per-column information about extension configuration tables",
      "description": "Failure to do this led to crashes when specifying `--inserts`, or underspecified (though usually correct) `COPY` commands when using `COPY` to reload the tables' data.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_upgrade check for pre-existence of tablespace directories in the target cluster (Bruce Momjian) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix potential memory leak in `contrib/pgcrypto` (Michael Paquier) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add check for an unlikely failure case in `contrib/pgcrypto` (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix recently-added `timetz` test case so it works when the USA is not observing daylight savings time (Tom Lane) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2020d for DST law changes in Fiji, Morocco, Palestine, the Canadian Yukon, Macquarie Island, and Casey Station (Antarctica); plus historical corrections for France, Hungary, Monaco, and Palestine. (Tom Lane) ",
      "description": "",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Sync our copy of the timezone library with IANA tzcode release 2020d",
      "description": "This absorbs upstream's change of zic's default output option from “fat” to “slim”. That's just cosmetic for our purposes, as we continue to select the “fat” mode in pre-v13 branches. This change also ensures that `strftime()` does not change `errno` unless it fails.",
      "fixedIn": "13.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix calculation of which `GENERATED` columns need to be updated in child tables during an `UPDATE` on a partitioned table or inheritance tree",
      "description": "This fixes failure to update `GENERATED` columns that do not exist in the parent table, or that have different dependencies than are in the parent column's generation expression.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid",
      "description": "When pg\\_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an `INSERT` from a multi-row `VALUES` list",
      "description": "In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject uses of undefined variables in `jsonpath` existence checks",
      "description": "While `jsonpath` match operators threw an error for an undefined variable in the path pattern, the existence operators silently treated it as a match.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Honor non-default settings of `checkpoint_completion_target`",
      "description": "Internal state was not updated after a change in `checkpoint_completion_target`, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Log the correct ending timestamp in `recovery_target_xid` mode",
      "description": "When ending recovery based on the `recovery_target_xid` setting with `recovery_target_inclusive` \\= `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve error reporting for some buffered file read failures",
      "description": "Correctly report a short read, giving the numbers of bytes desired and actually read, instead of reporting an irrelevant error code. Most places got this right already, but some recently-written replication logic did not.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent “wrong tuple length” failure at the end of `VACUUM`",
      "description": "This occurred if `VACUUM` needed to update the current database's `datfrozenxid` value and the database has so many granted privileges that its `datacl` value has been pushed out-of-line.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after `ANALYZE` if we're running a pipeline",
      "description": "If there's not been an explicit `BEGIN TRANSACTION`, `ANALYZE` would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "This could result in “could not devise a query plan for the given query” errors.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range`",
      "description": "Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "fixedIn": "13.10",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches (Tom Lane) ",
      "description": "",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in hashing strings with nondeterministic collations (Jeff Davis) ",
      "description": "",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as `CREATE SUBSCRIPTION`, such a failure resulted in a small session-lifespan memory leak.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when `max_connections` is set to a large value on the standby.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore invalidated logical-replication slots while determining oldest catalog xmin",
      "description": "A replication slot could prevent cleanup of dead tuples in the system catalogs even after it becomes invalidated due to exceeding `max_slot_wal_keep_size`. Thus, failure of a replication consumer could lead to indefinitely-large catalog bloat.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations (Robert Haas) ",
      "description": "",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent unsafe usage of a relation cache entry's `rd_smgr` pointer",
      "description": "Remove various assumptions that `rd_smgr` would stay valid over a series of operations, by wrapping all uses of it in a function that will recompute it if needed. This prevents bugs occurring when an unexpected cache flush occurs partway through such a series.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "The `epoll`\\-based and `kqueue`\\-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove faulty assertion in useless-RESULT-RTE optimization logic (Tom Lane) ",
      "description": "",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, avoid calling unsafe server functions before we have locks on the tables to be examined",
      "description": "pg\\_dump uses certain server functions that can fail if examining a table that gets dropped concurrently. Avoid this type of failure by ensuring that we obtain access share lock before inquiring too deeply into a table's properties, and that we don't apply such functions to tables we don't intend to dump at all.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix tab completion of `ALTER FUNCTION/PROCEDURE/ROUTINE` ... `SET SCHEMA` (Dean Rasheed) ",
      "description": "",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/seg` to not crash or print garbage if an input number has more than 127 digits (Tom Lane) ",
      "description": "",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/sepgsql`, avoid deprecation warnings with recent libselinux (Michael Paquier) ",
      "description": "",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix build on Microsoft Visual Studio 2013",
      "description": "A previous patch supposed that all platforms of interest have `snprintf()`, but MSVC 2013 isn't quite there yet. Revert to using `sprintf()` on that platform.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_waldump to build on compilers that don't discard unused static-inline functions (Tom Lane) ",
      "description": "",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.",
      "description": "Notably, a new timezone America/Ciudad\\_Juarez has been split off from America/Ojinaga.",
      "fixedIn": "13.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash when the new schema name is omitted in `CREATE SCHEMA`",
      "description": "The SQL standard allows writing `` CREATE SCHEMA AUTHORIZATION _`ownername`_ ``, with the schema name defaulting to _`ownername`_. However some code paths expected the schema name to be present and would fail.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix enabling/disabling of cloned triggers in partitioned tables",
      "description": "`ALTER TABLE ... ENABLE/DISABLE TRIGGER USER` skipped cloned triggers, mistaking them for system triggers. Other variants of `ENABLE/DISABLE TRIGGER` would process them, but only after improperly enforcing a superuserness check.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "`ALTER TYPE` disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow system columns as elements of foreign keys",
      "description": "Since the removal of OID as a system column, there is no plausible use-case for this, and various bits of code no longer support it. Disallow it rather than trying to fix all the cases.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `COPY TO` from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "The documentation is quite clear that `COPY TO` copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible crash when `array_position()` or `array_positions()` is passed an empty array (Tom Lane) ",
      "description": "",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char()`",
      "description": "With bad luck this could have resulted in a server crash.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid buffer overread in `translate()` function",
      "description": "When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data corruption due to `vacuum_defer_cleanup_age` being larger than the current 64-bit xid",
      "description": "In v14 and later with non-default settings of `vacuum_defer_cleanup_age`, it was possible to compute a very large vacuum cleanup horizon xid, leading to vacuum removing rows that are still live. v12 and v13 have a lesser form of the same problem affecting only GiST indexes, which could lead to index pages getting recycled too early.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent crash when updating a field within an array-of-domain-over-composite-type column (Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "A crash was possible given unlucky timing and `parallel_leader_participation` \\= `off` (which is not the default).",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate `GENERATED` columns after an EvalPlanQual check",
      "description": "In `READ COMMITTED` isolation mode, the effects of a row update might need to get reapplied to a newer version of the row than the query found originally. If so, we need to recompute any `GENERATED` columns, in case they depend on columns that were changed by the concurrent update.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation `vacuum_cost_delay` setting of zero",
      "description": "Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation `vacuum_cost_delay` setting, but this was done only for positive settings, not zero.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane) ",
      "description": "",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair rare failure of MULTIEXPR\\_SUBLINK subplans in partitioned updates",
      "description": "Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When decompiling a rule or SQL function body containing `INSERT`/`UPDATE`/`DELETE` within `WITH`, take care to print the correct alias for the target table (Tom Lane) ",
      "description": "",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache\\_callback\\_list slots” error.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary calls to custom validators for index operator class options",
      "description": "This change fixes some cases where an unexpected error was thrown.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore dropped columns and generated columns during logical replication of an update or delete action",
      "description": "Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correct the name of the wait event for SLRU buffer I/O for commit timestamps",
      "description": "This wait event is named `CommitTsBuffer` according to the documentation, but the code had it as `CommitTSBuffer`. Change the code to match the documentation, as that way is more consistent with the naming of related wait events.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible underflow when calculating how many WAL segments to keep",
      "description": "This could result in not honoring `wal_keep_size` accurately.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add missing cases to `SPI_result_code_string()` (Dean Rasheed) ",
      "description": "",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc()`",
      "description": "In the unusual case where the size of a large (>8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message (Tomas Vondra) ",
      "description": "",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range()` when the last few pages in the specified range are empty",
      "description": "It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions (Ajit Awekar, Tom Lane) ",
      "description": "",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Some rare failure cases could return without cleaning up the PG\\_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll()`",
      "description": "With `gssencmode` set to `require`, the connection was not marked dead after a GSS initialization failure. Make it fail immediately, as the equivalent case for TLS encryption has long done.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the `-C ORACLE` option",
      "description": "When `ecpg_get_data()` is called with `varcharsize` set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the `--load-via-partition-root` option; but since there is very little chance of success without that, teach pg\\_dump to apply it automatically to such tables.\n\nAlso, fix pg\\_restore to not try to `TRUNCATE` target tables before restoring into them when `--load-via-partition-root` mode is used. This avoids a hazard of deadlocks and lost data.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/hstore_plpython`, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require the `siglen` option of a GiST index on an `ltree` column, if specified, to be a multiple of 4",
      "description": "Other values result in misaligned accesses to index content, which is harmless on Intel-compatible hardware but can cause a crash on some other architectures.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior in `contrib/pg_trgm` with an unsatisfiable regular expression",
      "description": "A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg\\_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the `--strip-unneeded` option when stripping static libraries with GNU-compatible strip",
      "description": "Previously, `make install-strip` used the `-x` option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's `--nonet` option to the build recipes.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary `portlock` directory",
      "description": "Place it under `tmp_check` in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.",
      "description": "When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "fixedIn": "13.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries",
      "description": "Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n\nThis fix will not in itself correct faulty BRIN entries. It's recommended to `REINDEX` any BRIN indexes that may be used to search for nulls.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaving a corrupted database behind when `DROP DATABASE` is interrupted",
      "description": "If `DROP DATABASE` was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its `pg_database` row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another `DROP DATABASE`.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during `ALTER TABLE ATTACH PARTITION`",
      "description": "Such an index will now be ignored, and a new child index created instead.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "The update of the index's `pg_index` entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER EXTENSION SET SCHEMA` to complain if the extension contains any objects outside the extension's schema",
      "description": "Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "fixedIn": "13.12",
      "significant": true,
      "contributors": [
        "A better solution will require ABI-breaking changes of planner data structures",
        "so it will have to wait for a future major release."
      ]
    },
    {
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions (Tom Lane) ",
      "description": "",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop",
      "description": "When rescanning the join after the values of such Params have changed, we must rebuild the hash table, but neglected to do so. This could result in missing join output rows.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent query-lifespan memory leaks in some `UPDATE` queries with triggers (Tomas Vondra) ",
      "description": "",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent query-lifespan memory leaks when an Incremental Sort plan node is rescanned (James Coleman, Laurenz Albe, Tom Lane) ",
      "description": "",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Accept fractional seconds in the input to `jsonpath`'s `datetime()` method (Tom Lane) ",
      "description": "",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns (Tom Lane) ",
      "description": "",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow tokens up to 10240 bytes long in `pg_hba.conf` and `pg_ident.conf`",
      "description": "The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "If JIT is in use, running out of memory in a C++ `new` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix rare null-pointer crash in `plancache.c` (Tom Lane) ",
      "description": "",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `VACUUM` to continue after detecting certain types of b-tree index corruption",
      "description": "If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of `REINDEX` will fix the broken index, but preventing `VACUUM` from completing until that is done risks making matters far worse.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `WrapLimitsVacuumLock` is released after `VACUUM` detects invalid data in `pg_database`.`datfrozenxid` or `pg_database`.`datminmxid`",
      "description": "Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure while promoting a standby server, if archiving is enabled and two-phase transactions need to be recovered",
      "description": "If any required two-phase transactions were logged in the most recent (partial) log segment, promotion would fail with an incorrect complaint about “requested WAL segment has already been removed”.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync`'ed at the next checkpoint",
      "description": "Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix missing reinitializations of delay-checkpoint-end flags",
      "description": "This could result in unnecessary delays of checkpoints, or in assertion failures in assert-enabled builds.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix overly strict assertion in `jsonpath` code",
      "description": "This assertion failed if a query applied the `.type()` operator to a `like_regex` result. There was no bug in non-assert builds.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction (Tom Lane) ",
      "description": "",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/fuzzystrmatch`'s Soundex `difference()` function to handle empty input sanely",
      "description": "An input string containing no alphabetic characters resulted in unpredictable output.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten whitespace checks in `contrib/hstore` input",
      "description": "In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow oversize input arrays with `contrib/intarray`'s `gist__int_ops` index opclass",
      "description": "Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in `contrib/intarray` (Konstantin Knizhnik, Matthias van de Meent, Tom Lane) ",
      "description": "",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_index`.`indisreplident` is kept up-to-date in relation cache entries",
      "description": "This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Silence deprecation warnings when compiling with OpenSSL 3.0.0 or later (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent de-duplication of btree index entries for `interval` columns",
      "description": "There are `interval` values that are distinguishable but compare equal, for example `24:00:00` and `1 day`. This breaks assumptions made by btree de-duplication, so `interval` columns need to be excluded from de-duplication. This oversight can cause incorrect results from index-only scans. Moreover, after updating amcheck will report an error for almost all such indexes. Users should reindex any btree indexes on `interval` columns.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema()` is applied to a non-data-returning Portal (Boyu Yang) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw the intended error if `pgrowlocks()` is applied to a partitioned table",
      "description": "Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Report an error if `pgstatindex()`, `pgstatginindex()`, `pgstathashindex()`, or `pgstattuple()` is applied to an invalid index. If `brin_desummarize_range()`, `brin_summarize_new_values()`, `brin_summarize_range()`, or `gin_clean_pending_list()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed `CREATE INDEX` had left behind.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector()` (Tom Lane) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-allocation of the constructed `tsvector` in `tsvectorrecv()`",
      "description": "If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished `tsvector`. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit()`",
      "description": "This could lead to poor page-split decisions in GiST indexes on `tsvector` columns.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve checks for corrupt PGLZ compressed data (Flavien Guedez) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `COMMIT AND CHAIN`/`ROLLBACK AND CHAIN` to work properly when there is an unreleased savepoint",
      "description": "Instead of propagating the current transaction's properties to the new transaction, they propagated some previous transaction's properties.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash in `EXPLAIN` if a parameter marked to be displayed by `EXPLAIN` has a NULL boot-time value",
      "description": "No built-in parameter fits this description, but an extension could define such a parameter.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system()`",
      "description": "This fix avoids a race condition in which a child process that has been forked off by `system()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with torn reads of `pg_control` in frontend programs",
      "description": "On some file systems, reading `pg_control` may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid torn reads of `pg_control` in relevant SQL functions",
      "description": "Acquire the appropriate lock before reading `pg_control`, to ensure we get a consistent view of that file.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "On 64-bit machines we will allow values of `track_activity_query_size` large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix briefly showing inconsistent progress statistics for `ANALYZE` on inherited tables",
      "description": "The block-level counters should be reset to zero at the same time we update the current-relation field.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track the dependencies of cached `CALL` statements, and re-plan them when needed",
      "description": "DDL commands, such as replacement of a function that has been inlined into a `CALL` argument, can create the need to re-plan a `CALL` that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track nesting depth correctly when inspecting `RECORD`\\-type Vars from outer query levels",
      "description": "This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “record type has not been registered” failure when deparsing a view that contains references to fields of composite constants (Tom Lane) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error-handling bug in `RECORD` type cache management",
      "description": "An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error (Hou Zhijie) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that standby-mode WAL recovery reports an error when an invalid page header is found (Yugo Nagata, Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix datatype size confusion in logical tape management",
      "description": "Integer overflow was possible on platforms where long is wider than int, although it would take a multiple-terabyte temporary file to cause a problem.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unintended close of syslogger process's stdin (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as `SET TRANSACTION ISOLATION LEVEL`.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Keep by-reference `attmissingval` values in a long-lived context while they are being used",
      "description": "This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate the effective value of `search_path` after `ALTER ROLE`",
      "description": "This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish`",
      "description": "This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (`contrib/bloom` does, for example).",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Formerly, only the table-level ACL would get restored if both types were present.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add logic to pg\\_upgrade to check for use of `abstime`, `reltime`, and `tinterval` data types",
      "description": "These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg\\_basebackup",
      "description": "This has only been seen to occur when the server connection runs through pgbouncer.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, do not report interrupted page deletion as corruption",
      "description": "This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before `VACUUM` had cleaned things up.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `interval` columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the `-multiply_defined suppress` linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When building `contrib/unaccent`'s rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set (Japin Li) ",
      "description": "",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list",
      "description": "Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "fixedIn": "13.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes",
      "description": "This fixes O(N^2) behavior when the list of waiters is long. In some use-cases this results in substantial throughput improvements.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failures in `heap_update()` and `heap_delete()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck",
      "description": "This error had no impact in non-assert builds.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure during `ALTER TABLE ADD COLUMN` on a complex inheritance tree",
      "description": "If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix problems with duplicate token names in `ALTER TEXT SEARCH CONFIGURATION ... MAPPING` commands (Tender Wang, Michael Paquier) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly lock the associated table during `DROP STATISTICS`",
      "description": "Failure to acquire the lock could result in “tuple concurrently deleted” errors if the `DROP` executes concurrently with `ANALYZE`.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in `ALTER TABLE ADD COLUMN`.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add more checks for overflow in `interval_mul()` and `interval_div()`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make the `pg_file_settings` view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "A no-op `ALTER LARGE OBJECT OWNER` command (that is, one selecting the existing owner) passed the wrong class ID to the `PostAlterHook`, probably confusing any extension using that hook.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "The `startedInRecovery` flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use `ClientAuthentication_hook`.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Use the BIO “app\\_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more wary about OpenSSL not setting `errno` on error",
      "description": "If `errno` isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "This conforms to the behavior for other dependent objects such as indexes.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in `contrib/intarray` if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pageinspect`'s `hash_bitmap_info()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pgstattuple`'s `pgstathashindex()` function is applied to a partitioned hash index (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg\\_ctl and pg\\_regress",
      "description": "When launching a child process via `cmd.exe`, pass the `/D` flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compilation failure of `WAL_DEBUG` code on Windows (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon. (Tom Lane) ",
      "description": "",
      "fixedIn": "13.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `INSERT` from multiple `VALUES` rows into a target column that is a domain over an array or composite type",
      "description": "Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "A NULL value satisfies a clause such as `` _`boolcol`_ IS NOT FALSE ``, so pruning away a partition containing NULLs yielded incorrect answers.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `ALTER FOREIGN TABLE SET SCHEMA` move any owned sequences into the new schema",
      "description": "Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s counting of heap pages accessed by a bitmap heap scan",
      "description": "Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "`VACUUM`'s computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another `VACUUM`.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow converting a table to a view within an outer SQL command that is using that table",
      "description": "This avoids possible crashes.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to `UNION ALL` trees that have constant outputs for the join column in some `SELECT` arms.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "This would typically end in a crash or unexpected error message.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind _`X`_ is not yet built” error messages (David Rowley) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more careful with `RECORD`\\-returning functions in `FROM`",
      "description": "The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition in `pg_get_expr()`",
      "description": "If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()` or `txid_status()`.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait` (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that index-only scans on `name` columns return a fully-padded value",
      "description": "The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain()` in libpq and ecpglib",
      "description": "Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc()` function is correctly zero-terminated (Oleg Tselebrovskiy) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dumpall so that role comments, if present, will be dumped regardless of the setting of `--no-role-passwords` (Daniel Gustafsson, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments (`--`\\-style comments) following expressions",
      "description": "This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL `CASE` statement.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, don't report false match failures due to short- versus long-header values",
      "description": "A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid emitting requests to sort by a constant",
      "description": "This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position _`N`_ is not in select list” errors.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `contrib/postgres_fdw` set the remote session's time zone to `GMT` not `UTC`",
      "description": "This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/xml2`, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane) ",
      "description": "",
      "fixedIn": "13.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER TABLE DETACH PARTITION` for cases involving inconsistent index-based constraints",
      "description": "When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect `coninhcount` value. This would cause trouble during any further manipulations of that constraint.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "The SQL `CALL` statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But `CALL` in PL/pgSQL worked correctly.)",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": [
        "But `CALL` in PL/pgSQL worked correctly."
      ]
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list",
      "description": "If the `CALL` is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow in `money` calculations",
      "description": "None of the arithmetic functions for the `money` type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round(numeric)` and `trunc(numeric)`",
      "description": "These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type `numeric`.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `pg_sequence_last_value()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions",
      "description": "Make it return NULL in these cases instead of throwing an error.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery()`",
      "description": "Per the manual, punctuation in the input of `websearch_to_tsquery()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the `pg_database` catalog, so the effects are narrow, but misbehavior is possible.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number _`N`_ not found in view targetlist”.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Rearrange the order of error checks so that we throw an on-point error when a `WITH RECURSIVE` query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger _`NNNN`_”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to remove `pg_init_privs` entries for column-level privileges when their table is dropped",
      "description": "If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg\\_dump dumps for that relation.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN()` or `MAX()` aggregates",
      "description": "In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Windows reports an FD\\_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix buffer overread in JSON parse error reports for incomplete byte sequences",
      "description": "It was possible to walk off the end of the input buffer by a few bytes when the last bytes comprise an incomplete multi-byte character. While usually harmless, in principle this could cause a crash.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility between PL/Perl and Perl 5.40 (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix recursive `RECORD`\\-returning PL/Python functions",
      "description": "If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "If a PL/Python\\-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror()` in libpq",
      "description": "Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_restore` `-l` reports dependent TOC entries correctly",
      "description": "If `-l` was specified together with selective-restore options such as `-n` or `-N`, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, do not send `FETCH FIRST WITH TIES` clauses to the remote server",
      "description": "The remote server might not implement this clause, or might interpret it differently than we would locally, so don't risk attempting remote execution.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid clashing with system-provided `<regex.h>` headers",
      "description": "This fixes a compilation failure on macOS version 15 and up.",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane) ",
      "description": "",
      "fixedIn": "13.16",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix updates of catalog state for foreign-key constraints when attaching or detaching table partitions",
      "description": "If the referenced table is partitioned, then different catalog entries are needed for a referencing table that is stand-alone versus one that is a partition. `ATTACH/DETACH PARTITION` commands failed to perform this conversion correctly. In particular, after `DETACH` the now stand-alone table would be missing foreign-key enforcement triggers, which could result in the table later containing rows that fail the foreign-key constraint. A subsequent re-`ATTACH` could fail with surprising errors, too.\n\nThe way to fix this is to do `ALTER TABLE DROP CONSTRAINT` on the now stand-alone table for each faulty constraint, and then re-add the constraint. If re-adding the constraint fails, then some erroneous data has crept in. You will need to manually re-establish consistency between the referencing and referenced tables, then re-add the constraint.\n\nThis query can be used to identify broken constraints and construct the commands needed to recreate them:\n\nSELECT conrelid::pg_catalog.regclass AS \"constrained table\",\n       conname AS constraint,\n       confrelid::pg_catalog.regclass AS \"references\",\n       pg_catalog.format('ALTER TABLE %s DROP CONSTRAINT %I;',\n                         conrelid::pg_catalog.regclass, conname) AS \"drop\",\n       pg_catalog.format('ALTER TABLE %s ADD CONSTRAINT %I %s;',\n                         conrelid::pg_catalog.regclass, conname,\n                         pg_catalog.pg_get_constraintdef(oid)) AS \"add\"\nFROM pg_catalog.pg_constraint c\nWHERE contype = 'f' AND conparentid = 0 AND\n   (SELECT count(*) FROM pg_catalog.pg_constraint c2\n    WHERE c2.conparentid = c.oid) <>\n   (SELECT count(*) FROM pg_catalog.pg_inherits i\n    WHERE (i.inhparent = c.conrelid OR i.inhparent = c.confrelid) AND\n      EXISTS (SELECT 1 FROM pg_catalog.pg_partitioned_table\n              WHERE partrelid = i.inhparent));\n\nSince it is possible that one or more of the `ADD CONSTRAINT` steps will fail, you should save the query's output in a file and then attempt to perform each step.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER TABLE ATTACH PARTITION` if the table to be attached has a foreign key referencing the partitioned table",
      "description": "This arrangement is not supported, and other ways of creating it already fail.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partitionwise joins or grouping if the query's collation for the key column doesn't match the partition key's collation",
      "description": "Such plans could produce incorrect results.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible “could not find pathkey item to sort” error when the output of a `UNION ALL` member query needs to be sorted, and the sort column is an expression (Andrei Lepikhov, Tom Lane) ",
      "description": "",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cancellation of the second stage of index build for large hash indexes (Pavel Borisov) ",
      "description": "",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure or confusing error message for `` COPY (_`query`_) TO ... ``, when the _`query`_ is rewritten by a `DO INSTEAD NOTIFY` rule (Tender Wang, Tom Lane) ",
      "description": "",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of skewed data during parallel hash join",
      "description": "After repartitioning the inner side of a hash join because one partition has accumulated too many tuples, we check to see if all the partition's tuples went into the same child partition, which suggests that they all have the same hash value and further repartitioning cannot improve matters. This check malfunctioned in some cases, allowing repeated futile repartitioning which would eventually end in a resource-exhaustion error.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in committing a serializable transaction",
      "description": "Mis-processing of a recently committed transaction could lead to an assertion failure or a “could not access status of transaction” error.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in `COMMIT PREPARED` that resulted in orphaned 2PC files",
      "description": "A concurrent `PREPARE TRANSACTION` could cause `COMMIT PREPARED` to not remove the on-disk two-phase state file for the completed transaction. There was no immediate ill effect, but a subsequent crash-and-recovery could fail with “could not access status of transaction”, requiring manual removal of the orphaned file to restore service.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid invalid memory accesses after skipping an invalid toast index during `VACUUM FULL`",
      "description": "A list tracking yet-to-be-rebuilt indexes was not properly updated in this code path, risking assertion failures or crashes later on.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ways in which an “in place” catalog update could be lost",
      "description": "Normal row updates write a new version of the row to preserve rollback-ability of the transaction. However, certain system catalog updates are intentionally non-transactional and are done with an in-place update of the row. These patches fix race conditions that could cause the effects of an in-place update to be lost. As an example, it was possible to forget having set `pg_class`.`relhasindex` to true, preventing updates of the new index and thus causing index corruption.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reset catalog caches at end of recovery",
      "description": "This prevents scenarios wherein an in-place catalog update could be lost due to using stale data from a catalog cache.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using parallel query while holding off interrupts",
      "description": "This situation cannot arise normally, but it can be reached with test scenarios such as using a SQL-language function as B-tree support (which would be far too slow for production usage). If it did occur it would result in an indefinite wait.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Guard against stack overflow in libxml2 with too-deeply-nested XML input",
      "description": "Use `xmlXPathCtxtCompile()` rather than `xmlXPathCompile()`, because the latter fails to protect itself against recursion-to-stack-overflow in libxml2 releases before 2.13.4.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “failed to find plan for subquery/CTE” errors in `EXPLAIN`",
      "description": "This case arose while trying to print references to fields of a RECORD-type output of a subquery when the subquery has been optimized out of the plan altogether (which is possible at least in the case that it has a constant-false `WHERE` condition). Nothing remains in the plan to identify the original field names, so fall back to printing `` f_`N`_ `` for the _`N`_'th record column. (That's actually the right thing anyway, if the record output arose from a `ROW()` constructor.)",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow a `USING` clause when altering the type of a generated column",
      "description": "A generated column already has an expression specifying the column contents, so including `USING` doesn't make sense.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore not-yet-defined Portals in the `pg_cursors` view",
      "description": "It is possible for user-defined code that inspects this view to be called while a new cursor is being set up, and if that happens a null pointer dereference would ensue. Avoid the problem by defining the view to exclude incompletely-set-up cursors.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce memory consumption of logical decoding",
      "description": "Use a smaller default block size to store tuple data received during logical replication. This reduces memory wastage, which has been reported to be severe while processing long-running transactions, even leading to out-of-memory failures.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-disable sending of stateless (TLSv1.2) session tickets",
      "description": "A previous change to prevent sending of stateful (TLSv1.3) session tickets accidentally re-enabled sending of stateless ones. Thus, while we intended to prevent clients from thinking that TLS session resumption is supported, some still did.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “wrong tuple length” failure when dropping a database with many ACL (permission) entries (Ayush Tiwari) ",
      "description": "",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow adjusting the `session_authorization` and `role` settings in parallel workers",
      "description": "Our code intends to allow modifiable server settings to be set by function `SET` clauses, but not otherwise within a parallel worker. `SET` clauses failed for these two settings, though.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list, when the `CALL` is within a PL/pgSQL `EXCEPTION` block",
      "description": "As with a similar fix in our previous quarterly releases, this case allowed such functions to be passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parse libpq's `keepalives` connection option in the same way as other integer-valued options",
      "description": "The coding used here rejected trailing whitespace in the option value, unlike other cases. This turns out to be problematic in ecpg's usage, for example.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid use of `pnstrdup()` in ecpglib",
      "description": "That function will call `exit()` on out-of-memory, which is undesirable in a library. The calling code already handles allocation failures properly.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpglib, fix out-of-bounds read when parsing incorrect datetime input",
      "description": "It was possible to try to read the location just before the start of a constant array. Real-world consequences seem minimal, though.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include the source timeline history in pg\\_rewind's debug output",
      "description": "This was the intention to begin with, but a coding error caused the source history to always print as empty.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior with junction points on Windows, particularly in pg\\_rewind",
      "description": "This entailed back-patching previous fixes by Thomas Munro, Peter Eisentraut, Alexander Lakhin, and Juan José Santamaría Flecha. Those changes were originally not back-patched out of caution, but they have been in use in later branches for long enough to deem them safe.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to reindex temporary tables and indexes in vacuumdb and in parallel reindexdb",
      "description": "Reindexing other sessions' temporary tables cannot work, but the check to skip them was missing in some code paths, leading to unwanted failures.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow inspection of sequence relations in relevant functions of `contrib/pageinspect` and `contrib/pgstattuple`",
      "description": "This had been allowed in the past, but it got broken during the introduction of non-default access methods for tables.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect LLVM-generated code on ARM64 platforms",
      "description": "When using JIT compilation on ARM platforms, the generated code could not support relocation distances exceeding 32 bits, allowing unlucky placement of generated code to cause server crashes on large-memory systems.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix a few places that assumed that process start time (represented as a `time_t`) will fit into a `long` value",
      "description": "On platforms where `long` is 32 bits (notably Windows), this coding would fail after Y2038\\. Most of the failures appear only cosmetic, but notably `pg_ctl start` would hang.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent “nothing provides perl(PostgreSQL::Test::Utils)” failures while building RPM packages of PostgreSQL (Noah Misch) ",
      "description": "",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix building with Strawberry Perl on Windows (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024b",
      "description": "This tzdata release changes the old System-V-compatibility zone names to duplicate the corresponding geographic zones; for example `PST8PDT` is now an alias for `America/Los_Angeles`. The main visible consequence is that for timestamps before the introduction of standardized time zones, the zone is considered to represent local mean solar time for the named location. For example, in `PST8PDT`, `timestamptz` input such as `1801-01-01 00:00` would previously have been rendered as `1801-01-01 00:00:00-08`, but now it is rendered as `1801-01-01 00:00:00-07:52:58`.\n\nAlso, historical corrections for Mexico, Mongolia, and Portugal. Notably, `Asia/Choibalsan` is now an alias for `Asia/Ulaanbaatar` rather than being a separate zone, mainly because the differences between those zones were found to be based on untrustworthy data.",
      "fixedIn": "13.17",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix cases where a logical replication slot's `restart_lsn` could go backwards",
      "description": "Previously, restarting logical replication could sometimes cause the slot's restart point to be recomputed as an older value than had previously been advertised in `pg_replication_slots`. This is bad, since for example WAL files might have been removed on the basis of the later `restart_lsn` value, in which case replication would fail to restart.",
      "fixedIn": "13.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Count index scans in `contrib/bloom` indexes in the statistics views, such as the `pg_stat_user_indexes`.`idx_scan` counter (Masahiro Ikeda) ",
      "description": "",
      "fixedIn": "13.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when checking to see if an index's opclass options have changed",
      "description": "Some forms of `ALTER TABLE` would fail if the table has an index with non-default operator class options.",
      "fixedIn": "13.18",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect detection of concurrent page splits while inserting into a GiST index",
      "description": "Concurrent insertions could lead to a corrupt index with entries placed in the wrong pages. It's recommended to reindex any GiST index that's been subject to concurrent insertions.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `CREATE INDEX CONCURRENTLY` to wait for concurrent prepared transactions",
      "description": "At the point where `CREATE INDEX CONCURRENTLY` waits for all concurrent transactions to complete so that it can see rows they inserted, it must also wait for all prepared transactions to complete, for the same reason. Its failure to do so meant that rows inserted by prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. In installations that have enabled prepared transactions (`max_prepared_transactions` \\> 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash when trying to rescan an aggregation plan node that has both hashed and sorted grouping sets (Jeff Davis) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible incorrect query results when a hash aggregation node spills some tuples to disk",
      "description": "It was possible for aggregation grouping values to be replaced by nulls when the tuples are read back in, leading to wrong answers.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge case in incremental sort",
      "description": "If the last tuple of a sort batch chanced to be the first tuple of the next group of already-sorted tuples, the code did the wrong thing. This could lead to “retrieved too many tuples in a bounded sort” error messages, or to silently-wrong sorting results.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash when a `CALL` or `DO` statement that performs a transaction rollback is executed via extended query protocol",
      "description": "In PostgreSQL 13, this case reliably caused a null-pointer dereference. In earlier versions the bug seems to have no visible symptoms, but it's not quite clear that it could never cause a problem.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary errors with `BEFORE UPDATE` triggers on partitioned tables",
      "description": "A `BEFORE UPDATE FOR EACH ROW` trigger that modified the row in any way prevented `UPDATE` from moving the row to another partition when needed; but there is no longer any reason for this restriction.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition pruning logic to handle asymmetric hash partition sets",
      "description": "If a hash-partitioned table has unequally-sized partitions (that is, varying modulus values), or it lacks partitions for some remainder values, then the planner's pruning logic could mistakenly conclude that some partitions don't need to be scanned, leading to failure to find rows that the query should find.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid incorrect results when `WHERE CURRENT OF` is applied to a cursor whose plan contains a MergeAppend node",
      "description": "This case is unsupported (in general, a cursor using `ORDER BY` is not guaranteed to be simply updatable); but the code previously did not reject it, and could silently give false matches.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when `WHERE CURRENT OF` is applied to a cursor whose plan contains a custom scan node (David Geier) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner's mishandling of placeholders whose evaluation should be delayed by an outer join",
      "description": "This occurs in particular with trivial subqueries containing lateral references to outer-join outputs. The mistake could result in a malformed plan. The known cases trigger a “failed to assign all NestLoopParams to plan nodes” error, but other symptoms may be possible.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner's handling of placeholders during removal of useless RESULT RTEs",
      "description": "This oversight could lead to “no relation entry for relid _`N`_” planner errors.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner's handling of a placeholder that is computed at some join level and used only at that same level",
      "description": "This oversight could lead to “failed to build any _`N`_\\-way joins” planner errors.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Consider unsorted subpaths when planning a Gather Merge operation",
      "description": "It's possible to use such a path by adding an explicit Sort node, and in some cases that gives rise to a superior plan.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Do not consider `ORDER BY` expressions involving parallel-restricted functions or set-returning functions when trying to parallelize sorts",
      "description": "Such cases cannot safely be pushed into worker processes, but the incremental sort feature accidentally made us consider them.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more careful about whether index AMs support mark/restore",
      "description": "This prevents errors about missing support functions in rare edge cases.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix overestimate of the amount of shared memory needed for parallel queries (Takayuki Tsunakawa) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER DEFAULT PRIVILEGES` to handle duplicated arguments safely",
      "description": "Duplicate role or schema names within the same command could lead to “tuple already updated by self” errors or unique-constraint violations.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Flush ACL-related caches when `pg_authid` changes",
      "description": "This change ensures that permissions-related decisions will promptly reflect the results of `ALTER ROLE ... [NO] INHERIT`.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to detect “snapshot too old” conditions in tables rewritten in the current transaction",
      "description": "This is only a hazard when `wal_level` is set to `minimal` and the rewrite is performed by `ALTER TABLE SET TABLESPACE`.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix spurious failure of `CREATE PUBLICATION` when applied to a table created or rewritten in the current transaction",
      "description": "This is only a hazard when `wal_level` is set to `minimal`.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent misprocessing of ambiguous `CREATE TABLE LIKE` clauses",
      "description": "A `LIKE` clause is re-examined after initial creation of the new table, to handle importation of indexes and such. It was possible for this re-examination to find a different table of the same name, causing unexpected behavior; one example is where the new table is a temporary table of the same name as the `LIKE` target.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rearrange order of operations in `CREATE TABLE LIKE` so that indexes are cloned before building foreign key constraints",
      "description": "This fixes the case where a self-referential foreign key constraint declared in the outer `CREATE TABLE` depends on an index that's coming from the `LIKE` clause.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `CREATE STATISTICS` on system catalogs (Tomas Vondra) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow converting an inheritance child table to a view (Tom Lane) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that disk space allocated for a dropped relation is released promptly at commit",
      "description": "Previously, if the dropped relation spanned multiple 1GB segments, only the first segment was truncated immediately. Other segments were simply unlinked, which doesn't authorize the kernel to release the storage so long as any other backends still have the files open.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent dropping a tablespace that is referenced by a partitioned relation, but is not used for any actual storage",
      "description": "Previously this was allowed, but subsequent operations on the partitioned relation would fail.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix progress reporting for `CLUSTER` (Matthias van de Meent) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of backslash-escaped multibyte characters in `COPY FROM`",
      "description": "A backslash followed by a multibyte character was not handled correctly. In some client character encodings, this could lead to misinterpreting part of a multibyte character as a field separator or end-of-copy-data marker.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid preallocating executor hash tables in `EXPLAIN` without `ANALYZE` (Alexey Bashtanov) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix recently-introduced race condition in `LISTEN`/`NOTIFY` queue handling",
      "description": "A newly-listening backend could attempt to read SLRU pages that were in process of being truncated, possibly causing an error.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the `jsonb` concatenation operator to handle all combinations of JSON data types",
      "description": "We can concatenate two JSON objects or two JSON arrays. Handle other cases by wrapping non-array inputs in one-element arrays, then performing an array concatenation. Previously, some combinations of inputs followed this rule but others arbitrarily threw an error.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use of uninitialized value while parsing a `*` quantifier in a BRE-mode regular expression",
      "description": "This error could cause the quantifier to act non-greedy, that is behave like a `*?` quantifier would do in full regular expressions.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix numeric `power()` for the case where the exponent is exactly `INT_MIN` (-2147483648)",
      "description": "Previously, a result with no significant digits was produced.",
      "fixedIn": "13.2",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Fix integer-overflow cases in `substring()` functions",
      "description": "If the specified starting index and length overflow an integer when added together, `substring()` misbehaved, either throwing a bogus “negative substring length” error for a case that should succeed, or failing to complain that a negative length is negative (and instead returning the whole string, in most cases).",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent possible data loss from incorrect detection of the wraparound point of an SLRU log",
      "description": "The wraparound point typically falls in the middle of a page, which must be rounded off to a page boundary, and that was not done correctly. No issue could arise unless an installation had gotten to within one page of SLRU overflow, which is unlikely in a properly-functioning system. If this did happen, it would manifest in later “apparent wraparound” or “could not access status of transaction” errors.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix WAL-reading logic to handle timeline switches correctly",
      "description": "Previously, if WAL archiving is enabled, a standby could fail to follow a primary running on a newer timeline, with errors like “requested WAL segment has already been removed”.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in walsender processes while sending new snapshots for logical decoding (Amit Kapila) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix relation cache leak in walsender processes while sending row changes via the root of a partitioned relation during logical replication (Amit Langote, Mark Zhao) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix walsender to accept additional commands after terminating replication (Jeff Davis) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure detection of deadlocks between hot standby backends and the startup (WAL-application) process",
      "description": "The startup process did not run the deadlock detection code, so that in situations where the startup process is last to join a circular wait situation, the deadlock might never be recognized.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure to detect recovery conflicts while deleting an index entry that references a HOT chain",
      "description": "The code failed to traverse the HOT chain and might thus compute a too-old XID horizon, which could lead to incorrect conflict processing in hot standby. The practical impact of this bug is limited; in most cases the correct XID horizon would be found anyway from nearby operations.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a nonempty value of `krb_server_keyfile` always overrides any setting of `KRB5_KTNAME` in the server's environment",
      "description": "Previously, which setting took precedence depended on whether the client requests GSS encryption.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In server log messages about failing to match connections to `pg_hba.conf` entries, include details about whether GSS encryption has been activated",
      "description": "This is relevant data if `hostgssenc` or `hostnogssenc` entries exist.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assorted issues in server's support for GSS encryption",
      "description": "Remove pointless restriction that only GSS authentication can be used on a GSS-encrypted connection. Add GSS encryption information to connection-authorized log messages. Include GSS-related space when computing the required size of shared memory (this omission could have caused problems with very high `max_connections` settings). Avoid possible infinite recursion when reporting an unrecoverable GSS encryption error.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that unserviced requests for background workers are cleaned up when the postmaster begins a “smart” or “fast” shutdown sequence",
      "description": "Previously, there was a race condition whereby a child process that had requested a background worker just before shutdown could wait indefinitely, preventing shutdown from completing.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix portability problem in parsing of `recovery_target_xid` values",
      "description": "The target XID is potentially 64 bits wide, but it was parsed with `strtoul()`, causing misbehavior on platforms where `long` is 32 bits (such as Windows).",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to use parallel index build in a standalone backend (Yulin Pei) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow index AMs to support included columns without necessarily supporting multiple key columns (Tom Lane) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "While taking a base backup, avoid executing any SHA256 code if a backup manifest is not needed",
      "description": "When using OpenSSL operating in FIPS mode, SHA256 hashing is rejected, leading to an error. This change makes it possible to take a base backup on such a platform, so long as `--no-manifest` is specified.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure during parallel aggregation of an aggregate with a non-strict deserialization function",
      "description": "No such aggregate functions exist in core PostgreSQL, but some extensions such as PostGIS provide some. The mistake is harmless anyway in a non-assert build.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure in `pg_get_functiondef()` when examining a function with a `TRANSFORM` option (Tom Lane) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data structure misallocation in PL/pgSQL's `CALL` statement",
      "description": "A `CALL` in a PL/pgSQL procedure, to another procedure that has OUT parameters, would fail if the called procedure did a `COMMIT` or `ROLLBACK`.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In libpq, do not skip trying SSL after GSS encryption",
      "description": "If we successfully made a GSS-encrypted connection, but then failed during authentication, we would fall back to an unencrypted connection rather than next trying an SSL-encrypted connection. This could lead to unexpected connection failure, or to silently getting an unencrypted connection where an encrypted one is expected. Fortunately, GSS encryption could only succeed if both client and server hold valid tickets in the same Kerberos infrastructure. It seems unlikely for that to be true in an environment that requires SSL encryption instead.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make libpq's `PQconndefaults()` function report the correct default value for `channel_binding` (Daniele Varrazzo) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql, re-allow including a password in a _`connectionstring`_ argument of a `\\connect` command",
      "description": "This used to work, but a recent bug fix caused the password to be ignored (resulting in prompting for a password).",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql's `\\d` commands, don't truncate the display of column default values",
      "description": "Formerly, they were arbitrarily truncated at 128 characters.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assorted bugs in psql's `\\help` command",
      "description": "`\\help` with two argument words failed to find a command description using only the first word, for example `\\help reset all` should show the help for `RESET` but did not. Also, `\\help` often failed to invoke the pager when it should. It also leaked memory.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's dumping of inherited generated columns",
      "description": "The previous behavior resulted in (harmless) errors during restore.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, ensure that the restore script runs `ALTER PUBLICATION ADD TABLE` commands as the owner of the publication, and similarly runs `ALTER INDEX ATTACH PARTITION` commands as the owner of the partitioned index",
      "description": "Previously, these commands would be run by the role that started the restore script; which will usually work, but in corner cases that role might not have adequate permissions.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to handle `WITH GRANT OPTION` in an extension's initial privileges",
      "description": "If an extension's script creates an object and grants privileges on it with grant option, then later the user revokes such privileges, pg\\_dump would generate incorrect SQL for reproducing the situation. (Few if any extensions do this today.)",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": [
        "Few if any extensions do this today."
      ]
    },
    {
      "title": "In pg\\_rewind, ensure that all WAL is accounted for when rewinding a standby server (Ian Barwick, Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pgbench, disallow a digit as the first character of a variable name",
      "description": "This prevents trying to substitute variables into timestamp literal values, which may contain strings like `12:34`.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report the correct database name in connection failure error messages from some client programs",
      "description": "If the database name was defaulted rather than given on the command line, pg\\_dumpall, pgbench, oid2name, and vacuumlo would produce misleading error messages after a connection failure.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in `contrib/auto_explain`",
      "description": "Memory consumed while producing the `EXPLAIN` output was not freed until the end of the current transaction (for a top-level statement) or the end of the surrounding statement (for a nested statement). This was particularly a problem with `log_nested_statements` enabled.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid leaking open connections to remote servers when a user mapping or foreign server object is dropped",
      "description": "Open connections that depend on a dropped user mapping or foreign server can no longer be referenced, but formerly they were kept around anyway for the duration of the local session.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix faulty assertion in `contrib/postgres_fdw` (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pgcrypto`, check for error returns from OpenSSL's EVP functions",
      "description": "We do not really expect errors here, but this change silences warnings from static analysis tools.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `contrib/pg_prewarm` more robust when the cluster is shut down before prewarming is complete",
      "description": "Previously, autoprewarm would rewrite its status file with only the block numbers that it had managed to load so far, thus perhaps largely disabling the prewarm functionality in the next startup. Instead, suppress status file updates until the initial loading pass is complete.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pg_trgm`'s GiST index support, avoid crash in the rare case that picksplit is called on exactly two index items (Andrew Gierth, Alexander Korotkov) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix miscalculation of timeouts in `contrib/pg_prewarm` and `contrib/postgres_fdw`",
      "description": "The main loop in `contrib/pg_prewarm`'s autoprewarm parent process underestimated its desired sleep time by a factor of 1000, causing it to consume much more CPU than intended. When waiting for a result from a remote server, `contrib/postgres_fdw` overestimated the desired timeout by a factor of 1000 (though this error had been mitigated by imposing a clamp to 60 seconds).\n\nBoth of these errors stemmed from incorrectly converting seconds-and-microseconds to milliseconds. Introduce a new API `TimestampDifferenceMilliseconds()` to make it easier to get this right in the future.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve configure's heuristics for selecting `PG_SYSROOT` on macOS",
      "description": "The new method is more likely to produce desirable results when Xcode is newer than the underlying operating system. Choosing a sysroot that does not match the OS version may result in nonfunctional executables.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "While building on macOS, specify `-isysroot` in link steps as well as compile steps",
      "description": "This likewise improves the results when Xcode is out of sync with the operating system.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix JIT compilation to be compatible with LLVM 11 and LLVM 12 (Andres Freund) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix potential mishandling of references to boolean variables in JIT expression compilation",
      "description": "No field reports attributable to this have been seen, but it seems likely that it could cause problems on some architectures.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compile failure with ICU 68 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid `memcpy()` with a NULL source pointer and zero count during partitioned index creation",
      "description": "While such a call is not known to cause problems in itself, some compilers assume that the arguments of `memcpy()` are never NULL, which could result in incorrect optimization of nearby code.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2021a for DST law changes in Russia (Volgograd zone) and South Sudan, plus historical corrections for Australia, Bahamas, Belize, Bermuda, Ghana, Israel, Kenya, Nigeria, Palestine, Seychelles, and Vanuatu.",
      "description": "Notably, the Australia/Currie zone has been corrected to the point where it is identical to Australia/Hobart.",
      "fixedIn": "13.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix adjustment of constraint deferrability properties in partitioned tables",
      "description": "When applied to a foreign-key constraint of a partitioned table, `ALTER TABLE ... ALTER CONSTRAINT` failed to adjust the `DEFERRABLE` and/or `INITIALLY DEFERRED` markings of the constraints and triggers of leaf partitions. This led to unexpected behavior of such constraints. After updating to this version, any misbehaving partitioned tables can be fixed by executing a new `ALTER` command to set the desired properties.\n\nThis change also disallows applying such an `ALTER` directly to the constraints of leaf partitions. The only supported case is for the whole partitioning hierarchy to have identical constraint properties, so such `ALTER`s must be applied at the partition root.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When attaching a child table with `ALTER TABLE ... INHERIT`, insist that any generated columns in the parent be generated the same way in the child (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Forbid marking an identity column as nullable",
      "description": "`GENERATED ... AS IDENTITY` implies `NOT NULL`, so don't allow it to be combined with an explicit `NULL` specification.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `ALTER ROLE/DATABASE ... SET` to set the `role`, `session_authorization`, and `temp_buffers` parameters",
      "description": "Previously, over-eager validity checks might reject these commands, even if the values would have worked when used later. This created a command ordering hazard for dump/reload and upgrade scenarios.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `REINDEX CONCURRENTLY` preserves any statistics target that's been set for the index (Michael Paquier) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `COMMIT AND CHAIN` to work correctly when the current transaction has live savepoints (Fujii Masao) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix list-manipulation bug in `WITH RECURSIVE` processing",
      "description": "Sufficiently deep nesting of `WITH` constructs (at least seven levels) triggered core dumps or incorrect complaints of faulty `WITH` nesting.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bug with coercing the result of a `COLLATE` expression to a non-collatable type",
      "description": "This led to a parse tree in which the `COLLATE` appears to be applied to a non-collatable value. While that normally has no real impact (since `COLLATE` has no effect at runtime), it was possible to construct views that would be rejected during dump/reload.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use-after-free bug in saving tuples for `AFTER` triggers",
      "description": "This could cause crashes in some situations.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow calling window functions and procedures via the “fast path” wire protocol message",
      "description": "Only plain functions are supported here. While trying to call an aggregate function failed already, calling a window function would crash, and calling a procedure would work only if the procedure did no transaction control.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Extend `pg_identify_object_as_address()` to support event triggers (Joel Jacobson) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `to_char()`'s handling of Roman-numeral month format codes with negative intervals",
      "description": "Previously, such cases would usually cause a crash.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Check that the argument of `pg_import_system_collations()` is a valid schema OID (Tom Lane) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use of uninitialized value while parsing an `` \\{_`m`_,_`n`_\\} `` quantifier in a BRE-mode regular expression",
      "description": "This error could cause the quantifier to act non-greedy, that is behave like an `` {_`m`_,_`n`_}? `` quantifier would do in full regular expressions.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “could not find pathkey item to sort” planner errors in some situations where the sort key involves an aggregate or window function (James Coleman, Tom Lane) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't ignore system columns when estimating the number of groups using extended statistics",
      "description": "This led to strange estimates for queries such as `SELECT ... GROUP BY a, b, ctid`.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid divide-by-zero when estimating selectivity of a regular expression with a very long fixed prefix",
      "description": "This typically led to a `NaN` selectivity value, causing assertion failures or strange planner behavior.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix access-off-the-end-of-the-table error in BRIN index bitmap scans",
      "description": "If the page range size used by a BRIN index isn't a power of two, there were corner cases in which a bitmap scan could try to fetch pages past the actual end of the table, leading to “could not open file” errors.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix potentially wrong answers from GIN `tsvector` index searches, when there are many matching tuples",
      "description": "If the number of index matches became large enough to make the bitmap holding them become lossy (a threshold that depends on `work_mem`), the code could get confused about whether rechecks are required, allowing rows to be returned that don't actually match the query.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix concurrency issues with WAL segment recycling on Windows",
      "description": "This reverts a change that caused intermittent “could not rename file ...: Permission denied” log messages. While there were not serious consequences, the log spam was annoying.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid incorrect timeline change while recovering uncommitted two-phase transactions from WAL",
      "description": "This error could lead to subsequent WAL records being written under the wrong timeline ID, leading to consistency problems, or even complete failure to be able to restart the server, later on.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that locks are released while shutting down a standby server's startup process",
      "description": "When a standby server is shut down while still in recovery, some locks might be left held. This causes assertion failures in debug builds; it's unclear whether any serious consequence could occur in production builds.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when a logical replication worker does `ALTER SUBSCRIPTION REFRESH`",
      "description": "The core code won't do this, but a replica trigger could.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure we default to `wal_sync_method` \\= `fdatasync` on recent FreeBSD",
      "description": "FreeBSD 13 supports `open_datasync`, which would normally become the default choice. However, it's unclear whether that is actually an improvement for Postgres, so preserve the existing default for now.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable the `vacuum_cleanup_index_scale_factor` parameter and storage option",
      "description": "The notion of tracking “stale” index statistics proved to interact badly with the `autovacuum_vacuum_insert_threshold` parameter, resulting in unnecessary full-index scans and consequent degradation of autovacuum performance. The latter mechanism seems superior, so remove the stale-statistics logic. The control parameter for that, `vacuum_cleanup_index_scale_factor`, will be removed entirely in v14\\. In v13, it remains present to avoid breaking existing configuration files, but it no longer does anything.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Pass the correct trigger OID to object post-alter hooks during `ALTER CONSTRAINT`",
      "description": "When updating trigger properties during `ALTER CONSTRAINT`, the post-alter hook was told that we are updating a trigger, but the constraint's OID was passed instead of the trigger's.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure we finish cleaning up when interrupted while detaching a DSM segment",
      "description": "This error could result in temporary files not being cleaned up promptly after a parallel query.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assorted minor memory leaks in the server (Tom Lane, Andres Freund) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix uninitialized variable in walreceiver's statistics in shared memory",
      "description": "This error was harmless on most platforms, but could cause issues on platforms lacking atomic variables and/or spinlock support.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce the overhead of dtrace probes for LWLock operations, when dtrace support is compiled in but not active (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure when a PL/pgSQL `DO` block makes use of both composite-type variables and transaction control",
      "description": "Previously, such cases led to errors about leaked tuple descriptors.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent infinite loop in libpq if a ParameterDescription message with a corrupt length is received (Tom Lane) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When initdb prints instructions about how to start the server, make the path shown for pg\\_ctl use backslash separators on Windows (Nitin Jadhav) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql to restore the previous behavior of `` \\connect service=_`something`_ ``",
      "description": "A previous bug fix caused environment variables (such as `PGPORT`) to override entries in the service file in this context. Restore the previous behavior, in which the priority is the other way around.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql's `ON_ERROR_ROLLBACK` feature to handle `COMMIT AND CHAIN` commands correctly",
      "description": "Previously, this case failed with “savepoint \"pg\\_psql\\_temporary\\_savepoint\" does not exist”.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql, avoid repeated “could not print result table” failures after the first such error (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in detection of file modification by psql's `\\e` and related commands",
      "description": "A very fast typist could fool the code's file-timestamp-based detection of whether the temporary edit file was changed.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's dumping of generated columns in partitioned tables",
      "description": "A fix introduced in the previous minor release should not be applied to partitioned tables, only traditionally-inherited tables.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix missed file version check in pg\\_restore",
      "description": "When reading a custom-format archive from a non-seekable source, pg\\_restore neglected to check the archive version. If it was fed a newer archive version than it can support, it would fail messily later on.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add some more checks to pg\\_upgrade for user tables containing non-upgradable data types",
      "description": "Fix detection of some cases where a non-upgradable data type is embedded within a container type (such as an array or range). Also disallow upgrading when user tables contain columns of system-defined composite types, since those types' OIDs are not stable across versions.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect progress-reporting calculation in pg\\_checksums (Shinya Kato) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_waldump to count `XACT` records correctly when generating per-record statistics (Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/amcheck` to not complain about the tuple flags `HEAP_XMAX_LOCK_ONLY` and `HEAP_KEYS_UPDATED` both being set",
      "description": "This is a valid state after `SELECT FOR UPDATE`.",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust VPATH build rules to support recent Oracle Developer Studio compiler versions (Noah Misch) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix testing of PL/Python for Python 3 on Solaris (Noah Misch) ",
      "description": "",
      "fixedIn": "13.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Restore the Portal-level snapshot after `COMMIT` or `ROLLBACK` within a procedure",
      "description": "This change fixes cases where an attempt to fetch a toasted value immediately after `COMMIT`/`ROLLBACK` would fail with errors like “no known snapshots” or “missing chunk number 0 for toast value”.\n\nSome extensions may attempt to execute SQL code outside of any Portal. They are responsible for ensuring that an outer snapshot exists before doing so. Previously, not providing a snapshot might work or it might not; now it will consistently fail with “cannot execute SQL without an outer snapshot or portal”.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid misbehavior when persisting the output of a cursor that's reading a non-stable query",
      "description": "Previously, we'd always rewind and re-read the whole query result, possibly getting results different from the earlier execution, causing great confusion later. For a NO SCROLL cursor, we can fix this by only storing the not-yet-read portion of the query output, which is sufficient since a NO SCROLL cursor can't be backed up. Cursors with the SCROLL option remain at hazard, but that was already documented to be an unsafe option to use with a non-stable query. Make those documentation warnings stronger.\n\nAlso force NO SCROLL mode for the implicit cursor used by a PL/pgSQL FOR-over-query loop, to avoid this type of problem when persisting such a cursor during an intra-procedure commit.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject `SELECT ... GROUP BY GROUPING SETS (()) FOR UPDATE`",
      "description": "This should be disallowed, just as `FOR UPDATE` with a plain `GROUP BY` is disallowed, but the test for that failed to handle empty grouping sets correctly. The end result would be a null-pointer dereference in the executor.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject cases where a query in `WITH` rewrites to just `NOTIFY`",
      "description": "Such cases previously crashed.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `numeric` multiplication, round the result rather than failing if it would have more than 16383 digits after the decimal point (Dean Rasheed) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case errors and loss of precision when raising `numeric` values to very large powers (Dean Rasheed) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix division-by-zero failure in `to_char()` with `EEEE` format and a `numeric` input value less than 10^(-1001) (Dean Rasheed) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `pg_size_pretty(bigint)` to round negative values consistently with the way it rounds positive ones (and consistently with the `numeric` version) (Dean Rasheed, David Rowley) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `pg_filenode_relation(0, 0)` return NULL rather than failing (Justin Pryzby) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `ALTER EXTENSION` lock the extension when adding or removing a member object",
      "description": "The previous coding allowed `ALTER EXTENSION ADD/DROP` to occur concurrently with `DROP EXTENSION`, leading to a crash or corrupt catalog entries.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER SUBSCRIPTION` to reject an empty slot name (Japin Li) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When cloning a partitioned table's triggers to a new partition, ensure that their enabled status is copied (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid alias conflicts in queries generated for `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "This command failed on materialized views containing columns with certain names, notably `mv` and `newdata`.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `PREPARE TRANSACTION` to check correctly for conflicting session-lifespan and transaction-lifespan locks",
      "description": "A transaction cannot be prepared if it has both session-lifespan and transaction-lifespan locks on the same advisory-lock ID value. This restriction was not fully checked, which could lead to a PANIC during `PREPARE TRANSACTION`.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior of `DROP OWNED BY` when the target role is listed more than once in an RLS policy (Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Skip unnecessary error tests when removing a role from an RLS policy during `DROP OWNED BY`",
      "description": "Notably, this fixes some cases where it was necessary to be a superuser to use `DROP OWNED BY`.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-allow old-style Windows locale names in `CREATE COLLATION` commands",
      "description": "Previously we were failing because the operating system can't provide version information for such locales. At some point we may decide to require version information, but no such policy exists yet, so re-allow the case for now.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow whole-row variables in `GENERATED` expressions",
      "description": "Use of a whole-row variable clearly violates the rule that a generated column cannot depend on itself, so such cases have no well-defined behavior. The actual behavior frequently included a crash.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix usage of `tableoid` in `GENERATED` expressions",
      "description": "Some code paths failed to provide a valid value for this system column while evaluating a `GENERATED` expression.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't store a “fast default” when adding a column to a foreign table",
      "description": "The fast default is useless since no local heap storage exists for such a table, but it confused subsequent operations. In addition to suppressing creation of such catalog entries in `ALTER TABLE` commands, adjust the downstream code to cope when one is incorrectly present.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow index state flags to be updated transactionally",
      "description": "This avoids failures when dealing with index predicates that aren't really immutable. While that's not considered a supported case, the original reason for using a non-transactional update here is long gone, so we may as well change it.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid corrupting the plan cache entry when `CREATE DOMAIN` or `ALTER DOMAIN` appears in a cached plan (Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make walsenders show their latest replication commands in `pg_stat_activity`",
      "description": "Previously, a walsender would show its latest SQL command, which was confusing if it's now doing some replication operation instead. Now we show replication-protocol commands on the same footing as SQL commands.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `pg_settings`.`pending_restart` show as true when the pertinent entry in `postgresql.conf` has been removed",
      "description": "`pending_restart` correctly showed the case where an entry that cannot be changed without a postmaster restart has been modified, but not where the entry had been removed altogether.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On 64-bit Windows, allow the effective value of `work_mem` times `hash_mem_multiplier` to exceed 2GB",
      "description": "This allows `hash_mem_multiplier` to be used for its intended purpose of preventing large hash aggregations from spilling to disk, even when “large” means multiple gigabytes.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-planning of queries involving regular tables that are inheritance children of foreign tables",
      "description": "`SELECT FOR UPDATE` and related commands would fail with assertion failures or “could not find junk column” errors in such cases.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pullup of constant function-in-FROM results when the FROM item is marked `LATERAL` (Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case failure of a new standby to follow a new primary",
      "description": "Under a narrow combination of conditions, the standby could wind up trying to follow the wrong WAL timeline.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update minimum recovery point when WAL replay of a transaction abort record causes file truncation",
      "description": "File truncation is irreversible, so it's no longer safe to stop recovery at a point earlier than that record. The corresponding case for transaction commit was fixed years ago, but this one was overlooked.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Advance oldest-required-WAL-segment horizon properly after a replication slot is invalidated",
      "description": "If all slots were invalidated, the horizon would not move again, eventually allowing the server's WAL storage to run out of space.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In walreceivers, avoid attempting catalog lookups after an error (Masahiko Sawada, Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a standby server's startup process will respond to a shutdown signal promptly while waiting for WAL to arrive (Fujii Masao, Soumyadeep Chakraborty) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly clear shared state after failing to become a member of a transaction commit group",
      "description": "Given the right timing, this could cause an assertion failure when some later session re-uses the same PGPROC object.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add locking to avoid reading incorrect relmapper data in the face of a concurrent write from another process (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve progress reporting for the sort phase of a parallel btree index build (Matthias van de Meent) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve checks for violations of replication protocol",
      "description": "Logical replication workers frequently used Asserts to check for cases that could be triggered by invalid or out-of-order replication commands. This seems unwise, so promote these tests to regular error checks.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assorted crash cases in logical replication of partitioned-table updates (Amit Langote, Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix potential crash when firing AFTER triggers of partitioned tables in logical replication workers (Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix deadlock when multiple logical replication workers try to truncate the same table (Peter Smith, Haiying Tang) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error cases and memory leaks in logical decoding of speculative insertions (Dilip Kumar) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in logical replication output (Amit Langote) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaving an invalid record-type hash table entry behind after an error",
      "description": "This could lead to later crashes or memory leakage.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix plan cache reference leaks in some error cases in `CREATE TABLE ... AS EXECUTE` (Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in code for sharing tuple descriptors across parallel workers",
      "description": "Given the right timing, a crash could result.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition when invalidating an obsolete replication slot concurrently with an attempt to drop or update it (Andres Freund, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible race condition when releasing BackgroundWorkerSlots",
      "description": "It's likely that this doesn't fix any observable bug on Intel hardware, but machines with weaker memory ordering rules could have problems.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix latent crash in sorting code",
      "description": "One code path could attempt to free a null pointer. The case appears unreachable in the core server's use of sorting, but perhaps it could be triggered by extensions.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Harden B-tree posting list split code against corrupt data",
      "description": "Throw an error, rather than crashing, for an attempt to insert an item with a TID identical to an existing entry. While that shouldn't ever happen, it has been reported to happen when the index is inconsistent with its table.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent infinite loops in SP-GiST index insertion",
      "description": "In the event that INCLUDE columns take up enough space to prevent a leaf index tuple from ever fitting on a page, the text\\_ops operator class would get into an infinite loop vainly trying to make the tuple fit. While pre-v11 versions don't have INCLUDE columns, back-patch this anti-looping fix to them anyway, as it seems like a good defense against bugs in operator classes.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that SP-GiST index insertion can be terminated by a query cancel request (Tom Lane, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix uninitialized-variable bug that could cause PL/pgSQL to act as though an `INTO` clause specified `STRICT`, even though it didn't (Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't abort the process for an out-of-memory failure in libpq's printing functions (Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, allow the `numeric` value INT\\_MIN (usually -2147483648) to be converted to integer (John Naylor) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to correctly handle triggers on partitioned tables whose enabled status is different from their parent triggers' status (Justin Pryzby, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “invalid creation date in header” warnings observed when running pg\\_restore on an archive file created in a different time zone (Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_upgrade carry forward the old installation's `oldestXID` value",
      "description": "Previously, the new installation's `oldestXID` was set to a value old enough to (usually) force immediate anti-wraparound autovacuuming. That's not desirable from a performance standpoint; what's worse, installations using large values of `autovacuum_freeze_max_age` could suffer unwanted forced shutdowns soon after an upgrade.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Extend pg\\_upgrade to detect and warn about extensions that should be upgraded",
      "description": "A script file is now produced containing the `ALTER EXTENSION UPDATE` commands needed to bring extensions up to the versions that are considered default in the new installation.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid problems when switching pg\\_receivewal between compressed and non-compressed WAL storage (Michael Paquier) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/postgres_fdw` to work usefully with generated columns",
      "description": "`postgres_fdw` will now behave reasonably with generated columns, so long as a generated column in a foreign table represents a generated column in the remote table. `IMPORT FOREIGN SCHEMA` will now import generated columns that way by default.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid attempting catalog lookups after an error",
      "description": "While this usually worked, it's not very safe since the error might have been one that made catalog access nonfunctional. A side effect of the fix is that messages about data conversion errors will now mention the query's table and column aliases (if used) rather than the true underlying name of a foreign table or column.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the isolation-test infrastructure",
      "description": "Allow isolation test steps to be annotated to show the expected completion order. This allows getting stable results from otherwise-racy test cases, without the long delays that we previously used (not entirely successfully) to fend off race conditions. Allow non-quoted identifiers as isolation test session/step names (formerly, all such names had to be double-quoted). Detect and warn about unused steps in isolation tests. Improve display of query results in isolation tests. Remove isolationtester's “dry-run” mode. Remove memory leaks in isolationtester itself.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce overhead of cache-clobber testing (Tom Lane) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Python's regression tests to pass with Python 3.10 (Honza Horak) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `printf(\"%s\", NULL)` print `(null)` instead of crashing",
      "description": "This should improve server robustness in corner cases, and it syncs our `printf` implementation with common libraries.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect log message when point-in-time recovery stops at a `ROLLBACK PREPARED` record (Simon Riggs) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve `ALTER TABLE`'s messages for wrong-relation-kind errors (Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Clarify error messages referring to “non-negative” values (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix configure to work with OpenLDAP 2.5, which no longer has a separate `libldap_r` library",
      "description": "If there is no `libldap_r` library, we now silently assume that `libldap` is thread-safe.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new make targets `world-bin` and `install-world-bin`",
      "description": "These are the same as `world` and `install-world` respectively, except that they do not build or install the documentation.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix make rule for TAP tests (`prove_installcheck`) to work in PGXS usage (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust JIT code to prepare for forthcoming LLVM API change",
      "description": "LLVM 13 has made an incompatible API change that will cause crashing of our previous JIT compiler.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assuming that strings returned by GSSAPI libraries are null-terminated",
      "description": "The GSSAPI spec provides for a string pointer and length. It seems that in practice the next byte after the string is usually zero, so that our previous coding didn't actually fail; but we do have a report of AddressSanitizer complaints.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enable building with GSSAPI on MSVC",
      "description": "Fix various incompatibilities with modern Kerberos builds.",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In MSVC builds, include `--with-pgport` in the set of configure options reported by pg\\_config, if it had been specified (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "13.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "If the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\n\nWhen applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `CREATE INDEX CONCURRENTLY` to wait for the latest prepared transactions",
      "description": "Rows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for `PREPARE TRANSACTION` commands that were still in progress when `CREATE INDEX CONCURRENTLY` checked for them. As before, in installations that have enabled prepared transactions (`max_prepared_transactions` \\> 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "While it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `float4` and `float8` hash functions to produce uniform results for NaNs",
      "description": "Since PostgreSQL's floating-point types deem all NaNs to be equal, it's important for the hash functions to produce the same hash code for all bit-patterns that are NaNs according to the IEEE 754 standard. This failed to happen before, meaning that hash indexes and hash-based query plans might produce incorrect results for non-canonical NaN values. (`'-NaN'::float8` is one way to produce such a value on most machines.) It is advisable to reindex hash indexes on floating-point columns, if there is any possibility that they might contain such values.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `REINDEX CONCURRENTLY` to preserve operator class parameters that were attached to the target index (Michael Paquier) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent data loss during crash recovery of `CREATE TABLESPACE`, when `wal_level` \\= `minimal`",
      "description": "If the server crashed between `CREATE TABLESPACE` and the next checkpoint, replay would fully remove the contents of the new tablespace's directory, relying on subsequent WAL replay to restore everything within that directory. This interacts badly with optimizations that skip writing WAL (one example is `COPY` into a just-created table). Such optimizations are applied only when `wal_level` is `minimal`, which is not the default in v10 and later.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "This oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the relation cache is invalidated for all partitions of a partitioned table that is being added to or removed from a publication",
      "description": "This oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the relation cache is invalidated when creating or dropping a `FOR ALL TABLES` publication",
      "description": "This oversight could lead to improper replication behavior until all currently-existing sessions have exited.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't discard a cast to the same type with unspecified type modifier",
      "description": "For example, if column `f1` is of type `numeric(18,3)`, the parser used to simply discard a cast like `f1::numeric`, on the grounds that it would have no run-time effect. That's true, but the exposed type of the expression should still be considered to be plain `numeric`, not `numeric(18,3)`. This is important for correctly resolving the type of larger constructs, such as recursive `UNION`s.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix updates of element fields in arrays of domain over composite",
      "description": "A command such as `UPDATE tab SET fld[1].subfld = val` failed if the array's elements were domains rather than plain composites.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow the combination of `FETCH FIRST WITH TIES` and `FOR UPDATE SKIP LOCKED`",
      "description": "`FETCH FIRST WITH TIES` necessarily fetches one more row than requested, since it cannot stop until it finds a row that is not a tie. In our current implementation, if `FOR UPDATE` is used then that row will also get locked even though it is not returned. That results in undesirable behavior if the `SKIP LOCKED` option is specified. It's difficult to change this without introducing a different set of undesirable behaviors, so for now, forbid the combination.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow creating an ICU collation if the current database's encoding won't support it",
      "description": "Previously this was allowed, but then the collation could not be referenced because of the way collation lookup works; you could not use the collation, nor even drop it.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER INDEX index ALTER COLUMN col SET (options)`",
      "description": "While the parser accepted this, it's undocumented and doesn't actually work.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power()`",
      "description": "The result could be inaccurate when the first argument is very close to 1.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid regular expression errors with capturing parentheses inside `{0}`",
      "description": "Regular expressions like `(.){0}...\\1` drew “invalid backreference number”. Other regexp engines such as Perl don't complain, though, and for that matter ours doesn't either in some closely related cases. Worse, it could throw an assertion failure instead. Fix it so that no error is thrown and instead the back-reference is silently deemed to never match.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent regular expression back-references from sometimes matching when they shouldn't",
      "description": "The regexp engine was careless about clearing match data for capturing parentheses after rejecting a partial match. This could allow a later back-reference to match in places where it should fail for lack of a defined referent.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix regular expression performance bug with back-references inside iteration nodes",
      "description": "Incorrect back-tracking logic could result in exponential time spent looking for a match. Fortunately the problem is masked in most cases by other optimizations.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect results from `AT TIME ZONE` applied to a `time with time zone` value",
      "description": "The results were incorrect if the target time zone was specified by a dynamic timezone abbreviation (that is, one that is defined as equivalent to a full time zone name, rather than a fixed UTC offset).",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner error with pulling up subquery expressions into function rangetable entries",
      "description": "If a function in `FROM` laterally references the output of some sub-`SELECT` earlier in the `FROM` clause, and we are able to flatten that sub-`SELECT` into the outer query, the expression(s) copied into the function expression were not fully processed. This could lead to crashes at execution.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mistranslation of PlaceHolderVars to inheritance child relations",
      "description": "This error could result in assertion failures, or in mis-planning of queries having partitioned or inherited tables on the nullable side of an outer join.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "There are corner cases in which `ANALYZE` will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix restoration of a Portal's snapshot inside a subtransaction",
      "description": "If a procedure commits or rolls back a transaction, and then its next significant action is inside a new subtransaction, snapshot management went wrong, leading to a dangling pointer and probable crash. A typical example in PL/pgSQL is a `COMMIT` immediately followed by a `BEGIN ... EXCEPTION` block that performs a query.",
      "fixedIn": "13.5",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "This oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "This oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "fixedIn": "13.5",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "There was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `LISTEN` in background workers",
      "description": "There's no infrastructure to support this, so if someone did it, it would only result in preventing cleanup of the `NOTIFY` queue.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Send `NOTIFY` signals to other backends during transaction commit, not in the server's idle loop",
      "description": "This change allows notifications to be delivered immediately after an intra-procedure `COMMIT`. It also allows logical replication workers to send notifications.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Refuse to rewind a cursor marked `NO SCROLL` if it has been held over from a previous transaction due to the `WITH HOLD` option",
      "description": "We have long forbidden fetching backwards from a `NO SCROLL` cursor, but for historical reasons the prohibition didn't extend to cases in which we rewind the query altogether and then re-fetch forwards. That exception leads to inconsistencies, particularly for held-over cursors which may not have stored all the data necessary to rewind. Disallow rewinding for non-scrollable held-over cursors to block the worst inconsistencies. (v15 will remove the exception altogether.)",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": [
        "v15 will remove the exception altogether."
      ]
    },
    {
      "title": "Fix possible failure while saving a `WITH HOLD` cursor at transaction end, if it had already been read to completion (Tom Lane) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of a relation that has grown to the maximum allowed length",
      "description": "An attempt to extend a table or index past the limit of 2^32-1 blocks was rejected, but not soon enough to prevent inconsistent internal state from being created.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly track the presence of data-modifying CTEs when expanding a `DO INSTEAD` rule",
      "description": "The previous failure to do this could lead to problems such as unsafely choosing a parallel plan.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect reporting of permissions failures on extended statistics objects",
      "description": "The code typically produced “cache lookup error” rather than the intended message.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect snapshot handling in parallel workers",
      "description": "This oversight could lead to misbehavior in parallel queries if the transaction isolation level is less than `REPEATABLE READ`.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix logical decoding to correctly ignore toast-table changes for transient tables",
      "description": "Logical decoding normally ignores changes in transient tables such as those created during an `ALTER TABLE` heap rewrite. But that filtering wasn't applied to the associated toast table if any, leading to possible errors when rewriting a table that's being published.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix logical decoding's memory usage accounting to handle TOAST data correctly (Bertrand Drouvot) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that walreceiver processes create all required archive notification files before exiting",
      "description": "If a walreceiver exited exactly at a WAL segment boundary, it failed to make a notification file for the last-received segment, thus delaying archiving of that segment on the standby.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix computation of the WAL range to include in a backup manifest when a timeline change is involved (Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to lock the `OLD` and `NEW` pseudo-relations in a rule that uses `SELECT FOR UPDATE` (Masahiko Sawada, Tom Lane) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parser's processing of aggregate `FILTER` clauses",
      "description": "If the `FILTER` expression is a plain boolean column, the semantic level of the aggregate could be mis-determined, leading to not-per-spec behavior. If the `FILTER` expression is itself a boolean-returning aggregate, an error should be thrown but was not, likely resulting in a crash at execution.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the correct lock level is used when renaming a table",
      "description": "For historical reasons, `ALTER INDEX ... RENAME` can be applied to any sort of relation. The lock level required to rename an index is lower than that required to rename a table or other kind of relation, but the code got this wrong and would use the weaker lock level whenever the command is spelled `ALTER INDEX`.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `ALTER TYPE/DOMAIN/OPERATOR ... SET` from changing extension membership",
      "description": "`ALTER ... SET` executed by an extension script would cause the target object to become a member of the extension if it was not already. In itself this isn't too troubling, since there's little reason for an extension script to touch an object not belonging to the extension. But `ALTER TYPE SET` will recurse to dependent domains, thus causing them to also become extension members. This causes unwanted side-effects from extension upgrade scripts that use that command to adjust the properties of a base type belonging to the extension. Fix by redefining these `ALTER` cases to never change extension membership.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to clean up LLVM state after an error within LLVM",
      "description": "This prevents a likely crash during backend exit after a fatal LLVM error.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export()` or a related function fails (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that scans of SP-GiST indexes are counted in the statistics views",
      "description": "Incrementing the number-of-index-scans counter was overlooked in the SP-GiST code, although per-tuple counters were advanced correctly.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inefficient code generation for CoerceToDomain expression nodes (Ranier Vilela) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate relevant wait intervals if `recovery_min_apply_delay` is changed during recovery (Soumyadeep Chakraborty, Ashwin Agrawal) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix infinite loop if a `simplehash.h` hash table reaches 2^32 elements",
      "description": "It seems unlikely that this bug has been hit in practice, as it would require `work_mem` settings of hundreds of gigabytes for existing uses of `simplehash.h`.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid O(N^2) behavior in some list-manipulation operations",
      "description": "These changes fix slow processing in several scenarios, including: when a standby replays a transaction that held many exclusive locks on the primary; when many files are due to be unlinked after a checkpoint; when hash aggregation involves many batches; and when `pg_trgm` extracts indexable conditions from a complex regular expression. Only the first of these scenarios has actually been reported from the field, but they all seem like plausible consequences of inefficient list deletions.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce memory consumption during calculation of extended statistics (Justin Pryzby, Tomas Vondra) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add more defensive checks around B-tree posting list splits",
      "description": "This change should help detect index corruption involving duplicate table TIDs.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow setting `huge_pages` to `on` when `shared_memory_type` is `sysv`",
      "description": "Previously, this setting was accepted, but it did nothing for lack of any implementation.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix missing libpq functions on AIX",
      "description": "Code reorganization led to the following documented functions not being exported from libpq on AIX: `pg_encoding_to_char()`, `pg_utf_mblen()`, `pg_char_to_encoding()`, `pg_valid_server_encoding()`, and `pg_valid_server_encoding_id()`. Restore them to visibility.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ecpg to recover correctly after `malloc()` failure while establishing a connection (Michael Paquier) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misevaluation of stable functions called in the arguments of a PL/pgSQL `CALL` statement",
      "description": "They were being called with an out-of-date snapshot, so that they would not see any database changes made since the start of the session's top-level command.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `EXIT` out of the outermost block in a PL/pgSQL routine",
      "description": "If the routine does not require an explicit `RETURN`, this usage should be valid, but it was rejected.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove pg\\_ctl's hard-coded limits on the total length of generated commands",
      "description": "For example, this removes a restriction on how many command-line options can be passed through to the postmaster. Individual path names that pg\\_ctl deals with, such as the postmaster executable's name or the data directory name, are still limited to `MAXPGPATH` bytes in most cases.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to dump non-global default privileges correctly",
      "description": "If a global (unrestricted) `ALTER DEFAULT PRIVILEGES` command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted `ALTER DEFAULT PRIVILEGES` command granted that privilege again for a selected role or schema, pg\\_dump failed to dump the restricted privilege grant correctly.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "This oversight was usually pretty harmless, since once pg\\_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "fixedIn": "13.5",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Improve pg\\_dump's performance by avoiding making per-table queries for RLS policies, and by avoiding repetitive calls to `format_type()`",
      "description": "These changes provide only marginal improvement when dumping from a local server, but a dump from a remote server can benefit substantially due to fewer network round-trips.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in pg\\_dump when attempting to dump trigger definitions from a pre-8.3 server (Tom Lane) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect filename in pg\\_restore's error message about an invalid large object TOC file (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that pgbench exits with non-zero status after a socket-level failure",
      "description": "The desired behavior is to finish out the run but then exit with status 2\\. Also, fix the reporting of such errors.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `\"char\"` (not `` char(_`n`_) ``) columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change `contrib/pg_stat_statements` to read its “query texts” file in units of at most 1GB",
      "description": "Such large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix null-pointer crash when `contrib/postgres_fdw` tries to report a data conversion error (Tom Lane) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add spinlock support for the RISC-V architecture",
      "description": "This is essential for reasonable performance on that platform.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support OpenSSL 3.0.0 (Peter Eisentraut, Daniel Gustafsson, Michael Paquier) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Set correct type identifier on OpenSSL BIO (I/O abstraction) objects created by PostgreSQL",
      "description": "This oversight probably only matters for code that is doing tasks like auditing the OpenSSL installation. But it's nominally a violation of the OpenSSL API, so fix it.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix our `pkg-config` files to again support static linking of libpq (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `pg_regexec()` robust against an out-of-range _`searchstart`_ parameter",
      "description": "Return `REG_NOMATCH`, instead of possibly crashing, when _`searchstart`_ is past the end of the string. This case is probably unreachable within core PostgreSQL, but extensions might be more careless about the parameter value.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `GetSharedSecurityLabel()` can be used in a newly-started session that has not yet built its critical relation cache entries (Jeff Davis) ",
      "description": "",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "When running on Windows, initdb attempts to set the new cluster's `timezone` parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.",
      "description": "Also, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port\\_of\\_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "fixedIn": "13.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enforce standard locking protocol for TOAST table updates, to prevent problems with `REINDEX CONCURRENTLY`",
      "description": "If applied to a TOAST table or TOAST table's index, `REINDEX CONCURRENTLY` tended to produce a corrupted index. This happened because sessions updating TOAST entries released their `ROW EXCLUSIVE` locks immediately, rather than holding them until transaction commit as all other updates do. The fix is to make TOAST updates hold the table lock according to the normal rule. Any existing corrupted indexes can be repaired by reindexing again.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid null-pointer crash in `ALTER STATISTICS` when the statistics object is dropped concurrently (Tomas Vondra) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect plan creation for parallel single-child Append nodes",
      "description": "In some cases the Append would be simplified away when it should not be, leading to wrong query results (duplicated rows).",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "If an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "While the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix checking of `anycompatible`\\-family data type matches",
      "description": "In some cases the parser would think that a function or operator with `anycompatible`\\-family polymorphic parameters matches a set of arguments that it really shouldn't match. In reported cases, that led to matching more than one operator to a call, leading to ambiguous-operator errors; but a failure later on is also possible.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "If a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In logical replication, avoid double transmission of a child table's data",
      "description": "If a publication includes both child and parent tables, and has the `publish_via_partition_root` option set, subscribers uselessly initiated synchronization on both child and parent tables. Ensure that only the parent table is synchronized in such cases.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "The walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction (Alex Kingsborough, Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be sure to `fsync` the `pg_logical/mappings` subdirectory during checkpoints",
      "description": "On some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "A previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows `ANALYZE` to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual `ANALYZE` on the partitioned table if you want to maintain such statistics.)",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": [
        "But note that autovacuum does not process partitioned tables as such",
        "so you must periodically issue manual `ANALYZE` on the partitioned table if you want to maintain such statistics."
      ]
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Currently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "This restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "The same prohibition already existed for primary key indexes.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update cached table state during `ALTER TABLE ADD PRIMARY KEY USING INDEX`",
      "description": "Concurrent sessions failed to update their opinion of whether the table has a primary key, possibly causing incorrect logical replication behavior.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Concurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow parallel vacuuming and concurrent index building to be ignored while computing oldest xmin",
      "description": "Non-parallelized instances of these operations were already ignored, but the logic did not work for parallelized cases. Holding back the xmin horizon has undesirable effects such as delaying vacuum cleanup.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaking memory during `REASSIGN OWNED BY` operations that reassign ownership of many objects (Justin Pryzby) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of walsenders sending logical changes by avoiding unnecessary cache accesses (Hou Zhijie) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix display of `cert` authentication method's options in `pg_hba_file_rules` view",
      "description": "The `cert` authentication method implies `clientcert=verify-full`, but the `pg_hba_file_rules` view incorrectly reported `clientcert=verify-ca`.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "A whole-row variable would be printed as “var.\\*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix one-byte buffer overrun when applying Unicode string normalization to an empty string",
      "description": "The practical impact of this is limited thanks to alignment considerations; but in debug builds, a warning was raised.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "These errors should affect only debug builds, not production.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib (Tom Lane) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid calling `strerror` from libpq's `PQcancel` function",
      "description": "`PQcancel` is supposed to be safe to call from a signal handler, but `strerror` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make psql's `\\password` command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "This agrees with the documented behavior, and avoids probable permissions failure if `SET ROLE` or `SET SESSION AUTHORIZATION` has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql `\\d` command's query for identifying parent triggers",
      "description": "The previous coding failed with “more than one row returned by a subquery used as an expression” if a partition had triggers and there were unrelated statement-level triggers of the same name on some parent partitioned table.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql's tab-completion of label values for enum types (Tom Lane) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext()` from a control-C signal handler",
      "description": "While no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow canceling the initial password prompt in pg\\_receivewal and pg\\_recvlogical",
      "description": "Previously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's dump ordering for user-defined casts",
      "description": "In rare cases, the output script might refer to a user-defined cast before it had been created.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's `--inserts` and `--column-inserts` modes to handle tables containing both generated columns and dropped columns (Tom Lane) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible mis-reporting of errors in pg\\_dump and pg\\_basebackup",
      "description": "The previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix results of index-only scans on `contrib/btree_gist` indexes on `` char(_`N`_) `` columns",
      "description": "Index-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store `` char(_`N`_) `` values with the expected amount of space padding. The behavior of such an index will not change immediately unless you `REINDEX` it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "With Python 3.10, this avoids configure\\-time warnings about distutils being deprecated and scheduled for removal in Python 3.12\\. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later (Victor Wagner) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for building with Visual Studio 2022 (Hans Buschmann) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the `.bat` wrapper scripts in our MSVC build system to be called without first changing into their directory (Anton Voloshin, Andrew Dunstan) ",
      "description": "",
      "fixedIn": "13.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix default signature length for `gist_ltree_ops` indexes",
      "description": "The default signature length (hash size) for GiST indexes on `ltree` columns was accidentally changed while upgrading that operator class to support operator class parameters. If any operations had been done on such an index without first upgrading the `ltree` extension to version 1.2, they were done assuming that the signature length was 28 bytes rather than the intended 8\\. This means it is very likely that such indexes are now corrupt. For safety we recommend re-indexing all GiST indexes on `ltree` columns after installing this update. (Note that GiST indexes on `ltree[]` columns, that is arrays of `ltree`, are not affected.)",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": [
        "Note that GiST indexes on `ltree[]` columns",
        "that is arrays of `ltree`",
        "are not affected."
      ]
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "The column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\n\nIn cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type `record` to begin with and there's no issue.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect output for types `timestamptz` and `timetz` in `table_to_xmlschema()` and allied functions",
      "description": "The xmlschema output for these types included a malformed regular expression.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns (Tom Lane) ",
      "description": "",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner errors for `GROUPING()` constructs that reference outer query levels (Richard Guo, Tom Lane) ",
      "description": "",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "The previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid accessing a no-longer-pinned shared buffer while attempting to lock an outdated tuple during EvalPlanQual",
      "description": "The code would touch the buffer a couple more times after releasing its pin. In theory another process could recycle the buffer (or more likely, try to defragment its free space) as soon as the pin is gone, probably leading to failure to find the newer version of the tuple.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering (Aliaksandr Kalenik) ",
      "description": "",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER FUNCTION` to support changing a function's parallelism property and its `SET`\\-variable list in the same command",
      "description": "The parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bogus errors from attempts to alter system columns of tables",
      "description": "The system should just tell you that you can't do it, but sometimes it would report “no owned sequence found” instead.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-sorting of table rows when `CLUSTER`ing using an index whose leading key is an expression",
      "description": "The table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix risk of deadlock failures while dropping a partitioned index",
      "description": "Ensure that the required table and index locks are taken in the standard order (parents before children, tables before indexes). The previous coding for `DROP INDEX` did it differently, and so could deadlock against concurrent queries taking these locks in the standard order.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition between `DROP TABLESPACE` and checkpointing",
      "description": "The checkpoint forced by `DROP TABLESPACE` could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible trouble in crash recovery after a `TRUNCATE` command that overlaps a checkpoint",
      "description": "`TRUNCATE` must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Temporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve wait logic in RegisterSyncRequest",
      "description": "If we run out of space in the checkpointer sync request queue (which is hopefully rare on real systems, but is common when testing with a very small buffer pool), we wait for it to drain. While waiting, we should report that as a wait event so that users know what is going on, and also watch for postmaster death, since otherwise the loop might never terminate if the checkpointer has already exited.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record (Sami Imseih) ",
      "description": "",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "With unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible mis-identification of the correct ancestor relation to publish logical replication changes through",
      "description": "If `publish_via_partition_root` is enabled, and there are multiple publications naming different ancestors of the currently-modified relation, the wrong ancestor might be chosen for reporting the change.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the `max_sync_workers_per_subscription` limit",
      "description": "Faulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Otherwise subscribers cannot see the values and will fail to replicate the update.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope correctly with platforms that have no support for altering the server process's display in ps(1)",
      "description": "Few platforms are like this (the only supported one is Cygwin), so we'd managed not to notice that refactoring introduced a potential memory clobber.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Perl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "This change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6\\. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix behavior of libpq's `PQisBusy()` function after a connection failure",
      "description": "If we'd detected a write failure, `PQisBusy()` would always return true, which is the wrong thing: we want input processing to carry on normally until we've read whatever is available from the server. The practical effect of this error is that applications using libpq's async-query API would typically detect connection loss only when `PQconsumeInput()` returns a hard failure. With this fix, a connection loss will normally be reported via an error `PGresult` object, which is a much cleaner behavior for most applications.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "pg\\_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg\\_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error handling in pg\\_waldump",
      "description": "While trying to read a WAL file to determine the WAL segment size, pg\\_waldump would report an incorrect error for the case of a too-short file. In addition, the file name reported in this and related error messages could be garbage.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `contrib/pageinspect` functions cope with all-zero pages",
      "description": "This is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pageinspect`, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "These changes make it less likely that the module will crash on bad data.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "This fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update JIT code to work with LLVM 14 (Thomas Munro) ",
      "description": "",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Most of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions (Tom Lane) ",
      "description": "",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible build failure of pg\\_dumpall on Windows, when not using MSVC to build (Andres Freund) ",
      "description": "",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "This adapts the build process to work on recent MSys tool chains.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "For some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine. (Tom Lane) ",
      "description": "",
      "fixedIn": "13.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix replay of `CREATE DATABASE` WAL records on standby servers",
      "description": "Standby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Normally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the `CREATE DATABASE` replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In extended query protocol, force an immediate commit after `CREATE DATABASE` and other commands that can't run in a transaction block",
      "description": "If the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "`TransactionIdIsInProgress` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type (Tom Lane) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function (Richard Guo) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect plans when sorting by an expression that contains a non-top-level set-returning function (Richard Guo, Tom Lane) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid planner core dump with `` _`constant`_ = ANY(_`array`_) `` clauses when there are MCV-type extended statistics on the _`array`_ variable (Tom Lane) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables",
      "description": "In certain cases, a “trigger does not exist” failure would occur because the command would try to adjust the trigger on a child partition that doesn't have it.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve syntax error messages for type `jsonpath` (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `pg_stat_get_subscription()` from possibly returning an extra row containing garbage values (Kuntal Ghosh) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_stop_backup()` cleans up session state properly",
      "description": "This omission could lead to assertion failures or crashes later in the session.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "In corner cases, a misleading error could be reported.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject `ROW()` expressions and functions in `FROM` that have too many columns",
      "description": "Cases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When decompiling a view or rule, show a `SELECT` output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "Previously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made",
      "description": "This oversight could lead to dump/reload or pg\\_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "If `CREATE OPERATOR CLASS` results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Previously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent triggering of standby's `wal_receiver_timeout` during logical replication of large transactions",
      "description": "If a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders (Fujii Masao) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in logical replication subscribers (Hou Zhijie) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix logical replication's checking of replica identity when the target table is partitioned",
      "description": "The replica identity columns have to be re-identified for the child partition.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failures to update cached schema data in a logical replication subscriber after a schema change on the publisher (Shi Yu, Hou Zhijie) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Such cases could result in harmless warning messages.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Previously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags (Haiyang Wang) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix erroneous assertion checks in shared hashtable management (Thomas Munro) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Arrange to clean up after commit-time errors within `SPI_commit()`, rather than expecting callers to do that",
      "description": "Proper cleanup is complicated and requires use of low-level facilities, so it's not surprising that no known caller got it right. This led to misbehaviors when a PL procedure issued `COMMIT` but a failure occurred (such as a deferred constraint check). To improve matters, redefine `SPI_commit()` as starting a new transaction, so that it becomes equivalent to `SPI_commit_and_chain()` except that you get default transaction characteristics instead of preserving the prior transaction's characteristics. To make this somewhat transparent API-wise, redefine `SPI_start_transaction()` as a no-op. All known callers of `SPI_commit()` immediately call `SPI_start_transaction()`, so they will not notice any change. Similar remarks apply to `SPI_rollback()`.\n\nAlso fix PL/Python, which omitted any handling of such errors at all, resulting in jumping out of the Python interpreter. This is reported to crash Python 3.11\\. Older Python releases leak some memory but seem okay with it otherwise.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "In the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Certain operations such as `EXEC SQL PREPARE` would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale()` calls",
      "description": "Allocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql's `\\watch` command, echo a newline after cancellation with control-C",
      "description": "This prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible report of wrong error condition after `clone()` failure in pg\\_upgrade with `--clone` option (Justin Pryzby) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/pg_stat_statements` to avoid problems with very large query-text files on 32-bit platforms (Tom Lane) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `contrib/postgres_fdw` sends constants of `regconfig` and other `reg*` types with proper schema qualification (Tom Lane) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "This avoids problems when a signal interrupts `posix_fallocate()`.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open()`",
      "description": "This avoids a possible crash on Solaris.",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36 (Dagfinn Ilmari Mannsåker) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap\\_r library when multiple OpenLDAP installations are present while building PostgreSQL (Tom Lane) ",
      "description": "",
      "fixedIn": "13.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid rare PANIC during updates occurring concurrently with `VACUUM`",
      "description": "If a concurrent `VACUUM` sets the all-visible flag bit in a page that `UPDATE` or `DELETE` is in process of modifying, the updating command needs to clear that bit again; but some code paths failed to do so, ending in a PANIC exit and database restart.\n\nThis is known to be possible in versions 14 and 15\\. It may be only latent in previous branches.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `VACUUM` to press on if an attempted page deletion in a btree index fails to find the page's parent downlink",
      "description": "Rather than throwing an error, just log the issue and continue without deleting the empty page. Previously, a buggy operator class or corrupted index could indefinitely prevent completion of vacuuming of the index, eventually leading to transaction wraparound problems.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an `INSERT` on an updatable view",
      "description": "This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix resource management bug in saving tuples for `AFTER` triggers",
      "description": "Given the right circumstances, this manifested as a “tupdesc reference _`NNNN`_ is not owned by resource owner” error followed by a PANIC exit.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair rare failure of MULTIEXPR\\_SUBLINK subplans in inherited updates",
      "description": "Use of the syntax `UPDATE tab SET (c1, ...) = (SELECT ...)` with an inherited or partitioned target table could result in failure if the child tables are sufficiently dissimilar. This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix construction of per-partition foreign key constraints while doing `ALTER TABLE ATTACH PARTITION`",
      "description": "Previously, incorrect or duplicate constraints could be constructed for the newly-added partition.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix generation of constraint names for per-partition foreign key constraints",
      "description": "If the initially-given name is already in use for some constraint of the partition, a new one is selected; but it wasn't being spelled as intended.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect matching of index expressions and predicates when creating a partitioned index",
      "description": "While creating a partitioned index, we try to identify any existing indexes on the partitions that match the partitioned index, so that we can absorb those as child indexes instead of building new ones. Matching of expressions was not done right, so that a usable child index might be ignored, leading to creation of a duplicative index.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "When a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "This ameliorates problems with slow shutdown of replication workers.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent attempts to replicate into a foreign-table partition in replication workers",
      "description": "Although partitioned tables can have foreign tables as partitions, replicating into such a partition isn't currently supported. The logical replication worker process would crash if it was attempted. Now, an error is thrown.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove pointless check on replica identity setting of partitioned tables",
      "description": "What matters is the replica identity setting of the leaf partitions, so there's no need to throw error if it's not set on the parent.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "If a syntax error occurred in a SQL-language or PL/pgSQL-language `CREATE FUNCTION` or `DO` command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "If a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": [
        "Within core PostgreSQL",
        "the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types."
      ]
    },
    {
      "title": "Fix type `circle`'s equality comparator to handle NaNs properly",
      "description": "If the left-hand circle had a floating-point NaN for its radius, it would be considered equal to a circle with the same center and any radius.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "If the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Improper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add plan-time check for attempted access to a table that has no table access method",
      "description": "This prevents a crash in some catalog-corruption scenarios, for example use of a view whose `ON SELECT` rule is missing.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add some more defenses against recursion till stack overrun (Richard Guo, Tom Lane) ",
      "description": "",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid misbehavior when choosing hash table size with very small `work_mem` and large tuples (Zhang Mingli) ",
      "description": "",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "The lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve PL/pgSQL's ability to handle parameters declared as `RECORD`",
      "description": "Build a separate function cache entry for each concrete type passed to the `RECORD` parameter during a session, much as we do for polymorphic parameters. This allows some usages to work that previously failed with errors such as “type of parameter does not match that when preparing the plan”.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "There's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()` and `PQisnonblocking()` didn't get that memo, so fix them.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple `varchar` or `bytea` variables are declared in the same declaration",
      "description": "For example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only `str1` was marked `static`.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg\\_basebackup",
      "description": "Allow the remote path in `--tablespace-mapping` to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_stat\\_statements, fix access to already-freed memory",
      "description": "This occurred if pg\\_stat\\_statements tracked a `ROLLBACK` command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In postgres\\_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "This avoids “variable not found in subplan target list” errors in rare cases.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create()` function",
      "description": "The uuid-ossp module expects libc's `uuid_create()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()`.)",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Add `PostgreSQL/Test/Cluster.pm` and `PostgreSQL/Test/Utils.pm` to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "This avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibilities with LLVM 15 (Thomas Munro, Andres Freund) ",
      "description": "",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set()` for spinlocks on any machine",
      "description": "This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane) ",
      "description": "",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using `sprintf`, to avoid compile-time deprecation warnings (Tom Lane) ",
      "description": "",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "13.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.",
      "description": "Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala\\_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan\\_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy\\_River, America/Thunder\\_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n\nThese zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of `timestamptz` display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n\nIt is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "fixedIn": "13.9",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Stored procedures can now return data via `OUT` parameters.",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "The SQL-standard `SEARCH` and `CYCLE` options for common table expressions have been implemented.",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Subscripting can now be applied to any data type for which it is a useful notation, not only arrays. In this release, the `jsonb` and `hstore` types have gained subscripting operators.",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Range types have been extended by adding multiranges, allowing representation of noncontiguous data ranges.",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "`VACUUM` automatically becomes more aggressive, and skips inessential cleanup, if the database starts to approach a transaction ID wraparound condition.",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "User-defined objects that reference certain built-in array functions along with their argument types must be recreated",
      "description": "Specifically, [array\\_append()](https://www.postgresql.org/docs/14/functions-array.html \"9.19. Array Functions and Operators\"), `array_prepend()`, `array_cat()`, `array_position()`, `array_positions()`, `array_remove()`, `array_replace()`, and [width\\_bucket()](https://www.postgresql.org/docs/14/functions-math.html \"9.3. Mathematical Functions and Operators\") used to take `anyarray` arguments but now take `anycompatiblearray`. Therefore, user-defined objects like aggregates and operators that reference those array function signatures must be dropped before upgrading, and recreated once the upgrade completes.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove deprecated containment operators `@` and `~` for built-in [geometric data types](https://www.postgresql.org/docs/14/functions-geometry.html \"9.11. Geometric Functions and Operators\") and contrib modules [cube](https://www.postgresql.org/docs/14/cube.html \"F.9. cube\"), [hstore](https://www.postgresql.org/docs/14/hstore.html \"F.16. hstore\"), [intarray](https://www.postgresql.org/docs/14/intarray.html \"F.18. intarray\"), and [seg](https://www.postgresql.org/docs/14/seg.html \"F.36. seg\")",
      "description": "The more consistently named `<@` and `@>` have been recommended for many years.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [to\\_tsquery()](https://www.postgresql.org/docs/14/functions-textsearch.html \"9.13. Text Search Functions and Operators\") and `websearch_to_tsquery()` to properly parse query text containing discarded tokens",
      "description": "Certain discarded tokens, like underscore, caused the output of these functions to produce incorrect tsquery output, e.g., both `websearch_to_tsquery('\"pg_class pg\"')` and `to_tsquery('pg_class <-> pg')` used to output `( 'pg' & 'class' ) <-> 'pg'`, but now both output `'pg' <-> 'class' <-> 'pg'`.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [websearch\\_to\\_tsquery()](https://www.postgresql.org/docs/14/functions-textsearch.html \"9.13. Text Search Functions and Operators\") to properly parse multiple adjacent discarded tokens in quotes",
      "description": "Previously, quoted text that contained multiple adjacent discarded tokens was treated as multiple tokens, causing incorrect tsquery output, e.g., `websearch_to_tsquery('\"aaa: bbb\"')` used to output `'aaa' <2> 'bbb'`, but now outputs `'aaa' <-> 'bbb'`.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [EXTRACT()](https://www.postgresql.org/docs/14/functions-datetime.html \"9.9. Date/Time Functions and Operators\") to return type `numeric` instead of `float8`",
      "description": "This avoids loss-of-precision issues in some usages. The old behavior can still be obtained by using the old underlying function `date_part()`.\n\nAlso, `EXTRACT(date)` now throws an error for units that are not part of the `date` data type.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [var\\_samp()](https://www.postgresql.org/docs/14/functions-aggregate.html \"9.21. Aggregate Functions\") and `stddev_samp()` with numeric parameters to return NULL when the input is a single NaN value",
      "description": "Previously `NaN` was returned.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Return false for [has\\_column\\_privilege()](https://www.postgresql.org/docs/14/functions-info.html \"9.26. System Information Functions and Operators\") checks on non-existent or dropped columns when using attribute numbers",
      "description": "Previously such attribute numbers returned an invalid-column error.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of infinite [window function](https://www.postgresql.org/docs/14/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS \"4.2.8. Window Function Calls\") ranges",
      "description": "Previously window frame clauses like `'inf' PRECEDING AND 'inf' FOLLOWING` returned incorrect results.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove factorial operators `!` and `!!`, as well as function `numeric_fac()`",
      "description": "The [factorial()](https://www.postgresql.org/docs/14/functions-math.html \"9.3. Mathematical Functions and Operators\") function is still supported.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `factorial()` of negative numbers",
      "description": "Previously such cases returned 1.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for [postfix](https://www.postgresql.org/docs/14/sql-createoperator.html \"CREATE OPERATOR\") (right-unary) operators",
      "description": "pg\\_dump and pg\\_upgrade will warn if postfix operators are being dumped.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `\\D` and `\\W` shorthands to match newlines in [regular expression](https://www.postgresql.org/docs/14/functions-matching.html#FUNCTIONS-POSIX-REGEXP \"9.7.3. POSIX Regular Expressions\") newline-sensitive mode",
      "description": "Previously they did not match newlines in this mode, but that disagrees with the behavior of other common regular expression engines. `[^[:digit:]]` or `[^[:word:]]` can be used to get the old behavior.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disregard constraints when matching regular expression [back-references](https://www.postgresql.org/docs/14/functions-matching.html#POSIX-ESCAPE-SEQUENCES \"9.7.3.3. Regular Expression Escapes\")",
      "description": "For example, in `(^\\d+).*\\1`, the `^` constraint should be applied at the start of the string, but not when matching `\\1`.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `\\w` as a range start or end in regular expression character classes",
      "description": "This previously was allowed but produced unexpected results.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require [custom server parameter](https://www.postgresql.org/docs/14/runtime-config-custom.html \"20.16. Customized Options\") names to use only characters that are valid in unquoted SQL identifiers (Tom Lane) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change the default of the [password\\_encryption](https://www.postgresql.org/docs/14/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION) server parameter to `scram-sha-256`",
      "description": "Previously it was `md5`. All new passwords will be stored as SHA256 unless this server setting is changed or the password is specified in MD5 format. Also, the legacy (and undocumented) Boolean-like values which were previously synonyms for `md5` are no longer accepted.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove server parameter `vacuum_cleanup_index_scale_factor`",
      "description": "This setting was ignored starting in PostgreSQL version 13.3.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove server parameter `operator_precedence_warning`",
      "description": "This setting was used for warning applications about PostgreSQL 9.5 changes.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Overhaul the specification of `clientcert` in [pg\\_hba.conf](https://www.postgresql.org/docs/14/auth-pg-hba-conf.html \"21.1. The pg_hba.conf File\")",
      "description": "Values `1`/`0`/`no-verify` are no longer supported; only the strings `verify-ca` and `verify-full` can be used. Also, disallow `verify-ca` if cert authentication is enabled since cert requires `verify-full` checking.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for [SSL](https://www.postgresql.org/docs/14/runtime-config-connection.html#RUNTIME-CONFIG-CONNECTION-SSL \"20.3.3. SSL\") compression",
      "description": "This was already disabled by default in previous PostgreSQL releases, and most modern OpenSSL and TLS versions no longer support it.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove server and [libpq](https://www.postgresql.org/docs/14/libpq.html \"Chapter 34. libpq — C Library\") support for the version 2 [wire protocol](https://www.postgresql.org/docs/14/protocol.html \"Chapter 53. Frontend/Backend Protocol\")",
      "description": "This was last used as the default in PostgreSQL 7.3 (released in 2002).",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow single-quoting of the language name in the [CREATE/DROP LANGUAGE](https://www.postgresql.org/docs/14/sql-createlanguage.html \"CREATE LANGUAGE\") command (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove the [composite types](https://www.postgresql.org/docs/14/xfunc-sql.html#XFUNC-SQL-COMPOSITE-FUNCTIONS \"38.5.3. SQL Functions on Composite Types\") that were formerly created for sequences and toast tables (Tom Lane) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Process doubled quote marks in [ecpg](https://www.postgresql.org/docs/14/ecpg.html \"Chapter 36. ECPG — Embedded SQL in C\") SQL command strings correctly",
      "description": "Previously `'abc''def'` was passed to the server as `'abc'def'`, and `\"abc\"\"def\"` was passed as `\"abc\"def\"`, causing syntax errors.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove contrib program pg\\_standby (Justin Pryzby) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent [tablefunc](https://www.postgresql.org/docs/14/tablefunc.html \"F.40. tablefunc\")'s function `normal_rand()` from accepting negative values",
      "description": "Negative values produced undesirable results.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add predefined roles [pg\\_read\\_all\\_data](https://www.postgresql.org/docs/14/predefined-roles.html \"22.5. Predefined Roles\") and `pg_write_all_data`",
      "description": "These non-login roles can be used to give read or write permission to all tables, views, and sequences.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add predefined role [pg\\_database\\_owner](https://www.postgresql.org/docs/14/predefined-roles.html \"22.5. Predefined Roles\") that contains only the current database's owner",
      "description": "This is especially useful in template databases.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove temporary files after backend crashes",
      "description": "Previously, such files were retained for debugging purposes. If necessary, deletion can be disabled with the new server parameter [remove\\_temp\\_files\\_after\\_crash](https://www.postgresql.org/docs/14/runtime-config-developer.html#GUC-REMOVE-TEMP-FILES-AFTER-CRASH).",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow long-running queries to be canceled if the client disconnects",
      "description": "The server parameter [client\\_connection\\_check\\_interval](https://www.postgresql.org/docs/14/runtime-config-connection.html#GUC-CLIENT-CONNECTION-CHECK-INTERVAL) allows control over whether loss of connection is checked for intra-query. (This is supported on Linux and a few other operating systems.)",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": [
        "This is supported on Linux and a few other operating systems."
      ]
    },
    {
      "title": "Add an optional timeout parameter to [pg\\_terminate\\_backend()](https://www.postgresql.org/docs/14/functions-admin.html#FUNCTIONS-ADMIN-SIGNAL \"9.27.2. Server Signaling Functions\") (Magnus Hagander) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add Server Name Indication (SNI) in SSL connection packets",
      "description": "This can be disabled by turning off client connection option [sslsni](https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-PARAMKEYWORDS \"34.1.2. Parameter Key Words\").",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow vacuum to more eagerly add deleted btree pages to the free space map",
      "description": "Previously vacuum could only add pages to the free space map that were marked as deleted by previous vacuums.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow vacuum to reclaim space used by unused trailing heap line pointers (Matthias van de Meent, Peter Geoghegan) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow vacuum to be more aggressive in removing dead rows during minimal-locking index operations",
      "description": "Specifically, `CREATE INDEX CONCURRENTLY` and `REINDEX CONCURRENTLY` no longer limit the dead row removal of other relations.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add ability to skip vacuuming of TOAST tables",
      "description": "[VACUUM](https://www.postgresql.org/docs/14/sql-vacuum.html \"VACUUM\") now has a `PROCESS_TOAST` option which can be set to false to disable TOAST processing, and [vacuumdb](https://www.postgresql.org/docs/14/app-vacuumdb.html \"vacuumdb\") has a `--no-process-toast` option.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [COPY FREEZE](https://www.postgresql.org/docs/14/sql-copy.html \"COPY\") appropriately update page visibility bits (Anastasia Lubennikova, Pavan Deolasee, Jeff Janes) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cause vacuum operations to be more aggressive if the table is near xid or multixact wraparound",
      "description": "This is controlled by [vacuum\\_failsafe\\_age](https://www.postgresql.org/docs/14/runtime-config-client.html#GUC-VACUUM-FAILSAFE-AGE) and [vacuum\\_multixact\\_failsafe\\_age](https://www.postgresql.org/docs/14/runtime-config-client.html#GUC-VACUUM-MULTIXACT-FAILSAFE-AGE).",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add per-index information to [autovacuum logging output](https://www.postgresql.org/docs/14/runtime-config-logging.html#GUC-LOG-AUTOVACUUM-MIN-DURATION) (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow partitions to be [detached](https://www.postgresql.org/docs/14/sql-altertable.html \"ALTER TABLE\") in a non-blocking manner",
      "description": "The syntax is `ALTER TABLE ... DETACH PARTITION ... CONCURRENTLY`, and `FINALIZE`.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore `COLLATE` clauses in partition boundary values",
      "description": "Previously any such clause had to match the collation of the partition key; but it's more consistent to consider that it's automatically coerced to the collation of the partition key.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow btree index additions to [remove expired index entries](https://www.postgresql.org/docs/14/btree-implementation.html#BTREE-DELETION \"64.4.2. Bottom-up Index Deletion\") to prevent page splits",
      "description": "This is particularly helpful for reducing index bloat on tables whose indexed columns are frequently updated.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [BRIN](https://www.postgresql.org/docs/14/brin.html \"Chapter 68. BRIN Indexes\") indexes to record multiple min/max values per range",
      "description": "This is useful if there are groups of values in each page range.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow BRIN indexes to use bloom filters",
      "description": "This allows BRIN indexes to be used effectively with data that is not well-localized in the heap.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [SP-GiST](https://www.postgresql.org/docs/14/spgist.html \"Chapter 66. SP-GiST Indexes\") indexes to contain `INCLUDE`'d columns (Pavel Borisov) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow hash lookup for `IN` clauses with many constants",
      "description": "Previously the code always sequentially scanned the list of values.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Increase the number of places [extended statistics](https://www.postgresql.org/docs/14/planner-stats.html#PLANNER-STATS-EXTENDED \"14.2.2. Extended Statistics\") can be used for `OR` clause estimation (Tomas Vondra, Dean Rasheed) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow extended statistics on expressions",
      "description": "This allows statistics on a group of expressions and columns, rather than only columns like previously. System view [pg\\_stats\\_ext\\_exprs](https://www.postgresql.org/docs/14/view-pg-stats-ext-exprs.html \"52.91. pg_stats_ext_exprs\") reports such statistics.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [EXPLAIN CREATE TABLE AS](https://www.postgresql.org/docs/14/sql-explain.html \"EXPLAIN\") and `EXPLAIN CREATE MATERIALIZED VIEW` to honor `IF NOT EXISTS`",
      "description": "Previously, if the object already existed, `EXPLAIN` would fail.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add executor method to memoize results from the inner side of a nested-loop join",
      "description": "This is useful if only a small percentage of rows is checked on the inner side. It can be disabled via server parameter [enable\\_memoize](https://www.postgresql.org/docs/14/runtime-config-query.html#GUC-ENABLE-MEMOIZE).",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [window functions](https://www.postgresql.org/docs/14/functions-window.html \"9.22. Window Functions\") to perform incremental sorts (David Rowley) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow a query referencing multiple [foreign tables](https://www.postgresql.org/docs/14/sql-createforeigntable.html \"CREATE FOREIGN TABLE\") to perform foreign table scans in parallel",
      "description": "[postgres\\_fdw](https://www.postgresql.org/docs/14/postgres-fdw.html \"F.35. postgres_fdw\") supports this type of scan if `async_capable` is set.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [analyze](https://www.postgresql.org/docs/14/routine-vacuuming.html#VACUUM-FOR-STATISTICS \"25.1.3. Updating Planner Statistics\") to do page prefetching",
      "description": "This is controlled by [maintenance\\_io\\_concurrency](https://www.postgresql.org/docs/14/runtime-config-resource.html#GUC-MAINTENANCE-IO-CONCURRENCY).",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add ability to use [LZ4 compression](https://www.postgresql.org/docs/14/sql-createtable.html \"CREATE TABLE\") on TOAST data",
      "description": "This can be set at the column level, or set as a default via server parameter [default\\_toast\\_compression](https://www.postgresql.org/docs/14/runtime-config-client.html#GUC-DEFAULT-TOAST-COMPRESSION). The server must be compiled with [\\--with-lz4](https://www.postgresql.org/docs/14/install-procedure.html#CONFIGURE-OPTIONS-FEATURES \"17.4.1.2. PostgreSQL Features\") to support this feature. The default setting is still pglz.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "If server parameter [compute\\_query\\_id](https://www.postgresql.org/docs/14/runtime-config-statistics.html#GUC-COMPUTE-QUERY-ID) is enabled, display the query id in [pg\\_stat\\_activity](https://www.postgresql.org/docs/14/monitoring-stats.html#MONITORING-PG-STAT-ACTIVITY-VIEW \"28.2.3. pg_stat_activity\"), [EXPLAIN VERBOSE](https://www.postgresql.org/docs/14/sql-explain.html \"EXPLAIN\"), [csvlog](https://www.postgresql.org/docs/14/runtime-config-logging.html \"20.8. Error Reporting and Logging\"), and optionally in [log\\_line\\_prefix](https://www.postgresql.org/docs/14/runtime-config-logging.html#GUC-LOG-LINE-PREFIX)",
      "description": "A query id computed by an extension will also be displayed.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add information about the original user name supplied by the client to the output of [log\\_connections](https://www.postgresql.org/docs/14/runtime-config-logging.html#GUC-LOG-CONNECTIONS) (Jacob Champion) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_stat\\_progress\\_copy](https://www.postgresql.org/docs/14/progress-reporting.html#COPY-PROGRESS-REPORTING \"28.4.6. COPY Progress Reporting\") to report `COPY` progress (Josef Šimánek, Matthias van de Meent) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_stat\\_wal](https://www.postgresql.org/docs/14/monitoring-stats.html#MONITORING-PG-STAT-WAL-VIEW \"28.2.12. pg_stat_wal\") to report WAL activity (Masahiro Ikeda) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_stat\\_replication\\_slots](https://www.postgresql.org/docs/14/monitoring-stats.html#MONITORING-PG-STAT-REPLICATION-SLOTS-VIEW \"28.2.5. pg_stat_replication_slots\") to report replication slot activity",
      "description": "The function [pg\\_stat\\_reset\\_replication\\_slot()](https://www.postgresql.org/docs/14/monitoring-stats.html#MONITORING-STATS-FUNCTIONS \"28.2.22. Statistics Functions\") resets slot statistics.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_backend\\_memory\\_contexts](https://www.postgresql.org/docs/14/view-pg-backend-memory-contexts.html \"52.67. pg_backend_memory_contexts\") to report session memory usage (Atsushi Torikoshi, Fujii Masao) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [pg\\_log\\_backend\\_memory\\_contexts()](https://www.postgresql.org/docs/14/functions-admin.html#FUNCTIONS-ADMIN-SIGNAL \"9.27.2. Server Signaling Functions\") to output the memory contexts of arbitrary backends (Atsushi Torikoshi) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add session statistics to the [pg\\_stat\\_database](https://www.postgresql.org/docs/14/monitoring-stats.html#MONITORING-PG-STAT-DATABASE-VIEW \"28.2.13. pg_stat_database\") system view (Laurenz Albe) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add columns to [pg\\_prepared\\_statements](https://www.postgresql.org/docs/14/view-pg-prepared-statements.html \"52.77. pg_prepared_statements\") to report generic and custom plan counts (Atsushi Torikoshi, Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add lock wait start time to [pg\\_locks](https://www.postgresql.org/docs/14/view-pg-locks.html \"52.74. pg_locks\") (Atsushi Torikoshi) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make the archiver process visible in `pg_stat_activity` (Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add wait event [WalReceiverExit](https://www.postgresql.org/docs/14/monitoring-stats.html#MONITORING-PG-STAT-ACTIVITY-VIEW \"28.2.3. pg_stat_activity\") to report WAL receiver exit wait time (Fujii Masao) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Implement information schema view [routine\\_column\\_usage](https://www.postgresql.org/docs/14/infoschema-routine-column-usage.html \"37.40. routine_column_usage\") to track columns referenced by function and procedure default expressions (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow an SSL certificate's distinguished name (DN) to be matched for client certificate authentication",
      "description": "The new [pg\\_hba.conf](https://www.postgresql.org/docs/14/auth-pg-hba-conf.html \"21.1. The pg_hba.conf File\") option `clientname=DN` allows comparison with certificate attributes beyond the `CN` and can be combined with ident maps.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `pg_hba.conf` and [pg\\_ident.conf](https://www.postgresql.org/docs/14/auth-username-maps.html \"21.2. User Name Maps\") records to span multiple lines",
      "description": "A backslash at the end of a line allows record contents to be continued on the next line.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the specification of a certificate revocation list (CRL) directory",
      "description": "This is controlled by server parameter [ssl\\_crl\\_dir](https://www.postgresql.org/docs/14/runtime-config-connection.html#GUC-SSL-CRL-DIR) and libpq connection option [sslcrldir](https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-SSLCRLDIR). Previously only single CRL files could be specified.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow passwords of an arbitrary length (Tom Lane, Nathan Bossart) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server parameter [idle\\_session\\_timeout](https://www.postgresql.org/docs/14/runtime-config-client.html#GUC-IDLE-SESSION-TIMEOUT) to close idle sessions",
      "description": "This is similar to [idle\\_in\\_transaction\\_session\\_timeout](https://www.postgresql.org/docs/14/runtime-config-client.html#GUC-IDLE-IN-TRANSACTION-SESSION-TIMEOUT).",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [checkpoint\\_completion\\_target](https://www.postgresql.org/docs/14/runtime-config-wal.html#GUC-CHECKPOINT-COMPLETION-TARGET) default to 0.9",
      "description": "The previous default was 0.5.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `%P` in [log\\_line\\_prefix](https://www.postgresql.org/docs/14/runtime-config-logging.html#GUC-LOG-LINE-PREFIX) to report the parallel group leader's PID for a parallel worker (Justin Pryzby) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [unix\\_socket\\_directories](https://www.postgresql.org/docs/14/runtime-config-connection.html#GUC-UNIX-SOCKET-DIRECTORIES) to specify paths as individual, comma-separated quoted strings",
      "description": "Previously all the paths had to be in a single quoted string.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow startup allocation of dynamic shared memory",
      "description": "This is controlled by [min\\_dynamic\\_shared\\_memory](https://www.postgresql.org/docs/14/runtime-config-resource.html#GUC-MIN-DYNAMIC-SHARED-MEMORY). This allows more use of huge pages.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server parameter [huge\\_page\\_size](https://www.postgresql.org/docs/14/runtime-config-resource.html#GUC-HUGE-PAGE-SIZE) to control the size of huge pages used on Linux (Odin Ugedal) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow standby servers to be rewound via [pg\\_rewind](https://www.postgresql.org/docs/14/app-pgrewind.html \"pg_rewind\") (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the [restore\\_command](https://www.postgresql.org/docs/14/runtime-config-wal.html#GUC-RESTORE-COMMAND) setting to be changed during a server reload",
      "description": "You can also set `restore_command` to an empty string and reload to force recovery to only read from the [pg\\_wal](https://www.postgresql.org/docs/14/storage-file-layout.html \"70.1. Database File Layout\") directory.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server parameter [log\\_recovery\\_conflict\\_waits](https://www.postgresql.org/docs/14/runtime-config-logging.html#GUC-LOG-RECOVERY-CONFLICT-WAITS) to report long recovery conflict wait times (Bertrand Drouvot, Masahiko Sawada) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Pause recovery on a hot standby server if the primary changes its parameters in a way that prevents replay on the standby",
      "description": "Previously the standby would shut down immediately.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [pg\\_get\\_wal\\_replay\\_pause\\_state()](https://www.postgresql.org/docs/14/functions-admin.html#FUNCTIONS-RECOVERY-CONTROL \"9.27.4. Recovery Control Functions\") to report the recovery state",
      "description": "It gives more detailed information than [pg\\_is\\_wal\\_replay\\_paused()](https://www.postgresql.org/docs/14/functions-admin.html#FUNCTIONS-RECOVERY-CONTROL \"9.27.4. Recovery Control Functions\"), which still exists.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new read-only server parameter [in\\_hot\\_standby](https://www.postgresql.org/docs/14/runtime-config-preset.html#GUC-IN-HOT-STANDBY)",
      "description": "This allows clients to easily detect whether they are connected to a hot standby server.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [pg\\_xact\\_commit\\_timestamp\\_origin()](https://www.postgresql.org/docs/14/functions-info.html \"9.26. System Information Functions and Operators\") to return the commit timestamp and replication origin of the specified transaction (Movead Li) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the replication origin to the record returned by [pg\\_last\\_committed\\_xact()](https://www.postgresql.org/docs/14/functions-info.html \"9.26. System Information Functions and Operators\") (Movead Li) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow replication [origin functions](https://www.postgresql.org/docs/14/functions-admin.html#FUNCTIONS-REPLICATION \"9.27.6. Replication Management Functions\") to be controlled using standard function permission controls",
      "description": "Previously these functions could only be executed by superusers, and this is still the default.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logical replication to stream long in-progress transactions to subscribers",
      "description": "Previously transactions that exceeded [logical\\_decoding\\_work\\_mem](https://www.postgresql.org/docs/14/runtime-config-resource.html#GUC-LOGICAL-DECODING-WORK-MEM) were written to disk until the transaction completed.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow multiple transactions during table sync in logical replication (Peter Smith, Amit Kapila, Takamichi Osumi) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Immediately WAL\\-log subtransaction and top-level `XID` association",
      "description": "This is useful for logical decoding.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add cache invalidation messages to the WAL during command completion when using logical replication",
      "description": "This allows logical streaming of in-progress transactions. When logical replication is disabled, invalidation messages are generated only at transaction completion.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control over whether logical decoding messages are sent to the replication stream (David Pirotte, Euler Taveira) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logical decoding to be filtered by xid (Markus Wanner) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow an alias to be specified for `JOIN`'s `USING` clause",
      "description": "The alias is created by writing `AS` after the `USING` clause. It can be used as a table qualification for the merged `USING` columns.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly handle `DEFAULT` entries in multi-row `VALUES` lists in `INSERT`",
      "description": "Such cases used to throw an error.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL\\-standard `SEARCH` and `CYCLE` clauses for [common table expressions](https://www.postgresql.org/docs/14/queries-with.html \"7.8. WITH Queries (Common Table Expressions)\")",
      "description": "The same results could be accomplished using existing syntax, but much less conveniently.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow column names in the `WHERE` clause of `ON CONFLICT` to be table-qualified",
      "description": "Only the target table can be referenced, however.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [REFRESH MATERIALIZED VIEW](https://www.postgresql.org/docs/14/sql-refreshmaterializedview.html \"REFRESH MATERIALIZED VIEW\") to use parallelism (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `REINDEX` to process all child tables or indexes of a partitioned relation (Justin Pryzby, Michael Paquier) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow index commands using `CONCURRENTLY` to avoid waiting for the completion of other operations using `CONCURRENTLY` (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Preserve SQL standard syntax for SQL-defined functions in [view definitions](https://www.postgresql.org/docs/14/sql-createview.html \"CREATE VIEW\")",
      "description": "Previously, calls to SQL-standard functions such as [EXTRACT()](https://www.postgresql.org/docs/14/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT \"9.9.1. EXTRACT, date_part\") were shown in plain function-call syntax. The original syntax is now preserved when displaying a view or rule.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the SQL\\-standard clause `GRANTED BY` to [GRANT](https://www.postgresql.org/docs/14/sql-grant.html \"GRANT\") and [REVOKE](https://www.postgresql.org/docs/14/sql-revoke.html \"REVOKE\") (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `OR REPLACE` option for [CREATE TRIGGER](https://www.postgresql.org/docs/14/sql-createtrigger.html \"CREATE TRIGGER\")",
      "description": "This allows pre-existing triggers to be conditionally replaced.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add primary keys, unique constraints, and foreign keys to [system catalogs](https://www.postgresql.org/docs/14/catalogs.html \"Chapter 52. System Catalogs\")",
      "description": "These changes help GUI tools analyze the system catalogs. The existing unique indexes of catalogs now have associated `UNIQUE` or `PRIMARY KEY` constraints. Foreign key relationships are not actually stored or implemented as constraints, but can be obtained for display from the function [pg\\_get\\_catalog\\_foreign\\_keys()](https://www.postgresql.org/docs/14/functions-info.html#FUNCTIONS-INFO-CATALOG-TABLE \"Table 9.70. System Catalog Information Functions\").",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [CURRENT\\_ROLE](https://www.postgresql.org/docs/14/functions-info.html \"9.26. System Information Functions and Operators\") every place `CURRENT_USER` is accepted (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow extensions and built-in data types to implement [subscripting](https://www.postgresql.org/docs/14/sql-altertype.html \"ALTER TYPE\")",
      "description": "Previously subscript handling was hard-coded into the server, so that subscripting could only be applied to array types. This change allows subscript notation to be used to extract or assign portions of a value of any type for which the concept makes sense.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow subscripting of [JSONB](https://www.postgresql.org/docs/14/datatype-json.html \"8.14. JSON Types\")",
      "description": "`JSONB` subscripting can be used to extract and assign to portions of `JSONB` documents.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for [multirange data types](https://www.postgresql.org/docs/14/rangetypes.html \"8.17. Range Types\")",
      "description": "These are like range data types, but they allow the specification of multiple, ordered, non-overlapping ranges. An associated multirange type is automatically created for every range type.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for the [stemming](https://www.postgresql.org/docs/14/textsearch-dictionaries.html#TEXTSEARCH-SNOWBALL-DICTIONARY \"12.6.6. Snowball Dictionary\") of languages Armenian, Basque, Catalan, Hindi, Serbian, and Yiddish (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [tsearch data files](https://www.postgresql.org/docs/14/textsearch-intro.html#TEXTSEARCH-INTRO-CONFIGURATIONS \"12.1.3. Configurations\") to have unlimited line lengths",
      "description": "The previous limit was 4K bytes. Also remove function `t_readline()`.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for `Infinity` and `-Infinity` values in the [numeric data type](https://www.postgresql.org/docs/14/datatype-numeric.html \"8.1. Numeric Types\")",
      "description": "Floating-point data types already supported these.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [point operators](https://www.postgresql.org/docs/14/functions-geometry.html \"9.11. Geometric Functions and Operators\") `<<|` and `|>>` representing strictly above/below tests",
      "description": "Previously these were called `>^` and `<^`, but that naming is inconsistent with other geometric data types. The old names remain available, but may someday be removed.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add operators to add and subtract [LSN](https://www.postgresql.org/docs/14/datatype-pg-lsn.html \"8.20. pg_lsn Type\") and numeric (byte) values (Fujii Masao) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [binary data transfer](https://www.postgresql.org/docs/14/protocol-overview.html#PROTOCOL-FORMAT-CODES \"53.1.3. Formats and Format Codes\") to be more forgiving of array and record `OID` mismatches (Tom Lane) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Create composite array types for system catalogs",
      "description": "User-defined relations have long had composite types associated with them, and also array types over those composite types. System catalogs now do as well. This change also fixes an inconsistency that creating a user-defined table in single-user mode would fail to create a composite array type.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [procedures](https://www.postgresql.org/docs/14/sql-createprocedure.html \"CREATE PROCEDURE\") to have `OUT` parameters (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow some array functions to operate on a mix of compatible data types",
      "description": "The functions [array\\_append()](https://www.postgresql.org/docs/14/functions-array.html \"9.19. Array Functions and Operators\"), `array_prepend()`, `array_cat()`, `array_position()`, `array_positions()`, `array_remove()`, `array_replace()`, and [width\\_bucket()](https://www.postgresql.org/docs/14/functions-math.html \"9.3. Mathematical Functions and Operators\") now take `anycompatiblearray` instead of `anyarray` arguments. This makes them less fussy about exact matches of argument types.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL\\-standard [trim\\_array()](https://www.postgresql.org/docs/14/functions-array.html \"9.19. Array Functions and Operators\") function",
      "description": "This could already be done with array slices, but less easily.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `bytea` equivalents of [ltrim()](https://www.postgresql.org/docs/14/functions-binarystring.html \"9.5. Binary String Functions and Operators\") and `rtrim()` (Joel Jacobson) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support negative indexes in [split\\_part()](https://www.postgresql.org/docs/14/functions-string.html \"9.4. String Functions and Operators\")",
      "description": "Negative values start from the last field and count backward.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [string\\_to\\_table()](https://www.postgresql.org/docs/14/functions-string.html \"9.4. String Functions and Operators\") function to split a string on delimiters",
      "description": "This is similar to the [regexp\\_split\\_to\\_table()](https://www.postgresql.org/docs/14/functions-string.html \"9.4. String Functions and Operators\") function.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [unistr()](https://www.postgresql.org/docs/14/functions-string.html \"9.4. String Functions and Operators\") function to allow Unicode characters to be specified as backslash-hex escapes in strings",
      "description": "This is similar to how Unicode can be specified in literal strings.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [bit\\_xor()](https://www.postgresql.org/docs/14/functions-aggregate.html \"9.21. Aggregate Functions\") XOR aggregate function (Alexey Bashtanov) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [bit\\_count()](https://www.postgresql.org/docs/14/functions-binarystring.html \"9.5. Binary String Functions and Operators\") to return the number of bits set in a bit or byte string (David Fetter) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [date\\_bin()](https://www.postgresql.org/docs/14/functions-datetime.html#FUNCTIONS-DATETIME-BIN \"9.9.3. date_bin\") function",
      "description": "This function “bins” input timestamps, grouping them into intervals of a uniform length aligned with a specified origin.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [make\\_timestamp()](https://www.postgresql.org/docs/14/functions-datetime.html \"9.9. Date/Time Functions and Operators\")/`make_timestamptz()` to accept negative years",
      "description": "Negative values are interpreted as `BC` years.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add newer regular expression [substring()](https://www.postgresql.org/docs/14/functions-string.html \"9.4. String Functions and Operators\") syntax",
      "description": "The new SQL-standard syntax is `SUBSTRING(text SIMILAR pattern ESCAPE escapechar)`. The previous standard syntax was `SUBSTRING(text FROM pattern FOR escapechar)`, which is still accepted by PostgreSQL.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow complemented character class escapes [\\\\D](https://www.postgresql.org/docs/14/functions-matching.html#POSIX-ESCAPE-SEQUENCES \"9.7.3.3. Regular Expression Escapes\"), `\\S`, and `\\W` within regular expression brackets (Tom Lane) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [\\[\\[:word:\\]\\]](https://www.postgresql.org/docs/14/functions-matching.html#POSIX-BRACKET-EXPRESSIONS \"9.7.3.2. Bracket Expressions\") as a regular expression character class, equivalent to `\\w` (Tom Lane) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow more flexible data types for default values of [lead()](https://www.postgresql.org/docs/14/functions-window.html \"9.22. Window Functions\") and `lag()` window functions (Vik Fearing) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make non-zero [floating-point values](https://www.postgresql.org/docs/14/datatype-numeric.html#DATATYPE-FLOAT \"8.1.3. Floating-Point Types\") divided by infinity return zero",
      "description": "Previously such operations produced underflow errors.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make floating-point division of NaN by zero return NaN",
      "description": "Previously this returned an error.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cause [exp()](https://www.postgresql.org/docs/14/functions-math.html \"9.3. Mathematical Functions and Operators\") and `power()` for negative-infinity exponents to return zero",
      "description": "Previously they often returned underflow errors.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Mark built-in type coercion functions as leakproof where possible",
      "description": "This allows more use of functions that require type conversion in security-sensitive situations.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [pg\\_describe\\_object()](https://www.postgresql.org/docs/14/functions-info.html \"9.26. System Information Functions and Operators\"), `pg_identify_object()`, and `pg_identify_object_as_address()` to always report helpful error messages for non-existent objects (Michael Paquier) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow plpgsql's [RETURN QUERY](https://www.postgresql.org/docs/14/plpgsql-control-structures.html \"43.6. Control Structures\") to execute its query using parallelism (Tom Lane) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pipeline](https://www.postgresql.org/docs/14/libpq-pipeline-mode.html#LIBPQ-PIPELINE-SENDING \"34.5.1.1. Issuing Queries\") mode to libpq",
      "description": "This allows multiple queries to be sent, only waiting for completion when a specific synchronization message is sent.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow an ECPG SQL identifier to be linked to a specific connection",
      "description": "This is done via [DECLARE ... STATEMENT](https://www.postgresql.org/docs/14/ecpg-sql-declare-statement.html \"DECLARE STATEMENT\").",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [vacuumdb](https://www.postgresql.org/docs/14/app-vacuumdb.html \"vacuumdb\") to skip index cleanup and truncation",
      "description": "The options are `--no-index-cleanup` and `--no-truncate`.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_dump](https://www.postgresql.org/docs/14/app-pgdump.html \"pg_dump\") to dump only certain extensions",
      "description": "This is controlled by option `--extension`.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pgbench](https://www.postgresql.org/docs/14/pgbench.html \"pgbench\") `permute()` function to randomly shuffle values (Fabien Coelho, Hironobu Suzuki, Dean Rasheed) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include disconnection times in the reconnection overhead measured by pgbench with `-C` (Yugo Nagata) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow multiple verbose option specifications (`-v`) to increase the logging verbosity",
      "description": "This behavior is supported by [pg\\_dump](https://www.postgresql.org/docs/14/app-pgdump.html \"pg_dump\"), [pg\\_dumpall](https://www.postgresql.org/docs/14/app-pg-dumpall.html \"pg_dumpall\"), and [pg\\_restore](https://www.postgresql.org/docs/14/app-pgrestore.html \"pg_restore\").",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add an access method column to psql's `\\d[i|m|t]+` output (Georgios Kokolatos) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql's `\\dt` and `\\di` to show TOAST tables and their indexes (Justin Pryzby) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add psql command `\\dX` to list extended statistics objects (Tatsuro Yamada) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql's `\\dT` to understand array syntax and backend grammar aliases, like `int` for `integer` (Greg Sabino Mullane, Tom Lane) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When editing the previous query or a file with psql's `\\e`, or using `\\ef` and `\\ev`, ignore the results if the editor exits without saving",
      "description": "Previously, such edits would load the previous query into the query buffer, and typically execute it immediately. This was deemed to be probably not what the user wants.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add command-line utility [pg\\_amcheck](https://www.postgresql.org/docs/14/app-pgamcheck.html \"pg_amcheck\") to simplify running `contrib/amcheck` tests on many relations (Mark Dilger) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `--no-instructions` option to [initdb](https://www.postgresql.org/docs/14/app-initdb.html \"initdb\")",
      "description": "This suppresses the server startup instructions that are normally printed.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Stop [pg\\_upgrade](https://www.postgresql.org/docs/14/pgupgrade.html \"pg_upgrade\") from creating `analyze_new_cluster` script",
      "description": "Instead, give comparable [vacuumdb](https://www.postgresql.org/docs/14/app-vacuumdb.html \"vacuumdb\") instructions.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for the [postmaster](https://www.postgresql.org/docs/14/app-postgres.html \"postgres\") `-o` option",
      "description": "This option was unnecessary since all passed options could already be specified directly.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename \"Default Roles\" to [\"Predefined Roles\"](https://www.postgresql.org/docs/14/predefined-roles.html \"22.5. Predefined Roles\") (Bruce Momjian, Stephen Frost) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add documentation for the [factorial()](https://www.postgresql.org/docs/14/functions-math.html#FUNCTION-FACTORIAL) function",
      "description": "With the removal of the ! operator in this release, `factorial()` is the only built-in way to compute a factorial.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add configure option [\\--with-ssl={openssl}](https://www.postgresql.org/docs/14/install-procedure.html#CONFIGURE-OPTIONS-FEATURES \"17.4.1.2. PostgreSQL Features\") to allow future choice of the SSL library to use",
      "description": "The spelling `--with-openssl` is kept for compatibility.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for [abstract Unix-domain sockets](https://www.postgresql.org/docs/14/runtime-config-connection.html#GUC-UNIX-SOCKET-DIRECTORIES)",
      "description": "This is currently supported on Linux and Windows.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow Windows to properly handle files larger than four gigabytes",
      "description": "For example this allows [COPY,](https://www.postgresql.org/docs/14/sql-copy.html \"COPY\") [WAL](https://www.postgresql.org/docs/14/install-procedure.html#CONFIGURE-OPTIONS-MISC \"17.4.1.5. Miscellaneous\") files, and relation segment files to be larger than four gigabytes.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server parameter [debug\\_discard\\_caches](https://www.postgresql.org/docs/14/runtime-config-developer.html#GUC-DEBUG-DISCARD-CACHES) to control cache flushing for test purposes",
      "description": "Previously this behavior could only be set at compile time. To invoke it during initdb, use the new option `--discard-caches`.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add a test module for the regular expression package (Tom Lane) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for LLVM version 12 (Andres Freund) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change SHA1, SHA2, and MD5 hash computations to use the OpenSSL EVP API",
      "description": "This is more modern and supports FIPS mode.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove separate build-time control over the choice of random number generator",
      "description": "This is now always determined by the choice of SSL library.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add direct conversion routines between EUC\\_TW and Big5 encodings (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add collation version support for FreeBSD (Thomas Munro) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [amadjustmembers](https://www.postgresql.org/docs/14/index-api.html \"62.1. Basic API Structure for Indexes\") to the index access method API",
      "description": "This allows an index access method to provide validity checking during creation of a new operator class or family.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow subscripting of [hstore](https://www.postgresql.org/docs/14/hstore.html \"F.16. hstore\") values (Tom Lane, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow GiST/GIN [pg\\_trgm](https://www.postgresql.org/docs/14/pgtrgm.html \"F.33. pg_trgm\") indexes to do equality lookups",
      "description": "This is similar to `LIKE` except no wildcards are honored.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the [cube](https://www.postgresql.org/docs/14/cube.html \"F.9. cube\") data type to be transferred in binary mode (KaiGai Kohei) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pgstattuple\\_approx()](https://www.postgresql.org/docs/14/pgstattuple.html \"F.31. pgstattuple\") to report on TOAST tables (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add contrib module [pg\\_surgery](https://www.postgresql.org/docs/14/pgsurgery.html \"F.32. pg_surgery\") which allows changes to row visibility",
      "description": "This is useful for correcting database corruption.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add contrib module [old\\_snapshot](https://www.postgresql.org/docs/14/oldsnapshot.html \"F.22. old_snapshot\") to report the `XID`/time mapping used by an active [old\\_snapshot\\_threshold](https://www.postgresql.org/docs/14/runtime-config-resource.html#GUC-OLD-SNAPSHOT-THRESHOLD) (Robert Haas) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [amcheck](https://www.postgresql.org/docs/14/amcheck.html \"F.2. amcheck\") to also check heap pages",
      "description": "Previously it only checked B-Tree index pages.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pageinspect](https://www.postgresql.org/docs/14/pageinspect.html \"F.23. pageinspect\") to inspect GiST indexes (Andrey Borodin, Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change pageinspect block numbers to be [bigints](https://www.postgresql.org/docs/14/datatype-numeric.html#DATATYPE-INT \"8.1.1. Integer Types\") (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Mark [btree\\_gist](https://www.postgresql.org/docs/14/btree-gist.html \"F.7. btree_gist\") functions as parallel safe (Steven Winfield) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Move query hash computation from pg\\_stat\\_statements to the core server",
      "description": "The new server parameter [compute\\_query\\_id](https://www.postgresql.org/docs/14/runtime-config-statistics.html#GUC-COMPUTE-QUERY-ID)'s default of `auto` will automatically enable query id computation when this extension is loaded.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cause pg\\_stat\\_statements to track top and nested statements separately",
      "description": "Previously, when tracking all statements, identical top and nested statements were tracked as a single entry; but it seems more useful to separate such usages.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add row counts for utility commands to pg\\_stat\\_statements (Fujii Masao, Katsuragi Yuta, Seino Yuki) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `pg_stat_statements_info` system view to show pg\\_stat\\_statements activity (Katsuragi Yuta, Yuki Seino, Naoki Nakamichi) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow postgres\\_fdw to `INSERT` rows in bulk (Takayuki Tsunakawa, Tomas Vondra, Amit Langote) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow postgres\\_fdw to import table partitions if specified by [IMPORT FOREIGN SCHEMA ... LIMIT TO](https://www.postgresql.org/docs/14/sql-importforeignschema.html \"IMPORT FOREIGN SCHEMA\")",
      "description": "By default, only the root of a partitioned table is imported.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add postgres\\_fdw function `postgres_fdw_get_connections()` to report open foreign server connections (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control over whether foreign servers keep connections open after transaction completion",
      "description": "This is controlled by `keep_connections` and defaults to on.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow postgres\\_fdw to reestablish foreign server connections if necessary",
      "description": "Previously foreign server restarts could cause foreign table access errors.",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add postgres\\_fdw functions to discard cached connections (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix physical replication for cases where the primary crashes after shipping a WAL segment that ends with a partial WAL record",
      "description": "If the primary did not survive long enough to finish writing the rest of the incomplete WAL record, then the previous crash-recovery logic had it back up and overwrite WAL starting from the beginning of the incomplete WAL record. This is problematic since standby servers may already have copies of that WAL segment. They will then see an inconsistent next segment, and will not be able to recover without manual intervention. To fix, do not back up over a WAL segment boundary when restarting after a crash. Instead write a new type of WAL record at the start of the next WAL segment, informing readers that the incomplete WAL record will never be finished and must be disregarded.\n\nWhen applying this update, it's best to update standby servers before the primary, so that they will be ready to handle this new WAL record type if the primary happens to crash.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that parallel `VACUUM` doesn't miss any indexes",
      "description": "A parallel `VACUUM` would fail to process indexes that are below the `min_parallel_index_scan_size` cutoff, if the table also has at least two indexes that are above that size. This could result in those indexes becoming corrupt, since they'd still contain references to any heap entries removed by the `VACUUM`; subsequent queries using such indexes would be likely to return rows they shouldn't. This problem does not affect autovacuum, since it doesn't use parallel vacuuming. However, it is advisable to reindex any manually-vacuumed tables that have the right mix of index sizes.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `CREATE INDEX CONCURRENTLY` to wait for the latest prepared transactions",
      "description": "Rows inserted by just-prepared transactions might be omitted from the new index, causing queries relying on the index to miss such rows. The previous fix for this type of problem failed to account for `PREPARE TRANSACTION` commands that were still in progress when `CREATE INDEX CONCURRENTLY` checked for them. As before, in installations that have enabled prepared transactions (`max_prepared_transactions` \\> 0), it's recommended to reindex any concurrently-built indexes in case this problem occurred when they were built.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition that can cause backends to fail to add entries for new rows to an index being built concurrently",
      "description": "While it's apparently rare in the field, this case could potentially affect any index built or reindexed with the `CONCURRENTLY` option. It is recommended to reindex any such indexes to make sure they are correct.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `REINDEX CONCURRENTLY` to preserve operator class parameters that were attached to the target index (Michael Paquier) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect creation of shared dependencies when cloning a database that contains non-builtin objects",
      "description": "The effects of this error are probably limited in practice. In principle, it could allow a role to be dropped while it still owns objects; but most installations would never want to drop a role that had been used for objects they'd added to `template1`.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the relation cache is invalidated for a table being attached to or detached from a partitioned table",
      "description": "This oversight could allow misbehavior of subsequent inserts/updates addressed directly to the partition, but only in currently-existing sessions.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corruption of parse tree while creating a range type",
      "description": "`CREATE TYPE` incorrectly freed an element of the parse tree, which could cause problems for a later event trigger, or if the `CREATE TYPE` command was stored in the plan cache and used again later.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix updates of element fields in arrays of domain over composite",
      "description": "A command such as `UPDATE tab SET fld[1].subfld = val` failed if the array's elements were domains rather than plain composites.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow the combination of `FETCH FIRST WITH TIES` and `FOR UPDATE SKIP LOCKED`",
      "description": "`FETCH FIRST WITH TIES` necessarily fetches one more row than requested, since it cannot stop until it finds a row that is not a tie. In our current implementation, if `FOR UPDATE` is used then that row will also get locked even though it is not returned. That results in undesirable behavior if the `SKIP LOCKED` option is specified. It's difficult to change this without introducing a different set of undesirable behaviors, so for now, forbid the combination.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER INDEX index ALTER COLUMN col SET (options)`",
      "description": "While the parser accepted this, it's undocumented and doesn't actually work.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case loss of precision in numeric `power()`",
      "description": "The result could be inaccurate when the first argument is very close to 1.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid choosing the wrong hash equality operator for Memoize plans",
      "description": "This error could result in crashes or incorrect query results.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner error with pulling up subquery expressions into function rangetable entries",
      "description": "If a function in `FROM` laterally references the output of some sub-`SELECT` earlier in the `FROM` clause, and we are able to flatten that sub-`SELECT` into the outer query, the expression(s) copied into the function expression were not fully processed. This could lead to crashes at execution.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using MCV-only statistics to estimate the range of a column",
      "description": "There are corner cases in which `ANALYZE` will build a most-common-values (MCV) list but not a histogram, even though the MCV list does not account for all the observed values. In such cases, keep the planner from using the MCV list alone to estimate the range of column values.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix restoration of a Portal's snapshot inside a subtransaction",
      "description": "If a procedure commits or rolls back a transaction, and then its next significant action is inside a new subtransaction, snapshot management went wrong, leading to a dangling pointer and probable crash. A typical example in PL/pgSQL is a `COMMIT` immediately followed by a `BEGIN ... EXCEPTION` block that performs a query.",
      "fixedIn": "14.1",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Clean up correctly if a transaction fails after exporting its snapshot",
      "description": "This oversight would only cause a problem if the same session attempted to export a snapshot again. The most likely scenario for that is creation of a replication slot (followed by rollback) and then creation of another replication slot.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent wraparound of overflowed-subtransaction tracking on standby servers",
      "description": "This oversight could cause significant performance degradation (manifesting as excessive SubtransSLRU traffic) on standby servers.",
      "fixedIn": "14.1",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Ensure that prepared transactions are properly accounted for during promotion of a standby server",
      "description": "There was a narrow window where a prepared transaction could be omitted from a snapshot taken by a concurrently-running session. If that session then used the snapshot to perform data updates, erroneous results or data corruption could occur.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “could not find RecursiveUnion” error when `EXPLAIN` tries to print a filter condition attached to a WorkTableScan node (Tom Lane) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the correct lock level is used when renaming a table",
      "description": "For historical reasons, `ALTER INDEX ... RENAME` can be applied to any sort of relation. The lock level required to rename an index is lower than that required to rename a table or other kind of relation, but the code got this wrong and would use the weaker lock level whenever the command is spelled `ALTER INDEX`.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid null-pointer-dereference crash when dropping a role that owns objects being dropped concurrently (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent “snapshot reference leak” warning when `lo_export()` or a related function fails (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inefficient code generation for CoerceToDomain expression nodes (Ranier Vilela) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid O(N^2) behavior in some list-manipulation operations",
      "description": "These changes fix slow processing in several scenarios, including: when a standby replays a transaction that held many exclusive locks on the primary; when many files are due to be unlinked after a checkpoint; when hash aggregation involves many batches; and when `pg_trgm` extracts indexable conditions from a complex regular expression. Only the first of these scenarios has actually been reported from the field, but they all seem like plausible consequences of inefficient list deletions.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add more defensive checks around B-tree posting list splits",
      "description": "This change should help detect index corruption involving duplicate table TIDs.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when inserting NaN into a BRIN float8 or float4 minmax\\_multi\\_ops index",
      "description": "In production builds, such cases would result in a somewhat inefficient, but not actually incorrect, index.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the autovacuum launcher process to respond to `pg_log_backend_memory_contexts()` requests more quickly (Koyu Tanigawa) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in HMAC hash calculations (Sergey Shinderuk) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow setting `huge_pages` to `on` when `shared_memory_type` is `sysv`",
      "description": "Previously, this setting was accepted, but it did nothing for lack of any implementation.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix checking of query type in PL/pgSQL's `RETURN QUERY` statement",
      "description": "`RETURN QUERY` should accept any query that can return tuples, e.g. `UPDATE RETURNING`. v14 accidentally disallowed anything but `SELECT`; moreover, the `RETURN QUERY EXECUTE` variant failed to apply any query-type check at all.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to dump non-global default privileges correctly",
      "description": "If a global (unrestricted) `ALTER DEFAULT PRIVILEGES` command revoked some present-by-default privilege, for example `EXECUTE` for functions, and then a restricted `ALTER DEFAULT PRIVILEGES` command granted that privilege again for a selected role or schema, pg\\_dump failed to dump the restricted privilege grant correctly.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_dump acquire shared lock on partitioned tables that are to be dumped",
      "description": "This oversight was usually pretty harmless, since once pg\\_dump has locked any of the leaf partitions, that would suffice to prevent significant DDL on the partitioned table itself. However problems could ensue when dumping a childless partitioned table, since no relevant lock would be held.",
      "fixedIn": "14.1",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Fix crash in pg\\_dump when attempting to dump trigger definitions from a pre-8.3 server (Tom Lane) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect filename in pg\\_restore's error message about an invalid large object TOC file (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that pgbench exits with non-zero status after a socket-level failure",
      "description": "The desired behavior is to finish out the run but then exit with status 2\\. Also, fix the reporting of such errors.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent pg\\_amcheck from checking temporary relations, as well as indexes that are invalid or not ready",
      "description": "This avoids unhelpful checks of relations that will almost certainly appear inconsistent.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `contrib/amcheck` skip unlogged tables when running on a standby server",
      "description": "It's appropriate to do this since such tables will be empty, and unlogged indexes were already handled similarly.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change `contrib/pg_stat_statements` to read its “query texts” file in units of at most 1GB",
      "description": "Such large query text files are very unusual, but if they do occur, the previous coding would fail on Windows 64 (which rejects individual read requests of more than 2GB).",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix null-pointer crash when `contrib/postgres_fdw` tries to report a data conversion error (Tom Lane) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `GetSharedSecurityLabel()` can be used in a newly-started session that has not yet built its critical relation cache entries (Jeff Davis) ",
      "description": "",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When running a TAP test, include the module's own directory in `PATH`",
      "description": "This allows tests to find built programs that are not installed, such as custom test drivers.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the CLDR project's data to map Windows time zone names to IANA time zones",
      "description": "When running on Windows, initdb attempts to set the new cluster's `timezone` parameter to the IANA time zone matching the system's prevailing time zone. We were using a mapping table that we'd generated years ago and updated only fitfully; unsurprisingly, it contained a number of errors as well as omissions of recently-added zones. It turns out that CLDR has been tracking the most appropriate mappings, so start using their data. This change will not affect any existing installation, only newly-initialized clusters.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2021e for DST law changes in Fiji, Jordan, Palestine, and Samoa, plus historical corrections for Barbados, Cook Islands, Guyana, Niue, Portugal, and Tonga.",
      "description": "Also, the Pacific/Enderbury zone has been renamed to Pacific/Kanton. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Africa/Accra, America/Atikokan, America/Blanc-Sablon, America/Creston, America/Curacao, America/Nassau, America/Port\\_of\\_Spain, Antarctica/DumontDUrville, and Antarctica/Syowa. In all these cases, the previous zone name remains as an alias.",
      "fixedIn": "14.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent de-duplication of btree index entries for `interval` columns",
      "description": "There are `interval` values that are distinguishable but compare equal, for example `24:00:00` and `1 day`. This breaks assumptions made by btree de-duplication, so `interval` columns need to be excluded from de-duplication. This oversight can cause incorrect results from index-only scans. Moreover, after updating amcheck will report an error for almost all such indexes. Users should reindex any btree indexes on `interval` columns.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Process `date` values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "The distance calculation for dates was backward, causing poor decisions about which entries to merge. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on `date` columns is advisable.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Process large `timestamp` and `timestamptz` values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "Infinities were mistakenly treated as having distance zero rather than a large distance from other values, causing poor decisions about which entries to merge. Also, finite-but-very-large values (near the endpoints of the representable timestamp range) could result in internal overflows, again causing poor decisions. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on `timestamp` and `timestamptz` columns is advisable if the column contains, or has contained, infinities or large finite values.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid calculation overflows in BRIN `interval_minmax_multi_ops` indexes with extreme interval values",
      "description": "This bug might have caused unexpected failures while trying to insert large interval values into such an index.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly identify the target table in an inherited `UPDATE`/`DELETE`/`MERGE` even when the parent table is excluded by constraints",
      "description": "If the initially-named table is excluded by constraints, but not all its inheritance descendants are, the first non-excluded descendant was identified as the primary target table. This would lead to firing statement-level triggers associated with that table, rather than the initially-named table as should happen. In v16, the same oversight could also lead to “invalid perminfoindex 0 in RTE with relid NNNN” errors.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intra-query memory leak in Memoize execution (Orlov Aleksej, David Rowley) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema()` is applied to a non-data-returning Portal (Boyu Yang) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw the intended error if `pgrowlocks()` is applied to a partitioned table",
      "description": "Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Report an error if `pgstatindex()`, `pgstatginindex()`, `pgstathashindex()`, or `pgstattuple()` is applied to an invalid index. If `brin_desummarize_range()`, `brin_summarize_new_values()`, `brin_summarize_range()`, or `gin_clean_pending_list()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed `CREATE INDEX` had left behind.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector()` (Tom Lane) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-allocation of the constructed `tsvector` in `tsvectorrecv()`",
      "description": "If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished `tsvector`. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit()`",
      "description": "This could lead to poor page-split decisions in GiST indexes on `tsvector` columns.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve checks for corrupt PGLZ compressed data (Flavien Guedez) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `COMMIT AND CHAIN`/`ROLLBACK AND CHAIN` to work properly when there is an unreleased savepoint",
      "description": "Instead of propagating the current transaction's properties to the new transaction, they propagated some previous transaction's properties.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `COPY FROM`, fail cleanly when an unsupported encoding conversion is needed",
      "description": "Recent refactoring accidentally removed the intended error check for this, such that it ended in “cache lookup failed for function 0” instead of a useful error message.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash in `EXPLAIN` if a parameter marked to be displayed by `EXPLAIN` has a NULL boot-time value",
      "description": "No built-in parameter fits this description, but an extension could define such a parameter.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system()`",
      "description": "This fix avoids a race condition in which a child process that has been forked off by `system()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with torn reads of `pg_control` in frontend programs",
      "description": "On some file systems, reading `pg_control` may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid torn reads of `pg_control` in relevant SQL functions",
      "description": "Acquire the appropriate lock before reading `pg_control`, to ensure we get a consistent view of that file.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "On 64-bit machines we will allow values of `track_activity_query_size` large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix briefly showing inconsistent progress statistics for `ANALYZE` on inherited tables",
      "description": "The block-level counters should be reset to zero at the same time we update the current-relation field.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix the background writer to report any WAL writes it makes to the statistics counters (Nazir Bilal Yavuz) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track the dependencies of cached `CALL` statements, and re-plan them when needed",
      "description": "DDL commands, such as replacement of a function that has been inlined into a `CALL` argument, can create the need to re-plan a `CALL` that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track nesting depth correctly when inspecting `RECORD`\\-type Vars from outer query levels",
      "description": "This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track hash function and negator function dependencies of ScalarArrayOpExpr plan nodes",
      "description": "In most cases this oversight was harmless, since these functions would be unlikely to disappear while the node's original operator remains present.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error-handling bug in `RECORD` type cache management",
      "description": "An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error (Hou Zhijie) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that standby-mode WAL recovery reports an error when an invalid page header is found (Yugo Nagata, Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix datatype size confusion in logical tape management",
      "description": "Integer overflow was possible on platforms where long is wider than int, although it would take a multiple-terabyte temporary file to cause a problem.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unintended close of syslogger process's stdin (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as `SET TRANSACTION ISOLATION LEVEL`.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Keep by-reference `attmissingval` values in a long-lived context while they are being used",
      "description": "This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate the effective value of `search_path` after `ALTER ROLE`",
      "description": "This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “could not duplicate handle” error occurring on Windows when `min_dynamic_shared_memory` is set above zero (Thomas Munro) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish`",
      "description": "This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (`contrib/bloom` does, for example).",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Formerly, only the table-level ACL would get restored if both types were present.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add logic to pg\\_upgrade to check for use of `abstime`, `reltime`, and `tinterval` data types",
      "description": "These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg\\_basebackup",
      "description": "This has only been seen to occur when the server connection runs through pgbouncer.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, do not report interrupted page deletion as corruption",
      "description": "This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before `VACUUM` had cleaned things up.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `interval` columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the `-multiply_defined suppress` linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When building `contrib/unaccent`'s rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set (Japin Li) ",
      "description": "",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list",
      "description": "Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "fixedIn": "14.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes",
      "description": "This fixes O(N^2) behavior when the list of waiters is long. In some use-cases this results in substantial throughput improvements.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent access to a no-longer-pinned buffer in `BEFORE ROW UPDATE` triggers",
      "description": "If the tuple being updated had just been updated and moved to another page by another session, there was a narrow window where we would attempt to fetch data from the new tuple version without any pin on its buffer. In principle this could result in garbage data appearing in non-updated columns of the proposed new tuple. The odds of problems in practice seem rather low, however.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failures in `heap_update()` and `heap_delete()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck",
      "description": "This error had no impact in non-assert builds.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix overly tight assertion about `false_positive_rate` parameter of BRIN bloom operator classes",
      "description": "This error had no impact in non-assert builds, either.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure during `ALTER TABLE ADD COLUMN` on a complex inheritance tree",
      "description": "If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix problems with duplicate token names in `ALTER TEXT SEARCH CONFIGURATION ... MAPPING` commands (Tender Wang, Michael Paquier) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly lock the associated table during `DROP STATISTICS`",
      "description": "Failure to acquire the lock could result in “tuple concurrently deleted” errors if the `DROP` executes concurrently with `ANALYZE`.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in `ALTER TABLE ADD COLUMN`.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add more checks for overflow in `interval_mul()` and `interval_div()`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make the `pg_file_settings` view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure if a child index is dropped concurrently with `REINDEX INDEX` on a partitioned index (Fei Changhong) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "A no-op `ALTER LARGE OBJECT OWNER` command (that is, one selecting the existing owner) passed the wrong class ID to the `PostAlterHook`, probably confusing any extension using that hook.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "The `startedInRecovery` flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups. This fix deals with the case that a top-level transaction is already marked as containing catalog changes, but its subtransaction(s) are not.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use `ClientAuthentication_hook`.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Use the BIO “app\\_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more wary about OpenSSL not setting `errno` on error",
      "description": "If `errno` isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix file descriptor leakage when a foreign data wrapper's `ForeignAsyncRequest` function fails (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In PL/pgSQL, support SQL commands that are `CREATE FUNCTION`/`CREATE PROCEDURE` with SQL-standard bodies",
      "description": "Previously, such cases failed with parsing errors due to the semicolon(s) appearing in the function body.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix libpq's handling of errors in pipelines",
      "description": "The pipeline state could get out of sync if an error is returned for reasons other than a query problem (for example, if the connection is lost). Potentially this would lead to a busy-loop in the calling application.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make libpq's `PQsendFlushRequest()` function flush the client output buffer under the same rules as other `PQsend` functions",
      "description": "In pipeline mode, it may still be necessary to call `PQflush()` as well; but this change removes some inconsistency.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "This conforms to the behavior for other dependent objects such as indexes.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make it an error for a pgbench script to end with an open pipeline",
      "description": "Previously, pgbench would behave oddly if a `\\startpipeline` command lacked a matching `\\endpipeline`. This seems like a scripting mistake rather than a case that pgbench needs to handle nicely, so throw an error.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in `contrib/intarray` if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pageinspect`'s `hash_bitmap_info()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pgstattuple`'s `pgstathashindex()` function is applied to a partitioned hash index (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg\\_ctl and pg\\_regress",
      "description": "When launching a child process via `cmd.exe`, pass the `/D` flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compilation failure of `WAL_DEBUG` code on Windows (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon. (Tom Lane) ",
      "description": "",
      "fixedIn": "14.11",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `INSERT` from multiple `VALUES` rows into a target column that is a domain over an array or composite type",
      "description": "Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "A NULL value satisfies a clause such as `` _`boolcol`_ IS NOT FALSE ``, so pruning away a partition containing NULLs yielded incorrect answers.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `ALTER FOREIGN TABLE SET SCHEMA` move any owned sequences into the new schema",
      "description": "Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve `ALTER TABLE ... ALTER COLUMN TYPE`'s error message when there is a dependent function or publication (Tom Lane) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s counting of heap pages accessed by a bitmap heap scan",
      "description": "Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "`VACUUM`'s computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another `VACUUM`.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow converting a table to a view within an outer SQL command that is using that table",
      "description": "This avoids possible crashes.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to `UNION ALL` trees that have constant outputs for the join column in some `SELECT` arms.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "This would typically end in a crash or unexpected error message.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid freeing still-in-use data in Memoize",
      "description": "In production builds this error frequently didn't cause any problems, as the freed data would most likely not get overwritten before it was used.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind _`X`_ is not yet built” error messages (David Rowley) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more careful with `RECORD`\\-returning functions in `FROM`",
      "description": "The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-rounding and overflow hazards in `date_bin()`",
      "description": "In the case where the source timestamp is before the origin timestamp and their difference is already an exact multiple of the stride, the code incorrectly subtracted the stride anyway. Also, detect some integer-overflow cases that would have produced incorrect results.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition in `pg_get_expr()`",
      "description": "If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()` or `txid_status()`.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a table's freespace map won't return a page that's past the end of the table",
      "description": "Because the freespace map isn't WAL-logged, this was possible in edge cases involving an OS crash, a replica promote, or a PITR restore. The result would be a “could not read block” error.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait` (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid corrupting exception stack if an FDW implements async append but doesn't configure any wait conditions for the Append plan node to wait for (Alexander Pyhalov) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that index-only scans on `name` columns return a fully-padded value",
      "description": "The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain()` in libpq and ecpglib",
      "description": "Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc()` function is correctly zero-terminated (Oleg Tselebrovskiy) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dumpall so that role comments, if present, will be dumped regardless of the setting of `--no-role-passwords` (Daniel Gustafsson, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments (`--`\\-style comments) following expressions",
      "description": "This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL `CASE` statement.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, don't report false match failures due to short- versus long-header values",
      "description": "A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in BRIN output functions",
      "description": "These output functions are only used for displaying index entries in `contrib/pageinspect`, so the errors are of limited practical concern.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid emitting requests to sort by a constant",
      "description": "This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position _`N`_ is not in select list” errors.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `contrib/postgres_fdw` set the remote session's time zone to `GMT` not `UTC`",
      "description": "This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/xml2`, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane) ",
      "description": "",
      "fixedIn": "14.12",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent infinite loop in `VACUUM`",
      "description": "After a disconnected standby server with an old running transaction reconnected to the primary, it was possible for `VACUUM` on the primary to get confused about which tuples are removable, resulting in an infinite loop.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER TABLE DETACH PARTITION` for cases involving inconsistent index-based constraints",
      "description": "When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect `coninhcount` value. This would cause trouble during any further manipulations of that constraint.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition pruning setup during `ALTER TABLE DETACH PARTITION CONCURRENTLY`",
      "description": "The executor assumed that no partition could be detached between planning and execution of a query on a partitioned table. This is no longer true since the introduction of `DETACH PARTITION`'s `CONCURRENTLY` option, making it possible for query execution to fail transiently when that is used.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update a partitioned table's `pg_class`.`reltuples` field to zero after its last child partition is dropped",
      "description": "The first `ANALYZE` on such a partitioned table must update `relhassubclass` as well, and that caused the `reltuples` update to be lost.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "The SQL `CALL` statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But `CALL` in PL/pgSQL worked correctly.)",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": [
        "But `CALL` in PL/pgSQL worked correctly."
      ]
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list",
      "description": "If the `CALL` is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow in `money` calculations",
      "description": "None of the arithmetic functions for the `money` type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round(numeric)` and `trunc(numeric)`",
      "description": "These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type `numeric`.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `pg_sequence_last_value()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions",
      "description": "Make it return NULL in these cases instead of throwing an error.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery()`",
      "description": "Per the manual, punctuation in the input of `websearch_to_tsquery()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the `pg_database` catalog, so the effects are narrow, but misbehavior is possible.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number _`N`_ not found in view targetlist”.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Rearrange the order of error checks so that we throw an on-point error when a `WITH RECURSIVE` query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger _`NNNN`_”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to remove `pg_init_privs` entries for column-level privileges when their table is dropped",
      "description": "If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg\\_dump dumps for that relation.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of extended statistics on expressions in `CREATE TABLE LIKE STATISTICS`",
      "description": "The `CREATE` command failed to adjust column references in statistics expressions to the possibly-different column numbering of the new table. This resulted in invalid statistics objects that would cause problems later. A typical scenario where renumbering columns is needed is when the source table contains some dropped columns.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN()` or `MAX()` aggregates",
      "description": "In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent deadlocks and assertion failures during truncation of the multixact SLRU log",
      "description": "A process trying to delete SLRU segments could deadlock with the checkpointer process.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Windows reports an FD\\_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix buffer overread in JSON parse error reports for incomplete byte sequences",
      "description": "It was possible to walk off the end of the input buffer by a few bytes when the last bytes comprise an incomplete multi-byte character. While usually harmless, in principle this could cause a crash.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility between PL/Perl and Perl 5.40 (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix recursive `RECORD`\\-returning PL/Python functions",
      "description": "If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "If a PL/Python\\-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror()` in libpq",
      "description": "Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_restore` `-l` reports dependent TOC entries correctly",
      "description": "If `-l` was specified together with selective-restore options such as `-n` or `-N`, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, do not send `FETCH FIRST WITH TIES` clauses to the remote server",
      "description": "The remote server might not implement this clause, or might interpret it differently than we would locally, so don't risk attempting remote execution.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid clashing with system-provided `<regex.h>` headers",
      "description": "This fixes a compilation failure on macOS version 15 and up.",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix otherwise-harmless assertion failure in Memoize cost estimation (David Rowley) ",
      "description": "",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane) ",
      "description": "",
      "fixedIn": "14.13",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix updates of catalog state for foreign-key constraints when attaching or detaching table partitions",
      "description": "If the referenced table is partitioned, then different catalog entries are needed for a referencing table that is stand-alone versus one that is a partition. `ATTACH/DETACH PARTITION` commands failed to perform this conversion correctly. In particular, after `DETACH` the now stand-alone table would be missing foreign-key enforcement triggers, which could result in the table later containing rows that fail the foreign-key constraint. A subsequent re-`ATTACH` could fail with surprising errors, too.\n\nThe way to fix this is to do `ALTER TABLE DROP CONSTRAINT` on the now stand-alone table for each faulty constraint, and then re-add the constraint. If re-adding the constraint fails, then some erroneous data has crept in. You will need to manually re-establish consistency between the referencing and referenced tables, then re-add the constraint.\n\nThis query can be used to identify broken constraints and construct the commands needed to recreate them:\n\nSELECT conrelid::pg_catalog.regclass AS \"constrained table\",\n       conname AS constraint,\n       confrelid::pg_catalog.regclass AS \"references\",\n       pg_catalog.format('ALTER TABLE %s DROP CONSTRAINT %I;',\n                         conrelid::pg_catalog.regclass, conname) AS \"drop\",\n       pg_catalog.format('ALTER TABLE %s ADD CONSTRAINT %I %s;',\n                         conrelid::pg_catalog.regclass, conname,\n                         pg_catalog.pg_get_constraintdef(oid)) AS \"add\"\nFROM pg_catalog.pg_constraint c\nWHERE contype = 'f' AND conparentid = 0 AND\n   (SELECT count(*) FROM pg_catalog.pg_constraint c2\n    WHERE c2.conparentid = c.oid) <>\n   (SELECT count(*) FROM pg_catalog.pg_inherits i\n    WHERE (i.inhparent = c.conrelid OR i.inhparent = c.confrelid) AND\n      EXISTS (SELECT 1 FROM pg_catalog.pg_partitioned_table\n              WHERE partrelid = i.inhparent));\n\nSince it is possible that one or more of the `ADD CONSTRAINT` steps will fail, you should save the query's output in a file and then attempt to perform each step.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible crashes and “could not open relation” errors in queries on a partitioned table occurring concurrently with a `DETACH CONCURRENTLY` and immediate drop of a partition (Álvaro Herrera, Kuntal Gosh) ",
      "description": "",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER TABLE ATTACH PARTITION` if the table to be attached has a foreign key referencing the partitioned table",
      "description": "This arrangement is not supported, and other ways of creating it already fail.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partitionwise joins or grouping if the query's collation for the key column doesn't match the partition key's collation",
      "description": "Such plans could produce incorrect results.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible “could not find pathkey item to sort” error when the output of a `UNION ALL` member query needs to be sorted, and the sort column is an expression (Andrei Lepikhov, Tom Lane) ",
      "description": "",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cancellation of the second stage of index build for large hash indexes (Pavel Borisov) ",
      "description": "",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure or confusing error message for `` COPY (_`query`_) TO ... ``, when the _`query`_ is rewritten by a `DO INSTEAD NOTIFY` rule (Tender Wang, Tom Lane) ",
      "description": "",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of skewed data during parallel hash join",
      "description": "After repartitioning the inner side of a hash join because one partition has accumulated too many tuples, we check to see if all the partition's tuples went into the same child partition, which suggests that they all have the same hash value and further repartitioning cannot improve matters. This check malfunctioned in some cases, allowing repeated futile repartitioning which would eventually end in a resource-exhaustion error.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in committing a serializable transaction",
      "description": "Mis-processing of a recently committed transaction could lead to an assertion failure or a “could not access status of transaction” error.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in `COMMIT PREPARED` that resulted in orphaned 2PC files",
      "description": "A concurrent `PREPARE TRANSACTION` could cause `COMMIT PREPARED` to not remove the on-disk two-phase state file for the completed transaction. There was no immediate ill effect, but a subsequent crash-and-recovery could fail with “could not access status of transaction”, requiring manual removal of the orphaned file to restore service.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid invalid memory accesses after skipping an invalid toast index during `VACUUM FULL`",
      "description": "A list tracking yet-to-be-rebuilt indexes was not properly updated in this code path, risking assertion failures or crashes later on.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ways in which an “in place” catalog update could be lost",
      "description": "Normal row updates write a new version of the row to preserve rollback-ability of the transaction. However, certain system catalog updates are intentionally non-transactional and are done with an in-place update of the row. These patches fix race conditions that could cause the effects of an in-place update to be lost. As an example, it was possible to forget having set `pg_class`.`relhasindex` to true, preventing updates of the new index and thus causing index corruption.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reset catalog caches at end of recovery",
      "description": "This prevents scenarios wherein an in-place catalog update could be lost due to using stale data from a catalog cache.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using parallel query while holding off interrupts",
      "description": "This situation cannot arise normally, but it can be reached with test scenarios such as using a SQL-language function as B-tree support (which would be far too slow for production usage). If it did occur it would result in an indefinite wait.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report the active query ID for statistics purposes at the start of processing of Bind and Execute protocol messages",
      "description": "This allows more of the work done in extended query protocol to be attributed to the correct query.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Guard against stack overflow in libxml2 with too-deeply-nested XML input",
      "description": "Use `xmlXPathCtxtCompile()` rather than `xmlXPathCompile()`, because the latter fails to protect itself against recursion-to-stack-overflow in libxml2 releases before 2.13.4.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Do not ignore a concurrent `REINDEX CONCURRENTLY` that is working on an index with predicates or expressions",
      "description": "Normally, `REINDEX CONCURRENTLY` does not need to wait for other `REINDEX CONCURRENTLY` operations on other tables. However, this optimization is not applied if the other `REINDEX CONCURRENTLY` is processing an index with predicates or expressions, on the chance that such expressions contain user-defined code that accesses other tables. Careless coding created a race condition such that that rule was not applied uniformly, possibly allowing inconsistent behavior.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “failed to find plan for subquery/CTE” errors in `EXPLAIN`",
      "description": "This case arose while trying to print references to fields of a RECORD-type output of a subquery when the subquery has been optimized out of the plan altogether (which is possible at least in the case that it has a constant-false `WHERE` condition). Nothing remains in the plan to identify the original field names, so fall back to printing `` f_`N`_ `` for the _`N`_'th record column. (That's actually the right thing anyway, if the record output arose from a `ROW()` constructor.)",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow a `USING` clause when altering the type of a generated column",
      "description": "A generated column already has an expression specifying the column contents, so including `USING` doesn't make sense.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore not-yet-defined Portals in the `pg_cursors` view",
      "description": "It is possible for user-defined code that inspects this view to be called while a new cursor is being set up, and if that happens a null pointer dereference would ensue. Avoid the problem by defining the view to exclude incompletely-set-up cursors.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “unexpected table\\_index\\_fetch\\_tuple call during logical decoding” error while decoding a transaction involving insertion of a column default value (Takeshi Ideriha, Hou Zhijie) ",
      "description": "",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce memory consumption of logical decoding",
      "description": "Use a smaller default block size to store tuple data received during logical replication. This reduces memory wastage, which has been reported to be severe while processing long-running transactions, even leading to out-of-memory failures.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-disable sending of stateless (TLSv1.2) session tickets",
      "description": "A previous change to prevent sending of stateful (TLSv1.3) session tickets accidentally re-enabled sending of stateless ones. Thus, while we intended to prevent clients from thinking that TLS session resumption is supported, some still did.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “wrong tuple length” failure when dropping a database with many ACL (permission) entries (Ayush Tiwari) ",
      "description": "",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow adjusting the `session_authorization` and `role` settings in parallel workers",
      "description": "Our code intends to allow modifiable server settings to be set by function `SET` clauses, but not otherwise within a parallel worker. `SET` clauses failed for these two settings, though.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list, when the `CALL` is within a PL/pgSQL `EXCEPTION` block",
      "description": "As with a similar fix in our previous quarterly releases, this case allowed such functions to be passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “cache lookup failed for function” errors in edge cases in PL/pgSQL's `CALL` (Tom Lane) ",
      "description": "",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix thread safety of our fallback (non-OpenSSL) MD5 implementation on big-endian hardware",
      "description": "Thread safety is not currently a concern in the server, but it is for libpq.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parse libpq's `keepalives` connection option in the same way as other integer-valued options",
      "description": "The coding used here rejected trailing whitespace in the option value, unlike other cases. This turns out to be problematic in ecpg's usage, for example.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid use of `pnstrdup()` in ecpglib",
      "description": "That function will call `exit()` on out-of-memory, which is undesirable in a library. The calling code already handles allocation failures properly.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpglib, fix out-of-bounds read when parsing incorrect datetime input",
      "description": "It was possible to try to read the location just before the start of a constant array. Real-world consequences seem minimal, though.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include the source timeline history in pg\\_rewind's debug output",
      "description": "This was the intention to begin with, but a coding error caused the source history to always print as empty.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior with junction points on Windows, particularly in pg\\_rewind",
      "description": "This entailed back-patching previous fixes by Thomas Munro, Peter Eisentraut, Alexander Lakhin, and Juan José Santamaría Flecha. Those changes were originally not back-patched out of caution, but they have been in use in later branches for long enough to deem them safe.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to reindex temporary tables and indexes in vacuumdb and in parallel reindexdb",
      "description": "Reindexing other sessions' temporary tables cannot work, but the check to skip them was missing in some code paths, leading to unwanted failures.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow inspection of sequence relations in relevant functions of `contrib/pageinspect` and `contrib/pgstattuple`",
      "description": "This had been allowed in the past, but it got broken during the introduction of non-default access methods for tables.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect LLVM-generated code on ARM64 platforms",
      "description": "When using JIT compilation on ARM platforms, the generated code could not support relocation distances exceeding 32 bits, allowing unlucky placement of generated code to cause server crashes on large-memory systems.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix a few places that assumed that process start time (represented as a `time_t`) will fit into a `long` value",
      "description": "On platforms where `long` is 32 bits (notably Windows), this coding would fail after Y2038\\. Most of the failures appear only cosmetic, but notably `pg_ctl start` would hang.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent “nothing provides perl(PostgreSQL::Test::Utils)” failures while building RPM packages of PostgreSQL (Noah Misch) ",
      "description": "",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix building with Strawberry Perl on Windows (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024b",
      "description": "This tzdata release changes the old System-V-compatibility zone names to duplicate the corresponding geographic zones; for example `PST8PDT` is now an alias for `America/Los_Angeles`. The main visible consequence is that for timestamps before the introduction of standardized time zones, the zone is considered to represent local mean solar time for the named location. For example, in `PST8PDT`, `timestamptz` input such as `1801-01-01 00:00` would previously have been rendered as `1801-01-01 00:00:00-08`, but now it is rendered as `1801-01-01 00:00:00-07:52:58`.\n\nAlso, historical corrections for Mexico, Mongolia, and Portugal. Notably, `Asia/Choibalsan` is now an alias for `Asia/Ulaanbaatar` rather than being a separate zone, mainly because the differences between those zones were found to be based on untrustworthy data.",
      "fixedIn": "14.14",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair ABI break for extensions that work with struct `ResultRelInfo`",
      "description": "Last week's minor releases unintentionally broke binary compatibility with timescaledb and several other extensions. Restore the affected structure to its previous size, so that such extensions need not be rebuilt.",
      "fixedIn": "14.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix cases where a logical replication slot's `restart_lsn` could go backwards",
      "description": "Previously, restarting logical replication could sometimes cause the slot's restart point to be recomputed as an older value than had previously been advertised in `pg_replication_slots`. This is bad, since for example WAL files might have been removed on the basis of the later `restart_lsn` value, in which case replication would fail to restart.",
      "fixedIn": "14.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deleting still-needed WAL files during pg\\_rewind",
      "description": "Previously, in unlucky cases, it was possible for pg\\_rewind to remove important WAL files from the rewound demoted primary. In particular this happens if those files have been marked for archival (i.e., their `.ready` files were created) but not yet archived. Then the newly promoted node no longer has such files because of them having been recycled, but likely they are needed for recovery in the demoted node. If pg\\_rewind removes them, recovery is not possible anymore.",
      "fixedIn": "14.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Count index scans in `contrib/bloom` indexes in the statistics views, such as the `pg_stat_user_indexes`.`idx_scan` counter (Masahiro Ikeda) ",
      "description": "",
      "fixedIn": "14.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when checking to see if an index's opclass options have changed",
      "description": "Some forms of `ALTER TABLE` would fail if the table has an index with non-default operator class options.",
      "fixedIn": "14.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure caused by disconnected NFA sub-graphs in regular expression parsing",
      "description": "This bug does not appear to have any visible consequences in non-assert builds.",
      "fixedIn": "14.15",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enforce standard locking protocol for TOAST table updates, to prevent problems with `REINDEX CONCURRENTLY`",
      "description": "If applied to a TOAST table or TOAST table's index, `REINDEX CONCURRENTLY` tended to produce a corrupted index. This happened because sessions updating TOAST entries released their `ROW EXCLUSIVE` locks immediately, rather than holding them until transaction commit as all other updates do. The fix is to make TOAST updates hold the table lock according to the normal rule. Any existing corrupted indexes can be repaired by reindexing again.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corruption of HOT chains when a RECENTLY\\_DEAD tuple changes state to fully DEAD during page pruning",
      "description": "It was possible for `VACUUM` to remove a recently-dead tuple while leaving behind a redirect item that pointed to it. When the tuple's item slot is later re-used by some new tuple, that tuple would be seen as part of the pre-existing HOT chain, creating a form of index corruption. If this has happened, reindexing the table should repair the damage. However, this is an extremely low-probability scenario, so we do not recommend reindexing just on the chance that it might have happened.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in EvalPlanQual rechecks for tables with a mix of local and foreign partitions (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dangling pointer in `COPY TO`",
      "description": "This oversight could cause an incorrect error message or a crash after an error in `COPY`.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid null-pointer crash in `ALTER STATISTICS` when the statistics object is dropped concurrently (Tomas Vondra) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly handle alignment padding when extracting a range from a multirange",
      "description": "This error could cause crashes when handling multiranges over variable-length data types.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-optimistic use of hashing for anonymous `RECORD` data types",
      "description": "This prevents some cases of “could not identify a hash function for type record” errors.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect plan creation for parallel single-child Append nodes",
      "description": "In some cases the Append would be simplified away when it should not be, leading to wrong query results (duplicated rows).",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix index-only scan plans for cases where not all index columns can be returned",
      "description": "If an index has both returnable and non-returnable columns, and one of the non-returnable columns is an expression using a table column that appears in a returnable index column, then a query using that expression could result in an index-only scan plan that attempts to read the non-returnable column, instead of recomputing the expression from the returnable column as intended. The non-returnable column would read as NULL, resulting in wrong query results.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix Memoize plan nodes to handle subplans that use parameters coming from above the Memoize (David Rowley) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix Memoize plan nodes to work correctly with non-hashable join operators (David Rowley) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that casting to an unspecified typmod generates a RelabelType node rather than a length-coercion function call",
      "description": "While the coercion function should do the right thing (nothing), this translation is undesirably inefficient.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix checking of `anycompatible`\\-family data type matches",
      "description": "In some cases the parser would think that a function or operator with `anycompatible`\\-family polymorphic parameters matches a set of arguments that it really shouldn't match. In reported cases, that led to matching more than one operator to a call, leading to ambiguous-operator errors; but a failure later on is also possible.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix WAL replay failure when database consistency is reached exactly at a WAL page boundary (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix startup of a physical replica to tolerate transaction ID wraparound",
      "description": "If a replica server is started while the set of active transactions on the primary crosses a wraparound boundary (so that there are some newer transactions with smaller XIDs than older ones), the replica would fail with “out-of-order XID insertion in KnownAssignedXids”. The replica would retry, but could never get past that error.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In logical replication, avoid double transmission of a child table's data",
      "description": "If a publication includes both child and parent tables, and has the `publish_via_partition_root` option set, subscribers uselessly initiated synchronization on both child and parent tables. Ensure that only the parent table is synchronized in such cases.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove lexical limitations for SQL commands issued on a logical replication connection",
      "description": "The walsender process would fail for a SQL command containing an unquoted semicolon, or with dollar-quoted literals containing odd numbers of single or double quote marks, or when the SQL command starts with a comment. Moreover, faulty error recovery could lead to unexpected errors in later commands too.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that replication origin timestamp is set while replicating a `ROLLBACK PREPARED` operation (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible loss of the commit timestamp for the last subtransaction of a transaction (Alex Kingsborough, Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be sure to `fsync` the `pg_logical/mappings` subdirectory during checkpoints",
      "description": "On some filesystems this oversight could lead to losing logical rewrite status files after a system crash.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Build extended statistics for partitioned tables",
      "description": "A previous bug fix disabled building of extended statistics for old-style inheritance trees, but it also prevented building them for partitioned tables, which was an unnecessary restriction. This change allows `ANALYZE` to compute values for statistics objects for partitioned tables. (But note that autovacuum does not process partitioned tables as such, so you must periodically issue manual `ANALYZE` on the partitioned table if you want to maintain such statistics.)",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": [
        "But note that autovacuum does not process partitioned tables as such",
        "so you must periodically issue manual `ANALYZE` on the partitioned table if you want to maintain such statistics."
      ]
    },
    {
      "title": "Ignore extended statistics for inheritance trees",
      "description": "Currently, extended statistics values are only computed locally for each table, not for entire inheritance trees. However the values were mistakenly consulted when planning queries across inheritance trees, possibly resulting in worse-than-default estimates.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow altering data type of a partitioned table's columns when the partitioned table's row type is used as a composite type elsewhere",
      "description": "This restriction has long existed for regular tables, but through an oversight it was not checked for partitioned tables.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER TABLE ... DROP NOT NULL` for a column that is part of a replica identity index",
      "description": "The same prohibition already existed for primary key indexes.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update cached table state during `ALTER TABLE ADD PRIMARY KEY USING INDEX`",
      "description": "Concurrent sessions failed to update their opinion of whether the table has a primary key, possibly causing incorrect logical replication behavior.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update cached table state when switching `REPLICA IDENTITY` index",
      "description": "Concurrent sessions failed to update their opinion of which index is the replica identity one, possibly causing incorrect logical replication behavior.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of SP-GiST indexes when the indexed column's data type is binary-compatible with the declared input type of the operator class",
      "description": "Such cases should work, but failed with “compress method must be defined when leaf type is different from input type”.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow parallel vacuuming and concurrent index building to be ignored while computing oldest xmin",
      "description": "Non-parallelized instances of these operations were already ignored, but the logic did not work for parallelized cases. Holding back the xmin horizon has undesirable effects such as delaying vacuum cleanup.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak when updating expression indexes",
      "description": "An `UPDATE` affecting many rows could consume significant amounts of memory.",
      "fixedIn": "14.2",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Avoid leaking memory during `REASSIGN OWNED BY` operations that reassign ownership of many objects (Justin Pryzby) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of walsenders sending logical changes by avoiding unnecessary cache accesses (Hou Zhijie) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix display of `cert` authentication method's options in `pg_hba_file_rules` view",
      "description": "The `cert` authentication method implies `clientcert=verify-full`, but the `pg_hba_file_rules` view incorrectly reported `clientcert=verify-ca`.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the session targeted by `pg_log_backend_memory_contexts()` sends its results only to the server's log",
      "description": "Previously, a sufficiently high setting of `client_min_messages` could result in the log message also being sent to the connected client. Since that client hadn't requested it, that would be surprising (and possibly a wire protocol violation).",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix display of whole-row variables appearing in `INSERT ... VALUES` rules",
      "description": "A whole-row variable would be printed as “var.\\*”, but that allows it to be expanded to individual columns when the rule is reloaded, resulting in different semantics. Attach an explicit cast to prevent that, as we do elsewhere.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When reverse-listing a SQL-standard function body, display function parameters appropriately within `INSERT ... SELECT`",
      "description": "Previously, they'd come out as `` $_`N`_ `` even when the parameter had a name.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix one-byte buffer overrun when applying Unicode string normalization to an empty string",
      "description": "The practical impact of this is limited thanks to alignment considerations; but in debug builds, a warning was raised.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix or remove some incorrect assertions",
      "description": "These errors should affect only debug builds, not production.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition that could lead to failure to localize error messages that are reported early in multi-threaded use of libpq or ecpglib (Tom Lane) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid calling `strerror` from libpq's `PQcancel` function",
      "description": "`PQcancel` is supposed to be safe to call from a signal handler, but `strerror` is not safe. The faulty usage only occurred in the unlikely event of failure to send the cancel message to the server, perhaps explaining the lack of reports.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make psql's `\\password` command default to setting the password for `CURRENT_USER`, not the connection's original user name",
      "description": "This agrees with the documented behavior, and avoids probable permissions failure if `SET ROLE` or `SET SESSION AUTHORIZATION` has been done since the session began. To prevent confusion, the role name to be acted on is now included in the password prompt.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql `\\d` command's query for identifying parent triggers",
      "description": "The previous coding failed with “more than one row returned by a subquery used as an expression” if a partition had triggers and there were unrelated statement-level triggers of the same name on some parent partitioned table.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make psql's `\\d` command sort a table's extended statistics objects by name not OID (Justin Pryzby) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql's tab-completion of label values for enum types (Tom Lane) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failures on Windows when using the terminal as data source or destination",
      "description": "This affects psql's `\\copy` command, as well as pg\\_recvlogical with `-f -`.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql and some other client programs, avoid trying to invoke `gettext()` from a control-C signal handler",
      "description": "While no reported failures have been traced to this mistake, it seems highly unlikely to be a safe thing to do.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow canceling the initial password prompt in pg\\_receivewal and pg\\_recvlogical",
      "description": "Previously it was impossible to terminate these programs via control-C while they were prompting for a password.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's dump ordering for user-defined casts",
      "description": "In rare cases, the output script might refer to a user-defined cast before it had been created.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's `--inserts` and `--column-inserts` modes to handle tables containing both generated columns and dropped columns (Tom Lane) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible mis-reporting of errors in pg\\_dump and pg\\_basebackup",
      "description": "The previous code failed to check for errors from some kernel calls, and could report the wrong errno values in other cases.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix results of index-only scans on `contrib/btree_gist` indexes on `` char(_`N`_) `` columns",
      "description": "Index-only scans returned column values with trailing spaces removed, which is not the expected behavior. That happened because that's how the data was stored in the index. This fix changes the code to store `` char(_`N`_) `` values with the expected amount of space padding. The behavior of such an index will not change immediately unless you `REINDEX` it; otherwise space-stripped values will be gradually replaced over time during updates. Queries that do not use index-only scan plans will be unaffected in any case.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge cases in `postgres_fdw`'s handling of asynchronous queries",
      "description": "These errors could lead to crashes or incorrect results when attempting to parallelize scans of foreign tables.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change configure to use Python's sysconfig module, rather than the deprecated distutils module, to determine how to build PL/Python",
      "description": "With Python 3.10, this avoids configure\\-time warnings about distutils being deprecated and scheduled for removal in Python 3.12\\. Presumably, once 3.12 is out, `configure --with-python` would fail altogether. This future-proofing does come at a cost: sysconfig did not exist before Python 2.7, nor before 3.2 in the Python 3 branch, so it is no longer possible to build PL/Python against long-dead Python versions.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-allow cross-compilation without OpenSSL",
      "description": "configure should assume that `/dev/urandom` will be available on the target system, but it failed instead.",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Perl compile failure on Windows with Perl 5.28 and later (Victor Wagner) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Python compile failure with Python 3.11 and later (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for building with Visual Studio 2022 (Hans Buschmann) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the `.bat` wrapper scripts in our MSVC build system to be called without first changing into their directory (Anton Voloshin, Andrew Dunstan) ",
      "description": "",
      "fixedIn": "14.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix default signature length for `gist_ltree_ops` indexes",
      "description": "The default signature length (hash size) for GiST indexes on `ltree` columns was accidentally changed while upgrading that operator class to support operator class parameters. If any operations had been done on such an index without first upgrading the `ltree` extension to version 1.2, they were done assuming that the signature length was 28 bytes rather than the intended 8\\. This means it is very likely that such indexes are now corrupt. For safety we recommend re-indexing all GiST indexes on `ltree` columns after installing this update. (Note that GiST indexes on `ltree[]` columns, that is arrays of `ltree`, are not affected.)",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": [
        "Note that GiST indexes on `ltree[]` columns",
        "that is arrays of `ltree`",
        "are not affected."
      ]
    },
    {
      "title": "Stop using query-provided column aliases for the columns of whole-row variables that refer to plain tables",
      "description": "The column names in tuples produced by a whole-row variable (such as `tbl.*` in contexts other than the top level of a `SELECT` list) are now always those of the associated named composite type, if there is one. We'd previously attempted to make them track any column aliases that had been applied to the `FROM` entry the variable refers to. But that's semantically dubious, because really then the output of the variable is not at all of the composite type it claims to be. Previous attempts to deal with that inconsistency had bad results up to and including storing unreadable data on disk, so just give up on the whole idea.\n\nIn cases where it's important to be able to relabel such columns, a workaround is to introduce an extra level of sub-`SELECT`, so that the whole-row variable is referring to the sub-`SELECT`'s output and not to a plain table. Then the variable is of type `record` to begin with and there's no issue.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect roundoff when extracting epoch values from intervals",
      "description": "The new `numeric`\\-based code for `EXTRACT()` failed to yield results equivalent to the old `float`\\-based code, as a result of accidentally truncating the `DAYS_PER_YEAR` value to an integer.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Defend against `pg_stat_get_replication_slot(NULL)`",
      "description": "This function should be marked strict in the catalog data, but it was not in v14, so add a run-time check instead.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect output for types `timestamptz` and `timetz` in `table_to_xmlschema()` and allied functions",
      "description": "The xmlschema output for these types included a malformed regular expression.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid core dump in parser for a `VALUES` clause with zero columns (Tom Lane) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner failure when a Result plan node appears immediately underneath an Append node",
      "description": "Recently-added code to support asynchronous remote queries failed to handle this case, leading to crashes or errors about unrecognized node types.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner failure if a query using `SEARCH` or `CYCLE` features contains a duplicate CTE name",
      "description": "When the name of the recursive `WITH` query is re-used within itself, the planner could crash or report odd errors such as “could not find attribute 2 in subquery targetlist”.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner errors for `GROUPING()` constructs that reference outer query levels (Richard Guo, Tom Lane) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix plan generation for index-only scans on indexes with both returnable and non-returnable columns",
      "description": "The previous coding could try to read non-returnable columns in addition to the returnable ones. This was fairly harmless because it didn't actually do anything with the bogus values, but it fell foul of a recently-added error check that rejected such a plan.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid accessing a no-longer-pinned shared buffer while attempting to lock an outdated tuple during EvalPlanQual",
      "description": "The code would touch the buffer a couple more times after releasing its pin. In theory another process could recycle the buffer (or more likely, try to defragment its free space) as soon as the pin is gone, probably leading to failure to find the newer version of the tuple.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix query-lifespan memory leak in an IndexScan node that is performing reordering (Aliaksandr Kalenik) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER FUNCTION` to support changing a function's parallelism property and its `SET`\\-variable list in the same command",
      "description": "The parallelism property change was lost if the same command also updated the function's `SET` clause.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten lookup of the index “owned by” a constraint",
      "description": "Some code paths mistook the index depended on by a foreign key constraint for one owned by a unique or primary key constraint, resulting in odd errors during certain `ALTER TABLE` operations on tables having foreign key constraints.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bogus errors from attempts to alter system columns of tables",
      "description": "The system should just tell you that you can't do it, but sometimes it would report “no owned sequence found” instead.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-sorting of table rows when `CLUSTER`ing using an index whose leading key is an expression",
      "description": "The table would be rebuilt with the correct data, but in an order having little to do with the index order.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent data loss if a system crash occurs shortly after a sorted GiST index build",
      "description": "The code path for building GiST indexes using sorting neglected to `fsync` the file upon completion. This could result in a corrupted index if the operating system crashed shortly later.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix risk of deadlock failures while dropping a partitioned index",
      "description": "Ensure that the required table and index locks are taken in the standard order (parents before children, tables before indexes). The previous coding for `DROP INDEX` did it differently, and so could deadlock against concurrent queries taking these locks in the standard order.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition between `DROP TABLESPACE` and checkpointing",
      "description": "The checkpoint forced by `DROP TABLESPACE` could sometimes fail to remove all dead files from the tablespace's directory, leading to a bogus “tablespace is not empty” error.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible trouble in crash recovery after a `TRUNCATE` command that overlaps a checkpoint",
      "description": "`TRUNCATE` must ensure that the table's disk file is truncated before the checkpoint is allowed to complete. Otherwise, replay starting from that checkpoint might find unexpected data in the supposedly-removed pages, possibly causing replay failure.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unsafe toast-data accesses during temporary object cleanup",
      "description": "Temporary-object deletion during server process exit could fail with “FATAL: cannot fetch toast data without an active snapshot”. This was usually harmless since the next use of that temporary schema would clean up successfully.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-allow underscore as the first character in a custom parameter name",
      "description": "Such names were unintentionally disallowed in v14.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `regress` option for the `compute_query_id` parameter",
      "description": "This is intended to facilitate testing, by allowing query IDs to be computed but not shown in `EXPLAIN` output.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve wait logic in RegisterSyncRequest",
      "description": "If we run out of space in the checkpointer sync request queue (which is hopefully rare on real systems, but is common when testing with a very small buffer pool), we wait for it to drain. While waiting, we should report that as a wait event so that users know what is going on, and also watch for postmaster death, since otherwise the loop might never terminate if the checkpointer has already exited.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Wake up for latch events when the checkpointer is waiting between writes",
      "description": "This improves responsiveness to backends sending sync requests. The change also creates a proper wait event class for these waits.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “PANIC: xlog flush request is not satisfied” failure during standby promotion when there is a missing WAL continuation record (Sami Imseih) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possibility of self-deadlock in hot standby conflict handling",
      "description": "With unlucky timing, the WAL-applying process could get stuck while waiting for some other process to release a buffer lock.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible mis-identification of the correct ancestor relation to publish logical replication changes through",
      "description": "If `publish_via_partition_root` is enabled, and there are multiple publications naming different ancestors of the currently-modified relation, the wrong ancestor might be chosen for reporting the change.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that logical replication apply workers can be restarted even when we're up against the `max_sync_workers_per_subscription` limit",
      "description": "Faulty coding of the limit check caused a restarted worker to exit immediately, leaving fewer workers than there should be.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include unchanged replica identity key columns in the WAL log for an update, if they are stored out-of-line",
      "description": "Otherwise subscribers cannot see the values and will fail to replicate the update.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope correctly with platforms that have no support for altering the server process's display in ps(1)",
      "description": "Few platforms are like this (the only supported one is Cygwin), so we'd managed not to notice that refactoring introduced a potential memory clobber.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make the server more robust against missed timer interrupts",
      "description": "An optimization added in v14 meant that if a server process somehow missed a timer interrupt, it would never again ask the kernel for another one, thus breaking timeout detection for the remainder of the session. This seems unduly fragile, so add a recovery path.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow execution of SPI functions during PL/Perl function compilation",
      "description": "Perl can be convinced to execute user-defined code during compilation of a PL/Perl function. However, it's not okay for such code to try to invoke SQL operations via SPI. That results in a crash, and if it didn't crash it would be a security hazard, because we really don't want code execution during function validation. Put in a check to give a friendlier error message instead.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make libpq accept root-owned SSL private key files",
      "description": "This change synchronizes libpq's rules for safe ownership and permissions of SSL key files with the rules the server has used since release 9.6\\. Namely, in addition to the current rules, allow the case where the key file is owned by root and has permissions `rw-r-----` or less. This is helpful for system-wide management of key files.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix behavior of libpq's `PQisBusy()` function after a connection failure",
      "description": "If we'd detected a write failure, `PQisBusy()` would always return true, which is the wrong thing: we want input processing to carry on normally until we've read whatever is available from the server. The practical effect of this error is that applications using libpq's async-query API would typically detect connection loss only when `PQconsumeInput()` returns a hard failure. With this fix, a connection loss will normally be reported via an error `PGresult` object, which is a much cleaner behavior for most applications.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-allow _`database`_._`schema`_._`table`_ patterns in psql, pg\\_dump, and pg\\_amcheck",
      "description": "Versions before v14 silently ignored all but the _`schema`_ and _`table`_ fragments of a pattern containing more than one dot. Refactoring in v14 accidentally broke that use-case. Reinstate it, but now complain if the first fragment is not the name of the current database.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_ctl recheck postmaster aliveness while waiting for stop/restart/promote actions",
      "description": "pg\\_ctl would verify that the postmaster is alive as a side-effect of sending the stop or promote signal, but then it just naively waited to see the on-disk state change. If the postmaster died uncleanly without having removed its PID file or updated the control file, pg\\_ctl would wait until timeout. Instead make it recheck every so often that the postmaster process is still there.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error handling in pg\\_waldump",
      "description": "While trying to read a WAL file to determine the WAL segment size, pg\\_waldump would report an incorrect error for the case of a too-short file. In addition, the file name reported in this and related error messages could be garbage.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `contrib/pageinspect` functions cope with all-zero pages",
      "description": "This is a legitimate edge case, but the module was mostly unprepared for it. Arrange to return nulls, or no rows, as appropriate; that seems more useful than raising an error.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pageinspect`, add defenses against incorrect page “special space” contents, tighten checks for correct page size, and add some missing checks that an index is of the expected type",
      "description": "These changes make it less likely that the module will crash on bad data.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, disable batch insertion when `BEFORE INSERT ... FOR EACH ROW` triggers exist on the foreign table",
      "description": "Such a trigger might query the table it's on and expect to see previously-inserted rows. With batch insertion, those rows might not be visible yet, so disable the feature to avoid unexpected behavior.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, verify that `ORDER BY` clauses are safe to ship before requesting a remotely-ordered query, and include a `USING` clause if necessary",
      "description": "This fix prevents situations where the remote server might sort in a different order than we intend. While sometimes that would be only cosmetic, it could produce thoroughly wrong results if the remote data is used as input for a locally-performed merge join.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix configure to handle platforms that have `sys/epoll.h` but not `sys/signalfd.h` (Tom Lane) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update JIT code to work with LLVM 14 (Thomas Munro) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Clean up assorted failures under clang's `-fsanitize=undefined` checks",
      "description": "Most of these changes are just for pro-forma compliance with the letter of the C and POSIX standards, and are unlikely to have any effect on production builds.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Do not add OpenSSL dependencies to libpq's `pkg-config` file when building without OpenSSL (Fabrice Fontaine) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Perl so it builds on C compilers that don't support statements nested within expressions (Tom Lane) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible build failure of pg\\_dumpall on Windows, when not using MSVC to build (Andres Freund) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In Windows builds, use gendef instead of pexports to build DEF files",
      "description": "This adapts the build process to work on recent MSys tool chains.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent extra expansion of shell wildcard patterns in programs built under MinGW",
      "description": "For some reason the C library provided by MinGW will expand shell wildcard characters in a program's command-line arguments by default. This is confusing, not least because it doesn't happen under MSVC, so turn it off.",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022a for DST law changes in Palestine, plus historical corrections for Chile and Ukraine. (Tom Lane) ",
      "description": "",
      "fixedIn": "14.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent possible corruption of indexes created or rebuilt with the `CONCURRENTLY` option",
      "description": "An optimization added in v14 caused `CREATE INDEX ... CONCURRENTLY` and `REINDEX ... CONCURRENTLY` to sometimes miss indexing rows that were updated during the index build. Revert that optimization. It is recommended that any indexes made with the `CONCURRENTLY` option be rebuilt after installing this update. (Alternatively, rebuild them without `CONCURRENTLY`.)",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": [
        "Alternatively",
        "rebuild them without `CONCURRENTLY`."
      ]
    },
    {
      "title": "Harden Memoize plan node against non-deterministic equality functions",
      "description": "Memoize could crash if a data type's equality or hash functions gave inconsistent results across different calls. Throw a runtime error instead.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect cost estimates for Memoize plans",
      "description": "This mistake could lead to Memoize being used when it isn't really the best plan, or to very long executor startup times due to initializing an overly-large hash table for a Memoize node.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix queries in which a “whole-row variable” references the result of a function that returns a domain over composite type (Tom Lane) ",
      "description": "",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “variable not found in subplan target list” planner error when pulling up a sub-`SELECT` that's referenced in a `GROUPING` function (Richard Guo) ",
      "description": "",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `pg_stat_get_subscription()` from possibly returning an extra row containing garbage values (Kuntal Ghosh) ",
      "description": "",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `COPY FROM`'s error checking in the case where the database encoding is `SQL_ASCII` while the client's encoding is a multi-byte encoding",
      "description": "This mistake could lead to false complaints of invalidly-encoded input data.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crashing if too many column aliases are attached to an `XMLTABLE` or `JSON_TABLE` construct (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When decompiling a view or rule, show a `SELECT` output column's `AS \"?column?\"` alias clause if it could be referenced elsewhere",
      "description": "Previously, this auto-generated alias was always hidden; but there are corner cases where doing so results in a non-restorable view or rule definition.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report implicitly-created operator families to event triggers",
      "description": "If `CREATE OPERATOR CLASS` results in the implicit creation of an operator family, that object was not reported to event triggers that should capture such events.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix control file updates made when a restartpoint is running during promotion of a standby server",
      "description": "Previously, when the restartpoint completed it could incorrectly update the last-checkpoint fields of the control file, potentially leading to PANIC and failure to restart if the server crashes before the next normal checkpoint completes.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent triggering of standby's `wal_receiver_timeout` during logical replication of large transactions",
      "description": "If a large transaction on the primary server sends no data to the standby (perhaps because no table it changes is published), it was possible for the standby to timeout. Fix that by ensuring we send keepalive messages periodically in such situations.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent open-file leak when reading an invalid timezone abbreviation file",
      "description": "Such cases could result in harmless warning messages.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow custom server parameters to have short descriptions that are NULL",
      "description": "Previously, although extensions could choose to create such settings, some code paths would crash while processing them.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove misguided SSL key file ownership check in libpq",
      "description": "In the previous minor releases, we copied the server's permission checking rules for SSL private key files into libpq. But we should not have also copied the server's file-ownership check. While that works in normal use-cases, it can result in an unexpected failure for clients running as root, and perhaps in other cases.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure ecpg reports server connection loss sanely",
      "description": "Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to printing “(null)” instead of a useful error message; or in older releases it would lead to a crash.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent crash after server connection loss in pg\\_amcheck",
      "description": "Misprocessing of a libpq-generated error result, such as a report of lost connection, would lead to a crash.",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust PL/Perl test case so it will work under Perl 5.36 (Dagfinn Ilmari Mannsåker) ",
      "description": "",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid incorrectly using an out-of-date libldap\\_r library when multiple OpenLDAP installations are present while building PostgreSQL (Tom Lane) ",
      "description": "",
      "fixedIn": "14.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix replay of `CREATE DATABASE` WAL records on standby servers",
      "description": "Standby servers may encounter missing tablespace directories when replaying database-creation WAL records. Prior to this patch, a standby would fail to recover in such a case; however, such directories could be legitimately missing. Create the tablespace (as a plain directory), then check that it has been dropped again once replay reaches a consistent state.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support “in place” tablespaces",
      "description": "Normally a Postgres tablespace is a symbolic link to a directory on some other filesystem. This change allows it to just be a plain directory. While this has no use for separating tables onto different filesystems, it is a convenient setup for testing. Moreover, it is necessary to support the `CREATE DATABASE` replay fix, which transiently creates a missing tablespace as an “in place” tablespace.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In extended query protocol, force an immediate commit after `CREATE DATABASE` and other commands that can't run in a transaction block",
      "description": "If the client does not send a Sync message immediately after such a command, but instead sends another command, any failure in that command would lead to rolling back the preceding command, typically leaving inconsistent state on-disk (such as a missing or extra database directory). The mechanisms intended to prevent that situation turn out to work for multiple commands in a simple-Query message, but not for a series of extended-protocol messages. To prevent inconsistency without breaking use-cases that work today, force an implicit commit after such commands.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition when checking transaction visibility",
      "description": "`TransactionIdIsInProgress` could report `false` before the subject transaction is considered visible, leading to various misbehaviors. The race condition window is normally very narrow, but use of synchronous replication makes it much wider, because the wait for a synchronous replica happens in that window.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect plans when sorting by an expression that contains a non-top-level set-returning function (Richard Guo, Tom Lane) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect permissions-checking code for extended statistics",
      "description": "If there are extended statistics on a table that the user has only partial `SELECT` permissions on, some queries would fail with “unrecognized node type” errors.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix extended statistics machinery to handle MCV-type statistics on boolean-valued expressions",
      "description": "Statistics collection worked fine, but a query containing such an expression in `WHERE` would fail with “unknown clause type”.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid planner core dump with `` _`constant`_ = ANY(_`array`_) `` clauses when there are MCV-type extended statistics on the _`array`_ variable (Tom Lane) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER TABLE ... ENABLE/DISABLE TRIGGER` to handle recursion correctly for triggers on partitioned tables",
      "description": "In certain cases, a “trigger does not exist” failure would occur because the command would try to adjust the trigger on a child partition that doesn't have it.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cancellation of `ANALYZE` while it is computing extended statistics",
      "description": "In some scenarios with high statistics targets, it was possible to spend many seconds in an un-cancellable sort operation.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve syntax error messages for type `jsonpath` (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_stop_backup()` cleans up session state properly",
      "description": "This omission could lead to assertion failures or crashes later in the session.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `trim_array()` to handle a zero-dimensional array argument sanely (Martin Kalcher) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix join alias matching in `FOR [KEY] UPDATE/SHARE` clauses",
      "description": "In corner cases, a misleading error could be reported.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject `ROW()` expressions and functions in `FROM` that have too many columns",
      "description": "Cases with more than about 1600 columns are unsupported, and have always failed at execution. However, it emerges that some earlier code could be driven to assertion failures or crashes by queries with more than 32K columns. Add a parse-time check to prevent that.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dumping of a view using a function in `FROM` that returns a composite type, when column(s) of the composite type have been dropped since the view was made",
      "description": "This oversight could lead to dump/reload or pg\\_upgrade failures, as the dumped view would have too many column aliases for the function.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow nested backup operations in logical replication walsenders (Fujii Masao) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in logical replication subscribers (Hou Zhijie) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix logical replication's checking of replica identity when the target table is partitioned",
      "description": "The replica identity columns have to be re-identified for the child partition.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failures to update cached schema data in a logical replication subscriber after a schema change on the publisher (Shi Yu, Hou Zhijie) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix WAL consistency checking logic to correctly handle `BRIN_EVACUATE_PAGE` flags (Haiyang Wang) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix erroneous assertion checks in shared hashtable management (Thomas Munro) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when `min_dynamic_shared_memory` is set to a non-default value (Thomas Munro) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Arrange to clean up after commit-time errors within `SPI_commit()`, rather than expecting callers to do that",
      "description": "Proper cleanup is complicated and requires use of low-level facilities, so it's not surprising that no known caller got it right. This led to misbehaviors when a PL procedure issued `COMMIT` but a failure occurred (such as a deferred constraint check). To improve matters, redefine `SPI_commit()` as starting a new transaction, so that it becomes equivalent to `SPI_commit_and_chain()` except that you get default transaction characteristics instead of preserving the prior transaction's characteristics. To make this somewhat transparent API-wise, redefine `SPI_start_transaction()` as a no-op. All known callers of `SPI_commit()` immediately call `SPI_start_transaction()`, so they will not notice any change. Similar remarks apply to `SPI_rollback()`.\n\nAlso fix PL/Python, which omitted any handling of such errors at all, resulting in jumping out of the Python interpreter. This is reported to crash Python 3.11\\. Older Python releases leak some memory but seem okay with it otherwise.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve libpq's handling of idle states in pipeline mode",
      "description": "This fixes “message type 0x33 arrived from server while idle” warnings, as well as possible loss of end-of-query NULL results from `PQgetResult()`.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid core dump in ecpglib with unexpected orders of operations",
      "description": "Certain operations such as `EXEC SQL PREPARE` would crash (rather than reporting an error as expected) if called before establishing any database connection.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpglib, avoid redundant `newlocale()` calls",
      "description": "Allocate a C locale object once per process when first connecting, rather than creating and freeing locale objects once per query. This mitigates a libc memory leak on AIX, and may offer some performance benefit everywhere.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql's `\\watch` command, echo a newline after cancellation with control-C",
      "description": "This prevents libedit (and possibly also libreadline) from becoming confused about which column the cursor is in.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_upgrade to detect non-upgradable usages of functions taking `anyarray`",
      "description": "Version 14 changed some built-in functions to take type `anycompatiblearray` instead of `anyarray`. While this is mostly transparent, user-defined aggregates and operators built atop these functions have to be declared with exactly matching types. The presence of an object referencing the old signature will cause pg\\_upgrade to fail, so change it to detect and report such cases before beginning the upgrade.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible report of wrong error condition after `clone()` failure in pg\\_upgrade with `--clone` option (Justin Pryzby) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/pg_stat_statements` to avoid problems with very large query-text files on 32-bit platforms (Tom Lane) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, prevent batch insertion when there are `WITH CHECK OPTION` constraints",
      "description": "Such constraints cannot be checked properly if more than one row is inserted at a time.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/postgres_fdw` to detect failure to send an asynchronous data fetch query (Fujii Masao) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `contrib/postgres_fdw` sends constants of `regconfig` and other `reg*` types with proper schema qualification (Tom Lane) ",
      "description": "",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Block signals while allocating dynamic shared memory on Linux",
      "description": "This avoids problems when a signal interrupts `posix_fallocate()`.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect unexpected `EEXIST` error from `shm_open()`",
      "description": "This avoids a possible crash on Solaris.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using `signalfd()` on illumos systems",
      "description": "This appears to trigger hangs and kernel panics, so avoid the function until a fix is available.",
      "fixedIn": "14.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid rare PANIC during updates occurring concurrently with `VACUUM`",
      "description": "If a concurrent `VACUUM` sets the all-visible flag bit in a page that `UPDATE` or `DELETE` is in process of modifying, the updating command needs to clear that bit again; but some code paths failed to do so, ending in a PANIC exit and database restart.\n\nThis is known to be possible in versions 14 and 15\\. It may be only latent in previous branches.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an `INSERT` on an updatable view",
      "description": "This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix resource management bug in saving tuples for `AFTER` triggers",
      "description": "Given the right circumstances, this manifested as a “tupdesc reference _`NNNN`_ is not owned by resource owner” error followed by a PANIC exit.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure in `EXPLAIN VERBOSE` for a query using `SEARCH BREADTH FIRST` with constant initial values (Tom Lane) ",
      "description": "",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix construction of per-partition foreign key constraints while doing `ALTER TABLE ATTACH PARTITION`",
      "description": "Previously, incorrect or duplicate constraints could be constructed for the newly-added partition.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix generation of constraint names for per-partition foreign key constraints",
      "description": "If the initially-given name is already in use for some constraint of the partition, a new one is selected; but it wasn't being spelled as intended.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect matching of index expressions and predicates when creating a partitioned index",
      "description": "While creating a partitioned index, we try to identify any existing indexes on the partitions that match the partitioned index, so that we can absorb those as child indexes instead of building new ones. Matching of expressions was not done right, so that a usable child index might be ignored, leading to creation of a duplicative index.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent WAL corruption after a standby promotion",
      "description": "When a PostgreSQL instance performing archive recovery (but not using standby mode) is promoted, and the last WAL segment that it attempted to read ended in a partial record, the instance would write an invalid WAL segment on the new timeline.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "This ameliorates problems with slow shutdown of replication workers.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent attempts to replicate into a foreign-table partition in replication workers",
      "description": "Although partitioned tables can have foreign tables as partitions, replicating into such a partition isn't currently supported. The logical replication worker process would crash if it was attempted. Now, an error is thrown.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove pointless check on replica identity setting of partitioned tables",
      "description": "What matters is the replica identity setting of the leaf partitions, so there's no need to throw error if it's not set on the parent.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "If a syntax error occurred in a SQL-language or PL/pgSQL-language `CREATE FUNCTION` or `DO` command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of read-write expanded datums that are passed to SQL functions",
      "description": "If a non-inlined SQL function uses a parameter in more than one place, and one of those functions expects to be able to modify read-write datums in place, then later uses of the parameter would observe the wrong value. (Within core PostgreSQL, the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types.)",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": [
        "Within core PostgreSQL",
        "the expanded-datum mechanism is only used for array and composite-type values; but extensions might use it for other structured types."
      ]
    },
    {
      "title": "Fix type `circle`'s equality comparator to handle NaNs properly",
      "description": "If the left-hand circle had a floating-point NaN for its radius, it would be considered equal to a circle with the same center and any radius.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In Snowball dictionaries, don't try to stem excessively-long words",
      "description": "If the input word exceeds 1000 bytes, return it as-is after case folding, rather than trying to run it through the Snowball code. This restriction protects against a known recursion-to-stack-overflow problem in the Turkish stemmer, and it seems like good insurance against any other safety or performance issues that may exist in the Snowball stemmers. Such a long string is surely not a word in any human language, so it's doubtful that the stemmer would have done anything desirable with it anyway.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use-after-free hazard in string comparisons",
      "description": "Improper memory management in the string comparison functions could result in scribbling on no-longer-allocated buffers, potentially breaking things for whatever is using that memory now. This would only happen with fairly long strings (more than 1kB), and only if an ICU collation is in use.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add plan-time check for attempted access to a table that has no table access method",
      "description": "This prevents a crash in some catalog-corruption scenarios, for example use of a view whose `ON SELECT` rule is missing.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add some more defenses against recursion till stack overrun (Richard Guo, Tom Lane) ",
      "description": "",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid misbehavior when choosing hash table size with very small `work_mem` and large tuples (Zhang Mingli) ",
      "description": "",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid long-term memory leakage in the autovacuum launcher process",
      "description": "The lack of field reports suggests that this problem is only latent in pre-v15 branches; but it's not very clear why, so back-patch the fix anyway.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve PL/pgSQL's ability to handle parameters declared as `RECORD`",
      "description": "Build a separate function cache entry for each concrete type passed to the `RECORD` parameter during a session, much as we do for polymorphic parameters. This allows some usages to work that previously failed with errors such as “type of parameter does not match that when preparing the plan”.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In libpq, handle single-row mode correctly when pipelining",
      "description": "The single-row flag was not reset at the correct time if pipeline mode was also active.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add missing guards for `NULL` connection pointer in libpq",
      "description": "There's a convention that libpq functions should check for a NULL PGconn argument, and fail gracefully instead of crashing. `PQflush()` and `PQisnonblocking()` didn't get that memo, so fix them.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, fix omission of variable storage classes when multiple `varchar` or `bytea` variables are declared in the same declaration",
      "description": "For example, ecpg translated `static varchar str1[10], str2[20], str3[30];` in such a way that only `str1` was marked `static`.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg\\_basebackup",
      "description": "Allow the remote path in `--tablespace-mapping` to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_stat\\_statements, fix access to already-freed memory",
      "description": "This occurred if pg\\_stat\\_statements tracked a `ROLLBACK` command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In postgres\\_fdw, ensure that target lists constructed for EvalPlanQual plans will have all required columns",
      "description": "This avoids “variable not found in subplan target list” errors in rare cases.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject unwanted output from the platform's `uuid_create()` function",
      "description": "The uuid-ossp module expects libc's `uuid_create()` to produce a version-1 UUID, but recent NetBSD releases produce a version-4 (random) UUID instead. Check for that, and complain if so. Drop the documentation's claim that the NetBSD implementation is usable for uuid-ossp. (If a version-4 UUID is okay for your purposes, you don't need uuid-ossp at all; just use `gen_random_uuid()`.)",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include new Perl test modules in standard installations",
      "description": "Add `PostgreSQL/Test/Cluster.pm` and `PostgreSQL/Test/Utils.pm` to the standard installation file set in pre-version-15 branches. This is for the benefit of extensions that want to use newly-written test code in older branches.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On NetBSD, force dynamic symbol resolution at postmaster start",
      "description": "This avoids a risk of deadlock in the dynamic linker on NetBSD 10.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibilities with LLVM 15 (Thomas Munro, Andres Freund) ",
      "description": "",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set()` for spinlocks on any machine",
      "description": "This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane) ",
      "description": "",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using `sprintf`, to avoid compile-time deprecation warnings (Tom Lane) ",
      "description": "",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Silence assorted compiler warnings from clang 15 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "14.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.",
      "description": "Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala\\_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan\\_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy\\_River, America/Thunder\\_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n\nThese zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of `timestamptz` display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n\nIt is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "fixedIn": "14.6",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Fix calculation of which `GENERATED` columns need to be updated in child tables during an `UPDATE` on a partitioned table or inheritance tree",
      "description": "This fixes failure to update `GENERATED` columns that do not exist in the parent table, or that have different dependencies than are in the parent column's generation expression.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow a `WITH RECURSIVE ... CYCLE` CTE to access its output column",
      "description": "A reference to the `SET` column from within the CTE would fail with “cache lookup failed for type 0”.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of pending inserts when doing a bulk insertion to a foreign table",
      "description": "In some cases pending insertions were not flushed to the FDW soon enough, leading to logical inconsistencies, for example `BEFORE ROW` triggers not seeing rows they should be able to see.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid",
      "description": "When pg\\_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an `INSERT` from a multi-row `VALUES` list",
      "description": "In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject uses of undefined variables in `jsonpath` existence checks",
      "description": "While `jsonpath` match operators threw an error for an undefined variable in the path pattern, the existence operators silently treated it as a match.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `jsonb` subscripting to cope with toasted subscript values",
      "description": "Using a text value fetched directly from a table as a `jsonb` subscript was likely to fail. Fetches would usually not find any matching element. Assignments could store the value with a garbage key, although keys long enough to cause that problem are probably rare in the field.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Honor non-default settings of `checkpoint_completion_target`",
      "description": "Internal state was not updated after a change in `checkpoint_completion_target`, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Log the correct ending timestamp in `recovery_target_xid` mode",
      "description": "When ending recovery based on the `recovery_target_xid` setting with `recovery_target_inclusive` \\= `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve error reporting for some buffered file read failures",
      "description": "Correctly report a short read, giving the numbers of bytes desired and actually read, instead of reporting an irrelevant error code. Most places got this right already, but some recently-written replication logic did not.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after `ANALYZE` if we're running a pipeline",
      "description": "If there's not been an explicit `BEGIN TRANSACTION`, `ANALYZE` would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner issues when combining Memoize nodes with partitionwise joins or parameterized nestloops",
      "description": "These errors could lead to not using Memoize in contexts where it would be useful, or possibly to wrong query plans.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "This could result in “could not devise a query plan for the given query” errors.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range`",
      "description": "Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "fixedIn": "14.7",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Fix under-parenthesized display of `AT TIME ZONE` constructs",
      "description": "This could result in dump/restore failures for rules or views in which an argument of `AT TIME ZONE` is itself an expression.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent clobbering of cached parsetrees for utility statements in SQL functions",
      "description": "If a SQL-language function executes the same utility command more than once within a single calling query, it could crash or report strange errors such as “unrecognized node type”.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches (Tom Lane) ",
      "description": "",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in hashing strings with nondeterministic collations (Jeff Davis) ",
      "description": "",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix deadlock between `DROP DATABASE` and logical replication worker process",
      "description": "This was caused by an ill-advised choice to block interrupts while creating a logical replication slot in the worker. In version 15 that could lead to an undetected deadlock. In version 14, no deadlock has been observed, but it's still a bad idea to block interrupts while waiting for network I/O.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as `CREATE SUBSCRIPTION`, such a failure resulted in a small session-lifespan memory leak.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when `max_connections` is set to a large value on the standby.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore invalidated logical-replication slots while determining oldest catalog xmin",
      "description": "A replication slot could prevent cleanup of dead tuples in the system catalogs even after it becomes invalidated due to exceeding `max_slot_wal_keep_size`. Thus, failure of a replication consumer could lead to indefinitely-large catalog bloat.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In logical decoding, notify the remote node when a transaction is detected to have crashed",
      "description": "After a server restart, we'll re-stream the changes for transactions occurring shortly before the restart. Some of these transactions probably never completed; when we realize that one didn't we throw away the relevant decoding state locally, but we neglected to tell the subscriber about it. That led to the subscriber keeping useless streaming files until it's next restarted.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations (Robert Haas) ",
      "description": "",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent unsafe usage of a relation cache entry's `rd_smgr` pointer",
      "description": "Remove various assumptions that `rd_smgr` would stay valid over a series of operations, by wrapping all uses of it in a function that will recompute it if needed. This prevents bugs occurring when an unexpected cache flush occurs partway through such a series.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `int64_div_fast_to_numeric()` to work for a wider range of inputs",
      "description": "This function misbehaved with some values of its second argument. No such usages exist in core PostgreSQL, but it's clearly a hazard for external modules, so repair.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "The `epoll`\\-based and `kqueue`\\-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure in BRIN minmax-multi opclasses",
      "description": "The assertion was overly strict, so this mistake was harmless in non-assert builds.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove faulty assertion in useless-RESULT-RTE optimization logic (Tom Lane) ",
      "description": "",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, avoid calling unsafe server functions before we have locks on the tables to be examined",
      "description": "pg\\_dump uses certain server functions that can fail if examining a table that gets dropped concurrently. Avoid this type of failure by ensuring that we obtain access share lock before inquiring too deeply into a table's properties, and that we don't apply such functions to tables we don't intend to dump at all.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql's `\\sf` and `\\ef` commands to handle SQL-language functions that have SQL\\-standard function bodies",
      "description": "These commands misidentified the start of the function body when it used new-style syntax.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix tab completion of `ALTER FUNCTION/PROCEDURE/ROUTINE` ... `SET SCHEMA` (Dean Rasheed) ",
      "description": "",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/seg` to not crash or print garbage if an input number has more than 127 digits (Tom Lane) ",
      "description": "",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix build on Microsoft Visual Studio 2013",
      "description": "A previous patch supposed that all platforms of interest have `snprintf()`, but MSVC 2013 isn't quite there yet. Revert to using `sprintf()` on that platform.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_waldump to build on compilers that don't discard unused static-inline functions (Tom Lane) ",
      "description": "",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.",
      "description": "Notably, a new timezone America/Ciudad\\_Juarez has been split off from America/Ojinaga.",
      "fixedIn": "14.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash when the new schema name is omitted in `CREATE SCHEMA`",
      "description": "The SQL standard allows writing `` CREATE SCHEMA AUTHORIZATION _`ownername`_ ``, with the schema name defaulting to _`ownername`_. However some code paths expected the schema name to be present and would fail.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix enabling/disabling of cloned triggers in partitioned tables",
      "description": "`ALTER TABLE ... ENABLE/DISABLE TRIGGER USER` skipped cloned triggers, mistaking them for system triggers. Other variants of `ENABLE/DISABLE TRIGGER` would process them, but only after improperly enforcing a superuserness check.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "`ALTER TYPE` disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow system columns as elements of foreign keys",
      "description": "Since the removal of OID as a system column, there is no plausible use-case for this, and various bits of code no longer support it. Disallow it rather than trying to fix all the cases.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `COPY TO` from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "The documentation is quite clear that `COPY TO` copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible crash when `array_position()` or `array_positions()` is passed an empty array (Tom Lane) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char()`",
      "description": "With bad luck this could have resulted in a server crash.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid buffer overread in `translate()` function",
      "description": "When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data corruption due to `vacuum_defer_cleanup_age` being larger than the current 64-bit xid",
      "description": "In v14 and later with non-default settings of `vacuum_defer_cleanup_age`, it was possible to compute a very large vacuum cleanup horizon xid, leading to vacuum removing rows that are still live. v12 and v13 have a lesser form of the same problem affecting only GiST indexes, which could lead to index pages getting recycled too early.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure with PlaceHolderVars in extended-statistics code",
      "description": "Use of dependency-type extended statistics could fail with “PlaceHolderVar found where not expected”.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent crash when updating a field within an array-of-domain-over-composite-type column (Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "A crash was possible given unlucky timing and `parallel_leader_participation` \\= `off` (which is not the default).",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate `GENERATED` columns after an EvalPlanQual check",
      "description": "In `READ COMMITTED` isolation mode, the effects of a row update might need to get reapplied to a newer version of the row than the query found originally. If so, we need to recompute any `GENERATED` columns, in case they depend on columns that were changed by the concurrent update.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in Memoize plan execution (David Rowley) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix buffer refcount leak when using batched inserts for a foreign table included in a partitioned tree (Alexander Pyhalov) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Restore support for sub-millisecond `vacuum_cost_delay` settings (Thomas Munro) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation `vacuum_cost_delay` setting of zero",
      "description": "Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation `vacuum_cost_delay` setting, but this was done only for positive settings, not zero.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair rare failure of MULTIEXPR\\_SUBLINK subplans in partitioned updates",
      "description": "Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When decompiling a rule or SQL function body containing `INSERT`/`UPDATE`/`DELETE` within `WITH`, take care to print the correct alias for the target table (Tom Lane) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache\\_callback\\_list slots” error.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary calls to custom validators for index operator class options",
      "description": "This change fixes some cases where an unexpected error was thrown.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid useless work while scanning a multi-column BRIN index with multiple scan keys",
      "description": "The existing code effectively considered only the last scan key while deciding whether a range matched, thus usually scanning more of the index than it needed to.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix netmask handling in BRIN inet\\_minmax\\_multi\\_ops opclass",
      "description": "This error triggered an assertion failure in assert-enabled builds, but is mostly harmless in production builds.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore dropped columns and generated columns during logical replication of an update or delete action",
      "description": "Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correct the name of the wait event for SLRU buffer I/O for commit timestamps",
      "description": "This wait event is named `CommitTsBuffer` according to the documentation, but the code had it as `CommitTSBuffer`. Change the code to match the documentation, as that way is more consistent with the naming of related wait events.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-activate reporting of wait event `SLRUFlushSync`",
      "description": "Reporting of this type of wait was accidentally removed in code refactoring.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible underflow when calculating how many WAL segments to keep",
      "description": "This could result in not honoring `wal_keep_size` accurately.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add missing cases to `SPI_result_code_string()` (Dean Rasheed) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc()`",
      "description": "In the unusual case where the size of a large (>8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message (Tomas Vondra) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range()` when the last few pages in the specified range are empty",
      "description": "It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions (Ajit Awekar, Tom Lane) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Some rare failure cases could return without cleaning up the PG\\_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll()`",
      "description": "With `gssencmode` set to `require`, the connection was not marked dead after a GSS initialization failure. Make it fail immediately, as the equivalent case for TLS encryption has long done.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the `-C ORACLE` option",
      "description": "When `ecpg_get_data()` is called with `varcharsize` set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the `--load-via-partition-root` option; but since there is very little chance of success without that, teach pg\\_dump to apply it automatically to such tables.\n\nAlso, fix pg\\_restore to not try to `TRUNCATE` target tables before restoring into them when `--load-via-partition-root` mode is used. This avoids a hazard of deadlocks and lost data.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly detect non-seekable files on Windows",
      "description": "This bug led to misbehavior when pg\\_dump writes to a pipe or pg\\_restore reads from one.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pgbench's “prepared” mode, prepare all the commands in a pipeline before starting the pipeline",
      "description": "This avoids a failure when a pgbench script tries to start a serializable transaction inside a pipeline.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`'s heap checking code, deal correctly with tuples having zero xmin or xmax (Robert Haas) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, deal sanely with xids that appear to be before epoch zero",
      "description": "In cases of corruption we might see a wrapped-around 32-bit xid that appears to be before the first xid epoch. Promoting such a value to 64-bit form produced a value far in the future, resulting in wrong reports. Return FirstNormalFullTransactionId in such cases so that things work reasonably sanely.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/hstore_plpython`, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require the `siglen` option of a GiST index on an `ltree` column, if specified, to be a multiple of 4",
      "description": "Other values result in misaligned accesses to index content, which is harmless on Intel-compatible hardware but can cause a crash on some other architectures.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pageinspect`, add defenses against incorrect input for the `gist_page_items()` function (Dmitry Koval) ",
      "description": "",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior in `contrib/pg_trgm` with an unsatisfiable regular expression",
      "description": "A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg\\_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the `--strip-unneeded` option when stripping static libraries with GNU-compatible strip",
      "description": "Previously, `make install-strip` used the `-x` option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's `--nonet` option to the build recipes.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary `portlock` directory",
      "description": "Place it under `tmp_check` in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.",
      "description": "When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "fixedIn": "14.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries",
      "description": "Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n\nThis fix will not in itself correct faulty BRIN entries. It's recommended to `REINDEX` any BRIN indexes that may be used to search for nulls.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaving a corrupted database behind when `DROP DATABASE` is interrupted",
      "description": "If `DROP DATABASE` was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its `pg_database` row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another `DROP DATABASE`.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during `ALTER TABLE ATTACH PARTITION`",
      "description": "Such an index will now be ignored, and a new child index created instead.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "The update of the index's `pg_index` entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER EXTENSION SET SCHEMA` to complain if the extension contains any objects outside the extension's schema",
      "description": "Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't Memoize lateral joins with volatile join conditions",
      "description": "Applying Memoize to a sub-plan that contains volatile filter conditions is likely to lead to wrong answers. The check to avoid doing this missed some cases that can arise when using `LATERAL`.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "fixedIn": "14.9",
      "significant": true,
      "contributors": [
        "A better solution will require ABI-breaking changes of planner data structures",
        "so it will have to wait for a future major release."
      ]
    },
    {
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions (Tom Lane) ",
      "description": "",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior of EvalPlanQual checks with inherited or partitioned target tables",
      "description": "This oversight could lead to update or delete actions in `READ COMMITTED` isolation mode getting performed when they should have been skipped because of a conflicting concurrent update.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop",
      "description": "When rescanning the join after the values of such Params have changed, we must rebuild the hash table, but neglected to do so. This could result in missing join output rows.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent query-lifespan memory leaks in some `UPDATE` queries with triggers (Tomas Vondra) ",
      "description": "",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent query-lifespan memory leaks when an Incremental Sort plan node is rescanned (James Coleman, Laurenz Albe, Tom Lane) ",
      "description": "",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Accept fractional seconds in the input to `jsonpath`'s `datetime()` method (Tom Lane) ",
      "description": "",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns (Tom Lane) ",
      "description": "",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow tokens up to 10240 bytes long in `pg_hba.conf` and `pg_ident.conf`",
      "description": "The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "If JIT is in use, running out of memory in a C++ `new` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix rare null-pointer crash in `plancache.c` (Tom Lane) ",
      "description": "",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `VACUUM` to continue after detecting certain types of b-tree index corruption",
      "description": "If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of `REINDEX` will fix the broken index, but preventing `VACUUM` from completing until that is done risks making matters far worse.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `WrapLimitsVacuumLock` is released after `VACUUM` detects invalid data in `pg_database`.`datfrozenxid` or `pg_database`.`datminmxid`",
      "description": "Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure while promoting a standby server, if archiving is enabled and two-phase transactions need to be recovered",
      "description": "If any required two-phase transactions were logged in the most recent (partial) log segment, promotion would fail with an incorrect complaint about “requested WAL segment has already been removed”.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync`'ed at the next checkpoint",
      "description": "Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix missing reinitializations of delay-checkpoint-end flags",
      "description": "This could result in unnecessary delays of checkpoints, or in assertion failures in assert-enabled builds.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix overly strict assertion in `jsonpath` code",
      "description": "This assertion failed if a query applied the `.type()` operator to a `like_regex` result. There was no bug in non-assert builds.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction (Tom Lane) ",
      "description": "",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/fuzzystrmatch`'s Soundex `difference()` function to handle empty input sanely",
      "description": "An input string containing no alphabetic characters resulted in unpredictable output.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten whitespace checks in `contrib/hstore` input",
      "description": "In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow oversize input arrays with `contrib/intarray`'s `gist__int_ops` index opclass",
      "description": "Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in `contrib/intarray` (Konstantin Knizhnik, Matthias van de Meent, Tom Lane) ",
      "description": "",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/pageinspect`'s `gist_page_items()` function to work when there are included index columns",
      "description": "Previously, if the index has included columns, `gist_page_items()` would fail to display those values on index leaf pages, or crash outright on non-leaf pages.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to correctly handle new-style SQL-language functions whose bodies require parse-time dependencies on unique indexes",
      "description": "Such cases can arise from `GROUP BY` and `ON CONFLICT` clauses, for example. The function must then be postponed until after the unique index in the dump output, but pg\\_dump did not do that and instead printed a warning about “could not resolve dependency loop”.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_index`.`indisreplident` is kept up-to-date in relation cache entries",
      "description": "This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "fixedIn": "14.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support for the SQL [MERGE](https://www.postgresql.org/docs/15/sql-merge.html \"MERGE\") command.",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Selective publication of tables' contents within [logical replication](https://www.postgresql.org/docs/15/logical-replication.html \"Chapter 31. Logical Replication\") publications, through the ability to specify column lists and row filter conditions.",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "More options for compression, including support for Zstandard (zstd) compression. This includes support for performing compression on the server side during [pg\\_basebackup](https://www.postgresql.org/docs/15/app-pgbasebackup.html \"pg_basebackup\").",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support for structured [server log output](https://www.postgresql.org/docs/15/runtime-config-logging.html#GUC-LOG-DESTINATION) using the JSON format.",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change the owner of the `public` schema to be the new `pg_database_owner` role",
      "description": "This allows each database's owner to have ownership privileges on the `public` schema within their database. Previously it was owned by the bootstrap superuser, so that non-superuser database owners could not do anything with it.\n\nThis change applies to new database clusters and to newly-created databases in existing clusters. Upgrading a cluster or restoring a database dump will preserve `public`'s existing ownership specification.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove long-deprecated [exclusive backup mode](https://www.postgresql.org/docs/15/continuous-archiving.html#BACKUP-BASE-BACKUP \"26.3.2. Making a Base Backup\")",
      "description": "If the database server stops abruptly while in this mode, the server could fail to start. The non-exclusive backup mode is considered superior for all purposes. Functions `pg_start_backup()`/`pg_stop_backup()` have been renamed to `pg_backup_start()`/`pg_backup_stop()`, and the functions `pg_backup_start_time()` and `pg_is_in_backup()` have been removed.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Increase [hash\\_mem\\_multiplier](https://www.postgresql.org/docs/15/runtime-config-resource.html#GUC-HASH-MEM-MULTIPLIER) default to 2.0",
      "description": "This allows query hash operations to use more [work\\_mem](https://www.postgresql.org/docs/15/runtime-config-resource.html#GUC-WORK-MEM) memory than other operations.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove server-side language [plpython2u](https://www.postgresql.org/docs/15/plpython.html \"Chapter 46. PL/Python — Python Procedural Language\") and generic Python language `plpythonu`",
      "description": "Python 2.x is no longer supported. While the original intent of `plpythonu` was that it could eventually refer to `plpython3u`, changing it now seems more likely to cause problems than solve them, so it's just been removed.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Generate an error if [array\\_to\\_tsvector()](https://www.postgresql.org/docs/15/functions-textsearch.html#TEXTSEARCH-FUNCTIONS-TABLE \"Table 9.43. Text Search Functions\") is passed an empty-string array element",
      "description": "This is prohibited because lexemes should never be empty. Users of previous Postgres releases should verify that no empty lexemes are stored because they can lead to dump/restore failures and inconsistent results.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Generate an error when [chr()](https://www.postgresql.org/docs/15/functions-string.html#FUNCTIONS-STRING-OTHER \"Table 9.10. Other String Functions and Operators\") is supplied with a negative argument (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent [CREATE OR REPLACE VIEW](https://www.postgresql.org/docs/15/sql-createview.html \"CREATE VIEW\") from changing the collation of an output column (Tom Lane) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow zero-length [Unicode identifiers](https://www.postgresql.org/docs/15/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS \"4.1.1. Identifiers and Key Words\"), e.g., `U&\"\"`",
      "description": "Non-Unicode zero-length identifiers were already disallowed.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent [numeric literals](https://www.postgresql.org/docs/15/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS-NUMERIC \"4.1.2.6. Numeric Constants\") from having non-numeric trailing characters",
      "description": "Previously, query text like `123abc` would be interpreted as `123` followed by a separate token `abc`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust [JSON](https://www.postgresql.org/docs/15/datatype-json.html \"8.14. JSON Types\") numeric literal processing to match the SQL/JSON\\-standard",
      "description": "This accepts numeric formats like `.1` and `1.`, and disallows trailing junk after numeric literals, like `1.type()`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When [interval](https://www.postgresql.org/docs/15/datatype-datetime.html \"8.5. Date/Time Types\") input provides a fractional value for a unit greater than months, round to the nearest month",
      "description": "For example, convert `1.99 years` to `2 years`, not `1 year 11 months` as before.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Mark the `interval` output function as stable, not immutable, since it depends on [IntervalStyle](https://www.postgresql.org/docs/15/runtime-config-client.html#GUC-INTERVALSTYLE)",
      "description": "This will, for example, cause creation of indexes relying on the text output of `interval` values to fail.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow in [interval justification functions](https://www.postgresql.org/docs/15/functions-datetime.html#FUNCTIONS-DATETIME-TABLE \"Table 9.33. Date/Time Functions\")",
      "description": "The affected functions are `justify_interval()`, `justify_hours()`, and `justify_days()`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change the I/O format of type `\"char\"` for non-ASCII characters",
      "description": "Bytes with the high bit set are now output as a backslash and three octal digits, to avoid encoding issues.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove the default [ADMIN OPTION](https://www.postgresql.org/docs/15/sql-createrole.html \"CREATE ROLE\") privilege a login role has on its own role membership",
      "description": "Previously, a login role could add/remove members of its own role, even without `ADMIN OPTION` privilege.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [logical replication](https://www.postgresql.org/docs/15/logical-replication.html \"Chapter 31. Logical Replication\") to run as the owner of the subscription",
      "description": "Because row-level security policies are not checked, only superusers, roles with `bypassrls`, and table owners can replicate into tables with row-level security policies.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `UPDATE` and `DELETE` [logical replication](https://www.postgresql.org/docs/15/logical-replication.html \"Chapter 31. Logical Replication\") operations on tables where the subscription owner does not have `SELECT` permission on the table",
      "description": "`UPDATE` and `DELETE` commands typically involve reading the table as well, so require the subscription owner to have table `SELECT` permission.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When [EXPLAIN](https://www.postgresql.org/docs/15/sql-explain.html \"EXPLAIN\") references the session's temporary object schema, refer to it as `pg_temp`",
      "description": "Previously the actual schema name was reported, leading to inconsistencies across sessions.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [pg\\_statio\\_all\\_tables](https://www.postgresql.org/docs/15/monitoring-stats.html#MONITORING-PG-STATIO-ALL-TABLES-VIEW \"28.2.19. pg_statio_all_tables\") to sum values for the rare case of TOAST tables with multiple indexes",
      "description": "Previously such cases would show one row for each index.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow setting [custom options](https://www.postgresql.org/docs/15/runtime-config-custom.html \"20.16. Customized Options\") that match the name of an installed extension, but are not one of the extension's declared variables",
      "description": "This change causes any such pre-existing variables to be deleted during extension load, and then prevents new ones from being created later in the session. The intent is to prevent confusion about whether a variable is associated with an extension or not.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove obsolete server variable `stats_temp_directory` (Andres Freund, Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "libpq's [PQsendQuery()](https://www.postgresql.org/docs/15/libpq-async.html#LIBPQ-PQSENDQUERY) function is no longer supported in pipeline mode",
      "description": "Applications that are using that combination will need to be modified to use `PQsendQueryParams()` instead.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On non-Windows platforms, consult the `HOME` environment variable to find the user's home directory",
      "description": "If `HOME` is empty or unset, fall back to the previous method of checking the `<pwd.h>` database. This change affects libpq (for example, while looking up `~/.pgpass`) as well as various client application programs.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove [pg\\_dump](https://www.postgresql.org/docs/15/app-pgdump.html \"pg_dump\")'s `--no-synchronized-snapshots` option",
      "description": "All still-supported server versions support synchronized snapshots, so there's no longer a need for this option.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "After an error is detected in [psql](https://www.postgresql.org/docs/15/app-psql.html \"psql\")'s `--single-transaction` mode, change the final `COMMIT` command to `ROLLBACK` only if `ON_ERROR_STOP` is set (Michael Paquier) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary casting of constants in queries sent by [postgres\\_fdw](https://www.postgresql.org/docs/15/postgres-fdw.html \"F.38. postgres_fdw\")",
      "description": "When column types are intentionally different between local and remote databases, such casts could cause errors.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove [xml2](https://www.postgresql.org/docs/15/xml2.html \"F.50. xml2\")'s `xml_is_well_formed()` function",
      "description": "This function has been implemented in the core backend since Postgres 9.1.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [custom scan providers](https://www.postgresql.org/docs/15/custom-scan.html \"Chapter 61. Writing a Custom Scan Provider\") to indicate if they support projections",
      "description": "The default is now that custom scan providers are assumed to not support projections; those that do will need to be updated for this release.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Record and check the collation version of each [database](https://www.postgresql.org/docs/15/sql-createdatabase.html \"CREATE DATABASE\")",
      "description": "This feature is designed to detect collation version changes to avoid index corruption. Function `pg_database_collation_actual_version()` reports the underlying operating system collation version, and `ALTER DATABASE ... REFRESH` sets the recorded database collation version to match the operating system collation version.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [ICU](https://www.postgresql.org/docs/15/locale.html \"24.1. Locale Support\") collations to be set as the default for clusters and databases",
      "description": "Previously, only libc\\-based collations could be selected at the cluster and database levels. ICU collations could only be used via explicit `COLLATE` clauses.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_ident\\_file\\_mappings](https://www.postgresql.org/docs/15/view-pg-ident-file-mappings.html \"54.10. pg_ident_file_mappings\") to report `pg_ident.conf` information (Julien Rouhaud) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow ordered scans of partitions to avoid sorting in more cases",
      "description": "Previously, a partitioned table with a `DEFAULT` partition or a `LIST` partition containing multiple values could not be used for ordered partition scans. Now they can be used if such partitions are pruned during planning.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [CLUSTER](https://www.postgresql.org/docs/15/sql-cluster.html \"CLUSTER\") on partitioned tables (Justin Pryzby) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [ALTER TRIGGER RENAME](https://www.postgresql.org/docs/15/sql-altertable.html \"ALTER TABLE\") on partitioned tables to properly rename triggers on all partitions",
      "description": "Also prohibit cloned triggers from being renamed.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow unique constraints and indexes to treat `NULL` values as not distinct",
      "description": "Previously `NULL` entries were always treated as distinct values, but this can now be changed by creating constraints and indexes using `UNIQUE NULLS NOT DISTINCT`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the [^@](https://www.postgresql.org/docs/15/functions-string.html#FUNCTIONS-STRING-OTHER \"Table 9.10. Other String Functions and Operators\") starts-with operator and the `starts_with()` function to use btree indexes if using the C collation",
      "description": "Previously these could only use [SP-GiST](https://www.postgresql.org/docs/15/spgist.html \"Chapter 69. SP-GiST Indexes\") indexes.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [extended statistics](https://www.postgresql.org/docs/15/sql-createstatistics.html \"CREATE STATISTICS\") to record statistics for a parent with all its children",
      "description": "Regular statistics already tracked parent and parent-plus-all-children statistics separately.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable [recursive\\_worktable\\_factor](https://www.postgresql.org/docs/15/runtime-config-query.html#GUC-RECURSIVE-WORKTABLE-FACTOR) to allow the user to specify the expected size of the working table of a [recursive query](https://www.postgresql.org/docs/15/queries-with.html#QUERIES-WITH-RECURSIVE \"7.8.2. Recursive Queries\") (Simon Riggs) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow hash lookup for [NOT IN](https://www.postgresql.org/docs/15/functions-subquery.html#FUNCTIONS-SUBQUERY-NOTIN \"9.23.3. NOT IN\") clauses with many constants",
      "description": "Previously the code always sequentially scanned the list of values.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `SELECT DISTINCT` to be parallelized (David Rowley) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow WAL [full page writes](https://www.postgresql.org/docs/15/runtime-config-wal.html#GUC-FULL-PAGE-WRITES) to use LZ4 and Zstandard compression",
      "description": "This is controlled by the [wal\\_compression](https://www.postgresql.org/docs/15/runtime-config-wal.html#GUC-WAL-COMPRESSION) server setting.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for writing WAL using [direct I/O](https://www.postgresql.org/docs/15/runtime-config-wal.html#GUC-WAL-SYNC-METHOD) on macOS",
      "description": "This only works if `max_wal_senders = 0` and `wal_level = minimal`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [vacuum](https://www.postgresql.org/docs/15/routine-vacuuming.html \"25.1. Routine Vacuuming\") to be more aggressive in setting the oldest frozen and multi transaction id (Peter Geoghegan) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow a query referencing multiple [foreign tables](https://www.postgresql.org/docs/15/ddl-foreign-data.html \"5.12. Foreign Data\") to perform parallel foreign table scans in more cases (Andrey Lepikhov, Etsuro Fujita) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enable default logging of checkpoints and slow autovacuum operations",
      "description": "This changes the default of [log\\_checkpoints](https://www.postgresql.org/docs/15/runtime-config-logging.html#GUC-LOG-CHECKPOINTS) to `on` and that of [log\\_autovacuum\\_min\\_duration](https://www.postgresql.org/docs/15/runtime-config-logging.html#GUC-LOG-AUTOVACUUM-MIN-DURATION) to 10 minutes. This will cause even an idle server to generate some log output, which might cause problems on resource-constrained servers without log file rotation. These defaults should be changed in such cases.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Generate progress messages in the server log during slow server starts",
      "description": "The messages report the cause of the delay. The time interval for notification is controlled by the new server variable [log\\_startup\\_progress\\_interval](https://www.postgresql.org/docs/15/runtime-config-logging.html#GUC-LOG-STARTUP-PROGRESS-INTERVAL).",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Store [cumulative statistics system](https://www.postgresql.org/docs/15/monitoring-stats.html \"28.2. The Cumulative Statistics System\") data in shared memory",
      "description": "Previously this data was sent to a statistics collector process via UDP packets, and could only be read by sessions after transferring it via the file system. There is no longer a separate statistics collector process.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add additional information to `VACUUM VERBOSE` and autovacuum logging messages (Peter Geoghegan) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [EXPLAIN (BUFFERS)](https://www.postgresql.org/docs/15/sql-explain.html \"EXPLAIN\") output for temporary file block I/O (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_stat\\_reset\\_single\\_table\\_counters()](https://www.postgresql.org/docs/15/monitoring-stats.html#MONITORING-STATS-FUNCS-TABLE \"Table 28.34. Additional Statistics Functions\") to reset the counters of relations shared across all databases (Sadhuprasad Patro) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [wait events](https://www.postgresql.org/docs/15/monitoring-stats.html#WAIT-EVENT-TABLE \"Table 28.4. Wait Event Types\") for local shell commands",
      "description": "The new wait events are used when calling `archive_command`, `archive_cleanup_command`, `restore_command` and `recovery_end_command`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow table accesses done by a [view](https://www.postgresql.org/docs/15/sql-createview.html \"CREATE VIEW\") to optionally be controlled by privileges of the view's caller",
      "description": "Previously, view accesses were always treated as being done by the view's owner. That's still the default.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow members of the [pg\\_write\\_server\\_files](https://www.postgresql.org/docs/15/predefined-roles.html#PREDEFINED-ROLES-TABLE \"Table 22.1. Predefined Roles\") predefined role to perform server-side base backups",
      "description": "Previously only superusers could perform such backups.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add predefined role [pg\\_checkpoint](https://www.postgresql.org/docs/15/predefined-roles.html#PREDEFINED-ROLES-TABLE \"Table 22.1. Predefined Roles\") that allows members to run `CHECKPOINT`",
      "description": "Previously checkpoints could only be run by superusers.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow members of the [pg\\_read\\_all\\_stats](https://www.postgresql.org/docs/15/predefined-roles.html#PREDEFINED-ROLES-TABLE \"Table 22.1. Predefined Roles\") predefined role to access the views [pg\\_backend\\_memory\\_contexts](https://www.postgresql.org/docs/15/view-pg-backend-memory-contexts.html \"54.4. pg_backend_memory_contexts\") and [pg\\_shmem\\_allocations](https://www.postgresql.org/docs/15/view-pg-shmem-allocations.html \"54.26. pg_shmem_allocations\")",
      "description": "Previously these views could only be accessed by superusers.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [GRANT](https://www.postgresql.org/docs/15/sql-grant.html \"GRANT\") to grant permissions on [pg\\_log\\_backend\\_memory\\_contexts()](https://www.postgresql.org/docs/15/functions-admin.html#FUNCTIONS-ADMIN-SIGNAL \"9.27.2. Server Signaling Functions\")",
      "description": "Previously this function could only be run by superusers.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable [shared\\_memory\\_size](https://www.postgresql.org/docs/15/runtime-config-preset.html#GUC-SHARED-MEMORY-SIZE) to report the size of allocated shared memory (Nathan Bossart) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable [shared\\_memory\\_size\\_in\\_huge\\_pages](https://www.postgresql.org/docs/15/runtime-config-preset.html#GUC-SHARED-MEMORY-SIZE-IN-HUGE-PAGES) to report the number of huge memory pages required",
      "description": "This is only supported on Linux.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Honor server variable [shared\\_preload\\_libraries](https://www.postgresql.org/docs/15/runtime-config-client.html#GUC-SHARED-PRELOAD-LIBRARIES) in single-user mode",
      "description": "This change supports use of `shared_preload_libraries` to load custom access methods and WAL resource managers, which would be essential for database access even in single-user mode.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Solaris, make the default setting of [dynamic\\_shared\\_memory\\_type](https://www.postgresql.org/docs/15/runtime-config-resource.html#GUC-DYNAMIC-SHARED-MEMORY-TYPE) be `sysv`",
      "description": "The previous default choice, `posix`, can result in spurious failures on this platform.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [postgres -C](https://www.postgresql.org/docs/15/app-postgres.html \"postgres\") to properly report runtime-computed values",
      "description": "Previously runtime-computed values [data\\_checksums](https://www.postgresql.org/docs/15/runtime-config-preset.html#GUC-DATA-CHECKSUMS), [wal\\_segment\\_size](https://www.postgresql.org/docs/15/runtime-config-preset.html#GUC-WAL-SEGMENT-SIZE), and [data\\_directory\\_mode](https://www.postgresql.org/docs/15/runtime-config-preset.html#GUC-DATA-DIRECTORY-MODE) would report values that would not be accurate on the running server. However, this does not work on a running server.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for LZ4 and Zstandard compression of server-side [base backups](https://www.postgresql.org/docs/15/continuous-archiving.html#BACKUP-BASE-BACKUP \"26.3.2. Making a Base Backup\") (Jeevan Ladhe, Robert Haas) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow WAL processing to pre-fetch needed file contents",
      "description": "This is controlled by the server variable [recovery\\_prefetch](https://www.postgresql.org/docs/15/runtime-config-wal.html#GUC-RECOVERY-PREFETCH).",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow archiving via loadable modules",
      "description": "Previously, archiving was only done by calling shell commands. The new server variable [archive\\_library](https://www.postgresql.org/docs/15/runtime-config-wal.html#GUC-ARCHIVE-LIBRARY) can be set to specify a library to be called for archiving.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "No longer require [IDENTIFY\\_SYSTEM](https://www.postgresql.org/docs/15/protocol-replication.html \"55.4. Streaming Replication Protocol\") to be run before `START_REPLICATION` (Jeff Davis) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow publication content to be filtered using a `WHERE` clause",
      "description": "Rows not satisfying the `WHERE` clause are not published.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow publication content to be restricted to specific columns (Tomas Vondra, Álvaro Herrera, Rahila Syed) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow skipping of transactions on a subscriber using [ALTER SUBSCRIPTION ... SKIP](https://www.postgresql.org/docs/15/sql-altersubscription.html \"ALTER SUBSCRIPTION\") (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent logical replication of empty transactions",
      "description": "Previously, publishers would send empty transactions to subscribers if subscribed tables were not modified.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow subscribers to stop the application of logical replication changes on error",
      "description": "This is enabled with the subscriber option [disable\\_on\\_error](https://www.postgresql.org/docs/15/sql-createsubscription.html \"CREATE SUBSCRIPTION\") and avoids possible infinite error loops during stream application.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust subscriber server variables to match the publisher so datetime and float8 values are interpreted consistently",
      "description": "Some publishers might be relying on inconsistent behavior.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress duplicate entries in the [pg\\_publication\\_tables](https://www.postgresql.org/docs/15/view-pg-publication-tables.html \"54.17. pg_publication_tables\") system view",
      "description": "In some cases a partition could appear more than once.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL [MERGE](https://www.postgresql.org/docs/15/sql-merge.html \"MERGE\") command to adjust one table to match another",
      "description": "This is similar to `INSERT ... ON CONFLICT` but more batch-oriented.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new WAL\\-logged method for [database creation](https://www.postgresql.org/docs/15/sql-createdatabase.html \"CREATE DATABASE\")",
      "description": "This is the new default method for copying the template database, as it avoids the need for checkpoints during database creation. However, it might be slow if the template database is large, so the old method is still available.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [CREATE DATABASE](https://www.postgresql.org/docs/15/sql-createdatabase.html \"CREATE DATABASE\") to set the database OID (Shruthi Gowda, Antonin Houska) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent [DROP DATABASE](https://www.postgresql.org/docs/15/sql-dropdatabase.html \"DROP DATABASE\"), [DROP TABLESPACE](https://www.postgresql.org/docs/15/sql-droptablespace.html \"DROP TABLESPACE\"), and [ALTER DATABASE SET TABLESPACE](https://www.postgresql.org/docs/15/sql-alterdatabase.html \"ALTER DATABASE\") from occasionally failing during concurrent use on Windows (Thomas Munro) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow foreign key [ON DELETE SET](https://www.postgresql.org/docs/15/ddl-constraints.html#DDL-CONSTRAINTS-FK \"5.4.5. Foreign Keys\") actions to affect only specified columns",
      "description": "Previously, all of the columns in the foreign key were always affected.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [ALTER TABLE](https://www.postgresql.org/docs/15/sql-altertable.html \"ALTER TABLE\") to modify a table's `ACCESS METHOD` (Justin Pryzby, Jeff Davis) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly call object access hooks when [ALTER TABLE](https://www.postgresql.org/docs/15/sql-altertable.html \"ALTER TABLE\") causes table rewrites (Michael Paquier) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow creation of unlogged [sequences](https://www.postgresql.org/docs/15/sql-createsequence.html \"CREATE SEQUENCE\") (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track dependencies on individual columns in the results of functions returning composite types",
      "description": "Previously, if a view or rule contained a reference to a specific column within the result of a composite-returning function, that was not noted as a dependency; the view or rule was only considered to depend on the composite type as a whole. This meant that dropping the individual column would be allowed, causing problems in later use of the view or rule. The column-level dependency is now also noted, so that dropping such a column will be rejected unless the view is changed or dropped.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the scale of a [numeric](https://www.postgresql.org/docs/15/datatype-numeric.html \"8.1. Numeric Types\") value to be negative, or greater than its precision",
      "description": "This allows rounding of values to the left of the decimal point, e.g., `'1234'::numeric(4, -2)` returns 1200.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change the I/O format of type `\"char\"` for non-ASCII characters (Tom Lane) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update the display width information of modern Unicode characters, like emojis",
      "description": "Also update from Unicode 5.0 to 14.0.0\\. There is now an automated way to keep Postgres updated with Unicode releases.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add multirange input to [range\\_agg()](https://www.postgresql.org/docs/15/functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE \"Table 9.58. General-Purpose Aggregate Functions\") (Paul Jungwirth) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [MIN()](https://www.postgresql.org/docs/15/tutorial-agg.html \"2.7. Aggregate Functions\") and `MAX()` aggregates for the [xid8](https://www.postgresql.org/docs/15/datatype-numeric.html#DATATYPE-INT \"8.1.1. Integer Types\") data type (Ken Kato) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the ability to compute the distance between [polygons](https://www.postgresql.org/docs/15/datatype-geometric.html#DATATYPE-POLYGON \"8.8.6. Polygons\") (Tom Lane) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [to\\_char()](https://www.postgresql.org/docs/15/functions-formatting.html#FUNCTIONS-FORMATTING-TABLE \"Table 9.26. Formatting Functions\") format codes `of`, `tzh`, and `tzm`",
      "description": "The upper-case equivalents of these were already supported.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When applying [AT TIME ZONE](https://www.postgresql.org/docs/15/functions-datetime.html#FUNCTIONS-DATETIME-ZONECONVERT \"9.9.4. AT TIME ZONE\") to a `time with time zone` value, use the transaction start time rather than wall clock time to determine whether DST applies",
      "description": "This allows the conversion to be considered stable rather than volatile, and it saves a kernel call per invocation.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore NULL array elements in [ts\\_delete()](https://www.postgresql.org/docs/15/functions-textsearch.html#TEXTSEARCH-FUNCTIONS-TABLE \"Table 9.43. Text Search Functions\") and `setweight()` functions with array arguments",
      "description": "These functions effectively ignore empty-string array elements (since those could never match a valid lexeme). It seems consistent to let them ignore NULL elements too, instead of failing.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for petabyte units to [pg\\_size\\_pretty()](https://www.postgresql.org/docs/15/functions-admin.html#FUNCTIONS-ADMIN-DBSIZE \"Table 9.94. Database Object Size Functions\") and `pg_size_bytes()` (David Christensen) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [pg\\_event\\_trigger\\_ddl\\_commands()](https://www.postgresql.org/docs/15/functions-event-triggers.html#PG-EVENT-TRIGGER-DDL-COMMAND-END-FUNCTIONS \"9.29.1. Capturing Changes at Command End\") to output references to other sessions' temporary schemas using the actual schema name",
      "description": "Previously this function reported all temporary schemas as `pg_temp`, but it's misleading to use that for any but the current session's temporary schema.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix enforcement of PL/pgSQL variable `CONSTANT` markings",
      "description": "Previously, a variable could be used as a [CALL](https://www.postgresql.org/docs/15/plpgsql-control-structures.html#PLPGSQL-STATEMENTS-CALLING-PROCEDURE \"43.6.3. Calling a Procedure\") output parameter or refcursor `OPEN` variable despite being marked `CONSTANT`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow IP address matching against a server certificate's Subject Alternative Name (Jacob Champion) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `PQsslAttribute()` to report the SSL library type without requiring a libpq connection (Jacob Champion) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change query cancellations sent by the client to use the same TCP settings as normal client connections",
      "description": "This allows configured TCP timeouts to apply to query cancel connections.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent libpq event callback failures from forcing an error result (Tom Lane) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pgbench](https://www.postgresql.org/docs/15/pgbench.html \"pgbench\") to retry after serialization and deadlock failures (Yugo Nagata, Marina Polyakova) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `\\dconfig` command to report server variables",
      "description": "This is similar to the server-side `SHOW` command, but it can process patterns to show multiple variables conveniently.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `\\getenv` command to assign the value of an environment variable to a psql variable (Tom Lane) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `+` option to the `\\lo_list` and `\\dl` commands to show large-object privileges (Pavel Luzanov) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add a pager option for the `\\watch` command",
      "description": "This is only supported on Unix and is controlled by the `PSQL_WATCH_PAGER` environment variable.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make psql include intra-query double-hyphen comments in queries sent to the server",
      "description": "Previously such comments were removed from the query before being sent. Double-hyphen comments that are before any query text are not sent, and are not recorded as separate psql history entries.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust psql so that Readline's meta-`#` command will insert a double-hyphen comment marker",
      "description": "Previously a pound marker was inserted, unless the user had taken the trouble to configure a non-default comment marker.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make psql output all results when multiple queries are passed to the server at once",
      "description": "Previously, only the last query result was displayed. The old behavior can be restored by setting the `SHOW_ALL_RESULTS` psql variable to `off`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "After an error is detected in `--single-transaction` mode, change the final `COMMIT` command to `ROLLBACK` only if `ON_ERROR_STOP` is set",
      "description": "Previously, detection of an error in a `-c` command or `-f` script file would lead to issuing `ROLLBACK` at the end, regardless of the value of `ON_ERROR_STOP`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Limit support of psql's backslash commands to servers running PostgreSQL 9.2 or later",
      "description": "Remove code that was only used when running with an older server. Commands that do not require any version-specific adjustments compared to 9.2 will still work.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_dump dump `public` schema ownership changes and security labels (Noah Misch) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add dump/restore option `--no-table-access-method` to force restore to only use the default table access method (Justin Pryzby) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Limit support of pg\\_dump and [pg\\_dumpall](https://www.postgresql.org/docs/15/app-pg-dumpall.html \"pg_dumpall\") to servers running PostgreSQL 9.2 or later (Tom Lane) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pg\\_basebackup to do server-side gzip, LZ4, and Zstandard compression and client-side LZ4 and Zstandard compression of base backup files",
      "description": "Client-side `gzip` compression was already supported.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pg\\_basebackup to compress on the server side and decompress on the client side before storage",
      "description": "This is accomplished by specifying compression on the server side and plain output format.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pg\\_basebackup's `--compress` option to control the compression location (server or client), compression method, and compression options (Michael Paquier, Robert Haas) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the LZ4 compression method to [pg\\_receivewal](https://www.postgresql.org/docs/15/app-pgreceivewal.html \"pg_receivewal\")",
      "description": "This is enabled via `--compress=lz4` and requires binaries to be built using `--with-lz4`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add additional capabilities to pg\\_receivewal's `--compress` option (Georgios Kokolatos) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_rewind](https://www.postgresql.org/docs/15/app-pgrewind.html \"pg_rewind\") option `--config-file` to simplify use when server configuration files are stored outside the data directory (Gunnar Bluth) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Store pg\\_upgrade's log and temporary files in a subdirectory of the new cluster called `pg_upgrade_output.d`",
      "description": "Previously such files were left in the current directory, requiring manual cleanup. Now they are automatically removed on successful completion of pg\\_upgrade.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable default status reporting during pg\\_upgrade operation if the output is not a terminal",
      "description": "The status reporting output can be enabled for non-tty usage by using `--verbose`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_upgrade report all databases with invalid connection settings",
      "description": "Previously only the first database with an invalid connection setting was reported.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_upgrade preserve tablespace and database OIDs, as well as relation relfilenode numbers (Shruthi Gowda, Antonin Houska) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add a `--no-sync` option to pg\\_upgrade",
      "description": "This is recommended only for testing.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Limit support of pg\\_upgrade to old servers running PostgreSQL 9.2 or later (Tom Lane) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pg\\_waldump output to be filtered by relation file node, block number, fork number, and full page images (David Christensen, Thomas Munro) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make pg\\_waldump report statistics before an interrupted exit",
      "description": "For example, issuing a control-C in a terminal running `pg_waldump --stats --follow` will report the current statistics before exiting. This does not work on Windows.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pg\\_waldump to dump information about multiple resource managers",
      "description": "This is enabled by specifying the `--rmgr` option multiple times.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add documentation for [pg\\_encoding\\_to\\_char()](https://www.postgresql.org/docs/15/functions-info.html#FUNCTIONS-INFO-CATALOG-TABLE \"Table 9.71. System Catalog Information Functions\") and `pg_char_to_encoding()` (Ian Lawrence Barwick) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Document the [^@](https://www.postgresql.org/docs/15/functions-string.html#FUNCTIONS-STRING-OTHER \"Table 9.10. Other String Functions and Operators\") starts-with operator (Tom Lane) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for continuous integration testing using cirrus-ci (Andres Freund, Thomas Munro, Melanie Plageman) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add configure option [\\--with-zstd](https://www.postgresql.org/docs/15/install-procedure.html#CONFIGURE-OPTIONS-FEATURES \"17.4.1.2. PostgreSQL Features\") to enable Zstandard builds (Jeevan Ladhe, Robert Haas, Michael Paquier) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add an ABI identifier field to the magic block in loadable libraries, allowing non-community PostgreSQL distributions to identify libraries that are not compatible with other builds",
      "description": "An ABI field mismatch will generate an error at load time.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Create a new [pg\\_type.typcategory](https://www.postgresql.org/docs/15/catalog-pg-type.html \"53.64. pg_type\") value for `\"char\"`",
      "description": "Some other internal-use-only types have also been assigned to this category.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove server support for old `BASE_BACKUP` command syntax and base backup protocol (Robert Haas) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for extensions to set custom backup targets (Robert Haas) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow extensions to define custom WAL resource managers (Jeff Davis) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [pg\\_settings\\_get\\_flags()](https://www.postgresql.org/docs/15/functions-info.html#FUNCTIONS-INFO-CATALOG-TABLE \"Table 9.71. System Catalog Information Functions\") to get the flags of server variables (Justin Pryzby) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, export all the server's global variables using `PGDLLIMPORT` markers",
      "description": "Previously, only specific variables were accessible to extensions on Windows.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require GNU make version 3.81 or later to build PostgreSQL (Tom Lane) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require OpenSSL to build the [pgcrypto](https://www.postgresql.org/docs/15/pgcrypto.html \"F.28. pgcrypto\") extension (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require Perl version 5.8.3 or later (Dagfinn Ilmari Mannsåker) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require Python version 3.2 or later (Andres Freund) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [amcheck](https://www.postgresql.org/docs/15/amcheck.html \"F.2. amcheck\") to check sequences (Mark Dilger) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [btree\\_gist](https://www.postgresql.org/docs/15/btree-gist.html \"F.9. btree_gist\") indexes on boolean columns",
      "description": "These can be used for exclusion constraints.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [pageinspect](https://www.postgresql.org/docs/15/pageinspect.html \"F.25. pageinspect\")'s `page_header()` to handle 32-kilobyte page sizes",
      "description": "Previously, improper negative values could be returned in certain cases.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add counters for temporary file block I/O to [pg\\_stat\\_statements](https://www.postgresql.org/docs/15/pgstatstatements.html \"F.32. pg_stat_statements\") (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add JIT counters to pg\\_stat\\_statements (Magnus Hagander) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Indicate the permissive/enforcing state in [sepgsql](https://www.postgresql.org/docs/15/sepgsql.html \"F.40. sepgsql\") log messages (Dave Page) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow postgres\\_fdw to push down `CASE` expressions (Alexander Pyhalov) ",
      "description": "",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable `postgres_fdw.application_name` to control the application name of postgres\\_fdw connections",
      "description": "Previously the remote session's [application\\_name](https://www.postgresql.org/docs/15/runtime-config-logging.html#GUC-APPLICATION-NAME) could only be set on the remote server or via a postgres\\_fdw connection specification. `postgres_fdw.application_name` supports some escape sequences for customization, making it easier to tell such connections apart on the remote server.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow parallel commit on postgres\\_fdw servers",
      "description": "This is enabled with the `CREATE SERVER` option `parallel_commit`.",
      "fixedIn": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to remove non-first segments of large tables",
      "description": "PostgreSQL splits large tables into multiple files (normally with 1GB per file). The logic for dropping a table was broken and would miss removing all but the first such file, in two cases: drops of temporary tables and WAL replay of drops of regular tables. Applications that routinely create multi-gigabyte temporary tables could suffer significant disk space leakage.\n\nOrphaned temporary-table files are removed during postmaster start, so the mere act of updating to 15.1 is sufficient to clear any leaked temporary-table storage. However, if you suffered any database crashes while using 15.0, and there might have been large tables dropped just before such crashes, it's advisable to check the database directories for files named according to the pattern `` _`NNNN`_._`NN`_ ``. If there is no matching file named just `` _`NNNN`_ `` (without the `` ._`NN`_ `` suffix), these files should be removed manually.",
      "fixedIn": "15.1",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` tokens that appear in a multi-row `VALUES` clause of an `INSERT` on an updatable view",
      "description": "This oversight could lead to “cache lookup failed for type” errors, or in older branches even to crashes.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow rules named `_RETURN` that are not `ON SELECT`",
      "description": "This avoids confusion between a view's `ON SELECT` rule and any other rules it may have.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure in `EXPLAIN VERBOSE` for a query using `SEARCH BREADTH FIRST` with constant initial values (Tom Lane) ",
      "description": "",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent use of `MERGE` on a partitioned table with foreign-table partitions",
      "description": "The case isn't supported, and previously threw an incomprehensible error.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix construction of per-partition foreign key constraints while doing `ALTER TABLE ATTACH PARTITION`",
      "description": "Previously, incorrect or duplicate constraints could be constructed for the newly-added partition.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner failure with extended statistics on partitioned or inherited tables",
      "description": "Some cases failed with “cache lookup failed for statistics object”.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-ordering of WAL operations in fast insert path for GIN indexes",
      "description": "This mistake is not known to have any negative consequences within core PostgreSQL, but it did cause issues for some extensions.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in logical decoding when replay starts from a point between the beginning of a transaction and the beginning of its subtransaction",
      "description": "These errors could lead to assertion failures in debug builds, and otherwise to memory leaks.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Accept interrupts in more places during logical decoding",
      "description": "This ameliorates problems with slow shutdown of replication workers.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent attempts to replicate into a foreign-table partition in replication workers",
      "description": "Although partitioned tables can have foreign tables as partitions, replicating into such a partition isn't currently supported. The logical replication worker process would crash if it was attempted. Now, an error is thrown.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash after function syntax error in replication workers",
      "description": "If a syntax error occurred in a SQL-language or PL/pgSQL-language `CREATE FUNCTION` or `DO` command executed in a logical replication worker, the worker process would crash with a null pointer dereference or assertion failure.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid double call of the shutdown callback of an archiver module (Nathan Bossart, Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add plan-time check for attempted access to a table that has no table access method",
      "description": "This prevents a crash in some catalog-corruption scenarios, for example use of a view whose `ON SELECT` rule is missing.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent postmaster crash when shared-memory state is corrupted",
      "description": "The postmaster process is supposed to survive and initiate a database restart if shared memory becomes corrupted, but one bit of code was being insufficiently cautious about that.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In libpq, handle single-row mode correctly when pipelining",
      "description": "The single-row flag was not reset at the correct time if pipeline mode was also active.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql's exit status when a command-line query is canceled",
      "description": "`` psql -c _`query`_ `` would exit successfully if the query was canceled. Fix it to exit with nonzero status, as in other error cases.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cross-platform tablespace relocation in pg\\_basebackup",
      "description": "Allow the remote path in `--tablespace-mapping` to be either a Unix-style or Windows-style absolute path, since the source server could be on a different OS than the local system.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's failure to dump comments attached to some `CHECK` constraints (Tom Lane) ",
      "description": "",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `CREATE DATABASE` to allow its `oid` parameter to exceed 231",
      "description": "This oversight prevented pg\\_upgrade from succeeding when the source installation contained databases with OIDs larger than that.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_stat\\_statements, fix access to already-freed memory",
      "description": "This occurred if pg\\_stat\\_statements tracked a `ROLLBACK` command issued via extended query protocol. In debug builds it consistently led to an assertion failure. In production builds there would often be no visible ill effect; but if the freed memory had already been reused, the likely result would be to store garbage for the query string.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibilities with LLVM 15 (Thomas Munro, Andres Freund) ",
      "description": "",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow use of `__sync_lock_test_and_set()` for spinlocks on any machine",
      "description": "This eases porting to new machine architectures, at least if you're using a compiler that supports this GCC builtin function.",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename symbol `REF` to `REF_P` to avoid compile failure on recent macOS (Tom Lane) ",
      "description": "",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using `sprintf`, to avoid compile-time deprecation warnings (Tom Lane) ",
      "description": "",
      "fixedIn": "15.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022f for DST law changes in Chile, Fiji, Iran, Jordan, Mexico, Palestine, and Syria, plus historical corrections for Chile, Crimea, Iran, and Mexico.",
      "description": "Also, the Europe/Kiev zone has been renamed to Europe/Kyiv. Also, the following zones have been merged into nearby, more-populous zones whose clocks have agreed with them since 1970: Antarctica/Vostok, Asia/Brunei, Asia/Kuala\\_Lumpur, Atlantic/Reykjavik, Europe/Amsterdam, Europe/Copenhagen, Europe/Luxembourg, Europe/Monaco, Europe/Oslo, Europe/Stockholm, Indian/Christmas, Indian/Cocos, Indian/Kerguelen, Indian/Mahe, Indian/Reunion, Pacific/Chuuk, Pacific/Funafuti, Pacific/Majuro, Pacific/Pohnpei, Pacific/Wake and Pacific/Wallis. (This indirectly affects zones that were already links to one of these: Arctic/Longyearbyen, Atlantic/Jan\\_Mayen, Iceland, Pacific/Ponape, Pacific/Truk, and Pacific/Yap.) America/Nipigon, America/Rainy\\_River, America/Thunder\\_Bay, Europe/Uzhgorod, and Europe/Zaporozhye were also merged into nearby zones after discovering that their claimed post-1970 differences from those zones seem to have been errors. In all these cases, the previous zone name remains as an alias; but the actual data is that of the zone that was merged into.\n\nThese zone mergers result in loss of pre-1970 timezone history for the merged zones, which may be troublesome for applications expecting consistency of `timestamptz` display. As an example, the stored value `1944-06-01 12:00 UTC` would previously display as `1944-06-01 13:00:00+01` if the Europe/Stockholm zone is selected, but now it will read out as `1944-06-01 14:00:00+02`.\n\nIt is possible to build the time zone data files with options that will restore the older zone data, but that choice also inserts a lot of other old (and typically poorly-attested) zone data, resulting in more total changes from the previous release than accepting these upstream changes does. PostgreSQL has chosen to ship the tzdb data as-recommended, and so far as we are aware most major operating system distributions are doing likewise. However, if these changes cause significant problems for your application, a possible solution is to install a local build of the time zone data files using tzdb's backwards-compatibility options (see their `PACKRATDATA` and `PACKRATLIST` options).",
      "fixedIn": "15.1",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Repair ABI break for extensions that work with struct `ResultRelInfo`",
      "description": "Last week's minor releases unintentionally broke binary compatibility with timescaledb and several other extensions. Restore the affected structure to its previous size, so that such extensions need not be rebuilt.",
      "fixedIn": "15.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix cases where a logical replication slot's `restart_lsn` could go backwards",
      "description": "Previously, restarting logical replication could sometimes cause the slot's restart point to be recomputed as an older value than had previously been advertised in `pg_replication_slots`. This is bad, since for example WAL files might have been removed on the basis of the later `restart_lsn` value, in which case replication would fail to restart.",
      "fixedIn": "15.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deleting still-needed WAL files during pg\\_rewind",
      "description": "Previously, in unlucky cases, it was possible for pg\\_rewind to remove important WAL files from the rewound demoted primary. In particular this happens if those files have been marked for archival (i.e., their `.ready` files were created) but not yet archived. Then the newly promoted node no longer has such files because of them having been recycled, but likely they are needed for recovery in the demoted node. If pg\\_rewind removes them, recovery is not possible anymore.",
      "fixedIn": "15.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race conditions associated with dropping shared statistics entries",
      "description": "These bugs could lead to loss of statistics data, assertion failures, or “can only drop stats once” errors.",
      "fixedIn": "15.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Count index scans in `contrib/bloom` indexes in the statistics views, such as the `pg_stat_user_indexes`.`idx_scan` counter (Masahiro Ikeda) ",
      "description": "",
      "fixedIn": "15.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when checking to see if an index's opclass options have changed",
      "description": "Some forms of `ALTER TABLE` would fail if the table has an index with non-default operator class options.",
      "fixedIn": "15.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure caused by disconnected NFA sub-graphs in regular expression parsing",
      "description": "This bug does not appear to have any visible consequences in non-assert builds.",
      "fixedIn": "15.10",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix calculation of which `GENERATED` columns need to be updated in child tables during an `UPDATE` on a partitioned table or inheritance tree",
      "description": "This fixes failure to update `GENERATED` columns that do not exist in the parent table, or that have different dependencies than are in the parent column's generation expression.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure of `MERGE` to compute `GENERATED` columns",
      "description": "When the first row-level action of the `MERGE` was an `UPDATE`, any subsequent `INSERT` actions would fail to compute `GENERATED` columns that were deemed unnecessary to compute for the `UPDATE` action (due to not depending on any of the `UPDATE` target columns).",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `MERGE`'s check for unreachable `WHEN` clauses",
      "description": "A `WHEN` clause following an unconditional `WHEN` clause should be rejected as unreachable, but this case was not always detected.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `MERGE`'s rule-detection test",
      "description": "`MERGE` is not supported on tables with rules; but it also failed on tables that once had rules but no longer do.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `MERGE`, don't count a `DO NOTHING` action as a processed tuple",
      "description": "This makes the code's behavior match the documentation.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow a `WITH RECURSIVE ... CYCLE` CTE to access its output column",
      "description": "A reference to the `SET` column from within the CTE would fail with “cache lookup failed for type 0”.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of pending inserts when doing a bulk insertion to a foreign table",
      "description": "In some cases pending insertions were not flushed to the FDW soon enough, leading to logical inconsistencies, for example `BEFORE ROW` triggers not seeing rows they should be able to see.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `REPLICA IDENTITY` to be set on an index that's not (yet) valid",
      "description": "When pg\\_dump dumps a partitioned index that's marked `REPLICA IDENTITY`, it generates a command sequence that applies `REPLICA IDENTITY` before the partitioned index has been marked valid, causing restore to fail. There seems no very good reason to prohibit doing it in that order, so allow it. The marking will have no effect anyway until the index becomes valid.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` markers in rules that perform an `INSERT` from a multi-row `VALUES` list",
      "description": "In some cases a `DEFAULT` marker would not get replaced with the proper default-value expression, leading to an “unrecognized node type” error.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject uses of undefined variables in `jsonpath` existence checks",
      "description": "While `jsonpath` match operators threw an error for an undefined variable in the path pattern, the existence operators silently treated it as a match.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `jsonb` subscripting to cope with toasted subscript values",
      "description": "Using a text value fetched directly from a table as a `jsonb` subscript was likely to fail. Fetches would usually not find any matching element. Assignments could store the value with a garbage key, although keys long enough to cause that problem are probably rare in the field.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case data corruption in parallel hash joins",
      "description": "If the final chunk of a large tuple being written out to a temporary file was exactly 32760 bytes, it would be corrupted due to a fencepost bug. The query would typically fail later with corrupted-data symptoms.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Honor non-default settings of `checkpoint_completion_target`",
      "description": "Internal state was not updated after a change in `checkpoint_completion_target`, possibly resulting in performing checkpoint I/O faster or slower than desired, especially if that setting was changed on-the-fly.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Log the correct ending timestamp in `recovery_target_xid` mode",
      "description": "When ending recovery based on the `recovery_target_xid` setting with `recovery_target_inclusive` \\= `off`, we printed an incorrect timestamp (always 2000-01-01) in the “recovery stopping before ... transaction” log message.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve error reporting for some buffered file read failures",
      "description": "Correctly report a short read, giving the numbers of bytes desired and actually read, instead of reporting an irrelevant error code. Most places got this right already, but some recently-written replication logic did not.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove arbitrary limit on number of elements in `int2vector` and `oidvector`",
      "description": "The input functions for these types previously rejected more than 100 elements. With the introduction of the logical replication column list feature, it's necessary to accept `int2vector`s having up to 1600 columns, otherwise long column lists cause logical-replication failures.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In extended query protocol, avoid an immediate commit after `ANALYZE` if we're running a pipeline",
      "description": "If there's not been an explicit `BEGIN TRANSACTION`, `ANALYZE` would take it on itself to commit, which should not happen within a pipelined series of commands.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reject cancel request packets having the wrong length",
      "description": "The server would process a cancel request even if its length word was too small. This led to reading beyond the end of the allocated buffer. In theory that could cause a segfault, but it seems quite unlikely to happen in practice, since the buffer would have to be very close to the end of memory. The more likely outcome was a bogus log message about wrong backend PID or cancel code. Complain about the wrong length, instead.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner preprocessing oversights for window function run-condition expressions",
      "description": "This could lead to planner errors such as “WindowFunc not found in subplan target lists”.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible dangling-pointer access during execution of window function run-condition expressions",
      "description": "In practice, because the run-condition optimization is only applied to certain window functions that happen to all return `int8`, this only manifested as a problem on 32-bit builds.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add recursion and looping defenses in subquery pullup",
      "description": "A contrived query can result in deep recursion and unreasonable amounts of time spent trying to flatten subqueries. A proper fix for that seems unduly invasive for a back-patch, but we can at least add stack depth checks and an interrupt check to allow the query to be cancelled.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix planner issues when combining Memoize nodes with partitionwise joins or parameterized nestloops",
      "description": "These errors could lead to not using Memoize in contexts where it would be useful, or possibly to wrong query plans.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partitionwise-join code to tolerate failure to produce a plan for each partition",
      "description": "This could result in “could not devise a query plan for the given query” errors.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Limit the amount of cleanup work done by `get_actual_variable_range`",
      "description": "Planner runs occurring just after deletion of a large number of tuples appearing at the end of an index could expend significant amounts of work setting the “killed” bits for those index entries. Limit the amount of work done in any one query by giving up on this process after examining 100 heap pages. All the cleanup will still happen eventually, but without so large a performance hiccup.",
      "fixedIn": "15.2",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Prevent the statistics machinery from getting confused when a relation's relkind changes",
      "description": "Converting a table to a view could lead to crashes or assertion failures.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix under-parenthesized display of `AT TIME ZONE` constructs",
      "description": "This could result in dump/restore failures for rules or views in which an argument of `AT TIME ZONE` is itself an expression.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent clobbering of cached parsetrees for utility statements in SQL functions",
      "description": "If a SQL-language function executes the same utility command more than once within a single calling query, it could crash or report strange errors such as “unrecognized node type”.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that execution of full-text-search queries can be cancelled while they are performing phrase matches (Tom Lane) ",
      "description": "",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in hashing strings with nondeterministic collations (Jeff Davis) ",
      "description": "",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix deadlock between `DROP DATABASE` and logical replication worker process",
      "description": "This was caused by an ill-advised choice to block interrupts while creating a logical replication slot in the worker. In version 15 that could lead to an undetected deadlock. In version 14, no deadlock has been observed, but it's still a bad idea to block interrupts while waiting for network I/O.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Clean up the libpq connection object after a failed replication connection attempt",
      "description": "The previous coding leaked the connection object. In background code paths that's pretty harmless because the calling process will give up and exit. But in commands such as `CREATE SUBSCRIPTION`, such a failure resulted in a small session-lifespan memory leak.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In hot-standby servers, reduce processing effort for tracking XIDs known to be active on the primary",
      "description": "Insufficiently-aggressive cleanup of the KnownAssignedXids array could lead to poor performance, particularly when `max_connections` is set to a large value on the standby.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore invalidated logical-replication slots while determining oldest catalog xmin",
      "description": "A replication slot could prevent cleanup of dead tuples in the system catalogs even after it becomes invalidated due to exceeding `max_slot_wal_keep_size`. Thus, failure of a replication consumer could lead to indefinitely-large catalog bloat.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In logical decoding, notify the remote node when a transaction is detected to have crashed",
      "description": "After a server restart, we'll re-stream the changes for transactions occurring shortly before the restart. Some of these transactions probably never completed; when we realize that one didn't we throw away the relevant decoding state locally, but we neglected to tell the subscriber about it. That led to the subscriber keeping useless streaming files until it's next restarted.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix uninitialized-memory usage in logical decoding",
      "description": "In certain cases, resumption of logical decoding could try to re-use XID data that had already been freed, leading to unpredictable behavior.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Acquire spinlock while updating shared state during logical decoding context creation",
      "description": "We neglected to acquire the appropriate lock while updating data about two-phase transactions, potentially allowing other processes to see inconsistent data.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pgoutput replication plug-in to not send columns not listed in a table's replication column list",
      "description": "`UPDATE` and `DELETE` events did not pay attention to the configured column list, thus sending more data than expected. This did not cause a problem when the receiver is our built-in logical replication code, but it might confuse other receivers, and in any case it wasted network bandwidth.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid rare “failed to acquire cleanup lock” panic during WAL replay of hash-index page split operations (Robert Haas) ",
      "description": "",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Advance a heap page's LSN when setting its all-visible bit during WAL replay",
      "description": "Failure to do this left the page possibly different on standby servers than the primary, and violated some other expectations about when the LSN changes. This seems only a theoretical hazard so far as PostgreSQL itself is concerned, but it could upset third-party tools.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `int64_div_fast_to_numeric()` to work for a wider range of inputs",
      "description": "This function misbehaved with some values of its second argument. No such usages exist in core PostgreSQL, but it's clearly a hazard for external modules, so repair.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix latent buffer-overrun problem in `WaitEventSet` logic",
      "description": "The `epoll`\\-based and `kqueue`\\-based implementations could ask the kernel for too many events if the size of their internal buffer was different from the size of the caller's output buffer. That case is not known to occur in released PostgreSQL versions, but this error is a hazard for external modules and future bug fixes.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid nominally-undefined behavior when accessing shared memory in 32-bit builds",
      "description": "clang's undefined-behavior sanitizer complained about use of a pointer that was less aligned than it should be. It's very unlikely that this would cause a problem in non-debug builds, but it's worth fixing for testing purposes.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure in BRIN minmax-multi opclasses",
      "description": "The assertion was overly strict, so this mistake was harmless in non-assert builds.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove faulty assertion in useless-RESULT-RTE optimization logic (Tom Lane) ",
      "description": "",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix copy-and-paste errors in cache-lookup-failure messages for ACL checks",
      "description": "In principle these errors should never be reached. But if they are, some of them reported the wrong type of object.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible corruption of very large tablespace map files in pg\\_basebackup (Antonin Houska) ",
      "description": "",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid harmless warning from pg\\_dump in `--if-exists` mode",
      "description": "If the `public` schema has a non-default owner then use of pg\\_dump's `--if-exists` option resulted in a warning message “warning: could not find where to insert IF EXISTS in statement \"-- \\*not\\* dropping schema, since initdb creates it\"”. The dump output was okay, though.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql's `\\sf` and `\\ef` commands to handle SQL-language functions that have SQL\\-standard function bodies",
      "description": "These commands misidentified the start of the function body when it used new-style syntax.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix tab completion of `ALTER FUNCTION/PROCEDURE/ROUTINE` ... `SET SCHEMA` (Dean Rasheed) ",
      "description": "",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update `contrib/pageinspect` to mark its disk-accessing functions as `PARALLEL RESTRICTED`",
      "description": "This avoids possible failure if one of these functions is used to examine a temporary table, since a session's temporary tables are not accessible from parallel workers.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/seg` to not crash or print garbage if an input number has more than 127 digits (Tom Lane) ",
      "description": "",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix build on Microsoft Visual Studio 2013",
      "description": "A previous patch supposed that all platforms of interest have `snprintf()`, but MSVC 2013 isn't quite there yet. Revert to using `sprintf()` on that platform.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compile failure in building PL/Perl with MSVC when using Strawberry Perl (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mismatch of PL/Perl built with MSVC versus a Perl library built with gcc",
      "description": "Such combinations could previously fail with “loadable library and perl binaries are mismatched” errors.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress compiler warnings from Perl's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Perl's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_waldump to build on compilers that don't discard unused static-inline functions (Tom Lane) ",
      "description": "",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2022g for DST law changes in Greenland and Mexico, plus historical corrections for northern Canada, Colombia, and Singapore.",
      "description": "Notably, a new timezone America/Ciudad\\_Juarez has been split off from America/Ojinaga.",
      "fixedIn": "15.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix potential corruption of the template (source) database after `CREATE DATABASE` with the `STRATEGY WAL_LOG` option",
      "description": "Improper buffer handling created a risk that any later modification of the template's `pg_class` catalog would be lost.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leakage and unnecessary disk reads during `CREATE DATABASE` with the `STRATEGY WAL_LOG` option (Andres Freund) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash when the new schema name is omitted in `CREATE SCHEMA`",
      "description": "The SQL standard allows writing `` CREATE SCHEMA AUTHORIZATION _`ownername`_ ``, with the schema name defaulting to _`ownername`_. However some code paths expected the schema name to be present and would fail.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix various planner failures with `MERGE` commands",
      "description": "Planning could fail with errors like “variable not found in subplan target list” or “PlaceHolderVar found where not expected”.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix the row count reported by `MERGE` for some corner cases",
      "description": "The row count reported in the command tag counted rows that actually hadn't been modified due to a `BEFORE ROW` trigger returning NULL. This is inconsistent with what happens in plain `UPDATE` or `DELETE`, so change it to not count such rows. Also, avoid counting a row twice when `MERGE` moves it into a different partition of a partitioned table.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `MERGE` problems with concurrent updates",
      "description": "Some cases misbehaved if a row to be updated or deleted by `MERGE` had just been updated by a concurrent transaction. This could lead to a crash, or the wrong merge action being executed, or no action at all.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for decompiling `MERGE` commands",
      "description": "This was overlooked when `MERGE` was added, but it's essential support for `MERGE` in new-style SQL functions.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix enabling/disabling of foreign-key triggers in partitioned tables",
      "description": "`ALTER TABLE ... ENABLE/DISABLE TRIGGER` failed if applied to a partitioned table's foreign-key enforcement triggers, because it tried to locate the clone triggers for the partitions by name, and they do not have the same name. Locate them by parent-trigger OID instead.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow altering composite types that are stored in indexes",
      "description": "`ALTER TYPE` disallows non-binary-compatible modifications of composite types if they are stored in any table columns. (Perhaps that will be allowed someday, but it hasn't happened yet; the locking implications of rewriting many tables are daunting.) We overlooked the possibility that an index might contain a composite type that doesn't also appear in its table.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow system columns as elements of foreign keys",
      "description": "Since the removal of OID as a system column, there is no plausible use-case for this, and various bits of code no longer support it. Disallow it rather than trying to fix all the cases.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `COPY TO` from an RLS-enabled parent table does not copy any rows from child tables",
      "description": "The documentation is quite clear that `COPY TO` copies rows from only the named table, not any inheritance children it may have. However, if row-level security was enabled on the table then this stopped being true.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible crash when `array_position()` or `array_positions()` is passed an empty array (Tom Lane) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible out-of-bounds fetch in `to_char()`",
      "description": "With bad luck this could have resulted in a server crash.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid buffer overread in `translate()` function",
      "description": "When using the deletion feature, the function might fetch the byte just after the input string, creating a small risk of crash.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust text-search-related character classification logic to correctly detect whether the prevailing locale is `C`",
      "description": "This code got confused if the database's default collation uses ICU.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible crash on empty input for type `interval` (Tom Lane) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-allow exponential notation in ISO-8601 interval fields",
      "description": "Interval input like `P0.1e10D` isn't officially sanctioned by ISO-8601, but we accepted it for a long time before version 15, so re-allow it.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error cursor setting for parse errors in JSON string literals",
      "description": "Most cases in which a syntax error is detected in a string literal within a JSON value failed to set the error cursor appropriately. This led at least to an unhelpful error message (pointing to the token before the string, rather than the actual trouble spot), and could even result in a crash in v14 and later.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data corruption due to `vacuum_defer_cleanup_age` being larger than the current 64-bit xid",
      "description": "In v14 and later with non-default settings of `vacuum_defer_cleanup_age`, it was possible to compute a very large vacuum cleanup horizon xid, leading to vacuum removing rows that are still live. v12 and v13 have a lesser form of the same problem affecting only GiST indexes, which could lead to index pages getting recycled too early.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parser's failure to detect some cases of improperly-nested aggregates",
      "description": "This oversight could lead to executor failures for queries that should have been rejected as invalid.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix data structure corruption during parsing of serial `SEQUENCE NAME` options",
      "description": "This can lead to trouble if an event trigger captures the corrupted parse tree.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update plan nodes' parallel-safety markings when moving initplans from one node to another",
      "description": "This planner oversight could lead to “subplan was not initialized” errors at runtime.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure with PlaceHolderVars in extended-statistics code",
      "description": "Use of dependency-type extended statistics could fail with “PlaceHolderVar found where not expected”.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect tests for whether a qual clause applied to a subquery can be transformed into a window aggregate “run condition” within the subquery",
      "description": "A SubPlan within such a clause would cause assertion failures or incorrect answers, as would some other unusual cases.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable the inverse-transition optimization for window aggregates when the call contains sub-SELECTs",
      "description": "This optimization requires that the aggregate's argument expressions have repeatable results, which might not hold for a sub-SELECT.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix oversights in execution of nested `ARRAY[]` constructs",
      "description": "Correctly detect overflow of the total space needed for the result array, avoiding a possible crash due to undersized output allocation. Also ensure that any trailing padding space in the result array is zeroed; while leaving garbage there is harmless for most purposes, it can result in odd behavior later.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent crash when updating a field within an array-of-domain-over-composite-type column (Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition pruning logic for partitioning on boolean columns",
      "description": "Pruning with a condition like `boolcol IS NOT TRUE` was done incorrectly, leading to possibly not returning rows in which `boolcol` is NULL. Also, the rather unlikely case of partitioning on `NOT boolcol` was handled incorrectly.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in per-batch cleanup during parallel hash join",
      "description": "A crash was possible given unlucky timing and `parallel_leader_participation` \\= `off` (which is not the default).",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate `GENERATED` columns after an EvalPlanQual check",
      "description": "In `READ COMMITTED` isolation mode, the effects of a row update might need to get reapplied to a newer version of the row than the query found originally. If so, we need to recompute any `GENERATED` columns, in case they depend on columns that were changed by the concurrent update.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in Memoize plan execution (David Rowley) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix buffer refcount leak when using batched inserts for a foreign table included in a partitioned tree (Alexander Pyhalov) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Restore support for sub-millisecond `vacuum_cost_delay` settings (Thomas Munro) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't balance vacuum cost delay when a table has a per-relation `vacuum_cost_delay` setting of zero",
      "description": "Delay balancing is supposed to be disabled whenever autovacuum is processing a table with a per-relation `vacuum_cost_delay` setting, but this was done only for positive settings, not zero.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corner-case crashes when columns have been added to the end of a view (Tom Lane) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair rare failure of MULTIEXPR\\_SUBLINK subplans in partitioned updates",
      "description": "Use of the syntax `INSERT ... ON CONFLICT DO UPDATE SET (c1, ...) = (SELECT ...)` with a partitioned target table could result in failure if any child table is dissimilar from the parent (for example, different physical column order). This typically manifested as failure of consistency checks in the executor; but a crash or incorrect data updates are also possible.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of `DEFAULT` markers within a multi-row `INSERT ... VALUES` query on a view that has a `DO ALSO INSERT ... SELECT` rule",
      "description": "Such cases typically failed with “unrecognized node type” errors or assertion failures.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support references to `OLD` and `NEW` within subqueries in rule actions",
      "description": "Such references are really lateral references, but the server could crash if the subquery wasn't explicitly marked with `LATERAL`. Arrange to do that implicitly when necessary.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When decompiling a rule or SQL function body containing `INSERT`/`UPDATE`/`DELETE` within `WITH`, take care to print the correct alias for the target table (Tom Lane) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix glitches in `SERIALIZABLE READ ONLY` optimization",
      "description": "Transactions already marked as “doomed” confused the safe-snapshot optimization for `SERIALIZABLE READ ONLY` transactions. The optimization was unnecessarily skipped in some cases. In other cases an assertion failure occurred (but there was no problem in non-assert builds).",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaking cache callback slots in the `pgoutput` logical decoding plugin",
      "description": "Multiple cycles of starting up and shutting down the plugin within a single session would eventually lead to an “out of relcache\\_callback\\_list slots” error.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary calls to custom validators for index operator class options",
      "description": "This change fixes some cases where an unexpected error was thrown.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid useless work while scanning a multi-column BRIN index with multiple scan keys",
      "description": "The existing code effectively considered only the last scan key while deciding whether a range matched, thus usually scanning more of the index than it needed to.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix netmask handling in BRIN inet\\_minmax\\_multi\\_ops opclass",
      "description": "This error triggered an assertion failure in assert-enabled builds, but is mostly harmless in production builds.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix dereference of dangling pointer during buffering build of a GiST index",
      "description": "This error seems to usually be harmless in production builds, as the fetched value is noncritical; but in principle it could cause a server crash.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore dropped columns and generated columns during logical replication of an update or delete action",
      "description": "Replication with the `REPLICA IDENTITY FULL` option failed if the table contained such columns.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correct the name of the wait event for SLRU buffer I/O for commit timestamps",
      "description": "This wait event is named `CommitTsBuffer` according to the documentation, but the code had it as `CommitTSBuffer`. Change the code to match the documentation, as that way is more consistent with the naming of related wait events.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-activate reporting of wait event `SLRUFlushSync`",
      "description": "Reporting of this type of wait was accidentally removed in code refactoring.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible underflow when calculating how many WAL segments to keep",
      "description": "This could result in not honoring `wal_keep_size` accurately.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable startup progress reporting overhead in standby mode",
      "description": "In standby mode, we don't actually report progress of recovery, but we were doing work to track it anyway.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support RSA-PSS certificates with SCRAM-SHA-256 channel binding",
      "description": "This feature requires building with OpenSSL 1.1.1 or newer. Both the server and libpq are affected.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition with process ID tracking on Windows",
      "description": "The operating system could recycle a PID before the postmaster observed that that child process was gone. This could lead to tracking more than one child with the same PID, resulting in confusion.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `list_copy_head()` to work correctly on an empty List",
      "description": "This case is not known to be reached by any core PostgreSQL code, but extensions might rely on it working.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add missing cases to `SPI_result_code_string()` (Dean Rasheed) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix erroneous Valgrind markings in `AllocSetRealloc()`",
      "description": "In the unusual case where the size of a large (>8kB) palloc chunk is decreased, a Valgrind-aware build would mismark the defined-ness state of the memory released from the chunk, possibly causing incorrect results during Valgrind testing.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure for `MERGE` into a partitioned table with row-level security enabled (Dean Rasheed) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when decoding a transactional logical replication message (Tomas Vondra) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid locale sensitivity when processing regular expression escapes",
      "description": "A backslash followed by a non-ASCII character could sometimes cause an assertion failure, depending on the prevailing locale.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to write an empty WAL record in `log_newpage_range()` when the last few pages in the specified range are empty",
      "description": "It is not entirely clear whether this case is reachable in released branches, but if it is then an assertion failure could occur.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix session-lifespan memory leakage in plpgsql `DO` blocks that use cast expressions (Ajit Awekar, Tom Lane) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten array dimensionality checks when converting Perl list structures to multi-dimensional SQL arrays",
      "description": "plperl could misbehave when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. Such cases now produce errors, but previously they could result in a crash or garbage output.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten array dimensionality checks when converting Python list structures to multi-dimensional SQL arrays",
      "description": "plpython could misbehave when dealing with empty sub-lists, or when the nesting of sub-lists is inconsistent so that the data does not represent a rectangular array of values. The former should result in an empty output array, and the latter in an error. But some cases resulted in a crash, and others in unexpected output.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unwinding of exception stack in plpython",
      "description": "Some rare failure cases could return without cleaning up the PG\\_TRY exception stack, risking a crash if another error was raised before the next stack level was unwound.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inconsistent GSS-encryption error handling in libpq's `PQconnectPoll()`",
      "description": "With `gssencmode` set to `require`, the connection was not marked dead after a GSS initialization failure. Make it fail immediately, as the equivalent case for TLS encryption has long done.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible data corruption in ecpg programs built with the `-C ORACLE` option",
      "description": "When `ecpg_get_data()` is called with `varcharsize` set to zero, it could write a terminating zero character into the last byte of the preceding field, truncating the data in that field.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump so that partitioned tables that are hash-partitioned on an enum-type column can be restored successfully",
      "description": "Since the hash codes for enum values depend on the OIDs assigned to the enum, they are typically different after a dump and restore, meaning that rows often need to go into a different partition than they were in originally. Users can work around that by specifying the `--load-via-partition-root` option; but since there is very little chance of success without that, teach pg\\_dump to apply it automatically to such tables.\n\nAlso, fix pg\\_restore to not try to `TRUNCATE` target tables before restoring into them when `--load-via-partition-root` mode is used. This avoids a hazard of deadlocks and lost data.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly detect non-seekable files on Windows",
      "description": "This bug led to misbehavior when pg\\_dump writes to a pipe or pg\\_restore reads from one.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pgbench's “prepared” mode, prepare all the commands in a pipeline before starting the pipeline",
      "description": "This avoids a failure when a pgbench script tries to start a serializable transaction inside a pipeline.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`'s heap checking code, deal correctly with tuples having zero xmin or xmax (Robert Haas) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, deal sanely with xids that appear to be before epoch zero",
      "description": "In cases of corruption we might see a wrapped-around 32-bit xid that appears to be before the first xid epoch. Promoting such a value to 64-bit form produced a value far in the future, resulting in wrong reports. Return FirstNormalFullTransactionId in such cases so that things work reasonably sanely.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/basebackup_to_shell`, properly detect failure to open a pipe (Robert Haas) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/hstore_plpython`, avoid crashing if the Python value to be transformed isn't a mapping",
      "description": "This should give an error, but Python 3 changed some APIs in a way that caused the check to misbehave, allowing a crash to ensue.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require the `siglen` option of a GiST index on an `ltree` column, if specified, to be a multiple of 4",
      "description": "Other values result in misaligned accesses to index content, which is harmless on Intel-compatible hardware but can cause a crash on some other architectures.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pageinspect`, add defenses against incorrect input for the `gist_page_items()` function (Dmitry Koval) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior in `contrib/pg_trgm` with an unsatisfiable regular expression",
      "description": "A regex such as `$foo` is legal but unsatisfiable; the regex compiler recognizes that and produces an empty NFA graph. Attempting to optimize such a graph into a pg\\_trgm GIN or GiST index qualification resulted in accessing off the end of a work array, possibly leading to crashes.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of escape sequences in `contrib/postgres_fdw`'s `application_name` parameter",
      "description": "The code to expand these could fail if executed in a background process, as for example during auto-analyze of a foreign table.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/pg_walinspect`, limit memory usage of `pg_get_wal_records_info()` (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use the `--strip-unneeded` option when stripping static libraries with GNU-compatible strip",
      "description": "Previously, `make install-strip` used the `-x` option in this case. This change avoids misbehavior of llvm-strip, and gives slightly smaller output as well.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Stop recommending auto-download of DTD files for building the documentation, and indeed disable it",
      "description": "It appears no longer possible to build the SGML documentation without a local installation of the DocBook DTD files. Formerly xsltproc could download those files on-the-fly from sourceforge.net; but sourceforge.net now permits only HTTPS access, and no common version of xsltproc supports that. Hence, remove the bits of our documentation suggesting that that's possible or useful, and instead add xsltproc's `--nonet` option to the build recipes.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When running TAP tests in PGXS builds, use a saner location for the temporary `portlock` directory",
      "description": "Place it under `tmp_check` in the build directory. With the previous coding, a PGXS build would try to place it in the installation directory, which is not necessarily writable.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2023c for DST law changes in Egypt, Greenland, Morocco, and Palestine.",
      "description": "When observing Moscow time, Europe/Kirov and Europe/Volgograd now use the abbreviations MSK/MSD instead of numeric abbreviations, for consistency with other timezones observing Moscow time. Also, America/Yellowknife is no longer distinct from America/Edmonton; this affects some pre-1948 timestamps in that area.",
      "fixedIn": "15.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion between empty (no rows) ranges and all-NULL ranges in BRIN indexes, as well as incorrect merging of all-NULL summaries",
      "description": "Each of these oversights could result in forgetting that a BRIN index range contains any NULL values, potentially allowing subsequent queries that should return NULL values to miss doing so.\n\nThis fix will not in itself correct faulty BRIN entries. It's recommended to `REINDEX` any BRIN indexes that may be used to search for nulls.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaving a corrupted database behind when `DROP DATABASE` is interrupted",
      "description": "If `DROP DATABASE` was interrupted after it had already begun taking irreversible steps, the target database remained accessible (because the removal of its `pg_database` row would roll back), but it would have corrupt contents. Fix by marking the database as inaccessible before we begin to perform irreversible operations. A failure after that will leave the database still partially present, but nothing can be done with it except to issue another `DROP DATABASE`.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that partitioned indexes are correctly marked as valid or not at creation",
      "description": "If a new partitioned index matches an existing but invalid index on one of the partitions, the partitioned index could end up being marked valid prematurely. This could lead to misbehavior or assertion failures in subsequent queries on the partitioned table.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore invalid child indexes when matching partitioned indexes to child indexes during `ALTER TABLE ATTACH PARTITION`",
      "description": "Such an index will now be ignored, and a new child index created instead.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure when marking a partitioned index valid after all of its partitions have been attached",
      "description": "The update of the index's `pg_index` entry could use stale data for other columns. One reported symptom is an “attempted to update invisible tuple” error.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER EXTENSION SET SCHEMA` to complain if the extension contains any objects outside the extension's schema",
      "description": "Erroring out if the extension contains objects in multiple schemas was always intended; but the check was mis-coded so that it would fail to detect some cases, leading to surprising behavior.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix tracking of tables' access method dependencies",
      "description": "`ALTER TABLE ... SET ACCESS METHOD` failed to update relevant `pg_depend` entries when changing a table's access method. When using non-built-in access methods, this creates a risk that an access method could be dropped even though tables still depend on it. This fix corrects the logic in `ALTER TABLE`, but it will not adjust any already-missing `pg_depend` entries.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partial unique indexes for uniqueness proofs in the planner",
      "description": "This could give rise to incorrect plans, since the presumed uniqueness of rows read from a table might not hold if the index in question isn't used to scan the table.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't Memoize lateral joins with volatile join conditions",
      "description": "Applying Memoize to a sub-plan that contains volatile filter conditions is likely to lead to wrong answers. The check to avoid doing this missed some cases that can arise when using `LATERAL`.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid producing incorrect plans for foreign joins with pseudoconstant join clauses",
      "description": "The planner currently lacks support for attaching pseudoconstant join clauses to a pushed-down remote join, so disable generation of remote joins in such cases. (A better solution will require ABI-breaking changes of planner data structures, so it will have to wait for a future major release.)",
      "fixedIn": "15.4",
      "significant": true,
      "contributors": [
        "A better solution will require ABI-breaking changes of planner data structures",
        "so it will have to wait for a future major release."
      ]
    },
    {
      "title": "Correctly handle sub-SELECTs in RLS policy expressions and security-barrier views when expanding rule actions (Tom Lane) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race conditions in conflict detection for `SERIALIZABLE` isolation mode",
      "description": "Conflicts could be missed when using bitmap heap scans, when using GIN indexes, and when examining an initially-empty btree index. All these cases could lead to serializability failures due to improperly allowing conflicting transactions to commit.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior of EvalPlanQual checks with inherited or partitioned target tables",
      "description": "This oversight could lead to update or delete actions in `READ COMMITTED` isolation mode getting performed when they should have been skipped because of a conflicting concurrent update.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix hash join with an inner-side hash key that contains Params coming from an outer nested loop",
      "description": "When rescanning the join after the values of such Params have changed, we must rebuild the hash table, but neglected to do so. This could result in missing join output rows.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intermittent failures when trying to update a field of a composite column",
      "description": "If the overall value of the composite column is wide enough to require out-of-line toasting, then an unluckily-timed cache flush could cause errors or server crashes.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent query-lifespan memory leaks in some `UPDATE` queries with triggers (Tomas Vondra) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent query-lifespan memory leaks when an Incremental Sort plan node is rescanned (James Coleman, Laurenz Albe, Tom Lane) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Accept fractional seconds in the input to `jsonpath`'s `datetime()` method (Tom Lane) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent stack-overflow crashes with very complex text search patterns (Tom Lane) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow tokens up to 10240 bytes long in `pg_hba.conf` and `pg_ident.conf`",
      "description": "The previous limit of 256 bytes has been found insufficient for some use-cases.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that all existing placeholders are checked for matches when an extension declares its GUC prefix to be reserved",
      "description": "Faulty loop logic could cause some entries to be skipped.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mishandling of C++ out-of-memory conditions",
      "description": "If JIT is in use, running out of memory in a C++ `new` call would lead to a PostgreSQL FATAL error, instead of the expected C++ exception.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix rare null-pointer crash in `plancache.c` (Tom Lane) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid leaking a stats entry for a subscription when it is dropped (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid losing track of possibly-useful shared memory segments when a page free results in coalescing ranges of free space",
      "description": "Ensure that the segment is moved into the appropriate “bin” for its new amount of free space, so that it will be found by subsequent searches.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `VACUUM` to continue after detecting certain types of b-tree index corruption",
      "description": "If an invalid sibling-page link is detected, log the issue and press on, rather than throwing an error as before. Nothing short of `REINDEX` will fix the broken index, but preventing `VACUUM` from completing until that is done risks making matters far worse.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `WrapLimitsVacuumLock` is released after `VACUUM` detects invalid data in `pg_database`.`datfrozenxid` or `pg_database`.`datminmxid`",
      "description": "Failure to release this lock could lead to a deadlock later, although the lock would be cleaned up if the session exits or encounters some other error.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid double replay of prepared transactions during crash recovery",
      "description": "After a crash partway through a checkpoint with some two-phase transaction state data already flushed to disk by this checkpoint, crash recovery could attempt to replay the prepared transaction(s) twice, leading to a fatal error such as “lock is already held” in the startup process.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a newly created, but still empty table is `fsync`'ed at the next checkpoint",
      "description": "Without this, if there is an operating system crash causing the empty file to disappear, subsequent operations on the table might fail with “could not open file” errors.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that creation of the init fork of an unlogged index is WAL-logged",
      "description": "While an unlogged index's main data fork is not WAL-logged, its init fork should be, to ensure that we have a consistent state to restore the index to after a crash. This step was missed if the init fork contains no data, which is a case not used by any standard index AM; but perhaps some extension behaves that way.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Silence bogus “missing contrecord” errors",
      "description": "Treat this case as plain end-of-WAL to avoid logging inaccurate complaints from pg\\_waldump and walsender.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix overly strict assertion in `jsonpath` code",
      "description": "This assertion failed if a query applied the `.type()` operator to a `like_regex` result. There was no bug in non-assert builds.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when processing an empty statement via the extended query protocol in an already-aborted transaction (Tom Lane) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure when the `stats_fetch_consistency` setting is changed intra-transaction (Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/fuzzystrmatch`'s Soundex `difference()` function to handle empty input sanely",
      "description": "An input string containing no alphabetic characters resulted in unpredictable output.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten whitespace checks in `contrib/hstore` input",
      "description": "In some cases, characters would be falsely recognized as whitespace and hence discarded.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow oversize input arrays with `contrib/intarray`'s `gist__int_ops` index opclass",
      "description": "Previously this code would report a `NOTICE` but press on anyway, creating an invalid index entry that presents a risk of crashes when the index is read.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid useless double decompression of GiST index entries in `contrib/intarray` (Konstantin Knizhnik, Matthias van de Meent, Tom Lane) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `contrib/pageinspect`'s `gist_page_items()` function to work when there are included index columns",
      "description": "Previously, if the index has included columns, `gist_page_items()` would fail to display those values on index leaf pages, or crash outright on non-leaf pages.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql, ignore the `PSQL_WATCH_PAGER` environment variable when stdin/stdout are not a terminal",
      "description": "This corresponds to the treatment of `PSQL_PAGER` in commands besides `\\watch`.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to correctly handle new-style SQL-language functions whose bodies require parse-time dependencies on unique indexes",
      "description": "Such cases can arise from `GROUP BY` and `ON CONFLICT` clauses, for example. The function must then be postponed until after the unique index in the dump output, but pg\\_dump did not do that and instead printed a warning about “could not resolve dependency loop”.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve pg\\_dump's display of details about dependency-loop problems (Tom Lane) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash in pgbench with an empty pipeline and prepared mode (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_index`.`indisreplident` is kept up-to-date in relation cache entries",
      "description": "This value could be stale in some cases. There is no core code that relies on the relation cache's copy, so this is only a latent bug as far as Postgres itself is concerned; but there may be extensions for which it is a live bug.",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix make\\_etags script to work with non-Exuberant ctags (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "15.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent de-duplication of btree index entries for `interval` columns",
      "description": "There are `interval` values that are distinguishable but compare equal, for example `24:00:00` and `1 day`. This breaks assumptions made by btree de-duplication, so `interval` columns need to be excluded from de-duplication. This oversight can cause incorrect results from index-only scans. Moreover, after updating amcheck will report an error for almost all such indexes. Users should reindex any btree indexes on `interval` columns.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Process `date` values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "The distance calculation for dates was backward, causing poor decisions about which entries to merge. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on `date` columns is advisable.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Process large `timestamp` and `timestamptz` values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "Infinities were mistakenly treated as having distance zero rather than a large distance from other values, causing poor decisions about which entries to merge. Also, finite-but-very-large values (near the endpoints of the representable timestamp range) could result in internal overflows, again causing poor decisions. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on `timestamp` and `timestamptz` columns is advisable if the column contains, or has contained, infinities or large finite values.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid calculation overflows in BRIN `interval_minmax_multi_ops` indexes with extreme interval values",
      "description": "This bug might have caused unexpected failures while trying to insert large interval values into such an index.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inconsistent rechecking of concurrently-updated rows during `MERGE`",
      "description": "In `READ COMMITTED` mode, an update that finds that its target row was just updated by a concurrent transaction will recheck the query's `WHERE` conditions on the updated row. `MERGE` failed to ensure that the proper rows of other joined tables were used during this recheck, possibly resulting in incorrect decisions about whether the newly-updated row should be updated again by `MERGE`.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly identify the target table in an inherited `UPDATE`/`DELETE`/`MERGE` even when the parent table is excluded by constraints",
      "description": "If the initially-named table is excluded by constraints, but not all its inheritance descendants are, the first non-excluded descendant was identified as the primary target table. This would lead to firing statement-level triggers associated with that table, rather than the initially-named table as should happen. In v16, the same oversight could also lead to “invalid perminfoindex 0 in RTE with relid NNNN” errors.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intra-query memory leak in Memoize execution (Orlov Aleksej, David Rowley) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema()` is applied to a non-data-returning Portal (Boyu Yang) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw the intended error if `pgrowlocks()` is applied to a partitioned table",
      "description": "Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Report an error if `pgstatindex()`, `pgstatginindex()`, `pgstathashindex()`, or `pgstattuple()` is applied to an invalid index. If `brin_desummarize_range()`, `brin_summarize_new_values()`, `brin_summarize_range()`, or `gin_clean_pending_list()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed `CREATE INDEX` had left behind.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `pg_stat_reset_single_table_counters()` to do the right thing for a shared catalog",
      "description": "Previously the reset would be ineffective.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector()` (Tom Lane) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-allocation of the constructed `tsvector` in `tsvectorrecv()`",
      "description": "If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished `tsvector`. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect coding in `gtsvector_picksplit()`",
      "description": "This could lead to poor page-split decisions in GiST indexes on `tsvector` columns.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve checks for corrupt PGLZ compressed data (Flavien Guedez) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `COPY FROM`, fail cleanly when an unsupported encoding conversion is needed",
      "description": "Recent refactoring accidentally removed the intended error check for this, such that it ended in “cache lookup failed for function 0” instead of a useful error message.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash in `EXPLAIN` if a parameter marked to be displayed by `EXPLAIN` has a NULL boot-time value",
      "description": "No built-in parameter fits this description, but an extension could define such a parameter.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system()`",
      "description": "This fix avoids a race condition in which a child process that has been forked off by `system()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with torn reads of `pg_control` in frontend programs",
      "description": "On some file systems, reading `pg_control` may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid torn reads of `pg_control` in relevant SQL functions",
      "description": "Acquire the appropriate lock before reading `pg_control`, to ensure we get a consistent view of that file.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "On 64-bit machines we will allow values of `track_activity_query_size` large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix briefly showing inconsistent progress statistics for `ANALYZE` on inherited tables",
      "description": "The block-level counters should be reset to zero at the same time we update the current-relation field.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix the background writer to report any WAL writes it makes to the statistics counters (Nazir Bilal Yavuz) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion about forced-flush behavior in `pgstat_report_wal()`",
      "description": "This could result in some statistics about WAL I/O being forgotten in a shutdown.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track the dependencies of cached `CALL` statements, and re-plan them when needed",
      "description": "DDL commands, such as replacement of a function that has been inlined into a `CALL` argument, can create the need to re-plan a `CALL` that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid a possible pfree-a-NULL-pointer crash after an error in OpenSSL connection setup (Sergey Shinderuk) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track nesting depth correctly when inspecting `RECORD`\\-type Vars from outer query levels",
      "description": "This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track hash function and negator function dependencies of ScalarArrayOpExpr plan nodes",
      "description": "In most cases this oversight was harmless, since these functions would be unlikely to disappear while the node's original operator remains present.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error-handling bug in `RECORD` type cache management",
      "description": "An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure when logical decoding is retried in the same session after an error (Hou Zhijie) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in database dropping that could lead to the autovacuum launcher getting stuck",
      "description": "The race could lead to a statistics entry for the removed database remaining present, confusing the launcher's selection of which database to process.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix datatype size confusion in logical tape management",
      "description": "Integer overflow was possible on platforms where long is wider than int, although it would take a multiple-terabyte temporary file to cause a problem.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unintended close of syslogger process's stdin (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid doing plan cache revalidation of utility statements that do not receive interesting processing during parse analysis",
      "description": "Aside from saving a few cycles, this prevents failure after a cache invalidation for statements that must not set a snapshot, such as `SET TRANSACTION ISOLATION LEVEL`.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Keep by-reference `attmissingval` values in a long-lived context while they are being used",
      "description": "This avoids possible use of dangling pointers when a tuple slot outlives the tuple descriptor with which its value was constructed.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Recalculate the effective value of `search_path` after `ALTER ROLE`",
      "description": "This ensures that after renaming a role, the meaning of the special string `$user` is re-determined.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “could not duplicate handle” error occurring on Windows when `min_dynamic_shared_memory` is set above zero (Thomas Munro) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish`",
      "description": "This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (`contrib/bloom` does, for example).",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure in pg\\_dump when it's asked to dump the `pg_catalog` schema (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Formerly, only the table-level ACL would get restored if both types were present.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add logic to pg\\_upgrade to check for use of `abstime`, `reltime`, and `tinterval` data types",
      "description": "These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating invalid temporary slot names in pg\\_basebackup",
      "description": "This has only been seen to occur when the server connection runs through pgbouncer.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, do not report interrupted page deletion as corruption",
      "description": "This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before `VACUUM` had cleaned things up.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `interval` columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the `-multiply_defined suppress` linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When building `contrib/unaccent`'s rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set (Japin Li) ",
      "description": "",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list",
      "description": "Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "fixedIn": "15.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When dequeueing from an LWLock, avoid needing to search the list of waiting processes",
      "description": "This fixes O(N^2) behavior when the list of waiters is long. In some use-cases this results in substantial throughput improvements.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misprocessing of window function run conditions",
      "description": "This oversight could lead to “WindowFunc not found in subplan target lists” errors.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Skip inappropriate actions when `MERGE` causes a cross-partition update",
      "description": "When executing a `MERGE UPDATE` action on a partitioned table, if the `UPDATE` is turned into a `DELETE` and `INSERT` due to changing a partition key column, skip firing `AFTER UPDATE ROW` triggers, as well as other post-update actions such as RLS checks. These actions would typically fail, which is why a regular `UPDATE` doesn't do them in such cases; `MERGE` shouldn't either.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with `BEFORE ROW DELETE` triggers in cross-partition `MERGE` updates",
      "description": "If such a trigger attempted to prevent the update by returning NULL, `MERGE` would suffer an error or assertion failure.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent access to a no-longer-pinned buffer in `BEFORE ROW UPDATE` triggers",
      "description": "If the tuple being updated had just been updated and moved to another page by another session, there was a narrow window where we would attempt to fetch data from the new tuple version without any pin on its buffer. In principle this could result in garbage data appearing in non-updated columns of the proposed new tuple. The odds of problems in practice seem rather low, however.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failures in `heap_update()` and `heap_delete()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck",
      "description": "This error had no impact in non-assert builds.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix overly tight assertion about `false_positive_rate` parameter of BRIN bloom operator classes",
      "description": "This error had no impact in non-assert builds, either.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure during `ALTER TABLE ADD COLUMN` on a complex inheritance tree",
      "description": "If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix problems with duplicate token names in `ALTER TEXT SEARCH CONFIGURATION ... MAPPING` commands (Tender Wang, Michael Paquier) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly lock the associated table during `DROP STATISTICS`",
      "description": "Failure to acquire the lock could result in “tuple concurrently deleted” errors if the `DROP` executes concurrently with `ANALYZE`.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in `ALTER TABLE ADD COLUMN`.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add more checks for overflow in `interval_mul()` and `interval_div()`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure cached statistics are discarded after a change to `stats_fetch_consistency`",
      "description": "In some code paths, it was possible for stale statistics to be returned.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make the `pg_file_settings` view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure if a child index is dropped concurrently with `REINDEX INDEX` on a partitioned index (Fei Changhong) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "A no-op `ALTER LARGE OBJECT OWNER` command (that is, one selecting the existing owner) passed the wrong class ID to the `PostAlterHook`, probably confusing any extension using that hook.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix reporting of I/O timing data in `EXPLAIN (BUFFERS)`",
      "description": "The numbers labeled as “shared/local” actually refer only to shared buffers, so change that label to “shared”.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure durability of `CREATE DATABASE`",
      "description": "If an operating system crash occurred during or shortly after `CREATE DATABASE`, recovery could fail, or subsequent connections to the new database could fail. If a base backup was taken in that window, similar problems could be observed when trying to use the backup. The symptom would be that the database directory, `PG_VERSION` file, or `pg_filenode.map` file was missing or empty.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add more `LOG` messages when starting and ending recovery from a backup",
      "description": "This change provides additional information in the postmaster log that may be useful for diagnosing recovery problems.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "The `startedInRecovery` flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix integer overflow hazard in checking whether a record will fit into the WAL decoding buffer",
      "description": "This bug appears to be only latent except when running a 32-bit PostgreSQL build on a 64-bit platform.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that column default values are correctly transmitted by the pgoutput logical replication plugin",
      "description": "`ALTER TABLE ADD COLUMN` with a constant default value for the new column avoids rewriting existing tuples, instead expecting that reading code will insert the correct default into a tuple that lacks that column. If replication was subsequently initiated on the table, pgoutput would transmit NULL instead of the correct default for such a column, causing incorrect replication on the subscriber.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of logical replication's initial sync for a table with no columns",
      "description": "This case generated an improperly-formatted `COPY` command.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent examining system catalogs with the wrong snapshot during logical decoding",
      "description": "If decoding begins partway through a transaction that modifies system catalogs, the decoder may not recognize that, causing it to fail to treat that transaction as in-progress for catalog lookups. This fix deals with the case that a top-level transaction is already marked as containing catalog changes, but its subtransaction(s) are not.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use `ClientAuthentication_hook`.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Use the BIO “app\\_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more wary about OpenSSL not setting `errno` on error",
      "description": "If `errno` isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix file descriptor leakage when a foreign data wrapper's `ForeignAsyncRequest` function fails (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In PL/pgSQL, support SQL commands that are `CREATE FUNCTION`/`CREATE PROCEDURE` with SQL-standard bodies",
      "description": "Previously, such cases failed with parsing errors due to the semicolon(s) appearing in the function body.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix libpq's handling of errors in pipelines",
      "description": "The pipeline state could get out of sync if an error is returned for reasons other than a query problem (for example, if the connection is lost). Potentially this would lead to a busy-loop in the calling application.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make libpq's `PQsendFlushRequest()` function flush the client output buffer under the same rules as other `PQsend` functions",
      "description": "In pipeline mode, it may still be necessary to call `PQflush()` as well; but this change removes some inconsistency.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "This conforms to the behavior for other dependent objects such as indexes.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make it an error for a pgbench script to end with an open pipeline",
      "description": "Previously, pgbench would behave oddly if a `\\startpipeline` command lacked a matching `\\endpipeline`. This seems like a scripting mistake rather than a case that pgbench needs to handle nicely, so throw an error.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in `contrib/intarray` if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pageinspect`'s `hash_bitmap_info()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pgstattuple`'s `pgstathashindex()` function is applied to a partitioned hash index (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg\\_ctl and pg\\_regress",
      "description": "When launching a child process via `cmd.exe`, pass the `/D` flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Move `is_valid_ascii()` from `mb/pg_wchar.h` to `utils/ascii.h`",
      "description": "This change avoids the need to include `<simd.h>` in `pg_wchar.h`, which was causing problems for some third-party code.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compilation failure of `WAL_DEBUG` code on Windows (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon. (Tom Lane) ",
      "description": "",
      "fixedIn": "15.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `INSERT` from multiple `VALUES` rows into a target column that is a domain over an array or composite type",
      "description": "Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require `SELECT` privilege on the target table for `MERGE` with a `DO NOTHING` clause",
      "description": "`SELECT` privilege would be required in all practical cases anyway, but require it even if the query reads no columns of the target table. This avoids an edge case in which `MERGE` would require no privileges whatever, which seems undesirable even when it's a do-nothing command.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of self-modified tuples in `MERGE`",
      "description": "Throw an error if a target row joins to more than one source row, as required by the SQL standard. (The previous coding could silently ignore this condition if a concurrent update was involved.) Also, throw a non-misleading error if a target row is already updated by a later command in the current transaction, thanks to a `BEFORE` trigger or a volatile function used in the query.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "A NULL value satisfies a clause such as `` _`boolcol`_ IS NOT FALSE ``, so pruning away a partition containing NULLs yielded incorrect answers.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `ALTER FOREIGN TABLE SET SCHEMA` move any owned sequences into the new schema",
      "description": "Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `ALTER TABLE ... ADD COLUMN` create identity/serial sequences with the same persistence as their owning tables",
      "description": "`CREATE UNLOGGED TABLE` will make any owned sequences be unlogged too. `ALTER TABLE` missed that consideration, so that an added identity column would have a logged sequence, which seems pointless.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve `ALTER TABLE ... ALTER COLUMN TYPE`'s error message when there is a dependent function or publication (Tom Lane) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `CREATE DATABASE`, recognize strategy keywords case-insensitively for consistency with other options (Tomas Vondra) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s counting of heap pages accessed by a bitmap heap scan",
      "description": "Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s output for subplans in `MERGE`",
      "description": "`EXPLAIN` would sometimes fail to properly display subplan Params referencing variables in other parts of the plan tree.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "`VACUUM`'s computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another `VACUUM`.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix buffer usage reporting for parallel vacuuming",
      "description": "Buffer accesses performed by parallel workers were not getting counted in the statistics reported in `VERBOSE` mode.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow converting a table to a view within an outer SQL command that is using that table",
      "description": "This avoids possible crashes.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to `UNION ALL` trees that have constant outputs for the join column in some `SELECT` arms.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent potentially-incorrect optimization of some window functions",
      "description": "Disable “run condition” optimization of `ntile()` and `count()` with non-constant arguments. This avoids possible misbehavior with sub-selects, typically leading to errors like “WindowFunc not found in subplan target lists”.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "This would typically end in a crash or unexpected error message.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid freeing still-in-use data in Memoize",
      "description": "In production builds this error frequently didn't cause any problems, as the freed data would most likely not get overwritten before it was used.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind _`X`_ is not yet built” error messages (David Rowley) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more careful with `RECORD`\\-returning functions in `FROM`",
      "description": "The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-rounding and overflow hazards in `date_bin()`",
      "description": "In the case where the source timestamp is before the origin timestamp and their difference is already an exact multiple of the stride, the code incorrectly subtracted the stride anyway. Also, detect some integer-overflow cases that would have produced incorrect results.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition in `pg_get_expr()`",
      "description": "If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()` or `txid_status()`.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a table's freespace map won't return a page that's past the end of the table",
      "description": "Because the freespace map isn't WAL-logged, this was possible in edge cases involving an OS crash, a replica promote, or a PITR restore. The result would be a “could not read block” error.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait` (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid corrupting exception stack if an FDW implements async append but doesn't configure any wait conditions for the Append plan node to wait for (Alexander Pyhalov) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that index-only scans on `name` columns return a fully-padded value",
      "description": "The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in deciding whether a table sync operation is needed in logical replication",
      "description": "An invalidation event arriving while a subscriber identifies which tables need to be synced would be forgotten about, so that any tables newly in need of syncing might not get processed in a timely fashion.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain()` in libpq and ecpglib",
      "description": "Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc()` function is correctly zero-terminated (Oleg Tselebrovskiy) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql, avoid leaking a query result after the query is cancelled",
      "description": "This happened only when cancelling a non-last query in a query string made with `\\;` separators.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dumpall so that role comments, if present, will be dumped regardless of the setting of `--no-role-passwords` (Daniel Gustafsson, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Skip files named `.DS_Store` in pg\\_basebackup, pg\\_checksums, and pg\\_rewind",
      "description": "This avoids problems on macOS, where the Finder may create such files.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments (`--`\\-style comments) following expressions",
      "description": "This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL `CASE` statement.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, don't report false match failures due to short- versus long-header values",
      "description": "A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in BRIN output functions",
      "description": "These output functions are only used for displaying index entries in `contrib/pageinspect`, so the errors are of limited practical concern.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid emitting requests to sort by a constant",
      "description": "This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position _`N`_ is not in select list” errors.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `contrib/postgres_fdw` set the remote session's time zone to `GMT` not `UTC`",
      "description": "This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/xml2`, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane) ",
      "description": "",
      "fixedIn": "15.7",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent infinite loop in `VACUUM`",
      "description": "After a disconnected standby server with an old running transaction reconnected to the primary, it was possible for `VACUUM` on the primary to get confused about which tuples are removable, resulting in an infinite loop.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER TABLE DETACH PARTITION` for cases involving inconsistent index-based constraints",
      "description": "When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect `coninhcount` value. This would cause trouble during any further manipulations of that constraint.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition pruning setup during `ALTER TABLE DETACH PARTITION CONCURRENTLY`",
      "description": "The executor assumed that no partition could be detached between planning and execution of a query on a partitioned table. This is no longer true since the introduction of `DETACH PARTITION`'s `CONCURRENTLY` option, making it possible for query execution to fail transiently when that is used.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update a partitioned table's `pg_class`.`reltuples` field to zero after its last child partition is dropped",
      "description": "The first `ANALYZE` on such a partitioned table must update `relhassubclass` as well, and that caused the `reltuples` update to be lost.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "The SQL `CALL` statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But `CALL` in PL/pgSQL worked correctly.)",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": [
        "But `CALL` in PL/pgSQL worked correctly."
      ]
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list",
      "description": "If the `CALL` is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow in `money` calculations",
      "description": "None of the arithmetic functions for the `money` type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round(numeric)` and `trunc(numeric)`",
      "description": "These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type `numeric`.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix result for `pg_size_pretty()` when applied to the smallest possible `bigint` value (Joseph Koshakow) ",
      "description": "",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `pg_sequence_last_value()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions",
      "description": "Make it return NULL in these cases instead of throwing an error.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery()`",
      "description": "Per the manual, punctuation in the input of `websearch_to_tsquery()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the `pg_database` catalog, so the effects are narrow, but misbehavior is possible.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number _`N`_ not found in view targetlist”.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Rearrange the order of error checks so that we throw an on-point error when a `WITH RECURSIVE` query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Lock owned sequences during `ALTER TABLE SET LOGGED|UNLOGGED`",
      "description": "These commands change the persistence of a table's owned sequences along with the table, but they failed to acquire lock on the sequences while doing so. This could result in losing the effects of concurrent `nextval()` calls.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger _`NNNN`_”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to remove `pg_init_privs` entries for column-level privileges when their table is dropped",
      "description": "If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg\\_dump dumps for that relation.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of extended statistics on expressions in `CREATE TABLE LIKE STATISTICS`",
      "description": "The `CREATE` command failed to adjust column references in statistics expressions to the possibly-different column numbering of the new table. This resulted in invalid statistics objects that would cause problems later. A typical scenario where renumbering columns is needed is when the source table contains some dropped columns.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN()` or `MAX()` aggregates",
      "description": "In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “can only drop stats once” error during replication slot creation and drop (Floris Van Nee) ",
      "description": "",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix resource leakage in logical replication WAL sender",
      "description": "The walsender process leaked memory when publishing changes to a partitioned table whose partitions have row types physically different from the partitioned table's.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent leakage of reference counts for the shared memory block used for statistics",
      "description": "A new backend process attaching to the statistics shared memory incremented its reference count, but failed to decrement the count when exiting. After 232 sessions had been created, the reference count would overflow to zero, causing failures in all subsequent backend process starts.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent deadlocks and assertion failures during truncation of the multixact SLRU log",
      "description": "A process trying to delete SLRU segments could deadlock with the checkpointer process.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Windows reports an FD\\_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix buffer overread in JSON parse error reports for incomplete byte sequences",
      "description": "It was possible to walk off the end of the input buffer by a few bytes when the last bytes comprise an incomplete multi-byte character. While usually harmless, in principle this could cause a crash.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility between PL/Perl and Perl 5.40 (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix recursive `RECORD`\\-returning PL/Python functions",
      "description": "If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "If a PL/Python\\-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror()` in libpq",
      "description": "Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leak within pg\\_dump during a binary upgrade (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_restore` `-l` reports dependent TOC entries correctly",
      "description": "If `-l` was specified together with selective-restore options such as `-n` or `-N`, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “cursor can only scan forward” error in `contrib/postgres_fdw`",
      "description": "This error could occur if the remote server is v15 or later and a foreign table is mapped to a non-trivial remote view.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, do not send `FETCH FIRST WITH TIES` clauses to the remote server",
      "description": "The remote server might not implement this clause, or might interpret it differently than we would locally, so don't risk attempting remote execution.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid clashing with system-provided `<regex.h>` headers",
      "description": "This fixes a compilation failure on macOS version 15 and up.",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix otherwise-harmless assertion failure in Memoize cost estimation (David Rowley) ",
      "description": "",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane) ",
      "description": "",
      "fixedIn": "15.8",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix updates of catalog state for foreign-key constraints when attaching or detaching table partitions",
      "description": "If the referenced table is partitioned, then different catalog entries are needed for a referencing table that is stand-alone versus one that is a partition. `ATTACH/DETACH PARTITION` commands failed to perform this conversion correctly. In particular, after `DETACH` the now stand-alone table would be missing foreign-key enforcement triggers, which could result in the table later containing rows that fail the foreign-key constraint. A subsequent re-`ATTACH` could fail with surprising errors, too.\n\nThe way to fix this is to do `ALTER TABLE DROP CONSTRAINT` on the now stand-alone table for each faulty constraint, and then re-add the constraint. If re-adding the constraint fails, then some erroneous data has crept in. You will need to manually re-establish consistency between the referencing and referenced tables, then re-add the constraint.\n\nThis query can be used to identify broken constraints and construct the commands needed to recreate them:\n\nSELECT conrelid::pg_catalog.regclass AS \"constrained table\",\n       conname AS constraint,\n       confrelid::pg_catalog.regclass AS \"references\",\n       pg_catalog.format('ALTER TABLE %s DROP CONSTRAINT %I;',\n                         conrelid::pg_catalog.regclass, conname) AS \"drop\",\n       pg_catalog.format('ALTER TABLE %s ADD CONSTRAINT %I %s;',\n                         conrelid::pg_catalog.regclass, conname,\n                         pg_catalog.pg_get_constraintdef(oid)) AS \"add\"\nFROM pg_catalog.pg_constraint c\nWHERE contype = 'f' AND conparentid = 0 AND\n   (SELECT count(*) FROM pg_catalog.pg_constraint c2\n    WHERE c2.conparentid = c.oid) <>\n   (SELECT count(*) FROM pg_catalog.pg_inherits i\n    WHERE (i.inhparent = c.conrelid OR i.inhparent = c.confrelid) AND\n      EXISTS (SELECT 1 FROM pg_catalog.pg_partitioned_table\n              WHERE partrelid = i.inhparent));\n\nSince it is possible that one or more of the `ADD CONSTRAINT` steps will fail, you should save the query's output in a file and then attempt to perform each step.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible crashes and “could not open relation” errors in queries on a partitioned table occurring concurrently with a `DETACH CONCURRENTLY` and immediate drop of a partition (Álvaro Herrera, Kuntal Gosh) ",
      "description": "",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER TABLE ATTACH PARTITION` if the table to be attached has a foreign key referencing the partitioned table",
      "description": "This arrangement is not supported, and other ways of creating it already fail.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partitionwise joins or grouping if the query's collation for the key column doesn't match the partition key's collation",
      "description": "Such plans could produce incorrect results.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible “could not find pathkey item to sort” error when the output of a `UNION ALL` member query needs to be sorted, and the sort column is an expression (Andrei Lepikhov, Tom Lane) ",
      "description": "",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cancellation of the second stage of index build for large hash indexes (Pavel Borisov) ",
      "description": "",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure or confusing error message for `` COPY (_`query`_) TO ... ``, when the _`query`_ is rewritten by a `DO INSTEAD NOTIFY` rule (Tender Wang, Tom Lane) ",
      "description": "",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of skewed data during parallel hash join",
      "description": "After repartitioning the inner side of a hash join because one partition has accumulated too many tuples, we check to see if all the partition's tuples went into the same child partition, which suggests that they all have the same hash value and further repartitioning cannot improve matters. This check malfunctioned in some cases, allowing repeated futile repartitioning which would eventually end in a resource-exhaustion error.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in committing a serializable transaction",
      "description": "Mis-processing of a recently committed transaction could lead to an assertion failure or a “could not access status of transaction” error.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in `COMMIT PREPARED` that resulted in orphaned 2PC files",
      "description": "A concurrent `PREPARE TRANSACTION` could cause `COMMIT PREPARED` to not remove the on-disk two-phase state file for the completed transaction. There was no immediate ill effect, but a subsequent crash-and-recovery could fail with “could not access status of transaction”, requiring manual removal of the orphaned file to restore service.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid invalid memory accesses after skipping an invalid toast index during `VACUUM FULL`",
      "description": "A list tracking yet-to-be-rebuilt indexes was not properly updated in this code path, risking assertion failures or crashes later on.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ways in which an “in place” catalog update could be lost",
      "description": "Normal row updates write a new version of the row to preserve rollback-ability of the transaction. However, certain system catalog updates are intentionally non-transactional and are done with an in-place update of the row. These patches fix race conditions that could cause the effects of an in-place update to be lost. As an example, it was possible to forget having set `pg_class`.`relhasindex` to true, preventing updates of the new index and thus causing index corruption.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reset catalog caches at end of recovery",
      "description": "This prevents scenarios wherein an in-place catalog update could be lost due to using stale data from a catalog cache.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using parallel query while holding off interrupts",
      "description": "This situation cannot arise normally, but it can be reached with test scenarios such as using a SQL-language function as B-tree support (which would be far too slow for production usage). If it did occur it would result in an indefinite wait.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report the active query ID for statistics purposes at the start of processing of Bind and Execute protocol messages",
      "description": "This allows more of the work done in extended query protocol to be attributed to the correct query.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Guard against stack overflow in libxml2 with too-deeply-nested XML input",
      "description": "Use `xmlXPathCtxtCompile()` rather than `xmlXPathCompile()`, because the latter fails to protect itself against recursion-to-stack-overflow in libxml2 releases before 2.13.4.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Do not ignore a concurrent `REINDEX CONCURRENTLY` that is working on an index with predicates or expressions",
      "description": "Normally, `REINDEX CONCURRENTLY` does not need to wait for other `REINDEX CONCURRENTLY` operations on other tables. However, this optimization is not applied if the other `REINDEX CONCURRENTLY` is processing an index with predicates or expressions, on the chance that such expressions contain user-defined code that accesses other tables. Careless coding created a race condition such that that rule was not applied uniformly, possibly allowing inconsistent behavior.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “failed to find plan for subquery/CTE” errors in `EXPLAIN`",
      "description": "This case arose while trying to print references to fields of a RECORD-type output of a subquery when the subquery has been optimized out of the plan altogether (which is possible at least in the case that it has a constant-false `WHERE` condition). Nothing remains in the plan to identify the original field names, so fall back to printing `` f_`N`_ `` for the _`N`_'th record column. (That's actually the right thing anyway, if the record output arose from a `ROW()` constructor.)",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow a `USING` clause when altering the type of a generated column",
      "description": "A generated column already has an expression specifying the column contents, so including `USING` doesn't make sense.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore not-yet-defined Portals in the `pg_cursors` view",
      "description": "It is possible for user-defined code that inspects this view to be called while a new cursor is being set up, and if that happens a null pointer dereference would ensue. Avoid the problem by defining the view to exclude incompletely-set-up cursors.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent mis-encoding of “trailing junk after numeric literal” error messages",
      "description": "We do not allow identifiers to appear immediately following numeric literals (there must be some whitespace between). If a multibyte character immediately followed a numeric literal, the syntax error message about it included only the first byte of that character, causing bad-encoding problems both in the report to the client and in the postmaster log file.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “unexpected table\\_index\\_fetch\\_tuple call during logical decoding” error while decoding a transaction involving insertion of a column default value (Takeshi Ideriha, Hou Zhijie) ",
      "description": "",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce memory consumption of logical decoding",
      "description": "Use a smaller default block size to store tuple data received during logical replication. This reduces memory wastage, which has been reported to be severe while processing long-running transactions, even leading to out-of-memory failures.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-disable sending of stateless (TLSv1.2) session tickets",
      "description": "A previous change to prevent sending of stateful (TLSv1.3) session tickets accidentally re-enabled sending of stateless ones. Thus, while we intended to prevent clients from thinking that TLS session resumption is supported, some still did.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “wrong tuple length” failure when dropping a database with many ACL (permission) entries (Ayush Tiwari) ",
      "description": "",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow adjusting the `session_authorization` and `role` settings in parallel workers",
      "description": "Our code intends to allow modifiable server settings to be set by function `SET` clauses, but not otherwise within a parallel worker. `SET` clauses failed for these two settings, though.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list, when the `CALL` is within a PL/pgSQL `EXCEPTION` block",
      "description": "As with a similar fix in our previous quarterly releases, this case allowed such functions to be passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “cache lookup failed for function” errors in edge cases in PL/pgSQL's `CALL` (Tom Lane) ",
      "description": "",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix thread safety of our fallback (non-OpenSSL) MD5 implementation on big-endian hardware",
      "description": "Thread safety is not currently a concern in the server, but it is for libpq.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parse libpq's `keepalives` connection option in the same way as other integer-valued options",
      "description": "The coding used here rejected trailing whitespace in the option value, unlike other cases. This turns out to be problematic in ecpg's usage, for example.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid use of `pnstrdup()` in ecpglib",
      "description": "That function will call `exit()` on out-of-memory, which is undesirable in a library. The calling code already handles allocation failures properly.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpglib, fix out-of-bounds read when parsing incorrect datetime input",
      "description": "It was possible to try to read the location just before the start of a constant array. Real-world consequences seem minimal, though.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's handling of identity sequences that have persistence different from their owning table's persistence",
      "description": "Since v15, it's been possible to set an identity sequence to be LOGGED when its owning table is UNLOGGED or vice versa. However, pg\\_dump's method for recreating that situation failed in binary-upgrade mode, causing pg\\_upgrade to fail when such sequences are present. Fix by introducing a new option for `ADD/ALTER COLUMN GENERATED AS IDENTITY` to allow the sequence's persistence to be set correctly at creation. Note that this means a dump from a database containing such a sequence will only load into a server of this minor version or newer.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include the source timeline history in pg\\_rewind's debug output",
      "description": "This was the intention to begin with, but a coding error caused the source history to always print as empty.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior with junction points on Windows, particularly in pg\\_rewind",
      "description": "This entailed back-patching previous fixes by Thomas Munro, Peter Eisentraut, Alexander Lakhin, and Juan José Santamaría Flecha. Those changes were originally not back-patched out of caution, but they have been in use in later branches for long enough to deem them safe.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to reindex temporary tables and indexes in vacuumdb and in parallel reindexdb",
      "description": "Reindexing other sessions' temporary tables cannot work, but the check to skip them was missing in some code paths, leading to unwanted failures.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow inspection of sequence relations in relevant functions of `contrib/pageinspect` and `contrib/pgstattuple`",
      "description": "This had been allowed in the past, but it got broken during the introduction of non-default access methods for tables.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect LLVM-generated code on ARM64 platforms",
      "description": "When using JIT compilation on ARM platforms, the generated code could not support relocation distances exceeding 32 bits, allowing unlucky placement of generated code to cause server crashes on large-memory systems.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix a few places that assumed that process start time (represented as a `time_t`) will fit into a `long` value",
      "description": "On platforms where `long` is 32 bits (notably Windows), this coding would fail after Y2038\\. Most of the failures appear only cosmetic, but notably `pg_ctl start` would hang.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix building with Strawberry Perl on Windows (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent “missing declaration for inet\\_pton” compiler warning or error when building with MinGW (Thomas Munro, Andrew Dunstan) ",
      "description": "",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024b",
      "description": "This tzdata release changes the old System-V-compatibility zone names to duplicate the corresponding geographic zones; for example `PST8PDT` is now an alias for `America/Los_Angeles`. The main visible consequence is that for timestamps before the introduction of standardized time zones, the zone is considered to represent local mean solar time for the named location. For example, in `PST8PDT`, `timestamptz` input such as `1801-01-01 00:00` would previously have been rendered as `1801-01-01 00:00:00-08`, but now it is rendered as `1801-01-01 00:00:00-07:52:58`.\n\nAlso, historical corrections for Mexico, Mongolia, and Portugal. Notably, `Asia/Choibalsan` is now an alias for `Asia/Ulaanbaatar` rather than being a separate zone, mainly because the differences between those zones were found to be based on untrustworthy data.",
      "fixedIn": "15.9",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow parallelization of `FULL` and internal right `OUTER` hash joins",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logical replication from standby servers",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logical replication subscribers to apply large transactions in parallel",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow monitoring of I/O statistics using the new `pg_stat_io` view",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL/JSON constructors and identity functions",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for regular expression matching of user and database names in `pg_hba.conf`, and user names in `pg_ident.conf`",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change assignment rules for [PL/pgSQL](https://www.postgresql.org/docs/16/plpgsql-cursors.html#PLPGSQL-OPEN-BOUND-CURSOR \"43.7.2.3. Opening a Bound Cursor\") bound cursor variables",
      "description": "Previously, the string value of such variables was set to match the variable name during cursor assignment; now it will be assigned during [OPEN](https://www.postgresql.org/docs/16/plpgsql-cursors.html#PLPGSQL-CURSOR-OPENING \"43.7.2. Opening Cursors\"), and will not match the variable name. To restore the previous behavior, assign the desired portal name to the cursor variable before `OPEN`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow [NULLS NOT DISTINCT](https://www.postgresql.org/docs/16/sql-createindex.html \"CREATE INDEX\") indexes for primary keys (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [REINDEX DATABASE](https://www.postgresql.org/docs/16/sql-reindex.html \"REINDEX\") and [reindexdb](https://www.postgresql.org/docs/16/app-reindexdb.html \"reindexdb\") to not process indexes on system catalogs",
      "description": "Processing such indexes is still possible using `REINDEX SYSTEM` and [reindexdb --system](https://www.postgresql.org/docs/16/app-reindexdb.html \"reindexdb\").",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten [GENERATED](https://www.postgresql.org/docs/16/ddl-generated-columns.html \"5.3. Generated Columns\") expression restrictions on inherited and partitioned tables",
      "description": "Columns of parent/partitioned and child/partition tables must all have the same generation status, though now the actual generation expressions can be different.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove [pg\\_walinspect](https://www.postgresql.org/docs/16/pgwalinspect.html \"F.37. pg_walinspect — low-level WAL inspection\") functions `pg_get_wal_records_info_till_end_of_wal()` and `pg_get_wal_stats_till_end_of_wal()` (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename server variable `force_parallel_mode` to [debug\\_parallel\\_query](https://www.postgresql.org/docs/16/runtime-config-developer.html#GUC-DEBUG-PARALLEL-QUERY) (David Rowley) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove the ability to [create views](https://www.postgresql.org/docs/16/sql-createview.html \"CREATE VIEW\") manually with `ON SELECT` rules (Tom Lane) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove server variable `promote_trigger_file`",
      "description": "This was used to promote a standby to primary, but is now more easily accomplished with [pg\\_ctl promote](https://www.postgresql.org/docs/16/app-pg-ctl.html \"pg_ctl\") or [pg\\_promote()](https://www.postgresql.org/docs/16/functions-admin.html#FUNCTIONS-RECOVERY-CONTROL-TABLE \"Table 9.93. Recovery Control Functions\").",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove read-only server variables `lc_collate` and `lc_ctype`",
      "description": "Collations and locales can vary between databases so having them as read-only server variables was unhelpful.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Restrict the privileges of [CREATEROLE](https://www.postgresql.org/docs/16/sql-createrole.html \"CREATE ROLE\") and its ability to modify other roles",
      "description": "Previously roles with `CREATEROLE` privileges could change many aspects of any non-superuser role. Such changes, including adding members, now require the role requesting the change to have `ADMIN OPTION` permission. For example, they can now change the `CREATEDB`, `REPLICATION`, and `BYPASSRLS` properties only if they also have those permissions.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove symbolic links for the postmaster binary (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow incremental sorts in more cases, including `DISTINCT` (David Rowley) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the ability for aggregates having `ORDER BY` or `DISTINCT` to use pre-sorted data",
      "description": "The new server variable [enable\\_presorted\\_aggregate](https://www.postgresql.org/docs/16/runtime-config-query.html#GUC-ENABLE-PRESORTED-AGGREGATE) can be used to disable this.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow memoize atop a `UNION ALL` (Richard Guo) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow anti-joins to be performed with the non-nullable input as the inner relation (Richard Guo) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow parallelization of [FULL](https://www.postgresql.org/docs/16/queries-table-expressions.html#QUERIES-JOIN \"7.2.1.1. Joined Tables\") and internal right `OUTER` hash joins (Melanie Plageman, Thomas Munro) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "During non-freeze operations, perform page [freezing](https://www.postgresql.org/docs/16/routine-vacuuming.html#VACUUM-FOR-WRAPAROUND \"25.1.5. Preventing Transaction ID Wraparound Failures\") where appropriate",
      "description": "This makes full-table freeze vacuums less necessary.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow aggregate functions [string\\_agg()](https://www.postgresql.org/docs/16/functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE \"Table 9.59. General-Purpose Aggregate Functions\") and `array_agg()` to be parallelized (David Rowley) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control of the shared buffer usage by vacuum and analyze",
      "description": "The [VACUUM](https://www.postgresql.org/docs/16/sql-vacuum.html \"VACUUM\")/[ANALYZE](https://www.postgresql.org/docs/16/sql-analyze.html \"ANALYZE\") option is `BUFFER_USAGE_LIMIT`, and the [vacuumdb](https://www.postgresql.org/docs/16/app-vacuumdb.html \"vacuumdb\") option is `--buffer-usage-limit`. The default value is set by server variable [vacuum\\_buffer\\_usage\\_limit](https://www.postgresql.org/docs/16/runtime-config-resource.html#GUC-VACUUM-BUFFER-USAGE-LIMIT), which also controls autovacuum.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Support [wal\\_sync\\_method=fdatasync](https://www.postgresql.org/docs/16/runtime-config-wal.html#GUC-WAL-SYNC-METHOD) on Windows (Thomas Munro) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [HOT](https://www.postgresql.org/docs/16/storage-hot.html \"73.7. Heap-Only Tuples (HOT)\") updates if only `BRIN`\\-indexed columns are updated (Matthias van de Meent, Josef Simanek, Tomas Vondra) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `xid`/`subxid` searches and ASCII string detection to use vector operations",
      "description": "ASCII detection is particularly useful for [COPY FROM](https://www.postgresql.org/docs/16/sql-copy.html \"COPY\"). Vector operations are also used for some C array searches.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_stat\\_io](https://www.postgresql.org/docs/16/monitoring-stats.html#MONITORING-PG-STAT-IO-VIEW \"28.2.13. pg_stat_io\") view to track I/O statistics (Melanie Plageman) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Record statistics on the last sequential and index scans on tables",
      "description": "This information appears in [pg\\_stat\\_\\*\\_tables](https://www.postgresql.org/docs/16/monitoring-stats.html#PG-STAT-ALL-TABLES-VIEW \"Table 28.28. pg_stat_all_tables View\") and [pg\\_stat\\_\\*\\_indexes](https://www.postgresql.org/docs/16/monitoring-stats.html#MONITORING-PG-STAT-ALL-INDEXES-VIEW \"28.2.19. pg_stat_all_indexes\").",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Record statistics on the occurrence of updated rows moving to new pages",
      "description": "The `pg_stat_*_tables` column is [n\\_tup\\_newpage\\_upd](https://www.postgresql.org/docs/16/monitoring-stats.html#MONITORING-PG-STAT-ALL-TABLES-VIEW \"28.2.18. pg_stat_all_tables\").",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add speculative lock information to the [pg\\_locks](https://www.postgresql.org/docs/16/view-pg-locks.html \"54.12. pg_locks\") system view",
      "description": "The transaction id is displayed in the `transactionid` column and the speculative insertion token is displayed in the `objid` column.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the display of prepared statement result types to the [pg\\_prepared\\_statements](https://www.postgresql.org/docs/16/view-pg-prepared-statements.html \"54.15. pg_prepared_statements\") view (Dagfinn Ilmari Mannsåker) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Create subscription statistics entries at subscription creation time so [stats\\_reset](https://www.postgresql.org/docs/16/monitoring-stats.html#PG-STAT-DATABASE-VIEW \"Table 28.26. pg_stat_database View\") is accurate",
      "description": "Previously entries were created only when the first statistics were reported.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correct the I/O accounting for temp relation writes shown in [pg\\_stat\\_database](https://www.postgresql.org/docs/16/monitoring-stats.html#PG-STAT-DATABASE-VIEW \"Table 28.26. pg_stat_database View\") (Melanie Plageman) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [pg\\_stat\\_get\\_backend\\_subxact()](https://www.postgresql.org/docs/16/monitoring-stats.html#MONITORING-STATS-BACKEND-FUNCS-TABLE \"Table 28.36. Per-Backend Statistics Functions\") to report on a session's subtransaction cache (Dilip Kumar) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [pg\\_stat\\_get\\_backend\\_idset()](https://www.postgresql.org/docs/16/monitoring-stats.html#MONITORING-STATS-BACKEND-FUNCS-TABLE \"Table 28.36. Per-Backend Statistics Functions\"), `pg_stat_get_backend_activity()`, and related functions use the unchanging backend id",
      "description": "Previously the index values might change during the lifetime of the session.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report stand-alone backends with a special backend type (Melanie Plageman) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add wait event [SpinDelay](https://www.postgresql.org/docs/16/monitoring-stats.html#WAIT-EVENT-TIMEOUT-TABLE \"Table 28.13. Wait Events of Type Timeout\") to report spinlock sleep delays (Andres Freund) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Create new wait event [DSMAllocate](https://www.postgresql.org/docs/16/monitoring-stats.html#WAIT-EVENT-IO-TABLE \"Table 28.9. Wait Events of Type IO\") to indicate waiting for dynamic shared memory allocation",
      "description": "Previously this type of wait was reported as `DSMFillZeroWrite`, which was also used by `mmap()` allocations.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the database name to the [process title](https://www.postgresql.org/docs/16/runtime-config-logging.html#GUC-UPDATE-PROCESS-TITLE) of logical WAL senders",
      "description": "Physical WAL senders do not display a database name.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add checkpoint and `REDO LSN` information to [log\\_checkpoints](https://www.postgresql.org/docs/16/runtime-config-logging.html#GUC-LOG-CHECKPOINTS) messages (Bharath Rupireddy, Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Provide additional details during client certificate failures (Jacob Champion) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add predefined role [pg\\_create\\_subscription](https://www.postgresql.org/docs/16/predefined-roles.html \"22.5. Predefined Roles\") with permission to create subscriptions (Robert Haas) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow subscriptions to not require passwords",
      "description": "This is accomplished with the option [password\\_required=false](https://www.postgresql.org/docs/16/sql-createsubscription.html \"CREATE SUBSCRIPTION\").",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Simplify permissions for [LOCK TABLE](https://www.postgresql.org/docs/16/sql-lock.html \"LOCK\")",
      "description": "Previously a user's ability to perform `LOCK TABLE` at various lock levels was limited to the lock levels required by the commands they had permission to execute on the table. For example, someone with [UPDATE](https://www.postgresql.org/docs/16/sql-update.html \"UPDATE\") permission could perform all lock levels except `ACCESS SHARE`, even though it was a lesser lock level. Now users can issue lesser lock levels if they already have permission for greater lock levels.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [ALTER GROUP group\\_name ADD USER user\\_name](https://www.postgresql.org/docs/16/sql-altergroup.html \"ALTER GROUP\") to be performed with `ADMIN OPTION`",
      "description": "Previously `CREATEROLE` permission was required.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [GRANT](https://www.postgresql.org/docs/16/sql-grant.html \"GRANT\") to use `WITH ADMIN TRUE`/`FALSE` syntax",
      "description": "Previously only the `WITH ADMIN OPTION` syntax was supported.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow roles that create other roles to automatically inherit the new role's rights or the ability to [SET ROLE](https://www.postgresql.org/docs/16/sql-set-role.html \"SET ROLE\") to the new role",
      "description": "This is controlled by server variable [createrole\\_self\\_grant](https://www.postgresql.org/docs/16/runtime-config-client.html#GUC-CREATEROLE-SELF-GRANT).",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent users from changing the default privileges of non-inherited roles",
      "description": "This is now only allowed for inherited roles.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When granting role membership, require the granted-by role to be a role that has appropriate permissions",
      "description": "This is a requirement even when a non-bootstrap superuser is granting role membership.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow non-superusers to grant permissions using a granted-by user that is not the current user",
      "description": "The current user still must have sufficient permissions given by the specified granted-by user.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [GRANT](https://www.postgresql.org/docs/16/sql-grant.html \"GRANT\") to control permission to use [SET ROLE](https://www.postgresql.org/docs/16/sql-set-role.html \"SET ROLE\")",
      "description": "This is controlled by a new `GRANT ... SET` option.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add dependency tracking to roles which have granted privileges",
      "description": "For example, removing `ADMIN OPTION` will fail if there are privileges using that option; `CASCADE` must be used to revoke dependent permissions.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add dependency tracking of grantors for [GRANT](https://www.postgresql.org/docs/16/sql-grant.html \"GRANT\") records",
      "description": "This guarantees that [pg\\_auth\\_members](https://www.postgresql.org/docs/16/catalog-pg-auth-members.html \"53.9. pg_auth_members\").`grantor` values are always valid.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow multiple role membership records",
      "description": "Previously a new membership grant would remove a previous matching membership grant, even if other aspects of the grant did not match.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent removal of superuser privileges for the bootstrap user",
      "description": "Restoring such users could lead to errors.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [makeaclitem()](https://www.postgresql.org/docs/16/functions-info.html#FUNCTIONS-ACLITEM-FN-TABLE \"Table 9.70. aclitem Functions\") to accept multiple privilege names",
      "description": "Previously only a single privilege name, like [SELECT](https://www.postgresql.org/docs/16/sql-select.html \"SELECT\"), was accepted.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for Kerberos credential delegation",
      "description": "This is enabled with server variable [gss\\_accept\\_delegation](https://www.postgresql.org/docs/16/runtime-config-connection.html#GUC-GSS-ACCEPT-DELEGATION) and libpq connection parameter [gssdelegation](https://www.postgresql.org/docs/16/libpq-connect.html#LIBPQ-CONNECT-GSSDELEGATION).",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the SCRAM iteration count to be set with server variable [scram\\_iterations](https://www.postgresql.org/docs/16/runtime-config-connection.html#GUC-SCRAM-ITERATIONS) (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Tighten restrictions on which server variables can be reset",
      "description": "Previously, while certain variables, like [transaction\\_isolation](https://www.postgresql.org/docs/16/runtime-config-client.html#GUC-DEFAULT-TRANSACTION-ISOLATION), were not affected by [RESET ALL](https://www.postgresql.org/docs/16/sql-reset.html \"RESET\"), they could be individually reset in inappropriate situations.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Move various [postgresql.conf](https://www.postgresql.org/docs/16/config-setting.html#CONFIG-SETTING-CONFIGURATION-FILE \"20.1.2. Parameter Interaction via the Configuration File\") items into new categories",
      "description": "This also affects the categories displayed in the [pg\\_settings](https://www.postgresql.org/docs/16/view-pg-settings.html \"54.24. pg_settings\") view.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent configuration file recursion beyond 10 levels (Julien Rouhaud) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [autovacuum](https://www.postgresql.org/docs/16/routine-vacuuming.html#AUTOVACUUM \"25.1.6. The Autovacuum Daemon\") to more frequently honor changes to delay settings",
      "description": "Rather than honor changes only at the start of each relation, honor them at the start of each block.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove restrictions that archive files be durably renamed",
      "description": "The [archive\\_command](https://www.postgresql.org/docs/16/runtime-config-wal.html#GUC-ARCHIVE-COMMAND) command is now more likely to be called with already-archived files after a crash.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent [archive\\_library](https://www.postgresql.org/docs/16/runtime-config-wal.html#GUC-ARCHIVE-LIBRARY) and [archive\\_command](https://www.postgresql.org/docs/16/runtime-config-wal.html#GUC-ARCHIVE-COMMAND) from being set at the same time",
      "description": "Previously `archive_library` would override `archive_command`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the postmaster to terminate children with an abort signal",
      "description": "This allows collection of a core dump for a stuck child process. This is controlled by [send\\_abort\\_for\\_crash](https://www.postgresql.org/docs/16/runtime-config-developer.html#GUC-SEND-ABORT-FOR-CRASH) and [send\\_abort\\_for\\_kill](https://www.postgresql.org/docs/16/runtime-config-developer.html#GUC-SEND-ABORT-FOR-KILL). The postmaster's `-T` switch is now the same as setting `send_abort_for_crash`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove the non-functional postmaster `-n` option (Tom Lane) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the server to reserve backend slots for roles with [pg\\_use\\_reserved\\_connections](https://www.postgresql.org/docs/16/predefined-roles.html \"22.5. Predefined Roles\") membership",
      "description": "The number of reserved slots is set by server variable [reserved\\_connections](https://www.postgresql.org/docs/16/runtime-config-connection.html#GUC-RESERVED-CONNECTIONS).",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [huge pages](https://www.postgresql.org/docs/16/runtime-config-resource.html#GUC-HUGE-PAGES) to work on newer versions of Windows 10",
      "description": "This adds the special handling required to enable huge pages on newer versions of Windows 10.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [debug\\_io\\_direct](https://www.postgresql.org/docs/16/runtime-config-developer.html#GUC-DEBUG-IO-DIRECT) setting for developer usage",
      "description": "While primarily for developers, [wal\\_sync\\_method=open\\_sync](https://www.postgresql.org/docs/16/runtime-config-wal.html#GUC-WAL-SYNC-METHOD)/`open_datasync` has been modified to not use direct I/O with `wal_level=minimal`; this is now enabled with `debug_io_direct=wal`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [pg\\_split\\_walfile\\_name()](https://www.postgresql.org/docs/16/functions-admin.html#FUNCTIONS-ADMIN-BACKUP-TABLE \"Table 9.91. Backup Control Functions\") to report the segment and timeline values of WAL file names (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for regular expression matching on database and role entries in `pg_hba.conf`",
      "description": "Regular expression patterns are prefixed with a slash. Database and role names that begin with slashes need to be double-quoted if referenced in `pg_hba.conf`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow include files in `pg_hba.conf` and `pg_ident.conf`",
      "description": "These are controlled by `include`, `include_if_exists`, and `include_dir`. System views [pg\\_hba\\_file\\_rules](https://www.postgresql.org/docs/16/view-pg-hba-file-rules.html \"54.9. pg_hba_file_rules\") and [pg\\_ident\\_file\\_mappings](https://www.postgresql.org/docs/16/view-pg-ident-file-mappings.html \"54.10. pg_ident_file_mappings\") now display the file name.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `pg_hba.conf` tokens to be of unlimited length (Tom Lane) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add rule and map numbers to the system view [pg\\_hba\\_file\\_rules](https://www.postgresql.org/docs/16/view-pg-hba-file-rules.html \"54.9. pg_hba_file_rules\") (Julien Rouhaud) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Determine the default encoding from the locale when using ICU",
      "description": "Previously the default was always `UTF-8`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [CREATE DATABASE](https://www.postgresql.org/docs/16/sql-createdatabase.html \"CREATE DATABASE\") and [CREATE COLLATION](https://www.postgresql.org/docs/16/sql-createcollation.html \"CREATE COLLATION\")'s `LOCALE` options, and [initdb](https://www.postgresql.org/docs/16/app-initdb.html \"initdb\") and [createdb](https://www.postgresql.org/docs/16/app-createdb.html \"createdb\") `--locale` options, control non-libc collation providers",
      "description": "Previously they only controlled libc providers.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": [
        "Jeff Davis"
      ]
    },
    {
      "title": "Add predefined collations `unicode` and `ucs_basic`",
      "description": "This only works if ICU support is enabled.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow Windows to import system locales automatically",
      "description": "Previously, only ICU locales could be imported on Windows.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable to control how logical decoding publishers transfer changes and how subscribers apply them",
      "description": "The variable is [debug\\_logical\\_replication\\_streaming](https://www.postgresql.org/docs/16/runtime-config-developer.html#GUC-DEBUG-LOGICAL-REPLICATION-STREAMING).",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logical replication initial table synchronization to copy rows in binary format",
      "description": "This is only possible for subscriptions marked as binary.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logical replication subscribers to process only changes that have no origin",
      "description": "This can be used to avoid replication loops. This is controlled by the new `CREATE SUBSCRIPTION ... ORIGIN` option.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [wal\\_retrieve\\_retry\\_interval](https://www.postgresql.org/docs/16/runtime-config-replication.html#GUC-WAL-RETRIEVE-RETRY-INTERVAL) operate on a per-subscription basis",
      "description": "Previously the retry time was applied globally. This also adds wait events [\\>LogicalRepLauncherDSA](https://www.postgresql.org/docs/16/monitoring-stats.html#WAIT-EVENT-LWLOCK-TABLE \"Table 28.12. Wait Events of Type LWLock\") and `LogicalRepLauncherHash`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [EXPLAIN](https://www.postgresql.org/docs/16/sql-explain.html \"EXPLAIN\") option `GENERIC_PLAN` to display the generic plan for a parameterized query (Laurenz Albe) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow a [COPY FROM](https://www.postgresql.org/docs/16/sql-copy.html \"COPY\") value to map to a column's `DEFAULT` (Israel Barth Rubio) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [COPY](https://www.postgresql.org/docs/16/sql-copy.html \"COPY\") into foreign tables to add rows in batches",
      "description": "This is controlled by the [postgres\\_fdw](https://www.postgresql.org/docs/16/postgres-fdw.html \"F.38. postgres_fdw — access data stored in external PostgreSQL servers\") option [batch\\_size](https://www.postgresql.org/docs/16/postgres-fdw.html#POSTGRES-FDW-OPTIONS-COST-ESTIMATION \"F.38.1.3. Cost Estimation Options\").",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the `STORAGE` type to be specified by [CREATE TABLE](https://www.postgresql.org/docs/16/sql-createtable.html \"CREATE TABLE\")",
      "description": "Previously only [ALTER TABLE](https://www.postgresql.org/docs/16/sql-altertable.html \"ALTER TABLE\") could control this.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [truncate triggers](https://www.postgresql.org/docs/16/sql-createtrigger.html \"CREATE TRIGGER\") on foreign tables (Yugo Nagata) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [VACUUM](https://www.postgresql.org/docs/16/sql-vacuum.html \"VACUUM\") and [vacuumdb](https://www.postgresql.org/docs/16/app-vacuumdb.html \"vacuumdb\") to only process [TOAST](https://www.postgresql.org/docs/16/storage-toast.html \"73.2. TOAST\") tables",
      "description": "This is accomplished by having [VACUUM](https://www.postgresql.org/docs/16/sql-vacuum.html \"VACUUM\") turn off `PROCESS_MAIN` or by [vacuumdb](https://www.postgresql.org/docs/16/app-vacuumdb.html \"vacuumdb\") using the `--no-process-main` option.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [VACUUM](https://www.postgresql.org/docs/16/sql-vacuum.html \"VACUUM\") options to skip or update all [frozen](https://www.postgresql.org/docs/16/routine-vacuuming.html#VACUUM-FOR-WRAPAROUND \"25.1.5. Preventing Transaction ID Wraparound Failures\") statistics",
      "description": "The options are `SKIP_DATABASE_STATS` and `ONLY_DATABASE_STATS`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [REINDEX DATABASE](https://www.postgresql.org/docs/16/sql-reindex.html \"REINDEX\") and [REINDEX SYSTEM](https://www.postgresql.org/docs/16/sql-reindex.html \"REINDEX\") to no longer require an argument",
      "description": "Previously the database name had to be specified.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [CREATE STATISTICS](https://www.postgresql.org/docs/16/sql-createstatistics.html \"CREATE STATISTICS\") to generate a statistics name if none is specified (Simon Riggs) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow non-decimal [integer literals](https://www.postgresql.org/docs/16/sql-syntax-lexical.html#SQL-SYNTAX-BIT-STRINGS \"4.1.2.5. Bit-String Constants\")",
      "description": "For example, `0x42F`, `0o273`, and `0b100101`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [NUMERIC](https://www.postgresql.org/docs/16/datatype-numeric.html \"8.1. Numeric Types\") to process hexadecimal, octal, and binary integers of any size",
      "description": "Previously only unquoted eight-byte integers were supported with these non-decimal bases.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Accept the spelling `+infinity` in datetime input (Vik Fearing) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent the specification of `epoch` and `infinity` together with other fields in datetime strings (Joseph Koshakow) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove undocumented support for date input in the form `` Y_`year`_M_`month`_D_`day`_ `` (Joseph Koshakow) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add functions [pg\\_input\\_is\\_valid()](https://www.postgresql.org/docs/16/functions-info.html#FUNCTIONS-INFO-VALIDITY-TABLE \"Table 9.79. Data Validity Checking Functions\") and `pg_input_error_info()` to check for type conversion errors (Tom Lane) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow subqueries in the `FROM` clause to omit aliases (Dean Rasheed) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL/JSON object checks",
      "description": "The [IS JSON](https://www.postgresql.org/docs/16/functions-json.html#FUNCTIONS-SQLJSON-MISC \"Table 9.48. SQL/JSON Testing Functions\") checks include checks for values, arrays, objects, scalars, and unique keys.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow JSON string parsing to use vector operations (John Naylor) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add functions to add, subtract, and generate `timestamptz` values in a specified time zone",
      "description": "The functions are [date\\_add()](https://www.postgresql.org/docs/16/functions-datetime.html#FUNCTIONS-DATETIME-TABLE \"Table 9.33. Date/Time Functions\"), `date_subtract()`, and [generate\\_series()](https://www.postgresql.org/docs/16/functions-srf.html#FUNCTIONS-SRF-SERIES \"Table 9.65. Series Generating Functions\").",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [date\\_trunc(unit, timestamptz, time\\_zone)](https://www.postgresql.org/docs/16/functions-datetime.html#FUNCTIONS-DATETIME-TABLE \"Table 9.33. Date/Time Functions\") to be an immutable function",
      "description": "This allows the creation of expression indexes using this function.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable [SYSTEM\\_USER](https://www.postgresql.org/docs/16/functions-info.html#FUNCTIONS-INFO-SESSION-TABLE \"Table 9.67. Session Information Functions\")",
      "description": "This reports the authentication method and its authenticated user.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add functions [array\\_sample()](https://www.postgresql.org/docs/16/functions-array.html#ARRAY-FUNCTIONS-TABLE \"Table 9.54. Array Functions\") and `array_shuffle()` (Martin Kalcher) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add aggregate function [ANY\\_VALUE()](https://www.postgresql.org/docs/16/functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE \"Table 9.59. General-Purpose Aggregate Functions\") which returns any value from a set (Vik Fearing) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [random\\_normal()](https://www.postgresql.org/docs/16/functions-math.html#FUNCTIONS-MATH-RANDOM-TABLE \"Table 9.6. Random Functions\") to supply normally-distributed random numbers (Paul Ramsey) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add error function [erf()](https://www.postgresql.org/docs/16/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE \"Table 9.5. Mathematical Functions\") and its complement `erfc()` (Dean Rasheed) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [XMLSERIALIZE()](https://www.postgresql.org/docs/16/datatype-xml.html#DATATYPE-XML-CREATING \"8.13.1. Creating XML Values\") option `INDENT` to pretty-print its output (Jim Jones) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [pg\\_collation\\_actual\\_version()](https://www.postgresql.org/docs/16/functions-admin.html#FUNCTIONS-ADMIN-COLLATION \"Table 9.98. Collation Management Functions\") to return a reasonable value for the default collation",
      "description": "Previously it returned `NULL`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_read\\_file()](https://www.postgresql.org/docs/16/functions-admin.html#FUNCTIONS-ADMIN-GENFILE-TABLE \"Table 9.101. Generic File Access Functions\") and `pg_read_binary_file()` to ignore missing files (Kyotaro Horiguchi) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add byte specification (`B`) to [pg\\_size\\_bytes()](https://www.postgresql.org/docs/16/functions-admin.html#FUNCTIONS-ADMIN-DBSIZE \"Table 9.96. Database Object Size Functions\") (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [to\\_reg](https://www.postgresql.org/docs/16/functions-info.html#FUNCTIONS-INFO-CATALOG-TABLE \"Table 9.72. System Catalog Information Functions\")\\* functions to accept numeric OIDs as input (Tom Lane) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the ability to get the current function's OID in PL/pgSQL",
      "description": "This is accomplished with [GET DIAGNOSTICS variable = PG\\_ROUTINE\\_OID](https://www.postgresql.org/docs/16/plpgsql-statements.html#PLPGSQL-STATEMENTS-DIAGNOSTICS \"43.5.5. Obtaining the Result Status\").",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq connection option [require\\_auth](https://www.postgresql.org/docs/16/libpq-connect.html#LIBPQ-CONNECT-REQUIRE-AUTH) to specify a list of acceptable authentication methods",
      "description": "This can also be used to disallow certain authentication methods.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow multiple libpq\\-specified hosts to be randomly selected",
      "description": "This is enabled with [load\\_balance\\_hosts=random](https://www.postgresql.org/docs/16/libpq-connect.html#LIBPQ-CONNECT-LOAD-BALANCE-HOSTS) and can be used for load balancing.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq option [sslcertmode](https://www.postgresql.org/docs/16/libpq-connect.html#LIBPQ-CONNECT-SSLCERTMODE) to control transmission of the client certificate",
      "description": "The option values are `disable`, `allow`, and `require`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow libpq to use the system certificate pool for certificate verification",
      "description": "This is enabled with [sslrootcert=system](https://www.postgresql.org/docs/16/libpq-connect.html#LIBPQ-CONNECT-SSLROOTCERT), which also enables [sslmode=verify-full](https://www.postgresql.org/docs/16/libpq-connect.html#LIBPQ-CONNECT-SSLMODE).",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [ECPG](https://www.postgresql.org/docs/16/ecpg.html \"Chapter 36. ECPG — Embedded SQL in C\") variable declarations to use typedef names that match unreserved SQL keywords",
      "description": "This change does prevent keywords which match C typedef names from being processed as keywords in later `EXEC SQL` blocks.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql to control the maximum width of header lines in expanded format",
      "description": "This is controlled by [xheader\\_width](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-PSET-XHEADER-WIDTH).",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql's access privilege commands to show system objects",
      "description": "The options are [\\\\dpS](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-DP-LC) and [\\\\zS](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-Z).",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `FOREIGN` designation to psql [\\\\d+](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-D) for foreign table children and partitions (Ian Lawrence Barwick) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent [\\\\df+](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-DF-UC) from showing function source code",
      "description": "Function bodies are more easily viewed with [\\\\sf](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-SF).",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql to submit queries using the extended query protocol",
      "description": "Passing arguments to such queries is done using the new psql [\\\\bind](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-BIND) command.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql [\\\\watch](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-WATCH) to limit the number of executions",
      "description": "The `\\watch` options can now be named when specified.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect invalid values for psql [\\\\watch](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-WATCH), and allow zero to specify no delay (Andrey Borodin) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql scripts to obtain the exit status of shell commands and queries",
      "description": "The new psql control variables are [SHELL\\_ERROR](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-VARIABLES-SHELL-ERROR) and [SHELL\\_EXIT\\_CODE](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-VARIABLES-SHELL-EXIT-CODE).",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add LZ4 and Zstandard compression to pg\\_dump",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": [
        "Georgios Kokolatos",
        "Justin Pryzby"
      ]
    },
    {
      "title": "Allow pg\\_dump and [pg\\_basebackup](https://www.postgresql.org/docs/16/app-pgbasebackup.html \"pg_basebackup\") to use `long` mode for compression (Justin Pryzby) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [initdb](https://www.postgresql.org/docs/16/app-initdb.html \"initdb\") option to set server variables for the duration of initdb and all future server starts",
      "description": "The option is `-c name=value`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control of [vacuumdb](https://www.postgresql.org/docs/16/app-vacuumdb.html \"vacuumdb\") schema processing",
      "description": "These are controlled by options `--schema` and `--exclude-schema`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [pg\\_upgrade](https://www.postgresql.org/docs/16/pgupgrade.html \"pg_upgrade\") set the new cluster's locale and encoding",
      "description": "This removes the requirement that the new cluster be created with the same locale and encoding settings.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_upgrade](https://www.postgresql.org/docs/16/pgupgrade.html \"pg_upgrade\") option to specify the default transfer mode",
      "description": "The option is `--copy`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix [pg\\_basebackup](https://www.postgresql.org/docs/16/app-pgbasebackup.html \"pg_basebackup\") to handle tablespaces stored in the `PGDATA` directory (Robert Haas) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_waldump](https://www.postgresql.org/docs/16/pgwaldump.html \"pg_waldump\") option `--save-fullpage` to dump full page images (David Christensen) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_waldump](https://www.postgresql.org/docs/16/pgwaldump.html \"pg_waldump\") options `-t`/`--timeline` to accept hexadecimal values (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for progress reporting to [pg\\_verifybackup](https://www.postgresql.org/docs/16/app-pgverifybackup.html \"pg_verifybackup\") (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_rewind](https://www.postgresql.org/docs/16/app-pgrewind.html \"pg_rewind\") to properly track timeline changes",
      "description": "Previously if pg\\_rewind was run after a timeline switch but before a checkpoint was issued, it might incorrectly determine that a rewind was unnecessary.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [pg\\_receivewal](https://www.postgresql.org/docs/16/app-pgreceivewal.html \"pg_receivewal\") and [pg\\_recvlogical](https://www.postgresql.org/docs/16/app-pgrecvlogical.html \"pg_recvlogical\") cleanly exit on `SIGTERM`",
      "description": "This signal is often used by systemd.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Build ICU support by default",
      "description": "This removes [build flag](https://www.postgresql.org/docs/16/installation.html \"Chapter 17. Installation from Source Code\") `--with-icu` and adds flag `--without-icu`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for SSE2 (Streaming SIMD Extensions 2) vector operations on x86-64 architectures (John Naylor) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for Advanced SIMD (Single Instruction Multiple Data) (NEON) instructions on ARM architectures (Nathan Bossart) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have Windows binaries built with MSVC use `RandomizedBaseAddress` (ASLR)",
      "description": "This was already enabled on MinGW builds.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent extension libraries from exporting their symbols by default",
      "description": "Functions that need to be called from the core backend or other extensions must now be explicitly marked `PGDLLEXPORT`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require Windows 10 or newer versions",
      "description": "Previously Windows Vista and Windows XP were supported.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require Perl version 5.14 or later (John Naylor) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require Bison version 2.3 or later (John Naylor) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require Flex version 2.5.35 or later (John Naylor) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require MIT Kerberos for GSSAPI support (Stephen Frost) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for Visual Studio 2013 (Michael Paquier) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for HP-UX (Thomas Munro) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for HP/Intel Itanium (Thomas Munro) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for M68K, M88K, M32R, and SuperH CPU architectures (Thomas Munro) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove [libpq](https://www.postgresql.org/docs/16/libpq.html \"Chapter 34. libpq — C Library\") support for SCM credential authentication",
      "description": "Backend support for this authentication method was removed in PostgresSQL 9.1.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [meson](https://www.postgresql.org/docs/16/install-meson.html \"17.4. Building and Installation with Meson\") build system",
      "description": "This eventually will replace the Autoconf and Windows\\-based MSVC build systems.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow control of the location of the openssl binary used by the build system",
      "description": "Make finding openssl program a configure or meson option",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add build option to allow testing of small table segment sizes",
      "description": "The build options are [\\--with-segsize-blocks](https://www.postgresql.org/docs/16/install-make.html#CONFIGURE-OPTION-WITH-SEGSIZE) and `-Dsegsize_blocks`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_bsd\\_indent](https://www.postgresql.org/docs/16/source.html \"Chapter 56. PostgreSQL Coding Conventions\") source code to the main tree (Tom Lane) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust [pg\\_attribute](https://www.postgresql.org/docs/16/catalog-pg-attribute.html \"53.7. pg_attribute\") columns for efficiency (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for Daitch-Mokotoff Soundex to [fuzzystrmatch](https://www.postgresql.org/docs/16/fuzzystrmatch.html \"F.17. fuzzystrmatch — determine string similarities and distance\") (Dag Lem) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [auto\\_explain](https://www.postgresql.org/docs/16/auto-explain.html \"F.4. auto_explain — log execution plans of slow queries\") to log values passed to parameterized statements",
      "description": "This affects queries using server-side [PREPARE](https://www.postgresql.org/docs/16/sql-prepare.html \"PREPARE\")/[EXECUTE](https://www.postgresql.org/docs/16/sql-execute.html \"EXECUTE\") and client-side parse/bind. Logging is controlled by [auto\\_explain.log\\_parameter\\_max\\_length](https://www.postgresql.org/docs/16/auto-explain.html#AUTO-EXPLAIN-CONFIGURATION-PARAMETERS-LOG-PARAMETER-MAX-LENGTH); by default query parameters will be logged with no length restriction.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [auto\\_explain](https://www.postgresql.org/docs/16/auto-explain.html \"F.4. auto_explain — log execution plans of slow queries\")'s `log_verbose` mode honor the value of [compute\\_query\\_id](https://www.postgresql.org/docs/16/runtime-config-statistics.html#GUC-COMPUTE-QUERY-ID)",
      "description": "Previously even if `compute_query_id` was enabled, [log\\_verbose](https://www.postgresql.org/docs/16/auto-explain.html#AUTO-EXPLAIN-CONFIGURATION-PARAMETERS-LOG-VERBOSE) was not showing the query identifier.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change the maximum length of [ltree](https://www.postgresql.org/docs/16/ltree.html \"F.23. ltree — hierarchical tree-like data type\") labels from 256 to 1000 and allow hyphens (Garen Torikian) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [pg\\_stat\\_statements](https://www.postgresql.org/docs/16/pgstatstatements.html \"F.32. pg_stat_statements — track statistics of SQL planning and execution\") normalize constants used in utility commands",
      "description": "Previously constants appeared instead of placeholders, e.g., `$1`.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_walinspect](https://www.postgresql.org/docs/16/pgwalinspect.html \"F.37. pg_walinspect — low-level WAL inspection\") function [pg\\_get\\_wal\\_block\\_info()](https://www.postgresql.org/docs/16/pgwalinspect.html#PGWALINSPECT-FUNCS-PG-GET-WAL-BLOCK-INFO) to report WAL block information (Michael Paquier, Melanie Plageman, Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change how [pg\\_walinspect](https://www.postgresql.org/docs/16/pgwalinspect.html \"F.37. pg_walinspect — low-level WAL inspection\") functions [pg\\_get\\_wal\\_records\\_info()](https://www.postgresql.org/docs/16/pgwalinspect.html#PGWALINSPECT-FUNCS-PG-GET-WAL-RECORDS-INFO) and [pg\\_get\\_wal\\_stats()](https://www.postgresql.org/docs/16/pgwalinspect.html#PGWALINSPECT-FUNCS-PG-GET-WAL-STATS) interpret ending LSNs",
      "description": "Previously ending LSNs which represent nonexistent WAL locations would generate an error, while they will now be interpreted as the end of the WAL.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add detailed descriptions of WAL records in [pg\\_walinspect](https://www.postgresql.org/docs/16/pgwalinspect.html \"F.37. pg_walinspect — low-level WAL inspection\") and [pg\\_waldump](https://www.postgresql.org/docs/16/pgwaldump.html \"pg_waldump\") (Melanie Plageman, Peter Geoghegan) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pageinspect](https://www.postgresql.org/docs/16/pageinspect.html \"F.25. pageinspect — low-level inspection of database pages\") function [bt\\_multi\\_page\\_stats()](https://www.postgresql.org/docs/16/pageinspect.html#PAGEINSPECT-B-TREE-FUNCS \"F.25.3. B-Tree Functions\") to report statistics on multiple pages",
      "description": "This is similar to `bt_page_stats()` except it can report on a range of pages.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add empty range output column to [pageinspect](https://www.postgresql.org/docs/16/pageinspect.html \"F.25. pageinspect — low-level inspection of database pages\") function [brin\\_page\\_items()](https://www.postgresql.org/docs/16/pageinspect.html#PAGEINSPECT-BRIN-FUNCS \"F.25.4. BRIN Functions\") (Tomas Vondra) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Redesign archive modules to be more flexible",
      "description": "Initialization changes will require modules written for older versions of Postgres to be updated.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correct inaccurate [pg\\_stat\\_statements](https://www.postgresql.org/docs/16/pgstatstatements.html \"F.32. pg_stat_statements — track statistics of SQL planning and execution\") row tracking extended query protocol statements (Sami Imseih) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_buffercache](https://www.postgresql.org/docs/16/pgbuffercache.html \"F.27. pg_buffercache — inspect PostgreSQL buffer cache state\") function `pg_buffercache_usage_counts()` to report usage totals (Nathan Bossart) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_buffercache](https://www.postgresql.org/docs/16/pgbuffercache.html \"F.27. pg_buffercache — inspect PostgreSQL buffer cache state\") function `pg_buffercache_summary()` to report summarized buffer statistics (Melih Mutlu) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow required extensions to be marked as non-relocatable using [no\\_relocate](https://www.postgresql.org/docs/16/extend-extensions.html#EXTEND-EXTENSIONS-FILES-NO-RELOCATE)",
      "description": "This allows `@extschema:referenced_extension_name@` to be treated as a constant for the lifetime of the extension.",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow postgres\\_fdw to do aborts in parallel",
      "description": "This is enabled with postgres\\_fdw option [parallel\\_abort](https://www.postgresql.org/docs/16/postgres-fdw.html#POSTGRES-FDW-OPTIONS-TRANSACTION-MANAGEMENT \"F.38.1.6. Transaction Management Options\").",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Restrict shipment of [reg](https://www.postgresql.org/docs/16/datatype-oid.html \"8.19. Object Identifier Types\")\\* type constants in postgres\\_fdw to those referencing built-in objects or extensions marked as shippable (Tom Lane) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have postgres\\_fdw and [dblink](https://www.postgresql.org/docs/16/dblink.html \"F.12. dblink — connect to other PostgreSQL databases\") handle interrupts during connection establishment (Andres Freund) ",
      "description": "",
      "fixedIn": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misbehavior during recursive page split in GiST index build",
      "description": "Fix a case where the location of a page downlink was incorrectly tracked, and introduce some logic to allow recovering from such situations rather than silently doing the wrong thing. This error could result in incorrect answers from subsequent index searches. It may be advisable to reindex all GiST indexes after installing this update.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent de-duplication of btree index entries for `interval` columns",
      "description": "There are `interval` values that are distinguishable but compare equal, for example `24:00:00` and `1 day`. This breaks assumptions made by btree de-duplication, so `interval` columns need to be excluded from de-duplication. This oversight can cause incorrect results from index-only scans. Moreover, after updating amcheck will report an error for almost all such indexes. Users should reindex any btree indexes on `interval` columns.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Process `date` values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "The distance calculation for dates was backward, causing poor decisions about which entries to merge. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on `date` columns is advisable.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Process large `timestamp` and `timestamptz` values more sanely in BRIN `datetime_minmax_multi_ops` indexes",
      "description": "Infinities were mistakenly treated as having distance zero rather than a large distance from other values, causing poor decisions about which entries to merge. Also, finite-but-very-large values (near the endpoints of the representable timestamp range) could result in internal overflows, again causing poor decisions. The index still produces correct results, but is much less efficient than it should be. Reindexing BRIN `minmax_multi` indexes on `timestamp` and `timestamptz` columns is advisable if the column contains, or has contained, infinities or large finite values.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid calculation overflows in BRIN `interval_minmax_multi_ops` indexes with extreme interval values",
      "description": "This bug might have caused unexpected failures while trying to insert large interval values into such an index.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition step generation and runtime partition pruning for hash-partitioned tables with multiple partition keys",
      "description": "Some cases involving an `IS NULL` condition on one of the partition keys could result in a crash.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inconsistent rechecking of concurrently-updated rows during `MERGE`",
      "description": "In `READ COMMITTED` mode, an update that finds that its target row was just updated by a concurrent transaction will recheck the query's `WHERE` conditions on the updated row. `MERGE` failed to ensure that the proper rows of other joined tables were used during this recheck, possibly resulting in incorrect decisions about whether the newly-updated row should be updated again by `MERGE`.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly identify the target table in an inherited `UPDATE`/`DELETE`/`MERGE` even when the parent table is excluded by constraints",
      "description": "If the initially-named table is excluded by constraints, but not all its inheritance descendants are, the first non-excluded descendant was identified as the primary target table. This would lead to firing statement-level triggers associated with that table, rather than the initially-named table as should happen. In v16, the same oversight could also lead to “invalid perminfoindex 0 in RTE with relid NNNN” errors.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge case in btree mark/restore processing of ScalarArrayOpExpr clauses",
      "description": "When restoring an indexscan to a previously marked position, the code could miss required setup steps if the scan had advanced exactly to the end of the matches for a ScalarArrayOpExpr (that is, an `indexcol = ANY(ARRAY[])`) clause. This could result in missing some rows that should have been fetched.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intra-query memory leak in Memoize execution (Orlov Aleksej, David Rowley) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix intra-query memory leak when a set-returning function repeatedly returns zero rows (Tom Lane) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't crash if `cursor_to_xmlschema()` is applied to a non-data-returning Portal (Boyu Yang) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix improper sharing of origin filter condition across successive `pg_logical_slot_get_changes()` calls",
      "description": "The origin condition set by one call of this function would be re-used by later calls that did not specify the origin argument. This was not intended.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw the intended error if `pgrowlocks()` is applied to a partitioned table",
      "description": "Previously, a not-on-point complaint “only heap AM is supported” would be raised.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Handle invalid indexes more cleanly in assorted SQL functions",
      "description": "Report an error if `pgstatindex()`, `pgstatginindex()`, `pgstathashindex()`, or `pgstattuple()` is applied to an invalid index. If `brin_desummarize_range()`, `brin_summarize_new_values()`, `brin_summarize_range()`, or `gin_clean_pending_list()` is applied to an invalid index, do nothing except to report a debug-level message. Formerly these functions attempted to process the index, and might fail in strange ways depending on what the failed `CREATE INDEX` had left behind.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature memory allocation failure with long inputs to `to_tsvector()` (Tom Lane) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-allocation of the constructed `tsvector` in `tsvectorrecv()`",
      "description": "If the incoming vector includes position data, the binary receive function left wasted space (roughly equal to the size of the position data) in the finished `tsvector`. In extreme cases this could lead to “maximum total lexeme length exceeded” failures for vectors that were under the length limit when emitted. In any case it could lead to wasted space on-disk.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve checks for corrupt PGLZ compressed data (Flavien Guedez) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER SUBSCRIPTION` so that a commanded change in the `run_as_owner` option is actually applied (Hou Zhijie) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bulk table insertion into partitioned tables",
      "description": "Improper sharing of insertion state across partitions could result in failures during `COPY FROM`, typically manifesting as “could not read block NNNN in file XXXX: read only 0 of 8192 bytes” errors.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `COPY FROM`, avoid evaluating column default values that will not be needed by the command",
      "description": "This avoids a possible error if the default value isn't actually valid for the column, or if the default's expression would fail in the current execution context. Such edge cases sometimes arise while restoring dumps, for example. Previous releases did not fail in this situation, so prevent v16 from doing so.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `COPY FROM`, fail cleanly when an unsupported encoding conversion is needed",
      "description": "Recent refactoring accidentally removed the intended error check for this, such that it ended in “cache lookup failed for function 0” instead of a useful error message.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash in `EXPLAIN` if a parameter marked to be displayed by `EXPLAIN` has a NULL boot-time value",
      "description": "No built-in parameter fits this description, but an extension could define such a parameter.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure we have a snapshot while dropping `ON COMMIT DROP` temp tables",
      "description": "This prevents possible misbehavior if any catalog entries for the temp tables have fields wide enough to require toasting (such as a very complex `CHECK` condition).",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid improper response to shutdown signals in child processes just forked by `system()`",
      "description": "This fix avoids a race condition in which a child process that has been forked off by `system()`, but hasn't yet exec'd the intended child program, might receive and act on a signal intended for the parent server process. That would lead to duplicate cleanup actions being performed, which will not end well.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with torn reads of `pg_control` in frontend programs",
      "description": "On some file systems, reading `pg_control` may not be an atomic action when the server concurrently writes that file. This is detectable via a bad CRC. Retry a few times to see if the file becomes valid before we report error.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid torn reads of `pg_control` in relevant SQL functions",
      "description": "Acquire the appropriate lock before reading `pg_control`, to ensure we get a consistent view of that file.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “could not find pathkey item to sort” errors occurring while planning aggregate functions with `ORDER BY` or `DISTINCT` options (David Rowley) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid integer overflow when computing size of backend activity string array",
      "description": "On 64-bit machines we will allow values of `track_activity_query_size` large enough to cause 32-bit overflow when multiplied by the allowed number of connections. The code actually allocating the per-backend local array was careless about this though, and allocated the array incorrectly.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix briefly showing inconsistent progress statistics for `ANALYZE` on inherited tables",
      "description": "The block-level counters should be reset to zero at the same time we update the current-relation field.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix the background writer to report any WAL writes it makes to the statistics counters (Nazir Bilal Yavuz) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion about forced-flush behavior in `pgstat_report_wal()`",
      "description": "This could result in some statistics about WAL I/O being forgotten in a shutdown.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix statistics tracking of temporary-table extensions",
      "description": "These were counted as normal-table writes when they should be counted as temp-table writes.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When `track_io_timing` is enabled, include the time taken by relation extension operations as write time (Nazir Bilal Yavuz) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track the dependencies of cached `CALL` statements, and re-plan them when needed",
      "description": "DDL commands, such as replacement of a function that has been inlined into a `CALL` argument, can create the need to re-plan a `CALL` that has been cached by PL/pgSQL. That was not happening, leading to misbehavior or strange errors such as “cache lookup failed”.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid a possible pfree-a-NULL-pointer crash after an error in OpenSSL connection setup (Sergey Shinderuk) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track nesting depth correctly when inspecting `RECORD`\\-type Vars from outer query levels",
      "description": "This oversight could lead to assertion failures, core dumps, or “bogus varno” errors.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track hash function and negator function dependencies of ScalarArrayOpExpr plan nodes",
      "description": "In most cases this oversight was harmless, since these functions would be unlikely to disappear while the node's original operator remains present.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix error-handling bug in `RECORD` type cache management",
      "description": "An out-of-memory error occurring at just the wrong point could leave behind inconsistent state that would lead to an infinite loop.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Treat out-of-memory failures as fatal while reading WAL",
      "description": "Previously this would be treated as a bogus-data condition, leading to the conclusion that we'd reached the end of WAL, which is incorrect and could lead to inconsistent WAL replay.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible recovery failure due to trying to allocate memory based on a bogus WAL record length field (Thomas Munro, Michael Paquier) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “could not duplicate handle” error occurring on Windows when `min_dynamic_shared_memory` is set above zero (Thomas Munro) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix order of operations in `GenericXLogFinish`",
      "description": "This code violated the conditions required for crash safety by writing WAL before marking changed buffers dirty. No core code uses this function, but extensions do (`contrib/bloom` does, for example).",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove incorrect assertion in PL/Python exception handling (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump to dump the new `run_as_owner` option of subscriptions",
      "description": "Due to this oversight, subscriptions would always be restored with `run_as_owner` set to `false`, which is not equivalent to their behavior in pre-v16 releases.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_restore so that selective restores will include both table-level and column-level ACLs for selected tables",
      "description": "Formerly, only the table-level ACL would get restored if both types were present.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add logic to pg\\_upgrade to check for use of `abstime`, `reltime`, and `tinterval` data types",
      "description": "These obsolete data types were removed in PostgreSQL version 12, so check to make sure they aren't present in an older database before claiming it can be upgraded.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid false “too many client connections” errors in pgbench on Windows (Noah Misch) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix vacuumdb's handling of multiple `-N` switches",
      "description": "Multiple `-N` switches should exclude tables in multiple schemas, but in fact excluded nothing due to faulty construction of a generated query.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix vacuumdb to honor its `--buffer-usage-limit` option in analyze-only mode (Ryoga Yoshida, David Rowley) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, do not report interrupted page deletion as corruption",
      "description": "This fix prevents false-positive reports of “the first child of leftmost target page is not leftmost of its level”, “block NNNN is not leftmost” or “left link/right link pair in index XXXX not in agreement”. They appeared if amcheck ran after an unfinished btree index page deletion and before `VACUUM` had cleaned things up.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of `contrib/btree_gin` indexes on `interval` columns, when an indexscan using the `<` or `<=` operator is performed",
      "description": "Such an indexscan failed to return all the entries it should.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for LLVM 16 and 17 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress assorted build-time warnings on recent macOS",
      "description": "Xcode 15 (released with macOS Sonoma) changed the linker's behavior in a way that causes many duplicate-library warnings while building PostgreSQL. These were harmless, but they're annoying so avoid citing the same libraries twice. Also remove use of the `-multiply_defined suppress` linker switch, which apparently has been a no-op for a long time, and is now actively complained of.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When building `contrib/unaccent`'s rules file, fall back to using `python` if `--with-python` was not given and make variable `PYTHON` was not set (Japin Li) ",
      "description": "",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove `PHOT` (Phoenix Islands Time) from the default timezone abbreviations list",
      "description": "Presence of this abbreviation in the default list can cause failures on recent Debian and Ubuntu releases, as they no longer install the underlying tzdb entry by default. Since this is a made-up abbreviation for a zone with a total human population of about two dozen, it seems unlikely that anyone will miss it. If someone does, they can put it back via a custom abbreviations file.",
      "fixedIn": "16.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak when performing JIT inlining",
      "description": "There have been multiple reports of backend processes suffering out-of-memory conditions after sufficiently many JIT compilations. This fix should resolve that.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid generating incorrect partitioned-join plans",
      "description": "Some uncommon situations involving lateral references could create incorrect plans. Affected queries could produce wrong answers, or odd failures such as “variable not found in subplan target list”, or executor crashes.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect wrapping of subquery output expressions in PlaceHolderVars",
      "description": "This fixes incorrect results when a subquery is underneath an outer join and has an output column that laterally references something outside the outer join's scope. The output column might not appear as NULL when it should do so due to the action of the outer join.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix misprocessing of window function run conditions",
      "description": "This oversight could lead to “WindowFunc not found in subplan target lists” errors.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of inner-side uniqueness for Memoize plans",
      "description": "This mistake could lead to “cache entry already complete” errors.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix computation of nullingrels when constant-folding field selection",
      "description": "Failure to do this led to errors like “wrong varnullingrels (b) (expected (b 3)) for Var 2/2”.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Skip inappropriate actions when `MERGE` causes a cross-partition update",
      "description": "When executing a `MERGE UPDATE` action on a partitioned table, if the `UPDATE` is turned into a `DELETE` and `INSERT` due to changing a partition key column, skip firing `AFTER UPDATE ROW` triggers, as well as other post-update actions such as RLS checks. These actions would typically fail, which is why a regular `UPDATE` doesn't do them in such cases; `MERGE` shouldn't either.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with `BEFORE ROW DELETE` triggers in cross-partition `MERGE` updates",
      "description": "If such a trigger attempted to prevent the update by returning NULL, `MERGE` would suffer an error or assertion failure.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent access to a no-longer-pinned buffer in `BEFORE ROW UPDATE` triggers",
      "description": "If the tuple being updated had just been updated and moved to another page by another session, there was a narrow window where we would attempt to fetch data from the new tuple version without any pin on its buffer. In principle this could result in garbage data appearing in non-updated columns of the proposed new tuple. The odds of problems in practice seem rather low, however.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid requesting an oversize shared-memory area in parallel hash join",
      "description": "The limiting value was too large, allowing “invalid DSA memory alloc request size” errors to occur with sufficiently large expected hash table sizes.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix corruption of local buffer state when an error occurs while trying to extend a temporary table (Tender Wang) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix use of wrong tuple slot while evaluating `DISTINCT` aggregates that have multiple arguments",
      "description": "This mistake could lead to errors such as “attribute 1 of type record has wrong type”.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failures in `heap_update()` and `heap_delete()` when a tuple to be updated by a foreign-key enforcement trigger fails the extra visibility crosscheck",
      "description": "This error had no impact in non-assert builds.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix overly tight assertion about `false_positive_rate` parameter of BRIN bloom operator classes",
      "description": "This error had no impact in non-assert builds, either.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible failure during `ALTER TABLE ADD COLUMN` on a complex inheritance tree",
      "description": "If a grandchild table would inherit the new column via multiple intermediate parents, the command failed with “tuple already updated by self”.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix problems with duplicate token names in `ALTER TEXT SEARCH CONFIGURATION ... MAPPING` commands (Tender Wang, Michael Paquier) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `DROP ROLE` with duplicate role names",
      "description": "Previously this led to a “tuple already updated by self” failure. Instead, ignore the duplicate.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly lock the associated table during `DROP STATISTICS`",
      "description": "Failure to acquire the lock could result in “tuple concurrently deleted” errors if the `DROP` executes concurrently with `ANALYZE`.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix function volatility checking for `GENERATED` and `DEFAULT` expressions",
      "description": "These places could fail to detect insertion of a volatile function default-argument expression, or decide that a polymorphic function is volatile although it is actually immutable on the datatype of interest. This could lead to improperly rejecting or accepting a `GENERATED` clause, or to mistakenly applying the constant-default-value optimization in `ALTER TABLE ADD COLUMN`.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect that a new catalog cache entry became stale while detoasting its fields",
      "description": "We expand any out-of-line fields in a catalog tuple before inserting it into the catalog caches. That involves database access which might cause invalidation of catalog cache entries — but the new entry isn't in the cache yet, so we would miss noticing that it should get invalidated. The result is a race condition in which an already-stale cache entry could get made, and then persist indefinitely. This would lead to hard-to-predict misbehavior. Fix by rechecking the tuple's visibility after detoasting.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge-case integer overflow detection bug on some platforms",
      "description": "Computing `0 - INT64_MIN` should result in an overflow error, and did on most platforms. However, platforms with neither integer overflow builtins nor 128-bit integers would fail to spot the overflow, instead returning `INT64_MIN`.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect Julian-date overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add more checks for overflow in `interval_mul()` and `interval_div()`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `scram_SaltedPassword()` to be interrupted",
      "description": "With large `scram_iterations` values, this function could take a long time to run. Allow it to be interrupted by query cancel requests.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure cached statistics are discarded after a change to `stats_fetch_consistency`",
      "description": "In some code paths, it was possible for stale statistics to be returned.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make the `pg_file_settings` view check validity of unapplied values for settings with `backend` or `superuser-backend` context",
      "description": "Invalid values were not noted in the view as intended. This escaped detection because there are very few settings in these groups.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Match collation too when matching an existing index to a new partitioned index",
      "description": "Previously we could accept an index that has a different collation from the corresponding element of the partition key, possibly leading to misbehavior.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure if a child index is dropped concurrently with `REINDEX INDEX` on a partitioned index (Fei Changhong) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix insufficient locking when cleaning up an incomplete split of a GIN index's internal page",
      "description": "The code tried to do this with shared rather than exclusive lock on the buffer. This could lead to index corruption if two processes attempted the cleanup concurrently.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid premature release of buffer pin in GIN index insertion",
      "description": "If an index root page split occurs concurrently with our own insertion, the code could fail with “buffer NNNN is not owned by resource owner”.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid failure with partitioned SP-GiST indexes",
      "description": "Trying to use an index of this kind could lead to “No such file or directory” errors.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ownership tests for large objects",
      "description": "Operations on large objects that require ownership privilege failed with “unrecognized class ID: 2613”, unless run by a superuser.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ownership change reporting for large objects",
      "description": "A no-op `ALTER LARGE OBJECT OWNER` command (that is, one selecting the existing owner) passed the wrong class ID to the `PostAlterHook`, probably confusing any extension using that hook.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix reporting of I/O timing data in `EXPLAIN (BUFFERS)`",
      "description": "The numbers labeled as “shared/local” actually refer only to shared buffers, so change that label to “shared”.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure durability of `CREATE DATABASE`",
      "description": "If an operating system crash occurred during or shortly after `CREATE DATABASE`, recovery could fail, or subsequent connections to the new database could fail. If a base backup was taken in that window, similar problems could be observed when trying to use the backup. The symptom would be that the database directory, `PG_VERSION` file, or `pg_filenode.map` file was missing or empty.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add more `LOG` messages when starting and ending recovery from a backup",
      "description": "This change provides additional information in the postmaster log that may be useful for diagnosing recovery problems.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent standby servers from incorrectly processing dead index tuples during subtransactions",
      "description": "The `startedInRecovery` flag was not correctly set for a subtransaction. This affects only processing of dead index tuples. It could allow a query in a subtransaction to ignore index entries that it should return (if they are already dead on the primary server, but not dead to the standby transaction), or to prematurely mark index entries as dead that are not yet dead on the primary. It is not clear that the latter case has any serious consequences, but it's not the intended behavior.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix signal handling in walreceiver processes",
      "description": "Revert a change that made walreceivers non-responsive to SIGTERM while waiting for the replication connection to be established.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix integer overflow hazard in checking whether a record will fit into the WAL decoding buffer",
      "description": "This bug appears to be only latent except when running a 32-bit PostgreSQL build on a 64-bit platform.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix deadlock between a logical replication apply worker, its tablesync worker, and a session process trying to alter the subscription",
      "description": "One edge of the deadlock loop did not involve a lock wait, so the deadlock went undetected and would persist until manual intervention.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that column default values are correctly transmitted by the pgoutput logical replication plugin",
      "description": "`ALTER TABLE ADD COLUMN` with a constant default value for the new column avoids rewriting existing tuples, instead expecting that reading code will insert the correct default into a tuple that lacks that column. If replication was subsequently initiated on the table, pgoutput would transmit NULL instead of the correct default for such a column, causing incorrect replication on the subscriber.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure of logical replication's initial sync for a table with no columns",
      "description": "This case generated an improperly-formatted `COPY` command.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-validate a subscription's connection string before use",
      "description": "This is meant to detect cases where a subscription was created without a password (which is allowed to superusers) but then the subscription owner is changed to a non-superuser.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Return the correct status code when a new client disconnects without responding to the server's password challenge",
      "description": "In some cases we'd treat this as a loggable error, which was not the intention and tends to create log spam, since common clients like psql frequently do this. It may also confuse extensions that use `ClientAuthentication_hook`.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with OpenSSL 3.2",
      "description": "Use the BIO “app\\_data” field for our private storage, instead of assuming it's okay to use the “data” field. This mistake didn't cause problems before, but with 3.2 it leads to crashes and complaints about double frees.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more wary about OpenSSL not setting `errno` on error",
      "description": "If `errno` isn't set, assume the cause of the reported failure is read EOF. This fixes rare cases of strange error reports like “could not accept SSL connection: Success”.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix file descriptor leakage when a foreign data wrapper's `ForeignAsyncRequest` function fails (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix minor memory leak in connection string validation for `CREATE SUBSCRIPTION` (Jeff Davis) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report ENOMEM errors from file-related system calls as `ERRCODE_OUT_OF_MEMORY`, not `ERRCODE_INTERNAL_ERROR` (Alexander Kuzmenkov) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In PL/pgSQL, support SQL commands that are `CREATE FUNCTION`/`CREATE PROCEDURE` with SQL-standard bodies",
      "description": "Previously, such cases failed with parsing errors due to the semicolon(s) appearing in the function body.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix libpq's handling of errors in pipelines",
      "description": "The pipeline state could get out of sync if an error is returned for reasons other than a query problem (for example, if the connection is lost). Potentially this would lead to a busy-loop in the calling application.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make libpq's `PQsendFlushRequest()` function flush the client output buffer under the same rules as other `PQsend` functions",
      "description": "In pipeline mode, it may still be necessary to call `PQflush()` as well; but this change removes some inconsistency.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition when libpq initializes OpenSSL support concurrently in two different threads (Willi Mann, Michael Paquier) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix timing-dependent failure in GSSAPI data transmission",
      "description": "When using GSSAPI encryption in non-blocking mode, libpq sometimes failed with “GSSAPI caller failed to retransmit all data needing to be retried”.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change initdb to always un-comment the `postgresql.conf` entries for the `` lc_ _`xxx`_ `` parameters",
      "description": "initdb used to work this way before v16, and now it does again. The change caused initdb's `--no-locale` option to not have the intended effect on `lc_messages`.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump RLS policies or security labels for extension member objects",
      "description": "Previously, commands would be included in the dump to set these properties, which is really incorrect since they should be considered as internal affairs of the extension. Moreover, the restoring user might not have adequate privilege to set them, and indeed the dumping user might not have enough privilege to dump them (since dumping RLS policies requires acquiring lock on their table).",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_dump, don't dump an extended statistics object if its underlying table isn't being dumped",
      "description": "This conforms to the behavior for other dependent objects such as indexes.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Properly detect out-of-memory in one code path in pg\\_dump (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make it an error for a pgbench script to end with an open pipeline",
      "description": "Previously, pgbench would behave oddly if a `\\startpipeline` command lacked a matching `\\endpipeline`. This seems like a scripting mistake rather than a case that pgbench needs to handle nicely, so throw an error.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in `contrib/intarray` if an array with an element equal to `INT_MAX` is inserted into a `gist__int_ops` index (Alexander Lakhin, Tom Lane) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pageinspect`'s `hash_bitmap_info()` function is applied to a partitioned hash index (Alexander Lakhin, Michael Paquier) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report a better error when `contrib/pgstattuple`'s `pgstathashindex()` function is applied to a partitioned hash index (Alexander Lakhin) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "On Windows, suppress autorun options when launching subprocesses in pg\\_ctl and pg\\_regress",
      "description": "When launching a child process via `cmd.exe`, pass the `/D` flag to prevent executing any autorun commands specified in the registry. This avoids possibly-surprising side effects.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Move `is_valid_ascii()` from `mb/pg_wchar.h` to `utils/ascii.h`",
      "description": "This change avoids the need to include `<simd.h>` in `pg_wchar.h`, which was causing problems for some third-party code.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compilation failures with libxml2 version 2.12.0 and later (Tom Lane) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix compilation failure of `WAL_DEBUG` code on Windows (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Suppress compiler warnings from Python's header files",
      "description": "Our preferred compiler options provoke warnings about constructs appearing in recent versions of Python's header files. When using gcc, we can suppress these warnings with a pragma.",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deprecation warning when compiling with LLVM 18 (Thomas Munro) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024a for DST law changes in Greenland, Kazakhstan, and Palestine, plus corrections for the Antarctic stations Casey and Vostok. Also historical corrections for Vietnam, Toronto, and Miquelon. (Tom Lane) ",
      "description": "",
      "fixedIn": "16.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `INSERT` from multiple `VALUES` rows into a target column that is a domain over an array or composite type",
      "description": "Such cases would either fail with surprising complaints about mismatched datatypes, or insert unexpected coercions that could lead to odd results.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require `SELECT` privilege on the target table for `MERGE` with a `DO NOTHING` clause",
      "description": "`SELECT` privilege would be required in all practical cases anyway, but require it even if the query reads no columns of the target table. This avoids an edge case in which `MERGE` would require no privileges whatever, which seems undesirable even when it's a do-nothing command.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of self-modified tuples in `MERGE`",
      "description": "Throw an error if a target row joins to more than one source row, as required by the SQL standard. (The previous coding could silently ignore this condition if a concurrent update was involved.) Also, throw a non-misleading error if a target row is already updated by a later command in the current transaction, thanks to a `BEFORE` trigger or a volatile function used in the query.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect pruning of NULL partition when a table is partitioned on a boolean column and the query has a boolean `IS NOT` clause",
      "description": "A NULL value satisfies a clause such as `` _`boolcol`_ IS NOT FALSE ``, so pruning away a partition containing NULLs yielded incorrect answers.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `ALTER FOREIGN TABLE SET SCHEMA` move any owned sequences into the new schema",
      "description": "Moving a regular table to a new schema causes any sequences owned by the table to be moved to that schema too (along with indexes and constraints). This was overlooked for foreign tables, however.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `ALTER TABLE ... ADD COLUMN` create identity/serial sequences with the same persistence as their owning tables",
      "description": "`CREATE UNLOGGED TABLE` will make any owned sequences be unlogged too. `ALTER TABLE` missed that consideration, so that an added identity column would have a logged sequence, which seems pointless.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve `ALTER TABLE ... ALTER COLUMN TYPE`'s error message when there is a dependent function or publication (Tom Lane) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `CREATE DATABASE`, recognize strategy keywords case-insensitively for consistency with other options (Tomas Vondra) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s counting of heap pages accessed by a bitmap heap scan",
      "description": "Previously, heap pages that contain no visible tuples were not counted; but it seems more consistent to count all pages returned by the bitmap index scan.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `EXPLAIN`'s output for subplans in `MERGE`",
      "description": "`EXPLAIN` would sometimes fail to properly display subplan Params referencing variables in other parts of the plan tree.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deadlock during removal of orphaned temporary tables",
      "description": "If the session that creates a temporary table crashes without removing the table, autovacuum will eventually try to remove the orphaned table. However, an incoming session that's been assigned the same temporary namespace will do that too. If a temporary table has a dependency (such as an owned sequence) then a deadlock could result between these two cleanup attempts.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix updating of visibility map state in `VACUUM` with the `DISABLE_PAGE_SKIPPING` option",
      "description": "Due to an oversight, this mode caused all heap pages to be dirtied, resulting in excess I/O. Also, visibility map bits that were incorrectly set would not get cleared.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition while examining per-relation frozen-XID values",
      "description": "`VACUUM`'s computation of per-database frozen-XID values from per-relation values could get confused by a concurrent update of those values by another `VACUUM`.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix buffer usage reporting for parallel vacuuming",
      "description": "Buffer accesses performed by parallel workers were not getting counted in the statistics reported in `VERBOSE` mode.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that join conditions generated from equivalence classes are applied at the correct plan level",
      "description": "In versions before PostgreSQL 16, it was possible for generated conditions to be evaluated below outer joins when they should be evaluated above (after) the outer join, leading to incorrect query results. All versions have a similar hazard when considering joins to `UNION ALL` trees that have constant outputs for the join column in some `SELECT` arms.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “could not find pathkey item to sort” errors occurring while planning aggregate functions with `ORDER BY` or `DISTINCT` options",
      "description": "This is similar to a fix applied in 16.1, but it solves the problem for parallel plans.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent potentially-incorrect optimization of some window functions",
      "description": "Disable “run condition” optimization of `ntile()` and `count()` with non-constant arguments. This avoids possible misbehavior with sub-selects, typically leading to errors like “WindowFunc not found in subplan target lists”.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid unnecessary use of moving-aggregate mode with a non-moving window frame",
      "description": "When a plain aggregate is used as a window function, and the window frame start is specified as `UNBOUNDED PRECEDING`, the frame's head cannot move so we do not need to use the special (and more expensive) moving-aggregate mode. This optimization was intended all along, but due to a coding error it never triggered.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid use of already-freed data while planning partition-wise joins under GEQO",
      "description": "This would typically end in a crash or unexpected error message.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid freeing still-in-use data in Memoize",
      "description": "In production builds this error frequently didn't cause any problems, as the freed data would most likely not get overwritten before it was used.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrectly-reported statistics kind codes in “requested statistics kind _`X`_ is not yet built” error messages (David Rowley) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use a hash table instead of linear search for “catcache list” objects",
      "description": "This change solves performance problems that were reported for certain operations in installations with many thousands of roles.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Be more careful with `RECORD`\\-returning functions in `FROM`",
      "description": "The output columns of such a function call must be defined by an `AS` clause that specifies the column names and data types. If the actual function output value doesn't match that, an error is supposed to be thrown at runtime. However, some code paths would examine the actual value prematurely, and potentially issue strange errors or suffer assertion failures if it doesn't match expectations.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix confusion about the return rowtype of SQL-language procedures",
      "description": "A procedure implemented in SQL language that returns a single composite-type column would cause an assertion failure or core dump.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add protective stack depth checks to some recursive functions (Egor Chindyaskin) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-rounding and overflow hazards in `date_bin()`",
      "description": "In the case where the source timestamp is before the origin timestamp and their difference is already an exact multiple of the stride, the code incorrectly subtracted the stride anyway. Also, detect some integer-overflow cases that would have produced incorrect results.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow when adding or subtracting an `interval` to/from a `timestamp`",
      "description": "Some cases that should cause an out-of-range error produced an incorrect result instead.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid race condition in `pg_get_expr()`",
      "description": "If the relation referenced by the argument is dropped concurrently, the function's intention is to return NULL, but sometimes it failed instead.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of old transaction IDs in XID status functions",
      "description": "Transaction IDs more than 231 transactions in the past could be misidentified as recent, leading to misbehavior of `pg_xact_status()` or `txid_status()`.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that a table's freespace map won't return a page that's past the end of the table",
      "description": "Because the freespace map isn't WAL-logged, this was possible in edge cases involving an OS crash, a replica promote, or a PITR restore. The result would be a “could not read block” error.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix file descriptor leakage when an error is thrown while waiting in `WaitEventSetWait` (Etsuro Fujita) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid corrupting exception stack if an FDW implements async append but doesn't configure any wait conditions for the Append plan node to wait for (Alexander Pyhalov) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Throw an error if an index is accessed while it is being reindexed",
      "description": "Previously this was just an assertion check, but promote it into a regular runtime error. This will provide a more on-point error message when reindexing a user-defined index expression that attempts to access its own table.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that index-only scans on `name` columns return a fully-padded value",
      "description": "The value physically stored in the index is truncated, and previously a pointer to that value was returned to callers. This provoked complaints when testing under valgrind. In theory it could result in crashes, though none have been reported.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition that could lead to reporting an incorrect conflict cause when invalidating a replication slot (Bertrand Drouvot) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in deciding whether a table sync operation is needed in logical replication",
      "description": "An invalidation event arriving while a subscriber identifies which tables need to be synced would be forgotten about, so that any tables newly in need of syncing might not get processed in a timely fashion.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash with DSM allocations larger than 4GB (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disconnect if a new server session's client socket cannot be put into non-blocking mode",
      "description": "It was once theoretically possible for us to operate with a socket that's in blocking mode; but that hasn't worked fully in a long time, so fail at connection start rather than misbehave later.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix inadequate error reporting with OpenSSL 3.0.0 and later",
      "description": "System-reported errors passed through by OpenSSL were reported with a numeric error code rather than anything readable.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix thread-safety of error reporting for `getaddrinfo()` on Windows",
      "description": "A multi-threaded libpq client program could get an incorrect or corrupted error message after a network lookup failure.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid concurrent calls to `bindtextdomain()` in libpq and ecpglib",
      "description": "Although GNU gettext's implementation seems to be fine with concurrent calls, the version available on Windows is not.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash in ecpg's preprocessor if the program tries to redefine a macro that was defined on the preprocessor command line (Tom Lane) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpg, avoid issuing false “unsupported feature will be passed to server” warnings (Tom Lane) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that the string result of ecpg's `intoasc()` function is correctly zero-terminated (Oleg Tselebrovskiy) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In initdb's `-c` option, match parameter names case-insensitively",
      "description": "The server treats parameter names case-insensitively, so this code should too. This avoids putting redundant entries into the generated `postgresql.conf` file.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In psql, avoid leaking a query result after the query is cancelled",
      "description": "This happened only when cancelling a non-last query in a query string made with `\\;` separators.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dumpall so that role comments, if present, will be dumped regardless of the setting of `--no-role-passwords` (Daniel Gustafsson, Álvaro Herrera) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Skip files named `.DS_Store` in pg\\_basebackup, pg\\_checksums, and pg\\_rewind",
      "description": "This avoids problems on macOS, where the Finder may create such files.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/pgSQL's parsing of single-line comments (`--`\\-style comments) following expressions",
      "description": "This mistake caused parse errors if such a comment followed a `WHEN` expression in a PL/pgSQL `CASE` statement.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/amcheck`, don't report false match failures due to short- versus long-header values",
      "description": "A variable-length datum in a heap tuple or index tuple could have either a short or a long header, depending on compression parameters that applied when it was made. Treat these cases as equivalent rather than complaining if there's a difference.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix bugs in BRIN output functions",
      "description": "These output functions are only used for displaying index entries in `contrib/pageinspect`, so the errors are of limited practical concern.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, avoid emitting requests to sort by a constant",
      "description": "This could occur in cases involving `UNION ALL` with constant-emitting subqueries. Sorting by a constant is useless of course, but it also risks being misinterpreted by the remote server, leading to “ORDER BY position _`N`_ is not in select list” errors.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make `contrib/postgres_fdw` set the remote session's time zone to `GMT` not `UTC`",
      "description": "This should have the same results for practical purposes. However, `GMT` is recognized by hard-wired code in the server, while `UTC` is looked up in the timezone database. So the old code could fail in the unlikely event that the remote server's timezone database is missing entries.",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/xml2`, avoid use of library functions that have been deprecated in recent versions of libxml2 (Dmitry Koval) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incompatibility with LLVM 18 (Thomas Munro, Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `make check` to work with the musl C library (Thomas Munro, Bruce Momjian, Tom Lane) ",
      "description": "",
      "fixedIn": "16.3",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid incorrect results from Merge Right Anti Join plans",
      "description": "If the inner relation is known to have unique join keys, the merge could misbehave when there are duplicated join keys in the outer relation.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent infinite loop in `VACUUM`",
      "description": "After a disconnected standby server with an old running transaction reconnected to the primary, it was possible for `VACUUM` on the primary to get confused about which tuples are removable, resulting in an infinite loop.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure after attaching a table as a partition, if the table had previously had inheritance children (Álvaro Herrera) ",
      "description": "",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `ALTER TABLE DETACH PARTITION` for cases involving inconsistent index-based constraints",
      "description": "When a partitioned table has an index that is not associated with a constraint, but a partition has an equivalent index that is, then detaching the partition would misbehave, leaving the ex-partition's constraint with an incorrect `coninhcount` value. This would cause trouble during any further manipulations of that constraint.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix partition pruning setup during `ALTER TABLE DETACH PARTITION CONCURRENTLY`",
      "description": "The executor assumed that no partition could be detached between planning and execution of a query on a partitioned table. This is no longer true since the introduction of `DETACH PARTITION`'s `CONCURRENTLY` option, making it possible for query execution to fail transiently when that is used.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly update a partitioned table's `pg_class`.`reltuples` field to zero after its last child partition is dropped",
      "description": "The first `ANALYZE` on such a partitioned table must update `relhassubclass` as well, and that caused the `reltuples` update to be lost.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of polymorphic output arguments for procedures",
      "description": "The SQL `CALL` statement did not resolve the correct data types for such arguments, leading to errors such as “cannot display a value of type anyelement”, or even outright crashes. (But `CALL` in PL/pgSQL worked correctly.)",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": [
        "But `CALL` in PL/pgSQL worked correctly."
      ]
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list",
      "description": "If the `CALL` is within an atomic context (e.g. there's an outer transaction block), such functions were passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix input of ISO-8601 “extended” time format for types `time` and `timetz`",
      "description": "Re-allow cases such as `T12:34:56`.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect integer overflow in `money` calculations",
      "description": "None of the arithmetic functions for the `money` type checked for overflow before, so they would silently give wrong answers for overflowing cases.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix over-aggressive clamping of the scale argument in `round(numeric)` and `trunc(numeric)`",
      "description": "These functions clamped their scale argument to +/-2000, but there are valid use-cases for it to be larger; the functions returned incorrect results in such cases. Instead clamp to the actual allowed range of type `numeric`.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix result for `pg_size_pretty()` when applied to the smallest possible `bigint` value (Joseph Koshakow) ",
      "description": "",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent `pg_sequence_last_value()` from failing on unlogged sequences on standby servers and on temporary sequences of other sessions",
      "description": "Make it return NULL in these cases instead of throwing an error.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix parsing of ignored operators in `websearch_to_tsquery()`",
      "description": "Per the manual, punctuation in the input of `websearch_to_tsquery()` is ignored except for the special cases of dashes and quotes. However, parentheses and a few other characters appearing immediately before an `or` could cause `or` to be treated as a data word, rather than as an `OR` operator as expected.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix unportable usage of `strnxfrm()`",
      "description": "Some code paths for non-deterministic collations could fail with errors like “pg\\_strnxfrm() returned unexpected result”.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Detect another case of a new catalog cache entry becoming stale while detoasting its fields",
      "description": "An in-place update occurring while we expand out-of-line fields in a catalog tuple could be missed, leading to a catalog cache entry that lacks the in-place change but is not known to be stale. This is only possible in the `pg_database` catalog, so the effects are narrow, but misbehavior is possible.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Correctly check updatability of view columns targeted by `INSERT` ... `DEFAULT`",
      "description": "If such a column is non-updatable, we should give an error reporting that. But the check was missed and then later code would report an unhelpful error such as “attribute number _`N`_ not found in view targetlist”.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid reporting an unhelpful internal error for incorrect recursive queries",
      "description": "Rearrange the order of error checks so that we throw an on-point error when a `WITH RECURSIVE` query does not have a self-reference within the second arm of the `UNION`, but does have one self-reference in some other place such as `ORDER BY`.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Lock owned sequences during `ALTER TABLE SET LOGGED|UNLOGGED`",
      "description": "These commands change the persistence of a table's owned sequences along with the table, but they failed to acquire lock on the sequences while doing so. This could result in losing the effects of concurrent `nextval()` calls.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't throw an error if a queued `AFTER` trigger no longer exists",
      "description": "It's possible for a transaction to execute an operation that queues a deferred `AFTER` trigger for later execution, and then to drop the trigger before that happens. Formerly this led to weird errors such as “could not find trigger _`NNNN`_”. It seems better to silently do nothing if the trigger no longer exists at the time when it would have been executed.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to remove `pg_init_privs` entries for column-level privileges when their table is dropped",
      "description": "If an extension grants some column-level privileges on a table it creates, relevant catalog entries would remain behind after the extension is dropped. This was harmless until/unless the table's OID was re-used for another relation, when it could interfere with what pg\\_dump dumps for that relation.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix selection of an arbiter index for `ON CONFLICT` when the desired index has expressions or predicates",
      "description": "If a query using `ON CONFLICT` accesses the target table through an updatable view, it could fail with “there is no unique or exclusion constraint matching the ON CONFLICT specification”, even though a matching index does exist.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Refuse to modify a temporary table of another session with `ALTER TABLE`",
      "description": "Permissions checks normally would prevent this case from arising, but it is possible to reach it by altering a parent table whose child is another session's temporary table. Throw an error if we discover that such a child table belongs to another session.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of extended statistics on expressions in `CREATE TABLE LIKE STATISTICS`",
      "description": "The `CREATE` command failed to adjust column references in statistics expressions to the possibly-different column numbering of the new table. This resulted in invalid statistics objects that would cause problems later. A typical scenario where renumbering columns is needed is when the source table contains some dropped columns.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to recalculate sub-queries generated from `MIN()` or `MAX()` aggregates",
      "description": "In some cases the aggregate result computed at one row of the outer query could be re-used for later rows when it should not be. This has only been seen to happen when the outer query uses `DISTINCT` that is implemented with hash aggregation, but other cases may exist.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-forbid underscore in positional parameters",
      "description": "As of v16 we allow integer literals to contain underscores. This change caused input such as `$1_234` to be taken as a single token, but it did not work correctly. It seems better to revert to the original definition in which a parameter symbol is only `$` followed by digits.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crashing when a JIT-inlined backend function throws an error",
      "description": "The error state can include pointers into the dynamically loaded module holding the JIT-compiled code (for error location strings). In some code paths the module could get unloaded before the error report is processed, leading to SIGSEGV when the location strings are accessed.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cope with behavioral changes in libxml2 version 2.13.x",
      "description": "Notably, we now suppress “chunk is not well balanced” errors from libxml2, unless that is the only reported error. This is to make error reports consistent between 2.13.x and earlier libxml2 versions. In earlier versions, that message was almost always redundant or outright incorrect, so 2.13.x substantially reduced the number of cases in which it's reported.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix handling of subtransactions of prepared transactions when starting a hot standby server",
      "description": "When starting a standby's replay at a shutdown checkpoint WAL record, transactions that had been prepared but not yet committed on the primary are correctly understood as being still in progress. But subtransactions of a prepared transaction (created by savepoints or PL/pgSQL exception blocks) were not accounted for and would be treated as aborted. That led to inconsistency if the prepared transaction was later committed.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent incorrect initialization of logical replication slots",
      "description": "In some cases a replication slot's start point within the WAL stream could be set to a point within a transaction, leading to assertion failures or incorrect decoding results.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “can only drop stats once” error during replication slot creation and drop (Floris Van Nee) ",
      "description": "",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix resource leakage in logical replication WAL sender",
      "description": "The walsender process leaked memory when publishing changes to a partitioned table whose partitions have row types physically different from the partitioned table's.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leakage after servicing a notify or sinval interrupt",
      "description": "The processing functions for these events could switch the current memory context to TopMemoryContext, resulting in session-lifespan leakage of any data allocated before the incorrect setting gets replaced. There were observable leaks associated with (at least) encoding conversion of incoming queries and parameters attached to Bind messages.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent leakage of reference counts for the shared memory block used for statistics",
      "description": "A new backend process attaching to the statistics shared memory incremented its reference count, but failed to decrement the count when exiting. After 232 sessions had been created, the reference count would overflow to zero, causing failures in all subsequent backend process starts.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent deadlocks and assertion failures during truncation of the multixact SLRU log",
      "description": "A process trying to delete SLRU segments could deadlock with the checkpointer process.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possibly missing end-of-input events on Windows sockets",
      "description": "Windows reports an FD\\_CLOSE event only once after the remote end of the connection disconnects. With unlucky timing, we could miss that report and wait indefinitely, or at least until a timeout elapsed, expecting more input.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix buffer overread in JSON parse error reports for incomplete byte sequences",
      "description": "It was possible to walk off the end of the input buffer by a few bytes when the last bytes comprise an incomplete multi-byte character. While usually harmless, in principle this could cause a crash.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disable creation of stateful TLS session tickets by OpenSSL",
      "description": "This avoids possible failures with clients that think receipt of a session ticket means that TLS session resumption is supported.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "When replanning a PL/pgSQL “simple expression”, check it's still simple",
      "description": "Certain fairly-artificial cases, such as dropping a referenced function and recreating it as an aggregate, could lead to surprising failures such as “unexpected plan node type”.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/pgSQL's handling of integer ranges containing underscores",
      "description": "As of v16 we allow integer literals to contain underscores, but PL/pgSQL failed to handle examples such as `FOR i IN 1_001..1_003`.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix recursive `RECORD`\\-returning PL/Python functions",
      "description": "If we recurse to a new call of the same function that passes a different column definition list (`AS` clause), it would fail because the inner call would overwrite the outer call's idea of what rowtype to return.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't corrupt PL/Python's `TD` dictionary during a recursive trigger call",
      "description": "If a PL/Python\\-language trigger caused another one to be invoked, the `TD` dictionary created for the inner one would overwrite the outer one's `TD` dictionary.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix PL/Tcl's reporting of invalid list syntax in the result of a function returning tuple",
      "description": "Such a case could result in a crash, or in emission of misleading context information that actually refers to the previous Tcl error.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid non-thread-safe usage of `strerror()` in libpq",
      "description": "Certain error messages returned by OpenSSL could become garbled in multi-threaded applications.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid memory leak within pg\\_dump during a binary upgrade (Daniel Gustafsson) ",
      "description": "",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ensure that `pg_restore` `-l` reports dependent TOC entries correctly",
      "description": "If `-l` was specified together with selective-restore options such as `-n` or `-N`, dependent TOC entries such as comments would be omitted from the listing, even when an actual restore would have selected them.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `contrib/pg_stat_statements` to distinguish among utility statements appearing within SQL-language functions",
      "description": "The SQL-language function executor failed to pass along the query ID that is computed for a utility (non `SELECT`/`INSERT`/`UPDATE`/`DELETE`/`MERGE`) statement.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “cursor can only scan forward” error in `contrib/postgres_fdw`",
      "description": "This error could occur if the remote server is v15 or later and a foreign table is mapped to a non-trivial remote view.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `contrib/postgres_fdw`, do not send `FETCH FIRST WITH TIES` clauses to the remote server",
      "description": "The remote server might not implement this clause, or might interpret it differently than we would locally, so don't risk attempting remote execution.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid clashing with system-provided `<regex.h>` headers",
      "description": "This fixes a compilation failure on macOS version 15 and up.",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix otherwise-harmless assertion failure in Memoize cost estimation (David Rowley) ",
      "description": "",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix otherwise-harmless assertion failures in `REINDEX CONCURRENTLY` applied to an SP-GiST index (Tom Lane) ",
      "description": "",
      "fixedIn": "16.4",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix updates of catalog state for foreign-key constraints when attaching or detaching table partitions",
      "description": "If the referenced table is partitioned, then different catalog entries are needed for a referencing table that is stand-alone versus one that is a partition. `ATTACH/DETACH PARTITION` commands failed to perform this conversion correctly. In particular, after `DETACH` the now stand-alone table would be missing foreign-key enforcement triggers, which could result in the table later containing rows that fail the foreign-key constraint. A subsequent re-`ATTACH` could fail with surprising errors, too.\n\nThe way to fix this is to do `ALTER TABLE DROP CONSTRAINT` on the now stand-alone table for each faulty constraint, and then re-add the constraint. If re-adding the constraint fails, then some erroneous data has crept in. You will need to manually re-establish consistency between the referencing and referenced tables, then re-add the constraint.\n\nThis query can be used to identify broken constraints and construct the commands needed to recreate them:\n\nSELECT conrelid::pg_catalog.regclass AS \"constrained table\",\n       conname AS constraint,\n       confrelid::pg_catalog.regclass AS \"references\",\n       pg_catalog.format('ALTER TABLE %s DROP CONSTRAINT %I;',\n                         conrelid::pg_catalog.regclass, conname) AS \"drop\",\n       pg_catalog.format('ALTER TABLE %s ADD CONSTRAINT %I %s;',\n                         conrelid::pg_catalog.regclass, conname,\n                         pg_catalog.pg_get_constraintdef(oid)) AS \"add\"\nFROM pg_catalog.pg_constraint c\nWHERE contype = 'f' AND conparentid = 0 AND\n   (SELECT count(*) FROM pg_catalog.pg_constraint c2\n    WHERE c2.conparentid = c.oid) <>\n   (SELECT count(*) FROM pg_catalog.pg_inherits i\n    WHERE (i.inhparent = c.conrelid OR i.inhparent = c.confrelid) AND\n      EXISTS (SELECT 1 FROM pg_catalog.pg_partitioned_table\n              WHERE partrelid = i.inhparent));\n\nSince it is possible that one or more of the `ADD CONSTRAINT` steps will fail, you should save the query's output in a file and then attempt to perform each step.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible crashes and “could not open relation” errors in queries on a partitioned table occurring concurrently with a `DETACH CONCURRENTLY` and immediate drop of a partition (Álvaro Herrera, Kuntal Gosh) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow `ALTER TABLE ATTACH PARTITION` if the table to be attached has a foreign key referencing the partitioned table",
      "description": "This arrangement is not supported, and other ways of creating it already fail.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partitionwise joins or grouping if the query's collation for the key column doesn't match the partition key's collation",
      "description": "Such plans could produce incorrect results.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible “could not find pathkey item to sort” error when the output of a `UNION ALL` member query needs to be sorted, and the sort column is an expression (Andrei Lepikhov, Tom Lane) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix performance regressions involving flattening of subqueries underneath outer joins that are later reduced to plain joins",
      "description": "v16 failed to optimize some queries as well as prior versions had, because of overoptimistic simplification of query-pullup logic.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow cancellation of the second stage of index build for large hash indexes (Pavel Borisov) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure or confusing error message for `` COPY (_`query`_) TO ... ``, when the _`query`_ is rewritten by a `DO INSTEAD NOTIFY` rule (Tender Wang, Tom Lane) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix server crash when a `json_objectagg()` call contains a volatile function (Amit Langote) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix checking of key uniqueness in JSON object constructors",
      "description": "When building an object larger than a kilobyte, it was possible to accept invalid input that includes duplicate object keys, or to falsely report that duplicate keys are present.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of skewed data during parallel hash join",
      "description": "After repartitioning the inner side of a hash join because one partition has accumulated too many tuples, we check to see if all the partition's tuples went into the same child partition, which suggests that they all have the same hash value and further repartitioning cannot improve matters. This check malfunctioned in some cases, allowing repeated futile repartitioning which would eventually end in a resource-exhaustion error.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow locale names containing non-ASCII characters",
      "description": "This is only an issue on Windows, as such locale names are not used elsewhere. They are problematic because it's quite unclear what encoding such names are represented in (since the locale itself defines the encoding to use). In recent PostgreSQL releases, an abort in the Windows runtime library could occur because of confusion about that.\n\nAnyone who encounters the new error message should either create a new duplicated locale with an ASCII-only name using Windows Locale Builder, or consider using BCP 47-compliant locale names like `tr-TR`.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in committing a serializable transaction",
      "description": "Mis-processing of a recently committed transaction could lead to an assertion failure or a “could not access status of transaction” error.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in `COMMIT PREPARED` that resulted in orphaned 2PC files",
      "description": "A concurrent `PREPARE TRANSACTION` could cause `COMMIT PREPARED` to not remove the on-disk two-phase state file for the completed transaction. There was no immediate ill effect, but a subsequent crash-and-recovery could fail with “could not access status of transaction”, requiring manual removal of the orphaned file to restore service.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid invalid memory accesses after skipping an invalid toast index during `VACUUM FULL`",
      "description": "A list tracking yet-to-be-rebuilt indexes was not properly updated in this code path, risking assertion failures or crashes later on.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ways in which an “in place” catalog update could be lost",
      "description": "Normal row updates write a new version of the row to preserve rollback-ability of the transaction. However, certain system catalog updates are intentionally non-transactional and are done with an in-place update of the row. These patches fix race conditions that could cause the effects of an in-place update to be lost. As an example, it was possible to forget having set `pg_class`.`relhasindex` to true, preventing updates of the new index and thus causing index corruption.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reset catalog caches at end of recovery",
      "description": "This prevents scenarios wherein an in-place catalog update could be lost due to using stale data from a catalog cache.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using parallel query while holding off interrupts",
      "description": "This situation cannot arise normally, but it can be reached with test scenarios such as using a SQL-language function as B-tree support (which would be far too slow for production usage). If it did occur it would result in an indefinite wait.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Report the active query ID for statistics purposes at the start of processing of Bind and Execute protocol messages",
      "description": "This allows more of the work done in extended query protocol to be attributed to the correct query.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Guard against stack overflow in libxml2 with too-deeply-nested XML input",
      "description": "Use `xmlXPathCtxtCompile()` rather than `xmlXPathCompile()`, because the latter fails to protect itself against recursion-to-stack-overflow in libxml2 releases before 2.13.4.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix some whitespace issues in the result of `XMLSERIALIZE(... INDENT)`",
      "description": "Fix failure to indent nodes separated by whitespace, and ensure that a trailing newline is not added.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Do not ignore a concurrent `REINDEX CONCURRENTLY` that is working on an index with predicates or expressions",
      "description": "Normally, `REINDEX CONCURRENTLY` does not need to wait for other `REINDEX CONCURRENTLY` operations on other tables. However, this optimization is not applied if the other `REINDEX CONCURRENTLY` is processing an index with predicates or expressions, on the chance that such expressions contain user-defined code that accesses other tables. Careless coding created a race condition such that that rule was not applied uniformly, possibly allowing inconsistent behavior.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix mis-deparsing of `ORDER BY` lists when there is a name conflict",
      "description": "If an `ORDER BY` item in `SELECT` is a bare identifier, the parser first seeks it as an output column name of the `SELECT`, for SQL92 compatibility. However, ruleutils.c expects the SQL99 interpretation where such a name is an input column name. So it was possible to produce an incorrect display of a view in the (rather ill-advised) case where some other column is renamed in the `SELECT` output list to match an input column used in `ORDER BY`. Fix by table-qualifying such names in the dumped view text.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “failed to find plan for subquery/CTE” errors in `EXPLAIN`",
      "description": "This case arose while trying to print references to fields of a RECORD-type output of a subquery when the subquery has been optimized out of the plan altogether (which is possible at least in the case that it has a constant-false `WHERE` condition). Nothing remains in the plan to identify the original field names, so fall back to printing `` f_`N`_ `` for the _`N`_'th record column. (That's actually the right thing anyway, if the record output arose from a `ROW()` constructor.)",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow a `USING` clause when altering the type of a generated column",
      "description": "A generated column already has an expression specifying the column contents, so including `USING` doesn't make sense.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore not-yet-defined Portals in the `pg_cursors` view",
      "description": "It is possible for user-defined code that inspects this view to be called while a new cursor is being set up, and if that happens a null pointer dereference would ensue. Avoid the problem by defining the view to exclude incompletely-set-up cursors.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect output of the `pg_stat_io` view on 32-bit machines",
      "description": "The `stats_reset` timestamp column contained garbage on such hardware.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent mis-encoding of “trailing junk after numeric literal” error messages",
      "description": "We do not allow identifiers to appear immediately following numeric literals (there must be some whitespace between). If a multibyte character immediately followed a numeric literal, the syntax error message about it included only the first byte of that character, causing bad-encoding problems both in the report to the client and in the postmaster log file.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “unexpected table\\_index\\_fetch\\_tuple call during logical decoding” error while decoding a transaction involving insertion of a column default value (Takeshi Ideriha, Hou Zhijie) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce memory consumption of logical decoding",
      "description": "Use a smaller default block size to store tuple data received during logical replication. This reduces memory wastage, which has been reported to be severe while processing long-running transactions, even leading to out-of-memory failures.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In a logical replication apply worker, ensure that origin progress is not advanced during an error or apply worker shutdown",
      "description": "This avoids possible loss of a transaction, since once the origin progress point is advanced the source server won't send that data again.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Re-disable sending of stateless (TLSv1.2) session tickets",
      "description": "A previous change to prevent sending of stateful (TLSv1.3) session tickets accidentally re-enabled sending of stateless ones. Thus, while we intended to prevent clients from thinking that TLS session resumption is supported, some still did.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “wrong tuple length” failure when dropping a database with many ACL (permission) entries (Ayush Tiwari) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow adjusting the `session_authorization` and `role` settings in parallel workers",
      "description": "Our code intends to allow modifiable server settings to be set by function `SET` clauses, but not otherwise within a parallel worker. `SET` clauses failed for these two settings, though.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list, when the `CALL` is within a PL/pgSQL `EXCEPTION` block",
      "description": "As with a similar fix in our previous quarterly releases, this case allowed such functions to be passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix “cache lookup failed for function” errors in edge cases in PL/pgSQL's `CALL` (Tom Lane) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix thread safety of our fallback (non-OpenSSL) MD5 implementation on big-endian hardware",
      "description": "Thread safety is not currently a concern in the server, but it is for libpq.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parse libpq's `keepalives` connection option in the same way as other integer-valued options",
      "description": "The coding used here rejected trailing whitespace in the option value, unlike other cases. This turns out to be problematic in ecpg's usage, for example.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid use of `pnstrdup()` in ecpglib",
      "description": "That function will call `exit()` on out-of-memory, which is undesirable in a library. The calling code already handles allocation failures properly.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpglib, fix out-of-bounds read when parsing incorrect datetime input",
      "description": "It was possible to try to read the location just before the start of a constant array. Real-world consequences seem minimal, though.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix memory leak in psql during repeated use of `\\bind` (Michael Paquier) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid hanging if an interval less than 1ms is specified in psql's `\\watch` command",
      "description": "Instead, treat this the same as an interval of zero (no wait between executions).",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix pg\\_dump's handling of identity sequences that have persistence different from their owning table's persistence",
      "description": "Since v15, it's been possible to set an identity sequence to be LOGGED when its owning table is UNLOGGED or vice versa. However, pg\\_dump's method for recreating that situation failed in binary-upgrade mode, causing pg\\_upgrade to fail when such sequences are present. Fix by introducing a new option for `ADD/ALTER COLUMN GENERATED AS IDENTITY` to allow the sequence's persistence to be set correctly at creation. Note that this means a dump from a database containing such a sequence will only load into a server of this minor version or newer.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Include the source timeline history in pg\\_rewind's debug output",
      "description": "This was the intention to begin with, but a coding error caused the source history to always print as empty.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to reindex temporary tables and indexes in vacuumdb and in parallel reindexdb",
      "description": "Reindexing other sessions' temporary tables cannot work, but the check to skip them was missing in some code paths, leading to unwanted failures.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow inspection of sequence relations in relevant functions of `contrib/pageinspect` and `contrib/pgstattuple`",
      "description": "This had been allowed in the past, but it got broken during the introduction of non-default access methods for tables.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect LLVM-generated code on ARM64 platforms",
      "description": "When using JIT compilation on ARM platforms, the generated code could not support relocation distances exceeding 32 bits, allowing unlucky placement of generated code to cause server crashes on large-memory systems.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix a few places that assumed that process start time (represented as a `time_t`) will fit into a `long` value",
      "description": "On platforms where `long` is 32 bits (notably Windows), this coding would fail after Y2038\\. Most of the failures appear only cosmetic, but notably `pg_ctl start` would hang.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix building with Strawberry Perl on Windows (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024b",
      "description": "This tzdata release changes the old System-V-compatibility zone names to duplicate the corresponding geographic zones; for example `PST8PDT` is now an alias for `America/Los_Angeles`. The main visible consequence is that for timestamps before the introduction of standardized time zones, the zone is considered to represent local mean solar time for the named location. For example, in `PST8PDT`, `timestamptz` input such as `1801-01-01 00:00` would previously have been rendered as `1801-01-01 00:00:00-08`, but now it is rendered as `1801-01-01 00:00:00-07:52:58`.\n\nAlso, historical corrections for Mexico, Mongolia, and Portugal. Notably, `Asia/Choibalsan` is now an alias for `Asia/Ulaanbaatar` rather than being a separate zone, mainly because the differences between those zones were found to be based on untrustworthy data.",
      "fixedIn": "16.5",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair ABI break for extensions that work with struct `ResultRelInfo`",
      "description": "Last week's minor releases unintentionally broke binary compatibility with timescaledb and several other extensions. Restore the affected structure to its previous size, so that such extensions need not be rebuilt.",
      "fixedIn": "16.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix cases where a logical replication slot's `restart_lsn` could go backwards",
      "description": "Previously, restarting logical replication could sometimes cause the slot's restart point to be recomputed as an older value than had previously been advertised in `pg_replication_slots`. This is bad, since for example WAL files might have been removed on the basis of the later `restart_lsn` value, in which case replication would fail to restart.",
      "fixedIn": "16.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deleting still-needed WAL files during pg\\_rewind",
      "description": "Previously, in unlucky cases, it was possible for pg\\_rewind to remove important WAL files from the rewound demoted primary. In particular this happens if those files have been marked for archival (i.e., their `.ready` files were created) but not yet archived. Then the newly promoted node no longer has such files because of them having been recycled, but likely they are needed for recovery in the demoted node. If pg\\_rewind removes them, recovery is not possible anymore.",
      "fixedIn": "16.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race conditions associated with dropping shared statistics entries",
      "description": "These bugs could lead to loss of statistics data, assertion failures, or “can only drop stats once” errors.",
      "fixedIn": "16.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Count index scans in `contrib/bloom` indexes in the statistics views, such as the `pg_stat_user_indexes`.`idx_scan` counter (Masahiro Ikeda) ",
      "description": "",
      "fixedIn": "16.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when checking to see if an index's opclass options have changed",
      "description": "Some forms of `ALTER TABLE` would fail if the table has an index with non-default operator class options.",
      "fixedIn": "16.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure caused by disconnected NFA sub-graphs in regular expression parsing",
      "description": "This bug does not appear to have any visible consequences in non-assert builds.",
      "fixedIn": "16.6",
      "significant": false,
      "contributors": []
    },
    {
      "title": "New SQL/JSON capabilities, including constructors, identity functions, and the [JSON\\_TABLE()](https://www.postgresql.org/docs/17/functions-json.html#FUNCTIONS-SQLJSON-TABLE \"9.16.4. JSON_TABLE\") function, which converts JSON data into a table representation.",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Failover control",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "[pg\\_createsubscriber](https://www.postgresql.org/docs/17/app-pgcreatesubscriber.html \"pg_createsubscriber\"), a utility that creates logical replicas from physical standbys",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "[pg\\_upgrade](https://www.postgresql.org/docs/17/pgupgrade.html \"pg_upgrade\") now preserves logical replication slots on publishers and full subscription state on subscribers. This will allow upgrades to future major versions to continue logical replication without requiring copy to resynchronize.",
      "description": "",
      "fixedIn": "17.0",
      "significant": true,
      "contributors": []
    },
    {
      "title": "New client-side connection option, [sslnegotiation=direct](https://www.postgresql.org/docs/17/libpq-connect.html#LIBPQ-CONNECT-SSLNEGOTIATION), that performs a direct TLS handshake to avoid a round-trip negotiation.",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "[COPY](https://www.postgresql.org/docs/17/sql-copy.html \"COPY\") adds a new option, `ON_ERROR ignore`, that allows a copy operation to continue in the event of an error.",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change functions to use a safe [search\\_path](https://www.postgresql.org/docs/17/runtime-config-client.html#GUC-SEARCH-PATH) during maintenance operations",
      "description": "This prevents maintenance operations (`ANALYZE`, `CLUSTER`, `CREATE INDEX`, `CREATE MATERIALIZED VIEW`, `REFRESH MATERIALIZED VIEW`, `REINDEX`, or `VACUUM`) from performing unsafe access. Functions used by expression indexes and materialized views that need to reference non-default schemas must specify a search path during function creation.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Restrict `ago` to only appear at the end in `interval` values",
      "description": "Also, prevent empty interval units from appearing multiple times.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [SET SESSION AUTHORIZATION](https://www.postgresql.org/docs/17/sql-set-session-authorization.html \"SET SESSION AUTHORIZATION\") handling of the initial session user's superuser status",
      "description": "The new behavior is based on the session user's superuser status at the time the `SET SESSION AUTHORIZATION` command is issued, rather than their superuser status at connection time.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove feature which simulated per-database users",
      "description": "The feature, `db_user_namespace`, was rarely used.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove adminpack contrib extension",
      "description": "This was used by now end-of-life pgAdmin III.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove [wal\\_sync\\_method](https://www.postgresql.org/docs/17/runtime-config-wal.html#GUC-WAL-SYNC-METHOD) value `fsync_writethrough` on Windows",
      "description": "This value was the same as `fsync` on Windows.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change file boundary handling of two WAL file name functions",
      "description": "The functions [pg\\_walfile\\_name()](https://www.postgresql.org/docs/17/functions-admin.html#FUNCTIONS-ADMIN-BACKUP-TABLE \"Table 9.95. Backup Control Functions\") and `pg_walfile_name_offset()` used to report the previous LSN segment number when the LSN was on a file segment boundary; it now returns the current LSN segment.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove server variable `trace_recovery_messages` since it is no longer needed (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove [information schema](https://www.postgresql.org/docs/17/information-schema.html \"Chapter 35. The Information Schema\") column `element_types`.`domain_default` (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [pgrowlocks](https://www.postgresql.org/docs/17/pgrowlocks.html \"F.29. pgrowlocks — show a table's row locking information\") lock mode output labels (Bruce Momjian) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove `buffers_backend` and `buffers_backend_fsync` from [pg\\_stat\\_bgwriter](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-PG-STAT-BGWRITER-VIEW \"27.2.14. pg_stat_bgwriter\")",
      "description": "These fields are considered redundant to similar columns in [pg\\_stat\\_io](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-PG-STAT-IO-VIEW \"27.2.13. pg_stat_io\").",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename I/O block read/write timing statistics columns of [pg\\_stat\\_statements](https://www.postgresql.org/docs/17/pgstatstatements.html \"F.30. pg_stat_statements — track statistics of SQL planning and execution\")",
      "description": "This renames `blk_read_time` to `shared_blk_read_time`, and `blk_write_time` to `shared_blk_write_time`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [pg\\_attribute.attstattarget](https://www.postgresql.org/docs/17/catalog-pg-attribute.html \"51.7. pg_attribute\") and `pg_statistic_ext`.`stxstattarget` to represent the default statistics target as `NULL` (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename [pg\\_collation.colliculocale](https://www.postgresql.org/docs/17/catalog-pg-collation.html \"51.12. pg_collation\") to `colllocale` and [pg\\_database.daticulocale](https://www.postgresql.org/docs/17/catalog-pg-database.html \"51.15. pg_database\") to `datlocale` (Jeff Davis) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename [pg\\_stat\\_progress\\_vacuum](https://www.postgresql.org/docs/17/progress-reporting.html#VACUUM-PROGRESS-REPORTING \"27.4.5. VACUUM Progress Reporting\") column `max_dead_tuples` to `max_dead_tuple_bytes`, rename `num_dead_tuples` to `num_dead_item_ids`, and add `dead_tuple_bytes` (Masahiko Sawada) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename SLRU columns in system view [pg\\_stat\\_slru](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-PG-STAT-SLRU-VIEW \"27.2.25. pg_stat_slru\")",
      "description": "The column names accepted by [pg\\_stat\\_reset\\_slru()](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-STATS-FUNCS-TABLE \"Table 27.36. Additional Statistics Functions\") are also changed.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow partition pruning on boolean columns on `IS [NOT] UNKNOWN` conditionals (David Rowley) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow correlated `IN` subqueries to be transformed into joins (Andy Fan, Tom Lane) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow query nodes to be run in parallel in more cases (Tom Lane) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `GROUP BY` columns to be internally ordered to match `ORDER BY`",
      "description": "This can be disabled using server variable [enable\\_group\\_by\\_reordering](https://www.postgresql.org/docs/17/runtime-config-query.html#GUC-ENABLE-GROUPBY-REORDERING).",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `UNION` (without `ALL`) to use MergeAppend (David Rowley) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix MergeAppend plans to more accurately compute the number of rows that need to be sorted (Alexander Kuzmenkov) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [GiST](https://www.postgresql.org/docs/17/gist.html \"64.2. GiST Indexes\") and [SP-GiST](https://www.postgresql.org/docs/17/spgist.html \"64.3. SP-GiST Indexes\") indexes to be part of incremental sorts",
      "description": "This is particularly useful for `ORDER BY` clauses where the first column has a GiST and SP-GiST index, and other columns do not.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add columns to [pg\\_stats](https://www.postgresql.org/docs/17/view-pg-stats.html \"52.27. pg_stats\") to report range-type histogram information (Egor Rogov, Soumyadeep Chakraborty) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [BRIN](https://www.postgresql.org/docs/17/brin.html \"64.5. BRIN Indexes\") indexes to be created using parallel workers (Tomas Vondra, Matthias van de Meent) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Optimize vacuuming of relations with no indexes (Melanie Plageman) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Increase default [vacuum\\_buffer\\_usage\\_limit](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-VACUUM-BUFFER-USAGE-LIMIT) to 2MB (Thomas Munro) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add log messages related to WAL recovery from backups (Andres Freund) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [log\\_connections](https://www.postgresql.org/docs/17/runtime-config-logging.html#GUC-LOG-CONNECTIONS) log line for `trust` connections (Jacob Champion) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add log message to report walsender acquisition and release of replication slots",
      "description": "This is enabled by the server variable [log\\_replication\\_commands](https://www.postgresql.org/docs/17/runtime-config-logging.html#GUC-LOG-REPLICATION-COMMANDS).",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_wait\\_events](https://www.postgresql.org/docs/17/view-pg-wait-events.html \"52.36. pg_wait_events\") that reports wait event types",
      "description": "This is useful for adding descriptions to wait events reported in [pg\\_stat\\_activity](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-PG-STAT-ACTIVITY-VIEW \"27.2.3. pg_stat_activity\").",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [wait events](https://www.postgresql.org/docs/17/view-pg-wait-events.html \"52.36. pg_wait_events\") for checkpoint delays (Thomas Munro) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow vacuum to report the progress of index processing",
      "description": "This appears in system view [pg\\_stat\\_progress\\_vacuum](https://www.postgresql.org/docs/17/progress-reporting.html#PG-STAT-PROGRESS-VACUUM-VIEW \"Table 27.45. pg_stat_progress_vacuum View\") columns `indexes_total` and `indexes_processed`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow granting the right to perform maintenance operations",
      "description": "The permission can be granted on a per-table basis using the [MAINTAIN](https://www.postgresql.org/docs/17/ddl-priv.html#DDL-PRIV-MAINTAIN) privilege and on a per-role basis via the [pg\\_maintain](https://www.postgresql.org/docs/17/predefined-roles.html \"21.5. Predefined Roles\") predefined role. Permitted operations are `VACUUM`, `ANALYZE`, `REINDEX`, `REFRESH MATERIALIZED VIEW`, `CLUSTER`, and `LOCK TABLE`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow roles with [pg\\_monitor](https://www.postgresql.org/docs/17/predefined-roles.html \"21.5. Predefined Roles\") membership to execute [pg\\_current\\_logfile()](https://www.postgresql.org/docs/17/functions-info.html#FUNCTIONS-INFO-SESSION-TABLE \"Table 9.69. Session Information Functions\") (Pavlo Golub, Nathan Bossart) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system variable [allow\\_alter\\_system](https://www.postgresql.org/docs/17/runtime-config-compatible.html#GUC-ALLOW-ALTER-SYSTEM) to disallow [ALTER SYSTEM](https://www.postgresql.org/docs/17/sql-altersystem.html \"ALTER SYSTEM\") (Jelte Fennema-Nio, Gabriele Bartolini) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [ALTER SYSTEM](https://www.postgresql.org/docs/17/sql-altersystem.html \"ALTER SYSTEM\") to set unrecognized custom server variables",
      "description": "This is also possible with [GRANT ON PARAMETER](https://www.postgresql.org/docs/17/sql-grant.html \"GRANT\").",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable [transaction\\_timeout](https://www.postgresql.org/docs/17/runtime-config-client.html#GUC-TRANSACTION-TIMEOUT) to restrict the duration of transactions (Andrey Borodin, Japin Li, Junwang Zhao, Alexander Korotkov) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add a builtin platform-independent collation provider",
      "description": "This supports `C` and `C.UTF-8` collations.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable [huge\\_pages\\_status](https://www.postgresql.org/docs/17/runtime-config-preset.html#GUC-HUGE-PAGES-STATUS) to report the use of huge pages by Postgres",
      "description": "This is useful when [huge\\_pages](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-HUGE-PAGES) is set to `try`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable to disable event triggers",
      "description": "The setting, [event\\_triggers](https://www.postgresql.org/docs/17/runtime-config-client.html#GUC-EVENT-TRIGGERS), allows for the temporary disabling of event triggers for debugging.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the [SLRU](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-PG-STAT-SLRU-VIEW \"27.2.25. pg_stat_slru\") cache sizes to be configured",
      "description": "The new server variables are [commit\\_timestamp\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-COMMIT-TIMESTAMP-BUFFERS), [multixact\\_member\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-MULTIXACT-MEMBER-BUFFERS), [multixact\\_offset\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-MULTIXACT-OFFSET-BUFFERS), [notify\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-NOTIFY-BUFFERS), [serializable\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-SERIALIZABLE-BUFFERS), [subtransaction\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-SUBTRANSACTION-BUFFERS), and [transaction\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-TRANSACTION-BUFFERS). [commit\\_timestamp\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-COMMIT-TIMESTAMP-BUFFERS), [transaction\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-TRANSACTION-BUFFERS), and [subtransaction\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-SUBTRANSACTION-BUFFERS) scale up automatically with [shared\\_buffers](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-SHARED-BUFFERS).",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the creation of WAL summarization files",
      "description": "These files record the block numbers that have changed within an [LSN](https://www.postgresql.org/docs/17/datatype-pg-lsn.html \"8.20. pg_lsn Type\") range and are useful for incremental file system backups. This is controlled by the server variables [summarize\\_wal](https://www.postgresql.org/docs/17/runtime-config-wal.html#GUC-SUMMARIZE-WAL) and [wal\\_summary\\_keep\\_time](https://www.postgresql.org/docs/17/runtime-config-wal.html#GUC-WAL-SUMMARY-KEEP-TIME), and introspected with [pg\\_available\\_wal\\_summaries()](https://www.postgresql.org/docs/17/functions-info.html#FUNCTIONS-WAL-SUMMARY \"Table 9.92. WAL Summarization Information Functions\"), `pg_wal_summary_contents()`, and `pg_get_wal_summarizer_state()`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the system identifier to file system [backup manifest](https://www.postgresql.org/docs/17/backup-manifest-format.html \"Chapter 69. Backup Manifest Format\") files",
      "description": "This helps detect invalid WAL usage.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow connection string value `dbname` to be written when [pg\\_basebackup](https://www.postgresql.org/docs/17/app-pgbasebackup.html \"pg_basebackup\") writes connection information to `postgresql.auto.conf` (Vignesh C, Hayato Kuroda) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add column [pg\\_replication\\_slots.invalidation\\_reason](https://www.postgresql.org/docs/17/view-pg-replication-slots.html \"52.19. pg_replication_slots\") to report the reason for invalid slots (Shveta Malik, Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add column [pg\\_replication\\_slots.inactive\\_since](https://www.postgresql.org/docs/17/view-pg-replication-slots.html \"52.19. pg_replication_slots\") to report slot inactivity duration (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [pg\\_sync\\_replication\\_slots()](https://www.postgresql.org/docs/17/functions-admin.html#FUNCTIONS-REPLICATION-TABLE \"Table 9.99. Replication Management Functions\") to synchronize logical replication slots (Hou Zhijie, Shveta Malik, Ajin Cherian, Peter Eisentraut) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the `failover` property to the [replication protocol](https://www.postgresql.org/docs/17/protocol-replication.html \"53.4. Streaming Replication Protocol\") (Hou Zhijie, Shveta Malik) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add application [pg\\_createsubscriber](https://www.postgresql.org/docs/17/app-pgcreatesubscriber.html \"pg_createsubscriber\") to create a logical replica from a physical standby server (Euler Taveira) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have [pg\\_upgrade](https://www.postgresql.org/docs/17/pgupgrade.html \"pg_upgrade\") migrate valid logical slots and subscriptions",
      "description": "This allows logical replication to continue quickly after the upgrade. This only works for old PostgreSQL clusters that are version 17 or later.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enable the failover of [logical slots](https://www.postgresql.org/docs/17/logical-replication-subscription.html#LOGICAL-REPLICATION-SUBSCRIPTION-SLOT \"29.2.1. Replication Slot Management\")",
      "description": "This is controlled by an optional fifth argument to [pg\\_create\\_logical\\_replication\\_slot()](https://www.postgresql.org/docs/17/functions-admin.html#FUNCTIONS-REPLICATION-TABLE \"Table 9.99. Replication Management Functions\").",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add server variable [sync\\_replication\\_slots](https://www.postgresql.org/docs/17/runtime-config-replication.html#GUC-SYNC-REPLICATION-SLOTS) to enable failover logical slot synchronization (Shveta Malik, Hou Zhijie, Peter Smith) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add logical replication failover control to [CREATE/ALTER SUBSCRIPTION](https://www.postgresql.org/docs/17/sql-createsubscription.html \"CREATE SUBSCRIPTION\") (Shveta Malik, Hou Zhijie, Ajin Cherian) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the application of logical replication changes to use [hash](https://www.postgresql.org/docs/17/hash-index.html \"64.6. Hash Indexes\") indexes on the subscriber",
      "description": "Previously only [btree](https://www.postgresql.org/docs/17/btree.html \"64.1. B-Tree Indexes\") indexes could be used for this purpose.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Restart apply workers if subscription owner's superuser privileges are revoked",
      "description": "This forces reauthentication.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `flush` option to [pg\\_logical\\_emit\\_message()](https://www.postgresql.org/docs/17/functions-admin.html#FUNCTIONS-REPLICATION-TABLE \"Table 9.99. Replication Management Functions\")",
      "description": "This makes the message durable.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow specification of physical standbys that must be synchronized before they are visible to subscribers",
      "description": "The new server variable is [synchronized\\_standby\\_slots](https://www.postgresql.org/docs/17/runtime-config-replication.html#GUC-SYNCHRONIZED-STANDBY-SLOTS).",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add worker type column to [pg\\_stat\\_subscription](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-PG-STAT-SUBSCRIPTION \"27.2.8. pg_stat_subscription\") (Peter Smith) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new [COPY](https://www.postgresql.org/docs/17/sql-copy.html \"COPY\") option `ON_ERROR ignore` to discard error rows",
      "description": "The default behavior is `ON_ERROR stop`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new `COPY` option `LOG_VERBOSITY` which reports `COPY FROM` ignored error rows (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `COPY FROM` to report the number of skipped rows during processing",
      "description": "This appears in system view column [pg\\_stat\\_progress\\_copy.tuples\\_skipped](https://www.postgresql.org/docs/17/progress-reporting.html#COPY-PROGRESS-REPORTING \"27.4.3. COPY Progress Reporting\").",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In `COPY FROM`, allow easy specification that all columns should be forced null or not null (Zhang Mingli) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow partitioned tables to have identity columns (Ashutosh Bapat) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [exclusion constraints](https://www.postgresql.org/docs/17/ddl-constraints.html#DDL-CONSTRAINTS-EXCLUSION \"5.5.6. Exclusion Constraints\") on partitioned tables",
      "description": "As long as exclusion constraints compare partition key columns for equality, other columns can use exclusion constraint-specific comparisons.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `ALTER TABLE` to change a column's generation expression",
      "description": "The syntax is `ALTER TABLE ... ALTER COLUMN ... SET EXPRESSION`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow specification of [table access methods](https://www.postgresql.org/docs/17/tableam.html \"Chapter 61. Table Access Method Interface Definition\") on partitioned tables (Justin Pryzby, Soumyadeep Chakraborty, Michael Paquier) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `DEFAULT` setting for `ALTER TABLE .. SET ACCESS METHOD` (Michael Paquier) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for [event triggers](https://www.postgresql.org/docs/17/sql-createeventtrigger.html \"CREATE EVENT TRIGGER\") that fire at connection time (Konstantin Knizhnik, Mikhail Gribkov) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add event trigger support for [REINDEX](https://www.postgresql.org/docs/17/sql-reindex.html \"REINDEX\") (Garrett Thornburg, Jian He) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow parenthesized syntax for [CLUSTER](https://www.postgresql.org/docs/17/sql-cluster.html \"CLUSTER\") options if a table name is not specified (Nathan Bossart) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `EXPLAIN` to report optimizer memory usage",
      "description": "The option is called `MEMORY`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `EXPLAIN` option `SERIALIZE` to report the cost of converting data for network transmission (Stepan Rutz, Matthias van de Meent) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add local I/O block read/write timing statistics to `EXPLAIN`'s `BUFFERS` output (Nazir Bilal Yavuz) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add JIT `deform_counter` details to `EXPLAIN` (Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the `interval` data type to support `+/-infinity` values (Joseph Koshakow, Jian He, Ashutosh Bapat) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `MERGE` to modify updatable views (Dean Rasheed) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `WHEN NOT MATCHED BY SOURCE` to `MERGE`",
      "description": "`WHEN NOT MATCHED` on target rows was already supported.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `MERGE` to use the `RETURNING` clause",
      "description": "The new `RETURNING` function `merge_action()` reports on the DML that generated the row.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [JSON\\_TABLE()](https://www.postgresql.org/docs/17/functions-json.html#FUNCTIONS-SQLJSON-TABLE \"9.16.4. JSON_TABLE\") to convert `JSON` data to a table representation",
      "description": "This function can be used in the `FROM` clause of `SELECT` queries as a tuple source.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL/JSON constructor functions [JSON()](https://www.postgresql.org/docs/17/functions-json.html#FUNCTIONS-JSON-CREATION-TABLE \"Table 9.47. JSON Creation Functions\"), `JSON_SCALAR()`, and `JSON_SERIALIZE()` (Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov, Andrew Dunstan, Amit Langote) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL/JSON query functions [JSON\\_EXISTS()](https://www.postgresql.org/docs/17/functions-json.html#FUNCTIONS-SQLJSON-QUERYING \"Table 9.52. SQL/JSON Query Functions\"), `JSON_QUERY()`, and `JSON_VALUE()` (Nikita Glukhov, Teodor Sigaev, Oleg Bartunov, Alexander Korotkov, Andrew Dunstan, Amit Langote, Peter Eisentraut, Jian He) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [jsonpath](https://www.postgresql.org/docs/17/functions-json.html#FUNCTIONS-SQLJSON-PATH-OPERATORS \"9.16.2.3. SQL/JSON Path Operators and Methods\") methods to convert `JSON` values to other `JSON` data types",
      "description": "The jsonpath methods are `.bigint()`, `.boolean()`, `.date()`, `.decimal([precision [, scale]])`, `.integer()`, `.number()`, `.string()`, `.time()`, `.time_tz()`, `.timestamp()`, and `.timestamp_tz()`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [to\\_timestamp()](https://www.postgresql.org/docs/17/functions-formatting.html#FUNCTIONS-FORMATTING-TABLE \"Table 9.26. Formatting Functions\") time zone format specifiers",
      "description": "`TZ` accepts time zone abbreviations or numeric offsets, while `OF` accepts only numeric offsets.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the session [time zone](https://www.postgresql.org/docs/17/runtime-config-client.html#GUC-TIMEZONE) to be specified by `AT LOCAL`",
      "description": "This is useful when converting adding and removing time zones from time stamps values, rather than specifying the literal session time zone.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add functions [uuid\\_extract\\_timestamp()](https://www.postgresql.org/docs/17/functions-uuid.html \"9.14. UUID Functions\") and `uuid_extract_version()` to return UUID information (Andrey Borodin) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add functions to generate random numbers in a specified range",
      "description": "The functions are [random(min, max)](https://www.postgresql.org/docs/17/functions-math.html#FUNCTIONS-MATH-RANDOM-TABLE \"Table 9.6. Random Functions\") and they take values of type `integer`, `bigint`, and `numeric`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add functions to convert integers to binary and octal strings",
      "description": "The functions are [to\\_bin()](https://www.postgresql.org/docs/17/functions-string.html#FUNCTIONS-STRING-OTHER \"Table 9.10. Other String Functions and Operators\") and `to_oct()`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add Unicode informational functions",
      "description": "Function [unicode\\_version()](https://www.postgresql.org/docs/17/functions-info.html#FUNCTIONS-INFO-VERSION \"9.27.11. Version Information Functions\") returns the Unicode version, `icu_unicode_version()` returns the ICU version, and `unicode_assigned()` returns if the characters are assigned Unicode codepoints.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [xmltext()](https://www.postgresql.org/docs/17/functions-xml.html#FUNCTIONS-PRODUCING-XML-XMLTEXT \"9.15.1.1. xmltext\") to convert text to a single `XML` text node (Jim Jones) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [to\\_regtypemod()](https://www.postgresql.org/docs/17/functions-info.html#FUNCTIONS-INFO-CATALOG-TABLE \"Table 9.74. System Catalog Information Functions\") to return the type modifier of a type specification (David Wheeler, Erik Wienhold) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_basetype()](https://www.postgresql.org/docs/17/functions-info.html#FUNCTIONS-INFO-CATALOG-TABLE \"Table 9.74. System Catalog Information Functions\") function to return a domain's base type (Steve Chavez) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [pg\\_column\\_toast\\_chunk\\_id()](https://www.postgresql.org/docs/17/functions-admin.html#FUNCTIONS-ADMIN-DBSIZE \"Table 9.100. Database Object Size Functions\") to return a value's [TOAST](https://www.postgresql.org/docs/17/storage-toast.html \"65.2. TOAST\") identifier",
      "description": "This returns `NULL` if the value is not stored in TOAST.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow plpgsql [%TYPE](https://www.postgresql.org/docs/17/plpgsql-declarations.html#PLPGSQL-DECLARATION-TYPE \"41.3.3. Copying Types\") and `%ROWTYPE` specifications to represent arrays of non-array types (Quan Zongliang, Pavel Stehule) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow plpgsql `%TYPE` specification to reference composite column (Tom Lane) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq functions to close portals and prepared statements",
      "description": "The functions are [PQclosePrepared()](https://www.postgresql.org/docs/17/libpq-exec.html#LIBPQ-PQCLOSEPREPARED), [PQclosePortal()](https://www.postgresql.org/docs/17/libpq-exec.html#LIBPQ-PQCLOSEPORTAL), [PQsendClosePrepared()](https://www.postgresql.org/docs/17/libpq-async.html#LIBPQ-PQSENDCLOSEPREPARED), and [PQsendClosePortal()](https://www.postgresql.org/docs/17/libpq-async.html#LIBPQ-PQSENDCLOSEPORTAL).",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq API which allows for blocking and non-blocking [cancel requests](https://www.postgresql.org/docs/17/libpq-cancel.html \"32.7. Canceling Queries in Progress\"), with encryption if already in use",
      "description": "Previously only blocking, unencrypted cancel requests were supported.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq function [PQsocketPoll()](https://www.postgresql.org/docs/17/libpq-connect.html#LIBPQ-PQSOCKETPOLL) to allow polling of network sockets (Tristan Partin, Tom Lane) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq function [PQsendPipelineSync()](https://www.postgresql.org/docs/17/libpq-pipeline-mode.html#LIBPQ-PQSENDPIPELINESYNC) to send a pipeline synchronization point",
      "description": "This is similar to [PQpipelineSync()](https://www.postgresql.org/docs/17/libpq-pipeline-mode.html#LIBPQ-PQPIPELINESYNC) but it does not flush to the server unless the size threshold of the output buffer is reached.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq function [PQsetChunkedRowsMode()](https://www.postgresql.org/docs/17/libpq-single-row-mode.html#LIBPQ-PQSETCHUNKEDROWSMODE) to allow retrieval of results in chunks (Daniel Vérité) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow TLS connections without requiring a network round-trip negotiation",
      "description": "This is enabled with the client-side option [sslnegotiation=direct](https://www.postgresql.org/docs/17/libpq-connect.html#LIBPQ-CONNECT-SSLNEGOTIATION), requires ALPN, and only works on PostgreSQL 17 and later servers.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Have backslash commands honor `\\pset null`",
      "description": "Previously `\\pset null` was ignored.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql's `\\watch` to stop after a minimum number of rows returned",
      "description": "The parameter is `min_rows`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql connection attempts to be canceled with control-C (Tristan Partin) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql to honor `FETCH_COUNT` for non-`SELECT` queries (Daniel Vérité) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add application [pg\\_walsummary](https://www.postgresql.org/docs/17/app-pgwalsummary.html \"pg_walsummary\") to dump WAL summary files (Robert Haas) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_dump](https://www.postgresql.org/docs/17/app-pgdump.html \"pg_dump\")'s large objects to be restorable in batches",
      "description": "This allows the restoration of many large objects to avoid transaction limits and to be restored in parallel.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add pg\\_dump option `--exclude-extension` (Ayush Vatsa) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_dump](https://www.postgresql.org/docs/17/app-pgdump.html \"pg_dump\"), [pg\\_dumpall](https://www.postgresql.org/docs/17/app-pg-dumpall.html \"pg_dumpall\"), and [pg\\_restore](https://www.postgresql.org/docs/17/app-pgrestore.html \"pg_restore\") to specify include/exclude objects in a file",
      "description": "The option is called `--filter`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add the `--sync-method` parameter to several client applications",
      "description": "The applications are [initdb](https://www.postgresql.org/docs/17/app-initdb.html \"initdb\"), [pg\\_basebackup](https://www.postgresql.org/docs/17/app-pgbasebackup.html \"pg_basebackup\"), [pg\\_checksums](https://www.postgresql.org/docs/17/app-pgchecksums.html \"pg_checksums\"), [pg\\_dump](https://www.postgresql.org/docs/17/app-pgdump.html \"pg_dump\"), [pg\\_rewind](https://www.postgresql.org/docs/17/app-pgrewind.html \"pg_rewind\"), and [pg\\_upgrade](https://www.postgresql.org/docs/17/pgupgrade.html \"pg_upgrade\").",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [pgbench](https://www.postgresql.org/docs/17/pgbench.html \"pgbench\") debug mode option from `-d` to `--debug`",
      "description": "Option `-d` is now used for the database name, and the new `--dbname` option can be used as well.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add pgbench option `--exit-on-abort` to exit after any client aborts (Yugo Nagata) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add pgbench command `\\syncpipeline` to allow sending of sync messages (Anthonin Bonnefoy) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_archivecleanup](https://www.postgresql.org/docs/17/pgarchivecleanup.html \"pg_archivecleanup\") to remove backup history files",
      "description": "The option is `--clean-backup-history`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add some long options to pg\\_archivecleanup",
      "description": "The long options are `--debug`, `--dry-run`, and `--strip-extension`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pg\\_basebackup](https://www.postgresql.org/docs/17/app-pgbasebackup.html \"pg_basebackup\") and [pg\\_receivewal](https://www.postgresql.org/docs/17/app-pgreceivewal.html \"pg_receivewal\") to use dbname in their connection specification",
      "description": "This is useful for connection poolers that are sensitive to the database name.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_upgrade](https://www.postgresql.org/docs/17/pgupgrade.html \"pg_upgrade\") option `--copy-file-range`",
      "description": "This is supported on Linux and FreeBSD.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [reindexdb](https://www.postgresql.org/docs/17/app-reindexdb.html \"reindexdb\") `--index` to process indexes from different tables in parallel (Maxim Orlov, Svetlana Derevyanko, Alexander Korotkov) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove support for OpenSSL 1.0.1 (Michael Paquier) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow tests to pass in OpenSSL FIPS mode (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use CPU AVX\\-512 instructions for bit counting (Paul Amonson, Nathan Bossart, Ants Aasma) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Require LLVM version 10 or later (Thomas Munro) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use native CRC instructions on 64-bit LoongArch CPUs (Xudong Yang) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove AIX support (Heikki Linnakangas) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove the Microsoft Visual Studio\\-specific PostgreSQL build option",
      "description": "Meson is now the only available method for Visual Studio builds.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove configure option `--disable-thread-safety`",
      "description": "We now assume all supported platforms have sufficient thread support.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove configure option `--with-CC`",
      "description": "Setting the `CC` environment variable is now the only supported method for specifying the compiler.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "User-defined data type receive functions will no longer receive their data null-terminated (David Rowley) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add incremental `JSON` parser for use with huge `JSON` documents (Andrew Dunstan) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Convert top-level `README` file to Markdown (Nathan Bossart) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove no longer needed top-level `INSTALL` file (Tom Lane) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove make's `distprep` option (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add make support for Android shared libraries (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add backend support for injection points",
      "description": "This is used for server debugging and they must be enabled at server compile time.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add dynamic shared memory registry",
      "description": "This allows shared libraries which are not initialized at startup to coordinate dynamic shared memory access.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix `emit_log_hook` to use the same time value as other log records for the same query (Kambam Vinay, Michael Paquier) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow joins with non-join qualifications to be pushed down to foreign servers and custom scans",
      "description": "Foreign data wrappers and custom scans will need to be modified to handle these cases.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pushdown of `EXISTS` and `IN` subqueries to [postgres\\_fdw](https://www.postgresql.org/docs/17/postgres-fdw.html \"F.36. postgres_fdw — access data stored in external PostgreSQL servers\") foreign servers (Alexander Pyhalov) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Increase the default foreign data wrapper tuple cost",
      "description": "This value is used by the optimizer.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [dblink](https://www.postgresql.org/docs/17/dblink.html \"F.11. dblink — connect to other PostgreSQL databases\") database operations to be interrupted (Noah Misch) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the creation of hash indexes on [ltree](https://www.postgresql.org/docs/17/ltree.html \"F.22. ltree — hierarchical tree-like data type\") columns",
      "description": "This also enables hash join and hash aggregation on ltree columns.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [unaccent](https://www.postgresql.org/docs/17/unaccent.html \"F.46. unaccent — a text search dictionary which removes diacritics\") character translation rules to contain whitespace and quotes",
      "description": "The syntax for the `unaccent.rules` file has changed.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [citext](https://www.postgresql.org/docs/17/citext.html \"F.9. citext — a case-insensitive character string type\") tests to pass in OpenSSL FIPS mode (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [pgcrypto](https://www.postgresql.org/docs/17/pgcrypto.html \"F.26. pgcrypto — cryptographic functions\") tests to pass in OpenSSL FIPS mode (Peter Eisentraut) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove some unused [SPI](https://www.postgresql.org/docs/17/spi.html \"Chapter 45. Server Programming Interface\") macros (Bharath Rupireddy) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_buffercache](https://www.postgresql.org/docs/17/pgbuffercache.html \"F.25. pg_buffercache — inspect PostgreSQL buffer cache state\") function `pg_buffercache_evict()` to allow shared buffer eviction",
      "description": "This is useful for testing.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Replace [CALL](https://www.postgresql.org/docs/17/sql-call.html \"CALL\") parameters in pg\\_stat\\_statements with placeholders (Sami Imseih) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Track [DEALLOCATE](https://www.postgresql.org/docs/17/sql-deallocate.html \"DEALLOCATE\") in `pg_stat_statements`",
      "description": "`DEALLOCATE` names are stored in `pg_stat_statements` as placeholders.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add local I/O block read/write timing statistics columns of `pg_stat_statements`",
      "description": "The new columns are `local_blk_read_time` and `local_blk_write_time`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add JIT deform\\_counter details to `pg_stat_statements` (Dmitry Dolgov) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add optional fourth argument (`minmax_only`) to `pg_stat_statements_reset()` to allow for the resetting of only min/max statistics",
      "description": "This argument defaults to `false`.",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add `pg_stat_statements` columns `stats_since` and `minmax_stats_since` to track entry creation time and last min/max reset time (Andrei Zubkov) ",
      "description": "",
      "fixedIn": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix updates of catalog state for foreign-key constraints when attaching or detaching table partitions",
      "description": "If the referenced table is partitioned, then different catalog entries are needed for a referencing table that is stand-alone versus one that is a partition. `ATTACH/DETACH PARTITION` commands failed to perform this conversion correctly. In particular, after `DETACH` the now stand-alone table would be missing foreign-key enforcement triggers, which could result in the table later containing rows that fail the foreign-key constraint. A subsequent re-`ATTACH` could fail with surprising errors, too.\n\nThe way to fix this is to do `ALTER TABLE DROP CONSTRAINT` on the now stand-alone table for each faulty constraint, and then re-add the constraint. If re-adding the constraint fails, then some erroneous data has crept in. You will need to manually re-establish consistency between the referencing and referenced tables, then re-add the constraint.\n\nThis query can be used to identify broken constraints and construct the commands needed to recreate them:\n\nSELECT conrelid::pg_catalog.regclass AS \"constrained table\",\n       conname AS constraint,\n       confrelid::pg_catalog.regclass AS \"references\",\n       pg_catalog.format('ALTER TABLE %s DROP CONSTRAINT %I;',\n                         conrelid::pg_catalog.regclass, conname) AS \"drop\",\n       pg_catalog.format('ALTER TABLE %s ADD CONSTRAINT %I %s;',\n                         conrelid::pg_catalog.regclass, conname,\n                         pg_catalog.pg_get_constraintdef(oid)) AS \"add\"\nFROM pg_catalog.pg_constraint c\nWHERE contype = 'f' AND conparentid = 0 AND\n   (SELECT count(*) FROM pg_catalog.pg_constraint c2\n    WHERE c2.conparentid = c.oid) <>\n   (SELECT count(*) FROM pg_catalog.pg_inherits i\n    WHERE (i.inhparent = c.conrelid OR i.inhparent = c.confrelid) AND\n      EXISTS (SELECT 1 FROM pg_catalog.pg_partitioned_table\n              WHERE partrelid = i.inhparent));\n\nSince it is possible that one or more of the `ADD CONSTRAINT` steps will fail, you should save the query's output in a file and then attempt to perform each step.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix test for `C` locale when `LC_COLLATE` is different from `LC_CTYPE`",
      "description": "When using `libc` as the default collation provider, the test to see if `C` locale is in use for collation accidentally checked `LC_CTYPE` not `LC_COLLATE`. This has no impact in the typical case where those settings are the same, nor if both are not `C` (nor its alias `POSIX`). However, if `LC_CTYPE` is `C` while `LC_COLLATE` is some other locale, wrong query answers could ensue, and corruption of indexes on strings was possible. Users of databases with such settings should reindex affected indexes after installing this update. The converse case with `LC_COLLATE` being `C` while `LC_CTYPE` is some other locale would cause performance degradation, but no actual errors.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Don't use partitionwise joins or grouping if the query's collation for the key column doesn't match the partition key's collation",
      "description": "Such plans could produce incorrect results.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid planner failure after converting an `IS NULL` test on a `NOT NULL` column to constant `FALSE`",
      "description": "This bug typically led to errors such as “variable not found in subplan target lists”.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid possible planner crash while inlining a SQL function whose arguments contain certain array-related constructs (Tom Lane, Nathan Bossart) ",
      "description": "",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible wrong answers or “wrong varnullingrels” planner errors for `MERGE ... WHEN NOT MATCHED BY SOURCE` actions (Dean Rasheed) ",
      "description": "",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix possible “could not find pathkey item to sort” error when the output of a `UNION ALL` member query needs to be sorted, and the sort column is an expression (Andrei Lepikhov, Tom Lane) ",
      "description": "",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix edge case in B-tree ScalarArrayOp index scans",
      "description": "When a scrollable cursor with a plan of this kind was backed up to its starting point and then run forward again, wrong answers were possible.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix assertion failure or confusing error message for `` COPY (_`query`_) TO ... ``, when the _`query`_ is rewritten by a `DO INSTEAD NOTIFY` rule (Tender Wang, Tom Lane) ",
      "description": "",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix validation of `COPY`'s `FORCE_NOT_NULL` and `FORCE_NULL` options",
      "description": "Some incorrect usages are now rejected as they should be.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix server crash when a `json_objectagg()` call contains a volatile function (Amit Langote) ",
      "description": "",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix detection of skewed data during parallel hash join",
      "description": "After repartitioning the inner side of a hash join because one partition has accumulated too many tuples, we check to see if all the partition's tuples went into the same child partition, which suggests that they all have the same hash value and further repartitioning cannot improve matters. This check malfunctioned in some cases, allowing repeated futile repartitioning which would eventually end in a resource-exhaustion error.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid crash when `ALTER DATABASE SET` is used to set a server parameter that requires search-path-based lookup, such as `default_text_search_config` (Jeff Davis) ",
      "description": "",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid repeated lookups of opclasses and collations while creating a new index on a partitioned table",
      "description": "This was problematic mainly because some of the lookups would be done with a restricted `search_path`, leading to unexpected failures if the `CREATE INDEX` command referenced objects outside `pg_catalog`.\n\nThis fix also prevents comments on the parent partitioned index from being copied to child indexes.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add missing dependency from a partitioned table to a non-built-in access method specified in `CREATE TABLE ... USING`",
      "description": "Dropping the access method should be blocked when a table exists that depends on it, but it was not, allowing subsequent odd behavior. Note that this fix only prevents problems for partitioned tables created after this update.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Disallow locale names containing non-ASCII characters",
      "description": "This is only an issue on Windows, as such locale names are not used elsewhere. They are problematic because it's quite unclear what encoding such names are represented in (since the locale itself defines the encoding to use). In recent PostgreSQL releases, an abort in the Windows runtime library could occur because of confusion about that.\n\nAnyone who encounters the new error message should either create a new duplicated locale with an ASCII-only name using Windows Locale Builder, or consider using BCP 47-compliant locale names like `tr-TR`.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in committing a serializable transaction",
      "description": "Mis-processing of a recently committed transaction could lead to an assertion failure or a “could not access status of transaction” error.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race condition in `COMMIT PREPARED` that resulted in orphaned 2PC files",
      "description": "A concurrent `PREPARE TRANSACTION` could cause `COMMIT PREPARED` to not remove the on-disk two-phase state file for the completed transaction. There was no immediate ill effect, but a subsequent crash-and-recovery could fail with “could not access status of transaction”, requiring manual removal of the orphaned file to restore service.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid invalid memory accesses after skipping an invalid toast index during `VACUUM FULL`",
      "description": "A list tracking yet-to-be-rebuilt indexes was not properly updated in this code path, risking assertion failures or crashes later on.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix ways in which an “in place” catalog update could be lost",
      "description": "Normal row updates write a new version of the row to preserve rollback-ability of the transaction. However, certain system catalog updates are intentionally non-transactional and are done with an in-place update of the row. These patches fix race conditions that could cause the effects of an in-place update to be lost. As an example, it was possible to forget having set `pg_class`.`relhasindex` to true, preventing updates of the new index and thus causing index corruption.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reset catalog caches at end of recovery",
      "description": "This prevents scenarios wherein an in-place catalog update could be lost due to using stale data from a catalog cache.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid using parallel query while holding off interrupts",
      "description": "This situation cannot arise normally, but it can be reached with test scenarios such as using a SQL-language function as B-tree support (which would be far too slow for production usage). If it did occur it would result in an indefinite wait.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Ignore not-yet-defined Portals in the `pg_cursors` view",
      "description": "It is possible for user-defined code that inspects this view to be called while a new cursor is being set up, and if that happens a null pointer dereference would ensue. Avoid the problem by defining the view to exclude incompletely-set-up cursors.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid “unexpected table\\_index\\_fetch\\_tuple call during logical decoding” error while decoding a transaction involving insertion of a column default value (Takeshi Ideriha, Hou Zhijie) ",
      "description": "",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce memory consumption of logical decoding",
      "description": "Use a smaller default block size to store tuple data received during logical replication. This reduces memory wastage, which has been reported to be severe while processing long-running transactions, even leading to out-of-memory failures.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix behavior of stable functions called from a `CALL` statement's argument list, when the `CALL` is within a PL/pgSQL `EXCEPTION` block",
      "description": "As with a similar fix in our previous quarterly releases, this case allowed such functions to be passed the wrong snapshot, causing them to see stale values of rows modified since the start of the outer transaction.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parse libpq's `keepalives` connection option in the same way as other integer-valued options",
      "description": "The coding used here rejected trailing whitespace in the option value, unlike other cases. This turns out to be problematic in ecpg's usage, for example.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In ecpglib, fix out-of-bounds read when parsing incorrect datetime input",
      "description": "It was possible to try to read the location just before the start of a constant array. Real-world consequences seem minimal, though.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix psql's describe commands to again work with pre-9.4 servers",
      "description": "Commands involving display of an ACL (permissions) column failed with very old PostgreSQL servers, due to use of a function not present in those versions.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid hanging if an interval less than 1ms is specified in psql's `\\watch` command",
      "description": "Instead, treat this the same as an interval of zero (no wait between executions).",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix failure to find replication password in `~/.pgpass`",
      "description": "pg\\_basebackup and pg\\_receivewal failed to match an entry in `~/.pgpass` that had `replication` in the database name field, if no `-d` or `--dbname` switch was supplied. This resulted in an unexpected prompt for password.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_combinebackup, throw an error if an incremental backup file is present in a directory that is supposed to contain a full backup (Robert Haas) ",
      "description": "",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In pg\\_combinebackup, don't construct filenames containing double slashes",
      "description": "This caused no functional problems, but the duplicate slashes were visible in error messages, which could create confusion.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid trying to reindex temporary tables and indexes in vacuumdb and in parallel reindexdb",
      "description": "Reindexing other sessions' temporary tables cannot work, but the check to skip them was missing in some code paths, leading to unwanted failures.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix incorrect LLVM-generated code on ARM64 platforms",
      "description": "When using JIT compilation on ARM platforms, the generated code could not support relocation distances exceeding 32 bits, allowing unlucky placement of generated code to cause server crashes on large-memory systems.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix a few places that assumed that process start time (represented as a `time_t`) will fit into a `long` value",
      "description": "On platforms where `long` is 32 bits (notably Windows), this coding would fail after Y2038\\. Most of the failures appear only cosmetic, but notably `pg_ctl start` would hang.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update time zone data files to tzdata release 2024b",
      "description": "This tzdata release changes the old System-V-compatibility zone names to duplicate the corresponding geographic zones; for example `PST8PDT` is now an alias for `America/Los_Angeles`. The main visible consequence is that for timestamps before the introduction of standardized time zones, the zone is considered to represent local mean solar time for the named location. For example, in `PST8PDT`, `timestamptz` input such as `1801-01-01 00:00` would previously have been rendered as `1801-01-01 00:00:00-08`, but now it is rendered as `1801-01-01 00:00:00-07:52:58`.\n\nAlso, historical corrections for Mexico, Mongolia, and Portugal. Notably, `Asia/Choibalsan` is now an alias for `Asia/Ulaanbaatar` rather than being a separate zone, mainly because the differences between those zones were found to be based on untrustworthy data.",
      "fixedIn": "17.1",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Repair ABI break for extensions that work with struct `ResultRelInfo`",
      "description": "Last week's minor releases unintentionally broke binary compatibility with timescaledb and several other extensions. Restore the affected structure to its previous size, so that such extensions need not be rebuilt.",
      "fixedIn": "17.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix cases where a logical replication slot's `restart_lsn` could go backwards",
      "description": "Previously, restarting logical replication could sometimes cause the slot's restart point to be recomputed as an older value than had previously been advertised in `pg_replication_slots`. This is bad, since for example WAL files might have been removed on the basis of the later `restart_lsn` value, in which case replication would fail to restart.",
      "fixedIn": "17.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid deleting still-needed WAL files during pg\\_rewind",
      "description": "Previously, in unlucky cases, it was possible for pg\\_rewind to remove important WAL files from the rewound demoted primary. In particular this happens if those files have been marked for archival (i.e., their `.ready` files were created) but not yet archived. Then the newly promoted node no longer has such files because of them having been recycled, but likely they are needed for recovery in the demoted node. If pg\\_rewind removes them, recovery is not possible anymore.",
      "fixedIn": "17.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix race conditions associated with dropping shared statistics entries",
      "description": "These bugs could lead to loss of statistics data, assertion failures, or “can only drop stats once” errors.",
      "fixedIn": "17.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Count index scans in `contrib/bloom` indexes in the statistics views, such as the `pg_stat_user_indexes`.`idx_scan` counter (Masahiro Ikeda) ",
      "description": "",
      "fixedIn": "17.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix crash when checking to see if an index's opclass options have changed",
      "description": "Some forms of `ALTER TABLE` would fail if the table has an index with non-default operator class options.",
      "fixedIn": "17.2",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Avoid assertion failure caused by disconnected NFA sub-graphs in regular expression parsing",
      "description": "This bug does not appear to have any visible consequences in non-assert builds.",
      "fixedIn": "17.2",
      "significant": false,
      "contributors": []
    }
  ],
  "features": [
    {
      "title": "Move sequences' metadata fields into a new [pg\\_sequence](https://www.postgresql.org/docs/10/catalog-pg-sequence.html \"51.46. pg_sequence\") system catalog",
      "description": "A sequence relation now stores only the fields that can be modified by `nextval()`, that is `last_value`, `log_cnt`, and `is_called`. Other sequence properties, such as the starting value and increment, are kept in a corresponding row of the `pg_sequence` catalog. `ALTER SEQUENCE` updates are now fully transactional, implying that the sequence is locked until commit. The `nextval()` and `setval()` functions remain nontransactional.\n\nThe main incompatibility introduced by this change is that selecting from a sequence relation now returns only the three fields named above. To obtain the sequence's other properties, applications must look into `pg_sequence`. The new system view [pg\\_sequences](https://www.postgresql.org/docs/10/view-pg-sequences.html \"51.84. pg_sequences\") can also be used for this purpose; it provides column names that are more compatible with existing code.\n\nAlso, sequences created for `SERIAL` columns now generate positive 32-bit wide values, whereas previous versions generated 64-bit wide values. This has no visible effect if the values are only stored in a column.\n\nThe output of psql's `\\d` command for a sequence has been redesigned, too.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Make [pg\\_basebackup](https://www.postgresql.org/docs/10/app-pgbasebackup.html \"pg_basebackup\") stream the WAL needed to restore the backup by default",
      "description": "This changes pg\\_basebackup's `-X`/`--wal-method` default to `stream`. An option value `none` has been added to reproduce the old behavior. The pg\\_basebackup option `-x` has been removed (instead, use `-X fetch`).",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Magnus Hagander"
      ]
    },
    {
      "title": "Add multi-column optimizer statistics to compute the correlation ratio and number of distinct values",
      "description": "New commands are [CREATE STATISTICS](https://www.postgresql.org/docs/10/sql-createstatistics.html \"CREATE STATISTICS\"), [ALTER STATISTICS](https://www.postgresql.org/docs/10/sql-alterstatistics.html \"ALTER STATISTICS\"), and [DROP STATISTICS](https://www.postgresql.org/docs/10/sql-dropstatistics.html \"DROP STATISTICS\"). This feature is helpful in estimating query memory usage and when combining the statistics from individual columns.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Tomas Vondra",
        "David Rowley",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Add functions to return the log and WAL directory contents",
      "description": "The new functions are [pg\\_ls\\_logdir()](https://www.postgresql.org/docs/10/functions-admin.html#FUNCTIONS-ADMIN-GENFILE-TABLE \"Table 9.88. Generic File Access Functions\") and [pg\\_ls\\_waldir()](https://www.postgresql.org/docs/10/functions-admin.html#FUNCTIONS-ADMIN-GENFILE-TABLE \"Table 9.88. Generic File Access Functions\") and can be executed by non-superusers with the proper permissions.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Dave Page"
      ]
    },
    {
      "title": "Add operators for multiplication and division of [money](https://www.postgresql.org/docs/10/datatype-money.html \"8.2. Monetary Types\") values with `int8` values",
      "description": "Previously such cases would result in converting the `int8` values to `float8` and then using the `money`\\-and-`float8` operators. The new behavior avoids possible precision loss. But note that division of `money` by `int8` now truncates the quotient, like other integer-division cases, while the previous behavior would have rounded.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add function [PQencryptPasswordConn()](https://www.postgresql.org/docs/10/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORDCONN) to allow creation of more types of encrypted passwords on the client side",
      "description": "Previously only `MD5`\\-encrypted passwords could be created using [PQencryptPassword()](https://www.postgresql.org/docs/10/libpq-misc.html#LIBPQ-PQENCRYPTPASSWORD). This new function can also create [SCRAM-SHA-256](https://www.postgresql.org/docs/10/auth-pg-hba-conf.html \"20.1. The pg_hba.conf File\")\\-encrypted passwords.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Support indexes on partitioned tables",
      "description": "An “index” on a partitioned table is not a physical index across the whole partitioned table, but rather a template for automatically creating similar indexes on each partition of the table.\n\nIf the partition key is part of the index's column set, a partitioned index may be declared `UNIQUE`. It will represent a valid uniqueness constraint across the whole partitioned table, even though each physical index only enforces uniqueness within its own partition.\n\nThe new command [ALTER INDEX ATTACH PARTITION](https://www.postgresql.org/docs/11/sql-alterindex.html \"ALTER INDEX\") causes an existing index on a partition to be associated with a matching index template for its partitioned table. This provides flexibility in setting up a new partitioned index for an existing partitioned table.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Álvaro Herrera",
        "Amit Langote"
      ]
    },
    {
      "title": "Add all [window function](https://www.postgresql.org/docs/11/sql-select.html#SQL-WINDOW \"WINDOW Clause\") framing options specified by SQL:2011",
      "description": "Specifically, allow `RANGE` mode to use `PRECEDING` and `FOLLOWING` to select rows having grouping values within plus or minus the specified offset. Add `GROUPS` mode to include plus or minus the number of peer groups. Frame exclusion syntax was also added.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Oliver Ford",
        "Tom Lane"
      ]
    },
    {
      "title": "Add SHA-2 family of hash functions",
      "description": "Specifically, [sha224()](https://www.postgresql.org/docs/11/functions-binarystring.html#FUNCTIONS-BINARYSTRING-OTHER \"Table 9.12. Other Binary String Functions\"), `sha256()`, `sha384()`, `sha512()` were added.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Add partition introspection functions",
      "description": "The new function [pg\\_partition\\_root()](https://www.postgresql.org/docs/12/functions-admin.html#FUNCTIONS-INFO-PARTITION \"Table 9.92. Partitioning Information Functions\") returns the top-most parent of a partition tree, [pg\\_partition\\_ancestors()](https://www.postgresql.org/docs/12/functions-admin.html#FUNCTIONS-INFO-PARTITION \"Table 9.92. Partitioning Information Functions\") reports all ancestors of a partition, and [pg\\_partition\\_tree()](https://www.postgresql.org/docs/12/functions-admin.html#FUNCTIONS-INFO-PARTITION \"Table 9.92. Partitioning Information Functions\") displays information about partitions.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow enumerated values to be added more flexibly",
      "description": "Previously, [ALTER TYPE ... ADD VALUE](https://www.postgresql.org/docs/12/sql-altertype.html \"ALTER TYPE\") could not be called in a transaction block, unless it was part of the same transaction that created the enumerated type. Now it can be called in a later transaction, so long as the new enumerated value is not referenced until after it is committed.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update Snowball stemmer dictionaries with support for new languages",
      "description": "This adds word stemming support for Arabic, Indonesian, Irish, Lithuanian, Nepali, and Tamil to [full text search](https://www.postgresql.org/docs/12/textsearch.html \"Chapter 12. Full Text Search\").",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Adjust [to\\_timestamp()](https://www.postgresql.org/docs/12/functions-formatting.html#FUNCTIONS-FORMATTING-TABLE \"Table 9.24. Formatting Functions\")/`to_date()` functions to be more forgiving of template mismatches",
      "description": "This new behavior more closely matches the Oracle functions of the same name.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Change [SIMILAR TO ... ESCAPE NULL](https://www.postgresql.org/docs/13/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP \"9.7.2. SIMILAR TO Regular Expressions\") to return `NULL`",
      "description": "This new behavior matches the SQL specification. Previously a null `ESCAPE` value was taken to mean using the default escape string (a backslash character). This also applies to `` substring(_`text`_ FROM _`pattern`_ ESCAPE _`text`_) ``. The previous behavior has been retained in old views by keeping the original function unchanged.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow partitioned tables to be logically replicated via [publications](https://www.postgresql.org/docs/13/sql-createpublication.html \"CREATE PUBLICATION\")",
      "description": "Previously, partitions had to be replicated individually. Now a partitioned table can be published explicitly, causing all its partitions to be published automatically. Addition/removal of a partition causes it to be likewise added to or removed from the publication. The [CREATE PUBLICATION](https://www.postgresql.org/docs/13/sql-createpublication.html \"CREATE PUBLICATION\") option `publish_via_partition_root` controls whether changes to partitions are published as their own changes or their parent's.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent indexes that use non-default collations from being [added](https://www.postgresql.org/docs/13/sql-altertable.html \"ALTER TABLE\") as a table's unique or primary key constraint",
      "description": "The index's collation must match that of the underlying column, but `ALTER TABLE` previously failed to check this.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow setting the [statistics target](https://www.postgresql.org/docs/13/sql-altertable.html \"ALTER TABLE\") for [extended statistics](https://www.postgresql.org/docs/13/sql-createstatistics.html \"CREATE STATISTICS\")",
      "description": "This is controlled with the new command option `ALTER STATISTICS ... SET STATISTICS`. Previously this was computed based on more general statistics target settings.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add psql commands to display operator classes and operator families",
      "description": "The new commands are [\\\\dAc](https://www.postgresql.org/docs/13/app-psql.html#APP-PSQL-META-COMMANDS \"Meta-Commands\"), `\\dAf`, `\\dAo`, and `\\dAp`.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Generate backup manifests for base backups, and verify them",
      "description": "A new tool [pg\\_verifybackup](https://www.postgresql.org/docs/13/app-pgverifybackup.html \"pg_verifybackup\") can verify backups.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow wide tuples to be always added to almost-empty heap pages",
      "description": "Previously tuples whose insertion would have exceeded the page's [fill factor](https://www.postgresql.org/docs/14/sql-createtable.html \"CREATE TABLE\") were instead added to new pages.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `DISTINCT` to be added to `GROUP BY` to remove duplicate `GROUPING SET` combinations",
      "description": "For example, `GROUP BY CUBE (a,b), CUBE (b,c)` will generate duplicate grouping combinations without `DISTINCT`.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [REINDEX](https://www.postgresql.org/docs/14/sql-reindex.html \"REINDEX\") to change the tablespace of the new index",
      "description": "This is done by specifying a `TABLESPACE` clause. A `--tablespace` option was also added to [reindexdb](https://www.postgresql.org/docs/14/app-reindexdb.html \"reindexdb\") to control this.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [TRUNCATE](https://www.postgresql.org/docs/14/sql-truncate.html \"TRUNCATE\") to operate on foreign tables",
      "description": "The [postgres\\_fdw](https://www.postgresql.org/docs/14/postgres-fdw.html \"F.35. postgres_fdw\") module also now supports this.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow publications to be more easily added to and removed from a subscription",
      "description": "The new syntax is [ALTER SUBSCRIPTION ... ADD/DROP PUBLICATION](https://www.postgresql.org/docs/14/sql-altersubscription.html \"ALTER SUBSCRIPTION\"). This avoids having to specify all publications to add/remove entries.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Provide feature-test macros in `libpq-fe.h` for recently-added libpq features",
      "description": "Historically, applications have usually used compile-time checks of `PG_VERSION_NUM` to test whether a feature is available. But that's normally the server version, which might not be a good guide to libpq's version. `libpq-fe.h` now offers `#define` symbols denoting application-visible features added in v14; the intent is to keep adding symbols for such features in future versions.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [log output](https://www.postgresql.org/docs/15/runtime-config-logging.html#GUC-LOG-DESTINATION) in JSON format",
      "description": "The new setting is `log_destination = jsonlog`.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [GRANT](https://www.postgresql.org/docs/15/sql-grant.html \"GRANT\") to grant permissions to change individual server variables via `SET` and `ALTER SYSTEM`",
      "description": "The new function `has_parameter_privilege()` reports on this privilege.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [publication](https://www.postgresql.org/docs/15/sql-createpublication.html \"CREATE PUBLICATION\") of all tables in a schema",
      "description": "For example, this syntax is now supported: `CREATE PUBLICATION pub1 FOR TABLES IN SCHEMA s1,s2`. `ALTER PUBLICATION` supports a similar syntax. Tables added later to the listed schemas will also be replicated.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for prepared (two-phase) transactions to logical replication",
      "description": "The new [CREATE\\_REPLICATION\\_SLOT](https://www.postgresql.org/docs/15/protocol-replication.html \"55.4. Streaming Replication Protocol\") option is called `TWO_PHASE`. pg\\_recvlogical now supports a new `--two-phase` option during slot creation.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL functions to monitor the directory contents of logical replication slots",
      "description": "The new functions are [pg\\_ls\\_logicalsnapdir()](https://www.postgresql.org/docs/15/functions-admin.html#FUNCTIONS-ADMIN-GENFILE-TABLE \"Table 9.99. Generic File Access Functions\"), `pg_ls_logicalmapdir()`, and `pg_ls_replslotdir()`. They can be run by members of the predefined `pg_monitor` role.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add system view [pg\\_stat\\_subscription\\_stats](https://www.postgresql.org/docs/15/monitoring-stats.html#MONITORING-PG-STAT-SUBSCRIPTION-STATS \"28.2.9. pg_stat_subscription_stats\") to report on subscriber activity",
      "description": "The new function [pg\\_stat\\_reset\\_subscription\\_stats()](https://www.postgresql.org/docs/15/monitoring-stats.html#MONITORING-STATS-FUNCTIONS \"28.2.24. Statistics Functions\") allows resetting these statistics counters.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for `HEADER` option in [COPY](https://www.postgresql.org/docs/15/sql-copy.html \"COPY\") text format",
      "description": "The new option causes the column names to be output, and optionally verified on input.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add regular expression functions for compatibility with other relational systems",
      "description": "The new functions are [regexp\\_count()](https://www.postgresql.org/docs/15/functions-string.html#FUNCTIONS-STRING-OTHER \"Table 9.10. Other String Functions and Operators\"), `regexp_instr()`, `regexp_like()`, and `regexp_substr()`. Some new optional arguments were also added to `regexp_replace()`.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new [pg\\_basebackup](https://www.postgresql.org/docs/15/app-pgbasebackup.html \"pg_basebackup\") option `--target` to control the base backup location",
      "description": "The new options are `server` to write the backup locally and `blackhole` to discard the backup (for testing).",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new protocol message [TARGET](https://www.postgresql.org/docs/15/protocol-replication.html#PROTOCOL-REPLICATION-BASE-BACKUP) to specify a new `COPY` method to be used for base backups",
      "description": "[pg\\_basebackup](https://www.postgresql.org/docs/15/app-pgbasebackup.html \"pg_basebackup\") now uses this method.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new protocol message [COMPRESSION](https://www.postgresql.org/docs/15/protocol-replication.html#PROTOCOL-REPLICATION-BASE-BACKUP) and `COMPRESSION_DETAIL` to specify the compression method and options (Robert Haas) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new module [basebackup\\_to\\_shell](https://www.postgresql.org/docs/15/basebackup-to-shell.html \"F.5. basebackup_to_shell\") as an example of a custom backup target (Robert Haas) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new module [basic\\_archive](https://www.postgresql.org/docs/15/basic-archive.html \"F.6. basic_archive\") as an example of performing archiving via a library (Nathan Bossart) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add new module [pg\\_walinspect](https://www.postgresql.org/docs/15/pgwalinspect.html \"F.37. pg_walinspect\")",
      "description": "This gives SQL\\-level output similar to [pg\\_waldump](https://www.postgresql.org/docs/15/pgwaldump.html \"pg_waldump\").",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Remove the server variable `vacuum_defer_cleanup_age`",
      "description": "This has been unnecessary since [hot\\_standby\\_feedback](https://www.postgresql.org/docs/16/runtime-config-replication.html#GUC-HOT-STANDBY-FEEDBACK) and [replication slots](https://www.postgresql.org/docs/16/warm-standby.html#STREAMING-REPLICATION-SLOTS \"27.2.6. Replication Slots\") were added.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Role inheritance now controls the default inheritance status of member roles added during [GRANT](https://www.postgresql.org/docs/16/sql-grant.html \"GRANT\")",
      "description": "The role's default inheritance behavior can be overridden with the new `GRANT ... WITH INHERIT` clause. This allows inheritance of some roles and not others because the members' inheritance status is set at `GRANT` time. Previously the inheritance status of member roles was controlled only by the role's inheritance status, and changes to a role's inheritance status affected all previous and future member roles.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow custom ICU collation rules to be created",
      "description": "This is done using [CREATE COLLATION](https://www.postgresql.org/docs/16/sql-createcollation.html \"CREATE COLLATION\")'s new `RULES` clause, as well as new options for [CREATE DATABASE](https://www.postgresql.org/docs/16/sql-createdatabase.html \"CREATE DATABASE\"), [createdb](https://www.postgresql.org/docs/16/app-createdb.html \"createdb\"), and [initdb](https://www.postgresql.org/docs/16/app-initdb.html \"initdb\").",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [logical decoding](https://www.postgresql.org/docs/16/logicaldecoding.html \"Chapter 49. Logical Decoding\") on standbys",
      "description": "Snapshot WAL records are required for logical slot creation but cannot be created on standbys. To avoid delays, the new function [pg\\_log\\_standby\\_snapshot()](https://www.postgresql.org/docs/16/functions-admin.html#FUNCTIONS-SNAPSHOT-SYNCHRONIZATION-TABLE \"Table 9.94. Snapshot Synchronization Functions\") allows creation of such records.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow parallel application of logical replication",
      "description": "The [CREATE SUBSCRIPTION](https://www.postgresql.org/docs/16/sql-createsubscription.html \"CREATE SUBSCRIPTION\") `STREAMING` option now supports `parallel` to enable application of large transactions by parallel workers. The number of parallel workers is controlled by the new server variable [max\\_parallel\\_apply\\_workers\\_per\\_subscription](https://www.postgresql.org/docs/16/runtime-config-replication.html#GUC-MAX-PARALLEL-APPLY-WORKERS-PER-SUBSCRIPTION). Wait events [LogicalParallelApplyMain](https://www.postgresql.org/docs/16/monitoring-stats.html#WAIT-EVENT-ACTIVITY-TABLE \"Table 28.5. Wait Events of Type Activity\"), `LogicalParallelApplyStateChange`, and `LogicalApplySendData` were also added. Column `leader_pid` was added to system view [pg\\_stat\\_subscription](https://www.postgresql.org/docs/16/monitoring-stats.html#MONITORING-PG-STAT-SUBSCRIPTION \"28.2.8. pg_stat_subscription\") to track parallel activity.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add SQL/JSON constructors",
      "description": "The new functions [JSON\\_ARRAY()](https://www.postgresql.org/docs/16/functions-json.html#FUNCTIONS-JSON-CREATION-TABLE \"Table 9.47. JSON Creation Functions\"), [JSON\\_ARRAYAGG()](https://www.postgresql.org/docs/16/functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE \"Table 9.59. General-Purpose Aggregate Functions\"), `JSON_OBJECT()`, and `JSON_OBJECTAGG()` are part of the SQL standard.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add psql command [\\\\drg](https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-DRG) to show role membership details",
      "description": "The `Member of` output column has been removed from `\\du` and `\\dg` because this new command displays this information in more detail.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add pg\\_dump control of dumping child tables and partitions",
      "description": "The new options are `--table-and-children`, `--exclude-table-and-children`, and `--exclude-table-data-and-children`.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add options to [createuser](https://www.postgresql.org/docs/16/app-createuser.html \"createuser\") to control more user options",
      "description": "Specifically, the new options control the valid-until date, bypassing of row-level security, and role membership.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Deprecate [createuser](https://www.postgresql.org/docs/16/app-createuser.html \"createuser\") option `--role`",
      "description": "This option could be easily confused with new createuser role membership options, so option `--member-of` has been added with the same functionality. The `--role` option can still be used.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pgindent](https://www.postgresql.org/docs/16/source.html \"Chapter 56. PostgreSQL Coding Conventions\") options",
      "description": "The new options are `--show-diff`, `--silent-diff`, `--commit`, and `--help`, and allow multiple `--exclude` options. Also require the typedef file to be explicitly specified. Options `--code-base` and `--build` were also removed.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the schemas of required extensions to be referenced in extension scripts using the new syntax `@extschema:referenced_extension_name@` (Regina Obe) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "[pg\\_basebackup](https://www.postgresql.org/docs/17/app-pgbasebackup.html \"pg_basebackup\") now supports incremental backup.",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the grouping of file system reads with the new system variable [io\\_combine\\_limit](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-IO-COMBINE-LIMIT) (Thomas Munro, Andres Freund, Melanie Plageman, Nazir Bilal Yavuz) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Create system view [pg\\_stat\\_checkpointer](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-PG-STAT-CHECKPOINTER-VIEW \"27.2.15. pg_stat_checkpointer\")",
      "description": "Relevant columns have been removed from [pg\\_stat\\_bgwriter](https://www.postgresql.org/docs/17/monitoring-stats.html#PG-STAT-BGWRITER-VIEW \"Table 27.24. pg_stat_bgwriter View\") and added to this new system view.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for incremental file system backup",
      "description": "Incremental backups can be created using [pg\\_basebackup](https://www.postgresql.org/docs/17/app-pgbasebackup.html \"pg_basebackup\")'s new `--incremental` option. The new application [pg\\_combinebackup](https://www.postgresql.org/docs/17/app-pgcombinebackup.html \"pg_combinebackup\") allows manipulation of base and incremental file system backups.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add clearer [ALTER TABLE](https://www.postgresql.org/docs/17/sql-altertable.html \"ALTER TABLE\") method to set a column to the default statistics target",
      "description": "The new syntax is `ALTER TABLE ... SET STATISTICS DEFAULT`; using `SET STATISTICS -1` is still supported.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the use of an [ENUM](https://www.postgresql.org/docs/17/datatype-enum.html \"8.7. Enumerated Types\") added via [ALTER TYPE](https://www.postgresql.org/docs/17/sql-altertype.html \"ALTER TYPE\") if the type was created in the same transaction",
      "description": "This was previously disallowed.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add libpq function to change role passwords",
      "description": "The new function, [PQchangePassword()](https://www.postgresql.org/docs/17/libpq-misc.html#LIBPQ-PQCHANGEPASSWORD), hashes the new password before sending it to the server.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [reindexdb](https://www.postgresql.org/docs/17/app-reindexdb.html \"reindexdb\"), [vacuumdb](https://www.postgresql.org/docs/17/app-vacuumdb.html \"vacuumdb\"), and [clusterdb](https://www.postgresql.org/docs/17/app-clusterdb.html \"clusterdb\") to process objects in all databases matching a pattern",
      "description": "The new option `--all` controls this behavior.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [amcheck](https://www.postgresql.org/docs/17/amcheck.html \"F.1. amcheck — tools to verify table and index consistency\") to check for unique constraint violations using new option `--checkunique` (Anastasia Lubennikova, Pavel Borisov, Maxim Orlov) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow extensions to define [custom wait events](https://www.postgresql.org/docs/17/xfunc-c.html#XFUNC-ADDIN-WAIT-EVENTS \"36.10.12. Custom Wait Events\")",
      "description": "Custom wait events have been added to [postgres\\_fdw](https://www.postgresql.org/docs/17/postgres-fdw.html \"F.36. postgres_fdw — access data stored in external PostgreSQL servers\") and [dblink](https://www.postgresql.org/docs/17/dblink.html \"F.11. dblink — connect to other PostgreSQL databases\").",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    }
  ],
  "performance": [
    {
      "title": "Improved query parallelism",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Significant general performance improvements",
      "description": "",
      "sinceVersion": "10.0",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Improved monitoring and control",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Hash indexes must be rebuilt after pg\\_upgrade\\-ing from any previous major PostgreSQL version",
      "description": "Major hash index improvements necessitated this requirement. pg\\_upgrade will create a script to assist with this.",
      "sinceVersion": "10.0",
      "significant": true,
      "contributors": [
        "Mithun Cy",
        "Robert Haas",
        "Amit Kapila"
      ]
    },
    {
      "title": "Improve ability of parallel workers to return pre-sorted data",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Rushabh Lathia"
      ]
    },
    {
      "title": "Improve hash index performance",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Amit Kapila",
        "Mithun Cy",
        "Ashutosh Sharma"
      ]
    },
    {
      "title": "Improve accuracy in determining if a BRIN index scan is beneficial",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "David Rowley",
        "Emre Hasegeli"
      ]
    },
    {
      "title": "Allow faster GiST inserts and updates by reusing index space more efficiently",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "Reduce page locking during vacuuming of GIN indexes",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Andrey Borodin"
      ]
    },
    {
      "title": "Reduce locking required to change table parameters",
      "description": "For example, changing a table's [effective\\_io\\_concurrency](https://www.postgresql.org/docs/10/runtime-config-resource.html#GUC-EFFECTIVE-IO-CONCURRENCY) setting can now be done with a more lightweight lock.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Simon Riggs",
        "Fabrízio Mello"
      ]
    },
    {
      "title": "Improve performance of queries affected by row-level security restrictions",
      "description": "The optimizer now has more knowledge about where it can place RLS filter conditions, allowing better plans to be generated while still enforcing the RLS conditions safely.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Speed up aggregate functions that calculate a running sum using `numeric`\\-type arithmetic, including some variants of `SUM()`, `AVG()`, and `STDDEV()`",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Improve performance of character encoding conversions by using radix trees",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Kyotaro Horiguchi",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Reduce expression evaluation overhead during query execution, as well as plan node calling overhead",
      "description": "This is particularly helpful for queries that process many rows.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Improve sort performance of the `macaddr` data type",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Brandur Leach"
      ]
    },
    {
      "title": "Reduce statistics tracking overhead in sessions that reference many thousands of relations",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Aleksander Alekseev"
      ]
    },
    {
      "title": "Reduce log chatter about the starting and stopping of launcher subprocesses",
      "description": "These are now `DEBUG1`\\-level messages.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reduce message verbosity of lower-numbered debug levels controlled by [log\\_min\\_messages](https://www.postgresql.org/docs/10/runtime-config-logging.html#GUC-LOG-MIN-MESSAGES)",
      "description": "This also changes the verbosity of [client\\_min\\_messages](https://www.postgresql.org/docs/10/runtime-config-client.html#GUC-CLIENT-MIN-MESSAGES) debug levels.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "Add [SCRAM-SHA-256](https://www.postgresql.org/docs/10/auth-methods.html#AUTH-PASSWORD \"20.3.2. Password Authentication\") support for password negotiation and storage",
      "description": "This provides better security than the existing `md5` negotiation and storage method.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "After creating or unlinking files, perform an fsync on their parent directory",
      "description": "This reduces the risk of data loss after a power failure.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Reduce configuration changes necessary to perform streaming backup and replication",
      "description": "Specifically, the defaults were changed for [wal\\_level](https://www.postgresql.org/docs/10/runtime-config-wal.html#GUC-WAL-LEVEL), [max\\_wal\\_senders](https://www.postgresql.org/docs/10/runtime-config-replication.html#GUC-MAX-WAL-SENDERS), [max\\_replication\\_slots](https://www.postgresql.org/docs/10/runtime-config-replication.html#GUC-MAX-REPLICATION-SLOTS), and [hot\\_standby](https://www.postgresql.org/docs/10/runtime-config-replication.html#GUC-HOT-STANDBY) to make them suitable for these usages out-of-the-box.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Magnus Hagander",
        "Dang Minh Huong"
      ]
    },
    {
      "title": "Improve performance of hot standby replay with better tracking of Access Exclusive locks",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Simon Riggs",
        "David Rowley"
      ]
    },
    {
      "title": "Speed up two-phase commit recovery performance",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Stas Kelvich",
        "Nikhil Sontakke",
        "Michael Paquier"
      ]
    },
    {
      "title": "Improve speed of `VACUUM`'s removal of trailing empty heap pages",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Claudio Freire",
        "Álvaro Herrera"
      ]
    },
    {
      "title": "Improve psql's `\\d` (display relation) and `\\dD` (display domain) commands to show collation, nullable, and default properties in separate columns",
      "description": "Previously they were shown in a single “Modifiers” column.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Peter Eisentraut"
      ]
    },
    {
      "title": "Improve psql's tab completion",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Jeff Janes",
        "Ian Barwick",
        "Andreas Karlsson",
        "Sehrope Sarkuni",
        "Thomas Munro",
        "Kevin Grittner",
        "Dagfinn Ilmari Mannsåker"
      ]
    },
    {
      "title": "Improve pg\\_basebackup's handling of which directories to skip",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "David Steele"
      ]
    },
    {
      "title": "Make `pg_ctl start --wait` detect server-ready by watching `postmaster.pid`, not by attempting connections",
      "description": "The postmaster has been changed to report its ready-for-connections status in `postmaster.pid`, and pg\\_ctl now examines that file to detect whether startup is complete. This is more efficient and reliable than the old method, and it eliminates postmaster log entries about rejected connection attempts during startup.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reduce pg\\_ctl's reaction time when waiting for postmaster start/stop",
      "description": "pg\\_ctl now probes ten times per second when waiting for a postmaster state change, rather than once per second.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Change to two-part release version numbering",
      "description": "Release numbers will now have two parts (e.g., `10.1`) rather than three (e.g., `9.6.3`). Major versions will now increase just the first number, and minor releases will increase just the second number. Release branches will be referred to by single numbers (e.g., `10` rather than `9.6`). This change is intended to reduce user confusion about what is a major or minor release of PostgreSQL.",
      "sinceVersion": "10.0",
      "significant": true,
      "contributors": [
        "Peter Eisentraut",
        "Tom Lane"
      ]
    },
    {
      "title": "Improve behavior of pgindent",
      "description": "We have switched to a new version of pg\\_bsd\\_indent based on recent improvements made by the FreeBSD project. This fixes numerous small bugs that led to odd C code formatting decisions. Most notably, lines within parentheses (such as in a multi-line function call) are now uniformly indented to match the opening paren, even if that would result in code extending past the right margin.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Piotr Stefaniak",
        "Tom Lane"
      ]
    },
    {
      "title": "Add slab-like memory allocator for efficient fixed-size allocations",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Improve support for 64-bit atomics",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "In [postgres\\_fdw](https://www.postgresql.org/docs/10/postgres-fdw.html \"F.34. postgres_fdw\"), push aggregate functions to the remote server, when possible",
      "description": "This reduces the amount of data that must be passed from the remote server, and offloads aggregate computation from the requesting server.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Jeevan Chalke",
        "Ashutosh Bapat"
      ]
    },
    {
      "title": "Improve [cube](https://www.postgresql.org/docs/10/cube.html \"F.10. cube\")'s handling of zero-dimensional cubes",
      "description": "This also improves handling of `infinite` and `NaN` values.",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reduce locking when pgstattuple examines hash indexes",
      "description": "",
      "sinceVersion": "10.0",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Improvements to partitioning functionality, including:",
      "description": "* Add support for partitioning by a hash key\n* Add support for `PRIMARY KEY`, `FOREIGN KEY`, indexes, and triggers on partitioned tables\n* Allow creation of a “default” partition for storing data that does not match any of the remaining partitions\n* `UPDATE` statements that change a partition key column now cause affected rows to be moved to the appropriate partitions\n* Improve `SELECT` performance through enhanced partition elimination strategies during query planning and execution",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve `SELECT` performance through enhanced partition elimination strategies during query planning and execution",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improvements to parallelism, including:",
      "description": "* `CREATE INDEX` can now use parallel processing while building a B-tree index\n* Parallelization is now possible in `CREATE TABLE ... AS`, `CREATE MATERIALIZED VIEW`, and certain queries using `UNION`\n* Parallelized hash joins and parallelized sequential scans now perform better",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Parallelized hash joins and parallelized sequential scans now perform better",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Optional Just-in-Time (JIT) compilation for some SQL code, speeding evaluation of expressions",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Many other useful performance improvements, including the ability to avoid a table rewrite for `ALTER TABLE ... ADD COLUMN` with a non-null column default",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow faster partition elimination during query processing",
      "description": "This speeds access to partitioned tables with many partitions.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Amit Langote",
        "David Rowley",
        "Dilip Kumar"
      ]
    },
    {
      "title": "Allow partition scans to more efficiently use parallel workers",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Amit Khandekar",
        "Robert Haas",
        "Amul Sul"
      ]
    },
    {
      "title": "Allow `LIMIT` to be passed to parallel workers",
      "description": "This allows workers to reduce returned results and use targeted index scans.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Robert Haas",
        "Tom Lane"
      ]
    },
    {
      "title": "Improve performance of sequential scans with many parallel workers",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "David Rowley"
      ]
    },
    {
      "title": "Improve performance of monotonically increasing index additions",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Pavan Deolasee",
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Improve performance of hash index scans",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Ashutosh Sharma"
      ]
    },
    {
      "title": "Add predicate locking for hash, GiST and GIN indexes",
      "description": "This reduces the likelihood of serialization conflicts in serializable-mode transactions.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Shubham Barai"
      ]
    },
    {
      "title": "Add prefix-match operator `text` `^@` `text`, which is supported by SP-GiST",
      "description": "This is similar to using _`var`_ `LIKE 'word%'` with a btree index, but it is more efficient.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Ildus Kurbangaliev"
      ]
    },
    {
      "title": "Improve selection of the most common values for statistics",
      "description": "Previously, the most common values (MCVs) were identified based on their frequency compared to all column values. Now, MCVs are chosen based on their frequency compared to the non-MCV values. This improves the robustness of the algorithm for both uniform and non-uniform distributions.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Jeff Janes",
        "Dean Rasheed"
      ]
    },
    {
      "title": "Improve selectivity estimates for `>=` and `<=`",
      "description": "Previously, such cases used the same selectivity estimates as `>` and `<`, respectively, unless the comparison constants are MCVs. This change is particularly helpful for queries involving `BETWEEN` with small ranges.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Reduce _`var`_ `=` _`var`_ to _`var`_ `IS NOT NULL` where equivalent",
      "description": "This leads to better selectivity estimates.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Improve optimizer's row count estimates for `EXISTS` and `NOT EXISTS` queries",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Add [Just-in-Time](https://www.postgresql.org/docs/11/jit.html \"Chapter 32. Just-in-Time Compilation (JIT)\") (JIT) compilation of some parts of query plans to improve execution speed",
      "description": "This feature requires LLVM to be available. It is not currently enabled by default, even in builds that support it.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Improve performance of committing multiple concurrent transactions",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Amit Kapila"
      ]
    },
    {
      "title": "Reduce memory usage for queries using set-returning functions in their target lists",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Improve the speed of aggregate computations",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Improve logging of LDAP errors",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Thomas Munro"
      ]
    },
    {
      "title": "Fill the unused portion of force-switched WAL segment files with zeros for improved compressibility",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Chapman Flack"
      ]
    },
    {
      "title": "Allow replication slots to be advanced programmatically, rather than be consumed by subscribers",
      "description": "This allows efficient advancement of replication slots when the contents do not need to be consumed. This is performed by `pg_replication_slot_advance()`.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Petr Jelinek"
      ]
    },
    {
      "title": "Support domains over composite types",
      "description": "Also allow PL/Perl, PL/Python, and PL/Tcl to handle composite-domain function arguments and results. Also improve PL/Python domain handling.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "title": "Improve tab completion for `ALTER INDEX RESET`/`SET`",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Masahiko Sawada"
      ]
    },
    {
      "title": "Reduce the number of files copied by [pg\\_rewind](https://www.postgresql.org/docs/11/app-pgrewind.html \"pg_rewind\")",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "title": "Speed up lookups of built-in functions by OID",
      "description": "The previous binary search has been replaced by a lookup array.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Speed up construction of query results",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Improve speed of access to system caches",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Andres Freund"
      ]
    },
    {
      "title": "Add a generational memory allocator which is optimized for serial allocation/deallocation",
      "description": "This reduces memory usage for logical decoding.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Tomas Vondra"
      ]
    },
    {
      "title": "Enhance [amcheck](https://www.postgresql.org/docs/11/amcheck.html \"F.2. amcheck\") to check that each heap tuple has an index entry",
      "description": "",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Peter Geoghegan"
      ]
    },
    {
      "title": "Widen `pg_stat_statement`'s query ID to 64 bits",
      "description": "This greatly reduces the chance of query ID hash collisions. The query ID can now potentially display as a negative value.",
      "sinceVersion": "11.0",
      "significant": false,
      "contributors": [
        "Robert Haas"
      ]
    },
    {
      "title": "General performance improvements, including:",
      "description": "* Optimizations to space utilization and read/write performance for B-tree indexes\n* Partitioning performance enhancements, including improved query performance on tables with thousands of partitions, improved insertion performance with [INSERT](https://www.postgresql.org/docs/12/sql-insert.html \"INSERT\") and [COPY](https://www.postgresql.org/docs/12/sql-copy.html \"COPY\"), and the ability to execute [ALTER TABLE ATTACH PARTITION](https://www.postgresql.org/docs/12/sql-altertable.html#SQL-ALTERTABLE-ATTACH-PARTITION) without blocking queries\n* Automatic (but overridable) inlining of [common table expressions](https://www.postgresql.org/docs/12/queries-with.html \"7.8. WITH Queries (Common Table Expressions)\") (CTEs)\n* Reduction of WAL overhead for creation of [GiST](https://www.postgresql.org/docs/12/gist.html \"Chapter 64. GiST Indexes\"), [GIN](https://www.postgresql.org/docs/12/gin.html \"Chapter 66. GIN Indexes\"), and [SP-GiST](https://www.postgresql.org/docs/12/spgist.html \"Chapter 65. SP-GiST Indexes\") indexes\n* Support for covering [GiST](https://www.postgresql.org/docs/12/gist.html \"Chapter 64. GiST Indexes\") indexes, via the [INCLUDE](https://www.postgresql.org/docs/12/indexes-index-only-scans.html \"11.9. Index-Only Scans and Covering Indexes\") clause\n* Multi-column most-common-value (MCV) statistics can be defined via [CREATE STATISTICS](https://www.postgresql.org/docs/12/sql-createstatistics.html \"CREATE STATISTICS\"), to support better plans for queries that test several non-uniformly-distributed columns",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": [
        "CTEs"
      ]
    },
    {
      "title": "Optimizations to space utilization and read/write performance for B-tree indexes",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Partitioning performance enhancements, including improved query performance on tables with thousands of partitions, improved insertion performance with [INSERT](https://www.postgresql.org/docs/12/sql-insert.html \"INSERT\") and [COPY](https://www.postgresql.org/docs/12/sql-copy.html \"COPY\"), and the ability to execute [ALTER TABLE ATTACH PARTITION](https://www.postgresql.org/docs/12/sql-altertable.html#SQL-ALTERTABLE-ATTACH-PARTITION) without blocking queries",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Multi-column most-common-value (MCV) statistics can be defined via [CREATE STATISTICS](https://www.postgresql.org/docs/12/sql-createstatistics.html \"CREATE STATISTICS\"), to support better plans for queries that test several non-uniformly-distributed columns",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enhancements to administrative functionality, including:",
      "description": "* [REINDEX CONCURRENTLY](https://www.postgresql.org/docs/12/sql-reindex.html#SQL-REINDEX-CONCURRENTLY \"Rebuilding Indexes Concurrently\") can rebuild an index without blocking writes to its table\n* [pg\\_checksums](https://www.postgresql.org/docs/12/app-pgchecksums.html \"pg_checksums\") can enable/disable page checksums (used for detecting data corruption) in an offline cluster\n* Progress reporting statistics for [CREATE INDEX](https://www.postgresql.org/docs/12/sql-createindex.html \"CREATE INDEX\"), [REINDEX](https://www.postgresql.org/docs/12/sql-reindex.html \"REINDEX\"), [CLUSTER](https://www.postgresql.org/docs/12/sql-cluster.html \"CLUSTER\"), [VACUUM FULL](https://www.postgresql.org/docs/12/sql-vacuum.html \"VACUUM\"), and [pg\\_checksums](https://www.postgresql.org/docs/12/app-pgchecksums.html \"pg_checksums\")",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance by using a new algorithm for output of [real](https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-FLOAT \"8.1.3. Floating-Point Types\") and `double precision` values",
      "description": "Previously, displayed floating-point values were rounded to 6 (for `real`) or 15 (for `double precision`) digits by default, adjusted by the value of [extra\\_float\\_digits](https://www.postgresql.org/docs/12/runtime-config-client.html#GUC-EXTRA-FLOAT-DIGITS). Now, whenever `extra_float_digits` is more than zero (as it now is by default), only the minimum number of digits required to preserve the exact binary value are output. The behavior is the same as before when `extra_float_digits` is set to zero or less.\n\nAlso, formatting of floating-point exponents is now uniform across platforms: two digits are used unless three are necessary. In previous releases, Windows builds always printed three digits.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "In new btree indexes, the maximum index entry length is reduced by eight bytes, to improve handling of duplicate entries",
      "description": "This means that a [REINDEX](https://www.postgresql.org/docs/12/sql-reindex.html \"REINDEX\") operation on an index pg\\_upgrade'd from a previous release could potentially fail.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Cause [DROP IF EXISTS FUNCTION](https://www.postgresql.org/docs/12/sql-dropfunction.html \"DROP FUNCTION\")/`PROCEDURE`/`AGGREGATE`/`ROUTINE` to generate an error if no argument list is supplied and there are multiple matching objects",
      "description": "Also improve the error message in such cases.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Treat object-name columns in the [information\\_schema](https://www.postgresql.org/docs/12/information-schema.html \"Chapter 36. The Information Schema\") views as being of type `name`, not `varchar`",
      "description": "Per the SQL standard, object-name columns in the `information_schema` views are declared as being of domain type `sql_identifier`. In PostgreSQL, the underlying catalog columns are really of type `name`. This change makes `sql_identifier` be a domain over `name`, rather than `varchar` as before. This eliminates a semantic mismatch in comparison and sorting behavior, which can greatly improve the performance of queries on `information_schema` views that restrict an object-name column. Note however that inequality restrictions, for example\n\nSELECT ... FROM information_schema.tables WHERE table_name < 'foo';\n\nwill now use “C”\\-locale comparison semantics by default, rather than the database's default collation as before. Sorting on these columns will also follow “C” ordering rules. The previous behavior (and inefficiency) can be enforced by adding a `COLLATE \"default\"` clause.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of many operations on partitioned tables",
      "description": "Allow tables with thousands of child partitions to be processed efficiently by operations that only affect a small number of partitions.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve speed of `COPY` into partitioned tables (David Rowley) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "[ALTER TABLE ATTACH PARTITION](https://www.postgresql.org/docs/12/sql-altertable.html \"ALTER TABLE\") is now performed with reduced locking requirements (Robert Haas) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve psql `\\d` and `\\z` display of partitioned tables (Pavel Stehule, Michaël Paquier, Álvaro Herrera) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance and space utilization of btree indexes with many duplicates",
      "description": "Previously, duplicate index entries were stored unordered within their duplicate groups. This caused overhead during index inserts, wasted space due to excessive page splits, and it reduced `VACUUM`'s ability to recycle entire pages. Duplicate index entries are now sorted in heap-storage order.\n\nIndexes pg\\_upgrade'd from previous releases will not have these benefits.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow multi-column btree indexes to be smaller",
      "description": "Internal pages and min/max leaf page indicators now only store index keys until the change key, rather than all indexed keys. This also improves the locality of index access.\n\nIndexes pg\\_upgrade'd from previous releases will not have these benefits.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": [
        "Peter Geoghegan",
        "Heikki Linnakangas"
      ]
    },
    {
      "title": "Improve speed of btree index insertions by reducing locking overhead (Alexander Korotkov) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce the WAL write overhead of GiST, GIN, and SP-GiST index creation (Anastasia Lubennikova, Andrey V. Lepikhov) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow index-only scans to be more efficient on indexes with many columns (Konstantin Knizhnik) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the performance of vacuum scans of GiST indexes (Andrey Borodin, Konstantin Kuznetsov, Heikki Linnakangas) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce locking requirements for index renaming (Peter Eisentraut) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [CREATE STATISTICS](https://www.postgresql.org/docs/12/sql-createstatistics.html \"CREATE STATISTICS\") to create most-common-value statistics for multiple columns",
      "description": "This improves optimization for queries that test several columns, requiring an estimate of the combined effect of several `WHERE` clauses. If the columns are correlated and have non-uniform distributions then multi-column statistics will allow much better estimates.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve optimization of partition and `UNION ALL` queries that have only a single child (David Rowley) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve processing of [domains](https://www.postgresql.org/docs/12/domains.html \"8.18. Domain Types\") that have no check constraints",
      "description": "Domains that are being used purely as type aliases no longer cause optimization difficulties.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve optimizer's ability to verify that partial indexes with `IS NOT NULL` conditions are usable in queries",
      "description": "Usability can now be recognized in more cases where the calling query involves casts or large `` _`x`_ IN (_`array`_) `` clauses.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Compute `ANALYZE` statistics using the collation defined for each column",
      "description": "Previously, the database's default collation was used for all statistics. This potentially gives better optimizer behavior for columns with non-default collations.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve selectivity estimates for inequality comparisons on [ctid](https://www.postgresql.org/docs/12/ddl-system-columns.html \"5.5. System Columns\") columns (Edmund Horner) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve optimization of joins on columns of type [tid](https://www.postgresql.org/docs/12/datatype-oid.html \"8.19. Object Identifier Types\")",
      "description": "These changes primarily improve the efficiency of self-joins on `ctid` columns.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Fix the leakproofness designations of some btree comparison operators and support functions",
      "description": "This allows some optimizations that previously would not have been applied in the presence of security barrier views or row-level security.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Speed up keyword lookup (John Naylor, Joerg Sonnenberger, Tom Lane) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve search performance for multi-byte characters in `position()` and related functions (Heikki Linnakangas) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve speed in converting strings to `int2` or `int4` integers (Andres Freund) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use `pread()` and `pwrite()` for random I/O",
      "description": "This reduces the number of system calls required for I/O.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the speed of setting the [process title](https://www.postgresql.org/docs/12/runtime-config-logging.html#GUC-UPDATE-PROCESS-TITLE) on FreeBSD (Thomas Munro) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce the default value of [autovacuum\\_vacuum\\_cost\\_delay](https://www.postgresql.org/docs/12/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-COST-DELAY) to 2ms",
      "description": "This allows autovacuum operations to proceed faster by default.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [VACUUM](https://www.postgresql.org/docs/12/sql-vacuum.html \"VACUUM\") and `CREATE TABLE` options to prevent `VACUUM` from truncating trailing empty pages",
      "description": "These options are `vacuum_truncate` and `toast.vacuum_truncate`. Use of these options reduces `VACUUM`'s locking requirements, but prevents returning disk space to the operating system.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow `VACUUM` to skip index cleanup",
      "description": "This change adds a `VACUUM` command option `INDEX_CLEANUP` as well as a table storage option `vacuum_index_cleanup`. Use of this option reduces the ability to reclaim space and can lead to index bloat, but it is helpful when the main goal is to freeze old tuples.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow data type [name](https://www.postgresql.org/docs/12/datatype-character.html#DATATYPE-CHARACTER-SPECIAL-TABLE \"Table 8.5. Special Character Types\") to more seamlessly be compared to other text types",
      "description": "Type `name` now behaves much like a domain over type `text` that has default collation “C”. This allows cross-type comparisons to be processed more efficiently.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the accuracy of statistical aggregates like [variance()](https://www.postgresql.org/docs/12/functions-aggregate.html#FUNCTIONS-AGGREGATE-STATISTICS-TABLE \"Table 9.56. Aggregate Functions for Statistics\") by using more precise algorithms (Dean Rasheed) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [date\\_trunc()](https://www.postgresql.org/docs/12/functions-datetime.html#FUNCTIONS-DATETIME-TABLE \"Table 9.31. Date/Time Functions\") to have an additional argument to control the time zone",
      "description": "This is faster and simpler than using the `AT TIME ZONE` clause.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve tab completion of `CREATE TABLE`, `CREATE TRIGGER`, `CREATE EVENT TRIGGER`, `ANALYZE`, `EXPLAIN`, `VACUUM`, `ALTER TABLE`, `ALTER INDEX`, `ALTER DATABASE`, and `ALTER INDEX ALTER COLUMN` (Dagfinn Ilmari Mannsåker, Tatsuro Yamada, Michaël Paquier, Tom Lane, Justin Pryzby) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve precision of pgbench's `--rate` option (Tom Lane) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve pgbench's error reporting with clearer messages and return codes (Peter Eisentraut) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Decouple the order of operations in a parallel pg\\_dump from the order used by a subsequent parallel pg\\_restore",
      "description": "This allows pg\\_restore to perform more-fully-parallelized parallel restores, especially in cases where the original dump was not done in parallel. Scheduling of a parallel pg\\_dump is also somewhat improved.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [planner support function](https://www.postgresql.org/docs/12/xfunc-optimization.html \"37.11. Function Optimization Information\") interfaces to improve optimizer estimates, inlining, and indexing for functions",
      "description": "This allows extensions to create planner support functions that can provide function-specific selectivity, cost, and row-count estimates that can depend on the function's arguments. Support functions can also supply simplified representations and index conditions, greatly expanding optimization possibilities.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Simplify renumbering manually-assigned OIDs, and establish a new project policy for management of such OIDs",
      "description": "Patches that manually assign OIDs for new built-in objects (such as new functions) should now randomly choose OIDs in the range 8000—9999\\. At the end of a development cycle, the OIDs used by committed patches will be renumbered down to lower numbers, currently somewhere in the 4_`xxx`_ range, using the new [renumber\\_oids.pl](https://www.postgresql.org/docs/12/system-catalog-initial-data.html#SYSTEM-CATALOG-OID-ASSIGNMENT \"70.2.2. OID Assignment\") script. This approach should greatly reduce the odds of OID collisions between different in-process patches.\n\nWhile there is no specific policy reserving any OIDs for external use, it is recommended that forks and other projects needing private manually-assigned OIDs use numbers in the high 7_`xxx`_ range. This will avoid conflicts with recently-merged patches, and it should be a long time before the core project reaches that range.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use pandoc, not lynx, for generating plain-text documentation output files",
      "description": "This affects only the `INSTALL` file generated during `make dist` and the seldom-used plain-text `postgres.txt` output file. Pandoc produces better output than lynx and avoids some locale/encoding issues. Pandoc version 1.13 or later is required.",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve optimizer cost accounting for postgres\\_fdw queries (Etsuro Fujita) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve [oid2name](https://www.postgresql.org/docs/12/oid2name.html \"oid2name\") and [vacuumlo](https://www.postgresql.org/docs/12/vacuumlo.html \"vacuumlo\") option handling to match other commands (Tatsuro Yamada) ",
      "description": "",
      "sinceVersion": "12.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Space savings and performance gains from de-duplication of B-tree index entries",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improved performance for queries that use aggregates or partitioned tables",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Better query planning when using extended statistics",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Rename various [wait events](https://www.postgresql.org/docs/13/monitoring-stats.html#WAIT-EVENT-TABLE \"Table 27.4. Wait Event Types\") to improve consistency (Fujii Masao, Tom Lane) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "More efficiently store [duplicates](https://www.postgresql.org/docs/13/btree-implementation.html#BTREE-DEDUPLICATION \"63.4.2. Deduplication\") in B-tree indexes",
      "description": "This allows efficient B-tree indexing of low-cardinality columns by storing duplicate keys only once. Users upgrading with [pg\\_upgrade](https://www.postgresql.org/docs/13/pgupgrade.html \"pg_upgrade\") will need to use [REINDEX](https://www.postgresql.org/docs/13/sql-reindex.html \"REINDEX\") to make an existing index use this feature.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [GIN](https://www.postgresql.org/docs/13/gin.html \"Chapter 66. GIN Indexes\") indexes to more efficiently handle `!` (NOT) clauses in `tsquery` searches (Nikita Glukhov, Alexander Korotkov, Tom Lane, Julien Rouhaud) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the optimizer's [selectivity](https://www.postgresql.org/docs/13/planner-stats-details.html \"Chapter 71. How the Planner Uses Statistics\") estimation for containment/match operators (Tom Lane) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the performance of sorting [inet](https://www.postgresql.org/docs/13/datatype-net-types.html#DATATYPE-INET \"8.9.1. inet\") values (Brandur Leach) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow inserts, not only updates and deletes, to trigger vacuuming activity in [autovacuum](https://www.postgresql.org/docs/13/routine-vacuuming.html#AUTOVACUUM \"24.1.6. The Autovacuum Daemon\")",
      "description": "Previously, insert-only activity would trigger auto-analyze but not auto-vacuum, on the grounds that there could not be any dead tuples to remove. However, a vacuum scan has other useful side-effects such as setting page-all-visible bits, which improves the efficiency of index-only scans. Also, allowing an insert-only table to receive periodic vacuuming helps to spread out the work of “freezing” old tuples, so that there is not suddenly a large amount of freezing work to do when the entire table reaches the anti-wraparound threshold all at once.\n\nIf necessary, this behavior can be adjusted with the new parameters [autovacuum\\_vacuum\\_insert\\_threshold](https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-INSERT-THRESHOLD) and [autovacuum\\_vacuum\\_insert\\_scale\\_factor](https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-INSERT-SCALE-FACTOR), or the equivalent table storage options.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance when replaying [DROP DATABASE](https://www.postgresql.org/docs/13/sql-dropdatabase.html \"DROP DATABASE\") commands when many tablespaces are in use (Fujii Masao) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance for [truncation](https://www.postgresql.org/docs/13/sql-truncate.html \"TRUNCATE\") of very large relations (Kirk Jamison) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve retrieval of the leading bytes of [TOAST](https://www.postgresql.org/docs/13/storage-toast.html \"69.2. TOAST\")'ed values",
      "description": "Previously, compressed out-of-line TOAST values were fully fetched even when it's known that only some leading bytes are needed. Now, only enough data to produce the result is fetched.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of [LISTEN](https://www.postgresql.org/docs/13/sql-listen.html \"LISTEN\")/`NOTIFY` (Martijn van Oosterhout, Tom Lane) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Speed up conversions of integers to text (David Fetter) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce memory usage for query strings and extension scripts that contain many SQL statements (Amit Langote) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve control of prepared statement parameter logging",
      "description": "The GUC setting [log\\_parameter\\_max\\_length](https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-PARAMETER-MAX-LENGTH) controls the maximum length of parameter values output during logging of non-error statements, while [log\\_parameter\\_max\\_length\\_on\\_error](https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-PARAMETER-MAX-LENGTH-ON-ERROR) does the same for logging of statements with errors. Previously, prepared statement parameters were never logged during errors.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of wait events on BSD\\-based systems (Thomas Munro) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add alternate version of [jsonb\\_set()](https://www.postgresql.org/docs/13/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE \"Table 9.47. JSON Processing Functions\") with improved `NULL` handling",
      "description": "The new function, `jsonb_set_lax()`, handles a `NULL` new value by either setting the specified key to a JSON null, deleting the key, raising an exception, or returning the `jsonb` value unmodified, as requested.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the performance and accuracy of the `numeric` type's [square root](https://www.postgresql.org/docs/13/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE \"Table 9.5. Mathematical Functions\") (`sqrt`) and natural log (`ln`) functions (Dean Rasheed) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add function [trim\\_scale()](https://www.postgresql.org/docs/13/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE \"Table 9.5. Mathematical Functions\") to reduce the scale of a `numeric` value by removing trailing zeros (Pavel Stehule) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of simple PL/pgSQL expressions (Tom Lane, Amit Langote) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of PL/pgSQL functions that use immutable expressions (Konstantin Knizhnik) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve output of psql's [\\\\d](https://www.postgresql.org/docs/13/app-psql.html#APP-PSQL-META-COMMANDS \"Meta-Commands\") for TOAST tables (Justin Pryzby) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow pgbench to partition its “accounts” table",
      "description": "This allows performance testing of partitioning.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reformat tables containing [function and operator information](https://www.postgresql.org/docs/13/functions.html \"Chapter 9. Functions and Operators\") for better clarity (Tom Lane) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Update [Snowball stemmer](https://www.postgresql.org/docs/13/textsearch-dictionaries.html#TEXTSEARCH-SNOWBALL-DICTIONARY \"12.6.6. Snowball Dictionary\") dictionaries used by full text search",
      "description": "This adds Greek stemming and improves Danish and French stemming.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce the probability of SysV resource key collision on Unix platforms (Tom Lane) ",
      "description": "",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Implement internal lists as arrays, rather than a chain of cells",
      "description": "This improves performance for queries that access many objects.",
      "sinceVersion": "13.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Numerous performance improvements have been made for parallel queries, heavily-concurrent workloads, partitioned tables, logical replication, and vacuuming.",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "B-tree index updates are managed more efficiently, reducing index bloat.",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Extended statistics can now be collected on expressions, allowing better planning results for complex queries.",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "libpq now has the ability to pipeline multiple queries, which can boost throughput over high-latency connections.",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Prevent the containment operators (`<@` and `@>`) for [intarray](https://www.postgresql.org/docs/14/intarray.html \"F.18. intarray\") from using GiST indexes",
      "description": "Previously a full GiST index scan was required, so just avoid that and scan the heap, which is faster. Indexes created for this purpose should be removed.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow vacuum to skip index vacuuming when the number of removable index entries is insignificant",
      "description": "The vacuum parameter [INDEX\\_CLEANUP](https://www.postgresql.org/docs/14/sql-vacuum.html \"VACUUM\") has a new default of `auto` that enables this optimization.",
      "sinceVersion": "14.0",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Speed up vacuuming of databases with many relations (Tatsuhito Kasahara) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce the default value of [vacuum\\_cost\\_page\\_miss](https://www.postgresql.org/docs/14/runtime-config-resource.html#GUC-VACUUM-COST-PAGE-MISS) to better reflect current hardware capabilities (Peter Geoghegan) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Increase warning time and hard limit before transaction id and multi-transaction wraparound",
      "description": "This should reduce the possibility of failures that occur without having issued warnings about wraparound.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the performance of updates and deletes on partitioned tables with many partitions",
      "description": "This change greatly reduces the planner's overhead for such cases, and also allows updates/deletes on partitioned tables to use execution-time partition pruning.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow some [GiST](https://www.postgresql.org/docs/14/gist.html \"Chapter 65. GiST Indexes\") indexes to be built by presorting the data",
      "description": "Presorting happens automatically and allows for faster index creation and smaller indexes.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow efficient heap scanning of a range of [TIDs](https://www.postgresql.org/docs/14/datatype-oid.html#DATATYPE-OID-TABLE \"Table 8.26. Object Identifier Types\")",
      "description": "Previously a sequential scan was required for non-equality `TID` specifications.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the speed of computing MVCC [visibility snapshots](https://www.postgresql.org/docs/14/mvcc.html \"Chapter 13. Concurrency Control\") on systems with many CPUs and high session counts",
      "description": "This also improves performance when there are many idle sessions.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the I/O performance of parallel sequential scans",
      "description": "This was done by allocating blocks in groups to [parallel workers](https://www.postgresql.org/docs/14/runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS).",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of [regular expression](https://www.postgresql.org/docs/14/functions-matching.html#FUNCTIONS-POSIX-REGEXP \"9.7.3. POSIX Regular Expressions\") searches (Tom Lane) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Dramatically improve Unicode normalization performance",
      "description": "This speeds [normalize()](https://www.postgresql.org/docs/14/functions-string.html \"9.4. String Functions and Operators\") and `IS NORMALIZED`.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve logging of [auto-vacuum](https://www.postgresql.org/docs/14/routine-vacuuming.html#AUTOVACUUM \"25.1.6. The Autovacuum Daemon\") and auto-analyze",
      "description": "This reports I/O timings for auto-vacuum and auto-analyze if [track\\_io\\_timing](https://www.postgresql.org/docs/14/runtime-config-statistics.html#GUC-TRACK-IO-TIMING) is enabled. Also, report buffer read and dirty rates for auto-analyze.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Speed truncation of small tables during recovery on clusters with a large number of shared buffers (Kirk Jamison) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow file system sync at the start of crash recovery on Linux",
      "description": "By default, PostgreSQL opens and fsyncs each data file in the database cluster at the start of crash recovery. A new setting, [recovery\\_init\\_sync\\_method](https://www.postgresql.org/docs/14/runtime-config-error-handling.html#GUC-RECOVERY-INIT-SYNC-METHOD)`=syncfs`, instead syncs each filesystem used by the cluster. This allows for faster recovery on systems with many database files.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enhance the logical replication API to allow streaming large in-progress transactions",
      "description": "The output functions begin with [stream](https://www.postgresql.org/docs/14/logicaldecoding-output-plugin.html#LOGICALDECODING-OUTPUT-PLUGIN-STREAM-START \"49.6.4.14. Stream Start Callback\"). test\\_decoding also supports these.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enhance logical decoding APIs to handle two-phase commits",
      "description": "This is controlled via [pg\\_create\\_logical\\_replication\\_slot()](https://www.postgresql.org/docs/14/functions-admin.html#FUNCTIONS-REPLICATION \"9.27.6. Replication Management Functions\").",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logical decoding to more efficiently process cache invalidation messages",
      "description": "This allows [logical decoding](https://www.postgresql.org/docs/14/logicaldecoding.html \"Chapter 49. Logical Decoding\") to work efficiently in presence of a large amount of DDL.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow logical replication subscriptions to use binary transfer mode",
      "description": "This is faster than text mode, but slightly less robust.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce the number of keywords that can't be used as column labels without `AS`",
      "description": "There are now 90% fewer restricted keywords.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the performance of [COPY FROM](https://www.postgresql.org/docs/14/sql-copy.html \"COPY\") in binary mode (Bharath Rupireddy, Amit Langote) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow SQL\\-language [functions](https://www.postgresql.org/docs/14/sql-createfunction.html \"CREATE FUNCTION\") and [procedures](https://www.postgresql.org/docs/14/sql-createprocedure.html \"CREATE PROCEDURE\") to use SQL\\-standard function bodies",
      "description": "Previously only string-literal function bodies were supported. When writing a function or procedure in SQL-standard syntax, the body is parsed immediately and stored as a parse tree. This allows better tracking of function dependencies, and can have security benefits.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the accuracy of geometric computations involving infinity (Tom Lane) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve PL/pgSQL's [expression](https://www.postgresql.org/docs/14/plpgsql-expressions.html \"43.4. Expressions\") and [assignment](https://www.postgresql.org/docs/14/plpgsql-statements.html#PLPGSQL-STATEMENTS-ASSIGNMENT \"43.5.1. Assignment\") parsing",
      "description": "This change allows assignment to array slices and nested record fields.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of repeated [CALL](https://www.postgresql.org/docs/14/plpgsql-transactions.html \"43.8. Transaction Management\")s within plpgsql procedures (Pavel Stehule, Tom Lane) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Enhance libpq's [target\\_session\\_attrs](https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-PARAMKEYWORDS \"34.1.2. Parameter Key Words\") parameter options",
      "description": "The new options are `read-only`, `primary`, `standby`, and `prefer-standby`.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the output format of libpq's [PQtrace()](https://www.postgresql.org/docs/14/libpq-control.html \"34.11. Control Functions\") (Aya Iwata, Álvaro Herrera) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow psql's `\\df` and `\\do` commands to specify function and operator argument types",
      "description": "This helps reduce the number of matches printed for overloaded names.",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve tab completion (Vignesh C, Michael Paquier, Justin Pryzby, Georgios Kokolatos, Julien Rouhaud) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Various improvements in valgrind error detection ability (Álvaro Herrera, Peter Geoghegan) ",
      "description": "",
      "sinceVersion": "14.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Performance improvements, particularly for in-memory and on-disk sorting.",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve consistency of `interval` parsing with trailing periods",
      "description": "Numbers with trailing periods were rejected on some platforms.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the algorithm used to compute [random()](https://www.postgresql.org/docs/15/functions-math.html#FUNCTIONS-MATH-RANDOM-TABLE \"Table 9.6. Random Functions\")",
      "description": "This will cause `random()`'s results to differ from what was emitted by prior versions, even for the same seed value.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve planning time for queries referencing partitioned tables",
      "description": "This change helps when only a few of many partitions are relevant.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve foreign key behavior of updates on partitioned tables that move rows between partitions",
      "description": "Previously, such updates ran a delete action on the source partition and an insert action on the target partition. PostgreSQL will now run an update action on the partition root, providing cleaner semantics.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow btree indexes on system and [TOAST](https://www.postgresql.org/docs/15/storage-toast.html \"73.2. TOAST\") tables to efficiently store duplicates",
      "description": "Previously de-duplication was disabled for these types of indexes.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve lookup performance of [GiST](https://www.postgresql.org/docs/15/gist.html \"Chapter 68. GiST Indexes\") indexes that were built using sorting (Aliaksandr Kalenik, Sergei Shoulbakov, Andrey Borodin) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Speed up encoding validation of UTF\\-8 text by processing 16 bytes at a time",
      "description": "This will improve text-heavy operations like [COPY FROM](https://www.postgresql.org/docs/15/sql-copy.html \"COPY\").",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance for sorts that exceed [work\\_mem](https://www.postgresql.org/docs/15/runtime-config-resource.html#GUC-WORK-MEM)",
      "description": "When the sort data no longer fits in `work_mem`, switch to a batch sorting algorithm that uses more output streams than before.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance and reduce memory consumption of in-memory sorts (Ronan Dunklau, David Rowley, Thomas Munro, John Naylor) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the performance of [window functions](https://www.postgresql.org/docs/15/functions-window.html \"9.22. Window Functions\") that use `row_number()`, `rank()`, `dense_rank()` and `count()` (David Rowley) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the performance of spinlocks on high-core-count ARM64 systems (Geoffrey Blake) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Run the checkpointer and bgwriter processes during crash recovery",
      "description": "This helps to speed up long crash recoveries.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve overflow detection when casting values to [interval](https://www.postgresql.org/docs/15/datatype-datetime.html \"8.5. Date/Time Types\") (Joe Koshakow) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of psql's `\\copy` command, by sending data in larger chunks (Heikki Linnakangas) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve psql's tab completion (Shinya Kato, Dagfinn Ilmari Mannsåker, Peter Smith, Koyu Tanigawa, Ken Kato, David Fetter, Haiying Tang, Peter Eisentraut, Álvaro Herrera, Tom Lane, Masahiko Sawada) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of dumping databases with many objects",
      "description": "This will also improve the performance of [pg\\_upgrade](https://www.postgresql.org/docs/15/pgupgrade.html \"pg_upgrade\").",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve parallel pg\\_dump's performance for tables with large TOAST tables (Tom Lane) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve pg\\_receivewal's ability to restart at the proper WAL location",
      "description": "Previously, pg\\_receivewal would start based on the WAL file stored in the local archive directory, or at the sending server's current WAL flush location. With this change, if the sending server is running Postgres 15 or later, the local archive directory is empty, and a replication slot is specified, the replication slot's restart point will be used.",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve descriptions of some transaction WAL records reported by pg\\_waldump (Masahiko Sawada, Michael Paquier) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve amcheck sanity checks for TOAST tables (Mark Dilger) ",
      "description": "",
      "sinceVersion": "15.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of vacuum freezing",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the accuracy of [GIN](https://www.postgresql.org/docs/16/gin.html \"Chapter 70. GIN Indexes\") index access optimizer costs (Ronan Dunklau) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow more efficient addition of heap and index pages (Andres Freund) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow window functions to use the faster [ROWS](https://www.postgresql.org/docs/16/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS \"4.2.8. Window Function Calls\") mode internally when `RANGE` mode is active but unnecessary (David Rowley) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow optimization of always-increasing window functions [ntile()](https://www.postgresql.org/docs/16/functions-window.html#FUNCTIONS-WINDOW-TABLE \"Table 9.64. General-Purpose Window Functions\"), `cume_dist()` and `percent_rank()` (David Rowley) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance by caching [RANGE](https://www.postgresql.org/docs/16/ddl-partitioning.html#DDL-PARTITIONING-OVERVIEW \"5.11.1. Overview\") and `LIST` partition lookups (Amit Langote, Hou Zhijie, David Rowley) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the speed of updating the [process title](https://www.postgresql.org/docs/16/runtime-config-logging.html#GUC-UPDATE-PROCESS-TITLE) (David Rowley) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Reduce overhead of memory allocations (Andres Freund, David Rowley) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of server variable management (Tom Lane) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve user-column handling of [pg\\_ident.conf](https://www.postgresql.org/docs/16/runtime-config-file-locations.html \"20.2. File Locations\") to match `pg_hba.conf`",
      "description": "Specifically, add support for `all`, role membership with `+`, and regular expressions with a leading slash. Any user name that matches these patterns must be double-quoted.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance for [logical replication apply](https://www.postgresql.org/docs/16/logical-replication-architecture.html \"31.7. Architecture\") without a primary key",
      "description": "Specifically, `REPLICA IDENTITY FULL` can now use btree indexes rather than sequentially scanning the table to find matches.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Perform logical replication [SELECT](https://www.postgresql.org/docs/16/sql-select.html \"SELECT\") and DML actions as the table owner",
      "description": "This improves security and now requires subscription owners to be either superusers or to have [SET ROLE](https://www.postgresql.org/docs/16/sql-set-role.html \"SET ROLE\") permission on all roles owning tables in the replication set. The previous behavior of performing all operations as the subscription owner can be enabled with the subscription [run\\_as\\_owner](https://www.postgresql.org/docs/16/sql-createsubscription.html \"CREATE SUBSCRIPTION\") option.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow underscores in integer and numeric [constants](https://www.postgresql.org/docs/16/sql-syntax-lexical.html#SQL-SYNTAX-BIT-STRINGS \"4.1.2.5. Bit-String Constants\")",
      "description": "This can improve readability for long strings of digits.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add support for enhanced numeric literals in SQL/JSON paths",
      "description": "For example, allow hexadecimal, octal, and binary integers and underscores between digits.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the handling of full text highlighting function [ts\\_headline()](https://www.postgresql.org/docs/16/functions-textsearch.html#TEXTSEARCH-FUNCTIONS-TABLE \"Table 9.43. Text Search Functions\") for `OR` and `NOT` expressions (Tom Lane) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve the accuracy of numeric [power()](https://www.postgresql.org/docs/16/functions-math.html#FUNCTIONS-MATH-FUNC-TABLE \"Table 9.5. Mathematical Functions\") for integer exponents (Dean Rasheed) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Various psql tab completion improvements (Vignesh C, Aleksander Alekseev, Dagfinn Ilmari Mannsåker, Shi Yu, Michael Paquier, Ken Kato, Peter Smith) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve pg\\_dump to accept a more consistent compression syntax",
      "description": "Options like `--compress=gzip:5`.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Use new [VACUUM](https://www.postgresql.org/docs/16/sql-vacuum.html \"VACUUM\") options to improve the performance of [vacuumdb](https://www.postgresql.org/docs/16/app-vacuumdb.html \"vacuumdb\") (Tom Lane, Nathan Bossart) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve [pg\\_basebackup](https://www.postgresql.org/docs/16/app-pgbasebackup.html \"pg_basebackup\") to accept numeric compression options",
      "description": "Options like `--compress=server-5` are now supported.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve make\\_ctags and make\\_etags (Yugo Nagata) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve use of extension-based indexes on boolean columns (Zongliang Quan, Tom Lane) ",
      "description": "",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Make [ANALYZE](https://www.postgresql.org/docs/16/sql-analyze.html \"ANALYZE\") on foreign postgres\\_fdw tables more efficient",
      "description": "The postgres\\_fdw option [analyze\\_sampling](https://www.postgresql.org/docs/16/postgres-fdw.html#POSTGRES-FDW-OPTIONS-COST-ESTIMATION \"F.38.1.3. Cost Estimation Options\") controls the sampling method.",
      "sinceVersion": "16.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "New memory management system for `VACUUM`, which reduces memory consumption and can improve overall vacuuming performance.",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Various query performance improvements, including for sequential reads using streaming I/O, write throughput under high concurrency, and searches over multiple values in a [btree](https://www.postgresql.org/docs/17/btree.html \"64.1. B-Tree Indexes\") index.",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Logical replication enhancements, including:",
      "description": "* Failover control\n* [pg\\_createsubscriber](https://www.postgresql.org/docs/17/app-pgcreatesubscriber.html \"pg_createsubscriber\"), a utility that creates logical replicas from physical standbys\n* [pg\\_upgrade](https://www.postgresql.org/docs/17/pgupgrade.html \"pg_upgrade\") now preserves logical replication slots on publishers and full subscription state on subscribers. This will allow upgrades to future major versions to continue logical replication without requiring copy to resynchronize.",
      "sinceVersion": "17.0",
      "significant": true,
      "contributors": []
    },
    {
      "title": "Remove server variable old\\_snapshot\\_threshold",
      "description": "This variable allowed vacuum to remove rows that potentially could be still visible to running transactions, causing \"snapshot too old\" errors later if accessed. This feature might be re-added to PostgreSQL later if an improved implementation is found.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow the optimizer to improve CTE plans by considering the statistics and sort order of columns referenced in earlier row output clauses (Jian Guo, Richard Guo, Tom Lane) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve optimization of `IS NOT NULL` and `IS NULL` query restrictions",
      "description": "Remove `IS NOT NULL` restrictions from queries on `NOT NULL` columns and eliminate scans on `NOT NULL` columns if `IS NULL` is specified.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve optimization of range values when using containment operators <@ and @> (Kim Johan Andersson, Jian He) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve optimization of the `LIMIT` clause on partitioned tables, inheritance parents, and `UNION ALL` queries (Andy Fan, David Rowley) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [btree](https://www.postgresql.org/docs/17/btree.html \"64.1. B-Tree Indexes\") indexes to more efficiently find a set of values, such as those supplied by `IN` clauses using constants (Peter Geoghegan, Matthias van de Meent) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow vacuum to more efficiently remove and freeze tuples",
      "description": "WAL traffic caused by vacuum is also more compact.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow vacuum to more efficiently store tuple references",
      "description": "Additionally, vacuum is no longer silently limited to one gigabyte of memory when [maintenance\\_work\\_mem](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-MAINTENANCE-WORK-MEM) or [autovacuum\\_work\\_mem](https://www.postgresql.org/docs/17/runtime-config-resource.html#GUC-AUTOVACUUM-WORK-MEM) are higher.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance when checking roles with many memberships (Nathan Bossart) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance of heavily-contended WAL writes (Bharath Rupireddy) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve performance when transferring large blocks of data to a client (Melih Mutlu) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve control over resetting statistics",
      "description": "Allow [pg\\_stat\\_reset\\_shared()](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-STATS-FUNCS-TABLE \"Table 27.36. Additional Statistics Functions\") (with no arguments) and pg\\_stat\\_reset\\_shared(`NULL`) to reset all shared statistics. Allow pg\\_stat\\_reset\\_shared('slru') and [pg\\_stat\\_reset\\_slru()](https://www.postgresql.org/docs/17/monitoring-stats.html#MONITORING-STATS-FUNCS-TABLE \"Table 27.36. Additional Statistics Functions\") (with no arguments) to reset SLRU statistics, which was already possible with pg\\_stat\\_reset\\_slru(NULL).",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve [logical decoding](https://www.postgresql.org/docs/17/logicaldecoding.html \"Chapter 47. Logical Decoding\") performance in cases where there are many subtransactions (Masahiko Sawada) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve `EXPLAIN`'s display of SubPlan nodes and output parameters (Tom Lane, Dean Rasheed) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve psql display of default and empty privileges",
      "description": "Command `\\dp` now displays `(none)` for empty privileges; default still displays as empty.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve psql tab completion (Dagfinn Ilmari Mannsåker, Gilles Darold, Christoph Heiss, Steve Chavez, Vignesh C, Pavel Borisov, Jian He) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Add [pg\\_restore](https://www.postgresql.org/docs/17/app-pgrestore.html \"pg_restore\") option `--transaction-size` to allow object restores in transaction batches",
      "description": "This allows the performance benefits of transaction batches without the problems of excessively large transaction blocks.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Improve documentation for using `jsonpath` for predicate checks (David Wheeler) ",
      "description": "",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Allow [ALTER OPERATOR](https://www.postgresql.org/docs/17/sql-alteroperator.html \"ALTER OPERATOR\") to set more optimization attributes",
      "description": "This is useful for extensions.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Replace savepoint names stored in `pg_stat_statements` with placeholders",
      "description": "This greatly reduces the number of entries needed to record [SAVEPOINT](https://www.postgresql.org/docs/17/sql-savepoint.html \"SAVEPOINT\"), [RELEASE SAVEPOINT](https://www.postgresql.org/docs/17/sql-release-savepoint.html \"RELEASE SAVEPOINT\"), and [ROLLBACK TO SAVEPOINT](https://www.postgresql.org/docs/17/sql-rollback-to.html \"ROLLBACK TO SAVEPOINT\") commands.",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    },
    {
      "title": "Replace the two-phase commit GIDs stored in `pg_stat_statements` with placeholders",
      "description": "This greatly reduces the number of entries needed to record [PREPARE TRANSACTION](https://www.postgresql.org/docs/17/sql-prepare-transaction.html \"PREPARE TRANSACTION\"), [COMMIT PREPARED](https://www.postgresql.org/docs/17/sql-commit-prepared.html \"COMMIT PREPARED\"), and [ROLLBACK PREPARED](https://www.postgresql.org/docs/17/sql-rollback-prepared.html \"ROLLBACK PREPARED\").",
      "sinceVersion": "17.0",
      "significant": false,
      "contributors": []
    }
  ],
  "security": [
    {
      "cve": "CVE-2017-15099",
      "title": "Ensure that `INSERT ... ON CONFLICT DO UPDATE` checks table permissions and RLS policies in all cases",
      "description": "The update path of `INSERT ... ON CONFLICT DO UPDATE` requires `SELECT` permission on the columns of the arbiter index, but it failed to check for that in the case of an arbiter specified by constraint name. In addition, for a table with row level security enabled, it failed to check updated rows against the table's `SELECT` policies (regardless of how the arbiter index was specified). (CVE-2017-15099)",
      "fixedIn": "10.1",
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "cve": "CVE-2017-15098",
      "title": "Fix crash due to rowtype mismatch in `json{b}_populate_recordset()`",
      "description": "These functions used the result rowtype specified in the `FROM ... AS` clause without checking that it matched the actual rowtype of the supplied tuple value. If it didn't, that would usually result in a crash, though disclosure of server memory contents seems possible as well. (CVE-2017-15098)",
      "fixedIn": "10.1",
      "contributors": [
        "Michael Paquier",
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2017-12172",
      "title": "Fix sample server-start scripts to become `$PGUSER` before opening `$PGLOG`",
      "description": "Previously, the postmaster log file was opened while still running as root. The database owner could therefore mount an attack against another system user by making `$PGLOG` be a symbolic link to some other file, which would then become corrupted by appending log messages.\n\nBy default, these scripts are not installed anywhere. Users who have made use of them will need to manually recopy them, or apply the same changes to their modified versions. If the existing `$PGLOG` file is root-owned, it will need to be removed or renamed out of the way before restarting the server with the corrected script. (CVE-2017-12172)",
      "fixedIn": "10.1",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2007-2138",
      "title": "Require schema qualification to cast to a temporary type when using functional cast syntax",
      "description": "We have long required invocations of temporary functions to explicitly specify the temporary schema, that is `` pg_temp._`funcname`_(_`args`_) ``. Require this as well for casting to temporary types using functional notation, for example `` pg_temp._`typename`_(_`arg`_) ``. Otherwise it's possible to capture a function call using a temporary object, allowing privilege escalation in much the same ways that we blocked in CVE-2007-2138\\. (CVE-2019-10208)",
      "fixedIn": "10.10",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2020-1720",
      "title": "Add missing permissions checks for `ALTER ... DEPENDS ON EXTENSION`",
      "description": "Marking an object as dependent on an extension did not have any privilege check whatsoever. This oversight allowed any user to mark routines, triggers, materialized views, or indexes as droppable by anyone able to drop an extension. Require that the calling user own the specified object (and hence have privilege to drop it). (CVE-2020-1720)",
      "fixedIn": "10.12",
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Set a secure `search_path` in logical replication walsenders and apply workers",
      "description": "A malicious user of either the publisher or subscriber database could potentially cause execution of arbitrary SQL code by the role running replication, which is often a superuser. Some of the risks here are equivalent to those described in CVE-2018-1058, and are mitigated in this patch by ensuring that the replication sender and receiver execute with empty `search_path` settings. (As with CVE-2018-1058, that change might cause problems for under-qualified names used in replicated tables' DDL.) Other risks are inherent in replicating objects that belong to untrusted roles; the most we can do is document that there is a hazard to consider. (CVE-2020-14349)",
      "fixedIn": "10.14",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Make contrib modules' installation scripts more secure",
      "description": "Attacks similar to those described in CVE-2018-1058 could be carried out against an extension installation script, if the attacker can create objects in either the extension's target schema or the schema of some prerequisite extension. Since extensions often require superuser privilege to install, this can open a path to obtaining superuser privilege. To mitigate this risk, be more careful about the `search_path` used to run an installation script; disable `check_function_bodies` within the script; and fix catalog-adjustment queries used in some contrib modules to ensure they are secure. Also provide documentation to help third-party extension authors make their installation scripts secure. This is not a complete solution; extensions that depend on other extensions can still be at risk if installed carelessly. (CVE-2020-14350)",
      "fixedIn": "10.14",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2020-25695",
      "title": "Block `DECLARE CURSOR ... WITH HOLD` and firing of deferred triggers within index expressions and materialized view queries",
      "description": "This is essentially a leak in the “security restricted operation” sandbox mechanism. An attacker having permission to create non-temporary SQL objects could parlay this leak to execute arbitrary SQL code as a superuser.\n\nThe PostgreSQL Project thanks Etienne Stalmans for reporting this problem. (CVE-2020-25695)",
      "fixedIn": "10.15",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2020-25694",
      "title": "Fix usage of complex connection-string parameters in pg\\_dump, pg\\_restore, clusterdb, reindexdb, and vacuumdb",
      "description": "The `-d` parameter of pg\\_dump and pg\\_restore, or the `--maintenance-db` parameter of the other programs mentioned, can be a “connection string” containing multiple connection parameters rather than just a database name. In cases where these programs need to initiate additional connections, such as parallel processing or processing of multiple databases, the connection string was forgotten and just the basic connection parameters (database name, host, port, and username) were used for the additional connections. This could lead to connection failures if the connection string included any other essential information, such as non-default SSL or GSS parameters. Worse, the connection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. (CVE-2020-25694)",
      "fixedIn": "10.15",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2020-25694",
      "title": "When psql's `\\connect` command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used",
      "description": "This avoids cases where reconnection might fail due to omission of relevant parameters, such as non-default SSL or GSS options. Worse, the reconnection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. This is largely the same problem as just cited for pg\\_dump et al, although psql's behavior is more complex since the user may intentionally override some connection parameters. (CVE-2020-25694)",
      "fixedIn": "10.15",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2020-25696",
      "title": "Prevent psql's `\\gset` command from modifying specially-treated variables",
      "description": "`\\gset` without a prefix would overwrite whatever variables the server told it to. Thus, a compromised server could set specially-treated variables such as `PROMPT1`, giving the ability to execute arbitrary shell code in the user's session.\n\nThe PostgreSQL Project thanks Nick Cleaton for reporting this problem. (CVE-2020-25696)",
      "fixedIn": "10.15",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2021-32027",
      "title": "Prevent integer overflows in array subscripting calculations",
      "description": "The array code previously did not complain about cases where an array's lower bound plus length overflows an integer. This resulted in later entries in the array becoming inaccessible (since their subscripts could not be written as integers), but more importantly it confused subsequent assignment operations. This could lead to memory overwrites, with ensuing crashes or unwanted data modifications. (CVE-2021-32027)",
      "fixedIn": "10.17",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2021-32028",
      "title": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists",
      "description": "If the `UPDATE` list contains any multi-column sub-selects (which give rise to junk columns in addition to the results proper), the `UPDATE` path would end up storing tuples that include the values of the extra junk columns. That's fairly harmless in the short run, but if new columns are added to the table then the values would become accessible, possibly leading to malfunctions if they don't match the datatypes of the added columns.\n\nIn addition, in versions supporting cross-partition updates, a cross-partition update triggered by such a case had the reverse problem: the junk columns were removed from the target list, typically causing an immediate crash due to malfunction of the multi-column sub-select mechanism. (CVE-2021-32028)",
      "fixedIn": "10.17",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2021-3449",
      "title": "Disallow SSL renegotiation more completely",
      "description": "SSL renegotiation has been disabled for some time, but the server would still cooperate with a client-initiated renegotiation request. A maliciously crafted renegotiation request could result in a server crash (see OpenSSL issue CVE-2021-3449). Disable the feature altogether on OpenSSL versions that permit doing so, which are 1.1.0h and newer.",
      "fixedIn": "10.18",
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "cve": "CVE-2006-2313",
      "title": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data",
      "description": "An incorrectly-encoded multibyte character near the end of a string could cause various processing loops to run past the string's terminating NUL, with results ranging from no detectable issue to a program crash, depending on what happens to be in the following memory. This is reminiscent of CVE-2006-2313, although these particular cases do not appear to have interesting security consequences.",
      "fixedIn": "10.18",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "fixedIn": "10.19",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "fixedIn": "10.19",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2018-1052",
      "title": "Fix processing of partition keys containing multiple expressions",
      "description": "This error led to crashes or, with carefully crafted input, disclosure of arbitrary backend memory. (CVE-2018-1052)",
      "fixedIn": "10.2",
      "contributors": [
        "Álvaro Herrera",
        "David Rowley"
      ]
    },
    {
      "cve": "CVE-2018-1053",
      "title": "Ensure that all temporary files made by pg\\_upgrade are non-world-readable",
      "description": "pg\\_upgrade normally restricts its temporary files to be readable and writable only by the calling user. But the temporary file containing `pg_dumpall -g` output would be group- or world-readable, or even writable, if the user's `umask` setting allows. In typical usage on multi-user machines, the `umask` and/or the working directory's permissions would be tight enough to prevent problems; but there may be people using pg\\_upgrade in scenarios where this oversight would permit disclosure of database passwords to unfriendly eyes. (CVE-2018-1053)",
      "fixedIn": "10.2",
      "contributors": [
        "Tom Lane",
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Autovacuum, `CLUSTER`, `CREATE INDEX`, `REINDEX`, `REFRESH MATERIALIZED VIEW`, and pg\\_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "10.21",
      "contributors": [
        "Sergey Shinderuk",
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2022-2625",
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "This change prevents extension scripts from doing `CREATE OR REPLACE` if there is an existing object that does not belong to the extension. It also prevents `CREATE IF NOT EXISTS` in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\n\nThe PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "fixedIn": "10.22",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Fix permissions checks in `CREATE INDEX`",
      "description": "The fix for CVE-2022-1552 caused `CREATE INDEX` to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg\\_dump issues `CREATE INDEX` before re-granting permissions.",
      "fixedIn": "10.22",
      "contributors": [
        "Nathan Bossart",
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Document how to configure installations and applications to guard against search-path-dependent trojan-horse attacks from other users",
      "description": "Using a `search_path` setting that includes any schemas writable by a hostile user enables that user to capture control of queries and then run arbitrary SQL code with the permissions of the attacked user. While it is possible to write queries that are proof against such hijacking, it is notationally tedious, and it's very easy to overlook holes. Therefore, we now recommend configurations in which no untrusted schemas appear in one's search path. Relevant documentation appears in [Section 5.8.6](https://www.postgresql.org/docs/10/ddl-schemas.html#DDL-SCHEMAS-PATTERNS \"5.8.6. Usage Patterns\") (for database administrators and users), [Section 33.1](https://www.postgresql.org/docs/10/libpq-connect.html \"33.1. Database Connection Control Functions\") (for application authors), [Section 37.15.6](https://www.postgresql.org/docs/10/extend-extensions.html#EXTEND-EXTENSIONS-SECURITY \"37.15.6. Security Considerations for Extensions\") (for extension authors), and [CREATE FUNCTION](https://www.postgresql.org/docs/10/sql-createfunction.html \"CREATE FUNCTION\") (for authors of `SECURITY DEFINER` functions). (CVE-2018-1058)",
      "fixedIn": "10.3",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Avoid use of insecure `search_path` settings in pg\\_dump and other client programs",
      "description": "pg\\_dump, pg\\_upgrade, vacuumdb and other PostgreSQL\\-provided applications were themselves vulnerable to the type of hijacking described in the previous changelog entry; since these applications are commonly run by superusers, they present particularly attractive targets. To make them secure whether or not the installation as a whole has been secured, modify them to include only the `pg_catalog` schema in their `search_path` settings. Autovacuum worker processes now do the same, as well.\n\nIn cases where user-provided functions are indirectly executed by these programs — for example, user-provided functions in index expressions — the tighter `search_path` may result in errors, which will need to be corrected by adjusting those user-provided functions to not assume anything about what search path they are invoked under. That has always been good practice, but now it will be necessary for correct behavior. (CVE-2018-1058)",
      "fixedIn": "10.3",
      "contributors": [
        "Noah Misch",
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2018-1115",
      "title": "Remove public execute privilege from `contrib/adminpack`'s `pg_logfile_rotate()` function",
      "description": "`pg_logfile_rotate()` is a deprecated wrapper for the core function `pg_rotate_logfile()`. When that function was changed to rely on SQL privileges for access control rather than a hard-coded superuser check, `pg_logfile_rotate()` should have been updated as well, but the need for this was missed. Hence, if `adminpack` is installed, any user could request a logfile rotation, creating a minor security issue.\n\nAfter installing this update, administrators should update `adminpack` by performing `ALTER EXTENSION adminpack UPDATE` in each database in which `adminpack` is installed. (CVE-2018-1115)",
      "fixedIn": "10.4",
      "contributors": [
        "Stephen Frost"
      ]
    },
    {
      "cve": "CVE-2018-10915",
      "title": "Fix failure to reset libpq's state fully between connection attempts",
      "description": "An unprivileged user of `dblink` or `postgres_fdw` could bypass the checks intended to prevent use of server-side credentials, such as a `~/.pgpass` file owned by the operating-system user running the server. Servers allowing peer authentication on local connections are particularly vulnerable. Other attacks such as SQL injection into a `postgres_fdw` session are also possible. Attacking `postgres_fdw` in this way requires the ability to create a foreign server object with selected connection parameters, but any user with access to `dblink` could exploit the problem. In general, an attacker with the ability to select the connection parameters for a libpq\\-using application could cause mischief, though other plausible attack scenarios are harder to think of. Our thanks to Andrew Krasichkov for reporting this issue. (CVE-2018-10915)",
      "fixedIn": "10.5",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2018-10925",
      "title": "Fix `INSERT ... ON CONFLICT UPDATE` through a view that isn't just `SELECT * FROM ...`",
      "description": "Erroneous expansion of an updatable view could lead to crashes or “attribute ... has the wrong type” errors, if the view's `SELECT` list doesn't match one-to-one with the underlying table's columns. Furthermore, this bug could be leveraged to allow updates of columns that an attacking user lacks `UPDATE` privilege for, if that user has `INSERT` and `UPDATE` privileges for some other column(s) of the table. Any user could also use it for disclosure of server memory. (CVE-2018-10925)",
      "fixedIn": "10.5",
      "contributors": [
        "Dean Rasheed",
        "Amit Langote"
      ]
    },
    {
      "cve": "CVE-2018-16850",
      "title": "Ensure proper quoting of transition table names when pg\\_dump emits `CREATE TRIGGER ... REFERENCING` commands",
      "description": "This oversight could be exploited by an unprivileged user to gain superuser privileges during the next dump/reload or pg\\_upgrade run. (CVE-2018-16850)",
      "fixedIn": "10.6",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2017-7484",
      "title": "Prevent row-level security policies from being bypassed via selectivity estimators",
      "description": "Some of the planner's selectivity estimators apply user-defined operators to values found in `pg_statistic` (e.g., most-common values). A leaky operator therefore can disclose some of the entries in a data column, even if the calling user lacks permission to read that column. In CVE-2017-7484 we added restrictions to forestall that, but we failed to consider the effects of row-level security. A user who has SQL permission to read a column, but who is forbidden to see certain rows due to RLS policy, might still learn something about those rows' contents via a leaky operator. This patch further tightens the rules, allowing leaky operators to be applied to statistics data only when there is no relevant RLS policy. (CVE-2019-10130)",
      "fixedIn": "10.8",
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "cve": "CVE-2019-10164",
      "title": "Fix buffer-overflow hazards in SCRAM verifier parsing",
      "description": "Any authenticated user could cause a stack-based buffer overflow by changing their own password to a purpose-crafted value. In addition to the ability to crash the PostgreSQL server, this could suffice for executing arbitrary code as the PostgreSQL operating system account.\n\nA similar overflow hazard existed in libpq, which could allow a rogue server to crash a client or perhaps execute arbitrary code as the client's operating system account.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2019-10164)",
      "fixedIn": "10.9",
      "contributors": [
        "Jonathan Katz",
        "Heikki Linnakangas",
        "Michael Paquier"
      ]
    },
    {
      "cve": "CVE-2018-16850",
      "title": "Ensure proper quoting of transition table names when pg\\_dump emits `CREATE TRIGGER ... REFERENCING` commands",
      "description": "This oversight could be exploited by an unprivileged user to gain superuser privileges during the next dump/reload or pg\\_upgrade run. (CVE-2018-16850)",
      "fixedIn": "11.1",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2020-25695",
      "title": "Block `DECLARE CURSOR ... WITH HOLD` and firing of deferred triggers within index expressions and materialized view queries",
      "description": "This is essentially a leak in the “security restricted operation” sandbox mechanism. An attacker having permission to create non-temporary SQL objects could parlay this leak to execute arbitrary SQL code as a superuser.\n\nThe PostgreSQL Project thanks Etienne Stalmans for reporting this problem. (CVE-2020-25695)",
      "fixedIn": "11.10",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2020-25694",
      "title": "Fix usage of complex connection-string parameters in pg\\_dump, pg\\_restore, clusterdb, reindexdb, and vacuumdb",
      "description": "The `-d` parameter of pg\\_dump and pg\\_restore, or the `--maintenance-db` parameter of the other programs mentioned, can be a “connection string” containing multiple connection parameters rather than just a database name. In cases where these programs need to initiate additional connections, such as parallel processing or processing of multiple databases, the connection string was forgotten and just the basic connection parameters (database name, host, port, and username) were used for the additional connections. This could lead to connection failures if the connection string included any other essential information, such as non-default SSL or GSS parameters. Worse, the connection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. (CVE-2020-25694)",
      "fixedIn": "11.10",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2020-25694",
      "title": "When psql's `\\connect` command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used",
      "description": "This avoids cases where reconnection might fail due to omission of relevant parameters, such as non-default SSL or GSS options. Worse, the reconnection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. This is largely the same problem as just cited for pg\\_dump et al, although psql's behavior is more complex since the user may intentionally override some connection parameters. (CVE-2020-25694)",
      "fixedIn": "11.10",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2020-25696",
      "title": "Prevent psql's `\\gset` command from modifying specially-treated variables",
      "description": "`\\gset` without a prefix would overwrite whatever variables the server told it to. Thus, a compromised server could set specially-treated variables such as `PROMPT1`, giving the ability to execute arbitrary shell code in the user's session.\n\nThe PostgreSQL Project thanks Nick Cleaton for reporting this problem. (CVE-2020-25696)",
      "fixedIn": "11.10",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2021-3393",
      "title": "Fix information leakage in constraint-violation error messages",
      "description": "If an `UPDATE` command attempts to move a row to a different partition but finds that it violates some constraint on the new partition, and the columns in that partition are in different physical positions than in the parent table, the error message could reveal the contents of columns that the user does not have `SELECT` privilege on. (CVE-2021-3393)",
      "fixedIn": "11.11",
      "contributors": [
        "Heikki Linnakangas"
      ]
    },
    {
      "cve": "CVE-2021-32027",
      "title": "Prevent integer overflows in array subscripting calculations",
      "description": "The array code previously did not complain about cases where an array's lower bound plus length overflows an integer. This resulted in later entries in the array becoming inaccessible (since their subscripts could not be written as integers), but more importantly it confused subsequent assignment operations. This could lead to memory overwrites, with ensuing crashes or unwanted data modifications. (CVE-2021-32027)",
      "fixedIn": "11.12",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2021-32028",
      "title": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists",
      "description": "If the `UPDATE` list contains any multi-column sub-selects (which give rise to junk columns in addition to the results proper), the `UPDATE` path would end up storing tuples that include the values of the extra junk columns. That's fairly harmless in the short run, but if new columns are added to the table then the values would become accessible, possibly leading to malfunctions if they don't match the datatypes of the added columns.\n\nIn addition, in versions supporting cross-partition updates, a cross-partition update triggered by such a case had the reverse problem: the junk columns were removed from the target list, typically causing an immediate crash due to malfunction of the multi-column sub-select mechanism. (CVE-2021-32028)",
      "fixedIn": "11.12",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2021-32029",
      "title": "Fix possibly-incorrect computation of `UPDATE ... RETURNING` outputs for joined cross-partition updates",
      "description": "If an `UPDATE` for a partitioned table caused a row to be moved to another partition with a physically different row type (for example, one with a different set of dropped columns), computation of `RETURNING` results for that row could produce errors or wrong answers. No error is observed unless the `UPDATE` involves other tables being joined to the target table. (CVE-2021-32029)",
      "fixedIn": "11.12",
      "contributors": [
        "Amit Langote",
        "Etsuro Fujita"
      ]
    },
    {
      "cve": "CVE-2021-3677",
      "title": "Fix mis-planning of repeated application of a projection step",
      "description": "The planner could create an incorrect plan in cases where two ProjectionPaths were stacked on top of each other. The only known way to trigger that situation involves parallel sort operations, but there may be other instances. The result would be crashes or incorrect query results. Disclosure of server memory contents is also possible. (CVE-2021-3677)",
      "fixedIn": "11.13",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2021-3449",
      "title": "Disallow SSL renegotiation more completely",
      "description": "SSL renegotiation has been disabled for some time, but the server would still cooperate with a client-initiated renegotiation request. A maliciously crafted renegotiation request could result in a server crash (see OpenSSL issue CVE-2021-3449). Disable the feature altogether on OpenSSL versions that permit doing so, which are 1.1.0h and newer.",
      "fixedIn": "11.13",
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "cve": "CVE-2006-2313",
      "title": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data",
      "description": "An incorrectly-encoded multibyte character near the end of a string could cause various processing loops to run past the string's terminating NUL, with results ranging from no detectable issue to a program crash, depending on what happens to be in the following memory. This is reminiscent of CVE-2006-2313, although these particular cases do not appear to have interesting security consequences.",
      "fixedIn": "11.13",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "fixedIn": "11.14",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "fixedIn": "11.14",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Autovacuum, `CLUSTER`, `CREATE INDEX`, `REINDEX`, `REFRESH MATERIALIZED VIEW`, and pg\\_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "11.16",
      "contributors": [
        "Sergey Shinderuk",
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2022-2625",
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "This change prevents extension scripts from doing `CREATE OR REPLACE` if there is an existing object that does not belong to the extension. It also prevents `CREATE IF NOT EXISTS` in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\n\nThe PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "fixedIn": "11.17",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Fix permissions checks in `CREATE INDEX`",
      "description": "The fix for CVE-2022-1552 caused `CREATE INDEX` to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg\\_dump issues `CREATE INDEX` before re-granting permissions.",
      "fixedIn": "11.17",
      "contributors": [
        "Nathan Bossart",
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent `CREATE SCHEMA` from defeating changes in `search_path`",
      "description": "Within a `CREATE SCHEMA` command, objects in the prevailing `search_path`, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure `search_path`. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "11.20",
      "contributors": [
        "Alexander Lakhin"
      ]
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "11.20",
      "contributors": [
        "Stephen Frost",
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2023-39417",
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "This restriction guards against SQL-injection hazards for trusted extensions.\n\nThe PostgreSQL Project thanks Micah Gate, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "fixedIn": "11.21",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2023-5868",
      "title": "Fix handling of unknown-type arguments in `DISTINCT` `\"any\"` aggregate functions",
      "description": "This error led to a `text`\\-type value being interpreted as an `unknown`\\-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the `text` value.\n\nThe PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "fixedIn": "11.22",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "11.22",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n\nAlso ensure that the `is_superuser` parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n\nThe PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "11.22",
      "contributors": [
        "Noah Misch",
        "Jelte Fennema-Nio"
      ]
    },
    {
      "cve": "CVE-2017-7484",
      "title": "Prevent row-level security policies from being bypassed via selectivity estimators",
      "description": "Some of the planner's selectivity estimators apply user-defined operators to values found in `pg_statistic` (e.g., most-common values). A leaky operator therefore can disclose some of the entries in a data column, even if the calling user lacks permission to read that column. In CVE-2017-7484 we added restrictions to forestall that, but we failed to consider the effects of row-level security. A user who has SQL permission to read a column, but who is forbidden to see certain rows due to RLS policy, might still learn something about those rows' contents via a leaky operator. This patch further tightens the rules, allowing leaky operators to be applied to statistics data only when there is no relevant RLS policy. (CVE-2019-10130)",
      "fixedIn": "11.3",
      "contributors": [
        "Dean Rasheed"
      ]
    },
    {
      "cve": "CVE-2019-10129",
      "title": "Avoid access to already-freed memory during partition routing error reports",
      "description": "This mistake could lead to a crash, and in principle it might be possible to use it to disclose server memory contents. (CVE-2019-10129)",
      "fixedIn": "11.3",
      "contributors": [
        "Michael Paquier"
      ]
    },
    {
      "cve": "CVE-2019-10164",
      "title": "Fix buffer-overflow hazards in SCRAM verifier parsing",
      "description": "Any authenticated user could cause a stack-based buffer overflow by changing their own password to a purpose-crafted value. In addition to the ability to crash the PostgreSQL server, this could suffice for executing arbitrary code as the PostgreSQL operating system account.\n\nA similar overflow hazard existed in libpq, which could allow a rogue server to crash a client or perhaps execute arbitrary code as the client's operating system account.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2019-10164)",
      "fixedIn": "11.4",
      "contributors": [
        "Jonathan Katz",
        "Heikki Linnakangas",
        "Michael Paquier"
      ]
    },
    {
      "cve": "CVE-2007-2138",
      "title": "Require schema qualification to cast to a temporary type when using functional cast syntax",
      "description": "We have long required invocations of temporary functions to explicitly specify the temporary schema, that is `` pg_temp._`funcname`_(_`args`_) ``. Require this as well for casting to temporary types using functional notation, for example `` pg_temp._`typename`_(_`arg`_) ``. Otherwise it's possible to capture a function call using a temporary object, allowing privilege escalation in much the same ways that we blocked in CVE-2007-2138\\. (CVE-2019-10208)",
      "fixedIn": "11.5",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2019-10209",
      "title": "Fix execution of hashed subplans that require cross-type comparison",
      "description": "Hashed subplans used the outer query's original comparison operator to compare entries of the hash table. This is the wrong thing if that operator is cross-type, since all the hash table entries will be of the subquery's output type. For the set of hashable cross-type operators in core PostgreSQL, this mistake seems nearly harmless on 64-bit machines, but it can result in crashes or perhaps unauthorized disclosure of server memory on 32-bit machines. Extensions might provide hashable cross-type operators that create larger risks. (CVE-2019-10209)",
      "fixedIn": "11.5",
      "contributors": [
        "Tom Lane",
        "Andreas Seltenreich"
      ]
    },
    {
      "cve": "CVE-2020-1720",
      "title": "Add missing permissions checks for `ALTER ... DEPENDS ON EXTENSION`",
      "description": "Marking an object as dependent on an extension did not have any privilege check whatsoever. This oversight allowed any user to mark routines, triggers, materialized views, or indexes as droppable by anyone able to drop an extension. Require that the calling user own the specified object (and hence have privilege to drop it). (CVE-2020-1720)",
      "fixedIn": "11.7",
      "contributors": [
        "Álvaro Herrera"
      ]
    },
    {
      "cve": "CVE-2017-7484",
      "title": "Allow the planner to apply potentially-leaky tests to child-table statistics, if the user can read the corresponding column of the table that's actually named in the query",
      "description": "This change fixes a performance problem for partitioned tables that was created by the fix for CVE-2017-7484\\. That security fix disallowed applying leaky operators to statistics for columns that the current user doesn't have permission to read directly. However, it's somewhat common to grant permissions only on the parent partitioned table and not bother to do so on individual partitions. In such cases, the user can read the column via the parent, so there's no point in this security restriction; it only results in poorer planner estimates than necessary.",
      "fixedIn": "11.7",
      "contributors": [
        "Dilip Kumar",
        "Amit Langote"
      ]
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Set a secure `search_path` in logical replication walsenders and apply workers",
      "description": "A malicious user of either the publisher or subscriber database could potentially cause execution of arbitrary SQL code by the role running replication, which is often a superuser. Some of the risks here are equivalent to those described in CVE-2018-1058, and are mitigated in this patch by ensuring that the replication sender and receiver execute with empty `search_path` settings. (As with CVE-2018-1058, that change might cause problems for under-qualified names used in replicated tables' DDL.) Other risks are inherent in replicating objects that belong to untrusted roles; the most we can do is document that there is a hazard to consider. (CVE-2020-14349)",
      "fixedIn": "11.9",
      "contributors": [
        "Noah Misch"
      ]
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Make contrib modules' installation scripts more secure",
      "description": "Attacks similar to those described in CVE-2018-1058 could be carried out against an extension installation script, if the attacker can create objects in either the extension's target schema or the schema of some prerequisite extension. Since extensions often require superuser privilege to install, this can open a path to obtaining superuser privilege. To mitigate this risk, be more careful about the `search_path` used to run an installation script; disable `check_function_bodies` within the script; and fix catalog-adjustment queries used in some contrib modules to ensure they are secure. Also provide documentation to help third-party extension authors make their installation scripts secure. This is not a complete solution; extensions that depend on other extensions can still be at risk if installed carelessly. (CVE-2020-14350)",
      "fixedIn": "11.9",
      "contributors": [
        "Tom Lane"
      ]
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Autovacuum, `CLUSTER`, `CREATE INDEX`, `REINDEX`, `REFRESH MATERIALIZED VIEW`, and pg\\_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "12.11",
      "contributors": []
    },
    {
      "cve": "CVE-2022-2625",
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "This change prevents extension scripts from doing `CREATE OR REPLACE` if there is an existing object that does not belong to the extension. It also prevents `CREATE IF NOT EXISTS` in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\n\nThe PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "fixedIn": "12.12",
      "contributors": []
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Fix permissions checks in `CREATE INDEX`",
      "description": "The fix for CVE-2022-1552 caused `CREATE INDEX` to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg\\_dump issues `CREATE INDEX` before re-granting permissions.",
      "fixedIn": "12.12",
      "contributors": []
    },
    {
      "cve": "CVE-2022-41862",
      "title": "libpq can leak memory contents after GSSAPI transport encryption initiation fails",
      "description": "A modified server, or an unauthenticated man-in-the-middle, can send a not-zero-terminated error message during setup of GSSAPI (Kerberos) transport encryption. libpq will then copy that string, as well as following bytes in application memory up to the next zero byte, to its error report. Depending on what the calling application does with the error report, this could result in disclosure of application memory contents. There is also a small probability of a crash due to reading beyond the end of memory. Fix by properly zero-terminating the server message. (CVE-2022-41862)",
      "fixedIn": "12.14",
      "contributors": []
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent `CREATE SCHEMA` from defeating changes in `search_path`",
      "description": "Within a `CREATE SCHEMA` command, objects in the prevailing `search_path`, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure `search_path`. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "12.15",
      "contributors": []
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "12.15",
      "contributors": []
    },
    {
      "cve": "CVE-2023-39417",
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "This restriction guards against SQL-injection hazards for trusted extensions.\n\nThe PostgreSQL Project thanks Micah Gates, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "fixedIn": "12.16",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5868",
      "title": "Fix handling of unknown-type arguments in `DISTINCT` `\"any\"` aggregate functions",
      "description": "This error led to a `text`\\-type value being interpreted as an `unknown`\\-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the `text` value.\n\nThe PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "fixedIn": "12.17",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "12.17",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n\nAlso ensure that the `is_superuser` parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n\nThe PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "12.17",
      "contributors": []
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running `REFRESH`. Fix things so that all user-determined code is run as the view's owner, as expected.\n\nThe only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "12.18",
      "contributors": []
    },
    {
      "cve": "CVE-2020-1720",
      "title": "Add missing permissions checks for `ALTER ... DEPENDS ON EXTENSION`",
      "description": "Marking an object as dependent on an extension did not have any privilege check whatsoever. This oversight allowed any user to mark routines, triggers, materialized views, or indexes as droppable by anyone able to drop an extension. Require that the calling user own the specified object (and hence have privilege to drop it). (CVE-2020-1720)",
      "fixedIn": "12.2",
      "contributors": []
    },
    {
      "cve": "CVE-2017-7484",
      "title": "Allow the planner to apply potentially-leaky tests to child-table statistics, if the user can read the corresponding column of the table that's actually named in the query",
      "description": "This change fixes a performance problem for partitioned tables that was created by the fix for CVE-2017-7484\\. That security fix disallowed applying leaky operators to statistics for columns that the current user doesn't have permission to read directly. However, it's somewhat common to grant permissions only on the parent partitioned table and not bother to do so on individual partitions. In such cases, the user can read the column via the parent, so there's no point in this security restriction; it only results in poorer planner estimates than necessary.",
      "fixedIn": "12.2",
      "contributors": []
    },
    {
      "cve": "CVE-2024-7348",
      "title": "Prevent unauthorized code execution during pg\\_dump",
      "description": "An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg\\_dump session with the privileges of the role running pg\\_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter `restrict_nonsystem_relation_kind` that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg\\_dump to set it when available. Note that the attack is prevented only if both pg\\_dump and the server it is dumping from are new enough to have this fix.\n\nThe PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "fixedIn": "12.20",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "fixedIn": "12.20",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10976",
      "title": "Ensure cached plans are marked as dependent on the calling role when RLS applies to a non-top-level table reference",
      "description": "If a CTE, subquery, sublink, security invoker view, or coercion projection in a query references a table with row-level security policies, we neglected to mark the resulting plan as potentially dependent on which role is executing it. This could lead to later query executions in the same session using the wrong plan, and then returning or hiding rows that should have been hidden or returned instead.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2024-10976)",
      "fixedIn": "12.21",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10977",
      "title": "Make libpq discard error messages received during SSL or GSS protocol negotiation",
      "description": "An error message received before encryption negotiation is completed might have been injected by a man-in-the-middle, rather than being real server output. Reporting it opens the door to various security hazards; for example, the message might spoof a query result that a careless user could mistake for correct output. The best answer seems to be to discard such data and rely only on libpq's own report of the connection failure.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2024-10977)",
      "fixedIn": "12.21",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Fix unintended interactions between `SET SESSION AUTHORIZATION` and `SET ROLE`",
      "description": "The SQL standard mandates that `SET SESSION AUTHORIZATION` have a side-effect of doing `SET ROLE NONE`. Our implementation of that was flawed, creating more interaction between the two settings than intended. Notably, rolling back a transaction that had done `SET SESSION AUTHORIZATION` would revert `ROLE` to `NONE` even if that had not been the previous state, so that the effective user ID might now be different from what it had been before the transaction. Transiently setting `session_authorization` in a function `SET` clause had a similar effect. A related bug was that if a parallel worker inspected `current_setting('role')`, it saw `none` even when it should see something else.\n\nThe PostgreSQL Project thanks Tom Lane for reporting this problem. (CVE-2024-10978)",
      "fixedIn": "12.21",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10979",
      "title": "Prevent trusted PL/Perl code from changing environment variables",
      "description": "The ability to manipulate process environment variables such as `PATH` gives an attacker opportunities to execute arbitrary code. Therefore, “trusted” PLs must not offer the ability to do that. To fix `plperl`, replace `%ENV` with a tied hash that rejects any modification attempt with a warning. Untrusted `plperlu` retains the ability to change the environment.\n\nThe PostgreSQL Project thanks Coby Abrams for reporting this problem. (CVE-2024-10979)",
      "fixedIn": "12.21",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Restore functionality of `ALTER {ROLE|DATABASE} SET role`",
      "description": "The fix for CVE-2024-10978 accidentally caused settings for `role` to not be applied if they come from non-interactive sources, including previous `ALTER {ROLE|DATABASE}` commands and the `PGOPTIONS` environment variable.",
      "fixedIn": "12.22",
      "contributors": []
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Set a secure `search_path` in logical replication walsenders and apply workers",
      "description": "A malicious user of either the publisher or subscriber database could potentially cause execution of arbitrary SQL code by the role running replication, which is often a superuser. Some of the risks here are equivalent to those described in CVE-2018-1058, and are mitigated in this patch by ensuring that the replication sender and receiver execute with empty `search_path` settings. (As with CVE-2018-1058, that change might cause problems for under-qualified names used in replicated tables' DDL.) Other risks are inherent in replicating objects that belong to untrusted roles; the most we can do is document that there is a hazard to consider. (CVE-2020-14349)",
      "fixedIn": "12.4",
      "contributors": []
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Make contrib modules' installation scripts more secure",
      "description": "Attacks similar to those described in CVE-2018-1058 could be carried out against an extension installation script, if the attacker can create objects in either the extension's target schema or the schema of some prerequisite extension. Since extensions often require superuser privilege to install, this can open a path to obtaining superuser privilege. To mitigate this risk, be more careful about the `search_path` used to run an installation script; disable `check_function_bodies` within the script; and fix catalog-adjustment queries used in some contrib modules to ensure they are secure. Also provide documentation to help third-party extension authors make their installation scripts secure. This is not a complete solution; extensions that depend on other extensions can still be at risk if installed carelessly. (CVE-2020-14350)",
      "fixedIn": "12.4",
      "contributors": []
    },
    {
      "cve": "CVE-2020-25695",
      "title": "Block `DECLARE CURSOR ... WITH HOLD` and firing of deferred triggers within index expressions and materialized view queries",
      "description": "This is essentially a leak in the “security restricted operation” sandbox mechanism. An attacker having permission to create non-temporary SQL objects could parlay this leak to execute arbitrary SQL code as a superuser.\n\nThe PostgreSQL Project thanks Etienne Stalmans for reporting this problem. (CVE-2020-25695)",
      "fixedIn": "12.5",
      "contributors": []
    },
    {
      "cve": "CVE-2020-25694",
      "title": "Fix usage of complex connection-string parameters in pg\\_dump, pg\\_restore, clusterdb, reindexdb, and vacuumdb",
      "description": "The `-d` parameter of pg\\_dump and pg\\_restore, or the `--maintenance-db` parameter of the other programs mentioned, can be a “connection string” containing multiple connection parameters rather than just a database name. In cases where these programs need to initiate additional connections, such as parallel processing or processing of multiple databases, the connection string was forgotten and just the basic connection parameters (database name, host, port, and username) were used for the additional connections. This could lead to connection failures if the connection string included any other essential information, such as non-default SSL or GSS parameters. Worse, the connection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. (CVE-2020-25694)",
      "fixedIn": "12.5",
      "contributors": []
    },
    {
      "cve": "CVE-2020-25694",
      "title": "When psql's `\\connect` command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used",
      "description": "This avoids cases where reconnection might fail due to omission of relevant parameters, such as non-default SSL or GSS options. Worse, the reconnection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. This is largely the same problem as just cited for pg\\_dump et al, although psql's behavior is more complex since the user may intentionally override some connection parameters. (CVE-2020-25694)",
      "fixedIn": "12.5",
      "contributors": []
    },
    {
      "cve": "CVE-2020-25696",
      "title": "Prevent psql's `\\gset` command from modifying specially-treated variables",
      "description": "`\\gset` without a prefix would overwrite whatever variables the server told it to. Thus, a compromised server could set specially-treated variables such as `PROMPT1`, giving the ability to execute arbitrary shell code in the user's session.\n\nThe PostgreSQL Project thanks Nick Cleaton for reporting this problem. (CVE-2020-25696)",
      "fixedIn": "12.5",
      "contributors": []
    },
    {
      "cve": "CVE-2021-3393",
      "title": "Fix information leakage in constraint-violation error messages",
      "description": "If an `UPDATE` command attempts to move a row to a different partition but finds that it violates some constraint on the new partition, and the columns in that partition are in different physical positions than in the parent table, the error message could reveal the contents of columns that the user does not have `SELECT` privilege on. (CVE-2021-3393)",
      "fixedIn": "12.6",
      "contributors": []
    },
    {
      "cve": "CVE-2021-32027",
      "title": "Prevent integer overflows in array subscripting calculations",
      "description": "The array code previously did not complain about cases where an array's lower bound plus length overflows an integer. This resulted in later entries in the array becoming inaccessible (since their subscripts could not be written as integers), but more importantly it confused subsequent assignment operations. This could lead to memory overwrites, with ensuing crashes or unwanted data modifications. (CVE-2021-32027)",
      "fixedIn": "12.7",
      "contributors": []
    },
    {
      "cve": "CVE-2021-32028",
      "title": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists",
      "description": "If the `UPDATE` list contains any multi-column sub-selects (which give rise to junk columns in addition to the results proper), the `UPDATE` path would end up storing tuples that include the values of the extra junk columns. That's fairly harmless in the short run, but if new columns are added to the table then the values would become accessible, possibly leading to malfunctions if they don't match the datatypes of the added columns.\n\nIn addition, in versions supporting cross-partition updates, a cross-partition update triggered by such a case had the reverse problem: the junk columns were removed from the target list, typically causing an immediate crash due to malfunction of the multi-column sub-select mechanism. (CVE-2021-32028)",
      "fixedIn": "12.7",
      "contributors": []
    },
    {
      "cve": "CVE-2021-32029",
      "title": "Fix possibly-incorrect computation of `UPDATE ... RETURNING` outputs for joined cross-partition updates",
      "description": "If an `UPDATE` for a partitioned table caused a row to be moved to another partition with a physically different row type (for example, one with a different set of dropped columns), computation of `RETURNING` results for that row could produce errors or wrong answers. No error is observed unless the `UPDATE` involves other tables being joined to the target table. (CVE-2021-32029)",
      "fixedIn": "12.7",
      "contributors": []
    },
    {
      "cve": "CVE-2021-3677",
      "title": "Fix mis-planning of repeated application of a projection step",
      "description": "The planner could create an incorrect plan in cases where two ProjectionPaths were stacked on top of each other. The only known way to trigger that situation involves parallel sort operations, but there may be other instances. The result would be crashes or incorrect query results. Disclosure of server memory contents is also possible. (CVE-2021-3677)",
      "fixedIn": "12.8",
      "contributors": []
    },
    {
      "cve": "CVE-2021-3449",
      "title": "Disallow SSL renegotiation more completely",
      "description": "SSL renegotiation has been disabled for some time, but the server would still cooperate with a client-initiated renegotiation request. A maliciously crafted renegotiation request could result in a server crash (see OpenSSL issue CVE-2021-3449). Disable the feature altogether on OpenSSL versions that permit doing so, which are 1.1.0h and newer.",
      "fixedIn": "12.8",
      "contributors": []
    },
    {
      "cve": "CVE-2006-2313",
      "title": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data",
      "description": "An incorrectly-encoded multibyte character near the end of a string could cause various processing loops to run past the string's terminating NUL, with results ranging from no detectable issue to a program crash, depending on what happens to be in the following memory. This is reminiscent of CVE-2006-2313, although these particular cases do not appear to have interesting security consequences.",
      "fixedIn": "12.8",
      "contributors": []
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "fixedIn": "12.9",
      "contributors": [
        "However",
        "a server relying on SSL certificate authentication might well not do so."
      ]
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "fixedIn": "12.9",
      "contributors": []
    },
    {
      "cve": "CVE-2020-25695",
      "title": "Block `DECLARE CURSOR ... WITH HOLD` and firing of deferred triggers within index expressions and materialized view queries",
      "description": "This is essentially a leak in the “security restricted operation” sandbox mechanism. An attacker having permission to create non-temporary SQL objects could parlay this leak to execute arbitrary SQL code as a superuser.\n\nThe PostgreSQL Project thanks Etienne Stalmans for reporting this problem. (CVE-2020-25695)",
      "fixedIn": "13.1",
      "contributors": []
    },
    {
      "cve": "CVE-2020-25694",
      "title": "Fix usage of complex connection-string parameters in pg\\_dump, pg\\_restore, clusterdb, reindexdb, and vacuumdb",
      "description": "The `-d` parameter of pg\\_dump and pg\\_restore, or the `--maintenance-db` parameter of the other programs mentioned, can be a “connection string” containing multiple connection parameters rather than just a database name. In cases where these programs need to initiate additional connections, such as parallel processing or processing of multiple databases, the connection string was forgotten and just the basic connection parameters (database name, host, port, and username) were used for the additional connections. This could lead to connection failures if the connection string included any other essential information, such as non-default SSL or GSS parameters. Worse, the connection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. (CVE-2020-25694)",
      "fixedIn": "13.1",
      "contributors": []
    },
    {
      "cve": "CVE-2020-25694",
      "title": "When psql's `\\connect` command re-uses connection parameters, ensure that all non-overridden parameters from a previous connection string are re-used",
      "description": "This avoids cases where reconnection might fail due to omission of relevant parameters, such as non-default SSL or GSS options. Worse, the reconnection might succeed but not be encrypted as intended, or be vulnerable to man-in-the-middle attacks that the intended connection parameters would have prevented. This is largely the same problem as just cited for pg\\_dump et al, although psql's behavior is more complex since the user may intentionally override some connection parameters. (CVE-2020-25694)",
      "fixedIn": "13.1",
      "contributors": []
    },
    {
      "cve": "CVE-2020-25696",
      "title": "Prevent psql's `\\gset` command from modifying specially-treated variables",
      "description": "`\\gset` without a prefix would overwrite whatever variables the server told it to. Thus, a compromised server could set specially-treated variables such as `PROMPT1`, giving the ability to execute arbitrary shell code in the user's session.\n\nThe PostgreSQL Project thanks Nick Cleaton for reporting this problem. (CVE-2020-25696)",
      "fixedIn": "13.1",
      "contributors": []
    },
    {
      "cve": "CVE-2022-41862",
      "title": "libpq can leak memory contents after GSSAPI transport encryption initiation fails",
      "description": "A modified server, or an unauthenticated man-in-the-middle, can send a not-zero-terminated error message during setup of GSSAPI (Kerberos) transport encryption. libpq will then copy that string, as well as following bytes in application memory up to the next zero byte, to its error report. Depending on what the calling application does with the error report, this could result in disclosure of application memory contents. There is also a small probability of a crash due to reading beyond the end of memory. Fix by properly zero-terminating the server message. (CVE-2022-41862)",
      "fixedIn": "13.10",
      "contributors": []
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent `CREATE SCHEMA` from defeating changes in `search_path`",
      "description": "Within a `CREATE SCHEMA` command, objects in the prevailing `search_path`, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure `search_path`. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "13.11",
      "contributors": []
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "13.11",
      "contributors": []
    },
    {
      "cve": "CVE-2023-39417",
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "This restriction guards against SQL-injection hazards for trusted extensions.\n\nThe PostgreSQL Project thanks Micah Gates, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "fixedIn": "13.12",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5868",
      "title": "Fix handling of unknown-type arguments in `DISTINCT` `\"any\"` aggregate functions",
      "description": "This error led to a `text`\\-type value being interpreted as an `unknown`\\-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the `text` value.\n\nThe PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "fixedIn": "13.13",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "13.13",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n\nAlso ensure that the `is_superuser` parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n\nThe PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "13.13",
      "contributors": []
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running `REFRESH`. Fix things so that all user-determined code is run as the view's owner, as expected.\n\nThe only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "13.14",
      "contributors": []
    },
    {
      "cve": "CVE-2024-7348",
      "title": "Prevent unauthorized code execution during pg\\_dump",
      "description": "An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg\\_dump session with the privileges of the role running pg\\_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter `restrict_nonsystem_relation_kind` that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg\\_dump to set it when available. Note that the attack is prevented only if both pg\\_dump and the server it is dumping from are new enough to have this fix.\n\nThe PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "fixedIn": "13.16",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "fixedIn": "13.16",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10976",
      "title": "Ensure cached plans are marked as dependent on the calling role when RLS applies to a non-top-level table reference",
      "description": "If a CTE, subquery, sublink, security invoker view, or coercion projection in a query references a table with row-level security policies, we neglected to mark the resulting plan as potentially dependent on which role is executing it. This could lead to later query executions in the same session using the wrong plan, and then returning or hiding rows that should have been hidden or returned instead.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2024-10976)",
      "fixedIn": "13.17",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10977",
      "title": "Make libpq discard error messages received during SSL or GSS protocol negotiation",
      "description": "An error message received before encryption negotiation is completed might have been injected by a man-in-the-middle, rather than being real server output. Reporting it opens the door to various security hazards; for example, the message might spoof a query result that a careless user could mistake for correct output. The best answer seems to be to discard such data and rely only on libpq's own report of the connection failure.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2024-10977)",
      "fixedIn": "13.17",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Fix unintended interactions between `SET SESSION AUTHORIZATION` and `SET ROLE`",
      "description": "The SQL standard mandates that `SET SESSION AUTHORIZATION` have a side-effect of doing `SET ROLE NONE`. Our implementation of that was flawed, creating more interaction between the two settings than intended. Notably, rolling back a transaction that had done `SET SESSION AUTHORIZATION` would revert `ROLE` to `NONE` even if that had not been the previous state, so that the effective user ID might now be different from what it had been before the transaction. Transiently setting `session_authorization` in a function `SET` clause had a similar effect. A related bug was that if a parallel worker inspected `current_setting('role')`, it saw `none` even when it should see something else.\n\nThe PostgreSQL Project thanks Tom Lane for reporting this problem. (CVE-2024-10978)",
      "fixedIn": "13.17",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10979",
      "title": "Prevent trusted PL/Perl code from changing environment variables",
      "description": "The ability to manipulate process environment variables such as `PATH` gives an attacker opportunities to execute arbitrary code. Therefore, “trusted” PLs must not offer the ability to do that. To fix `plperl`, replace `%ENV` with a tied hash that rejects any modification attempt with a warning. Untrusted `plperlu` retains the ability to change the environment.\n\nThe PostgreSQL Project thanks Coby Abrams for reporting this problem. (CVE-2024-10979)",
      "fixedIn": "13.17",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Restore functionality of `ALTER {ROLE|DATABASE} SET role`",
      "description": "The fix for CVE-2024-10978 accidentally caused settings for `role` to not be applied if they come from non-interactive sources, including previous `ALTER {ROLE|DATABASE}` commands and the `PGOPTIONS` environment variable.",
      "fixedIn": "13.18",
      "contributors": []
    },
    {
      "cve": "CVE-2021-20229",
      "title": "Fix failure to check per-column `SELECT` privileges in some join queries",
      "description": "In some cases involving joins, the parser failed to record all the columns read by a query in the column-usage bitmaps that are used for permissions checking. Although the executor would still insist on some sort of `SELECT` privilege to run the query, this meant that a user having `SELECT` privilege on only one column of a table could nonetheless read all its columns through a suitably crafted query.\n\nA stored view that is subject to this problem will have incomplete column-usage bitmaps, and thus permissions will still not be enforced properly on the view after updating. In installations that depend on column-level permissions for security, it is recommended to `CREATE OR REPLACE` all user-defined views to cause them to be re-parsed.\n\nThe PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2021-20229)",
      "fixedIn": "13.2",
      "contributors": []
    },
    {
      "cve": "CVE-2021-3393",
      "title": "Fix information leakage in constraint-violation error messages",
      "description": "If an `UPDATE` command attempts to move a row to a different partition but finds that it violates some constraint on the new partition, and the columns in that partition are in different physical positions than in the parent table, the error message could reveal the contents of columns that the user does not have `SELECT` privilege on. (CVE-2021-3393)",
      "fixedIn": "13.2",
      "contributors": []
    },
    {
      "cve": "CVE-2021-32027",
      "title": "Prevent integer overflows in array subscripting calculations",
      "description": "The array code previously did not complain about cases where an array's lower bound plus length overflows an integer. This resulted in later entries in the array becoming inaccessible (since their subscripts could not be written as integers), but more importantly it confused subsequent assignment operations. This could lead to memory overwrites, with ensuing crashes or unwanted data modifications. (CVE-2021-32027)",
      "fixedIn": "13.3",
      "contributors": []
    },
    {
      "cve": "CVE-2021-32028",
      "title": "Fix mishandling of “junk” columns in `INSERT ... ON CONFLICT ... UPDATE` target lists",
      "description": "If the `UPDATE` list contains any multi-column sub-selects (which give rise to junk columns in addition to the results proper), the `UPDATE` path would end up storing tuples that include the values of the extra junk columns. That's fairly harmless in the short run, but if new columns are added to the table then the values would become accessible, possibly leading to malfunctions if they don't match the datatypes of the added columns.\n\nIn addition, in versions supporting cross-partition updates, a cross-partition update triggered by such a case had the reverse problem: the junk columns were removed from the target list, typically causing an immediate crash due to malfunction of the multi-column sub-select mechanism. (CVE-2021-32028)",
      "fixedIn": "13.3",
      "contributors": []
    },
    {
      "cve": "CVE-2021-32029",
      "title": "Fix possibly-incorrect computation of `UPDATE ... RETURNING` outputs for joined cross-partition updates",
      "description": "If an `UPDATE` for a partitioned table caused a row to be moved to another partition with a physically different row type (for example, one with a different set of dropped columns), computation of `RETURNING` results for that row could produce errors or wrong answers. No error is observed unless the `UPDATE` involves other tables being joined to the target table. (CVE-2021-32029)",
      "fixedIn": "13.3",
      "contributors": []
    },
    {
      "cve": "CVE-2021-3677",
      "title": "Fix mis-planning of repeated application of a projection step",
      "description": "The planner could create an incorrect plan in cases where two ProjectionPaths were stacked on top of each other. The only known way to trigger that situation involves parallel sort operations, but there may be other instances. The result would be crashes or incorrect query results. Disclosure of server memory contents is also possible. (CVE-2021-3677)",
      "fixedIn": "13.4",
      "contributors": []
    },
    {
      "cve": "CVE-2021-3449",
      "title": "Disallow SSL renegotiation more completely",
      "description": "SSL renegotiation has been disabled for some time, but the server would still cooperate with a client-initiated renegotiation request. A maliciously crafted renegotiation request could result in a server crash (see OpenSSL issue CVE-2021-3449). Disable the feature altogether on OpenSSL versions that permit doing so, which are 1.1.0h and newer.",
      "fixedIn": "13.4",
      "contributors": []
    },
    {
      "cve": "CVE-2006-2313",
      "title": "In psql and other client programs, avoid overrunning the ends of strings when dealing with invalidly-encoded data",
      "description": "An incorrectly-encoded multibyte character near the end of a string could cause various processing loops to run past the string's terminating NUL, with results ranging from no detectable issue to a program crash, depending on what happens to be in the following memory. This is reminiscent of CVE-2006-2313, although these particular cases do not appear to have interesting security consequences.",
      "fixedIn": "13.4",
      "contributors": []
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "fixedIn": "13.5",
      "contributors": [
        "However",
        "a server relying on SSL certificate authentication might well not do so."
      ]
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "fixedIn": "13.5",
      "contributors": []
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Autovacuum, `CLUSTER`, `CREATE INDEX`, `REINDEX`, `REFRESH MATERIALIZED VIEW`, and pg\\_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "13.7",
      "contributors": []
    },
    {
      "cve": "CVE-2022-2625",
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "This change prevents extension scripts from doing `CREATE OR REPLACE` if there is an existing object that does not belong to the extension. It also prevents `CREATE IF NOT EXISTS` in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\n\nThe PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "fixedIn": "13.8",
      "contributors": []
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Fix permissions checks in `CREATE INDEX`",
      "description": "The fix for CVE-2022-1552 caused `CREATE INDEX` to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg\\_dump issues `CREATE INDEX` before re-granting permissions.",
      "fixedIn": "13.8",
      "contributors": []
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make the server reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could be abused to send faked SQL commands to the server, although that would only work if the server did not demand any authentication data. (However, a server relying on SSL certificate authentication might well not do so.)\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23214)",
      "fixedIn": "14.1",
      "contributors": [
        "However",
        "a server relying on SSL certificate authentication might well not do so."
      ]
    },
    {
      "cve": "CVE-2021-23214",
      "title": "Make libpq reject extraneous data after an SSL or GSS encryption handshake",
      "description": "A man-in-the-middle with the ability to inject data into the TCP connection could stuff some cleartext data into the start of a supposedly encryption-protected database session. This could probably be abused to inject faked responses to the client's first few queries, although other details of libpq's behavior make that harder than it sounds. A different line of attack is to exfiltrate the client's password, or other sensitive data that might be sent early in the session. That has been shown to be possible with a server vulnerable to CVE-2021-23214.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2021-23222)",
      "fixedIn": "14.1",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5868",
      "title": "Fix handling of unknown-type arguments in `DISTINCT` `\"any\"` aggregate functions",
      "description": "This error led to a `text`\\-type value being interpreted as an `unknown`\\-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the `text` value.\n\nThe PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "fixedIn": "14.10",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "14.10",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n\nAlso ensure that the `is_superuser` parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n\nThe PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "14.10",
      "contributors": []
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running `REFRESH`. Fix things so that all user-determined code is run as the view's owner, as expected.\n\nThe only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "14.11",
      "contributors": []
    },
    {
      "cve": "CVE-2024-4317",
      "title": "Restrict visibility of `pg_stats_ext` and `pg_stats_ext_exprs` entries to the table owner",
      "description": "These views failed to hide statistics for expressions that involve columns the accessing user does not have permission to read. View columns such as `most_common_vals` might expose security-relevant data. The potential interactions here are not fully clear, so in the interest of erring on the side of safety, make rows in these views visible only to the owner of the associated table.\n\nThe PostgreSQL Project thanks Lukas Fittl for reporting this problem. (CVE-2024-4317)\n\nBy itself, this fix will only fix the behavior in newly initdb'd database clusters. If you wish to apply this change in an existing cluster, you will need to do the following:\n\n1. Find the SQL script `fix-CVE-2024-4317.sql` in the _`share`_ directory of the PostgreSQL installation (typically located someplace like `/usr/share/postgresql/`). Be sure to use the script appropriate to your PostgreSQL major version. If you do not see this file, either your version is not vulnerable (only v14–v16 are affected) or your minor version is too old to have the fix.\n2. In _each_ database of the cluster, run the `fix-CVE-2024-4317.sql` script as superuser. In psql this would look like  \n\\i /usr/share/postgresql/fix-CVE-2024-4317.sql  \n(adjust the file path as appropriate). Any error probably indicates that you've used the wrong script version. It will not hurt to run the script more than once.\n3. Do not forget to include the `template0` and `template1` databases, or the vulnerability will still exist in databases you create later. To fix `template0`, you'll need to temporarily make it accept connections. Do that with  \nALTER DATABASE template0 WITH ALLOW_CONNECTIONS true;  \nand then after fixing `template0`, undo it with  \nALTER DATABASE template0 WITH ALLOW_CONNECTIONS false;",
      "fixedIn": "14.12",
      "contributors": []
    },
    {
      "cve": "CVE-2024-7348",
      "title": "Prevent unauthorized code execution during pg\\_dump",
      "description": "An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg\\_dump session with the privileges of the role running pg\\_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter `restrict_nonsystem_relation_kind` that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg\\_dump to set it when available. Note that the attack is prevented only if both pg\\_dump and the server it is dumping from are new enough to have this fix.\n\nThe PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "fixedIn": "14.13",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "fixedIn": "14.13",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10976",
      "title": "Ensure cached plans are marked as dependent on the calling role when RLS applies to a non-top-level table reference",
      "description": "If a CTE, subquery, sublink, security invoker view, or coercion projection in a query references a table with row-level security policies, we neglected to mark the resulting plan as potentially dependent on which role is executing it. This could lead to later query executions in the same session using the wrong plan, and then returning or hiding rows that should have been hidden or returned instead.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2024-10976)",
      "fixedIn": "14.14",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10977",
      "title": "Make libpq discard error messages received during SSL or GSS protocol negotiation",
      "description": "An error message received before encryption negotiation is completed might have been injected by a man-in-the-middle, rather than being real server output. Reporting it opens the door to various security hazards; for example, the message might spoof a query result that a careless user could mistake for correct output. The best answer seems to be to discard such data and rely only on libpq's own report of the connection failure.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2024-10977)",
      "fixedIn": "14.14",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Fix unintended interactions between `SET SESSION AUTHORIZATION` and `SET ROLE`",
      "description": "The SQL standard mandates that `SET SESSION AUTHORIZATION` have a side-effect of doing `SET ROLE NONE`. Our implementation of that was flawed, creating more interaction between the two settings than intended. Notably, rolling back a transaction that had done `SET SESSION AUTHORIZATION` would revert `ROLE` to `NONE` even if that had not been the previous state, so that the effective user ID might now be different from what it had been before the transaction. Transiently setting `session_authorization` in a function `SET` clause had a similar effect. A related bug was that if a parallel worker inspected `current_setting('role')`, it saw `none` even when it should see something else.\n\nThe PostgreSQL Project thanks Tom Lane for reporting this problem. (CVE-2024-10978)",
      "fixedIn": "14.14",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10979",
      "title": "Prevent trusted PL/Perl code from changing environment variables",
      "description": "The ability to manipulate process environment variables such as `PATH` gives an attacker opportunities to execute arbitrary code. Therefore, “trusted” PLs must not offer the ability to do that. To fix `plperl`, replace `%ENV` with a tied hash that rejects any modification attempt with a warning. Untrusted `plperlu` retains the ability to change the environment.\n\nThe PostgreSQL Project thanks Coby Abrams for reporting this problem. (CVE-2024-10979)",
      "fixedIn": "14.14",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Restore functionality of `ALTER {ROLE|DATABASE} SET role`",
      "description": "The fix for CVE-2024-10978 accidentally caused settings for `role` to not be applied if they come from non-interactive sources, including previous `ALTER {ROLE|DATABASE}` commands and the `PGOPTIONS` environment variable.",
      "fixedIn": "14.15",
      "contributors": []
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Confine additional operations within “security restricted operation” sandboxes",
      "description": "Autovacuum, `CLUSTER`, `CREATE INDEX`, `REINDEX`, `REFRESH MATERIALIZED VIEW`, and pg\\_amcheck activated the “security restricted operation” protection mechanism too late, or even not at all in some code paths. A user having permission to create non-temporary objects within a database could define an object that would execute arbitrary SQL code with superuser permissions the next time that autovacuum processed the object, or that some superuser ran one of the affected commands against it.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2022-1552)",
      "fixedIn": "14.3",
      "contributors": []
    },
    {
      "cve": "CVE-2022-2625",
      "title": "Do not let extension scripts replace objects not already belonging to the extension",
      "description": "This change prevents extension scripts from doing `CREATE OR REPLACE` if there is an existing object that does not belong to the extension. It also prevents `CREATE IF NOT EXISTS` in the same situation. This prevents a form of trojan-horse attack in which a hostile database user could become the owner of an extension object and then modify it to compromise future uses of the object by other users. As a side benefit, it also reduces the risk of accidentally replacing objects one did not mean to.\n\nThe PostgreSQL Project thanks Sven Klemm for reporting this problem. (CVE-2022-2625)",
      "fixedIn": "14.5",
      "contributors": []
    },
    {
      "cve": "CVE-2022-1552",
      "title": "Fix permissions checks in `CREATE INDEX`",
      "description": "The fix for CVE-2022-1552 caused `CREATE INDEX` to apply the table owner's permissions while performing lookups of operator classes and other objects, where formerly the calling user's permissions were used. This broke dump/restore scenarios, because pg\\_dump issues `CREATE INDEX` before re-granting permissions.",
      "fixedIn": "14.5",
      "contributors": []
    },
    {
      "cve": "CVE-2022-41862",
      "title": "libpq can leak memory contents after GSSAPI transport encryption initiation fails",
      "description": "A modified server, or an unauthenticated man-in-the-middle, can send a not-zero-terminated error message during setup of GSSAPI (Kerberos) transport encryption. libpq will then copy that string, as well as following bytes in application memory up to the next zero byte, to its error report. Depending on what the calling application does with the error report, this could result in disclosure of application memory contents. There is also a small probability of a crash due to reading beyond the end of memory. Fix by properly zero-terminating the server message. (CVE-2022-41862)",
      "fixedIn": "14.7",
      "contributors": []
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent `CREATE SCHEMA` from defeating changes in `search_path`",
      "description": "Within a `CREATE SCHEMA` command, objects in the prevailing `search_path`, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure `search_path`. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "14.8",
      "contributors": []
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "14.8",
      "contributors": []
    },
    {
      "cve": "CVE-2023-39417",
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "This restriction guards against SQL-injection hazards for trusted extensions.\n\nThe PostgreSQL Project thanks Micah Gates, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "fixedIn": "14.9",
      "contributors": []
    },
    {
      "cve": "CVE-2018-1058",
      "title": "Remove `PUBLIC` creation permission on the [public schema](https://www.postgresql.org/docs/15/ddl-schemas.html#DDL-SCHEMAS-PUBLIC \"5.9.2. The Public Schema\")",
      "description": "The new default is one of the secure schema usage patterns that [Section 5.9.6](https://www.postgresql.org/docs/15/ddl-schemas.html#DDL-SCHEMAS-PATTERNS \"5.9.6. Usage Patterns\") has recommended since the security release for CVE-2018-1058\\. The change applies to new database clusters and to newly-created databases in existing clusters. Upgrading a cluster or restoring a database dump will preserve `public`'s existing permissions.\n\nFor existing databases, especially those having multiple users, consider revoking `CREATE` permission on the `public` schema to adopt this new default. For new databases having no need to defend against insider threats, granting `CREATE` permission will yield the behavior of prior releases.",
      "fixedIn": "15.0",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Restore functionality of `ALTER {ROLE|DATABASE} SET role`",
      "description": "The fix for CVE-2024-10978 accidentally caused settings for `role` to not be applied if they come from non-interactive sources, including previous `ALTER {ROLE|DATABASE}` commands and the `PGOPTIONS` environment variable.",
      "fixedIn": "15.10",
      "contributors": []
    },
    {
      "cve": "CVE-2022-41862",
      "title": "libpq can leak memory contents after GSSAPI transport encryption initiation fails",
      "description": "A modified server, or an unauthenticated man-in-the-middle, can send a not-zero-terminated error message during setup of GSSAPI (Kerberos) transport encryption. libpq will then copy that string, as well as following bytes in application memory up to the next zero byte, to its error report. Depending on what the calling application does with the error report, this could result in disclosure of application memory contents. There is also a small probability of a crash due to reading beyond the end of memory. Fix by properly zero-terminating the server message. (CVE-2022-41862)",
      "fixedIn": "15.2",
      "contributors": []
    },
    {
      "cve": "CVE-2023-2454",
      "title": "Prevent `CREATE SCHEMA` from defeating changes in `search_path`",
      "description": "Within a `CREATE SCHEMA` command, objects in the prevailing `search_path`, as well as those in the newly-created schema, would be visible even within a called function or script that attempted to set a secure `search_path`. This could allow any user having permission to create a schema to hijack the privileges of a security definer function or extension script.\n\nThe PostgreSQL Project thanks Alexander Lakhin for reporting this problem. (CVE-2023-2454)",
      "fixedIn": "15.3",
      "contributors": []
    },
    {
      "cve": "CVE-2023-2455",
      "title": "Enforce row-level security policies correctly after inlining a set-returning function",
      "description": "If a set-returning SQL-language function refers to a table having row-level security policies, and it can be inlined into a calling query, those RLS policies would not get enforced properly in some cases involving re-using a cached plan under a different role. This could allow a user to see or modify rows that should have been invisible.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2023-2455)",
      "fixedIn": "15.3",
      "contributors": []
    },
    {
      "cve": "CVE-2023-39417",
      "title": "Disallow substituting a schema or owner name into an extension script if the name contains a quote, backslash, or dollar sign",
      "description": "This restriction guards against SQL-injection hazards for trusted extensions.\n\nThe PostgreSQL Project thanks Micah Gates, Valerie Woolard, Tim Carey-Smith, and Christoph Berg for reporting this problem. (CVE-2023-39417)",
      "fixedIn": "15.4",
      "contributors": []
    },
    {
      "cve": "CVE-2023-39418",
      "title": "Fix `MERGE` to enforce row security policies properly",
      "description": "When `MERGE` performs an `UPDATE` action, it should enforce any `UPDATE` or `SELECT` RLS policies defined on the target table, to be consistent with the way that a plain `UPDATE` with a `WHERE` clause works. Instead it was enforcing `INSERT` RLS policies for both `INSERT` and `UPDATE` actions.\n\nIn addition, when `MERGE` performs a `DO NOTHING` action, it applied the target table's `DELETE` RLS policies to existing rows, even though those rows are not being deleted. While it's not a security problem, this could result in unwanted errors.\n\nThe PostgreSQL Project thanks Dean Rasheed for reporting this problem. (CVE-2023-39418)",
      "fixedIn": "15.4",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5868",
      "title": "Fix handling of unknown-type arguments in `DISTINCT` `\"any\"` aggregate functions",
      "description": "This error led to a `text`\\-type value being interpreted as an `unknown`\\-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the `text` value.\n\nThe PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "fixedIn": "15.5",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "15.5",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n\nAlso ensure that the `is_superuser` parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n\nThe PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "15.5",
      "contributors": []
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running `REFRESH`. Fix things so that all user-determined code is run as the view's owner, as expected.\n\nThe only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "15.6",
      "contributors": []
    },
    {
      "cve": "CVE-2024-4317",
      "title": "Restrict visibility of `pg_stats_ext` and `pg_stats_ext_exprs` entries to the table owner",
      "description": "These views failed to hide statistics for expressions that involve columns the accessing user does not have permission to read. View columns such as `most_common_vals` might expose security-relevant data. The potential interactions here are not fully clear, so in the interest of erring on the side of safety, make rows in these views visible only to the owner of the associated table.\n\nThe PostgreSQL Project thanks Lukas Fittl for reporting this problem. (CVE-2024-4317)\n\nBy itself, this fix will only fix the behavior in newly initdb'd database clusters. If you wish to apply this change in an existing cluster, you will need to do the following:\n\n1. Find the SQL script `fix-CVE-2024-4317.sql` in the _`share`_ directory of the PostgreSQL installation (typically located someplace like `/usr/share/postgresql/`). Be sure to use the script appropriate to your PostgreSQL major version. If you do not see this file, either your version is not vulnerable (only v14–v16 are affected) or your minor version is too old to have the fix.\n2. In _each_ database of the cluster, run the `fix-CVE-2024-4317.sql` script as superuser. In psql this would look like  \n\\i /usr/share/postgresql/fix-CVE-2024-4317.sql  \n(adjust the file path as appropriate). Any error probably indicates that you've used the wrong script version. It will not hurt to run the script more than once.\n3. Do not forget to include the `template0` and `template1` databases, or the vulnerability will still exist in databases you create later. To fix `template0`, you'll need to temporarily make it accept connections. Do that with  \nALTER DATABASE template0 WITH ALLOW_CONNECTIONS true;  \nand then after fixing `template0`, undo it with  \nALTER DATABASE template0 WITH ALLOW_CONNECTIONS false;",
      "fixedIn": "15.7",
      "contributors": []
    },
    {
      "cve": "CVE-2024-7348",
      "title": "Prevent unauthorized code execution during pg\\_dump",
      "description": "An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg\\_dump session with the privileges of the role running pg\\_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter `restrict_nonsystem_relation_kind` that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg\\_dump to set it when available. Note that the attack is prevented only if both pg\\_dump and the server it is dumping from are new enough to have this fix.\n\nThe PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "fixedIn": "15.8",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "fixedIn": "15.8",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10976",
      "title": "Ensure cached plans are marked as dependent on the calling role when RLS applies to a non-top-level table reference",
      "description": "If a CTE, subquery, sublink, security invoker view, or coercion projection in a query references a table with row-level security policies, we neglected to mark the resulting plan as potentially dependent on which role is executing it. This could lead to later query executions in the same session using the wrong plan, and then returning or hiding rows that should have been hidden or returned instead.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2024-10976)",
      "fixedIn": "15.9",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10977",
      "title": "Make libpq discard error messages received during SSL or GSS protocol negotiation",
      "description": "An error message received before encryption negotiation is completed might have been injected by a man-in-the-middle, rather than being real server output. Reporting it opens the door to various security hazards; for example, the message might spoof a query result that a careless user could mistake for correct output. The best answer seems to be to discard such data and rely only on libpq's own report of the connection failure.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2024-10977)",
      "fixedIn": "15.9",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Fix unintended interactions between `SET SESSION AUTHORIZATION` and `SET ROLE`",
      "description": "The SQL standard mandates that `SET SESSION AUTHORIZATION` have a side-effect of doing `SET ROLE NONE`. Our implementation of that was flawed, creating more interaction between the two settings than intended. Notably, rolling back a transaction that had done `SET SESSION AUTHORIZATION` would revert `ROLE` to `NONE` even if that had not been the previous state, so that the effective user ID might now be different from what it had been before the transaction. Transiently setting `session_authorization` in a function `SET` clause had a similar effect. A related bug was that if a parallel worker inspected `current_setting('role')`, it saw `none` even when it should see something else.\n\nThe PostgreSQL Project thanks Tom Lane for reporting this problem. (CVE-2024-10978)",
      "fixedIn": "15.9",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10979",
      "title": "Prevent trusted PL/Perl code from changing environment variables",
      "description": "The ability to manipulate process environment variables such as `PATH` gives an attacker opportunities to execute arbitrary code. Therefore, “trusted” PLs must not offer the ability to do that. To fix `plperl`, replace `%ENV` with a tied hash that rejects any modification attempt with a warning. Untrusted `plperlu` retains the ability to change the environment.\n\nThe PostgreSQL Project thanks Coby Abrams for reporting this problem. (CVE-2024-10979)",
      "fixedIn": "15.9",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5868",
      "title": "Fix handling of unknown-type arguments in `DISTINCT` `\"any\"` aggregate functions",
      "description": "This error led to a `text`\\-type value being interpreted as an `unknown`\\-type value (that is, a zero-terminated string) at runtime. This could result in disclosure of server memory following the `text` value.\n\nThe PostgreSQL Project thanks Jingzhou Fu for reporting this problem. (CVE-2023-5868)",
      "fixedIn": "16.1",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect integer overflow while computing new array dimensions",
      "description": "When assigning new elements to array subscripts that are outside the current array bounds, an undetected integer overflow could occur in edge cases. Memory stomps that are potentially exploitable for arbitrary code execution are possible, and so is disclosure of server memory.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2023-5869)",
      "fixedIn": "16.1",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5870",
      "title": "Prevent the `pg_signal_backend` role from signalling background workers and autovacuum processes",
      "description": "The documentation says that `pg_signal_backend` cannot issue signals to superuser-owned processes. It was able to signal these background processes, though, because they advertise a role OID of zero. Treat that as indicating superuser ownership. The security implications of cancelling one of these process types are fairly small so far as the core code goes (we'll just start another one), but extensions might add background workers that are more vulnerable.\n\nAlso ensure that the `is_superuser` parameter is set correctly in such processes. No specific security consequences are known for that oversight, but it might be significant for some extensions.\n\nThe PostgreSQL Project thanks Hemanth Sandrana and Mahendrakar Srinivasarao for reporting this problem. (CVE-2023-5870)",
      "fixedIn": "16.1",
      "contributors": []
    },
    {
      "cve": "CVE-2024-0985",
      "title": "Tighten security restrictions within `REFRESH MATERIALIZED VIEW CONCURRENTLY`",
      "description": "One step of a concurrent refresh command was run under weak security restrictions. If a materialized view's owner could persuade a superuser or other high-privileged user to perform a concurrent refresh on that view, the view's owner could control code executed with the privileges of the user running `REFRESH`. Fix things so that all user-determined code is run as the view's owner, as expected.\n\nThe only known exploit for this error does not work in PostgreSQL 16.0 and later, so it may be that v16 is not vulnerable in practice.\n\nThe PostgreSQL Project thanks Pedro Gallegos for reporting this problem. (CVE-2024-0985)",
      "fixedIn": "16.2",
      "contributors": []
    },
    {
      "cve": "CVE-2024-4317",
      "title": "Restrict visibility of `pg_stats_ext` and `pg_stats_ext_exprs` entries to the table owner",
      "description": "These views failed to hide statistics for expressions that involve columns the accessing user does not have permission to read. View columns such as `most_common_vals` might expose security-relevant data. The potential interactions here are not fully clear, so in the interest of erring on the side of safety, make rows in these views visible only to the owner of the associated table.\n\nThe PostgreSQL Project thanks Lukas Fittl for reporting this problem. (CVE-2024-4317)\n\nBy itself, this fix will only fix the behavior in newly initdb'd database clusters. If you wish to apply this change in an existing cluster, you will need to do the following:\n\n1. Find the SQL script `fix-CVE-2024-4317.sql` in the _`share`_ directory of the PostgreSQL installation (typically located someplace like `/usr/share/postgresql/`). Be sure to use the script appropriate to your PostgreSQL major version. If you do not see this file, either your version is not vulnerable (only v14–v16 are affected) or your minor version is too old to have the fix.\n2. In _each_ database of the cluster, run the `fix-CVE-2024-4317.sql` script as superuser. In psql this would look like  \n\\i /usr/share/postgresql/fix-CVE-2024-4317.sql  \n(adjust the file path as appropriate). Any error probably indicates that you've used the wrong script version. It will not hurt to run the script more than once.\n3. Do not forget to include the `template0` and `template1` databases, or the vulnerability will still exist in databases you create later. To fix `template0`, you'll need to temporarily make it accept connections. Do that with  \nALTER DATABASE template0 WITH ALLOW_CONNECTIONS true;  \nand then after fixing `template0`, undo it with  \nALTER DATABASE template0 WITH ALLOW_CONNECTIONS false;",
      "fixedIn": "16.3",
      "contributors": []
    },
    {
      "cve": "CVE-2024-7348",
      "title": "Prevent unauthorized code execution during pg\\_dump",
      "description": "An attacker able to create and drop non-temporary objects could inject SQL code that would be executed by a concurrent pg\\_dump session with the privileges of the role running pg\\_dump (which is often a superuser). The attack involves replacing a sequence or similar object with a view or foreign table that will execute malicious code. To prevent this, introduce a new server parameter `restrict_nonsystem_relation_kind` that can disable expansion of non-builtin views as well as access to foreign tables, and teach pg\\_dump to set it when available. Note that the attack is prevented only if both pg\\_dump and the server it is dumping from are new enough to have this fix.\n\nThe PostgreSQL Project thanks Noah Misch for reporting this problem. (CVE-2024-7348)",
      "fixedIn": "16.4",
      "contributors": []
    },
    {
      "cve": "CVE-2023-5869",
      "title": "Detect another integer overflow case while computing new array dimensions",
      "description": "Reject applying array dimensions `[-2147483648:2147483647]` to an empty array. This is closely related to CVE-2023-5869, but appears harmless since the array still ends up empty.",
      "fixedIn": "16.4",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10976",
      "title": "Ensure cached plans are marked as dependent on the calling role when RLS applies to a non-top-level table reference",
      "description": "If a CTE, subquery, sublink, security invoker view, or coercion projection in a query references a table with row-level security policies, we neglected to mark the resulting plan as potentially dependent on which role is executing it. This could lead to later query executions in the same session using the wrong plan, and then returning or hiding rows that should have been hidden or returned instead.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2024-10976)",
      "fixedIn": "16.5",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10977",
      "title": "Make libpq discard error messages received during SSL or GSS protocol negotiation",
      "description": "An error message received before encryption negotiation is completed might have been injected by a man-in-the-middle, rather than being real server output. Reporting it opens the door to various security hazards; for example, the message might spoof a query result that a careless user could mistake for correct output. The best answer seems to be to discard such data and rely only on libpq's own report of the connection failure.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2024-10977)",
      "fixedIn": "16.5",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Fix unintended interactions between `SET SESSION AUTHORIZATION` and `SET ROLE`",
      "description": "The SQL standard mandates that `SET SESSION AUTHORIZATION` have a side-effect of doing `SET ROLE NONE`. Our implementation of that was flawed, creating more interaction between the two settings than intended. Notably, rolling back a transaction that had done `SET SESSION AUTHORIZATION` would revert `ROLE` to `NONE` even if that had not been the previous state, so that the effective user ID might now be different from what it had been before the transaction. Transiently setting `session_authorization` in a function `SET` clause had a similar effect. A related bug was that if a parallel worker inspected `current_setting('role')`, it saw `none` even when it should see something else.\n\nThe PostgreSQL Project thanks Tom Lane for reporting this problem. (CVE-2024-10978)",
      "fixedIn": "16.5",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10979",
      "title": "Prevent trusted PL/Perl code from changing environment variables",
      "description": "The ability to manipulate process environment variables such as `PATH` gives an attacker opportunities to execute arbitrary code. Therefore, “trusted” PLs must not offer the ability to do that. To fix `plperl`, replace `%ENV` with a tied hash that rejects any modification attempt with a warning. Untrusted `plperlu` retains the ability to change the environment.\n\nThe PostgreSQL Project thanks Coby Abrams for reporting this problem. (CVE-2024-10979)",
      "fixedIn": "16.5",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Restore functionality of `ALTER {ROLE|DATABASE} SET role`",
      "description": "The fix for CVE-2024-10978 accidentally caused settings for `role` to not be applied if they come from non-interactive sources, including previous `ALTER {ROLE|DATABASE}` commands and the `PGOPTIONS` environment variable.",
      "fixedIn": "16.6",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10976",
      "title": "Ensure cached plans are marked as dependent on the calling role when RLS applies to a non-top-level table reference",
      "description": "If a CTE, subquery, sublink, security invoker view, or coercion projection in a query references a table with row-level security policies, we neglected to mark the resulting plan as potentially dependent on which role is executing it. This could lead to later query executions in the same session using the wrong plan, and then returning or hiding rows that should have been hidden or returned instead.\n\nThe PostgreSQL Project thanks Wolfgang Walther for reporting this problem. (CVE-2024-10976)",
      "fixedIn": "17.1",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10977",
      "title": "Make libpq discard error messages received during SSL or GSS protocol negotiation",
      "description": "An error message received before encryption negotiation is completed might have been injected by a man-in-the-middle, rather than being real server output. Reporting it opens the door to various security hazards; for example, the message might spoof a query result that a careless user could mistake for correct output. The best answer seems to be to discard such data and rely only on libpq's own report of the connection failure.\n\nThe PostgreSQL Project thanks Jacob Champion for reporting this problem. (CVE-2024-10977)",
      "fixedIn": "17.1",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Fix unintended interactions between `SET SESSION AUTHORIZATION` and `SET ROLE`",
      "description": "The SQL standard mandates that `SET SESSION AUTHORIZATION` have a side-effect of doing `SET ROLE NONE`. Our implementation of that was flawed, creating more interaction between the two settings than intended. Notably, rolling back a transaction that had done `SET SESSION AUTHORIZATION` would revert `ROLE` to `NONE` even if that had not been the previous state, so that the effective user ID might now be different from what it had been before the transaction. Transiently setting `session_authorization` in a function `SET` clause had a similar effect. A related bug was that if a parallel worker inspected `current_setting('role')`, it saw `none` even when it should see something else.\n\nThe PostgreSQL Project thanks Tom Lane for reporting this problem. (CVE-2024-10978)",
      "fixedIn": "17.1",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10979",
      "title": "Prevent trusted PL/Perl code from changing environment variables",
      "description": "The ability to manipulate process environment variables such as `PATH` gives an attacker opportunities to execute arbitrary code. Therefore, “trusted” PLs must not offer the ability to do that. To fix `plperl`, replace `%ENV` with a tied hash that rejects any modification attempt with a warning. Untrusted `plperlu` retains the ability to change the environment.\n\nThe PostgreSQL Project thanks Coby Abrams for reporting this problem. (CVE-2024-10979)",
      "fixedIn": "17.1",
      "contributors": []
    },
    {
      "cve": "CVE-2024-10978",
      "title": "Restore functionality of `ALTER {ROLE|DATABASE} SET role`",
      "description": "The fix for CVE-2024-10978 accidentally caused settings for `role` to not be applied if they come from non-interactive sources, including previous `ALTER {ROLE|DATABASE}` commands and the `PGOPTIONS` environment variable.",
      "fixedIn": "17.2",
      "contributors": []
    }
  ]
}
